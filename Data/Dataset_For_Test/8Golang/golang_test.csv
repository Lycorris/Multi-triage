54649,"runtime:  imperfection in gc trace lines<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nIt looks, unlike Go 1.18, Go 1.19 uses the real stack sizes in calculating target memory.\r\nBut the `# MB stacks` items in the gc trace lines still show the 2<sup>n</sup> stack memory block sizes.\r\n\r\nBTW, in the runtime docs, https://pkg.go.dev/runtime, `# MB stacks` and `# MB globals` are listed but not shown in the format line.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 1 @0.016s 19%: 0.053+36+0.016 ms clock, 0.21+36/4.9/39+0.066 ms cpu, 3->3->3 MB, 4 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""math/rand""\r\n\t""time""\r\n)\r\n\r\nvar x [512][]*int\r\n\r\nfunc garbageProducer() {\r\n\trand.Seed(time.Now().UnixNano())\r\n\r\n\tfor i := 0; ; i++ {\r\n\t\tn := 6 + rand.Intn(6)\r\n\t\tfor j := range x {\r\n\t\t\tx[j] = make([]*int, 1<<n)\r\n\t\t\tfor k := range x[j] {\r\n\t\t\t\tx[j][k] = new(int)\r\n\t\t\t}\r\n\t\t}\r\n\t\ttime.Sleep(time.Second / 1000)\r\n\t}\r\n}\r\n\r\nfunc bigStack(c chan int, v byte) byte {\r\n\tdefer func() {\r\n\t\tc <- 1\r\n\t}()\r\n\tvar s = []byte{33 << 20: 0} // on stack\r\n\tfor i := range s { s[i] = v }\r\n\t\t\r\n\treturn s[v]\r\n}\r\n\r\nfunc main() {\r\n\tgo bigStack(nil, 123)\r\n\tgo bigStack(nil, 123)\r\n\tgarbageProducer()\r\n}\r\n```\r\n\r\nIt looks, unlike Go 1.18, Go 1.19 uses the real stack sizes in calculating target memory.\r\nBut the `# MB stacks` items in the gc trace lines still show the 2<sup>n</sup> stack memory block sizes.\r\n\r\nBTW, in the runtime docs, https://pkg.go.dev/runtime, `# MB stacks` and `# MB globals` are listed but not shown in the format line.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 1 @0.016s 19%: 0.053+36+0.016 ms clock, 0.21+36/4.9/39+0.066 ms cpu, 3->3->3 MB, 4 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n\r\n","Go\r\npackage main\r\n\r\nimport (\r\n\t""math/rand""\r\n\t""time""\r\n)\r\n\r\nvar x [512][]*int\r\n\r\nfunc garbageProducer() {\r\n\trand.Seed(time.Now().UnixNano())\r\n\r\n\tfor i := 0; ; i++ {\r\n\t\tn := 6 + rand.Intn(6)\r\n\t\tfor j := range x {\r\n\t\t\tx[j] = make([]*int, 1<<n)\r\n\t\t\tfor k := range x[j] {\r\n\t\t\t\tx[j][k] = new(int)\r\n\t\t\t}\r\n\t\t}\r\n\t\ttime.Sleep(time.Second / 1000)\r\n\t}\r\n}\r\n\r\nfunc bigStack(c chan int, v byte) byte {\r\n\tdefer func() {\r\n\t\tc <- 1\r\n\t}()\r\n\tvar s = []byte{33 << 20: 0} // on stack\r\n\tfor i := range s { s[i] = v }\r\n\t\t\r\n\treturn s[v]\r\n}\r\n\r\nfunc main() {\r\n\tgo bigStack(nil, 123)\r\n\tgo bigStack(nil, 123)\r\n\tgarbageProducer()\r\n}\r\n"
54628,"reflect: Value.SetIterXXX allows setting values that are unexportedConsider [the following snippet](https://go.dev/play/p/0ThKKlGEhYf):\r\n\r\nThe newer `Value.SetIterXXX` APIs added in Go 1.18 provide a way to circumvent the unexported field checks, thus allowing users to obtain an interfaceable value of an unexported field without the use of `unsafe`.",NeedsFix|FrozenDueToAge|compiler/runtime,dsnet,"Consider [the following snippet](https://go.dev/play/p/0ThKKlGEhYf):\r\n```go\r\nv := reflect.ValueOf(struct {\r\n\tm map[string]string // m is exported, we should never be able to get an interfaceable value of it or any sub-elements of it\r\n}{m: map[string]string{""hello"": ""goodbye""}})\r\nvm := v.FieldByName(""m"")\r\nfmt.Println(vm.CanInterface()) // correctly prints false\r\n\r\nve := vm.MapIndex(reflect.ValueOf(""hello""))\r\nfmt.Println(ve.CanInterface()) // correctly prints false\r\n\r\nve = reflect.New(reflect.TypeOf("""")).Elem()\r\nfor iter := vm.MapRange(); iter.Next(); {\r\n\tve.SetIterValue(iter)          // incorrectly succeeds; expect panic due to read-only bit being false\r\n\r\n\tvv := iter.Value()             // older API for obtain a map value; it propagates the read-only bit check\r\n\tfmt.Println(vv.CanInterface()) // correctly prints false\r\n\tve.Set(vv)                     // correctly panics\r\n}\r\n```\r\nThe newer `Value.SetIterXXX` APIs added in Go 1.18 provide a way to circumvent the unexported field checks, thus allowing users to obtain an interfaceable value of an unexported field without the use of `unsafe`.","go\r\nv := reflect.ValueOf(struct {\r\n\tm map[string]string // m is exported, we should never be able to get an interfaceable value of it or any sub-elements of it\r\n}{m: map[string]string{""hello"": ""goodbye""}})\r\nvm := v.FieldByName(""m"")\r\nfmt.Println(vm.CanInterface()) // correctly prints false\r\n\r\nve := vm.MapIndex(reflect.ValueOf(""hello""))\r\nfmt.Println(ve.CanInterface()) // correctly prints false\r\n\r\nve = reflect.New(reflect.TypeOf("""")).Elem()\r\nfor iter := vm.MapRange(); iter.Next(); {\r\n\tve.SetIterValue(iter)          // incorrectly succeeds; expect panic due to read-only bit being false\r\n\r\n\tvv := iter.Value()             // older API for obtain a map value; it propagates the read-only bit check\r\n\tfmt.Println(vv.CanInterface()) // correctly prints false\r\n\tve.Set(vv)                     // correctly panics\r\n}\r\n"
54590,"crypto/x509: SecPolicyCreateSSL returns null when binary is called with strange path<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/william/Library/Caches/go-build""\r\nGOENV=""/Users/william/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/william/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/william/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.19/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.19/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/william/dev/oss/repro-go-1/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/go-build670127871=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRunning a compiled Go binary with a strange path causes crashes that are very similar to #51759, so perhaps the crash is rather in `crypto/x509` than in `net/http`.\r\n\r\nI can only reproduce it when calling the Go binary with a path that includes a double slash `//` and a directory that starts with a dot `.`. I have no idea why this is or how to further debug is.\r\n\r\nThis reproducing script sets up a minimal folder structure, build the tool and runs it in a way that causes crashes:\r\n\r\n\r\nCalling it e.g. with `$(pwd)/dir/../.dot/repro`, `$(pwd)//.dot/repro`,  or `$(pwd)/.dot/repro` does not cause the same crash.\r\n\r\n### What did you expect to see?\r\n\r\nHTML output from https://google.com.\r\n\r\n### What did you see instead?\r\n\r\nPanic, see hidden long panic text below:\r\n<details><summary>Full panic output</summary><br>\r\n<pre>\r\ngo: creating new go.mod: module repro\r\nSIGTRAP: trace trap\r\nPC=0x197eb5458 m=5 sigcode=0\r\n\r\ngoroutine 0 [idle]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 34 [syscall]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 1 [select]:\r\nruntime.gopark(0x1400013f7b0?, 0x4?, 0xe8?, 0xf4?, 0x1400013f658?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400013f4c0 sp=0x1400013f4a0 pc=0x1027db014\r\nruntime.selectgo(0x1400013f7b0, 0x1400013f650, 0x1400011ad20?, 0x0, 0x1400013f628?, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/select.go:328 +0x688 fp=0x1400013f5e0 sp=0x1400013f4c0 pc=0x1027ead78\r\nnet/http.(*Transport).getConn(0x102bbb7c0, 0x140001581c0, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1376 +0x448 fp=0x1400013f800 sp=0x1400013f5e0 pc=0x10296b588\r\nnet/http.(*Transport).roundTrip(0x102bbb7c0, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:582 +0x658 fp=0x1400013fa30 sp=0x1400013f800 pc=0x102967978\r\nnet/http.(*Transport).RoundTrip(0x10?, 0x102a5ab80?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/roundtrip.go:17 +0x1c fp=0x1400013fa50 sp=0x1400013fa30 pc=0x10295f12c\r\nnet/http.send(0x1400017a000, {0x102a5ab80, 0x102bbb7c0}, {0x10293fd8c?, 0x8?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:251 +0x4f4 fp=0x1400013fc50 sp=0x1400013fa50 pc=0x10293e634\r\nnet/http.(*Client).send(0x102bc0d40, 0x1400017a000, {0x1400013fd08?, 0x1027b118c?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:175 +0x98 fp=0x1400013fcd0 sp=0x1400013fc50 pc=0x10293dfd8\r\nnet/http.(*Client).do(0x102bc0d40, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:715 +0x6e8 fp=0x1400013fed0 sp=0x1400013fcd0 pc=0x10293fde8\r\nnet/http.(*Client).Do(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:581\r\nnet/http.(*Client).Get(0x1027a5514?, {0x102980a38?, 0x1400004a768?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:479 +0x78 fp=0x1400013ff30 sp=0x1400013fed0 pc=0x10293f5f8\r\nnet/http.Get(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:448\r\nmain.main()\r\n\t/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/tmp.ycttMIXQ/main.go:10 +0x34 fp=0x1400013ff70 sp=0x1400013ff30 pc=0x10297c834\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:250 +0x24c fp=0x1400013ffd0 sp=0x1400013ff70 pc=0x1027dac4c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013ffd0 sp=0x1400013ffd0 pc=0x102807164\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004afa0 sp=0x1400004af80 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:302 +0xac fp=0x1400004afd0 sp=0x1400004afa0 pc=0x1027daeac\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004afd0 sp=0x1400004afd0 pc=0x102807164\r\ncreated by runtime.init.6\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:290 +0x24\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004b770 sp=0x1400004b750 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.bgsweep(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcsweep.go:278 +0xa4 fp=0x1400004b7b0 sp=0x1400004b770 pc=0x1027c8534\r\nruntime.gcenable.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x28 fp=0x1400004b7d0 sp=0x1400004b7b0 pc=0x1027bcd78\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004b7d0 sp=0x1400004b7d0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x74\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x1029f1850?, 0x1?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004bf50 sp=0x1400004bf30 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.(*scavengerState).park(0x102bc1060)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:389 +0x5c fp=0x1400004bf80 sp=0x1400004bf50 pc=0x1027c64ec\r\nruntime.bgscavenge(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:617 +0x44 fp=0x1400004bfb0 sp=0x1400004bf80 pc=0x1027c6a94\r\nruntime.gcenable.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0x28 fp=0x1400004bfd0 sp=0x1400004bfb0 pc=0x1027bcd18\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004bfd0 sp=0x1400004bfd0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0xb8\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x14000046580 sp=0x14000046560 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:180 +0x120 fp=0x140000467d0 sp=0x14000046580 pc=0x1027bbfa0\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x140000467d0 sp=0x140000467d0 pc=0x102807164\r\ncreated by runtime.createfing\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:157 +0x84\r\n\r\ngoroutine 19 [chan receive]:\r\nruntime.gopark(0x102bf1c60?, 0x102cfc5e0?, 0x78?, 0x17?, 0x1027b133c?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x140001416f0 sp=0x140001416d0 pc=0x1027db014\r\nruntime.chanrecv(0x14000090060, 0x140001418d8, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:583 +0x454 fp=0x14000141780 sp=0x140001416f0 pc=0x1027aaa54\r\nruntime.chanrecv1(0x1400017e000?, 0x1400009a010?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:442 +0x14 fp=0x140001417b0 sp=0x14000141780 pc=0x1027aa5f4\r\nnet/http.(*persistConn).addTLS(0x1400014c480, {0x102a5cab0?, 0x1400012e008}, {0x1400012e290, 0xa}, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1544 +0x2dc fp=0x140001419a0 sp=0x140001417b0 pc=0x10296c93c\r\nnet/http.(*Transport).dialConn(0x102bbb7c0, {0x102a5cab0, 0x1400012e008}, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1618 +0x780 fp=0x14000141ec0 sp=0x140001419a0 pc=0x10296d3f0\r\nnet/http.(*Transport).dialConnFor(0x0?, 0x1400015c2c0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1450 +0x80 fp=0x14000141fb0 sp=0x14000141ec0 pc=0x10296bfd0\r\nnet/http.(*Transport).queueForDial.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x2c fp=0x14000141fd0 sp=0x14000141fb0 pc=0x10296bf1c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x14000141fd0 sp=0x14000141fd0 pc=0x102807164\r\ncreated by net/http.(*Transport).queueForDial\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x398\r\n\r\nr0      0x0\r\nr1      0x0\r\nr2      0x0\r\nr3      0x0\r\nr4      0x0\r\nr5      0x14000102f30\r\nr6      0x102bf0db1\r\nr7      0x1\r\nr8      0x1980dee91\r\nr9      0x1edebb000\r\nr10     0x6000137d1968\r\nr11     0x1\r\nr12     0x1028e0540\r\nr13     0x16d886f00\r\nr14     0x1029f1850\r\nr15     0x1f06ed8d8\r\nr16     0x102b84000\r\nr17     0x197ce8290\r\nr18     0x0\r\nr19     0xc\r\nr20     0x1400013b230\r\nr21     0x3\r\nr22     0xd\r\nr23     0x5a\r\nr24     0x4e7b8f8b91b24de2\r\nr25     0xd265af7a4013c97f\r\nr26     0x1400013b2e8\r\nr27     0x848\r\nr28     0x140001021a0\r\nr29     0x16d886ed0\r\nlr      0x197ce839c\r\nsp      0x16d886ed0\r\npc      0x197eb5458\r\nfault   0x197eb5458\r\n</pre>\r\n</details>\r\n\r\n/cc @bradfitz \r\nas you reported the very similar ticket #51759, would be interesting to see if you can reproduce this the same way.",NeedsFix,rolandshoemaker,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/william/Library/Caches/go-build""\r\nGOENV=""/Users/william/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/william/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/william/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.19/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.19/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/william/dev/oss/repro-go-1/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/go-build670127871=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRunning a compiled Go binary with a strange path causes crashes that are very similar to #51759, so perhaps the crash is rather in `crypto/x509` than in `net/http`.\r\n\r\nI can only reproduce it when calling the Go binary with a path that includes a double slash `//` and a directory that starts with a dot `.`. I have no idea why this is or how to further debug is.\r\n\r\nThis reproducing script sets up a minimal folder structure, build the tool and runs it in a way that causes crashes:\r\n```shell\r\n#!/bin/sh\r\n\r\ncd $(mktemp -d)\r\ngo mod init repro\r\n\r\ncat > main.go <<EOF\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""net/http""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tres, err := http.Get(""https://google.com"")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tres.Write(os.Stdout)\r\n}\r\nEOF\r\n\r\nmkdir -p dir .dot\r\ngo build -o ./.dot/repro .\r\n$(pwd)/dir//../.dot/repro\r\n```\r\n\r\nCalling it e.g. with `$(pwd)/dir/../.dot/repro`, `$(pwd)//.dot/repro`,  or `$(pwd)/.dot/repro` does not cause the same crash.\r\n\r\n### What did you expect to see?\r\n\r\nHTML output from https://google.com.\r\n\r\n### What did you see instead?\r\n\r\nPanic, see hidden long panic text below:\r\n<details><summary>Full panic output</summary><br>\r\n<pre>\r\ngo: creating new go.mod: module repro\r\nSIGTRAP: trace trap\r\nPC=0x197eb5458 m=5 sigcode=0\r\n\r\ngoroutine 0 [idle]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 34 [syscall]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 1 [select]:\r\nruntime.gopark(0x1400013f7b0?, 0x4?, 0xe8?, 0xf4?, 0x1400013f658?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400013f4c0 sp=0x1400013f4a0 pc=0x1027db014\r\nruntime.selectgo(0x1400013f7b0, 0x1400013f650, 0x1400011ad20?, 0x0, 0x1400013f628?, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/select.go:328 +0x688 fp=0x1400013f5e0 sp=0x1400013f4c0 pc=0x1027ead78\r\nnet/http.(*Transport).getConn(0x102bbb7c0, 0x140001581c0, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1376 +0x448 fp=0x1400013f800 sp=0x1400013f5e0 pc=0x10296b588\r\nnet/http.(*Transport).roundTrip(0x102bbb7c0, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:582 +0x658 fp=0x1400013fa30 sp=0x1400013f800 pc=0x102967978\r\nnet/http.(*Transport).RoundTrip(0x10?, 0x102a5ab80?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/roundtrip.go:17 +0x1c fp=0x1400013fa50 sp=0x1400013fa30 pc=0x10295f12c\r\nnet/http.send(0x1400017a000, {0x102a5ab80, 0x102bbb7c0}, {0x10293fd8c?, 0x8?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:251 +0x4f4 fp=0x1400013fc50 sp=0x1400013fa50 pc=0x10293e634\r\nnet/http.(*Client).send(0x102bc0d40, 0x1400017a000, {0x1400013fd08?, 0x1027b118c?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:175 +0x98 fp=0x1400013fcd0 sp=0x1400013fc50 pc=0x10293dfd8\r\nnet/http.(*Client).do(0x102bc0d40, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:715 +0x6e8 fp=0x1400013fed0 sp=0x1400013fcd0 pc=0x10293fde8\r\nnet/http.(*Client).Do(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:581\r\nnet/http.(*Client).Get(0x1027a5514?, {0x102980a38?, 0x1400004a768?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:479 +0x78 fp=0x1400013ff30 sp=0x1400013fed0 pc=0x10293f5f8\r\nnet/http.Get(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:448\r\nmain.main()\r\n\t/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/tmp.ycttMIXQ/main.go:10 +0x34 fp=0x1400013ff70 sp=0x1400013ff30 pc=0x10297c834\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:250 +0x24c fp=0x1400013ffd0 sp=0x1400013ff70 pc=0x1027dac4c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013ffd0 sp=0x1400013ffd0 pc=0x102807164\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004afa0 sp=0x1400004af80 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:302 +0xac fp=0x1400004afd0 sp=0x1400004afa0 pc=0x1027daeac\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004afd0 sp=0x1400004afd0 pc=0x102807164\r\ncreated by runtime.init.6\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:290 +0x24\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004b770 sp=0x1400004b750 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.bgsweep(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcsweep.go:278 +0xa4 fp=0x1400004b7b0 sp=0x1400004b770 pc=0x1027c8534\r\nruntime.gcenable.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x28 fp=0x1400004b7d0 sp=0x1400004b7b0 pc=0x1027bcd78\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004b7d0 sp=0x1400004b7d0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x74\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x1029f1850?, 0x1?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004bf50 sp=0x1400004bf30 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.(*scavengerState).park(0x102bc1060)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:389 +0x5c fp=0x1400004bf80 sp=0x1400004bf50 pc=0x1027c64ec\r\nruntime.bgscavenge(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:617 +0x44 fp=0x1400004bfb0 sp=0x1400004bf80 pc=0x1027c6a94\r\nruntime.gcenable.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0x28 fp=0x1400004bfd0 sp=0x1400004bfb0 pc=0x1027bcd18\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004bfd0 sp=0x1400004bfd0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0xb8\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x14000046580 sp=0x14000046560 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:180 +0x120 fp=0x140000467d0 sp=0x14000046580 pc=0x1027bbfa0\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x140000467d0 sp=0x140000467d0 pc=0x102807164\r\ncreated by runtime.createfing\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:157 +0x84\r\n\r\ngoroutine 19 [chan receive]:\r\nruntime.gopark(0x102bf1c60?, 0x102cfc5e0?, 0x78?, 0x17?, 0x1027b133c?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x140001416f0 sp=0x140001416d0 pc=0x1027db014\r\nruntime.chanrecv(0x14000090060, 0x140001418d8, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:583 +0x454 fp=0x14000141780 sp=0x140001416f0 pc=0x1027aaa54\r\nruntime.chanrecv1(0x1400017e000?, 0x1400009a010?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:442 +0x14 fp=0x140001417b0 sp=0x14000141780 pc=0x1027aa5f4\r\nnet/http.(*persistConn).addTLS(0x1400014c480, {0x102a5cab0?, 0x1400012e008}, {0x1400012e290, 0xa}, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1544 +0x2dc fp=0x140001419a0 sp=0x140001417b0 pc=0x10296c93c\r\nnet/http.(*Transport).dialConn(0x102bbb7c0, {0x102a5cab0, 0x1400012e008}, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1618 +0x780 fp=0x14000141ec0 sp=0x140001419a0 pc=0x10296d3f0\r\nnet/http.(*Transport).dialConnFor(0x0?, 0x1400015c2c0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1450 +0x80 fp=0x14000141fb0 sp=0x14000141ec0 pc=0x10296bfd0\r\nnet/http.(*Transport).queueForDial.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x2c fp=0x14000141fd0 sp=0x14000141fb0 pc=0x10296bf1c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x14000141fd0 sp=0x14000141fd0 pc=0x102807164\r\ncreated by net/http.(*Transport).queueForDial\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x398\r\n\r\nr0      0x0\r\nr1      0x0\r\nr2      0x0\r\nr3      0x0\r\nr4      0x0\r\nr5      0x14000102f30\r\nr6      0x102bf0db1\r\nr7      0x1\r\nr8      0x1980dee91\r\nr9      0x1edebb000\r\nr10     0x6000137d1968\r\nr11     0x1\r\nr12     0x1028e0540\r\nr13     0x16d886f00\r\nr14     0x1029f1850\r\nr15     0x1f06ed8d8\r\nr16     0x102b84000\r\nr17     0x197ce8290\r\nr18     0x0\r\nr19     0xc\r\nr20     0x1400013b230\r\nr21     0x3\r\nr22     0xd\r\nr23     0x5a\r\nr24     0x4e7b8f8b91b24de2\r\nr25     0xd265af7a4013c97f\r\nr26     0x1400013b2e8\r\nr27     0x848\r\nr28     0x140001021a0\r\nr29     0x16d886ed0\r\nlr      0x197ce839c\r\nsp      0x16d886ed0\r\npc      0x197eb5458\r\nfault   0x197eb5458\r\n</pre>\r\n</details>\r\n\r\n/cc @bradfitz \r\nas you reported the very similar ticket #51759, would be interesting to see if you can reproduce this the same way.","shell\r\n#!/bin/sh\r\n\r\ncd $(mktemp -d)\r\ngo mod init repro\r\n\r\ncat > main.go <<EOF\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""net/http""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tres, err := http.Get(""https://google.com"")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tres.Write(os.Stdout)\r\n}\r\nEOF\r\n\r\nmkdir -p dir .dot\r\ngo build -o ./.dot/repro .\r\n$(pwd)/dir//../.dot/repro\r\n"
54563,"cmd/compile: possible append inside a method escape analysis optimization\r\n\r\n`BenchmarkEscapes-4              48139129                37.46 ns/op           16 B/op          1 allocs/op`\r\n\r\n`BenchmarkDoesNotEscape-4       1000000000               0.3443 ns/op          0 B/op          0 allocs/op`\r\n\r\nI think we might just mark the append function implicitly in compiler as noescaping.\r\nDoing so, but explicitly, removes the allocation: \r\n\r\n`BenchmarkNoescapeAppend-4              170689034                7.031 ns/op           0 B/op          0 allocs/op`\r\n\r\nI think it is safe to do so. I can't think of any case where the slice passed to append must be forced to be heap allocated.",NeedsInvestigation|compiler/runtime,mdempsky,"```go\r\ntype Builder struct {\r\n\tbuf []byte\r\n}\r\n\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append(b.buf, 1)\r\n}\r\n\r\nfunc escapes() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.DoSth()\r\n}\r\n```\r\n\r\n`BenchmarkEscapes-4              48139129                37.46 ns/op           16 B/op          1 allocs/op`\r\n```go\r\nfunc doesNotEscape() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.buf = append(b.buf, 1)\r\n\t_ = b\r\n}\r\n```\r\n`BenchmarkDoesNotEscape-4       1000000000               0.3443 ns/op          0 B/op          0 allocs/op`\r\n\r\nI think we might just mark the append function implicitly in compiler as noescaping.\r\nDoing so, but explicitly, removes the allocation: \r\n```go\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append2(b.buf, 1)\r\n}\r\n\r\n//go:noescape\r\n//go:linkname append2 aa.append2helper\r\nfunc append2(buf []byte, elems ...byte) []byte\r\n\r\nfunc append2helper(buf []byte, elems ...byte) []byte {\r\n\treturn append(buf, elems...)\r\n}\r\n```\r\n`BenchmarkNoescapeAppend-4              170689034                7.031 ns/op           0 B/op          0 allocs/op`\r\n\r\nI think it is safe to do so. I can't think of any case where the slice passed to append must be forced to be heap allocated.","go\r\ntype Builder struct {\r\n\tbuf []byte\r\n}\r\n\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append(b.buf, 1)\r\n}\r\n\r\nfunc escapes() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.DoSth()\r\n}\r\n"
54535,"cmd/compile: failed to compile some recursive generic type<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ntip only\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitsuoheijo/Library/Caches/go-build""\r\nGOENV=""/Users/mitsuoheijo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitsuoheijo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitsuoheijo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/mitsuoheijo/ghq/github.com/golang/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/mitsuoheijo/ghq/github.com/golang/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitsuoheijo/ghq/github.com/johejo/sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bq/s3vkkxm17jq79lx5qy3856zh0000gn/T/go-build3085638013=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ go run .\r\nhello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ gotip run .\r\n# github.com/johejo/sandbox\r\n./main.go:9:22: n.children[i].items undefined (type go.shape.*uint8 has no field or method items)\r\n```\r\n\r\nThis might be some regression.\r\nI found this problem while using google/btree.\r\nhttps://github.com/google/btree",NeedsFix|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ntip only\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitsuoheijo/Library/Caches/go-build""\r\nGOENV=""/Users/mitsuoheijo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitsuoheijo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitsuoheijo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/mitsuoheijo/ghq/github.com/golang/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/mitsuoheijo/ghq/github.com/golang/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitsuoheijo/ghq/github.com/johejo/sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bq/s3vkkxm17jq79lx5qy3856zh0000gn/T/go-build3085638013=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```go\r\npackage main\r\n\r\ntype node[T any] struct {\r\n\titems    items[T]\r\n\tchildren items[*node[T]]\r\n}\r\n\r\nfunc (n *node[T]) f(i int, j int) bool {\r\n\tif len(n.children[i].items) < j {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\ntype items[T any] []T\r\n\r\nfunc main() {\r\n\t_ = node[int]{}\r\n\tprintln(""hello"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ go run .\r\nhello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ gotip run .\r\n# github.com/johejo/sandbox\r\n./main.go:9:22: n.children[i].items undefined (type go.shape.*uint8 has no field or method items)\r\n```\r\n\r\nThis might be some regression.\r\nI found this problem while using google/btree.\r\nhttps://github.com/google/btree","go\r\npackage main\r\n\r\ntype node[T any] struct {\r\n\titems    items[T]\r\n\tchildren items[*node[T]]\r\n}\r\n\r\nfunc (n *node[T]) f(i int, j int) bool {\r\n\tif len(n.children[i].items) < j {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\ntype items[T any] []T\r\n\r\nfunc main() {\r\n\t_ = node[int]{}\r\n\tprintln(""hello"")\r\n}\r\n"
54482,"cmd/link: cgo generates incorrect symbols on macOS 13 beta 5<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n% go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kevin/Library/Caches/go-build""\r\nGOENV=""/Users/kevin/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kevin/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kevin/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/9s/xwtpw2qs21163sxc3_s54_cw0000gn/T/go-build1102081114=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n<pre>\r\n% sw_vers\r\nProductName:            macOS\r\nProductVersion:         13.0\r\nBuildVersion:           22A5321d\r\n</pre>\r\n### What did you do?\r\n\r\ncpoc.go\r\n\r\n\r\n\r\ncpoc.c\r\n\r\n```\r\n#include ""cpoc.h""\r\n\r\nvoid cLogger(void)\r\n{\r\n    printf(""cLogger\\n"");\r\n    goLogger();\r\n}\r\n```\r\n\r\ncpoc.h\r\n\r\n```\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nextern void goLogger(void);\r\n\r\nvoid cLogger(void);\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrectly compiled cgo binary.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n% go run cpoc.go \r\n# command-line-arguments\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: warning: -no_pie is deprecated when targeting new OS versions\r\nld: warning: non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later\r\nUndefined symbols for architecture x86_64:\r\n  ""_cLogger"", referenced from:\r\n      __cgo_267e1da4216b_Cfunc_cLogger in 000001.o\r\n     (maybe you meant: __cgo_267e1da4216b_Cfunc_cLogger)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nI'm guessing this is due to the beta-ness of the OS. Happy to provide more debug info to get this working.",WaitingForInfo|compiler/runtime,cherrymui,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n% go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kevin/Library/Caches/go-build""\r\nGOENV=""/Users/kevin/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kevin/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kevin/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/9s/xwtpw2qs21163sxc3_s54_cw0000gn/T/go-build1102081114=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n<pre>\r\n% sw_vers\r\nProductName:            macOS\r\nProductVersion:         13.0\r\nBuildVersion:           22A5321d\r\n</pre>\r\n### What did you do?\r\n\r\ncpoc.go\r\n\r\n```go\r\npackage main\r\n\r\n// #include ""cpoc.h""\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n//export goLogger\r\nfunc goLogger() {\r\n\tfmt.Println(""goLogger"")\r\n}\r\n\r\nfunc main() {\r\n\tC.cLogger()\r\n}\r\n```\r\n\r\ncpoc.c\r\n\r\n```\r\n#include ""cpoc.h""\r\n\r\nvoid cLogger(void)\r\n{\r\n    printf(""cLogger\\n"");\r\n    goLogger();\r\n}\r\n```\r\n\r\ncpoc.h\r\n\r\n```\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nextern void goLogger(void);\r\n\r\nvoid cLogger(void);\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrectly compiled cgo binary.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n% go run cpoc.go \r\n# command-line-arguments\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: warning: -no_pie is deprecated when targeting new OS versions\r\nld: warning: non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later\r\nUndefined symbols for architecture x86_64:\r\n  ""_cLogger"", referenced from:\r\n      __cgo_267e1da4216b_Cfunc_cLogger in 000001.o\r\n     (maybe you meant: __cgo_267e1da4216b_Cfunc_cLogger)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nI'm guessing this is due to the beta-ness of the OS. Happy to provide more debug info to get this working.","go\r\npackage main\r\n\r\n// #include ""cpoc.h""\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n//export goLogger\r\nfunc goLogger() {\r\n\tfmt.Println(""goLogger"")\r\n}\r\n\r\nfunc main() {\r\n\tC.cLogger()\r\n}\r\n"
54456,"cmd/compile: Type confusion vulnerability on identically named generic structs### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis issue affects the latest version. I have tested Go 1.18 and Go 1.18.5, in addition to Go 1.19, both of which are affected as well.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mce-gabrielp/.cache/go-build""\r\nGOENV=""/home/mce-gabrielp/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mce-gabrielp/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mce-gabrielp/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3251415554=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile and execute the following program: https://go.dev/play/p/54u9Z1S7oUZ\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe following output:\r\n```\r\n$ go run repro.go \r\n{0 []}\r\n{0}\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run repro.go \r\n{0 []}\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x1 pc=0x45dd49]\r\n\r\ngoroutine 1 [running]:\r\nreflect.typedmemmove(0xc0000061a0?, 0x487de0?, 0x47de01?)\r\n\t/usr/local/go/src/runtime/mbarrier.go:191 +0x19\r\nreflect.packEface({0x488ae0?, 0x1?, 0x0?})\r\n\t/usr/local/go/src/reflect/value.go:123 +0x65\r\nreflect.valueInterface({0x488ae0?, 0x1?, 0x0?}, 0x30?)\r\n\t/usr/local/go/src/reflect/value.go:1508 +0xbb\r\nreflect.Value.Interface(...)\r\n\t/usr/local/go/src/reflect/value.go:1478\r\nfmt.(*pp).printValue(0xc00010c270, {0x488ae0?, 0x1?, 0x4?}, 0x76, 0x2)\r\n\t/usr/local/go/src/fmt/print.go:753 +0xa5\r\nfmt.(*pp).printValue(0xc00010c270, {0x487de0?, 0x51c7a8?, 0x441186?}, 0x76, 0x1)\r\n\t/usr/local/go/src/fmt/print.go:896 +0x16b2\r\nfmt.(*pp).printValue(0xc00010c270, {0x48e280?, 0x51c7a0?, 0x7?}, 0x76, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:837 +0x12b4\r\nfmt.(*pp).printArg(0xc00010c270, {0x48e280?, 0x51c7a0}, 0x76)\r\n\t/usr/local/go/src/fmt/print.go:743 +0x756\r\nfmt.(*pp).doPrintln(0xc00010c270, {0xc000104f50?, 0x1, 0x0?})\r\n\t/usr/local/go/src/fmt/print.go:1200 +0x150\r\nfmt.Fprintln({0x4b8008, 0xc000012018}, {0xc000104f50, 0x1, 0x1})\r\n\t/usr/local/go/src/fmt/print.go:284 +0x4f\r\nfmt.Println(...)\r\n\t/usr/local/go/src/fmt/print.go:294\r\nmain.bar()\r\n\t/home/mce-gabrielp/repro.go:23 +0x5e\r\nmain.main()\r\n\t/home/mce-gabrielp/repro.go:28 +0x1c\r\nexit status 2\r\n```\r\n",NeedsFix|FrozenDueToAge|generics|compiler/runtime,mdempsky,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis issue affects the latest version. I have tested Go 1.18 and Go 1.18.5, in addition to Go 1.19, both of which are affected as well.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mce-gabrielp/.cache/go-build""\r\nGOENV=""/home/mce-gabrielp/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mce-gabrielp/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mce-gabrielp/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3251415554=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile and execute the following program: https://go.dev/play/p/54u9Z1S7oUZ\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t\tB []T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc bar() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n\tbar()\r\n}\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe following output:\r\n```\r\n$ go run repro.go \r\n{0 []}\r\n{0}\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run repro.go \r\n{0 []}\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x1 pc=0x45dd49]\r\n\r\ngoroutine 1 [running]:\r\nreflect.typedmemmove(0xc0000061a0?, 0x487de0?, 0x47de01?)\r\n\t/usr/local/go/src/runtime/mbarrier.go:191 +0x19\r\nreflect.packEface({0x488ae0?, 0x1?, 0x0?})\r\n\t/usr/local/go/src/reflect/value.go:123 +0x65\r\nreflect.valueInterface({0x488ae0?, 0x1?, 0x0?}, 0x30?)\r\n\t/usr/local/go/src/reflect/value.go:1508 +0xbb\r\nreflect.Value.Interface(...)\r\n\t/usr/local/go/src/reflect/value.go:1478\r\nfmt.(*pp).printValue(0xc00010c270, {0x488ae0?, 0x1?, 0x4?}, 0x76, 0x2)\r\n\t/usr/local/go/src/fmt/print.go:753 +0xa5\r\nfmt.(*pp).printValue(0xc00010c270, {0x487de0?, 0x51c7a8?, 0x441186?}, 0x76, 0x1)\r\n\t/usr/local/go/src/fmt/print.go:896 +0x16b2\r\nfmt.(*pp).printValue(0xc00010c270, {0x48e280?, 0x51c7a0?, 0x7?}, 0x76, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:837 +0x12b4\r\nfmt.(*pp).printArg(0xc00010c270, {0x48e280?, 0x51c7a0}, 0x76)\r\n\t/usr/local/go/src/fmt/print.go:743 +0x756\r\nfmt.(*pp).doPrintln(0xc00010c270, {0xc000104f50?, 0x1, 0x0?})\r\n\t/usr/local/go/src/fmt/print.go:1200 +0x150\r\nfmt.Fprintln({0x4b8008, 0xc000012018}, {0xc000104f50, 0x1, 0x1})\r\n\t/usr/local/go/src/fmt/print.go:284 +0x4f\r\nfmt.Println(...)\r\n\t/usr/local/go/src/fmt/print.go:294\r\nmain.bar()\r\n\t/home/mce-gabrielp/repro.go:23 +0x5e\r\nmain.main()\r\n\t/home/mce-gabrielp/repro.go:28 +0x1c\r\nexit status 2\r\n```\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t\tB []T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc bar() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n\tbar()\r\n}\r\n"
54444,"runtime: wasm GC causes stop the world for a very long time### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/.go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/.go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go-1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go-1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build306969192=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am working on a hobby game engine that has both Native (OpenGL) and WASM (WebGL2) support.\r\n\r\nWhen running a larger scene in WebAssembly I notice that whenever a GC is triggered it causes everything to freeze for about a second or more.\r\n\r\nActually, it happens with smaller scenes too but just less often (due to GC triggering less often). I think that the duration of the freeze is proportional to the number of active pointer references but this needs more testing to verify.\r\n\r\nI try not to allocate much memory but it happens that once a frame I might allocate a few KBs here and there (I have a custom react-style Go UI framework that is hard to make allocation-free due to tree invalidation logic and besides, one should be able to make use of Go's memory management). This means that after 15s-60s everything just freezes.\r\n\r\nI managed to write a dummy program that reproduces the issue:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSmooth and consistent logging in the Browser Console.\r\n\r\n### What did you see instead?\r\n\r\nA stop the world situation once in a while (every 2 seconds or so). The `Total` counter (indicating the number of GC runs) always increases immediatelly after the freeze, showing that it is related to GC.\r\n\r\nWhat's interesting is that none of the stats (even the frame time) indicate that GC took more time than indicated but the fact is that the Browser freezes. Could it be that Go is doing something that JS or the Browser does not like and needs to adjust to once setInterval callback has completed (e.g. memory shuffling or something of the kind)?\r\n\r\nThis is reproducible with both Chrome and Firefox. Have not tried other browsers.\r\n",Performance|NeedsInvestigation|arch-wasm|compiler/runtime,mknyszek,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/.go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/.go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go-1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go-1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build306969192=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am working on a hobby game engine that has both Native (OpenGL) and WASM (WebGL2) support.\r\n\r\nWhen running a larger scene in WebAssembly I notice that whenever a GC is triggered it causes everything to freeze for about a second or more.\r\n\r\nActually, it happens with smaller scenes too but just less often (due to GC triggering less often). I think that the duration of the freeze is proportional to the number of active pointer references but this needs more testing to verify.\r\n\r\nI try not to allocate much memory but it happens that once a frame I might allocate a few KBs here and there (I have a custom react-style Go UI framework that is hard to make allocation-free due to tree invalidation logic and besides, one should be able to make use of Go's memory management). This means that after 15s-60s everything just freezes.\r\n\r\nI managed to write a dummy program that reproduces the issue:\r\n\r\n```go\r\nvar (\r\n\tstatsRunning int32\r\n\tgcStats      = new(debug.GCStats)\r\n\tcached       []byte\r\n)\r\n\r\nfunc main() {\r\n\t// Force the GC to trigger more often. If you remove this, you might need\r\n\t// to wait up to a minute in some cases.\r\n\tdebug.SetGCPercent(5)\r\n\r\n\taLotOfData := make([]int, 20_000_000)\r\n\taLotOfRefData := make([]*int, 20_000_000)\r\n\tfor i := range aLotOfRefData {\r\n\t\taLotOfRefData[i] = &aLotOfData[i]\r\n\t}\r\n\r\n\tcallbackFunc := js.FuncOf(func(this js.Value, args []js.Value) any {\r\n\t\tframeStart := time.Now()\r\n\r\n\t\t// Check stats once in a while.\r\n\t\tif atomic.CompareAndSwapInt32(&statsRunning, 0, 1) {\r\n\t\t\tgo func() {\r\n\t\t\t\tdebug.ReadGCStats(gcStats)\r\n\t\t\t\tif len(gcStats.Pause) > 0 {\r\n\t\t\t\t\tlog.Printf(""GC STATS! Total: %d; Time since last GC: %s; Pause total: %s; Pause last: %s"",\r\n\t\t\t\t\t\tgcStats.NumGC,\r\n\t\t\t\t\t\ttime.Since(gcStats.LastGC),\r\n\t\t\t\t\t\tgcStats.PauseTotal,\r\n\t\t\t\t\t\tgcStats.Pause[0],\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tatomic.StoreInt32(&statsRunning, 0)\r\n\t\t\t}()\r\n\t\t}\r\n\r\n\t\tprocessingTime := time.Now()\r\n\r\n\t\t// Do some processing so that the frame takes some time and so that the\r\n\t\t// runtime is forced to go through a lot of pointers (not sure if relevant).\r\n\t\tfor i := 0; i < len(aLotOfRefData); i++ {\r\n\t\t\t*aLotOfRefData[i]++\r\n\t\t}\r\n\r\n\t\t// Couldn't figure out a better way to force the compiler not to optimize\r\n\t\t// the slice allocation. Hence keep it in a variable and use it next frame.\r\n\t\tif cached == nil {\r\n\t\t\tcached = make([]byte, 1_000_000)\r\n\t\t} else {\r\n\t\t\tfor j := range cached {\r\n\t\t\t\tcached[j]++\r\n\t\t\t}\r\n\t\t\tcached = nil\r\n\t\t}\r\n\r\n\t\tprocessingDuration := time.Since(processingTime)\r\n\r\n\t\tlog.Printf(""Frame time: %s (processing: %s)"", time.Since(frameStart), processingDuration)\r\n\t\treturn nil\r\n\t})\r\n\r\n\tintervalFunc := js.Global().Get(""setInterval"")\r\n\tintervalFunc.Invoke(callbackFunc, 1)\r\n\r\n\t<-make(chan struct{})\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSmooth and consistent logging in the Browser Console.\r\n\r\n### What did you see instead?\r\n\r\nA stop the world situation once in a while (every 2 seconds or so). The `Total` counter (indicating the number of GC runs) always increases immediatelly after the freeze, showing that it is related to GC.\r\n\r\nWhat's interesting is that none of the stats (even the frame time) indicate that GC took more time than indicated but the fact is that the Browser freezes. Could it be that Go is doing something that JS or the Browser does not like and needs to adjust to once setInterval callback has completed (e.g. memory shuffling or something of the kind)?\r\n\r\nThis is reproducible with both Chrome and Firefox. Have not tried other browsers.\r\n","go\r\nvar (\r\n\tstatsRunning int32\r\n\tgcStats      = new(debug.GCStats)\r\n\tcached       []byte\r\n)\r\n\r\nfunc main() {\r\n\t// Force the GC to trigger more often. If you remove this, you might need\r\n\t// to wait up to a minute in some cases.\r\n\tdebug.SetGCPercent(5)\r\n\r\n\taLotOfData := make([]int, 20_000_000)\r\n\taLotOfRefData := make([]*int, 20_000_000)\r\n\tfor i := range aLotOfRefData {\r\n\t\taLotOfRefData[i] = &aLotOfData[i]\r\n\t}\r\n\r\n\tcallbackFunc := js.FuncOf(func(this js.Value, args []js.Value) any {\r\n\t\tframeStart := time.Now()\r\n\r\n\t\t// Check stats once in a while.\r\n\t\tif atomic.CompareAndSwapInt32(&statsRunning, 0, 1) {\r\n\t\t\tgo func() {\r\n\t\t\t\tdebug.ReadGCStats(gcStats)\r\n\t\t\t\tif len(gcStats.Pause) > 0 {\r\n\t\t\t\t\tlog.Printf(""GC STATS! Total: %d; Time since last GC: %s; Pause total: %s; Pause last: %s"",\r\n\t\t\t\t\t\tgcStats.NumGC,\r\n\t\t\t\t\t\ttime.Since(gcStats.LastGC),\r\n\t\t\t\t\t\tgcStats.PauseTotal,\r\n\t\t\t\t\t\tgcStats.Pause[0],\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tatomic.StoreInt32(&statsRunning, 0)\r\n\t\t\t}()\r\n\t\t}\r\n\r\n\t\tprocessingTime := time.Now()\r\n\r\n\t\t// Do some processing so that the frame takes some time and so that the\r\n\t\t// runtime is forced to go through a lot of pointers (not sure if relevant).\r\n\t\tfor i := 0; i < len(aLotOfRefData); i++ {\r\n\t\t\t*aLotOfRefData[i]++\r\n\t\t}\r\n\r\n\t\t// Couldn't figure out a better way to force the compiler not to optimize\r\n\t\t// the slice allocation. Hence keep it in a variable and use it next frame.\r\n\t\tif cached == nil {\r\n\t\t\tcached = make([]byte, 1_000_000)\r\n\t\t} else {\r\n\t\t\tfor j := range cached {\r\n\t\t\t\tcached[j]++\r\n\t\t\t}\r\n\t\t\tcached = nil\r\n\t\t}\r\n\r\n\t\tprocessingDuration := time.Since(processingTime)\r\n\r\n\t\tlog.Printf(""Frame time: %s (processing: %s)"", time.Since(frameStart), processingDuration)\r\n\t\treturn nil\r\n\t})\r\n\r\n\tintervalFunc := js.Global().Get(""setInterval"")\r\n\tintervalFunc.Invoke(callbackFunc, 1)\r\n\r\n\t<-make(chan struct{})\r\n}\r\n"
54424,"go/types: fix implementation of assignability check[edited]\r\n\r\n\r\nis currently not permitted:\r\n```\r\ncannot use p (variable of type P constrained by ~*T) as type *T in assignment:\r\n\tP does not implement *T (type *T is pointer to interface, not interface)\r\n```\r\n~because type parameters are following the rules for interfaces in this assignment (their constraints are interfaces). This ties in with the question of what the underlying type of a type parameter is (currently it's the constraint interface); the rest follows from that.~\r\n\r\n~This may not be the right approach for type parameters; or at least not the most user-friendly approach.~\r\n\r\nThis appears to be just a bug in the assignment check.\r\n\r\ncc: @rsc (who raised the issue)\r\ncc: @findleyr @ianlancetaylor \r\n",NeedsFix|release-blocker,griesemer,"[edited]\r\n\r\n```Go\r\nfunc f[P ~*T, T any]() {\r\n\tvar p P\r\n\tvar tp *T\r\n\ttp = p // <<< ERROR HERE\r\n}\r\n```\r\nis currently not permitted:\r\n```\r\ncannot use p (variable of type P constrained by ~*T) as type *T in assignment:\r\n\tP does not implement *T (type *T is pointer to interface, not interface)\r\n```\r\n~because type parameters are following the rules for interfaces in this assignment (their constraints are interfaces). This ties in with the question of what the underlying type of a type parameter is (currently it's the constraint interface); the rest follows from that.~\r\n\r\n~This may not be the right approach for type parameters; or at least not the most user-friendly approach.~\r\n\r\nThis appears to be just a bug in the assignment check.\r\n\r\ncc: @rsc (who raised the issue)\r\ncc: @findleyr @ianlancetaylor \r\n","Go\r\nfunc f[P ~*T, T any]() {\r\n\tvar p P\r\n\tvar tp *T\r\n\ttp = p // <<< ERROR HERE\r\n}\r\n"
54291,"cmd/compile: nosplit stack overflow with -gcflags ""all=-N -l"" -race (darwin/arm64 | Goland debug cmd)### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (go 1.19)\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ghostiam/Library/Caches/go-build""\r\nGOENV=""/Users/ghostiam/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ghostiam/projects/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ghostiam/projects/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""http://localhost:8123""\r\nGOROOT=""/Users/ghostiam/projects/golang/sdk/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ghostiam/projects/golang/sdk/go1.19/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ghostiam/Desktop/test/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pc/st46ghc9375gx_q1ktbvpq900000gn/T/go-build1017110940=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n2 lines of code:\r\nhttps://go.dev/play/p/v-LC84qDHo4\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful build and debug\r\n\r\n### What did you see instead?\r\n\r\n<details><summary>go 1.18.5 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\ntest\r\n# test\r\nruntime.fatalthrow: nosplit stack overflow\r\n\t792\tassumed on entry to syscall.ptrace<1> (nosplit)\r\n\t664\tafter syscall.ptrace<1> (nosplit) uses 128\r\n\t456\tafter syscall.ptrace1<1> (nosplit) uses 208\r\n\t264\tafter syscall.syscall6<1> (nosplit) uses 192\r\n\t232\tafter runtime.entersyscall<1> (nosplit) uses 32\r\n\t168\tafter runtime.reentersyscall<1> (nosplit) uses 64\r\n\t136\tafter runtime.save<1> (nosplit) uses 32\r\n\t104\tafter runtime.badctxt<1> (nosplit) uses 32\r\n\t56\tafter runtime.throw<1> (nosplit) uses 48\r\n\t-8\tafter runtime.fatalthrow<1> (nosplit) uses 64\r\n</pre></details>\r\n\r\n<details><summary>go 1.19 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\nunicode/utf8\r\nmath/bits\r\ninternal/itoa\r\ninternal/unsafeheader\r\ninternal/goos\r\ninternal/goarch\r\nunicode\r\ninternal/goexperiment\r\nruntime/internal/math\r\nruntime/internal/sys\r\ninternal/abi\r\nsync/atomic\r\ninternal/cpu\r\nmath\r\nruntime/internal/atomic\r\ninternal/bytealg\r\nruntime\r\ninternal/reflectlite\r\ninternal/race\r\nsync\r\ninternal/testlog\r\nerrors\r\nsort\r\ninternal/oserror\r\npath\r\nio\r\nstrconv\r\nsyscall\r\nbytes\r\nstrings\r\ninternal/syscall/execenv\r\ninternal/syscall/unix\r\ntime\r\nruntime/cgo\r\ncontext\r\nio/fs\r\ninternal/poll\r\nos\r\ninternal/godebug\r\npath/filepath\r\nos/exec\r\nruntime/race\r\ntest\r\n# test\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 128 bytes, calls syscall.ptrace1<1>\r\n        grows 208 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.entersyscall<1>\r\n                grows 32 bytes, calls runtime.reentersyscall<1>\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.casgstatus<1>\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.osyield<1>\r\n                            grows 32 bytes, calls runtime.usleep<0>\r\n                                grows 32 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    40 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 64 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                grows 64 bytes, calls runtime.casgstatus<1>\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.osyield<1>\r\n                        grows 32 bytes, calls runtime.usleep<0>\r\n                            grows 32 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                8 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.throw<1>\r\n                        grows 48 bytes, calls runtime.fatalthrow<1>\r\n                            grows 64 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n</pre></details>\r\n\r\nWithout `-race` everything compiles fine.",NeedsInvestigation|FrozenDueToAge|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (go 1.19)\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ghostiam/Library/Caches/go-build""\r\nGOENV=""/Users/ghostiam/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ghostiam/projects/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ghostiam/projects/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""http://localhost:8123""\r\nGOROOT=""/Users/ghostiam/projects/golang/sdk/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ghostiam/projects/golang/sdk/go1.19/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ghostiam/Desktop/test/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pc/st46ghc9375gx_q1ktbvpq900000gn/T/go-build1017110940=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go build  -gcflags ""all=-N -l"" -race -v```\r\n\r\n2 lines of code:\r\nhttps://go.dev/play/p/v-LC84qDHo4\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""os/exec""\r\n)\r\n\r\nfunc main() {\r\n\tcmd := exec.Command(""echo"", ""test"")\r\n\t_ = cmd.Start()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful build and debug\r\n\r\n### What did you see instead?\r\n\r\n<details><summary>go 1.18.5 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\ntest\r\n# test\r\nruntime.fatalthrow: nosplit stack overflow\r\n\t792\tassumed on entry to syscall.ptrace<1> (nosplit)\r\n\t664\tafter syscall.ptrace<1> (nosplit) uses 128\r\n\t456\tafter syscall.ptrace1<1> (nosplit) uses 208\r\n\t264\tafter syscall.syscall6<1> (nosplit) uses 192\r\n\t232\tafter runtime.entersyscall<1> (nosplit) uses 32\r\n\t168\tafter runtime.reentersyscall<1> (nosplit) uses 64\r\n\t136\tafter runtime.save<1> (nosplit) uses 32\r\n\t104\tafter runtime.badctxt<1> (nosplit) uses 32\r\n\t56\tafter runtime.throw<1> (nosplit) uses 48\r\n\t-8\tafter runtime.fatalthrow<1> (nosplit) uses 64\r\n</pre></details>\r\n\r\n<details><summary>go 1.19 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\nunicode/utf8\r\nmath/bits\r\ninternal/itoa\r\ninternal/unsafeheader\r\ninternal/goos\r\ninternal/goarch\r\nunicode\r\ninternal/goexperiment\r\nruntime/internal/math\r\nruntime/internal/sys\r\ninternal/abi\r\nsync/atomic\r\ninternal/cpu\r\nmath\r\nruntime/internal/atomic\r\ninternal/bytealg\r\nruntime\r\ninternal/reflectlite\r\ninternal/race\r\nsync\r\ninternal/testlog\r\nerrors\r\nsort\r\ninternal/oserror\r\npath\r\nio\r\nstrconv\r\nsyscall\r\nbytes\r\nstrings\r\ninternal/syscall/execenv\r\ninternal/syscall/unix\r\ntime\r\nruntime/cgo\r\ncontext\r\nio/fs\r\ninternal/poll\r\nos\r\ninternal/godebug\r\npath/filepath\r\nos/exec\r\nruntime/race\r\ntest\r\n# test\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 128 bytes, calls syscall.ptrace1<1>\r\n        grows 208 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.entersyscall<1>\r\n                grows 32 bytes, calls runtime.reentersyscall<1>\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.casgstatus<1>\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.osyield<1>\r\n                            grows 32 bytes, calls runtime.usleep<0>\r\n                                grows 32 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    40 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 64 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                grows 64 bytes, calls runtime.casgstatus<1>\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.osyield<1>\r\n                        grows 32 bytes, calls runtime.usleep<0>\r\n                            grows 32 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                8 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.throw<1>\r\n                        grows 48 bytes, calls runtime.fatalthrow<1>\r\n                            grows 64 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n</pre></details>\r\n\r\nWithout `-race` everything compiles fine.","go build  -gcflags ""all=-N -l"" -race -v"
54238,"cmd/compile: Go 1.19 might make generic types slower<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt reproduces on the 1.19\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ksco/.cache/go-build""\r\nGOENV=""/home/ksco/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ksco/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ksco/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3292360144=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nplayground: https://go.dev/play/p/6UxOn6pftVs\r\n\r\nmain_test.go\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n1.19 should be similar to the 1.18 benchmark test, not much slower.\r\n\r\n\r\n### What did you see instead?\r\ngoversion: 1.19\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t71445846\t        16.49 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t32776173\t        36.30 ns/op\r\nPASS\r\n</pre>\r\n\r\ngoversion: 1.18\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t64931702\t        16.91 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t70497928\t        17.01 ns/op\r\nPASS\r\n</pre>\r\n\r\nThe assembly generated by 1.19 is found to have more\r\n\r\n`main..dict.add[int](SB), AX` \r\n`main..dict.add[string](SB), AX`\r\n\r\nThese lines are directly inlined in 1.18.\r\n\r\n/cc @ianlancetaylor\r\n",Performance|NeedsInvestigation|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt reproduces on the 1.19\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ksco/.cache/go-build""\r\nGOENV=""/home/ksco/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ksco/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ksco/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3292360144=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nplayground: https://go.dev/play/p/6UxOn6pftVs\r\n\r\nmain_test.go\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc addInt(a, b int) int {\r\n\treturn a + b\r\n}\r\n\r\nfunc addString(a, b string) string {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithoutGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = addInt(1, 2)\r\n\t\t_ = addString(""foo"", ""bar"")\r\n\t}\r\n}\r\n\r\ntype Addable interface {\r\n\tint | string\r\n}\r\n\r\nfunc add[T Addable](a, b T) T {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = add(1, 2)\r\n\t\t_ = add(""foo"", ""bar"")\r\n\t}\r\n}\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n1.19 should be similar to the 1.18 benchmark test, not much slower.\r\n\r\n\r\n### What did you see instead?\r\ngoversion: 1.19\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t71445846\t        16.49 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t32776173\t        36.30 ns/op\r\nPASS\r\n</pre>\r\n\r\ngoversion: 1.18\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t64931702\t        16.91 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t70497928\t        17.01 ns/op\r\nPASS\r\n</pre>\r\n\r\nThe assembly generated by 1.19 is found to have more\r\n\r\n`main..dict.add[int](SB), AX` \r\n`main..dict.add[string](SB), AX`\r\n\r\nThese lines are directly inlined in 1.18.\r\n\r\n/cc @ianlancetaylor\r\n","Go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc addInt(a, b int) int {\r\n\treturn a + b\r\n}\r\n\r\nfunc addString(a, b string) string {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithoutGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = addInt(1, 2)\r\n\t\t_ = addString(""foo"", ""bar"")\r\n\t}\r\n}\r\n\r\ntype Addable interface {\r\n\tint | string\r\n}\r\n\r\nfunc add[T Addable](a, b T) T {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = add(1, 2)\r\n\t\t_ = add(""foo"", ""bar"")\r\n\t}\r\n}\r\n"
54237,"x/time/rate: add Sometimes typeThis proposal makes acting on simple rate throttlers more ergonomic. It adds an API that we use internally (I'm not the author). Adding it will ease open-sourcing a project I'm involved in.\r\n\r\n\r\n\r\n// 2022-08-21 Edited: moved from ""x/time/rate"".Sometimes -> ""x/time/some"".Times based on feedback.\r\n// 2022-08-31 Edited: moved back to ""x/time/rate"".Sometimes.\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,Sajmani,"This proposal makes acting on simple rate throttlers more ergonomic. It adds an API that we use internally (I'm not the author). Adding it will ease open-sourcing a project I'm involved in.\r\n\r\n```go\r\npackage rate // import ""golang.org/x/time/rate""\r\n\r\nimport ""time""\r\n\r\n// Sometimes performs an action occasionally.\r\n// The public fields govern the behavior of Do, which performs the action.\r\n// A zero Sometimes performs the action exactly once.\r\n//\r\n// C++ users familiar with the glog package can use this mechanism instead\r\n// of LOG_FIRST_N, LOG_EVERY_N, LOG_EVERY_N_SEC:\r\n//\r\n//\tvar sometimes = rate.Sometimes{First: 3, Interval: 10*time.Second}\r\n//\tfunc Spammy() {\r\n//\t  sometimes.Do(func() { log.Info(""here I am!"") })\r\n//\t}\r\ntype Sometimes struct {\r\n\tFirst    int           // if non-zero, the first N calls to Do will run f.\r\n\tEvery    int           // if non-zero, every Nth call to Do will run f.\r\n\tInterval time.Duration // if non-zero and Interval has elapsed since f's last run, Do will run f.\r\n}\r\n\r\n// Do runs f, as governed by First, Every, and Interval.\r\n//\r\n// The model is is a union of filters. The first call to Do\r\n// always runs f. Subsequent calls run f if allowed by any\r\n// one of the Sometimes fields.\r\n//\r\n// If Do is called multiple times simultaneously, calls will block\r\n// and run serially. It is therefore intended for lightweight operations.\r\n//\r\n// Because a call to Do may block until f returns, if f causes Do\r\n// to be called, it will deadlock.\r\nfunc (s *Sometimes) Do(f func())\r\n```\r\n\r\n// 2022-08-21 Edited: moved from ""x/time/rate"".Sometimes -> ""x/time/some"".Times based on feedback.\r\n// 2022-08-31 Edited: moved back to ""x/time/rate"".Sometimes.\r\n","go\r\npackage rate // import ""golang.org/x/time/rate""\r\n\r\nimport ""time""\r\n\r\n// Sometimes performs an action occasionally.\r\n// The public fields govern the behavior of Do, which performs the action.\r\n// A zero Sometimes performs the action exactly once.\r\n//\r\n// C++ users familiar with the glog package can use this mechanism instead\r\n// of LOG_FIRST_N, LOG_EVERY_N, LOG_EVERY_N_SEC:\r\n//\r\n//\tvar sometimes = rate.Sometimes{First: 3, Interval: 10*time.Second}\r\n//\tfunc Spammy() {\r\n//\t  sometimes.Do(func() { log.Info(""here I am!"") })\r\n//\t}\r\ntype Sometimes struct {\r\n\tFirst    int           // if non-zero, the first N calls to Do will run f.\r\n\tEvery    int           // if non-zero, every Nth call to Do will run f.\r\n\tInterval time.Duration // if non-zero and Interval has elapsed since f's last run, Do will run f.\r\n}\r\n\r\n// Do runs f, as governed by First, Every, and Interval.\r\n//\r\n// The model is is a union of filters. The first call to Do\r\n// always runs f. Subsequent calls run f if allowed by any\r\n// one of the Sometimes fields.\r\n//\r\n// If Do is called multiple times simultaneously, calls will block\r\n// and run serially. It is therefore intended for lightweight operations.\r\n//\r\n// Because a call to Do may block until f returns, if f causes Do\r\n// to be called, it will deadlock.\r\nfunc (s *Sometimes) Do(f func())\r\n"
54219,"cmd/go: internal/mmap/mmap.go:30:9: undefined: mmapFile on js-wasm<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.4 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, on 2 different operating systems\r\n\r\n- FreeBSD 13.1 with Go 1.18.4 from packages\r\n- Arch Linux with Go 1.19 from packages - the error messages are exactly the same, didn't copy output twice.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""freebsd""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""freebsd""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go118""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go118/pkg/tool/freebsd_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3287959224=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n# cmd/go/internal/mmap\r\ncmd/go/internal/mmap/mmap.go:30:9: undefined: mmapFile\r\n\r\nBuild(s) failed.\r\n```\r\n",help wanted|NeedsFix|FrozenDueToAge|GoCommand|arch-wasm|OS-JS,tklauser,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.4 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, on 2 different operating systems\r\n\r\n- FreeBSD 13.1 with Go 1.18.4 from packages\r\n- Arch Linux with Go 1.19 from packages - the error messages are exactly the same, didn't copy output twice.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""freebsd""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""freebsd""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go118""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go118/pkg/tool/freebsd_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3287959224=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```bash\r\n> git describe --tags --long --all\r\ntags/go1.19-0-g43456202a1\r\n\r\n> ./buildall.bash '(freebsd|linux|js)-(amd64|arm64|wasm)'\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n# cmd/go/internal/mmap\r\ncmd/go/internal/mmap/mmap.go:30:9: undefined: mmapFile\r\n\r\nBuild(s) failed.\r\n```\r\n",bash\r\n> git describe --tags --long --all\r\ntags/go1.19-0-g43456202a1\r\n\r\n> ./buildall.bash '(freebsd|linux|js)-(amd64|arm64|wasm)'\r\n
54105,"cmd/pprof: graphviz node names are funny with genericsGo 1.18.3.\r\n\r\nNot sure what I expect when I use `go tool pprof's web mode to see the graphviz SVG output on a node using generics, but not this:\r\n\r\n<img width=""335"" alt=""Screen Shot 2022-07-27 at 6 25 02 PM"" src=""https://user-images.githubusercontent.com/2621/181400334-4871be6b-e57b-468e-9b53-2525a9df941b.png"">\r\n\r\nEither without the newlines, or with the concrete types (if/when available)?\r\n\r\nFWIW, that's from:\r\n\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,prattmic,"Go 1.18.3.\r\n\r\nNot sure what I expect when I use `go tool pprof's web mode to see the graphviz SVG output on a node using generics, but not this:\r\n\r\n<img width=""335"" alt=""Screen Shot 2022-07-27 at 6 25 02 PM"" src=""https://user-images.githubusercontent.com/2621/181400334-4871be6b-e57b-468e-9b53-2525a9df941b.png"">\r\n\r\nEither without the newlines, or with the concrete types (if/when available)?\r\n\r\nFWIW, that's from:\r\n\r\n```go\r\n// Set populates an entry in a map, making the map if necessary.\r\n//\r\n// That is, it assigns (*m)[k] = v, making *m if it was nil.\r\nfunc Set[K comparable, V any, T ~map[K]V](m *T, k K, v V) {\r\n\tif *m == nil {\r\n\t\t*m = make(map[K]V)\r\n\t}\r\n\t(*m)[k] = v\r\n}\r\n```\r\n","go\r\n// Set populates an entry in a map, making the map if necessary.\r\n//\r\n// That is, it assigns (*m)[k] = v, making *m if it was nil.\r\nfunc Set[K comparable, V any, T ~map[K]V](m *T, k K, v V) {\r\n\tif *m == nil {\r\n\t\t*m = make(map[K]V)\r\n\t}\r\n\t(*m)[k] = v\r\n}\r\n"
53958,"runtime/cgo: C.CString causes index out of range when parameter is too long<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNot sure, only tested on go1.18.3 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hoyhbx/.cache/go-build""\r\nGOENV=""/home/hoyhbx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hoyhbx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hoyhbx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org/,direct""\r\nGOROOT=""/home/hoyhbx/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hoyhbx/.local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build756945598=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nWe tried to build a go function that utilizes a k8s function to parse quantites. Then, we wanted to call the go function we built from C code to test whether it would work. However, we found that when the number we parsed had a very large absolute value (e.g. `-92743e6047801799`), the go function crashed with index out of range. The index out of range happens on the line `return C.CString(q.AsDec().String())`, we suspect this is caused because the parameter of the `C.CString` is too long.\r\n\r\n[reproduce.zip](https://github.com/golang/go/files/9144211/reproduce.zip)\r\n\r\nThe Go file and C file we created are as follows. Note that `k8sutil.h` we used was generated by cmd/cgo.\r\n\r\n<details><summary>Go file</summary><br>\r\n\r\n\r\n</details>\r\n\r\n<details><summary>C file</summary><br>\r\n\r\n\r\n</details>\r\n\r\nWe compiled the code by running the following commands:\r\n\r\n\r\nThen, we ran the program by running `./test`.\r\n\r\n### What did you expect to see?\r\nWe expected to see the long string gets returned correctly and the program does not crash.\r\n\r\n### What did you see instead?\r\nThe program crashed with the following error:\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNot sure, only tested on go1.18.3 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hoyhbx/.cache/go-build""\r\nGOENV=""/home/hoyhbx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hoyhbx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hoyhbx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org/,direct""\r\nGOROOT=""/home/hoyhbx/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hoyhbx/.local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build756945598=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nWe tried to build a go function that utilizes a k8s function to parse quantites. Then, we wanted to call the go function we built from C code to test whether it would work. However, we found that when the number we parsed had a very large absolute value (e.g. `-92743e6047801799`), the go function crashed with index out of range. The index out of range happens on the line `return C.CString(q.AsDec().String())`, we suspect this is caused because the parameter of the `C.CString` is too long.\r\n\r\n[reproduce.zip](https://github.com/golang/go/files/9144211/reproduce.zip)\r\n\r\nThe Go file and C file we created are as follows. Note that `k8sutil.h` we used was generated by cmd/cgo.\r\n\r\n<details><summary>Go file</summary><br>\r\n\r\n```go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""k8s.io/apimachinery/pkg/api/resource""\r\n)\r\n\r\n//export parse\r\nfunc parse(valuePtr *C.char) *C.char {\r\n\tvalue := C.GoString(valuePtr)\r\n\tq, err := resource.ParseQuantity(value)\r\n\tif err != nil {\r\n\t\treturn C.CString(""INVALID"")\r\n\t}\r\n\treturn C.CString(q.AsDec().String())\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, world."")\r\n}\r\n\r\n```\r\n</details>\r\n\r\n<details><summary>C file</summary><br>\r\n\r\n```c\r\n#include <stdio.h>\r\n#include ""k8sutil.h""\r\n\r\nint main(){\r\n    char *name = ""-92743e6047801799"";\r\n    printf(parse(name));\r\n    return 0;\r\n}\r\n```\r\n</details>\r\n\r\nWe compiled the code by running the following commands:\r\n```shell\r\ngo build -buildmode=c-shared -o k8sutil.so k8sutil.go\r\ngcc test.c -o test ./k8sutil.so\r\n```\r\n\r\nThen, we ran the program by running `./test`.\r\n\r\n### What did you expect to see?\r\nWe expected to see the long string gets returned correctly and the program does not crash.\r\n\r\n### What did you see instead?\r\nThe program crashed with the following error:\r\n\r\n```shell\r\npanic: runtime error: index out of range [1752834508] with length 1073741824\r\n\r\ngoroutine 17 [running, locked to thread]:\r\nmain._Cfunc_CString({0xc000680000, 0x687a21cc})\r\n        _cgo_gotypes.go:49 +0xab\r\nmain.parse(0x0?)\r\n        /home/hoyhbx/k8sutil.go:18 +0xba\r\nAborted (core dumped)\r\n```","go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""k8s.io/apimachinery/pkg/api/resource""\r\n)\r\n\r\n//export parse\r\nfunc parse(valuePtr *C.char) *C.char {\r\n\tvalue := C.GoString(valuePtr)\r\n\tq, err := resource.ParseQuantity(value)\r\n\tif err != nil {\r\n\t\treturn C.CString(""INVALID"")\r\n\t}\r\n\treturn C.CString(q.AsDec().String())\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, world."")\r\n}\r\n\r\n"
53856,"cmd/go: buildmode is not set in build settings<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 18.4\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/capnspacehook/.cache/go-build""\r\nGOENV=""/home/capnspacehook/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/capnspacehook/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/capnspacehook/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4110434964=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```sh\r\ngo build -o hello hello.go\r\ngo version -m hello\r\ngo build -buildmode pie -o hello-pie hello.go\r\ngo version -m hello-pie\r\n```\r\n\r\nhello.go:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=exe\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=pie\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\nI expected to see the `-buildmode` flag in the build settings. I can see that it is not added here: https://github.com/golang/go/blob/f956941b0f5a5a841827bd3e84401d32916bb73e/src/cmd/go/internal/load/pkg.go#L2349",NeedsFix|FrozenDueToAge|GoCommand,capnspacehook,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 18.4\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/capnspacehook/.cache/go-build""\r\nGOENV=""/home/capnspacehook/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/capnspacehook/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/capnspacehook/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4110434964=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```sh\r\ngo build -o hello hello.go\r\ngo version -m hello\r\ngo build -buildmode pie -o hello-pie hello.go\r\ngo version -m hello-pie\r\n```\r\n\r\nhello.go:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n        fmt.Println(""yo"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=exe\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=pie\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\nI expected to see the `-buildmode` flag in the build settings. I can see that it is not added here: https://github.com/golang/go/blob/f956941b0f5a5a841827bd3e84401d32916bb73e/src/cmd/go/internal/load/pkg.go#L2349","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n        fmt.Println(""yo"")\r\n}\r\n"
53741,"x/vuln/cmd/govulncheck: CVEs are not detected in GOPATH modeReopening #51591 because the issue is still present.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.11 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/tmp/.gocache""\r\nGOENV=""/Users/rittneje/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/rittneje/test/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/rittneje/test""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/rittneje/go1.17.11""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/rittneje/go1.17.11/pkg/tool/darwin_amd64""\r\nGOVCS=""REDACTED""\r\nGOVERSION=""go1.17.11""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/kf/kr7_s3xx0l12zbj3jrn082hmzy5gvy/T/go-build1950822096=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule cvetest\r\n\r\ngo 1.16\r\n\r\nrequire (\r\n\tgolang.org/x/text v0.3.0\r\n)\r\n```\r\n\r\nmain.go\r\n\r\n\r\nThese files are located under $GOPATH/src/cvetest.\r\n\r\nI then ran `govulncheck cvetest` in $GOPATH.\r\n\r\n### What did you expect to see?\r\n\r\nEither it should report the vulnerability, or at least it should fail with an appropriate error message if this mode of operation is not supported.\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nFound 1 known vulnerability.\r\n-------------------------------------------------------\r\n\r\nGO-2021-0113\r\nDue to improper index calculation, an incorrectly formatted language tag can cause Parse\r\nto panic via an out of bounds read. If Parse is used to process untrusted user inputs,\r\nthis may be used as a vector for a denial of service attack.\r\n\r\nCall stacks in your code:\r\n cvetest.main calls golang.org/x/text/language.Parse\r\n\r\nFound in:  golang.org/x/text/language@v0.3.0\r\nFixed in:  golang.org/x/text/language@v0.3.7\r\nMore info: https://pkg.go.dev/vuln/GO-2021-0113\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nNo vulnerabilities found.\r\n```\r\n\r\nIf I run the same command in $GOPATH/src/cvetest then it works.",WaitingForInfo|NeedsFix|FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"Reopening #51591 because the issue is still present.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.11 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/tmp/.gocache""\r\nGOENV=""/Users/rittneje/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/rittneje/test/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/rittneje/test""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/rittneje/go1.17.11""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/rittneje/go1.17.11/pkg/tool/darwin_amd64""\r\nGOVCS=""REDACTED""\r\nGOVERSION=""go1.17.11""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/kf/kr7_s3xx0l12zbj3jrn082hmzy5gvy/T/go-build1950822096=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule cvetest\r\n\r\ngo 1.16\r\n\r\nrequire (\r\n\tgolang.org/x/text v0.3.0\r\n)\r\n```\r\n\r\nmain.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/text/language""\r\n)\r\n\r\nfunc main() {\r\n\tlanguage.Parse("""")\r\n}\r\n```\r\n\r\nThese files are located under $GOPATH/src/cvetest.\r\n\r\nI then ran `govulncheck cvetest` in $GOPATH.\r\n\r\n### What did you expect to see?\r\n\r\nEither it should report the vulnerability, or at least it should fail with an appropriate error message if this mode of operation is not supported.\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nFound 1 known vulnerability.\r\n-------------------------------------------------------\r\n\r\nGO-2021-0113\r\nDue to improper index calculation, an incorrectly formatted language tag can cause Parse\r\nto panic via an out of bounds read. If Parse is used to process untrusted user inputs,\r\nthis may be used as a vector for a denial of service attack.\r\n\r\nCall stacks in your code:\r\n cvetest.main calls golang.org/x/text/language.Parse\r\n\r\nFound in:  golang.org/x/text/language@v0.3.0\r\nFixed in:  golang.org/x/text/language@v0.3.7\r\nMore info: https://pkg.go.dev/vuln/GO-2021-0113\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nNo vulnerabilities found.\r\n```\r\n\r\nIf I run the same command in $GOPATH/src/cvetest then it works.","go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/text/language""\r\n)\r\n\r\nfunc main() {\r\n\tlanguage.Parse("""")\r\n}\r\n"
53692,"cmd/compile: inconsistent error messages based on type constraints### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip as of today\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sethvargo/Library/Caches/go-build""\r\nGOENV=""/Users/sethvargo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sethvargo/Development/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sethvargo/Development/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build4094322222=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI _suspect_ the root cause of my actual issue is https://github.com/golang/go/issues/41176, but it would be great if @ianlancetaylor can confirm for me :smile:.\r\n\r\nPlayground link for the code: https://go.dev/play/p/RqzqQxNapkw. Note this code does not compile.\r\n\r\nCode:\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAs shown in the comments, the error messages are all subtly different depending on the type declarations on the function. I would expect the same error messages here.\r\n\r\n\r\n### What did you see instead?\r\n\r\nDifferent error messages.\r\n\r\n\r\n### Aside\r\n\r\nAs an aside, it's unclear to me what the ""correct"" authorship is here. I really appreciate Go's ""do one thing"", but there seems to be multiple ways to define generics, all of which are subtly different with unknown consequences.",NeedsInvestigation|FrozenDueToAge|TypeInference|compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip as of today\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sethvargo/Library/Caches/go-build""\r\nGOENV=""/Users/sethvargo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sethvargo/Development/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sethvargo/Development/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build4094322222=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI _suspect_ the root cause of my actual issue is https://github.com/golang/go/issues/41176, but it would be great if @ianlancetaylor can confirm for me :smile:.\r\n\r\nPlayground link for the code: https://go.dev/play/p/RqzqQxNapkw. Note this code does not compile.\r\n\r\nCode:\r\n\r\n```go\r\npackage main\r\n\r\n// Cache is a generic cache implementation.\r\ntype Cache[K comparable, V any] interface {\r\n\tGet(K)\r\n\tSet(K, V)\r\n}\r\n\r\n// LRU is a cache.\r\ntype LRU[K comparable, V any] struct{}\r\n\r\nfunc (l *LRU[K, V]) Get(key K)        {}\r\nfunc (l *LRU[K, V]) Set(key K, val V) {}\r\n\r\n// WithLocking1 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking1[K comparable, V any, C Cache[K, V]](cache C) {}\r\n\r\n// WithLocking2 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking2[K comparable, V any](cache Cache[K, V]) {}\r\n\r\n// WithLocking3 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking3[K comparable](cache Cache[K, any]) {}\r\n\r\nfunc main() {\r\n\tvar lru LRU[string, int]\r\n\r\n\tWithLocking1[string, int](&lru) // ok\r\n\tWithLocking1[string](&lru)      // nok: cannot infer V\r\n\tWithLocking1(&lru)              // nok: cannot infer K\r\n\r\n\tWithLocking2[string, int](&lru) // ok\r\n\tWithLocking2[string](&lru)      // nok: does not match Cache[string, V]\r\n\tWithLocking2(&lru)              // nok: cannot infer K and V\r\n\r\n\tWithLocking3[string](&lru) // nok: does not implement Cache[string, any] (wrong type for method Set)\r\n\t                           //   have Set(key string, val int)\r\n\t                           //   want Set(string, any)\r\n\tWithLocking3(&lru) // nok: cannot infer K\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAs shown in the comments, the error messages are all subtly different depending on the type declarations on the function. I would expect the same error messages here.\r\n\r\n\r\n### What did you see instead?\r\n\r\nDifferent error messages.\r\n\r\n\r\n### Aside\r\n\r\nAs an aside, it's unclear to me what the ""correct"" authorship is here. I really appreciate Go's ""do one thing"", but there seems to be multiple ways to define generics, all of which are subtly different with unknown consequences.","go\r\npackage main\r\n\r\n// Cache is a generic cache implementation.\r\ntype Cache[K comparable, V any] interface {\r\n\tGet(K)\r\n\tSet(K, V)\r\n}\r\n\r\n// LRU is a cache.\r\ntype LRU[K comparable, V any] struct{}\r\n\r\nfunc (l *LRU[K, V]) Get(key K)        {}\r\nfunc (l *LRU[K, V]) Set(key K, val V) {}\r\n\r\n// WithLocking1 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking1[K comparable, V any, C Cache[K, V]](cache C) {}\r\n\r\n// WithLocking2 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking2[K comparable, V any](cache Cache[K, V]) {}\r\n\r\n// WithLocking3 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking3[K comparable](cache Cache[K, any]) {}\r\n\r\nfunc main() {\r\n\tvar lru LRU[string, int]\r\n\r\n\tWithLocking1[string, int](&lru) // ok\r\n\tWithLocking1[string](&lru)      // nok: cannot infer V\r\n\tWithLocking1(&lru)              // nok: cannot infer K\r\n\r\n\tWithLocking2[string, int](&lru) // ok\r\n\tWithLocking2[string](&lru)      // nok: does not match Cache[string, V]\r\n\tWithLocking2(&lru)              // nok: cannot infer K and V\r\n\r\n\tWithLocking3[string](&lru) // nok: does not implement Cache[string, any] (wrong type for method Set)\r\n\t                           //   have Set(key string, val int)\r\n\t                           //   want Set(string, any)\r\n\tWithLocking3(&lru) // nok: cannot infer K\r\n}\r\n"
53650,spec: constraint type inference should proceed even if an individual unification step failsEdit: See https://github.com/golang/go/issues/53650#issuecomment-1334495063 for a summary of the problem.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 windows/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCompile success\r\n\r\n### What did you see instead?\r\n\r\nerror:  \r\n```\r\nTBase does not match int\r\nTBase does not match int\r\n```\r\n,Documentation|NeedsFix|FrozenDueToAge|TypeInference|compiler/runtime,griesemer,"Edit: See https://github.com/golang/go/issues/53650#issuecomment-1334495063 for a summary of the problem.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 windows/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n```go\r\n\r\ntype BaseT interface {\r\n\tType1 | Type2\r\n}\r\ntype BaseType int\r\ntype Type1 BaseType\r\ntype Type2 BaseType // float64\r\n\r\ntype ValueT[T BaseT] struct {\r\n\tA1 T\r\n}\r\n\r\nfunc NewType1() *ValueT[Type1] {\r\n\tr := NewT[Type1]()\r\n\treturn r\r\n}\r\nfunc NewType2() *ValueT[Type2] {\r\n\tr := NewT[Type2]()\r\n\treturn r\r\n}\r\n\r\nfunc NewT[TBase BaseT, TVal ValueT[TBase]]() *TVal {\r\n\tret := TVal{}\r\n\treturn &ret\r\n}\r\nfunc TestGoType(t *testing.T) {\r\n\tr1 := NewType1()\r\n\tr2 := NewType2()\r\n\tt.Log(r1, r2)\r\n\tt.Log(reflect.TypeOf(r1), reflect.TypeOf(r2))\r\n\tfooT1(r1.A1)\r\n\tfooT2(r2.A1)\r\n}\r\n\r\nfunc fooT1(t1 Type1) {\r\n\r\n}\r\nfunc fooT2(t2 Type2) {\r\n\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCompile success\r\n\r\n### What did you see instead?\r\n\r\nerror:  \r\n```\r\nTBase does not match int\r\nTBase does not match int\r\n```\r\n","go\r\n\r\ntype BaseT interface {\r\n\tType1 | Type2\r\n}\r\ntype BaseType int\r\ntype Type1 BaseType\r\ntype Type2 BaseType // float64\r\n\r\ntype ValueT[T BaseT] struct {\r\n\tA1 T\r\n}\r\n\r\nfunc NewType1() *ValueT[Type1] {\r\n\tr := NewT[Type1]()\r\n\treturn r\r\n}\r\nfunc NewType2() *ValueT[Type2] {\r\n\tr := NewT[Type2]()\r\n\treturn r\r\n}\r\n\r\nfunc NewT[TBase BaseT, TVal ValueT[TBase]]() *TVal {\r\n\tret := TVal{}\r\n\treturn &ret\r\n}\r\nfunc TestGoType(t *testing.T) {\r\n\tr1 := NewType1()\r\n\tr2 := NewType2()\r\n\tt.Log(r1, r2)\r\n\tt.Log(reflect.TypeOf(r1), reflect.TypeOf(r2))\r\n\tfooT1(r1.A1)\r\n\tfooT2(r2.A1)\r\n}\r\n\r\nfunc fooT1(t1 Type1) {\r\n\r\n}\r\nfunc fooT2(t2 Type2) {\r\n\r\n}\r\n\r\n"
53569,"x/build/maintner/maintnerd: /logs endpoint fails to serve 304 successfully during long poll, ends up serving 502 insteadThe /logs endpoint supports long polling via `waitsizenot` parameter. To avoid being flagged as a timeout, it tries to serve a 304 in just under a minute (55 seconds specifically):\r\n\r\n\r\n\r\n_(Source: [x/build/maintner/maintnerd/gcslog/gcslog.go#243-253](https://cs.opensource.google/go/x/build/+/master:maintner/maintnerd/gcslog/gcslog.go;l=243-253;drc=14e3e09d6b1042c8c076c684ae2352962ded3591).)_\r\n\r\nI think this worked fine before, but in practice it seems not to work at all now. Instead it always serves a 502 after 60 seconds:\r\n\r\n```\r\n$ time curl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'\r\nHTTP/2 502 \r\ncontent-type: text/html; charset=UTF-8\r\nreferrer-policy: no-referrer\r\ncontent-length: 332\r\ndate: Mon, 27 Jun 2022 02:56:31 GMT\r\nalt-svc: h3="":443""; ma=2592000,h3-29="":443""; ma=2592000\r\n\r\n\r\n<html><head>\r\n<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">\r\n<title>502 Server Error</title>\r\n</head>\r\n<body text=#000000 bgcolor=#ffffff>\r\n<h1>Error: Server Error</h1>\r\n<h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>\r\n<h2></h2>\r\n</body></html>\r\ncurl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'  0.02s user 0.02s system 0% cpu 1:00.14 total\r\n```\r\n\r\nCan be reproduced during quiet times (i.e., need 60 seconds+ of inactivity) by manually computing the current corpus size, or by running [maintwatch](https://pkg.go.dev/golang.org/x/build/maintner/maintwatch).\r\n\r\nMaybe 55 seconds has become too short because of new internal timeouts on the load balancing side. Can trivially try something like 45-50 or 20-25 seconds.\r\n\r\nThis isn't a big deal for functionality because most callers retry both 502 no differently than a correctly served 304, but adds some noise and inefficiency.",Builders|NeedsFix|FrozenDueToAge,dmitshur,"The /logs endpoint supports long polling via `waitsizenot` parameter. To avoid being flagged as a timeout, it tries to serve a 304 in just under a minute (55 seconds specifically):\r\n\r\n```Go\r\n// Return a 304 if there's no activity in just under a minute.\r\n// This keeps some occasional activity on the TCP connection\r\n// so we (and any proxies) know it's alive, and can fit\r\n// within reason read/write deadlines on either side.\r\nctx, cancel := context.WithTimeout(r.Context(), 55*time.Second)\r\ndefer cancel()\r\nchanged := gl.waitSizeNot(ctx, oldSize)\r\nif !changed {\r\n\tw.WriteHeader(http.StatusNotModified)\r\n\treturn\r\n}\r\n```\r\n\r\n_(Source: [x/build/maintner/maintnerd/gcslog/gcslog.go#243-253](https://cs.opensource.google/go/x/build/+/master:maintner/maintnerd/gcslog/gcslog.go;l=243-253;drc=14e3e09d6b1042c8c076c684ae2352962ded3591).)_\r\n\r\nI think this worked fine before, but in practice it seems not to work at all now. Instead it always serves a 502 after 60 seconds:\r\n\r\n```\r\n$ time curl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'\r\nHTTP/2 502 \r\ncontent-type: text/html; charset=UTF-8\r\nreferrer-policy: no-referrer\r\ncontent-length: 332\r\ndate: Mon, 27 Jun 2022 02:56:31 GMT\r\nalt-svc: h3="":443""; ma=2592000,h3-29="":443""; ma=2592000\r\n\r\n\r\n<html><head>\r\n<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">\r\n<title>502 Server Error</title>\r\n</head>\r\n<body text=#000000 bgcolor=#ffffff>\r\n<h1>Error: Server Error</h1>\r\n<h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>\r\n<h2></h2>\r\n</body></html>\r\ncurl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'  0.02s user 0.02s system 0% cpu 1:00.14 total\r\n```\r\n\r\nCan be reproduced during quiet times (i.e., need 60 seconds+ of inactivity) by manually computing the current corpus size, or by running [maintwatch](https://pkg.go.dev/golang.org/x/build/maintner/maintwatch).\r\n\r\nMaybe 55 seconds has become too short because of new internal timeouts on the load balancing side. Can trivially try something like 45-50 or 20-25 seconds.\r\n\r\nThis isn't a big deal for functionality because most callers retry both 502 no differently than a correctly served 304, but adds some noise and inefficiency.","Go\r\n// Return a 304 if there's no activity in just under a minute.\r\n// This keeps some occasional activity on the TCP connection\r\n// so we (and any proxies) know it's alive, and can fit\r\n// within reason read/write deadlines on either side.\r\nctx, cancel := context.WithTimeout(r.Context(), 55*time.Second)\r\ndefer cancel()\r\nchanged := gl.waitSizeNot(ctx, oldSize)\r\nif !changed {\r\n\tw.WriteHeader(http.StatusNotModified)\r\n\treturn\r\n}\r\n"
53542,"runtime/metrics: data race detected in Read### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, still reproducible with 1.19beta1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cristian/Library/Caches/go-build""\r\nGOENV=""/Users/cristian/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cristian/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cristian/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/98/fgzhqvmx7x1d61fqsvw9cg9m0000gn/T/go-build1308397819=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.18.3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.18.3\r\nuname -v: Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101\r\nProductName:\tmacOS\r\nProductVersion:\t12.4\r\nBuildVersion:\t21F79\r\nlldb --version: lldb-1316.0.9.46\r\nApple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`runtime/metrics` says that ""It is safe to execute multiple Read calls concurrently"". However, running the following code with race detector enabled suggests a data race. Unsure whether this is a false positive (`metrics.Read` uses a semaphore lock).\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.\r\n\r\n### What did you see instead?\r\n\r\nData race detected.\r\n\r\n```\r\n$ go run -race main.go\r\nbytes allocated: 511392\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000100030 by goroutine 8:\r\n  runtime.evacuate_fast64()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_fast64.go:376 +0x3fc\r\n  runtime/metrics.runtime_readMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:563 +0xc0\r\n\r\nPrevious write at 0x00c000100030 by goroutine 7:\r\n  runtime.mapaccess2_faststr()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_faststr.go:108 +0x43c\r\n  runtime.initMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:67 +0x254\r\n\r\nGoroutine 8 (running) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n\r\nGoroutine 7 (finished) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n==================\r\nbytes allocated: 552264\r\nFound 1 data race(s)\r\nexit status 66\r\n```",NeedsFix|FrozenDueToAge|release-blocker,mknyszek|prattmic,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, still reproducible with 1.19beta1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cristian/Library/Caches/go-build""\r\nGOENV=""/Users/cristian/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cristian/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cristian/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/98/fgzhqvmx7x1d61fqsvw9cg9m0000gn/T/go-build1308397819=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.18.3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.18.3\r\nuname -v: Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101\r\nProductName:\tmacOS\r\nProductVersion:\t12.4\r\nBuildVersion:\t21F79\r\nlldb --version: lldb-1316.0.9.46\r\nApple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`runtime/metrics` says that ""It is safe to execute multiple Read calls concurrently"". However, running the following code with race detector enabled suggests a data race. Unsure whether this is a false positive (`metrics.Read` uses a semaphore lock).\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""runtime/metrics""\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        var wg sync.WaitGroup\r\n\r\n        for i := 0; i < 2; i++ {\r\n                wg.Add(1)\r\n                go func() {\r\n                        sample := make([]metrics.Sample, 1)\r\n                        sample[0].Name = ""/gc/heap/allocs:bytes""\r\n                        metrics.Read(sample)\r\n                        fmt.Printf(""bytes allocated: %d\\n"", sample[0].Value.Uint64())\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.\r\n\r\n### What did you see instead?\r\n\r\nData race detected.\r\n\r\n```\r\n$ go run -race main.go\r\nbytes allocated: 511392\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000100030 by goroutine 8:\r\n  runtime.evacuate_fast64()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_fast64.go:376 +0x3fc\r\n  runtime/metrics.runtime_readMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:563 +0xc0\r\n\r\nPrevious write at 0x00c000100030 by goroutine 7:\r\n  runtime.mapaccess2_faststr()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_faststr.go:108 +0x43c\r\n  runtime.initMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:67 +0x254\r\n\r\nGoroutine 8 (running) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n\r\nGoroutine 7 (finished) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n==================\r\nbytes allocated: 552264\r\nFound 1 data race(s)\r\nexit status 66\r\n```","go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""runtime/metrics""\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        var wg sync.WaitGroup\r\n\r\n        for i := 0; i < 2; i++ {\r\n                wg.Add(1)\r\n                go func() {\r\n                        sample := make([]metrics.Sample, 1)\r\n                        sample[0].Name = ""/gc/heap/allocs:bytes""\r\n                        metrics.Read(sample)\r\n                        fmt.Printf(""bytes allocated: %d\\n"", sample[0].Value.Uint64())\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n}\r\n"
53473,"flag: UnquoteUsage checks for IsBoolFlag() method presence but doesn't actually call it### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nnot relevant (but apple silicon M1 macos)\r\n\r\n### What did you do?\r\n\r\nImplemented a generic set of flag extension and part of the generic includes:\r\n\r\n\r\nYet despite returning false for the non bool, flag.PrintDefaults through UnquoteUsage thinks all my types are booleans (don't require a `value`) and thus my usage output regressed from for instance\r\n\r\n```diff\r\n-  -loglevel value\r\n+  -loglevel\r\n         loglevel, one of [Debug Verbose Info Warning Error Critical Fatal]\r\n (default Info)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`value` still output\r\n\r\n### What did you see instead?\r\n\r\nnothing\r\n\r\nps: I can workaround by making the bool type special but it's unfortunate\r\n",NeedsFix|FrozenDueToAge,robpike,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nnot relevant (but apple silicon M1 macos)\r\n\r\n### What did you do?\r\n\r\nImplemented a generic set of flag extension and part of the generic includes:\r\n```golang\r\nfunc (d *DynValue[T]) IsBoolFlag() bool {\r\n\tvar v T\r\n\tswitch any(v).(type) {\r\n\tcase bool:\r\n\t\treturn true\r\n\tdefault:\r\n\t\treturn false\r\n\t}\r\n}\r\n```\r\n\r\nYet despite returning false for the non bool, flag.PrintDefaults through UnquoteUsage thinks all my types are booleans (don't require a `value`) and thus my usage output regressed from for instance\r\n\r\n```diff\r\n-  -loglevel value\r\n+  -loglevel\r\n         loglevel, one of [Debug Verbose Info Warning Error Critical Fatal]\r\n (default Info)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`value` still output\r\n\r\n### What did you see instead?\r\n\r\nnothing\r\n\r\nps: I can workaround by making the bool type special but it's unfortunate\r\n",golang\r\nfunc (d *DynValue[T]) IsBoolFlag() bool {\r\n\tvar v T\r\n\tswitch any(v).(type) {\r\n\tcase bool:\r\n\t\treturn true\r\n\tdefault:\r\n\t\treturn false\r\n\t}\r\n}\r\n
53472,"net/http: EOF returned from http.Transport### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitr/Library/Caches/go-build""\r\nGOENV=""/Users/mitr/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitr/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitr/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitr/Go/src/github.com/containers/image/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tp/yfcwvlb55vx8lkv5gppb43cm0000gn/T/go-build3737075247=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a HTTP server that reads the request, but (cleanly) closes the connection without producing any response:\r\n\r\n\r\n### What did you expect to see?\r\nAn error saying something about an unexpectedly closed connection.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n2022/06/21 02:28:30 127.0.0.1:64135: Accepted\r\n2022/06/21 02:28:30 127.0.0.1:64135: Read 96\r\n2022/06/21 02:28:30 127.0.0.1:64135: Closed\r\nres=(*http.Response)(nil), err=Get ""http://127.0.0.1:64134/"": EOF (&url.Error{Op:""Get"", URL:""http://127.0.0.1:64134/"", Err:(*errors.errorString)(0xc000098060)})\r\n```\r\ni.e. the error is `io.EOF`, which seems inconsistent with the official definition of that value:\r\n> Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.\r\n\r\n### Notes\r\nI appreciate that this might not be possible to change due to the compatibility promise.\r\n\r\nThe immediate cause is https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2092 ; if that returns `io.EOF`, it is wrapped in https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2109 , but later only unwrapped to become raw `io.EOF` again, with no logic anywhere to turn it into an \u201cthis was unexpected\u201d error.\r\n\r\n\r\n",NeedsInvestigation,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitr/Library/Caches/go-build""\r\nGOENV=""/Users/mitr/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitr/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitr/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitr/Go/src/github.com/containers/image/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tp/yfcwvlb55vx8lkv5gppb43cm0000gn/T/go-build3737075247=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a HTTP server that reads the request, but (cleanly) closes the connection without producing any response:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""log""\r\n\t""net""\r\n\t""net/http""\r\n)\r\n\r\nfunc server(ln net.Listener) {\r\n\tfor {\r\n\t\tconn, err := ln.Accept()\r\n\t\tif err != nil {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlog.Printf(""%v: Accepted"", conn.RemoteAddr())\r\n\t\tvar buf [4096]byte          // Hopefully enough for a full header\r\n\t\tn, err := conn.Read(buf[:]) // Completely read and ignore the header\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Read %d"", conn.RemoteAddr(), n)\r\n\t\terr = conn.Close()\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Closed"", conn.RemoteAddr())\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tln, err := net.Listen(""tcp"", ""127.0.0.1:0"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tgo server(ln)\r\n\r\n\tres, err := http.Get(fmt.Sprintf(""http://%s/"", ln.Addr().String()))\r\n\tfmt.Printf(""res=%#v, err=%v (%#v)"", res, err, err)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nAn error saying something about an unexpectedly closed connection.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n2022/06/21 02:28:30 127.0.0.1:64135: Accepted\r\n2022/06/21 02:28:30 127.0.0.1:64135: Read 96\r\n2022/06/21 02:28:30 127.0.0.1:64135: Closed\r\nres=(*http.Response)(nil), err=Get ""http://127.0.0.1:64134/"": EOF (&url.Error{Op:""Get"", URL:""http://127.0.0.1:64134/"", Err:(*errors.errorString)(0xc000098060)})\r\n```\r\ni.e. the error is `io.EOF`, which seems inconsistent with the official definition of that value:\r\n> Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.\r\n\r\n### Notes\r\nI appreciate that this might not be possible to change due to the compatibility promise.\r\n\r\nThe immediate cause is https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2092 ; if that returns `io.EOF`, it is wrapped in https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2109 , but later only unwrapped to become raw `io.EOF` again, with no logic anywhere to turn it into an \u201cthis was unexpected\u201d error.\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""log""\r\n\t""net""\r\n\t""net/http""\r\n)\r\n\r\nfunc server(ln net.Listener) {\r\n\tfor {\r\n\t\tconn, err := ln.Accept()\r\n\t\tif err != nil {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlog.Printf(""%v: Accepted"", conn.RemoteAddr())\r\n\t\tvar buf [4096]byte          // Hopefully enough for a full header\r\n\t\tn, err := conn.Read(buf[:]) // Completely read and ignore the header\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Read %d"", conn.RemoteAddr(), n)\r\n\t\terr = conn.Close()\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Closed"", conn.RemoteAddr())\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tln, err := net.Listen(""tcp"", ""127.0.0.1:0"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tgo server(ln)\r\n\r\n\tres, err := http.Get(fmt.Sprintf(""http://%s/"", ln.Addr().String()))\r\n\tfmt.Printf(""res=%#v, err=%v (%#v)"", res, err, err)\r\n}\r\n"
53419,"cmd/compile: ambiguous selector with generic interface & embedded types<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\nhttps://go.dev/play/p/Jyws-pz9k5X\r\n\r\n\r\n### What did you expect to see?\r\nsuccessful compilation\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:26:10: ambiguous selector c.Concat\r\n\r\nGo build failed.\r\n```\r\n\r\nThe error is with the `Both` type (as if I remove it, the issue goes away). However on `Both`, `Concat` is not ambiguous. `Both` has it's own `Concat` method, and should not be trying to fall through to either of the embedded types.\r\n",NeedsFix|FrozenDueToAge|generics,mdempsky|griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype MyString string\r\ntype MyByteSlice []byte\r\ntype Both struct {\r\n\tMyString\r\n\tMyByteSlice\r\n}\r\n\r\nfunc (s1 MyString) Concat(s2 MyString) MyString            { return s1 + s2 }\r\nfunc (bs1 MyByteSlice) Concat(bs2 MyByteSlice) MyByteSlice { return append(bs1, bs2...) }\r\nfunc (b1 Both) Concat(b2 Both) Both {\r\n\treturn Both{\r\n\t\tb1.MyString.Concat(b2.MyString),\r\n\t\tb1.MyByteSlice.Concat(b2.MyByteSlice),\r\n\t}\r\n}\r\n\r\ntype Concatable[T any] interface {\r\n\tConcat(T) T\r\n}\r\n\r\nfunc Repeat[T Concatable[T]](c T) T {\r\n\treturn c.Concat(c)\r\n}\r\n\r\nfunc main() {\r\n\ts := MyString(""foo"")\r\n\tbs := MyByteSlice(""foo"")\r\n\tb := Both{MyString(""foo""), MyByteSlice(""foo"")}\r\n\tfmt.Println(Repeat(s))\r\n\tfmt.Println(Repeat(bs))\r\n\tfmt.Println(Repeat(b))\r\n}\r\n```\r\nhttps://go.dev/play/p/Jyws-pz9k5X\r\n\r\n\r\n### What did you expect to see?\r\nsuccessful compilation\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:26:10: ambiguous selector c.Concat\r\n\r\nGo build failed.\r\n```\r\n\r\nThe error is with the `Both` type (as if I remove it, the issue goes away). However on `Both`, `Concat` is not ambiguous. `Both` has it's own `Concat` method, and should not be trying to fall through to either of the embedded types.\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype MyString string\r\ntype MyByteSlice []byte\r\ntype Both struct {\r\n\tMyString\r\n\tMyByteSlice\r\n}\r\n\r\nfunc (s1 MyString) Concat(s2 MyString) MyString            { return s1 + s2 }\r\nfunc (bs1 MyByteSlice) Concat(bs2 MyByteSlice) MyByteSlice { return append(bs1, bs2...) }\r\nfunc (b1 Both) Concat(b2 Both) Both {\r\n\treturn Both{\r\n\t\tb1.MyString.Concat(b2.MyString),\r\n\t\tb1.MyByteSlice.Concat(b2.MyByteSlice),\r\n\t}\r\n}\r\n\r\ntype Concatable[T any] interface {\r\n\tConcat(T) T\r\n}\r\n\r\nfunc Repeat[T Concatable[T]](c T) T {\r\n\treturn c.Concat(c)\r\n}\r\n\r\nfunc main() {\r\n\ts := MyString(""foo"")\r\n\tbs := MyByteSlice(""foo"")\r\n\tb := Both{MyString(""foo""), MyByteSlice(""foo"")}\r\n\tfmt.Println(Repeat(s))\r\n\tfmt.Println(Repeat(bs))\r\n\tfmt.Println(Repeat(b))\r\n}\r\n"
53389,"cmd/compile: ""type does not match inferred type"" even though it compiles when the inferred type is explicitly provided as type argument<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3440234987=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI tried compiling the below program.\r\n\r\nhttps://go.dev/play/p/QcWycysXf-F?v=gotip\r\n\r\n\r\n\r\n### What did you expect to see?\r\nI expected `F(x, Y{})` to be equivalent to `F[any](x, Y{})`, and thus compile without issue.\r\n\r\n\r\n### What did you see instead?\r\n`F(x, Y{})` failed to compile with the following error:\r\n```\r\ntype Y of Y{} does not match inferred type any for T\r\n```\r\n\r\n",Thinking|NeedsDecision|FrozenDueToAge|early-in-cycle|TypeInference,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3440234987=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI tried compiling the below program.\r\n\r\nhttps://go.dev/play/p/QcWycysXf-F?v=gotip\r\n```go\r\npackage main\r\n\r\ntype X[T any] struct{}\r\n\r\ntype Y struct{}\r\n\r\nfunc F[T any](x X[T], y T) {}\r\n\r\nfunc main() {\r\n\tx := X[any]{}\r\n\tF(x, any(Y{})) // works\r\n\tF[any](x, Y{}) // works\r\n\tF(x, Y{})      // error: type Y of Y{} does not match inferred type any for T\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nI expected `F(x, Y{})` to be equivalent to `F[any](x, Y{})`, and thus compile without issue.\r\n\r\n\r\n### What did you see instead?\r\n`F(x, Y{})` failed to compile with the following error:\r\n```\r\ntype Y of Y{} does not match inferred type any for T\r\n```\r\n\r\n","go\r\npackage main\r\n\r\ntype X[T any] struct{}\r\n\r\ntype Y struct{}\r\n\r\nfunc F[T any](x X[T], y T) {}\r\n\r\nfunc main() {\r\n\tx := X[any]{}\r\n\tF(x, any(Y{})) // works\r\n\tF[any](x, Y{}) // works\r\n\tF(x, Y{})      // error: type Y of Y{} does not match inferred type any for T\r\n}\r\n"
53324,"cmd/compile: missing combine constant store cases on amd64### What version of Go are you using (`go version`)?\r\ngotip\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```asm\r\nMOVQ $123, (AX)(DX*1)\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```asm\r\nMOVB $123, (AX)(DI*1)\r\nMOVB $0, 1(AX)(DI*1)\r\nMOVB $0, 2(AX)(DI*1)\r\nMOVB $0, 3(AX)(DI*1)\r\nMOVB $0, 4(AX)(DI*1)\r\nMOVB $0, 5(AX)(DI*1)\r\nMOVB $0, 6(AX)(DI*1)\r\nMOVB $0, 7(AX)(DI*1)\r\n```\r\n\r\n",Performance|NeedsInvestigation|FeatureRequest|FrozenDueToAge|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\ngotip\r\n\r\n### What did you do?\r\n\r\n```go\r\nfunc a(b []byte, idx int) {\r\n\tbinary.LittleEndian.PutUint64(b[idx:], 123)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```asm\r\nMOVQ $123, (AX)(DX*1)\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```asm\r\nMOVB $123, (AX)(DI*1)\r\nMOVB $0, 1(AX)(DI*1)\r\nMOVB $0, 2(AX)(DI*1)\r\nMOVB $0, 3(AX)(DI*1)\r\nMOVB $0, 4(AX)(DI*1)\r\nMOVB $0, 5(AX)(DI*1)\r\nMOVB $0, 6(AX)(DI*1)\r\nMOVB $0, 7(AX)(DI*1)\r\n```\r\n\r\n","go\r\nfunc a(b []byte, idx int) {\r\n\tbinary.LittleEndian.PutUint64(b[idx:], 123)\r\n}\r\n"
53105,"gollvm: build aborted when creating a self-referential ArrayT type in TypeManager::buildDITypeTypeManager::buildDIType does not create a replacement type for ArrayT type, and the build will be aborted when creating a self-referential ArrayT type.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngollvm master \r\n\r\nDCMAKE_BUILD_TYPE=Debug\r\n\r\n<pre>\r\n$ go version\r\ngo version unknown linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe issue may be reproduced with the following sample:\r\n\r\ngo run a.go \r\n\r\nFile a.go\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo error, successful build.\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n",NeedsInvestigation,thanm,"TypeManager::buildDIType does not create a replacement type for ArrayT type, and the build will be aborted when creating a self-referential ArrayT type.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngollvm master \r\n\r\nDCMAKE_BUILD_TYPE=Debug\r\n\r\n<pre>\r\n$ go version\r\ngo version unknown linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe issue may be reproduced with the following sample:\r\n\r\ngo run a.go \r\n\r\nFile a.go\r\n\r\n```go\r\npackage a\r\n\r\nconst size = 1\r\n\r\ntype S struct {\r\n\tArray [size]*S\r\n}\r\n\r\n// not pass\r\ntype S1 struct {\r\n\tArray [size]*S\r\n}\r\n// type S1 S // not pass\r\n// type S1 = S // pass\r\n\r\nfunc (p *S1) Init() {\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo error, successful build.\r\n\r\n### What did you see instead?\r\n\r\n```bash\r\n[root@kwephis525702 test]# go run a.go \r\n# command-line-arguments\r\nllvm-goc: /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1889: llvm::DIType* TypeManager::buildDIType(Btype*, DIBuildHelper&): Assertion `tcit->second != nullptr' failed.\r\n #0 0x0000000002c53ad9 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:0\r\n #1 0x0000000002c53b90 PrintStackTraceSignalHandler(void*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:0\r\n #2 0x0000000002c51b55 llvm::sys::RunSignalHandlers() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Signals.cpp:97:0\r\n #3 0x0000000002c5351d SignalHandler(int) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:0\r\n #4 0x00007fe7e07fd5a0 (/usr/lib64/libpthread.so.0+0x135a0)\r\n #5 0x00007fe7e00f078b raise (/usr/lib64/libc.so.6+0x3978b)\r\n #6 0x00007fe7e00f1ab1 abort (/usr/lib64/libc.so.6+0x3aab1)\r\n #7 0x00007fe7e00e904a (/usr/lib64/libc.so.6+0x3204a)\r\n #8 0x00007fe7e00e90c2 (/usr/lib64/libc.so.6+0x320c2)\r\n #9 0x000000000064bf55 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1890:0\r\n#10 0x000000000064ba31 TypeManager::buildStructDIType(BStructType*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1834:0\r\n#11 0x000000000064c7e9 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1988:0\r\n#12 0x000000000064c4f8 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1968:0\r\n#13 0x000000000064c5df TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1975:0\r\n#14 0x000000000064ba31 TypeManager::buildStructDIType(BStructType*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1834:0\r\n#15 0x000000000064c7e9 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1988:0\r\n#16 0x000000000064c4f8 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1968:0\r\n#17 0x000000000064c88f TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1996:0\r\n#18 0x00000000006241a6 DIBuildHelper::beginFunction(Bfunction*, Bnode*, llvm::BasicBlock*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-dibuildhelper.cpp:108:0\r\n#19 0x0000000000542b04 GenBlocks::GenBlocks(llvm::LLVMContext&, Llvm_backend*, Bfunction*, Bnode*, DIBuildHelper*, llvm::BasicBlock*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm.cpp:2991:0\r\n#20 0x0000000000547199 Llvm_backend::function_set_body(Bfunction*, Bstatement*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm.cpp:4052:0\r\n#21 0x000000000045b760 Function::build(Gogo*, Named_object*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:6686:0\r\n#22 0x00000000004620cd Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:8880:0\r\n#23 0x000000000044c4ed Gogo::write_globals() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:1595:0\r\n#24 0x000000000044494c go_write_globals() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/go.cc:198:0\r\n#25 0x0000000000428ca6 gollvm::driver::CompileGoImpl::invokeFrontEnd() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:790:0\r\n#26 0x000000000042628e gollvm::driver::CompileGoImpl::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:192:0\r\n#27 0x0000000000429a76 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:1005:0\r\n#28 0x000000000041a06d gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/Driver.cpp:706:0\r\n#29 0x000000000041a1ee gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/Driver.cpp:729:0\r\n#30 0x000000000040e41e main /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver-main/llvm-goc.cpp:228:0\r\n#31 0x00007fe7e00dcc67 __libc_start_main (/usr/lib64/libc.so.6+0x25c67)\r\n#32 0x000000000040d8ea _start (/usr1/ywq/code/gollvm-workarea/gollvm-install-debug/bin/llvm-goc+0x40d8ea)\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr1/ywq/code/gollvm-workarea/gollvm-install-debug/bin/llvm-goc -c -O2 -g -m64 -fdebug-prefix-map=/usr1/tmp/go-build3317449572=/tmp/go-build -gno-record-gcc-switches -o $WORK/b001/_go_.o -I $WORK/b001/_importcfgroot_ ./a.go $WORK/b001/_gomod_.go\r\n```\r\n\r\n",go\r\npackage a\r\n\r\nconst size = 1\r\n\r\ntype S struct {\r\n\tArray [size]*S\r\n}\r\n\r\n// not pass\r\ntype S1 struct {\r\n\tArray [size]*S\r\n}\r\n// type S1 S // not pass\r\n// type S1 = S // pass\r\n\r\nfunc (p *S1) Init() {\r\n\r\n}\r\n
53087,"cmd/compile: generic code seems to produce duplicate type descriptor<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nTested on 1.18 and 1.18.2.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vscode/.cache/go-build""\r\nGOENV=""/home/vscode/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/workspaces/azure-service-operator/v2/tools/generator/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1336644465=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nAfter using `maps.Clone`, values retrieved from the (copied) map fail to typecast correctly.\r\n\r\n~~I\u2019m still working on a minimal repro, but here is what I\u2019m seeing.~~\r\n\r\nSee small repro below.\r\n\r\n----\r\n\r\nThe original code in question looks like this:\r\n\r\n\r\nThe expectation is that this prints `true` four times as the values retrieved from the map are the same as those put into it. However, it does not; the first value retrieved from the map fails to cast correctly.\r\n\r\nOutput:\r\n```\r\nfrom ok: true\r\nto ok: true\r\nfrom ok: false\r\nto ok: true\r\n```\r\n\r\nThe implementation of `With` looks like this:\r\n\r\n\r\n\r\nI narrowed down the problem to `maps.Clone`. If I copy it as a local function then this continues to fail:\r\n\r\n\r\n\r\nHowever, if the `M` parameter is replaced with `map[K]V` directly, then it works as expected:\r\n\r\n\r\n\r\nNote that this also happens if the same value is input as both ""a"" and ""b""; whichever value was in the map before it was `maps.Clone`d is the one that fails to cast correctly.\r\n\r\n----\r\n\r\n# Repro\r\n\r\nSwitch between `CloneBad` (a copy of `maps.Clone`) and `CloneGood` to see the behaviour change.\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nTested on 1.18 and 1.18.2.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vscode/.cache/go-build""\r\nGOENV=""/home/vscode/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/workspaces/azure-service-operator/v2/tools/generator/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1336644465=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nAfter using `maps.Clone`, values retrieved from the (copied) map fail to typecast correctly.\r\n\r\n~~I\u2019m still working on a minimal repro, but here is what I\u2019m seeing.~~\r\n\r\nSee small repro below.\r\n\r\n----\r\n\r\nThe original code in question looks like this:\r\n```go\r\nvar fromF astmodel.Function = convertFrom\r\n_, ok := fromF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""from ok: %v\\n"", ok)\r\n\r\nvar toF astmodel.Function = convertTo\r\n_, ok = toF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""to ok: %v\\n"", ok)\r\n\r\nm := readonly.EmptyMap[string, astmodel.Function]()\r\nm = m.With(""a"", convertFrom)\r\nm = m.With(""b"", convertTo)\r\n\r\nit, found := m.Get(""a"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""from ok: %v\\n"", ok)\r\n}\r\n\r\nit, found = m.Get(""b"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""to ok: %v\\n"", ok)\r\n}\r\n```\r\n\r\nThe expectation is that this prints `true` four times as the values retrieved from the map are the same as those put into it. However, it does not; the first value retrieved from the map fails to cast correctly.\r\n\r\nOutput:\r\n```\r\nfrom ok: true\r\nto ok: true\r\nfrom ok: false\r\nto ok: true\r\n```\r\n\r\nThe implementation of `With` looks like this:\r\n\r\n```go\r\nfunc (m Map[K, V]) With(key K, value V) Map[K, V] {\r\n\tresult := maps.Clone(m.inner)\r\n\tresult[key] = value\r\n\treturn CreateMapUnsafe(result)\r\n}\r\n```\r\n\r\nI narrowed down the problem to `maps.Clone`. If I copy it as a local function then this continues to fail:\r\n\r\n```go\r\nfunc CloneBad[M ~map[K]V, K comparable, V any](m M) M {\r\n\tr := make(M, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n```\r\n\r\nHowever, if the `M` parameter is replaced with `map[K]V` directly, then it works as expected:\r\n\r\n```go \r\nfunc CloneGood[K comparable, V any](m map[K]V) map[K]V {\r\n\tr := make(map[K]V, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n```\r\n\r\nNote that this also happens if the same value is input as both ""a"" and ""b""; whichever value was in the map before it was `maps.Clone`d is the one that fails to cast correctly.\r\n\r\n----\r\n\r\n# Repro\r\n\r\nSwitch between `CloneBad` (a copy of `maps.Clone`) and `CloneGood` to see the behaviour change.\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\ntype I interface {\r\n\tRun() string\r\n}\r\n\r\ntype S struct {\r\n\tstr string\r\n}\r\n\r\nfunc (s *S) Run() string {\r\n\treturn s.str\r\n}\r\n\r\nvar _ I = &S{}\r\n\r\ntype CloningMap[K comparable, V any] struct {\r\n\tinner map[K]V\r\n}\r\n\r\nfunc (cm CloningMap[K, V]) With(key K, value V) CloningMap[K, V] {\r\n\tresult := CloneBad(cm.inner)\r\n\tresult[key] = value\r\n\treturn CloningMap[K, V]{result}\r\n}\r\n\r\nfunc CloneGood[K comparable, V any](m map[K]V) map[K]V {\r\n\tr := make(map[K]V, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n\r\nfunc CloneBad[M ~map[K]V, K comparable, V any](m M) M {\r\n\tr := make(M, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n\r\nfunc main() {\r\n\ts1 := &S{""one""}\r\n\ts2 := &S{""two""}\r\n\r\n\tm := CloningMap[string, I]{inner: make(map[string]I)}\r\n\tm = m.With(""a"", s1)\r\n\tm = m.With(""b"", s2)\r\n\r\n\tit, found := m.inner[""a""]\r\n\tif found {\r\n\t\t_, ok := it.(*S)\r\n\t\tfmt.Printf(""from ok: %v\\n"", ok)\r\n\t}\r\n\r\n\tit, found = m.inner[""b""]\r\n\tif found {\r\n\t\t_, ok := it.(*S)\r\n\t\tfmt.Printf(""to ok: %v\\n"", ok)\r\n\t}\r\n}\r\n```","go\r\nvar fromF astmodel.Function = convertFrom\r\n_, ok := fromF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""from ok: %v\\n"", ok)\r\n\r\nvar toF astmodel.Function = convertTo\r\n_, ok = toF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""to ok: %v\\n"", ok)\r\n\r\nm := readonly.EmptyMap[string, astmodel.Function]()\r\nm = m.With(""a"", convertFrom)\r\nm = m.With(""b"", convertTo)\r\n\r\nit, found := m.Get(""a"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""from ok: %v\\n"", ok)\r\n}\r\n\r\nit, found = m.Get(""b"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""to ok: %v\\n"", ok)\r\n}\r\n"
52861,"gollvm: cannot use unsafe.Pointer as map key typeGOLLVM has a miscompilation bug that can be reproduced with the following test case.\r\n\r\nThe bug can be reproduced with trunk:\r\n\r\n1. gollvm: https://go.googlesource.com/gollvm/+/0e34e09fc15cde73f1b9974f2a657360abb94b4f\r\n2. gofrontend: https://go.googlesource.com/gofrontend/+/6a33e7e30c89edc12340dc470b44791bb1066feb\r\n\r\nIn the following test case, `m` is a map with `unsafe.Pointer` as key type. Method `test` simply adds key `p` into map `m` and returns true if the key is not present in the map. So `ok1` should be `true` and `ok2` should be `false`. The `gc` compiler can produce the correct output whereas GOLLVM miscompiles and leads to wrong output, i.e., both `ok1` and `ok2` are true.\r\n\r\n\r\n\r\nBelow is the LLVM IR obtained via option `-tracelevel=1`.\r\n\r\n```llvm\r\ndefine internal i8 @main.test(i8* nest %nest.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, i8* %p) #0 !dbg !5 {\r\nentry:\r\n  %m.addr = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8\r\n  %p.addr = alloca i8*, align 8\r\n  %""$ret0"" = alloca i8, align 1\r\n  %ok = alloca i8, align 1\r\n  %tmpv.0 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.1 = alloca {}*, align 8\r\n  %tmpv.2 = alloca i8, align 1\r\n  %tmpv.3 = alloca { i8*, i8 }, align 8\r\n  %sret.actual.0 = alloca { i8*, i8 }, align 8\r\n  %tmpv.4 = alloca i8*, align 8\r\n  %tmpv.5 = alloca i8, align 1\r\n  %tmpv.6 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.7 = alloca {}, align 1\r\n  %tmpv.8 = alloca i8*, align 8\r\n  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8\r\n  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, metadata !32, metadata !DIExpression()), !dbg !33\r\n  store i8* %p, i8** %p.addr, align 8\r\n  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %""$ret0"")\r\n  store i8 0, i8* %""$ret0"", align 1\r\n  call void @llvm.dbg.declare(metadata i8* %""$ret0"", metadata !36, metadata !DIExpression()), !dbg !37\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)\r\n  store i8 0, i8* %ok, align 1\r\n  call void @llvm.dbg.declare(metadata i8* %ok, metadata !38, metadata !DIExpression()), !dbg !40\r\n  %p.ld.0 = load i8*, i8** %p.addr, align 8, !dbg !41\r\n  store i8* %p.ld.0, i8** %tmpv.0, align 8\r\n  %m.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8, !dbg !42\r\n  %tmpv.0.ld.0 = load i8*, i8** %tmpv.0, align 8, !dbg !43 # <----- additional load\r\n  %cast.22 = bitcast i8* %tmpv.0.ld.0 to i64*, !dbg !43 # <----- following cast\r\n  %deref.ld.0 = load i64, i64* %cast.22, align 8, !dbg !43\r\n  %call.0 = call { i8*, i8 } @runtime.mapaccess2__fast64(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6unsafe_0Pointer_7struct_4_5, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m.ld.0, i64 %deref.ld.0), !dbg !43\r\n...\r\n```\r\n\r\n\r\nWe can find that there is an additional load that converts `i8**` into `i8*` and then `i8*` is converted into `i64*`,\r\nwhich means not the address of `p` (i.e., type `i8**`) is converted into `i64*` but the `p` (i.e., type `i8*`) itself is converted into `i64*` (). \r\n\r\n\r\n\r\nIt seems that there is something wrong with the propagation of `VarContext`. Additional load operations are generated during materialization.\r\n",NeedsFix,thanm,"GOLLVM has a miscompilation bug that can be reproduced with the following test case.\r\n\r\nThe bug can be reproduced with trunk:\r\n\r\n1. gollvm: https://go.googlesource.com/gollvm/+/0e34e09fc15cde73f1b9974f2a657360abb94b4f\r\n2. gofrontend: https://go.googlesource.com/gofrontend/+/6a33e7e30c89edc12340dc470b44791bb1066feb\r\n\r\nIn the following test case, `m` is a map with `unsafe.Pointer` as key type. Method `test` simply adds key `p` into map `m` and returns true if the key is not present in the map. So `ok1` should be `true` and `ok2` should be `false`. The `gc` compiler can produce the correct output whereas GOLLVM miscompiles and leads to wrong output, i.e., both `ok1` and `ok2` are true.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nfunc test(m map[unsafe.Pointer]struct{}, p unsafe.Pointer) bool {\r\n\tif _, ok := m[p]; ok {\r\n\t\treturn false\r\n\t}\r\n\tm[p] = struct{}{}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tm := make(map[unsafe.Pointer]struct{})\r\n\tp := unsafe.Pointer(&m)\r\n\tok1 := test(m, p)\r\n\tok2 := test(m, p)\r\n\tif !ok1 || ok2 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n```\r\n\r\nBelow is the LLVM IR obtained via option `-tracelevel=1`.\r\n\r\n```llvm\r\ndefine internal i8 @main.test(i8* nest %nest.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, i8* %p) #0 !dbg !5 {\r\nentry:\r\n  %m.addr = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8\r\n  %p.addr = alloca i8*, align 8\r\n  %""$ret0"" = alloca i8, align 1\r\n  %ok = alloca i8, align 1\r\n  %tmpv.0 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.1 = alloca {}*, align 8\r\n  %tmpv.2 = alloca i8, align 1\r\n  %tmpv.3 = alloca { i8*, i8 }, align 8\r\n  %sret.actual.0 = alloca { i8*, i8 }, align 8\r\n  %tmpv.4 = alloca i8*, align 8\r\n  %tmpv.5 = alloca i8, align 1\r\n  %tmpv.6 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.7 = alloca {}, align 1\r\n  %tmpv.8 = alloca i8*, align 8\r\n  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8\r\n  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, metadata !32, metadata !DIExpression()), !dbg !33\r\n  store i8* %p, i8** %p.addr, align 8\r\n  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %""$ret0"")\r\n  store i8 0, i8* %""$ret0"", align 1\r\n  call void @llvm.dbg.declare(metadata i8* %""$ret0"", metadata !36, metadata !DIExpression()), !dbg !37\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)\r\n  store i8 0, i8* %ok, align 1\r\n  call void @llvm.dbg.declare(metadata i8* %ok, metadata !38, metadata !DIExpression()), !dbg !40\r\n  %p.ld.0 = load i8*, i8** %p.addr, align 8, !dbg !41\r\n  store i8* %p.ld.0, i8** %tmpv.0, align 8\r\n  %m.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8, !dbg !42\r\n  %tmpv.0.ld.0 = load i8*, i8** %tmpv.0, align 8, !dbg !43 # <----- additional load\r\n  %cast.22 = bitcast i8* %tmpv.0.ld.0 to i64*, !dbg !43 # <----- following cast\r\n  %deref.ld.0 = load i64, i64* %cast.22, align 8, !dbg !43\r\n  %call.0 = call { i8*, i8 } @runtime.mapaccess2__fast64(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6unsafe_0Pointer_7struct_4_5, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m.ld.0, i64 %deref.ld.0), !dbg !43\r\n...\r\n```\r\n\r\n\r\nWe can find that there is an additional load that converts `i8**` into `i8*` and then `i8*` is converted into `i64*`,\r\nwhich means not the address of `p` (i.e., type `i8**`) is converted into `i64*` but the `p` (i.e., type `i8*`) itself is converted into `i64*` (). \r\n\r\n\r\n\r\nIt seems that there is something wrong with the propagation of `VarContext`. Additional load operations are generated during materialization.\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nfunc test(m map[unsafe.Pointer]struct{}, p unsafe.Pointer) bool {\r\n\tif _, ok := m[p]; ok {\r\n\t\treturn false\r\n\t}\r\n\tm[p] = struct{}{}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tm := make(map[unsafe.Pointer]struct{})\r\n\tp := unsafe.Pointer(&m)\r\n\tok1 := test(m, p)\r\n\tok2 := test(m, p)\r\n\tif !ok1 || ok2 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n"
52846,"gollvm/gofrontend: missing hash functions for alias types`Gogo::write_specific_type_functions` traverses all types to write `hash_function` for the key type of each map type.\r\nThe trouble is that `Type::needs_specific_type_functions` returns false if the key type is an aliased type. Here we need to delegate the check to the real type (or indeed base type) to see whether we need a hash function for the base type.\r\n\r\n\r\n\r\n```\r\n# command-line-arguments\r\nllvm-goc: llvm-project/llvm/tools/gollvm/gofrontend/go/types.cc:1977: void Type::write_hash_function(Gogo*, int64_t, const Backend_name*, Function_type*): assertion 'saw_errors()' failed.\r\nNamed_object_func: .main.makeMap\r\n #0 0x000055b6708c69cf PrintStackTraceSignalHandler(void*) (bin/llvm-goc+0x1f629cf)\r\n #1 0x000055b6708c4b8c SignalHandler(int) (bin/llvm-goc+0x1f60b8c)\r\n #2 0x00007f52b259a0e0 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x110e0)\r\n #3 0x00007f52b112ffff raise /build/glibc-77giwP/glibc-2.24/signal/../sysdeps/unix/sysv/linux/raise.c:51:0\r\n #4 0x00007f52b113142a abort /build/glibc-77giwP/glibc-2.24/stdlib/abort.c:91:0\r\n #5 0x000055b66f06a0d6 (bin/llvm-goc+0x7060d6)\r\n #6 0x000055b66f059377 Type::write_hash_function(Gogo*, long, Backend_name const*, Function_type*) (.localalias.182) (bin/llvm-goc+0x6f5377)\r\n #7 0x000055b66f0595f3 Type::build_hash_function(Gogo*, long, Function_type*) (.localalias.183) (bin/llvm-goc+0x6f55f3)\r\n #8 0x000055b66f058535 Type::hash_function(Gogo*, Function_type*) (.localalias.184) (bin/llvm-goc+0x6f4535)\r\n #9 0x000055b66f060c6d Map_type::do_type_descriptor(Gogo*, Named_type*) (.localalias.286) (bin/llvm-goc+0x6fcc6d)\r\n#10 0x000055b66f053f5e Type::make_type_descriptor_var(Gogo*) (.localalias.193) (bin/llvm-goc+0x6eff5e)\r\n#11 0x000055b66f054620 Type::type_descriptor_pointer(Gogo*, Location) (bin/llvm-goc+0x6f0620)\r\n#12 0x000055b66f0a3113 Type_descriptor_expression::do_get_backend(Translate_context*) (bin/llvm-goc+0x73f113)\r\n#13 0x000055b66f0d7397 Call_expression::do_get_backend(Translate_context*) (.localalias.377) (bin/llvm-goc+0x773397)\r\n#14 0x000055b66f02776b Temporary_statement::do_get_backend(Translate_context*) (.localalias.129) (bin/llvm-goc+0x6c376b)\r\n#15 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#16 0x000055b66f02421d Block_statement::do_get_backend(Translate_context*) (.localalias.166) (bin/llvm-goc+0x6c021d)\r\n#17 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#18 0x000055b66efe3784 Function::build(Gogo*, Named_object*) (.localalias.95) (bin/llvm-goc+0x67f784)\r\n#19 0x000055b66efe5991 Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) (.localalias.30) (bin/llvm-goc+0x681991)\r\n#20 0x000055b66eff0c2d Gogo::write_globals() (bin/llvm-goc+0x68cc2d)\r\n#21 0x000055b66efb5388 gollvm::driver::CompileGoImpl::invokeFrontEnd() (.localalias.4) (bin/llvm-goc+0x651388)\r\n#22 0x000055b66efbd448 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) (.localalias.13) (bin/llvm-goc+0x659448)\r\n#23 0x000055b66efae875 gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) (.localalias.0) (bin/llvm-goc+0x64a875)\r\n#24 0x000055b66efae97f gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) (bin/llvm-goc+0x64a97f)\r\n#25 0x000055b66eedced1 main (bin/llvm-goc+0x578ed1)\r\n#26 0x00007f52b111d2e1 __libc_start_main /build/glibc-77giwP/glibc-2.24/csu/../csu/libc-start.c:325:0\r\n#27 0x000055b66efa5f1a _start (bin/llvm-goc+0x641f1a)\r\n```\r\n\r\n\r\n",NeedsFix|FrozenDueToAge,thanm,"`Gogo::write_specific_type_functions` traverses all types to write `hash_function` for the key type of each map type.\r\nThe trouble is that `Type::needs_specific_type_functions` returns false if the key type is an aliased type. Here we need to delegate the check to the real type (or indeed base type) to see whether we need a hash function for the base type.\r\n\r\n```go\r\npackage main\r\n\r\ntype RealKey struct {\r\n\tType int64\r\n\tKey string\r\n}\r\n\r\ntype AliasKey = RealKey\r\n\r\nfunc makeMap() map[AliasKey]interface{} {\r\n\tm := make(map[AliasKey]interface{})\r\n\tk := AliasKey{1, """"}\r\n\tm[k] = k\r\n\treturn m\r\n}\r\n\r\nfunc main() {\r\n\tif len(makeMap()) != 1 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n```\r\n\r\n```\r\n# command-line-arguments\r\nllvm-goc: llvm-project/llvm/tools/gollvm/gofrontend/go/types.cc:1977: void Type::write_hash_function(Gogo*, int64_t, const Backend_name*, Function_type*): assertion 'saw_errors()' failed.\r\nNamed_object_func: .main.makeMap\r\n #0 0x000055b6708c69cf PrintStackTraceSignalHandler(void*) (bin/llvm-goc+0x1f629cf)\r\n #1 0x000055b6708c4b8c SignalHandler(int) (bin/llvm-goc+0x1f60b8c)\r\n #2 0x00007f52b259a0e0 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x110e0)\r\n #3 0x00007f52b112ffff raise /build/glibc-77giwP/glibc-2.24/signal/../sysdeps/unix/sysv/linux/raise.c:51:0\r\n #4 0x00007f52b113142a abort /build/glibc-77giwP/glibc-2.24/stdlib/abort.c:91:0\r\n #5 0x000055b66f06a0d6 (bin/llvm-goc+0x7060d6)\r\n #6 0x000055b66f059377 Type::write_hash_function(Gogo*, long, Backend_name const*, Function_type*) (.localalias.182) (bin/llvm-goc+0x6f5377)\r\n #7 0x000055b66f0595f3 Type::build_hash_function(Gogo*, long, Function_type*) (.localalias.183) (bin/llvm-goc+0x6f55f3)\r\n #8 0x000055b66f058535 Type::hash_function(Gogo*, Function_type*) (.localalias.184) (bin/llvm-goc+0x6f4535)\r\n #9 0x000055b66f060c6d Map_type::do_type_descriptor(Gogo*, Named_type*) (.localalias.286) (bin/llvm-goc+0x6fcc6d)\r\n#10 0x000055b66f053f5e Type::make_type_descriptor_var(Gogo*) (.localalias.193) (bin/llvm-goc+0x6eff5e)\r\n#11 0x000055b66f054620 Type::type_descriptor_pointer(Gogo*, Location) (bin/llvm-goc+0x6f0620)\r\n#12 0x000055b66f0a3113 Type_descriptor_expression::do_get_backend(Translate_context*) (bin/llvm-goc+0x73f113)\r\n#13 0x000055b66f0d7397 Call_expression::do_get_backend(Translate_context*) (.localalias.377) (bin/llvm-goc+0x773397)\r\n#14 0x000055b66f02776b Temporary_statement::do_get_backend(Translate_context*) (.localalias.129) (bin/llvm-goc+0x6c376b)\r\n#15 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#16 0x000055b66f02421d Block_statement::do_get_backend(Translate_context*) (.localalias.166) (bin/llvm-goc+0x6c021d)\r\n#17 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#18 0x000055b66efe3784 Function::build(Gogo*, Named_object*) (.localalias.95) (bin/llvm-goc+0x67f784)\r\n#19 0x000055b66efe5991 Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) (.localalias.30) (bin/llvm-goc+0x681991)\r\n#20 0x000055b66eff0c2d Gogo::write_globals() (bin/llvm-goc+0x68cc2d)\r\n#21 0x000055b66efb5388 gollvm::driver::CompileGoImpl::invokeFrontEnd() (.localalias.4) (bin/llvm-goc+0x651388)\r\n#22 0x000055b66efbd448 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) (.localalias.13) (bin/llvm-goc+0x659448)\r\n#23 0x000055b66efae875 gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) (.localalias.0) (bin/llvm-goc+0x64a875)\r\n#24 0x000055b66efae97f gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) (bin/llvm-goc+0x64a97f)\r\n#25 0x000055b66eedced1 main (bin/llvm-goc+0x578ed1)\r\n#26 0x00007f52b111d2e1 __libc_start_main /build/glibc-77giwP/glibc-2.24/csu/../csu/libc-start.c:325:0\r\n#27 0x000055b66efa5f1a _start (bin/llvm-goc+0x641f1a)\r\n```\r\n\r\n\r\n","go\r\npackage main\r\n\r\ntype RealKey struct {\r\n\tType int64\r\n\tKey string\r\n}\r\n\r\ntype AliasKey = RealKey\r\n\r\nfunc makeMap() map[AliasKey]interface{} {\r\n\tm := make(map[AliasKey]interface{})\r\n\tk := AliasKey{1, """"}\r\n\tm[k] = k\r\n\treturn m\r\n}\r\n\r\nfunc main() {\r\n\tif len(makeMap()) != 1 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n"
52542,"cmd/cgo: C.* cannot be used for type constraints<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/hajimehoshi/Library/Caches/go-build""\r\nGOENV=""/Users/hajimehoshi/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/hajimehoshi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/hajimehoshi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/hajimehoshi/test/generics/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/60/khbk2xqn1c5bml1byjn89dwc0000gn/T/go-build3847202091=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nTry compiling:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe compilation succeeds\r\n\r\n### What did you see instead?\r\n\r\nThe compilation failed\r\n\r\n```\r\n$ go build main.go\r\n# command-line-arguments\r\n./main.go:5:13: undefined: C\r\n```\r\n",NeedsFix|FeatureRequest|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/hajimehoshi/Library/Caches/go-build""\r\nGOENV=""/Users/hajimehoshi/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/hajimehoshi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/hajimehoshi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/hajimehoshi/test/generics/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/60/khbk2xqn1c5bml1byjn89dwc0000gn/T/go-build3847202091=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nTry compiling:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""C""\r\n\r\nfunc Foo[T ~C.int](x T) T {\r\n        return x\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe compilation succeeds\r\n\r\n### What did you see instead?\r\n\r\nThe compilation failed\r\n\r\n```\r\n$ go build main.go\r\n# command-line-arguments\r\n./main.go:5:13: undefined: C\r\n```\r\n","go\r\npackage main\r\n\r\nimport ""C""\r\n\r\nfunc Foo[T ~C.int](x T) T {\r\n        return x\r\n}\r\n\r\nfunc main() {\r\n}\r\n"
52508,"cmd/go: go get ./... loops infinitely with specific go.mod, go.sum<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.18.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, built from source on `master` and latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/dylan/Library/Caches/go-build""\r\nGOENV=""/Users/dylan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/dylan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/dylan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/dylan/src/github.com/arbourd/test-go-broke/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xz/1jqk4k092tv32h4b0v53wym00000gn/T/go-build1295850106=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRuning `go get ./...` on a specific `go.sum` and `go.mod` which I have provided here: https://github.com/arbourd/test-go-broke/tree/ac80f1816b6fa7b6ca7509c3e2fcf2f502003d19\r\n\r\n### What did you expect to see?\r\n\r\n`go get ./...` to resolve packages or an error.\r\n\r\n### What did you see instead?\r\n\r\nCommand will hang indefinitely.\r\n\r\n### Some sleuthing\r\n\r\nThe infinite loop seems to have origins here: https://github.com/golang/go/blob/go1.18.1/src/cmd/go/internal/modget/get.go#L350-L353\r\n\r\nI built my own `go` binary with some `fmt.Println`, and it seems that `changed` is always true.\r\n\r\n",NeedsInvestigation|GoCommand|modules,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.18.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, built from source on `master` and latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/dylan/Library/Caches/go-build""\r\nGOENV=""/Users/dylan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/dylan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/dylan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/dylan/src/github.com/arbourd/test-go-broke/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xz/1jqk4k092tv32h4b0v53wym00000gn/T/go-build1295850106=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRuning `go get ./...` on a specific `go.sum` and `go.mod` which I have provided here: https://github.com/arbourd/test-go-broke/tree/ac80f1816b6fa7b6ca7509c3e2fcf2f502003d19\r\n\r\n### What did you expect to see?\r\n\r\n`go get ./...` to resolve packages or an error.\r\n\r\n### What did you see instead?\r\n\r\nCommand will hang indefinitely.\r\n\r\n### Some sleuthing\r\n\r\nThe infinite loop seems to have origins here: https://github.com/golang/go/blob/go1.18.1/src/cmd/go/internal/modget/get.go#L350-L353\r\n\r\nI built my own `go` binary with some `fmt.Println`, and it seems that `changed` is always true.\r\n\r\n```go\r\n// Upgrades variable will always return this first\r\n// [{github.com/suborbital/sat [{github.com/suborbital/sat v0.1.2}] { } <nil>} {github.com/suborbital/subo [{github.com/suborbital/subo v0.4.2}] { } <nil>}]\r\n// The second iteration will return\r\n// []\r\n// and the cycle will repeat infinitely\r\nupgrades := r.findAndUpgradeImports(ctx, queries)\r\nif changed := r.applyUpgrades(ctx, upgrades); changed {\r\n\t// This will always be true\r\n\tcontinue\r\n}\r\n```","go\r\n// Upgrades variable will always return this first\r\n// [{github.com/suborbital/sat [{github.com/suborbital/sat v0.1.2}] { } <nil>} {github.com/suborbital/subo [{github.com/suborbital/subo v0.4.2}] { } <nil>}]\r\n// The second iteration will return\r\n// []\r\n// and the cycle will repeat infinitely\r\nupgrades := r.findAndUpgradeImports(ctx, queries)\r\nif changed := r.applyUpgrades(ctx, upgrades); changed {\r\n\t// This will always be true\r\n\tcontinue\r\n}\r\n"
52459,"net/http: HTTP/2 retry loop broken when net/http manages dials`http2.Transport.RoundTripOpt` retries requests under some circumstances ([transport.go#492](https://go.googlesource.com/net/+/refs/heads/master/http2/transport.go#492)):\r\n\r\n\r\n\r\nWhen using the bundled HTTP/2 support in `net/http`, however, `GetClientConn` does not dial connections when none are available. Instead, it returns `ErrNoCachedConn` and `net/http` handles the dial.\r\n\r\nThis results in an infinite retry loop  when the server immediately hangs up on a retryable request.",NeedsInvestigation,neild,"`http2.Transport.RoundTripOpt` retries requests under some circumstances ([transport.go#492](https://go.googlesource.com/net/+/refs/heads/master/http2/transport.go#492)):\r\n\r\n```go\r\nfor retry := 0; ; retry++ {\r\n  cc, err := t.connPool().GetClientConn(req, addr)\r\n   if err != nil {\r\n    t.vlogf(""http2: Transport failed to get client conn for %s: %v"", addr, err)\r\n    return nil, err\r\n  }\r\n  // ...\r\n```\r\n\r\nWhen using the bundled HTTP/2 support in `net/http`, however, `GetClientConn` does not dial connections when none are available. Instead, it returns `ErrNoCachedConn` and `net/http` handles the dial.\r\n\r\nThis results in an infinite retry loop  when the server immediately hangs up on a retryable request.","go\r\nfor retry := 0; ; retry++ {\r\n  cc, err := t.connPool().GetClientConn(req, addr)\r\n   if err != nil {\r\n    t.vlogf(""http2: Transport failed to get client conn for %s: %v"", addr, err)\r\n    return nil, err\r\n  }\r\n  // ...\r\n"
52080,"go/types, types2: error reported for valid shiftsExtracted `from test/shift1.go` which is currently not passing (excluded) in 1.18:\r\n\r\nreports\r\n```\r\nx.go:4:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\nx.go:5:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\n```\r\nThese should probably be valid. Regression.\r\n\r\ncc @findleyr ",NeedsInvestigation,griesemer,"Extracted `from test/shift1.go` which is currently not passing (excluded) in 1.18:\r\n```Go\r\npackage p\r\n\r\nfunc _(x int, s uint) {\r\n\tx = (1. << s) << (1 << s)\r\n\tx = (1. << s) << (1. << s)\r\n}\r\n```\r\nreports\r\n```\r\nx.go:4:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\nx.go:5:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\n```\r\nThese should probably be valid. Regression.\r\n\r\ncc @findleyr ","Go\r\npackage p\r\n\r\nfunc _(x int, s uint) {\r\n\tx = (1. << s) << (1 << s)\r\n\tx = (1. << s) << (1. << s)\r\n}\r\n"
52072,"cmd/compile: devirtualization changes program behavior<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nMoved from https://github.com/golang/go/issues/38634#issuecomment-1084040645.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 linux/amd64\r\n</pre>\r\n\r\nIt looks this problem started from Go 1.16.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n[edit]: another example:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSame return results.\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n\r\nChanging the `i` variable to global makes this inconsistency gone.",NeedsFix|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nMoved from https://github.com/golang/go/issues/38634#issuecomment-1084040645.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 linux/amd64\r\n</pre>\r\n\r\nIt looks this problem started from Go 1.16.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{}\r\n\r\nfunc (T) M() {}\r\n\r\nvar pt *T\r\n\r\nfunc f() (r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tdefer i.M()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc g()(r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tf := i.M\r\n\tdefer f()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tprintln(f()) // 0\r\n\tprintln(g()) // 1\r\n}\r\n```\r\n\r\n[edit]: another example:\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{\r\n\tx int\r\n}\r\n\r\nfunc (t T) M() {\r\n\tprintln(t.x)\r\n}\r\n\r\nfunc f() {\r\n\tvar t = &T{1}\r\n\tvar i I = t\r\n\tdefer i.M()\r\n\tt.x = 2\r\n\treturn\r\n}\r\n\r\nfunc g() {\r\n\tvar t = &T{1}\r\n\tvar i I = t\r\n\tf := i.M\r\n\tdefer f()\r\n\tt.x = 2\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tf() // 1\r\n\tg() // 2\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSame return results.\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n\r\nChanging the `i` variable to global makes this inconsistency gone.",Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{}\r\n\r\nfunc (T) M() {}\r\n\r\nvar pt *T\r\n\r\nfunc f() (r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tdefer i.M()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc g()(r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tf := i.M\r\n\tdefer f()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tprintln(f()) // 0\r\n\tprintln(g()) // 1\r\n}\r\n
51972,"sync: add new Map methods CompareAndSwap, CompareAndDelete, SwapI propose adding a new method on `sync.Map` similar to `atomic.Value`'s `Swap()` method. I think either the name `LoadAndStore()` to match the existing LoadOrStore or `Swap()` to match `atomic.Value` would make sense. The function signature would look something like this\r\n\r\n\r\nI think the fact that this already exists in `atomic.Value` is a good argument that there is a use case for it. The same thing could be achieved by creating a `sync.Map` of `atomic.Value`s, but that is a lot of type-assertion, and I have to stare at it pretty hard to make sure it's free of race conditions. My specific use case is basically de-bouncing abuse reports. If a worker detects abuse from a client it would\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|compiler/runtime,changkun,"I propose adding a new method on `sync.Map` similar to `atomic.Value`'s `Swap()` method. I think either the name `LoadAndStore()` to match the existing LoadOrStore or `Swap()` to match `atomic.Value` would make sense. The function signature would look something like this\r\n```go\r\nfunc (m *Map) LoadAndStore(key, newValue any) (previous any, loaded bool)\r\n```\r\n\r\nI think the fact that this already exists in `atomic.Value` is a good argument that there is a use case for it. The same thing could be achieved by creating a `sync.Map` of `atomic.Value`s, but that is a lot of type-assertion, and I have to stare at it pretty hard to make sure it's free of race conditions. My specific use case is basically de-bouncing abuse reports. If a worker detects abuse from a client it would\r\n```go\r\nlastReport, hasReportHistory := lastReportTimes.LoadAndStore(clientIP, time.Now())\r\nif hasReportHistory && time.Since(lastReport.(time.Time)) < time.Hour {\r\n    log(""not re-sending abuse report"")\r\n    return\r\n}\r\nsendAbuseReport(clientIP)\r\n```","go\r\nfunc (m *Map) LoadAndStore(key, newValue any) (previous any, loaded bool)\r\n"
51913,"cmd/compile: global variable initialization done in unexpected order<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/joao/Library/Caches/go-build""\r\nGOENV=""/Users/joao/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/joao/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/joao/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.16.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.16.4/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2d/wcw2b3c57jz69cl5tg_s2fx00000gn/T/go-build3928827666=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.16.4 darwin/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.16.4\r\nuname -v: Darwin Kernel Version 21.3.0: Wed Jan  5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_X86_64\r\nProductName:\tmacOS\r\nProductVersion:\t12.2.1\r\nBuildVersion:\t21D62\r\nlldb --version: lldb-1103.0.22.10\r\nApple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nI have a package consisting of the following two files:\r\n\r\n**f1.go**\r\n\r\n\r\n**f2.go**\r\n\r\n\r\n### What did you expect to see?\r\nAccording to the Go language specification, ""package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables"".\r\n\r\nAs such, I would expect two possible orders in which the global variables can be initialized:\r\n1. A < B < C < D - happens when you compile the project by passing f1.go first to the compiler, followed by f2.go . In this case, the output is ""1 4 3""\r\n2. A < D < B < C - happens when f2.go is passed first to the compiler. In this case, the expected output would be ""1 2 1"".\r\n\r\n### What did you see instead?\r\nFor the second case (when f2.go is passed first), the actual output is ""1 2 3"". If instead I rewrite file f1.go to the following, I get the expected output for case 2.\r\n\r\n**Rewritten f2.go**\r\n\r\n\r\n**Output**\r\n```\r\nInit A\r\nInit B\r\nInit C\r\n1 2 1\r\n```\r\n\r\n### Additional Information\r\nThis issue was first discussed in the golang-nuts Google Group ([link](https://groups.google.com/g/golang-nuts/c/56XOwY6Wz9I)).",NeedsFix|early-in-cycle|compiler/runtime,mdempsky,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/joao/Library/Caches/go-build""\r\nGOENV=""/Users/joao/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/joao/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/joao/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.16.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.16.4/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2d/wcw2b3c57jz69cl5tg_s2fx00000gn/T/go-build3928827666=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.16.4 darwin/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.16.4\r\nuname -v: Darwin Kernel Version 21.3.0: Wed Jan  5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_X86_64\r\nProductName:\tmacOS\r\nProductVersion:\t12.2.1\r\nBuildVersion:\t21D62\r\nlldb --version: lldb-1103.0.22.10\r\nApple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nI have a package consisting of the following two files:\r\n\r\n**f1.go**\r\n```go\r\npackage main    \r\n   \r\nvar A int = 3    \r\nvar B int = A + 1    \r\nvar C int = A\r\n```\r\n\r\n**f2.go**\r\n```go\r\npackage main    \r\n   \r\nimport ""fmt""    \r\n                     \r\nvar D = f()      \r\n   \r\nfunc f() int {    \r\n  A = 1    \r\n  return 1    \r\n}    \r\n   \r\nfunc main() {    \r\n  fmt.Println(A, B, C)    \r\n}  \r\n```\r\n\r\n### What did you expect to see?\r\nAccording to the Go language specification, ""package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables"".\r\n\r\nAs such, I would expect two possible orders in which the global variables can be initialized:\r\n1. A < B < C < D - happens when you compile the project by passing f1.go first to the compiler, followed by f2.go . In this case, the output is ""1 4 3""\r\n2. A < D < B < C - happens when f2.go is passed first to the compiler. In this case, the expected output would be ""1 2 1"".\r\n\r\n### What did you see instead?\r\nFor the second case (when f2.go is passed first), the actual output is ""1 2 3"". If instead I rewrite file f1.go to the following, I get the expected output for case 2.\r\n\r\n**Rewritten f2.go**\r\n```go\r\npackage main    \r\n   \r\nimport ""fmt""    \r\n   \r\nvar A int = initA()    \r\nvar B int = initB()    \r\nvar C int = initC()    \r\n     \r\nfunc initA() int {    \r\n  fmt.Println(""Init A"")    \r\n  return 3    \r\n}    \r\n     \r\nfunc initB() int {    \r\n  fmt.Println(""Init B"")    \r\n  return A + 1    \r\n}    \r\n \r\nfunc initC() int {    \r\n  fmt.Println(""Init C"")    \r\n  return A    \r\n} \r\n```\r\n\r\n**Output**\r\n```\r\nInit A\r\nInit B\r\nInit C\r\n1 2 1\r\n```\r\n\r\n### Additional Information\r\nThis issue was first discussed in the golang-nuts Google Group ([link](https://groups.google.com/g/golang-nuts/c/56XOwY6Wz9I)).",go\r\npackage main    \r\n   \r\nvar A int = 3    \r\nvar B int = A + 1    \r\nvar C int = A\r\n
51803,"go/types: need best effort generic func instantiationOn Go 1.18, I don't seem to get an Instances entry for ""foo"" in:\r\n\r\n\r\n\r\nIt seems to be unhappy because the parameter is absent, however the type parameter is specified which seems like it should be enough to fill in Instances. Without the Instances entry it is difficult for gopls to offer regular parameter completions since gopls can't resolve the instantiated type signature to get the parameter type (unless there is another way?).\r\n\r\n/cc @findleyr ",NeedsInvestigation|FrozenDueToAge,findleyr,"On Go 1.18, I don't seem to get an Instances entry for ""foo"" in:\r\n\r\n```go\r\nfunc foo[T int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tfoo[int]() // <-- no Instances entry for this foo\r\n}\r\n```\r\n\r\nIt seems to be unhappy because the parameter is absent, however the type parameter is specified which seems like it should be enough to fill in Instances. Without the Instances entry it is difficult for gopls to offer regular parameter completions since gopls can't resolve the instantiated type signature to get the parameter type (unless there is another way?).\r\n\r\n/cc @findleyr ",go\r\nfunc foo[T int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tfoo[int]() // <-- no Instances entry for this foo\r\n}\r\n
51783,"x/tools/gopls: completion gives unneeded generic type instantiation snippet \r\n\r\nCompleting to ""foo"" at <> inserts ""int(foo[T float64|int](a T))"" (ignore the extra type conversion), but most likely the type argument can be inferred so gopls should offer just ""foo(a int)"" instead.\r\n",gopls|Tools|gopls/completion|gopls/generics,adonovan,"```go\r\nfunc foo[T float64 | int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tvar _ int = fo<>\r\n}\r\n```\r\n\r\nCompleting to ""foo"" at <> inserts ""int(foo[T float64|int](a T))"" (ignore the extra type conversion), but most likely the type argument can be inferred so gopls should offer just ""foo(a int)"" instead.\r\n",go\r\nfunc foo[T float64 | int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tvar _ int = fo<>\r\n}\r\n
51777,"net/netip: add IPv6LoopbackWe already have `net.IPv6loopback` today, but lack an equivalent in `net/netip`. I'd like to propose adding `netip.IPv6Loopback` specifically; IPv6 defines exactly one loopback address: `::1`. \r\n\r\nIPv4 assigns the entire `127.0.0.0/8` and thus should be out of scope for this proposal.\r\n\r\nConcretely:\r\n\r\n\r\n\r\nSee also #51766 for a similar addition and rationale. Thanks!\r\n\r\n/cc @bradfitz @danderson @josharian",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,mdlayher,"We already have `net.IPv6loopback` today, but lack an equivalent in `net/netip`. I'd like to propose adding `netip.IPv6Loopback` specifically; IPv6 defines exactly one loopback address: `::1`. \r\n\r\nIPv4 assigns the entire `127.0.0.0/8` and thus should be out of scope for this proposal.\r\n\r\nConcretely:\r\n\r\n```go\r\n// IPv6Loopback returns the IPv6 loopback address ::1.\r\nfunc IPv6Loopback() Addr { return AddrFrom16([16]byte{15: 0x01}) }\r\n```\r\n\r\nSee also #51766 for a similar addition and rationale. Thanks!\r\n\r\n/cc @bradfitz @danderson @josharian",go\r\n// IPv6Loopback returns the IPv6 loopback address ::1.\r\nfunc IPv6Loopback() Addr { return AddrFrom16([16]byte{15: 0x01}) }\r\n
51766,"net/netip: add IPv6LinkLocalAllRouters<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nI'm working on porting some of my networking packages to Go 1.18's `net/netip`, but it seems that I had forgotten about my uses of `net.IPv6linklocalallrouters` when I was making regular additions to inet.af/netaddr.\r\n\r\nI'd like to suggest adding exactly the following to `net/netip`, akin to what already exists as `netip.IPv6LinkLocalAllNodes`:\r\n\r\n\r\n\r\nAlong with link-local all nodes, this is one of the most fundamental IPv6 multicast group addresses. Package `net` exposes it today as a variable: https://pkg.go.dev/net#pkg-variables\r\n\r\nThanks!\r\n\r\n/cc @bradfitz @danderson @josharian",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,mdlayher,"<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nI'm working on porting some of my networking packages to Go 1.18's `net/netip`, but it seems that I had forgotten about my uses of `net.IPv6linklocalallrouters` when I was making regular additions to inet.af/netaddr.\r\n\r\nI'd like to suggest adding exactly the following to `net/netip`, akin to what already exists as `netip.IPv6LinkLocalAllNodes`:\r\n\r\n```go\r\n// IPv6LinkLocalAllRouters returns the IPv6 link-local all routers multicast\r\n// address ff02::2.\r\nfunc IPv6LinkLocalAllRouters() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x02}) }\r\n```\r\n\r\nAlong with link-local all nodes, this is one of the most fundamental IPv6 multicast group addresses. Package `net` exposes it today as a variable: https://pkg.go.dev/net#pkg-variables\r\n\r\nThanks!\r\n\r\n/cc @bradfitz @danderson @josharian","go\r\n// IPv6LinkLocalAllRouters returns the IPv6 link-local all routers multicast\r\n// address ff02::2.\r\nfunc IPv6LinkLocalAllRouters() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x02}) }\r\n"
51668,"fmt: add FormatString(State) stringI'm currently working with a custom fmt.Formatter implementation. Similar to the request in https://github.com/golang/go/issues/51195, I would like to implement some methods and then ""fall back"" to the default `fmt` implementation for unimplemented verbs.\r\n\r\nIt's difficult to do this because State does not allow you to reconstruct the original format string, unless you enumerate all of the possible characters in a format string and call `Flag(char)` on each one. This is lengthy and error prone. \r\n\r\nI would like to formally propose what @bcmills suggested in https://github.com/golang/go/issues/25150, which is to add a String() api to `fmt.State`. \r\n\r\n\r\n\r\nI doubt that there are many implementations of the API, which would limit the amount of breakage from adding a new method. \r\n\r\nIn the standard library, there is currently only one implementation of `fmt.State` - in the `pp` struct. \r\n\r\nIf someone can give me pointers on how to do a search across all of Github, I would be happy to check whether there are in-the-wild implementations of fmt.State. I'd also appreciate if someone could do the same inside of Google.\r\n\r\nThanks to Bryan Mills, Github user seebs and Eric Lagergren for initial suggestions and discussion.",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,robpike,"I'm currently working with a custom fmt.Formatter implementation. Similar to the request in https://github.com/golang/go/issues/51195, I would like to implement some methods and then ""fall back"" to the default `fmt` implementation for unimplemented verbs.\r\n\r\nIt's difficult to do this because State does not allow you to reconstruct the original format string, unless you enumerate all of the possible characters in a format string and call `Flag(char)` on each one. This is lengthy and error prone. \r\n\r\nI would like to formally propose what @bcmills suggested in https://github.com/golang/go/issues/25150, which is to add a String() api to `fmt.State`. \r\n\r\n```go\r\n// State represents the printer state passed to custom formatters.\r\n// It provides access to the io.Writer interface plus information about\r\n// the flags and options for the operand's format specifier.\r\ntype State interface {\r\n\t// Write is the function to call to emit formatted output to be printed.\r\n\tWrite(b []byte) (n int, err error)\r\n\t// Width returns the value of the width option and whether it has been set.\r\n\tWidth() (wid int, ok bool)\r\n\t// Precision returns the value of the precision option and whether it has been set.\r\n\tPrecision() (prec int, ok bool)\r\n\r\n\t// Flag reports whether the flag c, a character, has been set.\r\n\tFlag(c int) bool\r\n\r\n         // String returns the original format string that was used to create this State (e.g. ""%#v"")\r\n         String() string\r\n}\r\n```\r\n\r\nI doubt that there are many implementations of the API, which would limit the amount of breakage from adding a new method. \r\n\r\nIn the standard library, there is currently only one implementation of `fmt.State` - in the `pp` struct. \r\n\r\nIf someone can give me pointers on how to do a search across all of Github, I would be happy to check whether there are in-the-wild implementations of fmt.State. I'd also appreciate if someone could do the same inside of Google.\r\n\r\nThanks to Bryan Mills, Github user seebs and Eric Lagergren for initial suggestions and discussion.","go\r\n// State represents the printer state passed to custom formatters.\r\n// It provides access to the io.Writer interface plus information about\r\n// the flags and options for the operand's format specifier.\r\ntype State interface {\r\n\t// Write is the function to call to emit formatted output to be printed.\r\n\tWrite(b []byte) (n int, err error)\r\n\t// Width returns the value of the width option and whether it has been set.\r\n\tWidth() (wid int, ok bool)\r\n\t// Precision returns the value of the precision option and whether it has been set.\r\n\tPrecision() (prec int, ok bool)\r\n\r\n\t// Flag reports whether the flag c, a character, has been set.\r\n\tFlag(c int) bool\r\n\r\n         // String returns the original format string that was used to create this State (e.g. ""%#v"")\r\n         String() string\r\n}\r\n"
51653,"x/vuln/cmd/govulncheck: report stdlib CVEsThe Go Vulnerability Database has a bunch of CVEs associated to the standard library which are not reported by `govulncheck`.\r\nAdditionally, I would like to have my own database containing std packages and symbols sanctioned from secure applications, such as [crypto/rc4](https://pkg.go.dev/crypto/rc4).\r\n\r\nMy proposal is to add a new optional command line flag to `govulncheck` which specifies the Go version that should be vetted, i.e. `-go=1.17.3`. When this flag is set, `govulncheck` will load all the standard library vulnerabilities and filter them out by the provided Go version. Any std vulnerability finding would be treated and reported as if it were a normal module vulnerability.\r\n\r\nExample:\r\n\r\nGiven the following main.go:\r\n\r\n\r\n\r\nCurrently `govulncheck` does not report any vulnerability.\r\nWith this proposal, it would report one when selecting an old Go version:\r\n\r\n\r\n\r\nI leave out of this proposal to decide if the std check should be executed by default or not. AFAIU `govulncheck` would require the complete Go semantic version, which is not provided by `go.mod`, and this additional check would make `govulncheck` run slower.\r\n\r\ncc @jba ",NeedsInvestigation|FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"The Go Vulnerability Database has a bunch of CVEs associated to the standard library which are not reported by `govulncheck`.\r\nAdditionally, I would like to have my own database containing std packages and symbols sanctioned from secure applications, such as [crypto/rc4](https://pkg.go.dev/crypto/rc4).\r\n\r\nMy proposal is to add a new optional command line flag to `govulncheck` which specifies the Go version that should be vetted, i.e. `-go=1.17.3`. When this flag is set, `govulncheck` will load all the standard library vulnerabilities and filter them out by the provided Go version. Any std vulnerability finding would be treated and reported as if it were a normal module vulnerability.\r\n\r\nExample:\r\n\r\nGiven the following main.go:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""crypto/elliptic""\r\n\r\nfunc main() {\r\n\tprintln(elliptic.P224().IsOnCurve(nil, nil))\r\n}\r\n```\r\n\r\nCurrently `govulncheck` does not report any vulnerability.\r\nWith this proposal, it would report one when selecting an old Go version:\r\n\r\n```bash\r\ngovulncheck -go=1.13.0 .\r\nFindings for vulnerability: GO-2021-0235 (CVE-2021-3114):\r\n\r\nTrace:\r\ncrypto/elliptic.p224Contract (C:\\Program Files\\Go\\src\\crypto\\elliptic\\p224.go:67:14)\r\ncrypto/elliptic.Curve.IsOnCurve(...) [approx. resolved to (crypto/elliptic.p224Curve).IsOnCurve] (C:\\Users\\*\\code\\gotest\\main.go:6:35)\r\ngotest.main(...) (C:\\Users\\*\\code\\gotest\\main.go:5:6)\r\n```\r\n\r\nI leave out of this proposal to decide if the std check should be executed by default or not. AFAIU `govulncheck` would require the complete Go semantic version, which is not provided by `go.mod`, and this additional check would make `govulncheck` run slower.\r\n\r\ncc @jba ","go\r\npackage main\r\n\r\nimport ""crypto/elliptic""\r\n\r\nfunc main() {\r\n\tprintln(elliptic.P224().IsOnCurve(nil, nil))\r\n}\r\n"
51593,"go/types, types2: type inference should unify interface types### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.19-5a040c5a36 Thu Mar 10 09:12:04 2022 +0000\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nProbably also with 1.18rc1, haven't had a chance to test it yet.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGotip Playground.\r\n\r\n### What did you do?\r\nExperimenting with type inference and anonymous interface types as constraints and/or inference inputs.\r\n\r\n\r\n\r\nhttps://gotipplay.golang.org/p/lJOnm9LexpD\r\n\r\n### What did you expect to see?\r\nEither a compiler error, or a successful compilation.\r\n\r\n### What did you see instead?\r\nA compiler crash due to an assertion failure in `(*cycleFinder).typ` on this line:\r\n\r\n\r\n\r\nThe assumption made in the comment is obviously not true with respect to interface method types, for which `(*Signature).Recv()` is set to the declaring interface's type.",NeedsFix|TypeInference,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.19-5a040c5a36 Thu Mar 10 09:12:04 2022 +0000\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nProbably also with 1.18rc1, haven't had a chance to test it yet.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGotip Playground.\r\n\r\n### What did you do?\r\nExperimenting with type inference and anonymous interface types as constraints and/or inference inputs.\r\n\r\n```go\r\npackage main\r\n\r\ntype BasicAnon = interface {\r\n\tM() int\r\n}\r\n\r\nfunc InferAnon[I interface{ M() R }, R any](arg I) {\r\n}\r\n\r\nfunc main() {\r\n\tvar a BasicAnon\r\n\tInferAnon(a) // crash due to this line\r\n\t_ = a\r\n}\r\n```\r\n\r\nhttps://gotipplay.golang.org/p/lJOnm9LexpD\r\n\r\n### What did you expect to see?\r\nEither a compiler error, or a successful compilation.\r\n\r\n### What did you see instead?\r\nA compiler crash due to an assertion failure in `(*cycleFinder).typ` on this line:\r\n\r\n```go\r\ncase *Signature:\r\n\t// There are no ""method types"" so we should never see a recv.\r\n\tassert(t.recv == nil)\r\n\t...\r\n```\r\n\r\nThe assumption made in the comment is obviously not true with respect to interface method types, for which `(*Signature).Recv()` is set to the declaring interface's type.","go\r\npackage main\r\n\r\ntype BasicAnon = interface {\r\n\tM() int\r\n}\r\n\r\nfunc InferAnon[I interface{ M() R }, R any](arg I) {\r\n}\r\n\r\nfunc main() {\r\n\tvar a BasicAnon\r\n\tInferAnon(a) // crash due to this line\r\n\t_ = a\r\n}\r\n"
51525,"go/types, types2: report better errors when type sets are emptyError messages are confusing when type sets are empty. For instance, for:\r\n\r\nthe error doesn't say why the comparison is not possible. The root cause is that `T`'s type set is empty.\r\n\r\nThe same applies to other operations, such as `+` in this case.\r\n\r\ncc: @findleyr ",NeedsFix|FrozenDueToAge,griesemer,"Error messages are confusing when type sets are empty. For instance, for:\r\n```Go\r\nfunc _[T interface{comparable; ~int; ~string}](x T) {\r\n        _ = x == x // ERROR cannot compare x == x\r\n}\r\n```\r\nthe error doesn't say why the comparison is not possible. The root cause is that `T`'s type set is empty.\r\n\r\nThe same applies to other operations, such as `+` in this case.\r\n\r\ncc: @findleyr ",Go\r\nfunc _[T interface{comparable; ~int; ~string}](x T) {\r\n        _ = x == x // ERROR cannot compare x == x\r\n}\r\n
51503,"types2, go/types: the scope of a type parameter identifier in a method of a generic type is too large<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18rc1 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCompiles okay.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\nHonestly, the behavior conforms to the tip spec:\r\n\r\n> The scope of an identifier denoting a type parameter of a generic function or declared by a method receiver is the function body and all parameter lists of the function. \r\n\r\nHowever, I think , for a method of a generic type, the scope should begin after the name of the generic type in the receiver, instead of beginning the start of receiver part.\r\n\r\n",NeedsFix,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18rc1 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\ntype T[T any] struct {} // okay\r\n\r\nfunc (T[T]) Bar() {} // error: T is not a generic type\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCompiles okay.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\nHonestly, the behavior conforms to the tip spec:\r\n\r\n> The scope of an identifier denoting a type parameter of a generic function or declared by a method receiver is the function body and all parameter lists of the function. \r\n\r\nHowever, I think , for a method of a generic type, the scope should begin after the name of the generic type in the receiver, instead of beginning the start of receiver part.\r\n\r\n",Go\r\ntype T[T any] struct {} // okay\r\n\r\nfunc (T[T]) Bar() {} // error: T is not a generic type\r\n
51486,"fmt: `%#v` does not print \u201ca Go-syntax representation\u201d for NaN values### What version of Go are you using (`go version`)?\r\n\r\n```\r\ndevel go1.19-c9b60632eb Fri Mar 4 14:10:38 2022 +0000\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What did you do?\r\n\r\nFormat a floating-point NaN value with `%#v` (https://go.dev/play/p/zlxs4NzQ0bl?v=gotip):\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nPer https://pkg.go.dev/fmt#hdr-Printing, \u201ca Go-syntax representation of the value\u201d \u2014 that is, valid Go syntax for the value.\r\n\r\nPerhaps a line like:\r\n```\r\n\tx := float32(math.NaN())\r\n```\r\nor\r\n```\r\n\tx := float32(math.Float32frombits(0x7fc00000))\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe string `NaN`:\r\n```\r\nx := float32(NaN)\r\n```\r\nwhich is not \u201ca Go-syntax representation\u201d. Feeding it back into the program gives (https://go.dev/play/p/908uCl2KbVN?v=gotip):\r\n```\r\n./prog.go:13:15: undefined: NaN\r\n\r\nGo build failed.\r\n```\r\n\r\nThis problem is especially acute if the NaN value is not the same bits as `math.NaN()` (https://go.dev/play/p/Xl13miTI7pe?v=gotip), since there is no indication that there is anything unusual about it.",NeedsFix|FixPending,robpike,"### What version of Go are you using (`go version`)?\r\n\r\n```\r\ndevel go1.19-c9b60632eb Fri Mar 4 14:10:38 2022 +0000\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What did you do?\r\n\r\nFormat a floating-point NaN value with `%#v` (https://go.dev/play/p/zlxs4NzQ0bl?v=gotip):\r\n\r\n```go\r\n\tx := float32(math.NaN())\r\n\tfmt.Printf(""x := %T(%#v)"", x, x)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPer https://pkg.go.dev/fmt#hdr-Printing, \u201ca Go-syntax representation of the value\u201d \u2014 that is, valid Go syntax for the value.\r\n\r\nPerhaps a line like:\r\n```\r\n\tx := float32(math.NaN())\r\n```\r\nor\r\n```\r\n\tx := float32(math.Float32frombits(0x7fc00000))\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe string `NaN`:\r\n```\r\nx := float32(NaN)\r\n```\r\nwhich is not \u201ca Go-syntax representation\u201d. Feeding it back into the program gives (https://go.dev/play/p/908uCl2KbVN?v=gotip):\r\n```\r\n./prog.go:13:15: undefined: NaN\r\n\r\nGo build failed.\r\n```\r\n\r\nThis problem is especially acute if the NaN value is not the same bits as `math.NaN()` (https://go.dev/play/p/Xl13miTI7pe?v=gotip), since there is no indication that there is anything unusual about it.","go\r\n\tx := float32(math.NaN())\r\n\tfmt.Printf(""x := %T(%#v)"", x, x)\r\n"
51455,"x/build/cmd/coordinator: switch to ""./..."" import path pattern for testing packages in a moduleBack when GOPATH mode was default, assuming one GOPATH workspace, running ""go test ./..."" in $GOPATH/src/root had the same effect as running ""go test {root}/..."". The latter was more explicit and did the stated thing even if it was accidentally run from the wrong directory. Maybe that's why it was chosen, or maybe it was chosen arbitrarily, since both worked and did the same thing.\r\n\r\nThat invocation persisted to today, when module mode is used, and for each module to be tested the coordinator runs ""go test {module-root}/..."" invocations at the module root to test packages contained inside that module:\r\n\r\n\r\n([source](https://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1065-1076;drc=75546d97733421ec185edcd9a085f1087a483cf8))\r\n\r\nFrom #51283 I've learned there's a difference in that ""{module-root}/..."" may select a package with import path ""{module-root}"" even if that package is in another module, but ""./..."" won't do that.\r\n\r\nSince there's no need for the pattern to match any packages outside of the very module it's meant to cover, we could consider switching. It would not fail if a go.sum entry that `go mod tidy` doesn't currently insert isn't added in some cases (see #51283), remove possibility of unintentional duplicate coverage of packages in nested modules, and least importantly it is shorter visually.\r\n\r\nCC @golang/release, @bcmills, @matloob.",Builders|NeedsFix|FrozenDueToAge,dmitshur,"Back when GOPATH mode was default, assuming one GOPATH workspace, running ""go test ./..."" in $GOPATH/src/root had the same effect as running ""go test {root}/..."". The latter was more explicit and did the stated thing even if it was accidentally run from the wrong directory. Maybe that's why it was chosen, or maybe it was chosen arbitrarily, since both worked and did the same thing.\r\n\r\nThat invocation persisted to today, when module mode is used, and for each module to be tested the coordinator runs ""go test {module-root}/..."" invocations at the module root to test packages contained inside that module:\r\n\r\n```Go\r\n// A goTestRun represents a single invocation of the 'go test' command.\r\ntype goTestRun struct {\r\n\tDir      string   // Directory where 'go test' should be executed.\r\n\tPatterns []string // Import path patterns to provide to 'go test'.\r\n}\r\n// The default behavior is to test the pattern ""golang.org/x/{repo}/...""\r\n// in the repository root.\r\nrepoPath := importPathOfRepo(st.SubName)\r\ntestRuns := []goTestRun{{\r\n\tDir:      ""gopath/src/"" + repoPath,\r\n\tPatterns: []string{repoPath + ""/...""},\r\n}}\r\n```\r\n([source](https://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1065-1076;drc=75546d97733421ec185edcd9a085f1087a483cf8))\r\n\r\nFrom #51283 I've learned there's a difference in that ""{module-root}/..."" may select a package with import path ""{module-root}"" even if that package is in another module, but ""./..."" won't do that.\r\n\r\nSince there's no need for the pattern to match any packages outside of the very module it's meant to cover, we could consider switching. It would not fail if a go.sum entry that `go mod tidy` doesn't currently insert isn't added in some cases (see #51283), remove possibility of unintentional duplicate coverage of packages in nested modules, and least importantly it is shorter visually.\r\n\r\nCC @golang/release, @bcmills, @matloob.","Go\r\n// A goTestRun represents a single invocation of the 'go test' command.\r\ntype goTestRun struct {\r\n\tDir      string   // Directory where 'go test' should be executed.\r\n\tPatterns []string // Import path patterns to provide to 'go test'.\r\n}\r\n// The default behavior is to test the pattern ""golang.org/x/{repo}/...""\r\n// in the repository root.\r\nrepoPath := importPathOfRepo(st.SubName)\r\ntestRuns := []goTestRun{{\r\n\tDir:      ""gopath/src/"" + repoPath,\r\n\tPatterns: []string{repoPath + ""/...""},\r\n}}\r\n"
51430,"cmd/cover: extend coverage testing to include applications# Proposal: extend code coverage testing to include applications\r\n\r\nAuthor(s): Than McIntosh\r\n\r\nLast updated: 2022-03-02\r\n\r\nDetailed design document: [markdown](https://go.googlesource.com/proposal/+/master/design/51430-revamp-code-coverage.md), [CL 388857](https://go-review.googlesource.com/c/proposal/+/388857)\r\n\r\n## Abstract\r\n\r\nThis document contains a proposal for improving/revamping the system used in Go for code coverage testing.\r\n\r\n## Background\r\n\r\n### Current support for coverage testing\r\n\r\nThe Go toolchain currently includes support for collecting and reporting\r\ncoverage data for Golang unit tests; this facility is made available via the ""go\r\ntest -cover"" and ""go tool cover"" commands.\r\n\r\nThe current workflow for collecting coverage data is baked into ""go test""\r\ncommand; the assumption is that the source code of interest is a Go package\r\nor set of packages with associated tests.\r\n\r\nTo request coverage data for a package test run, a user can invoke the test(s)\r\nvia:\r\n\r\n```\r\n  go test -coverprofile=<filename> [package target(s)]\r\n```\r\n\r\nThis command will build the specified packages with coverage instrumentation,\r\nexecute the package tests, and write an output file to ""filename"" with the\r\ncoverage results of the run.\r\n\r\nThe resulting output file can be viewed/examined using commands such as\r\n\r\n```\r\n  go tool cover -func=<covdatafile>\r\n  go tool cover -html=<covdatafile>\r\n```\r\n\r\nUnder the hood, the implementation works by source rewriting: when ""go test"" is\r\nbuilding the specified set of package tests, it runs each package source file\r\nof interest through a source-to-source translation tool that produces an\r\ninstrumented/augmented equivalent, with instrumentation that records which\r\nportions of the code execute as the test runs.\r\n\r\nA function such as\r\n\r\n\r\n\r\nis rewritten to something like\r\n\r\n\r\n\r\nwhere ""GoCover_0_343662613637653164643337"" is a tool-generated structure with\r\nexecution counters and source position information.\r\n\r\nThe ""go test"" command also emits boilerplate code into the generated\r\n""_testmain.go"" to register each instrumented source file and unpack the coverage\r\ndata structures into something that can be easily accessed at runtime.\r\nFinally, the modified ""_testmain.go"" has code to call runtime routines that\r\nemit the coverage output file when the test completes.\r\n\r\n### Strengths and weaknesses of what we currently provide\r\n\r\nThe current implementation is simple and easy to use, and provides a good user\r\nexperience for the use case of collecting coverage data for package unit tests.\r\nSince ""go test"" is performing both the build and the invocation/execution of the\r\ntest, it can provide a nice seamless ""single command"" user experience.\r\n\r\nA key weakness of the current implementation is that it does not scale well-- it\r\nis difficult or impossible to gather coverage data for **applications** as opposed\r\nto collections of packages, and for testing scenarios involving multiple\r\nruns/executions.\r\n\r\nFor example, consider a medium-sized application such as the Go compiler (""gc"").\r\nWhile the various packages in the compiler source tree have unit tests, and one\r\ncan use ""go test"" to obtain coverage data for those tests, the unit tests by\r\nthemselves only exercise a small fraction of the code paths in the compiler that\r\none would get from actually running the compiler binary itself on a large\r\ncollection of Go source files.\r\n\r\nFor such applications, one would like to build a coverage-instrumented copy of\r\nthe entire application (""gc""), then run that instrumented application over many\r\ninputs (say, all the Go source files compiled as part of a ""make.bash"" run for\r\nmultiple GOARCH values), producing a collection of coverage data output files,\r\nand finally merge together the results to produce a report or provide a\r\nvisualization.\r\n\r\nMany folks in the Golang community have run into this problem; there are large\r\nnumbers of blog posts and other pages describing the issue, and recommending\r\nworkarounds (or providing add-on tools that help); doing a web search for\r\n""golang integration code coverage"" will turn up many pages of links.\r\n\r\nAn additional weakness in the current Go toolchain offering relates to the way\r\nin which coverage data is presented to the user from the ""go tool cover"")\r\ncommands. The reports produced are ""flat"" and not hierarchical (e.g. a flat list of\r\nfunctions, or a flat list of source files within the instrumented packages).\r\nThis way of structuring a report works well when the number of instrumented\r\npackages is small, but becomes less attractive if there are hundreds or\r\nthousands of source files being instrumented. For larger applications, it would make\r\nsense to create reports with a more hierarchical structure: first a summary by module,\r\nthen package within module, then source file within package, and so on.\r\n\r\nFinally, there are a number of long-standing problems that arise due to the use\r\nof source-to-source rewriting used by cmd/cover and the go command, including\r\n\r\n  [#23883](https://github.com/golang/go/issues/23883)\r\n  ""cmd/go: -coverpkg=all gives different coverage value when run on a\r\n      package list vs ./...""\r\n\r\n  [#23910](https://github.com/golang/go/issues/23910)\r\n  ""cmd/go: -coverpkg packages imported by all tests, even ones that\r\n      otherwise do not use it""\r\n\r\n  [#27336](https://github.com/golang/go/issues/27336)\r\n  ""cmd/go: test coverpkg panics when defining the same flag in\r\n      multiple packages""\r\n\r\nMost of these problems arise because of the introduction of additional imports\r\nin the `_testmain.go` shim created by the Go command when carrying out a coverage\r\ntest run in combination with the ""-coverpkg"" option.\r\n\r\n## Proposed changes\r\n\r\n### Building for coverage\r\n\r\nWhile the existing ""go test"" based coverage workflow will continue to be\r\nsupported, the proposal is to add coverage as a new build mode for ""go build"".\r\nIn the same way that users can build a race-detector instrumented executable\r\nusing ""go build -race"", it will be possible to build a coverage-instrumented\r\nexecutable using ""go build -cover"".\r\n\r\nTo support this goal, the plan will be to migrate the support for coverage\r\ninstrumentation into the compiler, moving away from the source-to-source\r\ntranslation approach.\r\n\r\n### Running instrumented applications\r\n\r\nApplications are deployed and run in many different ways, ranging from very\r\nsimple (direct invocation of a single executable) to very complex (e.g. gangs of\r\ncooperating processes involving multiple distinct executables). To allow for more\r\ncomplex execution/invocation scenarios, it doesn't make sense\r\nto try to serialize updates to a single coverage output data file during the\r\nrun, since this would require introducing synchronization or some other\r\nmechanism to ensure mutually exclusive access.\r\n\r\nFor non-test applications built for coverage, users will instead select an\r\noutput directory as opposed to a single file; each run of the instrumented\r\nexecutable will emit data files within that directory. Example:\r\n\r\n```\r\n$ go build -o myapp.exe -cover ...\r\n$ mkdir /tmp/mycovdata\r\n$ export GOCOVERDIR=/tmp/mycovdata\r\n$ <run test suite, resulting in multiple invocations of myapp.exe>\r\n$ go tool cover -html=/tmp/mycovdata\r\n$\r\n```\r\n\r\nFor coverage runs in the context of ""go test"", the default will continue to be\r\nemitting a single named output file when the test is run.\r\n\r\nFile names within the output directory will be chosen at runtime so as to\r\nminimize the possibility of collisions, e.g. possibly something to the effect of\r\n\r\n```\r\n  covdata.<metafilehash>.<processid>.<nanotimevalue>.out\r\n```\r\n\r\nWhen invoked for reporting, the coverage tool itself will test its input\r\nargument to see whether it is a file or a directory; in the latter case, it will\r\nread and process all of the files in the specified directory.\r\n\r\n### Programs that call os.Exit(), or never terminate\r\n\r\nWith the current coverage tooling, if a Go unit test invokes `os.Exit()` passing a\r\nnon-zero exit status, the instrumented test binary will terminate immediately\r\nwithout writing an output data file. If a test invokes `os.Exit()` passing a zero exit\r\nstatus, this will result in a panic.\r\n\r\nFor unit tests, this is perfectly acceptable-- people writing tests generally\r\nhave no incentive or need to call `os.Exit`, it simply would not add anything in\r\nterms of test functionality. Real applications routinely finish by calling `os.Exit`,\r\nhowever, including cases where a non-zero exit status is reported.\r\nIntegration test suites nearly always include tests that ensure an application\r\nfails properly (e.g. returns with non-zero exit status) if the application\r\nencounters an invalid input. The Go project's `all.bash` test suite has many of these sorts of tests,\r\nincluding test cases that are expected to cause compiler or linker errors (and\r\nto ensure that the proper error paths in the tool are covered).\r\n\r\nTo support collecting coverage data from such programs, the Go runtime will need\r\nto be extended to detect `os.Exit` calls from instrumented programs and ensure (in\r\nsome form) that coverage data is written out before the program terminates.\r\nThis could be accomplished either by introducing new hooks into the `os.Exit`\r\ncode, or possibly by opening and mmap'ing the coverage output file earlier in\r\nthe run, then letting writes to counter variables go directly to an mmap'd\r\nregion, which would eliminated the need to close the file on exit (credit to\r\nAustin for this idea).\r\n\r\nTo handle server programs (which in many cases run forever and may not call\r\nexit), APIs will be provided for writing out a coverage profile under user\r\ncontrol, e.g. something along the lines of\r\n\r\n\r\n \r\nIn addition to OpenCoverageOutputFile() and Emit() as above, an Emit() function\r\nwill be provided that accepts an io.Writer (to allow coverage profiles to be\r\nwritten to a network connection or pipe, in case writing to a file is not\r\npossible).\r\n\r\n### Coverage and modules\r\n\r\nMost modern Go programs make extensive use of dependent third-party packages;\r\nwith the advent of Go modules, we now have systems in place to explicitly\r\nidentify and track these dependencies.\r\n\r\nWhen application writers add a third-party dependency, in most cases the authors\r\nwill not be interested in having that dependency's code count towards the\r\n""percent of lines covered"" metric for their application (there will definitely\r\nbe exceptions to this rule, but it should hold in most cases).\r\n\r\nIt makes sense to leverage information from the Go module system when collecting\r\ncode coverage data. Within the context of the module system, a given package feeding\r\ninto the build of an application will have one of the three following dispositions (relative to\r\nthe main module):\r\n\r\n* Contained: package is part of the module itself (not a dependency)\r\n* Dependent: package is a direct or indirect dependency of the module (appearing in go.mod)\r\n* Stdlib: package is part of the Go standard library / runtime\r\n\r\nWith this in mind, the proposal when building an application for coverage will\r\nbe to instrument every package that feeds into the build, but record the\r\ndisposition for each package (as above), then allow the user to select the\r\nproper granularity or treatment of dependencies when viewing or reporting.\r\n\r\nAs an example, consider the [Delve](https://github.com/go-delve/delve) debugger\r\n(a Go application). One entry in the Delve V1.8 go.mod file is:\r\n\r\n        github.com/cosiner/argv v0.1.0\r\n\r\nThis package (""argv"") has about 500 lines of Go code and a couple dozen Go\r\nfunctions; Delve uses only a single exported function. For a developer trying to\r\ngenerate a coverage report for Delve, it seems unlikely that they would want to\r\ninclude ""argv"" as part of the coverage statistics (percent lines/functions executed),\r\ngiven the secondary and very modest role that the dependency plays.\r\n\r\nOn the other hand, it's possible to imagine scenarios in which a specific\r\ndependency plays an integral or important role for a given application, meaning\r\nthat a developer might want to include the package in the applications coverage\r\nstatistics.\r\n\r\n### Merging coverage data output files\r\n\r\nAs part of this work the proposal to enhance the ""go tool cover"" command to\r\nprovide a profile merging facility, so that collection of coverage data files\r\n(emitted from multiple runs of an instrumented executable) can be merged into a\r\nsingle summary output file. Example usage:\r\n\r\n```\r\n  $ go tool cover -merge -coveragedir=/tmp/mycovdata -o finalprofile.out\r\n  $\r\n```\r\n\r\nThe merge tool will be capable of writing files in the existing (legacy)\r\ncoverage output file format, if requested by the user.\r\n\r\nIn addition to a ""merge"" facility, it may also be interesting to support other\r\noperations such as intersect and subtract (more on this later).\r\n\r\n### Differential coverage\r\n\r\nWhen fixing a bug in an application, it is common practice to add a new unit\r\ntest in addition to the code change that comprises the actual fix.\r\nWhen using code coverage, users may want to learn how many of the changed lines\r\nin their code are actually covered when the new test runs.\r\n\r\nAssuming we have a set of N coverage data output files (corresponding to those\r\ngenerated when running the existing set of tests for a package) and a new\r\ncoverage data file generated from a new testpoint, it would be useful to provide\r\na tool to ""subtract"" out the coverage information from the first set from the\r\nsecond file. This would leave just the set of new lines / regions that the new test causes to\r\nbe covered above and beyond what is already there.\r\n\r\nThis feature (profile subtraction) would make it much easier to write tooling\r\nthat would provide feedback to developers on whether newly written unit tests\r\nare covering new code in the way that the developer intended.\r\n\r\n## Design details\r\n\r\nPlease see the design document for details on proposed changes to the compiler, etc.\r\n\r\n## Implementation timetable\r\n\r\nPlan is for thanm@ to implement this in go 1.19 time frame.\r\n\r\n## Prerequisite Changes\r\n\r\nN/A\r\n\r\n## Preliminary Results\r\n\r\nNo data available yet.\r\n\r\n",Proposal|Proposal-Accepted|compiler/runtime,thanm,"# Proposal: extend code coverage testing to include applications\r\n\r\nAuthor(s): Than McIntosh\r\n\r\nLast updated: 2022-03-02\r\n\r\nDetailed design document: [markdown](https://go.googlesource.com/proposal/+/master/design/51430-revamp-code-coverage.md), [CL 388857](https://go-review.googlesource.com/c/proposal/+/388857)\r\n\r\n## Abstract\r\n\r\nThis document contains a proposal for improving/revamping the system used in Go for code coverage testing.\r\n\r\n## Background\r\n\r\n### Current support for coverage testing\r\n\r\nThe Go toolchain currently includes support for collecting and reporting\r\ncoverage data for Golang unit tests; this facility is made available via the ""go\r\ntest -cover"" and ""go tool cover"" commands.\r\n\r\nThe current workflow for collecting coverage data is baked into ""go test""\r\ncommand; the assumption is that the source code of interest is a Go package\r\nor set of packages with associated tests.\r\n\r\nTo request coverage data for a package test run, a user can invoke the test(s)\r\nvia:\r\n\r\n```\r\n  go test -coverprofile=<filename> [package target(s)]\r\n```\r\n\r\nThis command will build the specified packages with coverage instrumentation,\r\nexecute the package tests, and write an output file to ""filename"" with the\r\ncoverage results of the run.\r\n\r\nThe resulting output file can be viewed/examined using commands such as\r\n\r\n```\r\n  go tool cover -func=<covdatafile>\r\n  go tool cover -html=<covdatafile>\r\n```\r\n\r\nUnder the hood, the implementation works by source rewriting: when ""go test"" is\r\nbuilding the specified set of package tests, it runs each package source file\r\nof interest through a source-to-source translation tool that produces an\r\ninstrumented/augmented equivalent, with instrumentation that records which\r\nportions of the code execute as the test runs.\r\n\r\nA function such as\r\n\r\n```Go\r\n  func ABC(x int) {\r\n    if x < 0 {\r\n      bar()\r\n    }\r\n  }\r\n```\r\n\r\nis rewritten to something like\r\n\r\n```Go\r\n  func ABC(x int) {GoCover_0_343662613637653164643337.Count[9] = 1;\r\n    if x < 0 {GoCover_0_343662613637653164643337.Count[10] = 1;\r\n      bar()\r\n    }\r\n  }\r\n```\r\n\r\nwhere ""GoCover_0_343662613637653164643337"" is a tool-generated structure with\r\nexecution counters and source position information.\r\n\r\nThe ""go test"" command also emits boilerplate code into the generated\r\n""_testmain.go"" to register each instrumented source file and unpack the coverage\r\ndata structures into something that can be easily accessed at runtime.\r\nFinally, the modified ""_testmain.go"" has code to call runtime routines that\r\nemit the coverage output file when the test completes.\r\n\r\n### Strengths and weaknesses of what we currently provide\r\n\r\nThe current implementation is simple and easy to use, and provides a good user\r\nexperience for the use case of collecting coverage data for package unit tests.\r\nSince ""go test"" is performing both the build and the invocation/execution of the\r\ntest, it can provide a nice seamless ""single command"" user experience.\r\n\r\nA key weakness of the current implementation is that it does not scale well-- it\r\nis difficult or impossible to gather coverage data for **applications** as opposed\r\nto collections of packages, and for testing scenarios involving multiple\r\nruns/executions.\r\n\r\nFor example, consider a medium-sized application such as the Go compiler (""gc"").\r\nWhile the various packages in the compiler source tree have unit tests, and one\r\ncan use ""go test"" to obtain coverage data for those tests, the unit tests by\r\nthemselves only exercise a small fraction of the code paths in the compiler that\r\none would get from actually running the compiler binary itself on a large\r\ncollection of Go source files.\r\n\r\nFor such applications, one would like to build a coverage-instrumented copy of\r\nthe entire application (""gc""), then run that instrumented application over many\r\ninputs (say, all the Go source files compiled as part of a ""make.bash"" run for\r\nmultiple GOARCH values), producing a collection of coverage data output files,\r\nand finally merge together the results to produce a report or provide a\r\nvisualization.\r\n\r\nMany folks in the Golang community have run into this problem; there are large\r\nnumbers of blog posts and other pages describing the issue, and recommending\r\nworkarounds (or providing add-on tools that help); doing a web search for\r\n""golang integration code coverage"" will turn up many pages of links.\r\n\r\nAn additional weakness in the current Go toolchain offering relates to the way\r\nin which coverage data is presented to the user from the ""go tool cover"")\r\ncommands. The reports produced are ""flat"" and not hierarchical (e.g. a flat list of\r\nfunctions, or a flat list of source files within the instrumented packages).\r\nThis way of structuring a report works well when the number of instrumented\r\npackages is small, but becomes less attractive if there are hundreds or\r\nthousands of source files being instrumented. For larger applications, it would make\r\nsense to create reports with a more hierarchical structure: first a summary by module,\r\nthen package within module, then source file within package, and so on.\r\n\r\nFinally, there are a number of long-standing problems that arise due to the use\r\nof source-to-source rewriting used by cmd/cover and the go command, including\r\n\r\n  [#23883](https://github.com/golang/go/issues/23883)\r\n  ""cmd/go: -coverpkg=all gives different coverage value when run on a\r\n      package list vs ./...""\r\n\r\n  [#23910](https://github.com/golang/go/issues/23910)\r\n  ""cmd/go: -coverpkg packages imported by all tests, even ones that\r\n      otherwise do not use it""\r\n\r\n  [#27336](https://github.com/golang/go/issues/27336)\r\n  ""cmd/go: test coverpkg panics when defining the same flag in\r\n      multiple packages""\r\n\r\nMost of these problems arise because of the introduction of additional imports\r\nin the `_testmain.go` shim created by the Go command when carrying out a coverage\r\ntest run in combination with the ""-coverpkg"" option.\r\n\r\n## Proposed changes\r\n\r\n### Building for coverage\r\n\r\nWhile the existing ""go test"" based coverage workflow will continue to be\r\nsupported, the proposal is to add coverage as a new build mode for ""go build"".\r\nIn the same way that users can build a race-detector instrumented executable\r\nusing ""go build -race"", it will be possible to build a coverage-instrumented\r\nexecutable using ""go build -cover"".\r\n\r\nTo support this goal, the plan will be to migrate the support for coverage\r\ninstrumentation into the compiler, moving away from the source-to-source\r\ntranslation approach.\r\n\r\n### Running instrumented applications\r\n\r\nApplications are deployed and run in many different ways, ranging from very\r\nsimple (direct invocation of a single executable) to very complex (e.g. gangs of\r\ncooperating processes involving multiple distinct executables). To allow for more\r\ncomplex execution/invocation scenarios, it doesn't make sense\r\nto try to serialize updates to a single coverage output data file during the\r\nrun, since this would require introducing synchronization or some other\r\nmechanism to ensure mutually exclusive access.\r\n\r\nFor non-test applications built for coverage, users will instead select an\r\noutput directory as opposed to a single file; each run of the instrumented\r\nexecutable will emit data files within that directory. Example:\r\n\r\n```\r\n$ go build -o myapp.exe -cover ...\r\n$ mkdir /tmp/mycovdata\r\n$ export GOCOVERDIR=/tmp/mycovdata\r\n$ <run test suite, resulting in multiple invocations of myapp.exe>\r\n$ go tool cover -html=/tmp/mycovdata\r\n$\r\n```\r\n\r\nFor coverage runs in the context of ""go test"", the default will continue to be\r\nemitting a single named output file when the test is run.\r\n\r\nFile names within the output directory will be chosen at runtime so as to\r\nminimize the possibility of collisions, e.g. possibly something to the effect of\r\n\r\n```\r\n  covdata.<metafilehash>.<processid>.<nanotimevalue>.out\r\n```\r\n\r\nWhen invoked for reporting, the coverage tool itself will test its input\r\nargument to see whether it is a file or a directory; in the latter case, it will\r\nread and process all of the files in the specified directory.\r\n\r\n### Programs that call os.Exit(), or never terminate\r\n\r\nWith the current coverage tooling, if a Go unit test invokes `os.Exit()` passing a\r\nnon-zero exit status, the instrumented test binary will terminate immediately\r\nwithout writing an output data file. If a test invokes `os.Exit()` passing a zero exit\r\nstatus, this will result in a panic.\r\n\r\nFor unit tests, this is perfectly acceptable-- people writing tests generally\r\nhave no incentive or need to call `os.Exit`, it simply would not add anything in\r\nterms of test functionality. Real applications routinely finish by calling `os.Exit`,\r\nhowever, including cases where a non-zero exit status is reported.\r\nIntegration test suites nearly always include tests that ensure an application\r\nfails properly (e.g. returns with non-zero exit status) if the application\r\nencounters an invalid input. The Go project's `all.bash` test suite has many of these sorts of tests,\r\nincluding test cases that are expected to cause compiler or linker errors (and\r\nto ensure that the proper error paths in the tool are covered).\r\n\r\nTo support collecting coverage data from such programs, the Go runtime will need\r\nto be extended to detect `os.Exit` calls from instrumented programs and ensure (in\r\nsome form) that coverage data is written out before the program terminates.\r\nThis could be accomplished either by introducing new hooks into the `os.Exit`\r\ncode, or possibly by opening and mmap'ing the coverage output file earlier in\r\nthe run, then letting writes to counter variables go directly to an mmap'd\r\nregion, which would eliminated the need to close the file on exit (credit to\r\nAustin for this idea).\r\n\r\nTo handle server programs (which in many cases run forever and may not call\r\nexit), APIs will be provided for writing out a coverage profile under user\r\ncontrol, e.g. something along the lines of\r\n\r\n```Go\r\n  import ""<someOfficialPath>/cover""\r\n\r\n  var *coverageoutdir flag.String(...)\r\n\r\n  func server() {\r\n    ...\r\n    if *coverageoutdir != """" {\r\n        f, err := cover.OpenCoverageOutputFile(...)\r\n        if err != nil {\r\n            log.Fatal(""..."")\r\n\t   }\r\n    }\r\n    for {\r\n      ...\r\n      if <received signal to emit coverage data> {\r\n        err := f.Emit()\r\n        if err != nil {\r\n            log.Fatalf(""error %v emitting ..."", err)\r\n        }\r\n      }\r\n    }\r\n\r\n```\r\n \r\nIn addition to OpenCoverageOutputFile() and Emit() as above, an Emit() function\r\nwill be provided that accepts an io.Writer (to allow coverage profiles to be\r\nwritten to a network connection or pipe, in case writing to a file is not\r\npossible).\r\n\r\n### Coverage and modules\r\n\r\nMost modern Go programs make extensive use of dependent third-party packages;\r\nwith the advent of Go modules, we now have systems in place to explicitly\r\nidentify and track these dependencies.\r\n\r\nWhen application writers add a third-party dependency, in most cases the authors\r\nwill not be interested in having that dependency's code count towards the\r\n""percent of lines covered"" metric for their application (there will definitely\r\nbe exceptions to this rule, but it should hold in most cases).\r\n\r\nIt makes sense to leverage information from the Go module system when collecting\r\ncode coverage data. Within the context of the module system, a given package feeding\r\ninto the build of an application will have one of the three following dispositions (relative to\r\nthe main module):\r\n\r\n* Contained: package is part of the module itself (not a dependency)\r\n* Dependent: package is a direct or indirect dependency of the module (appearing in go.mod)\r\n* Stdlib: package is part of the Go standard library / runtime\r\n\r\nWith this in mind, the proposal when building an application for coverage will\r\nbe to instrument every package that feeds into the build, but record the\r\ndisposition for each package (as above), then allow the user to select the\r\nproper granularity or treatment of dependencies when viewing or reporting.\r\n\r\nAs an example, consider the [Delve](https://github.com/go-delve/delve) debugger\r\n(a Go application). One entry in the Delve V1.8 go.mod file is:\r\n\r\n        github.com/cosiner/argv v0.1.0\r\n\r\nThis package (""argv"") has about 500 lines of Go code and a couple dozen Go\r\nfunctions; Delve uses only a single exported function. For a developer trying to\r\ngenerate a coverage report for Delve, it seems unlikely that they would want to\r\ninclude ""argv"" as part of the coverage statistics (percent lines/functions executed),\r\ngiven the secondary and very modest role that the dependency plays.\r\n\r\nOn the other hand, it's possible to imagine scenarios in which a specific\r\ndependency plays an integral or important role for a given application, meaning\r\nthat a developer might want to include the package in the applications coverage\r\nstatistics.\r\n\r\n### Merging coverage data output files\r\n\r\nAs part of this work the proposal to enhance the ""go tool cover"" command to\r\nprovide a profile merging facility, so that collection of coverage data files\r\n(emitted from multiple runs of an instrumented executable) can be merged into a\r\nsingle summary output file. Example usage:\r\n\r\n```\r\n  $ go tool cover -merge -coveragedir=/tmp/mycovdata -o finalprofile.out\r\n  $\r\n```\r\n\r\nThe merge tool will be capable of writing files in the existing (legacy)\r\ncoverage output file format, if requested by the user.\r\n\r\nIn addition to a ""merge"" facility, it may also be interesting to support other\r\noperations such as intersect and subtract (more on this later).\r\n\r\n### Differential coverage\r\n\r\nWhen fixing a bug in an application, it is common practice to add a new unit\r\ntest in addition to the code change that comprises the actual fix.\r\nWhen using code coverage, users may want to learn how many of the changed lines\r\nin their code are actually covered when the new test runs.\r\n\r\nAssuming we have a set of N coverage data output files (corresponding to those\r\ngenerated when running the existing set of tests for a package) and a new\r\ncoverage data file generated from a new testpoint, it would be useful to provide\r\na tool to ""subtract"" out the coverage information from the first set from the\r\nsecond file. This would leave just the set of new lines / regions that the new test causes to\r\nbe covered above and beyond what is already there.\r\n\r\nThis feature (profile subtraction) would make it much easier to write tooling\r\nthat would provide feedback to developers on whether newly written unit tests\r\nare covering new code in the way that the developer intended.\r\n\r\n## Design details\r\n\r\nPlease see the design document for details on proposed changes to the compiler, etc.\r\n\r\n## Implementation timetable\r\n\r\nPlan is for thanm@ to implement this in go 1.19 time frame.\r\n\r\n## Prerequisite Changes\r\n\r\nN/A\r\n\r\n## Preliminary Results\r\n\r\nNo data available yet.\r\n\r\n",Go\r\n  func ABC(x int) {\r\n    if x < 0 {\r\n      bar()\r\n    }\r\n  }\r\n
51195,"proposal: fmt: add Formatter fallbackImplementing `fmt.Formatter` overrides all other formatting. This makes it difficult to selectively implement verbs: you must either implement every verb and flag combination (including width, etc.) or leave them unimplemented.\r\n\r\nFor example, I have a `UUID` type. Its `String` method defaults to the 36-byte encoding with hyphens. I also want to add support for `%x` so users can encode it as a 32-byte hexadecimal string. Because `UUID` implements `fmt.Stringer`, I have to add `%x` support via `fmt.Formatter` (otherwise `%x` will incorrectly encode the 36-byte encoding as hexadecimal). But this means I lose `%q`, `%X`, `%v`, etc. support. If I want those, I have to implement them myself. See https://go.dev/play/p/lb8mkyhN3-L\r\n\r\nIdeally, the `fmt` package would allow me to write something like\r\n\r\n\r\n\r\nAs another example, I wrote this code (which admittedly I am not very proud of, but hey) to work around the same issue: https://github.com/ericlagergren/decimal/blob/aca2edc11f73e28a0e93d592cc6c3de4a352a81c/big.go#L895\r\n\r\n## Proposal Template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\nExperienced (have been writing Go since 1.3 or so).\r\n\r\n- What other languages do you have experience with?\r\nVarying degrees of familiarity with C, Java, Python, JavaScript, Bash, Assembly, etc.\r\n\r\n- Would this change make Go easier or harder to learn, and why?\r\nN/A\r\n\r\n- Has this idea, or one like it, been proposed before?\r\nDid not immediately find anything.\r\n\r\n- Who does this proposal help, and why?\r\nMe and other users of the `fmt` package.\r\n\r\n- What is the proposed change?\r\n\r\nAdd a mechanism to the `fmt` package to allow `Formatter` implementations to ""fall back"" to the default formatting. For example, an API _similar to_\r\n\r\n\r\n\r\nThe specific API is mostly unimportant to me.\r\n\r\n- Is this change backward compatible?\r\nYep.\r\n\r\n- Show example code before and after the change.\r\nSee above.\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n  Very likely none.\r\n  - What is the compile time cost?\r\n  N/A\r\n  - What is the run time cost?\r\n  Depends on how it's implemented.\r\n\r\n- Can you describe a possible implementation?\r\nSee above.\r\n\r\n- How would the language spec change?\r\nN/A\r\n\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\nIt augments `fmt.Formatter`. It does not duplicate any existing functionality.\r\n\r\n- Is the goal of this change a performance improvement?\r\nNope.\r\n\r\n- Does this affect error handling?\r\nNope.\r\n\r\n- Is this about generics?\r\nNope.",Proposal,robpike,"Implementing `fmt.Formatter` overrides all other formatting. This makes it difficult to selectively implement verbs: you must either implement every verb and flag combination (including width, etc.) or leave them unimplemented.\r\n\r\nFor example, I have a `UUID` type. Its `String` method defaults to the 36-byte encoding with hyphens. I also want to add support for `%x` so users can encode it as a 32-byte hexadecimal string. Because `UUID` implements `fmt.Stringer`, I have to add `%x` support via `fmt.Formatter` (otherwise `%x` will incorrectly encode the 36-byte encoding as hexadecimal). But this means I lose `%q`, `%X`, `%v`, etc. support. If I want those, I have to implement them myself. See https://go.dev/play/p/lb8mkyhN3-L\r\n\r\nIdeally, the `fmt` package would allow me to write something like\r\n\r\n```go\r\n// func Fallback(s State, v rune, arg interface{}) Formatter\r\n\r\nfunc (u UUID) Format(s fmt.State, v rune) {\r\n    switch v {\r\n    case 'x', 'X':\r\n        fmt.Fprintf(s, ""%""+string(v), u[:])\r\n    default:\r\n        fmt.Fprintf(s, fmt.Fallback(s, v, u))\r\n    }\r\n}\r\n```\r\n\r\nAs another example, I wrote this code (which admittedly I am not very proud of, but hey) to work around the same issue: https://github.com/ericlagergren/decimal/blob/aca2edc11f73e28a0e93d592cc6c3de4a352a81c/big.go#L895\r\n\r\n## Proposal Template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\nExperienced (have been writing Go since 1.3 or so).\r\n\r\n- What other languages do you have experience with?\r\nVarying degrees of familiarity with C, Java, Python, JavaScript, Bash, Assembly, etc.\r\n\r\n- Would this change make Go easier or harder to learn, and why?\r\nN/A\r\n\r\n- Has this idea, or one like it, been proposed before?\r\nDid not immediately find anything.\r\n\r\n- Who does this proposal help, and why?\r\nMe and other users of the `fmt` package.\r\n\r\n- What is the proposed change?\r\n\r\nAdd a mechanism to the `fmt` package to allow `Formatter` implementations to ""fall back"" to the default formatting. For example, an API _similar to_\r\n\r\n```go\r\n// Fallback returns a Formatter that formats arg\r\n// using the default formatting for the State and\r\n// verb.\r\nfunc Fallback(s State, v rune, arg interface{}) Formatter {\r\n   return fallback{v: arg}\r\n}\r\n\r\ntype fallback struct {\r\n    v interface{}\r\n}\r\n\r\nfunc (p *pp) handleMethods(verb rune) (handled bool0 {\r\n    [...]\r\n    if f, ok := v.(fallback); ok {\r\n        p.arg = f.arg\r\n    } else if formatter, ok := v.(Formatter); ok {\r\n        [...]\r\n    }\r\n}\r\n```\r\n\r\nThe specific API is mostly unimportant to me.\r\n\r\n- Is this change backward compatible?\r\nYep.\r\n\r\n- Show example code before and after the change.\r\nSee above.\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n  Very likely none.\r\n  - What is the compile time cost?\r\n  N/A\r\n  - What is the run time cost?\r\n  Depends on how it's implemented.\r\n\r\n- Can you describe a possible implementation?\r\nSee above.\r\n\r\n- How would the language spec change?\r\nN/A\r\n\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\nIt augments `fmt.Formatter`. It does not duplicate any existing functionality.\r\n\r\n- Is the goal of this change a performance improvement?\r\nNope.\r\n\r\n- Does this affect error handling?\r\nNope.\r\n\r\n- Is this about generics?\r\nNope.","go\r\n// func Fallback(s State, v rune, arg interface{}) Formatter\r\n\r\nfunc (u UUID) Format(s fmt.State, v rune) {\r\n    switch v {\r\n    case 'x', 'X':\r\n        fmt.Fprintf(s, ""%""+string(v), u[:])\r\n    default:\r\n        fmt.Fprintf(s, fmt.Fallback(s, v, u))\r\n    }\r\n}\r\n"
51139,"go/types, types2: explore ""interleaved"" type inference by combining function argument type inference with constraint type inferenceThis is extracted from an [old comment](https://go-review.googlesource.com/c/go/+/294469/33..109/doc/go_spec.html#b4458) by @rsc on the behavior of type inference as described in the spec (and as currently implemented). Given the following code:\r\n\r\nType inference passes in _separate_ phases of function argument type inference and constraint type inference: In the first phase (function arguments) the following matches are established: `S -> []MyPtr` and `T -> *int`. At this point we have all type arguments and we're done. After instantiation of `Append` we have the non-generic function:\r\n\r\nand now `[]MyPtr` doesn't implement `~[]*int` (`MyPtr` is not identical to `*int`).\r\n\r\nPer the comment by @rsc, this could work if function argument type inference and constraint type inference were interleaved (and inference using typed function arguments would stop as soon as all type arguments are known).\r\n\r\nIn such an interleaved world, as soon as we have established the mapping `S -> []MyPtr` constraint type inference would match `[]MyPtr` against `[]T` and establish the mapping `T -> MyPtr`. At this point all type arguments are inferred and upon instantiation of `Append` we would get:\r\n\r\nCalling this version of `Append` would work because the unnamed type `*int` can be assigned to the named type `MyPtr`.\r\n\r\nIt might even be possible to apply constraint type inference to constraints that don't have a single specific type: As soon as we have a type argument inferred from a function argument it could be matched against every specific type in the constraint.\r\n\r\nThe interleaved type inference behavior is more powerful in this specific case (and thus we could change this in a backward-compatible way).\r\n\r\n@rsc, @ianlancetaylor, @findleyr for comments.\r\n",NeedsInvestigation|FrozenDueToAge|early-in-cycle|generics|TypeInference,griesemer,"This is extracted from an [old comment](https://go-review.googlesource.com/c/go/+/294469/33..109/doc/go_spec.html#b4458) by @rsc on the behavior of type inference as described in the spec (and as currently implemented). Given the following code:\r\n```Go\r\n// user-defined implementation of append\r\nfunc Append[S ~[]T, T any](s S, x ...T) S { /* implementation of append */ return s }\r\n\r\nfunc _() {\r\n        type MyPtr *int\r\n        var x []MyPtr\r\n        _ = append(x, new(int))  // built-in append: ok\r\n        _ = Append(x, new(int))  // user-defined append, not ok: []MyPtr does not implement ~[]*int\r\n}\r\n```\r\nType inference passes in _separate_ phases of function argument type inference and constraint type inference: In the first phase (function arguments) the following matches are established: `S -> []MyPtr` and `T -> *int`. At this point we have all type arguments and we're done. After instantiation of `Append` we have the non-generic function:\r\n```Go\r\nfunc Append(s []*int, x ...*int) []MyPtr\r\n```\r\nand now `[]MyPtr` doesn't implement `~[]*int` (`MyPtr` is not identical to `*int`).\r\n\r\nPer the comment by @rsc, this could work if function argument type inference and constraint type inference were interleaved (and inference using typed function arguments would stop as soon as all type arguments are known).\r\n\r\nIn such an interleaved world, as soon as we have established the mapping `S -> []MyPtr` constraint type inference would match `[]MyPtr` against `[]T` and establish the mapping `T -> MyPtr`. At this point all type arguments are inferred and upon instantiation of `Append` we would get:\r\n```Go\r\nfunc Append(s []MyPtr, x ...MyPtr) []MyPtr\r\n```\r\nCalling this version of `Append` would work because the unnamed type `*int` can be assigned to the named type `MyPtr`.\r\n\r\nIt might even be possible to apply constraint type inference to constraints that don't have a single specific type: As soon as we have a type argument inferred from a function argument it could be matched against every specific type in the constraint.\r\n\r\nThe interleaved type inference behavior is more powerful in this specific case (and thus we could change this in a backward-compatible way).\r\n\r\n@rsc, @ianlancetaylor, @findleyr for comments.\r\n","Go\r\n// user-defined implementation of append\r\nfunc Append[S ~[]T, T any](s S, x ...T) S { /* implementation of append */ return s }\r\n\r\nfunc _() {\r\n        type MyPtr *int\r\n        var x []MyPtr\r\n        _ = append(x, new(int))  // built-in append: ok\r\n        _ = Append(x, new(int))  // user-defined append, not ok: []MyPtr does not implement ~[]*int\r\n}\r\n"
51025,"cmd/compile: missing `T.m is a field, not a method` error upon assignments to interfacesThe 1.17 compiler did report this extra error. See `fixedbugs/bug231.go` for a test case.\r\n\r\n\r\n\r\ncc: @findleyr \r\n",NeedsFix|FrozenDueToAge|compiler/runtime,griesemer,"The 1.17 compiler did report this extra error. See `fixedbugs/bug231.go` for a test case.\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ m() }\r\ntype T struct{ m func() }\r\ntype M struct{}\r\n\r\nfunc (M) m() {}\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar m M\r\n\tvar i I\r\n\r\n\ti = m\r\n\t// types2 does not give extra error ""T.m is a field, not a method""\r\n\ti = t // ERROR ""not a method|has no methods|does not implement I""\r\n\t_ = i\r\n}\r\n```\r\n\r\ncc: @findleyr \r\n","Go\r\npackage main\r\n\r\ntype I interface{ m() }\r\ntype T struct{ m func() }\r\ntype M struct{}\r\n\r\nfunc (M) m() {}\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar m M\r\n\tvar i I\r\n\r\n\ti = m\r\n\t// types2 does not give extra error ""T.m is a field, not a method""\r\n\ti = t // ERROR ""not a method|has no methods|does not implement I""\r\n\t_ = i\r\n}\r\n"
51014,"x/tools: analysis does not work if there's a type error even with `RunDespiteErrors: true`\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. The [problematic code](https://github.com/golang/tools/blob/4da8ceb6f1ad02b6af00ed2d8d62df1d56a07d2f/go/analysis/internal/checker/checker.go#L156-L167) is latest.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kdy1/Library/Caches/go-build""\r\nGOENV=""/Users/kdy1/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kdy1/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kdy1/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pw/7l7d6f6s6ngb9z17pc912mtc0000gn/T/go-build3641127775=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nWhere slicefix is\r\n```\r\npackage slicefix\r\n\r\nimport (\r\n\t""log""\r\n\r\n\t""golang.org/x/tools/go/analysis""\r\n)\r\n\r\nvar (\r\n\tSliceFix = analysis.Analyzer{\r\n\t\tName:             ""slicefix"",\r\n\t\tDoc:              ""Auto dereference of slices"",\r\n\t\tRun:              run,\r\n\t\tRunDespiteErrors: true,\r\n\t}\r\n)\r\n\r\nfunc run(pass *analysis.Pass) (interface{}, error) {\r\n\tlog.Fatalf(""Run"")\r\n\r\n\treturn nil, nil\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected the analysis to be run, because I set `RunDespiteErrors` to true.\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n/Users/kdy1/projects/tsc/codemap/loc.go:27:23: invalid argument: arr (variable of type *[]string) for len\r\nfixer: error during loading\r\n```",NeedsInvestigation|FrozenDueToAge|Tools|Analysis,zpavlinovic,"\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. The [problematic code](https://github.com/golang/tools/blob/4da8ceb6f1ad02b6af00ed2d8d62df1d56a07d2f/go/analysis/internal/checker/checker.go#L156-L167) is latest.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kdy1/Library/Caches/go-build""\r\nGOENV=""/Users/kdy1/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kdy1/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kdy1/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pw/7l7d6f6s6ngb9z17pc912mtc0000gn/T/go-build3641127775=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/tools/go/analysis/multichecker""\r\n\t""my.pkg/internal/devtools/fixer/slicefix""\r\n)\r\n\r\nfunc main() {\r\n\t//singlechecker.Main(&slicefix.SliceFix)\r\n\tmultichecker.Main(&slicefix.SliceFix)\r\n}\r\n\r\n```\r\n\r\nWhere slicefix is\r\n```\r\npackage slicefix\r\n\r\nimport (\r\n\t""log""\r\n\r\n\t""golang.org/x/tools/go/analysis""\r\n)\r\n\r\nvar (\r\n\tSliceFix = analysis.Analyzer{\r\n\t\tName:             ""slicefix"",\r\n\t\tDoc:              ""Auto dereference of slices"",\r\n\t\tRun:              run,\r\n\t\tRunDespiteErrors: true,\r\n\t}\r\n)\r\n\r\nfunc run(pass *analysis.Pass) (interface{}, error) {\r\n\tlog.Fatalf(""Run"")\r\n\r\n\treturn nil, nil\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected the analysis to be run, because I set `RunDespiteErrors` to true.\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n/Users/kdy1/projects/tsc/codemap/loc.go:27:23: invalid argument: arr (variable of type *[]string) for len\r\nfixer: error during loading\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/tools/go/analysis/multichecker""\r\n\t""my.pkg/internal/devtools/fixer/slicefix""\r\n)\r\n\r\nfunc main() {\r\n\t//singlechecker.Main(&slicefix.SliceFix)\r\n\tmultichecker.Main(&slicefix.SliceFix)\r\n}\r\n\r\n"
51006,"go/types, types2: allow choice between reg. expression or not in ERROR test comments`go/types` and `types2` (and the `syntax` package) rely on `ERROR` comments in test cases. Such a comment accepts a regular expression pattern that is then matched against the expected error:\r\n\r\nOften we just want to see if the error string appears verbatim (as a substring) in the error output, we don't need reg. expression matching. If we could choose a non-regexp string in those cases, we wouldn't need to escape various characters, which would make these `ERROR` comments more readable.\r\n\r\nExample:\r\n\r\nwould become\r\n\r\nThe non-regexp pattern might be the more common case. Maybe we could have `ERROR` and `ERRORx` (the latter is for regexp. matching).\r\n\r\ncc: @findleyr ",NeedsFix|FrozenDueToAge,griesemer,"`go/types` and `types2` (and the `syntax` package) rely on `ERROR` comments in test cases. Such a comment accepts a regular expression pattern that is then matched against the expected error:\r\n```Go\r\n// ERROR regexp pattern\r\n```\r\nOften we just want to see if the error string appears verbatim (as a substring) in the error output, we don't need reg. expression matching. If we could choose a non-regexp string in those cases, we wouldn't need to escape various characters, which would make these `ERROR` comments more readable.\r\n\r\nExample:\r\n```Go\r\n// ERROR \\*T2 does not implement I1 \\(wrong type for method foo\\)\\n\\t\\thave foo\\(x int\\)\\n\\t\\twant foo\\(\\)\r\n```\r\nwould become\r\n```Go\r\n// ERROR *T2 does not implement I1 (wrong type for method foo)\\n\\t\\thave foo(x int)\\n\\t\\twant foo()\r\n```\r\nThe non-regexp pattern might be the more common case. Maybe we could have `ERROR` and `ERRORx` (the latter is for regexp. matching).\r\n\r\ncc: @findleyr ",Go\r\n// ERROR regexp pattern\r\n
50932,"go/types, types2: superfluous extra error message when type inference fails\r\nproduces two errors:\r\n```\r\ntestdata/manual.go2:13:16: cannot infer B (testdata/manual.go2:10:11)\r\ntestdata/manual.go2:13:16: got 1 arguments but 2 type parameters\r\n```\r\nOne would suffice.",NeedsFix|FrozenDueToAge,griesemer,"```Go\r\npackage p\r\n\r\ntype T[A, B any] struct{}\r\n\r\nfunc _() {\r\n        type _ T[int]\r\n}\r\n```\r\nproduces two errors:\r\n```\r\ntestdata/manual.go2:13:16: cannot infer B (testdata/manual.go2:10:11)\r\ntestdata/manual.go2:13:16: got 1 arguments but 2 type parameters\r\n```\r\nOne would suffice.","Go\r\npackage p\r\n\r\ntype T[A, B any] struct{}\r\n\r\nfunc _() {\r\n        type _ T[int]\r\n}\r\n"
50837,"cmd/compile: improve error message for invalid use of interface with type constraints\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://gotipplay.golang.org/p/K_OPRyt5aJo\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n./prog.go:8:21: interface with type constraints used as function parameter\r\n./prog.go:11:4: interface with type constraints cannot be used as field\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:8:21: interface contains type constraints\r\n./prog.go:11:4: interface contains type constraints\r\n```\r\n\r\n",help wanted|NeedsFix|FrozenDueToAge,griesemer,"\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://gotipplay.golang.org/p/K_OPRyt5aJo\r\n\r\n```golang\r\npackage main\r\n\r\ntype C interface {\r\n\t~int\r\n\tFn()\r\n}\r\n\r\nfunc UseInterface(c C) {}\r\n\r\ntype Foo struct {\r\n\tI C\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n./prog.go:8:21: interface with type constraints used as function parameter\r\n./prog.go:11:4: interface with type constraints cannot be used as field\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:8:21: interface contains type constraints\r\n./prog.go:11:4: interface contains type constraints\r\n```\r\n\r\n",golang\r\npackage main\r\n\r\ntype C interface {\r\n\t~int\r\n\tFn()\r\n}\r\n\r\nfunc UseInterface(c C) {}\r\n\r\ntype Foo struct {\r\n\tI C\r\n}\r\n
50773,"proposal: crypto/tls: make maxHandshake configurable### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/awnumar/Library/Caches/go-build""\r\nGOENV=""/Users/awnumar/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/awnumar/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/awnumar""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/fftr5j0n443f4z2sm11wlxv40000gn/T/go-build2260917661=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Generate a very large certificate. I passed mkcert many short SANs to get this.\r\n2. Start a Go TLS server.\r\n3. Connect to it with a Go TLS client.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the connection to succeed.\r\n\r\n### What did you see instead?\r\n\r\n`tls: handshake message of length 110013 bytes exceeds maximum of 65536 bytes`\r\n\r\nThe limit is defined [here](https://cs.opensource.google/go/go/+/master:src/crypto/tls/common.go;l=45;bpv=1;bpt=1?q=65536%20tls&ss=go%2Fgo):\r\n\r\n\r\n\r\nand it says that the protocol max is 16 MB, not 64 KiB. I assume this hard limit is to mitigate resource exhaustion attacks, but it would be preferable if it was configurable.\r\n\r\n### Context\r\n\r\nWe dynamically generate certificates for mTLS within and across clusters and configure which services are allowed to open connections between each other using Subject Alternative Names. In extreme cases a service that needs to communicate with many other services could have a certificate that's larger than this limit.\r\n\r\nThis isn't a problem right now but a limit of 64 KiB provides a fairly small and uncomfortable safety buffer. Is there a reason that this limit is not configurable?\r\n\r\nThis issue is related to #35153 where @FiloSottile says ""Documenting something makes it a backwards compatibility promise"". Is making it configurable still possible while preserving backwards compatibility in the future?",Proposal|NeedsInvestigation|Proposal-Crypto,FiloSottile,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/awnumar/Library/Caches/go-build""\r\nGOENV=""/Users/awnumar/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/awnumar/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/awnumar""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/fftr5j0n443f4z2sm11wlxv40000gn/T/go-build2260917661=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Generate a very large certificate. I passed mkcert many short SANs to get this.\r\n2. Start a Go TLS server.\r\n3. Connect to it with a Go TLS client.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the connection to succeed.\r\n\r\n### What did you see instead?\r\n\r\n`tls: handshake message of length 110013 bytes exceeds maximum of 65536 bytes`\r\n\r\nThe limit is defined [here](https://cs.opensource.google/go/go/+/master:src/crypto/tls/common.go;l=45;bpv=1;bpt=1?q=65536%20tls&ss=go%2Fgo):\r\n\r\n```go\r\nconst maxHandshake = 65536 // maximum handshake we support (protocol max is 16 MB)\r\n```\r\n\r\nand it says that the protocol max is 16 MB, not 64 KiB. I assume this hard limit is to mitigate resource exhaustion attacks, but it would be preferable if it was configurable.\r\n\r\n### Context\r\n\r\nWe dynamically generate certificates for mTLS within and across clusters and configure which services are allowed to open connections between each other using Subject Alternative Names. In extreme cases a service that needs to communicate with many other services could have a certificate that's larger than this limit.\r\n\r\nThis isn't a problem right now but a limit of 64 KiB provides a fairly small and uncomfortable safety buffer. Is there a reason that this limit is not configurable?\r\n\r\nThis issue is related to #35153 where @FiloSottile says ""Documenting something makes it a backwards compatibility promise"". Is making it configurable still possible while preserving backwards compatibility in the future?",go\r\nconst maxHandshake = 65536 // maximum handshake we support (protocol max is 16 MB)\r\n
50729,"cmd/compile: handle alias types in recursive types more consistentlyThe following code\r\n\r\nreports an error when we use `B` in a recursive type definition due to the way type aliases are handled inside the type checker. In this (and possibly many other similar) cases, the error can be avoided by restructuring the code slightly. This version compiles without error (declaration of `x` moved past the type declarations):\r\n\r\nThe compiler should be able to avoid this error on its own.\r\n\r\nRoot cause: Currently, the type checker doesn't have a ""forwarding mechanism"" for type aliases that are being ""used"" before their respective type is fully known. To solve this problem in general, a forwarding mechanism/type needs to be introduced. This is only an issue with some recursive type definitions involving type aliases.\r\n\r\ncc: @findleyr ",NeedsInvestigation|compiler/runtime,griesemer,"The following code\r\n```Go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B /* ERROR invalid use of type alias */ ]\r\ntype B = T[A]\r\n```\r\nreports an error when we use `B` in a recursive type definition due to the way type aliases are handled inside the type checker. In this (and possibly many other similar) cases, the error can be avoided by restructuring the code slightly. This version compiles without error (declaration of `x` moved past the type declarations):\r\n```Go\r\npackage p\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B]\r\ntype B = T[A]\r\n\r\nvar x T[B]\r\n```\r\nThe compiler should be able to avoid this error on its own.\r\n\r\nRoot cause: Currently, the type checker doesn't have a ""forwarding mechanism"" for type aliases that are being ""used"" before their respective type is fully known. To solve this problem in general, a forwarding mechanism/type needs to be introduced. This is only an issue with some recursive type definitions involving type aliases.\r\n\r\ncc: @findleyr ",Go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B /* ERROR invalid use of type alias */ ]\r\ntype B = T[A]\r\n
50588,cmd/compile: no need to complain about missing type arguments after type inference error\r\nproduces two error messages:\r\n```\r\nfilename.go:5:17: cannot infer B (filename:go:3:11)\r\nfilename.go:5:17: got 1 arguments but 2 type parameters\r\n```\r\nThere's no need to report the 2nd error.\r\n\r\nFollow-up on #49541.\r\n,NeedsFix|FrozenDueToAge,griesemer|findleyr,"```Go\r\npackage p\r\n\r\ntype S[A, B any] struct {}\r\n\r\nfunc _[A any](s S /* ERROR cannot infer B */ /* ERROR got 1 arguments but 2 type parameters */ [A]) {}\r\n```\r\nproduces two error messages:\r\n```\r\nfilename.go:5:17: cannot infer B (filename:go:3:11)\r\nfilename.go:5:17: got 1 arguments but 2 type parameters\r\n```\r\nThere's no need to report the 2nd error.\r\n\r\nFollow-up on #49541.\r\n","Go\r\npackage p\r\n\r\ntype S[A, B any] struct {}\r\n\r\nfunc _[A any](s S /* ERROR cannot infer B */ /* ERROR got 1 arguments but 2 type parameters */ [A]) {}\r\n"
50436,"os/exec: add fields for managing termination signals and pipes### Background\r\n\r\n#23019 (accepted but not yet implemented; CC @ianlancetaylor @bradfitz) proposed to change `exec.Cmd.Wait` to stop the goroutines that are copying I/O to and from a completed `exec.Cmd`; see that proposal for further background on the problem it aims to address. However, as noted in https://github.com/golang/go/issues/23019#issuecomment-396372555 and https://github.com/golang/go/issues/23019#issuecomment-558416418, any feasible implementation of the proposal requires the use of an arbitrary timeout, and the proposal does not include a mechanism to adjust that timeout. (Given our history with the Go project's builders, I am extremely skeptical that any particular hard-coded timeout can strike an appropriate balance between robustness and latency.)\r\n\r\n#31774, #22757, and #21135 proposed to allow users of `exec.CommandContext` to customize the signal sent to the command when the context is canceled. They were all declined due to lack of concrete demand for the feature (https://github.com/golang/go/issues/21135#issuecomment-332006025, https://github.com/golang/go/issues/22757#issuecomment-345034265, https://github.com/golang/go/issues/31774#issuecomment-490246274). We have since accrued a number of copies of functions that work around the feature's absence. In the Go project alone, we have:\r\n* https://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l=1233-1292;drc=af3b8cf5026a9d74a53ac5d3fec2bba35a96ad91\r\n* https://cs.opensource.google/go/go/+/master:src/internal/testenv/testenv.go;l=312-366;drc=cc795a01dcec7c97044b31571af88ac98310f2b3 (added for #37405)\r\n* https://cs.opensource.google/go/x/build/+/master:internal/internal.go;l=28-86;drc=fa5c6e87e680b621066712172cd92426fb206416\r\n* https://cs.opensource.google/go/x/playground/+/master:internal/internal.go;l=14-70;drc=ccdf1e5d22bc9653f3a3b58016d2c9914ebaad48\r\n\r\nI'm attempting to add yet another variation (in [CL 373005](https://go.dev/cl/373005)) in order to help diagnose #50014. However, for this variation (prompted by discussions with @aclements and @prattmic) I have tried to make this variation a minimally-invasive change on top of the `exec.Cmd` API.\r\n\r\nI believe I have achieved that goal: the API requires the addition of only 2\u20133 new fields and no new methods or top-level functions. You can view (and try out) a prototype as [`github.com/bcmills/more/os/moreexec`](https://pkg.go.dev/github.com/bcmills/more/os/moreexec), which provides a drop-in replacement for a subset of the `exec.Cmd` API.\r\n\r\n### Proposal\r\n\r\nI propose the addition of the following fields to the `exec.Cmd` struct, along with their corresponding implementation:\r\n\r\n\r\n\r\nThe new `Context` field is exported only in order to simplify the documentation for the `Interrupt` and `WaitDelay` fields. (It was requested and rejected in #46699, but the objection there was my own \u2014 due to concerns about the interactions with the API in <em>this</em> proposal. It could be excised from this proposal without damaging anything but documentation clarity.)\r\n\r\nThe new `Interrupt` field sets the signal to be sent when the `Context` is done. `exec.CommandContext` explicitly sets it to `os.Kill` in order to maintain the existing behavior of `exec.CommandContext`, but I expect many users on Unix platforms will want to set it to `os.Interrupt` or `syscall.SIGQUIT` instead.\r\n\r\nThe new `WaitDelay` field sets the interval to wait for input and output after process termination or an interrupt signal. That interval turns out to be important for many testing applications (such as the Go Playground implementation and the `cmd/go` test suite). It also generalizes nicely to the use-cases in #23019: setting `WaitDelay` without `Context` provides bounded I/O wait times without sending a preceding signal.\r\n\r\n### Compatibility\r\n\r\nI believe that this proposal is entirely backward-compatible (in contrast with #23019). The zero-values for the new fields provide exactly the same behavior as a `Cmd` returned by `exec.Command` or `exec.CommandContext` today.\r\n\r\n### Caveats\r\n\r\nThis proposal does not address graceful shutdown on Windows (https://github.com/golang/go/issues/22757#issuecomment-773581159; CC @mvdan). However, it may be possible to extend it to do so by providing special-case Windows behavior when the `Interrupt` field is set to `os.Interrupt`, or by adding an `InterruptFunc func(*Cmd)` callback that would also be invoked when `Context` is done.\r\n\r\nThe proposed API also does not provide a mechanism to send an `Interrupt` signal followed by `os.Kill` after a delay <em>but still wait for subprocesses</em> to close all I/O pipes. I believe the use-cases for that scenario are sufficiently niche to be provided only by third-party libraries: sending `SIGKILL` to the parent process makes it likely that subprocesses will not know to shut down, so in the vast majority of cases users should either not send `SIGKILL` at all (`WaitDelay` == 0), forcibly terminate the pipes to try to kill the subprocesses with `SIGPIPE` (`WaitDelay` > 0), or do something platform-specific to try to forcibly shut down an entire process group (outside the scope of this proposal).\r\n\r\n### Alternatives considered\r\n\r\nIn https://github.com/golang/go/issues/31774#issuecomment-488320719, @bradfitz suggested a field `Kill func(*os.Process)`, which would presumably be added instead of the `Interrupt` field in this proposal. However, I believe that such a field would be simultaneously too complex and not powerful enough:\r\n\r\n* The `Kill` field would be too complex for most Unix applications, which overwhelmingly only need to send one of `SIGTERM`, `SIGINT`, `SIGQUIT`, or `SIGKILL` \u2014 why pass a whole callback when you really just want to say which signal you need?\r\n\r\n* A `*os.Process` callback would still not be powerful enough for Windows applications. If I understand the discussion in #6720 correctly (CC @alexbrainman), `CTRL_BREAK_EVENT` is sent to an entire process group, not a single `*os.Process`, so Windows users would also need a mechanism for creating (or determining) such a group, or some completely separate out-of-band way to request that the process terminate (such as by sending it a particular input or IPC message).\r\n\r\nGiven the above, the `Interrupt` field seems more ergonomic: it gives the right behavior for Unix users, and if Windows users want to do something more complex they can set `Interrupt` to `nil` and start a separate goroutine in between the calls to `(*Cmd).Start` and `(*Cmd).Wait` to implement whatever custom logic they want.",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,bcmills,"### Background\r\n\r\n#23019 (accepted but not yet implemented; CC @ianlancetaylor @bradfitz) proposed to change `exec.Cmd.Wait` to stop the goroutines that are copying I/O to and from a completed `exec.Cmd`; see that proposal for further background on the problem it aims to address. However, as noted in https://github.com/golang/go/issues/23019#issuecomment-396372555 and https://github.com/golang/go/issues/23019#issuecomment-558416418, any feasible implementation of the proposal requires the use of an arbitrary timeout, and the proposal does not include a mechanism to adjust that timeout. (Given our history with the Go project's builders, I am extremely skeptical that any particular hard-coded timeout can strike an appropriate balance between robustness and latency.)\r\n\r\n#31774, #22757, and #21135 proposed to allow users of `exec.CommandContext` to customize the signal sent to the command when the context is canceled. They were all declined due to lack of concrete demand for the feature (https://github.com/golang/go/issues/21135#issuecomment-332006025, https://github.com/golang/go/issues/22757#issuecomment-345034265, https://github.com/golang/go/issues/31774#issuecomment-490246274). We have since accrued a number of copies of functions that work around the feature's absence. In the Go project alone, we have:\r\n* https://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l=1233-1292;drc=af3b8cf5026a9d74a53ac5d3fec2bba35a96ad91\r\n* https://cs.opensource.google/go/go/+/master:src/internal/testenv/testenv.go;l=312-366;drc=cc795a01dcec7c97044b31571af88ac98310f2b3 (added for #37405)\r\n* https://cs.opensource.google/go/x/build/+/master:internal/internal.go;l=28-86;drc=fa5c6e87e680b621066712172cd92426fb206416\r\n* https://cs.opensource.google/go/x/playground/+/master:internal/internal.go;l=14-70;drc=ccdf1e5d22bc9653f3a3b58016d2c9914ebaad48\r\n\r\nI'm attempting to add yet another variation (in [CL 373005](https://go.dev/cl/373005)) in order to help diagnose #50014. However, for this variation (prompted by discussions with @aclements and @prattmic) I have tried to make this variation a minimally-invasive change on top of the `exec.Cmd` API.\r\n\r\nI believe I have achieved that goal: the API requires the addition of only 2\u20133 new fields and no new methods or top-level functions. You can view (and try out) a prototype as [`github.com/bcmills/more/os/moreexec`](https://pkg.go.dev/github.com/bcmills/more/os/moreexec), which provides a drop-in replacement for a subset of the `exec.Cmd` API.\r\n\r\n### Proposal\r\n\r\nI propose the addition of the following fields to the `exec.Cmd` struct, along with their corresponding implementation:\r\n\r\n```go\r\n\t// Context is the context that controls the lifetime of the command\r\n\t// (typically the one passed to CommandContext).\r\n\tContext context.Context\r\n\r\n\t// If Interrupt is non-nil, Context must also be non-nil and Interrupt will be\r\n\t// sent to the child process when Context is done.\r\n\t//\r\n\t// If the command exits with a success code after the Interrupt signal has\r\n\t// been sent, Wait and similar methods will return Context.Err()\r\n\t// instead of nil.\r\n\t//\r\n\t// If the Interrupt signal is not supported on the current platform\r\n\t// (for example, if it is os.Interrupt on Windows), Start may fail\r\n\t// (and return a non-nil error).\r\n\tInterrupt os.Signal\r\n\r\n\t// If WaitDelay is non-zero, the command's I/O pipes will be closed after\r\n\t// WaitDelay has elapsed after either the command's process has exited or\r\n\t// (if Context is non-nil) Context is done, whichever occurs first.\r\n\t// If the command's process is still running after WaitDelay has elapsed,\r\n\t// it will be terminated with os.Kill before the pipes are closed.\r\n\t//\r\n\t// If the command exits with a success code after pipes are closed due to\r\n\t// WaitDelay and no Interrupt signal has been sent, Wait and similar methods\r\n\t// will return ErrWaitDelay instead of nil.\r\n\t//\r\n\t// If WaitDelay is zero (the default), I/O pipes will be read until EOF,\r\n\t// which might not occur until orphaned subprocesses of the command have\r\n\t// also closed their descriptors for the pipes.\r\n\tWaitDelay time.Duration\r\n```\r\n\r\nThe new `Context` field is exported only in order to simplify the documentation for the `Interrupt` and `WaitDelay` fields. (It was requested and rejected in #46699, but the objection there was my own \u2014 due to concerns about the interactions with the API in <em>this</em> proposal. It could be excised from this proposal without damaging anything but documentation clarity.)\r\n\r\nThe new `Interrupt` field sets the signal to be sent when the `Context` is done. `exec.CommandContext` explicitly sets it to `os.Kill` in order to maintain the existing behavior of `exec.CommandContext`, but I expect many users on Unix platforms will want to set it to `os.Interrupt` or `syscall.SIGQUIT` instead.\r\n\r\nThe new `WaitDelay` field sets the interval to wait for input and output after process termination or an interrupt signal. That interval turns out to be important for many testing applications (such as the Go Playground implementation and the `cmd/go` test suite). It also generalizes nicely to the use-cases in #23019: setting `WaitDelay` without `Context` provides bounded I/O wait times without sending a preceding signal.\r\n\r\n### Compatibility\r\n\r\nI believe that this proposal is entirely backward-compatible (in contrast with #23019). The zero-values for the new fields provide exactly the same behavior as a `Cmd` returned by `exec.Command` or `exec.CommandContext` today.\r\n\r\n### Caveats\r\n\r\nThis proposal does not address graceful shutdown on Windows (https://github.com/golang/go/issues/22757#issuecomment-773581159; CC @mvdan). However, it may be possible to extend it to do so by providing special-case Windows behavior when the `Interrupt` field is set to `os.Interrupt`, or by adding an `InterruptFunc func(*Cmd)` callback that would also be invoked when `Context` is done.\r\n\r\nThe proposed API also does not provide a mechanism to send an `Interrupt` signal followed by `os.Kill` after a delay <em>but still wait for subprocesses</em> to close all I/O pipes. I believe the use-cases for that scenario are sufficiently niche to be provided only by third-party libraries: sending `SIGKILL` to the parent process makes it likely that subprocesses will not know to shut down, so in the vast majority of cases users should either not send `SIGKILL` at all (`WaitDelay` == 0), forcibly terminate the pipes to try to kill the subprocesses with `SIGPIPE` (`WaitDelay` > 0), or do something platform-specific to try to forcibly shut down an entire process group (outside the scope of this proposal).\r\n\r\n### Alternatives considered\r\n\r\nIn https://github.com/golang/go/issues/31774#issuecomment-488320719, @bradfitz suggested a field `Kill func(*os.Process)`, which would presumably be added instead of the `Interrupt` field in this proposal. However, I believe that such a field would be simultaneously too complex and not powerful enough:\r\n\r\n* The `Kill` field would be too complex for most Unix applications, which overwhelmingly only need to send one of `SIGTERM`, `SIGINT`, `SIGQUIT`, or `SIGKILL` \u2014 why pass a whole callback when you really just want to say which signal you need?\r\n\r\n* A `*os.Process` callback would still not be powerful enough for Windows applications. If I understand the discussion in #6720 correctly (CC @alexbrainman), `CTRL_BREAK_EVENT` is sent to an entire process group, not a single `*os.Process`, so Windows users would also need a mechanism for creating (or determining) such a group, or some completely separate out-of-band way to request that the process terminate (such as by sending it a particular input or IPC message).\r\n\r\nGiven the above, the `Interrupt` field seems more ergonomic: it gives the right behavior for Unix users, and if Windows users want to do something more complex they can set `Interrupt` to `nil` and start a separate goroutine in between the calls to `(*Cmd).Start` and `(*Cmd).Wait` to implement whatever custom logic they want.","go\r\n\t// Context is the context that controls the lifetime of the command\r\n\t// (typically the one passed to CommandContext).\r\n\tContext context.Context\r\n\r\n\t// If Interrupt is non-nil, Context must also be non-nil and Interrupt will be\r\n\t// sent to the child process when Context is done.\r\n\t//\r\n\t// If the command exits with a success code after the Interrupt signal has\r\n\t// been sent, Wait and similar methods will return Context.Err()\r\n\t// instead of nil.\r\n\t//\r\n\t// If the Interrupt signal is not supported on the current platform\r\n\t// (for example, if it is os.Interrupt on Windows), Start may fail\r\n\t// (and return a non-nil error).\r\n\tInterrupt os.Signal\r\n\r\n\t// If WaitDelay is non-zero, the command's I/O pipes will be closed after\r\n\t// WaitDelay has elapsed after either the command's process has exited or\r\n\t// (if Context is non-nil) Context is done, whichever occurs first.\r\n\t// If the command's process is still running after WaitDelay has elapsed,\r\n\t// it will be terminated with os.Kill before the pipes are closed.\r\n\t//\r\n\t// If the command exits with a success code after pipes are closed due to\r\n\t// WaitDelay and no Interrupt signal has been sent, Wait and similar methods\r\n\t// will return ErrWaitDelay instead of nil.\r\n\t//\r\n\t// If WaitDelay is zero (the default), I/O pipes will be read until EOF,\r\n\t// which might not occur until orphaned subprocesses of the command have\r\n\t// also closed their descriptors for the pipes.\r\n\tWaitDelay time.Duration\r\n"
50272,"spec: function type inference ignores type parameter constraints<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, generics are required\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vlad/.cache/go-build""\r\nGOENV=""/home/vlad/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vlad/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/vlad/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vlad/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vlad/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3350654881=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile this code:\r\n\r\n\r\n### What did you expect to see?\r\nThe code should compile successfully\r\n\r\n\r\n### What did you see instead?\r\nCompilation failed with `type S of s does not match []T (cannot infer T)` error message\r\n\r\nThis code compiles fine:\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|generics|TypeInference,griesemer|findleyr,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, generics are required\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vlad/.cache/go-build""\r\nGOENV=""/home/vlad/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vlad/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/vlad/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vlad/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vlad/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3350654881=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile this code:\r\n```go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b(s)\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nThe code should compile successfully\r\n\r\n\r\n### What did you see instead?\r\nCompilation failed with `type S of s does not match []T (cannot infer T)` error message\r\n\r\nThis code compiles fine:\r\n```go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b([]T(s))\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n```\r\n\r\n","go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b(s)\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n"
50249,"syscall: NewCallback triggers data race on Windows when used from different goroutine<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\knutz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\knutz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\knutz\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\knutz\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.17.4\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\knutz\\AppData\\Local\\Temp\\go-build2788134738=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""syscall""\r\n)\r\n\r\nfunc foo() {\r\n\tsyscall.NewCallback(func(callerContext uintptr, iface uintptr, notificationType uint32) uintptr {\r\n\t\treturn 0\r\n\t})\r\n}\r\n\r\nfunc main() {\r\n\tgo foo()\r\n\tfoo()\r\n}\r\n\r\n```\r\nBuilt and run using:\r\n\r\n\r\n### What did you expect to see?\r\nNothing\r\n### What did you see instead?\r\n```==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000028000 by goroutine 6:\r\n  runtime.mapaccess2()\r\n      C:/Program Files/Go/src/runtime/map.go:452 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:308 +0x244\r\n\r\nPrevious write at 0x00c000028000 by main goroutine:\r\n  runtime.mapassign()\r\n      C:/Program Files/Go/src/runtime/map.go:571 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:324 +0x392\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:15 +0x30\r\n\r\nGoroutine 6 (running) created at:\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:14 +0x2b\r\n==================\r\nFound 1 data race(s)```\r\n\r\n",OS-Windows|NeedsFix|FrozenDueToAge,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\knutz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\knutz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\knutz\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\knutz\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.17.4\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\knutz\\AppData\\Local\\Temp\\go-build2788134738=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""syscall""\r\n)\r\n\r\nfunc foo() {\r\n\tsyscall.NewCallback(func(callerContext uintptr, iface uintptr, notificationType uint32) uintptr {\r\n\t\treturn 0\r\n\t})\r\n}\r\n\r\nfunc main() {\r\n\tgo foo()\r\n\tfoo()\r\n}\r\n\r\n```\r\nBuilt and run using:\r\n```go build -race && ./main.exe```\r\n\r\n### What did you expect to see?\r\nNothing\r\n### What did you see instead?\r\n```==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000028000 by goroutine 6:\r\n  runtime.mapaccess2()\r\n      C:/Program Files/Go/src/runtime/map.go:452 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:308 +0x244\r\n\r\nPrevious write at 0x00c000028000 by main goroutine:\r\n  runtime.mapassign()\r\n      C:/Program Files/Go/src/runtime/map.go:571 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:324 +0x392\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:15 +0x30\r\n\r\nGoroutine 6 (running) created at:\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:14 +0x2b\r\n==================\r\nFound 1 data race(s)```\r\n\r\n",go build -race && ./main.exe
50101,"net: make LookupCNAME consistent between Unix and Windows, documentLookupCNAME is pretty weird right now.\r\n\r\nDespite the name, it entirely ignores CNAME records on Unix. It launches `A` and `AAAA` record lookups to recursive resolvers and returns the first response name found in the `A` and `AAAA`, skipping over any `CNAME`. (and not even asking for a `CNAME`)\r\n\r\nBut it documents that it does that...\r\n\r\nhttps://pkg.go.dev/net#LookupCNAME\r\n\r\n> A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS ""CNAME"" records, as long as host resolves to address records.\r\n\r\nOTOH, on Windows, it does what you would expect from the name itself: it looks up CNAME records:\r\n\r\n\r\n\r\nHere's a demo of a program behaving differently:\r\n\r\n\r\n\r\nOn Linux/Mac:\r\n\r\n```\r\n2021/12/10 21:19:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:19:45 cname = """", lookup cname-to-txt.go4.org: no such host\r\n```\r\n\r\nOn Windows:\r\n\r\n```\r\n2021/12/10 21:11:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:11:45 cname = ""test-txt-record.go4.org."", <nil>\r\n```\r\n\r\nI like the Windows behavior better, FWIW. That's what I was looking for, but apparently it doesn't exist.\r\n\r\nCan we either:\r\n\r\n1. add `LookupCNAMERecord` that actually looks up a CNAME record\r\n2. redefine `LookupCNAME` to be like Windows, perhaps adding a `LookupCanonicalName` with the current weird Unix behavior of `LookupCNAME`?\r\n\r\nBut at minimum: document whatever the rules are and make Unix and Windows match? At least in `Resolver.PreferGo` mode?",Documentation|OS-Windows|Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod,rsc,"LookupCNAME is pretty weird right now.\r\n\r\nDespite the name, it entirely ignores CNAME records on Unix. It launches `A` and `AAAA` record lookups to recursive resolvers and returns the first response name found in the `A` and `AAAA`, skipping over any `CNAME`. (and not even asking for a `CNAME`)\r\n\r\nBut it documents that it does that...\r\n\r\nhttps://pkg.go.dev/net#LookupCNAME\r\n\r\n> A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS ""CNAME"" records, as long as host resolves to address records.\r\n\r\nOTOH, on Windows, it does what you would expect from the name itself: it looks up CNAME records:\r\n\r\n```go\r\nfunc (*Resolver) lookupCNAME(ctx context.Context, name string) (string, error) {\r\n        // TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.\r\n        acquireThread()\r\n        defer releaseThread()\r\n        var r *syscall.DNSRecord\r\n        e := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\r\n```\r\n\r\nHere's a demo of a program behaving differently:\r\n\r\n```go\r\nfunc main() {\r\n\ttxt, err := net.LookupTXT(""cname-to-txt.go4.org"")\r\n\tlog.Printf(""LookupTXT = %q, %v"", txt, err)\r\n\r\n\tcname, err := net.LookupCNAME(""cname-to-txt.go4.org"")\r\n\tlog.Printf(""cname = %q, %v"", cname, err)\r\n}\r\n```\r\n\r\nOn Linux/Mac:\r\n\r\n```\r\n2021/12/10 21:19:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:19:45 cname = """", lookup cname-to-txt.go4.org: no such host\r\n```\r\n\r\nOn Windows:\r\n\r\n```\r\n2021/12/10 21:11:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:11:45 cname = ""test-txt-record.go4.org."", <nil>\r\n```\r\n\r\nI like the Windows behavior better, FWIW. That's what I was looking for, but apparently it doesn't exist.\r\n\r\nCan we either:\r\n\r\n1. add `LookupCNAMERecord` that actually looks up a CNAME record\r\n2. redefine `LookupCNAME` to be like Windows, perhaps adding a `LookupCanonicalName` with the current weird Unix behavior of `LookupCNAME`?\r\n\r\nBut at minimum: document whatever the rules are and make Unix and Windows match? At least in `Resolver.PreferGo` mode?","go\r\nfunc (*Resolver) lookupCNAME(ctx context.Context, name string) (string, error) {\r\n        // TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.\r\n        acquireThread()\r\n        defer releaseThread()\r\n        var r *syscall.DNSRecord\r\n        e := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\r\n"
49150,"cmd/compile, runtime: initialization order within a file appears to have changed### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.17.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, with 1.17.1 and .2. It has not been a problem prior to 1.17.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cnicolaou/Library/Caches/go-build""\r\nGOENV=""/Users/cnicolaou/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cnicolaou/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cnicolaou/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.7""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/cnicolaou/go-bug-report/bug/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1h/54rm9zd51ddcs0pt8j_l7d2m0000gn/T/go-build3841401253=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nNothing new! The code that encountered the problem has been in use since 2014/15.\r\n\r\nIt is my understanding that for the code snippet below, the initializeMe function will always\r\nbe called first and before any other initialization. This has been been the case prior to\r\ngo 1.17\r\n\r\n\r\n\r\nHowever, with go 1.17, this behavior appears to have changed, and ```initializeMe``` is no longer\r\ncalled before other initialization and in my case is not called before initialization that depends\r\non it. I understand that there is no dependency analysis going on but there shouldn't need\r\nsince by my reading of the spec initializeMe should always be called first. I have attached\r\ncode snippets to repro the problem.\r\n\r\nThe code that seems to defeat the expected initialization involves an additional variable initialization\r\nvia an other package.\r\n\r\n```\r\nvar breaksIfThisExists = struct {\r\n        vals    []int\r\n} {\r\n        []int{indirect.GetVal(d)},\r\n}\r\n```\r\n\r\nwhere ```indirect.GetVal(d)``` calls a method on ```d``` whose implementation accesses a variable that\r\nis initialized by ```initializeMe```.\r\n\r\n### What did you expect to see?\r\n\r\nno panic.\r\n\r\n### What did you see instead?\r\na panic\r\n\r\n[bug.tar.gz](https://github.com/golang/go/files/7412516/bug.tar.gz)\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,mdempsky,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.17.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, with 1.17.1 and .2. It has not been a problem prior to 1.17.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cnicolaou/Library/Caches/go-build""\r\nGOENV=""/Users/cnicolaou/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cnicolaou/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cnicolaou/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.7""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/cnicolaou/go-bug-report/bug/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1h/54rm9zd51ddcs0pt8j_l7d2m0000gn/T/go-build3841401253=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nNothing new! The code that encountered the problem has been in use since 2014/15.\r\n\r\nIt is my understanding that for the code snippet below, the initializeMe function will always\r\nbe called first and before any other initialization. This has been been the case prior to\r\ngo 1.17\r\n\r\n```go\r\npackage foo\r\n// no other code here.\r\nvar _ = initializeMe()\r\n// other code here, which really should not matter\r\n```\r\n\r\nHowever, with go 1.17, this behavior appears to have changed, and ```initializeMe``` is no longer\r\ncalled before other initialization and in my case is not called before initialization that depends\r\non it. I understand that there is no dependency analysis going on but there shouldn't need\r\nsince by my reading of the spec initializeMe should always be called first. I have attached\r\ncode snippets to repro the problem.\r\n\r\nThe code that seems to defeat the expected initialization involves an additional variable initialization\r\nvia an other package.\r\n\r\n```\r\nvar breaksIfThisExists = struct {\r\n        vals    []int\r\n} {\r\n        []int{indirect.GetVal(d)},\r\n}\r\n```\r\n\r\nwhere ```indirect.GetVal(d)``` calls a method on ```d``` whose implementation accesses a variable that\r\nis initialized by ```initializeMe```.\r\n\r\n### What did you expect to see?\r\n\r\nno panic.\r\n\r\n### What did you see instead?\r\na panic\r\n\r\n[bug.tar.gz](https://github.com/golang/go/files/7412516/bug.tar.gz)\r\n\r\n\r\n","go\r\npackage foo\r\n// no other code here.\r\nvar _ = initializeMe()\r\n// other code here, which really should not matter\r\n"
49126,"crypto/tls: support ECDHE key exchanges when ec_point_formats is missing in ClientHello extension<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nPer [rfc8422#section-5.1.2](https://datatracker.ietf.org/doc/html/rfc8422#section-5.1.2), \r\n\r\n> For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).  RFC 4492 specified that if this extension is missing, it means that only the uncompressed point format is supported, so interoperability with implementations that support the uncompressed format should work with or without the extension\r\n\r\nWe are seeing TLS handshake failure (client and server failed to agree on ECDHE_ECDSA key exchange algorithem) when `ec_point_formats` is missing because we expect it to be listed in [tls/handshake_server.go](https://github.com/golang/go/blob/dc00dc6c6bf3b5554e37f60799aec092276ff807/src/crypto/tls/handshake_server.go#L317-L323)\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nIf `ec_point_formats` is missing in ClientHello, we will allow ECDHE key exchanges because  `it means that only the uncompressed point format is supported`\r\n",NeedsInvestigation|FrozenDueToAge,FiloSottile,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nPer [rfc8422#section-5.1.2](https://datatracker.ietf.org/doc/html/rfc8422#section-5.1.2), \r\n\r\n> For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).  RFC 4492 specified that if this extension is missing, it means that only the uncompressed point format is supported, so interoperability with implementations that support the uncompressed format should work with or without the extension\r\n\r\nWe are seeing TLS handshake failure (client and server failed to agree on ECDHE_ECDSA key exchange algorithem) when `ec_point_formats` is missing because we expect it to be listed in [tls/handshake_server.go](https://github.com/golang/go/blob/dc00dc6c6bf3b5554e37f60799aec092276ff807/src/crypto/tls/handshake_server.go#L317-L323)\r\n\r\n```go\r\n// supportsECDHE returns whether ECDHE key exchanges can be used with this\r\n// pre-TLS 1.3 client.\r\nfunc supportsECDHE(c *Config, supportedCurves []CurveID, supportedPoints []uint8) bool {\r\n...\r\n\tsupportsPointFormat := false\r\n\tfor _, pointFormat := range supportedPoints {\r\n\t\tif pointFormat == pointFormatUncompressed {\r\n\t\t\tsupportsPointFormat = true\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn supportsCurve && supportsPointFormat\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nIf `ec_point_formats` is missing in ClientHello, we will allow ECDHE key exchanges because  `it means that only the uncompressed point format is supported`\r\n","go\r\n// supportsECDHE returns whether ECDHE key exchanges can be used with this\r\n// pre-TLS 1.3 client.\r\nfunc supportsECDHE(c *Config, supportedCurves []CurveID, supportedPoints []uint8) bool {\r\n...\r\n\tsupportsPointFormat := false\r\n\tfor _, pointFormat := range supportedPoints {\r\n\t\tif pointFormat == pointFormatUncompressed {\r\n\t\t\tsupportsPointFormat = true\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn supportsCurve && supportsPointFormat\r\n}\r\n"
49104,"x/tools/gopls: spurious errors reported with go1.17 and mage\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.17.2 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.3\r\n    golang.org/x/tools/gopls@v0.7.3 h1:Lru57ht8vtDMouRskFC085VAjBAZRAISd/lwvwOOV0Q=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210809222454-d867a43fc93e h1:WUoyKPm6nCo1BnNUvPGnFG3T5DUVem42yDJZZ4CNxMA=\r\n    golang.org/x/text@v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\r\n    golang.org/x/tools@v0.1.8-0.20211014194737-fc98fb2abd48 h1:hk7xRoeg0CG1nRLsd5BZLDUgVpA9bnKylGk1p2/BPH0=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.3.0 h1:59Olnbt67UKpxF1EwVBopJvkSUBmgtb468E4GVWIZ1I=\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.61.2\r\n6cba118ac49a1b88332f312a8f67186f7f3c1643\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- \r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n<details><summary>Settings</summary><br>\r\n   ""gopls"": {\r\n        ""buildFlags"": [\r\n            ""-tags=mage""\r\n        ]\r\n    },\r\n    ""go.testFlags"": [\r\n        ""-count=1""\r\n    ],\r\n    ""go-template.patterns"": [\r\n        ""*.tpl"",\r\n        ""*.go.tpl"",\r\n        ""**/*.tpl""\r\n    ],\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n</details>\r\n### Describe the bug\r\n\r\nBriefly, the problem is that vscode reports a slew of errors even though the code in the repo builds and runs with no errors or warnings from `mage`, `go vet` or `go build`.\r\n![vscodescreenshot](https://user-images.githubusercontent.com/6699301/138325524-17c7fd96-a5b3-4edb-9325-3df58671739b.png)\r\n\r\n\r\n\r\nThe problem appears to be that `vscode` (via `gopls`)  isn't honoring the `//go:build mage` directive in `mypkg/magefile.go`. \r\n\r\nThe complaints seems to originate because magefiles want to have `package main` specified. \r\n\r\nI can make the `vscode` complaints go away by changing that to `package mypkg`, but then mage is no longer able to run.\r\n\r\nI've used mage in this manner prior to the advent of `go1.17` in large projects requiring extensive code generation without getting vscode complaints.\r\n\r\n### Steps to reproduce the behavior:\r\nI've created a minimal example that reproduces the problem in a public repo.\r\n\r\n\r\n1. Observe list of errors in the `vscode` Problems tab.\r\n2. Open terminal and run `go vet`. Observe no problems reported.\r\n3. If you have [mage](https://magefile.org) installed, run `mage -v`\r\n4. Observe that the code builds and runs with output similar to the following:\r\n```\r\nexec: mage -v generate\r\nRunning target: Generate\r\nexec: go build\r\nexec: ./magegopls\r\nGenerated at 2021-10-21 13:23:28.031119 -0400 EDT m=+0.000218297\r\n```\r\n\r\n",NeedsInvestigation|FrozenDueToAge|gopls|Tools|gopls/metadata,findleyr,"\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.17.2 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.3\r\n    golang.org/x/tools/gopls@v0.7.3 h1:Lru57ht8vtDMouRskFC085VAjBAZRAISd/lwvwOOV0Q=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210809222454-d867a43fc93e h1:WUoyKPm6nCo1BnNUvPGnFG3T5DUVem42yDJZZ4CNxMA=\r\n    golang.org/x/text@v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\r\n    golang.org/x/tools@v0.1.8-0.20211014194737-fc98fb2abd48 h1:hk7xRoeg0CG1nRLsd5BZLDUgVpA9bnKylGk1p2/BPH0=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.3.0 h1:59Olnbt67UKpxF1EwVBopJvkSUBmgtb468E4GVWIZ1I=\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.61.2\r\n6cba118ac49a1b88332f312a8f67186f7f3c1643\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- \r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n<details><summary>Settings</summary><br>\r\n   ""gopls"": {\r\n        ""buildFlags"": [\r\n            ""-tags=mage""\r\n        ]\r\n    },\r\n    ""go.testFlags"": [\r\n        ""-count=1""\r\n    ],\r\n    ""go-template.patterns"": [\r\n        ""*.tpl"",\r\n        ""*.go.tpl"",\r\n        ""**/*.tpl""\r\n    ],\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n</details>\r\n### Describe the bug\r\n\r\nBriefly, the problem is that vscode reports a slew of errors even though the code in the repo builds and runs with no errors or warnings from `mage`, `go vet` or `go build`.\r\n![vscodescreenshot](https://user-images.githubusercontent.com/6699301/138325524-17c7fd96-a5b3-4edb-9325-3df58671739b.png)\r\n\r\n\r\n\r\nThe problem appears to be that `vscode` (via `gopls`)  isn't honoring the `//go:build mage` directive in `mypkg/magefile.go`. \r\n\r\nThe complaints seems to originate because magefiles want to have `package main` specified. \r\n\r\nI can make the `vscode` complaints go away by changing that to `package mypkg`, but then mage is no longer able to run.\r\n\r\nI've used mage in this manner prior to the advent of `go1.17` in large projects requiring extensive code generation without getting vscode complaints.\r\n\r\n### Steps to reproduce the behavior:\r\nI've created a minimal example that reproduces the problem in a public repo.\r\n```bash\r\ngit clone https://github.com/Michael-F-Ellis/magegopls\r\ncd magegopls\r\ncode .\r\n```\r\n\r\n1. Observe list of errors in the `vscode` Problems tab.\r\n2. Open terminal and run `go vet`. Observe no problems reported.\r\n3. If you have [mage](https://magefile.org) installed, run `mage -v`\r\n4. Observe that the code builds and runs with output similar to the following:\r\n```\r\nexec: mage -v generate\r\nRunning target: Generate\r\nexec: go build\r\nexec: ./magegopls\r\nGenerated at 2021-10-21 13:23:28.031119 -0400 EDT m=+0.000218297\r\n```\r\n\r\n",bash\r\ngit clone https://github.com/Michael-F-Ellis/magegopls\r\ncd magegopls\r\ncode .\r\n
48738,"x/tools/gopls: compute analysis facts for non-workspace packages### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go1.17 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.60.2\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t-\tgopkgs:\t/Users/{username}/go/bin/gopkgs: go1.17\r\n\t-\tgo-outline:\t/Users/{username}/go/bin/go-outline: go1.17\r\n\t-\tgotests:\t/Users/{username}/go/bin/gotests: go1.17\r\n\t-\tgomodifytags:\t/Users/{username}/go/bin/gomodifytags: go1.17\r\n\t-\timpl:\t/Users/{username}/go/bin/impl: go1.17\r\n\t-\tgoplay:\t/Users/{username}/go/bin/goplay: go1.17\r\n\t-\tdlv:\t/Users/{username}/go/bin/dlv: go1.17\r\n\t-\tdlv-dap:\t/Users/{username}/go/bin/dlv-dap: go1.17\r\n\t-\tgolint:\t/Users/{username}/go/bin/golint: go1.17\r\n\t-\tgopls:\t/Users/{username}/go/bin/gopls: go1.17\r\n \r\n\t\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```json\r\n{\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.lintTool"": ""golint"",\r\n    ""go.vetOnSave"": ""workspace""\r\n}\r\n```\r\n\r\n### Describe the bug\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then no error squiggles appear in the editor to show that there is a vet error.\r\n\r\n### Required behavior\r\n\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then error squiggles MUST appear in the editor to show that there is a vet error.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. given a go file `testvet.go` with the following code\r\n\r\n\r\n\r\n2. When I edit any text in this file that changes something, for example a space or comment\r\n3. Then the editor should highlight the same lines of code containing vet errors, that the command line `go vet ./...` picks up as having an error. \r\n```\r\npkg/testvet/testvet.go:14:13: call of printit copies lock value: sync.WaitGroup contains sync.noCopy\r\npkg/testvet/testvet.go:24:17: printit passes lock by value: sync.WaitGroup contains sync.noCopy\r\n```\r\n4. Manually running the command , Go:vet workspace does work and causes the editor to report the correct errors and squigglies. (see screenshot below)\r\n\r\n### Screenshots or recordings\r\n\r\nTo be clear, the screenshot below is the behaviour that we WANT to happen and be triggered on save, this is currently not happening and only happens when you manually run the command `Go;vet workspace`\r\n\r\n![Screenshot 2021-10-01 at 19 33 36](https://user-images.githubusercontent.com/1073487/135670971-bebc680d-6657-43f3-a1d5-af7cd6c141d9.png)\r\n\r\nIn addition to this functionality not working, the user interface helptext in VSCode settings does not make sense. The setting helptext has this text, which refers to functionality that I believe is not longer valid.\r\n\r\n![Screenshot 2021-10-01 at 19 45 06](https://user-images.githubusercontent.com/1073487/135671472-20f0c8ed-5e0b-480f-b73d-ad7fb7840aba.png)\r\n\r\nI have tried all variations of this setting value; both `package` and `workspace`. Neither works. ",FrozenDueToAge|gopls|Tools|gopls/performance|gopls/analysis,adonovan,"### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go1.17 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.60.2\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t-\tgopkgs:\t/Users/{username}/go/bin/gopkgs: go1.17\r\n\t-\tgo-outline:\t/Users/{username}/go/bin/go-outline: go1.17\r\n\t-\tgotests:\t/Users/{username}/go/bin/gotests: go1.17\r\n\t-\tgomodifytags:\t/Users/{username}/go/bin/gomodifytags: go1.17\r\n\t-\timpl:\t/Users/{username}/go/bin/impl: go1.17\r\n\t-\tgoplay:\t/Users/{username}/go/bin/goplay: go1.17\r\n\t-\tdlv:\t/Users/{username}/go/bin/dlv: go1.17\r\n\t-\tdlv-dap:\t/Users/{username}/go/bin/dlv-dap: go1.17\r\n\t-\tgolint:\t/Users/{username}/go/bin/golint: go1.17\r\n\t-\tgopls:\t/Users/{username}/go/bin/gopls: go1.17\r\n \r\n\t\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```json\r\n{\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.lintTool"": ""golint"",\r\n    ""go.vetOnSave"": ""workspace""\r\n}\r\n```\r\n\r\n### Describe the bug\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then no error squiggles appear in the editor to show that there is a vet error.\r\n\r\n### Required behavior\r\n\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then error squiggles MUST appear in the editor to show that there is a vet error.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. given a go file `testvet.go` with the following code\r\n\r\n```go\r\npackage testvet\r\n\r\nimport (\r\n\t""fmt""\r\n\t""sync""\r\n)\r\n\r\n// TestThatVetRunsOnSave minimal code to show vet not running on save in VS code\r\nfunc TestThatVetRunsOnSave() {\r\n\r\n\tch := make(chan string)\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo printit(wg, ch)\r\n\r\n\tch <- ""one""\r\n\tch <- ""two""\r\n\tclose(ch)\r\n\twg.Wait()\r\n\tfmt.Println(""done."")\r\n\r\n}\r\n\r\nfunc printit(wg sync.WaitGroup, ch chan string) {\r\n\tdefer wg.Done()\r\n\tfor t := range ch {\r\n\t\tfmt.Println(t)\r\n\t}\r\n}\r\n```\r\n\r\n2. When I edit any text in this file that changes something, for example a space or comment\r\n3. Then the editor should highlight the same lines of code containing vet errors, that the command line `go vet ./...` picks up as having an error. \r\n```\r\npkg/testvet/testvet.go:14:13: call of printit copies lock value: sync.WaitGroup contains sync.noCopy\r\npkg/testvet/testvet.go:24:17: printit passes lock by value: sync.WaitGroup contains sync.noCopy\r\n```\r\n4. Manually running the command , Go:vet workspace does work and causes the editor to report the correct errors and squigglies. (see screenshot below)\r\n\r\n### Screenshots or recordings\r\n\r\nTo be clear, the screenshot below is the behaviour that we WANT to happen and be triggered on save, this is currently not happening and only happens when you manually run the command `Go;vet workspace`\r\n\r\n![Screenshot 2021-10-01 at 19 33 36](https://user-images.githubusercontent.com/1073487/135670971-bebc680d-6657-43f3-a1d5-af7cd6c141d9.png)\r\n\r\nIn addition to this functionality not working, the user interface helptext in VSCode settings does not make sense. The setting helptext has this text, which refers to functionality that I believe is not longer valid.\r\n\r\n![Screenshot 2021-10-01 at 19 45 06](https://user-images.githubusercontent.com/1073487/135671472-20f0c8ed-5e0b-480f-b73d-ad7fb7840aba.png)\r\n\r\nI have tried all variations of this setting value; both `package` and `workspace`. Neither works. ","go\r\npackage testvet\r\n\r\nimport (\r\n\t""fmt""\r\n\t""sync""\r\n)\r\n\r\n// TestThatVetRunsOnSave minimal code to show vet not running on save in VS code\r\nfunc TestThatVetRunsOnSave() {\r\n\r\n\tch := make(chan string)\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo printit(wg, ch)\r\n\r\n\tch <- ""one""\r\n\tch <- ""two""\r\n\tclose(ch)\r\n\twg.Wait()\r\n\tfmt.Println(""done."")\r\n\r\n}\r\n\r\nfunc printit(wg sync.WaitGroup, ch chan string) {\r\n\tdefer wg.Done()\r\n\tfor t := range ch {\r\n\t\tfmt.Println(t)\r\n\t}\r\n}\r\n"
48606,"testing: fuzzed function can corrupt internal state of fuzzer<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/stevie/.cache/go-build""\r\nGOENV=""/home/stevie/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/stevie/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/stevie/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/stevie/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/stevie/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/stevie/code/corrupt/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1167654317=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nRan the following:\r\n\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nfuzz: minimizing 50-byte crash input...\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 745 (16223/sec), interesting: 2\r\n--- FAIL: FuzzCorrupt (0.05s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.052s\r\n$ cat testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f \r\ngo test fuzz v1\r\n[]byte(""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"")\r\n\r\n```\r\nThe ""crasher"" in the `testdata` directory does not cause a crash. \r\n\r\nRunning with minimization disabled also reveals an issue:\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt -fuzzminimizetime=0\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nFAIL\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 45 (1354/sec), interesting: 4\r\n--- FAIL: FuzzCorrupt (0.03s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 0 0 0 0 0 0 0 0 0 208 230 47 47 47 47 47 47 47 208 208 208 128 0 0]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.040s\r\n$ gotip test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nok  \tcorrupt\t0.003s\r\n$ cat testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f \r\ngo test fuzz v1\r\n[]byte(""\\v\\x01\\x00\\x00\\x00G\\xea\\x10\\x00\\x01\\v\\xba\\xd0\\xe6///////\\xd0\\xd0\u0400\\x00\\xe5"")\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCrashers stored in `testdata` should trigger crashes.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nCorpus entry was not a crasher.\r\n",NeedsDecision|FeatureRequest|fuzz,katiehockman,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/stevie/.cache/go-build""\r\nGOENV=""/home/stevie/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/stevie/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/stevie/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/stevie/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/stevie/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/stevie/code/corrupt/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1167654317=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nRan the following:\r\n```golang\r\npackage corrupt\r\n\r\nimport ""testing""\r\n\r\nfunc FuzzCorrupt(f *testing.F) {\r\n\tf.Fuzz(func(t *testing.T, input []byte) {\r\n\t\tdefer func() {\r\n\t\t\tfor i := range input {\r\n\t\t\t\tinput[i] = 0\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\tif len(input) >= 2 && input[0] == 0 && input[1] == 1 {\r\n\t\t\tt.Fatalf(""input %v"", input)\r\n\t\t}\r\n\r\n\t})\r\n}\r\n```\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nfuzz: minimizing 50-byte crash input...\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 745 (16223/sec), interesting: 2\r\n--- FAIL: FuzzCorrupt (0.05s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.052s\r\n$ cat testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f \r\ngo test fuzz v1\r\n[]byte(""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"")\r\n\r\n```\r\nThe ""crasher"" in the `testdata` directory does not cause a crash. \r\n\r\nRunning with minimization disabled also reveals an issue:\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt -fuzzminimizetime=0\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nFAIL\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 45 (1354/sec), interesting: 4\r\n--- FAIL: FuzzCorrupt (0.03s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 0 0 0 0 0 0 0 0 0 208 230 47 47 47 47 47 47 47 208 208 208 128 0 0]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.040s\r\n$ gotip test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nok  \tcorrupt\t0.003s\r\n$ cat testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f \r\ngo test fuzz v1\r\n[]byte(""\\v\\x01\\x00\\x00\\x00G\\xea\\x10\\x00\\x01\\v\\xba\\xd0\\xe6///////\\xd0\\xd0\u0400\\x00\\xe5"")\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCrashers stored in `testdata` should trigger crashes.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nCorpus entry was not a crasher.\r\n","golang\r\npackage corrupt\r\n\r\nimport ""testing""\r\n\r\nfunc FuzzCorrupt(f *testing.F) {\r\n\tf.Fuzz(func(t *testing.T, input []byte) {\r\n\t\tdefer func() {\r\n\t\t\tfor i := range input {\r\n\t\t\t\tinput[i] = 0\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\tif len(input) >= 2 && input[0] == 0 && input[1] == 1 {\r\n\t\t\tt.Fatalf(""input %v"", input)\r\n\t\t}\r\n\r\n\t})\r\n}\r\n"
48522,"proposal: spec: permit referring to a field shared by all elements of a type set<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n/tmp/golang-tip/bin/go version                                                                                                                      \r\ngo version devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, it is a generics issue, therefore tested with a recent tip only.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n<pre>\r\n</pre>\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE="""" \r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/me/.cache/go-build""\r\nGOENV=""/home/me/.config/go/env""            \r\nGOEXE=""""                                                                                                                                                                             GOEXPERIMENT=""""                                                                                                                                                                      GOFLAGS=""""                                                                                                                                                                           GOHOSTARCH=""amd64""                                                                                                                                                                   GOHOSTOS=""linux""                                                                                                                                                                     GOINSECURE=""""                                                                                                                                                                        GOMODCACHE=""/home/me/src/go/pkg/mod""                                                                                                                                           GONOPROXY=""k8s.io/*""\r\nGONOSUMDB=""""                                                                                                                                                                         GOOS=""linux""                                                                                                                                                                         GOPATH=""/home/me/src/go""                                                                                                                                                       GOPRIVATE=""""                                                                                                                                                                         GOPROXY=""""                                                                                                                                 \r\nGOROOT=""/tmp/golang-tip""                                                                                                                                                             GOSUMDB=""off""                                                                                                                                                                        GOTMPDIR=""""                                                                                                                                                                          GOTOOLDIR=""/tmp/golang-tip/pkg/tool/linux_amd64""                                                                                                                                     GOVCS=""""                                                                                                                                                                             GOVERSION=""devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000""                                                                                                                   GCCGO=""gccgo"" \r\nGOAMD64=""v1""                                                                                                                                                                         AR=""ar""                                                                                                                                                                              \r\nCC=""gcc""                                                                                                                                                                             CXX=""g++""                                                                                                                                                                            CGO_ENABLED=""1""                                                                                                                                                                      GOMOD=""/home/me/src/gocrtp/go.mod""                                                                                                                                             CGO_CFLAGS=""-g -O2""                                                                                                                                                                  CGO_CPPFLAGS=""""                                                                                                                                                                      CGO_CXXFLAGS=""-g -O2""                                                                                                                                                                CGO_FFLAGS=""-g -O2""                                                                                                                                                                  CGO_LDFLAGS=""-g -O2""                                                                                                                                                                 PKG_CONFIG=""pkg-config""                                                                                                                                                              GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1474680903=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile this  program (crtp.go) with generics: \r\n\r\nwith `tmp/golang-tip/bin/go build`\r\n\r\n### What did you expect to see?\r\nProgram compiles, runs and outputs `X: 1 2 4`\r\n\r\n### What did you see instead?\r\n`./crtp.go:19:11: p.X undefined (type bound for P has no method X)`\r\n\r\nAll three structs in the type bound have an identical X /field/, so I think this is wrong. Of course there is no method but I don't think that matters here. I feel I should be able to use the public field X of p since p can only be one of the three Point, Rect, or Elli.",Proposal|generics,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n/tmp/golang-tip/bin/go version                                                                                                                      \r\ngo version devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, it is a generics issue, therefore tested with a recent tip only.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n<pre>\r\n</pre>\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE="""" \r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/me/.cache/go-build""\r\nGOENV=""/home/me/.config/go/env""            \r\nGOEXE=""""                                                                                                                                                                             GOEXPERIMENT=""""                                                                                                                                                                      GOFLAGS=""""                                                                                                                                                                           GOHOSTARCH=""amd64""                                                                                                                                                                   GOHOSTOS=""linux""                                                                                                                                                                     GOINSECURE=""""                                                                                                                                                                        GOMODCACHE=""/home/me/src/go/pkg/mod""                                                                                                                                           GONOPROXY=""k8s.io/*""\r\nGONOSUMDB=""""                                                                                                                                                                         GOOS=""linux""                                                                                                                                                                         GOPATH=""/home/me/src/go""                                                                                                                                                       GOPRIVATE=""""                                                                                                                                                                         GOPROXY=""""                                                                                                                                 \r\nGOROOT=""/tmp/golang-tip""                                                                                                                                                             GOSUMDB=""off""                                                                                                                                                                        GOTMPDIR=""""                                                                                                                                                                          GOTOOLDIR=""/tmp/golang-tip/pkg/tool/linux_amd64""                                                                                                                                     GOVCS=""""                                                                                                                                                                             GOVERSION=""devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000""                                                                                                                   GCCGO=""gccgo"" \r\nGOAMD64=""v1""                                                                                                                                                                         AR=""ar""                                                                                                                                                                              \r\nCC=""gcc""                                                                                                                                                                             CXX=""g++""                                                                                                                                                                            CGO_ENABLED=""1""                                                                                                                                                                      GOMOD=""/home/me/src/gocrtp/go.mod""                                                                                                                                             CGO_CFLAGS=""-g -O2""                                                                                                                                                                  CGO_CPPFLAGS=""""                                                                                                                                                                      CGO_CXXFLAGS=""-g -O2""                                                                                                                                                                CGO_FFLAGS=""-g -O2""                                                                                                                                                                  CGO_LDFLAGS=""-g -O2""                                                                                                                                                                 PKG_CONFIG=""pkg-config""                                                                                                                                                              GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1474680903=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile this  program (crtp.go) with generics: \r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype Point struct {\r\n\tX, Y int\r\n}\r\n\r\ntype Rect struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\ntype Elli struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\nfunc GetX[P interface { Point | Rect | Elli }] (p P) int {\r\n\treturn p.X\r\n}\r\n\r\nfunc main() {\r\n\tp := Point { 1, 2}\r\n\tr := Rect {2, 3, 7, 8}\r\n\te := Elli {4, 5, 9, 10}\r\n\tfmt.Printf(""X: %d %d %d\\n"", GetX(p), GetX(r), GetX(e))\r\n}\r\n```\r\nwith `tmp/golang-tip/bin/go build`\r\n\r\n### What did you expect to see?\r\nProgram compiles, runs and outputs `X: 1 2 4`\r\n\r\n### What did you see instead?\r\n`./crtp.go:19:11: p.X undefined (type bound for P has no method X)`\r\n\r\nAll three structs in the type bound have an identical X /field/, so I think this is wrong. Of course there is no method but I don't think that matters here. I feel I should be able to use the public field X of p since p can only be one of the three Point, Rect, or Elli.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype Point struct {\r\n\tX, Y int\r\n}\r\n\r\ntype Rect struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\ntype Elli struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\nfunc GetX[P interface { Point | Rect | Elli }] (p P) int {\r\n\treturn p.X\r\n}\r\n\r\nfunc main() {\r\n\tp := Point { 1, 2}\r\n\tr := Rect {2, 3, 7, 8}\r\n\te := Elli {4, 5, 9, 10}\r\n\tfmt.Printf(""X: %d %d %d\\n"", GetX(p), GetX(r), GetX(e))\r\n}\r\n"
48295,"go/types, types2: error messages don't distinguish between different types with the same names\r\nproduces:\r\n```\r\nx.go:8:12: incompatible type: cannot use GlobalT(0) (constant 0 of type T) as T value\r\n```\r\nThe error message reports the same type (`T`) for the variable and the constant, which is confusing.\r\n\r\nMaybe we can detect cases like these and provide additional information, such as where the types are declared.\r\n\r\nNot urgent as this is a rare scenario.",NeedsInvestigation,griesemer,"```Go\r\npackage p\r\n\r\ntype T int\r\n\r\nfunc _() {\r\n\ttype GlobalT = T\r\n\ttype T int\r\n\tvar _ T = GlobalT(0)\r\n}\r\n```\r\nproduces:\r\n```\r\nx.go:8:12: incompatible type: cannot use GlobalT(0) (constant 0 of type T) as T value\r\n```\r\nThe error message reports the same type (`T`) for the variable and the constant, which is confusing.\r\n\r\nMaybe we can detect cases like these and provide additional information, such as where the types are declared.\r\n\r\nNot urgent as this is a rare scenario.",Go\r\npackage p\r\n\r\ntype T int\r\n\r\nfunc _() {\r\n\ttype GlobalT = T\r\n\ttype T int\r\n\tvar _ T = GlobalT(0)\r\n}\r\n
47938,"x/tools/go/analysis/passes/nilness: false negative with pointers and type assertionsCurrently, as of `golang.org/x/tools v0.1.6-0.20210820212750-d4cc65f0b2ff` and `go1.17`, `nilness` doesn't mark the following code as invalid despite `tt` being provably nil:\r\n\r\n\r\n\r\nIf `ok` is false then `tt` is nil, since that is the default value for pointers.\r\n\r\nPlayground: https://play.golang.org/p/0ni1nXpLBFK.",NeedsDecision|Tools|Analysis,adonovan,"Currently, as of `golang.org/x/tools v0.1.6-0.20210820212750-d4cc65f0b2ff` and `go1.17`, `nilness` doesn't mark the following code as invalid despite `tt` being provably nil:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype T struct {\r\n\ta int\r\n}\r\n\r\nfunc main() {\r\n\tn := 0\r\n\tvar v interface{} = &n\r\n\r\n\ttt, ok := v.(*T)\r\n\tif ok {\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(tt.a)\r\n}\r\n```\r\n\r\nIf `ok` is false then `tt` is nil, since that is the default value for pointers.\r\n\r\nPlayground: https://play.golang.org/p/0ni1nXpLBFK.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype T struct {\r\n\ta int\r\n}\r\n\r\nfunc main() {\r\n\tn := 0\r\n\tvar v interface{} = &n\r\n\r\n\ttt, ok := v.(*T)\r\n\tif ok {\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(tt.a)\r\n}\r\n"
47672,"crypto/tls: TLS connections use small buffer size that results in small syscalls and ignore HTTP client transport buffer sizes### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n`go1.16 darwin/amd6`\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nCOMP12013:dd-go richard.artoul$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/richard.artoul/Library/Caches/go-build""\r\nGOENV=""/Users/richard.artoul/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/richard.artoul/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/richard.artoul/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.15/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.15/libexec/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/t2/02qzh_vs4cn57ctvc7dwcsc80000gn/T/go-build075316343=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n</pre></details>\r\n\r\n### What did you do?\r\nI'm using this library: https://github.com/google/go-cloud to read files from S3 in a streaming fashion.\r\n\r\nI noticed that a lot of time was being spent in syscalls:\r\n![Screen Shot 2021-08-12 at 2 48 00 PM](https://user-images.githubusercontent.com/9171254/129263129-4a091d74-2eb0-4b48-8a8f-b7fb559c5b97.png)\r\n\r\n\r\nI was aware of this issue: https://github.com/golang/go/issues/22618\r\n\r\nSo I tuned my http client read/write buffer transport sizes to be 256kib instead of 64kib but this had no impact on time spent in syscalls which made me suspicious that somehow the way the reads were being performed that reads were not actually being buffered as I expected.\r\n\r\nI wrote a small program to download a file from S3 in a streaming fashion using large 1mib reads, like this:\r\n\r\n\r\n\r\nI couldn't get dtrace to work properly on OS X, but luckily my application uses a custom dialer for setting write/read deadlines on every socket read so I was able to instrument the actual socket read sizes like this:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nLarge syscall reads (in the range of 256KiB)\r\n\r\n### What did you see instead?\r\n\r\nExtremely small sys call reads:\r\n\r\n```\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nread size 28361\r\nread size 26929\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 5449\r\nn: 1024\r\nread size 56415\r\nread size 47823\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 23479\r\n```\r\n\r\n### What did you do after?\r\n\r\nI made a small change in `tls.go` to instantiate the TLS client with a much larger `rawInput` buffer:\r\n\r\n\r\n\r\nAs expected I began to observe much larger syscall reads:\r\n\r\n```\r\nread size 1034019\r\nread size 1024035\r\nread size 1022603\r\nread size 1003987\r\nread size 993963\r\nread size 991099\r\nread size 985371\r\nread size 982507\r\nread size 981075\r\nread size 965323\r\nread size 963891\r\nread size 955299\r\nread size 945275\r\nread size 935251\r\n```\r\n\r\nI haven't tried deploying my fork to production, and measuring performance on my laptop is not interesting since I have a terrible connection to S3, but I think its well understood that a 10x increase in syscalls (especially with such a small read size of 64kib) has a dramatic impact on performance.\r\n\r\n### Proposal\r\n\r\nI'm not 100% sure what the best approach is here, but I think we should do something since this issue means that streaming large amounts of data over TLS is much more CPU intensive than it needs to be which is a big deal for applications that process large volumes of data over the network like distributed databases.\r\n\r\nThe `tls` package already has a `Config` struct. It seems like it would be straightforward to add buffer size configuration there like has already been done for the HTTP transport. In addition, it seems reasonable that the HTTP client transport buffer sizes should be automatically propagated as the values for the TLS buffer size if the user doesn't specify a specific override.\r\n\r\n",NeedsInvestigation,rolandshoemaker,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n`go1.16 darwin/amd6`\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nCOMP12013:dd-go richard.artoul$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/richard.artoul/Library/Caches/go-build""\r\nGOENV=""/Users/richard.artoul/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/richard.artoul/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/richard.artoul/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.15/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.15/libexec/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/t2/02qzh_vs4cn57ctvc7dwcsc80000gn/T/go-build075316343=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n</pre></details>\r\n\r\n### What did you do?\r\nI'm using this library: https://github.com/google/go-cloud to read files from S3 in a streaming fashion.\r\n\r\nI noticed that a lot of time was being spent in syscalls:\r\n![Screen Shot 2021-08-12 at 2 48 00 PM](https://user-images.githubusercontent.com/9171254/129263129-4a091d74-2eb0-4b48-8a8f-b7fb559c5b97.png)\r\n\r\n\r\nI was aware of this issue: https://github.com/golang/go/issues/22618\r\n\r\nSo I tuned my http client read/write buffer transport sizes to be 256kib instead of 64kib but this had no impact on time spent in syscalls which made me suspicious that somehow the way the reads were being performed that reads were not actually being buffered as I expected.\r\n\r\nI wrote a small program to download a file from S3 in a streaming fashion using large 1mib reads, like this:\r\n\r\n```golang\r\nstream, err := store.GetStream(ctx, *bucket, *path)\r\nif err != nil {\r\n    log.Fatalf(""error getting: %s, err: %v"", *path, err)\r\n}\r\ndefer stream.Close()\r\n\r\nbuf := make([]byte, 1<<20)\r\n    for {\r\n        n, err := bufio.NewReaderSize(stream, 1<<20).Read(buf)\r\n        if err == io.EOF {\r\n            break\r\n        }\r\n        if err != nil {\r\n            log.Fatal(err)\r\n        }\r\n\tfmt.Println(""n:"", n)\r\n}\r\n```\r\n\r\nI couldn't get dtrace to work properly on OS X, but luckily my application uses a custom dialer for setting write/read deadlines on every socket read so I was able to instrument the actual socket read sizes like this:\r\n\r\n```golang\r\nfunc (d *deadlineConn) Read(p []byte) (int, error) {\r\n\td.Conn.SetReadDeadline(time.Now().Add(d.readDeadline))\r\n\tfmt.Println(""read size"", len(p))\r\n\tn, err := d.Conn.Read(p)\r\n\terr = maybeWrapErr(err)\r\n\treturn n, err\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nLarge syscall reads (in the range of 256KiB)\r\n\r\n### What did you see instead?\r\n\r\nExtremely small sys call reads:\r\n\r\n```\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nread size 28361\r\nread size 26929\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 5449\r\nn: 1024\r\nread size 56415\r\nread size 47823\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 23479\r\n```\r\n\r\n### What did you do after?\r\n\r\nI made a small change in `tls.go` to instantiate the TLS client with a much larger `rawInput` buffer:\r\n\r\n```golang\r\n// Client returns a new TLS client side connection\r\n// using conn as the underlying transport.\r\n// The config cannot be nil: users must set either ServerName or\r\n// InsecureSkipVerify in the config.\r\nfunc Client(conn net.Conn, config *Config) *Conn {\r\n\tc := &Conn{\r\n\t\trawInput: *bytes.NewBuffer(make([]byte, 0, 1<<20)),\r\n\t\tconn:     conn,\r\n\t\tconfig:   config,\r\n\t\tisClient: true,\r\n\t}\r\n\tc.handshakeFn = c.clientHandshake\r\n\treturn c\r\n}\r\n```\r\n\r\nAs expected I began to observe much larger syscall reads:\r\n\r\n```\r\nread size 1034019\r\nread size 1024035\r\nread size 1022603\r\nread size 1003987\r\nread size 993963\r\nread size 991099\r\nread size 985371\r\nread size 982507\r\nread size 981075\r\nread size 965323\r\nread size 963891\r\nread size 955299\r\nread size 945275\r\nread size 935251\r\n```\r\n\r\nI haven't tried deploying my fork to production, and measuring performance on my laptop is not interesting since I have a terrible connection to S3, but I think its well understood that a 10x increase in syscalls (especially with such a small read size of 64kib) has a dramatic impact on performance.\r\n\r\n### Proposal\r\n\r\nI'm not 100% sure what the best approach is here, but I think we should do something since this issue means that streaming large amounts of data over TLS is much more CPU intensive than it needs to be which is a big deal for applications that process large volumes of data over the network like distributed databases.\r\n\r\nThe `tls` package already has a `Config` struct. It seems like it would be straightforward to add buffer size configuration there like has already been done for the HTTP transport. In addition, it seems reasonable that the HTTP client transport buffer sizes should be automatically propagated as the values for the TLS buffer size if the user doesn't specify a specific override.\r\n\r\n","golang\r\nstream, err := store.GetStream(ctx, *bucket, *path)\r\nif err != nil {\r\n    log.Fatalf(""error getting: %s, err: %v"", *path, err)\r\n}\r\ndefer stream.Close()\r\n\r\nbuf := make([]byte, 1<<20)\r\n    for {\r\n        n, err := bufio.NewReaderSize(stream, 1<<20).Read(buf)\r\n        if err == io.EOF {\r\n            break\r\n        }\r\n        if err != nil {\r\n            log.Fatal(err)\r\n        }\r\n\tfmt.Println(""n:"", n)\r\n}\r\n"
47656,"runtime: scavenger not freeing all possible memory on darwinThis is effectively a follow-up to #29844. I am attempting to reduce our memory usage on iOS, where we are severely memory-constrained.\r\n\r\nOn darwin, `sysUnused` calls `madvise(v, n, _MADV_FREE_REUSABLE)`. This marks the pages as reclaimable by the OS. However, unexpectedly, it does not mark _all_ the pages as reclaimable. I do not understand why, but here's a way to reproduce it.\r\n\r\nThe following program makes and then frees a single large byte slice. It pauses three times: before the allocation, after the allocation, and after the allocation has been freed.\r\n\r\n\r\n\r\nRunning this on macOS, I use `footprint` to measure the app's footprint and `vmmap` to get the memory usage details, at each pause point. Concretely, I run `go build -o jjj x.go && GODEBUG=allocfreetrace=1 ./jjj` to run it and `footprint jjj && vmmap -pages -interleaved -submap jjj` to measure it.\r\n\r\nBefore the alloc, for the Go heap, `footprint` reports:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5344 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n4192 KB        0 B      1344 KB         40    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nNote that 4192KB-1344KB=2848KB, which is considerably higher than the 1168KB we began with.\r\n\r\n(The exact numbers vary slightly from run to run.)\r\n\r\n\r\nWe can get a glimpse into the details of the accounting using `vmmap` (with flags listed above). For the Go heap, before the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      200      200        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      202      202        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nThis lines up with what tracealloc said:\r\n\r\n```\r\ntracealloc(0x14000180000, 0x3d2000, uint8)\r\n```\r\n\r\nand then\r\n\r\n```\r\ntracefree(0x14000180000, 0x3d2000)\r\n```\r\n\r\nThe large byte slice spans the 14000000000-14000400000 and the 14000400000-14000800000 regions. However, the free appears only to have marked the pages in the 14000400000-14000800000 region as reclaimable. (84 pages = 1344KB, which is exactly what `footprint` reported as reclaimable.) The pages in the 14000000000-14000400000 region are still marked as dirty.\r\n\r\n\r\nAs an experiment, I changed `sysUnused` to also call `mprotect(v, n, _PROT_NONE)` then `mprotect(v, n, _PROT_READ|_PROT_WRITE)`. See https://github.com/tailscale/go/commit/38ab03e1b4bd0699759860fb9235ae382470b623.\r\n\r\nRunning again with this change, the unreclaimable space reported by `footprint` disappears. At the three pause points:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         37    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5328 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1584 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nWe're not back down to 1168KB (I wish I knew why), but it's considerably better than 2848KB. `vmmap` shows more or less the same pattern as before:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      188      188       12   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      197      197        5   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n(Note that if you add the dirty and swapped pages together in the `mprotect` run, they match the `madvise` run dirty pages count exactly.)\r\n\r\nI don't know how to interpret all of this. But it looks a bit like `madvise(v, n, _MADV_FREE_REUSABLE)` isn't sufficient to fully return memory to the OS, perhaps because of something having to do with allocation regions.\r\n\r\nI'm out of ideas for what/how to investigate from here, but I'm happy to follow up on suggestions.\r\n\r\ncc @mknyszek @bradfitz @randall77 \r\n",NeedsInvestigation|compiler/runtime,mknyszek,"This is effectively a follow-up to #29844. I am attempting to reduce our memory usage on iOS, where we are severely memory-constrained.\r\n\r\nOn darwin, `sysUnused` calls `madvise(v, n, _MADV_FREE_REUSABLE)`. This marks the pages as reclaimable by the OS. However, unexpectedly, it does not mark _all_ the pages as reclaimable. I do not understand why, but here's a way to reproduce it.\r\n\r\nThe following program makes and then frees a single large byte slice. It pauses three times: before the allocation, after the allocation, and after the allocation has been freed.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""runtime/debug""\r\n\t""time""\r\n)\r\n\r\nvar b []byte\r\n\r\nfunc main() {\r\n\t// Call time.Sleep and debug.FreeOSMemory once up front,\r\n\t// so that all basic runtime structures get set up\r\n\t// and all relevant pages get dirtied.\r\n\ttime.Sleep(time.Millisecond)\r\n\tdebug.FreeOSMemory()\r\n\tprintln(""start"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = make([]byte, 4_000_000)\r\n\tfor i := range b {\r\n\t\tb[i] = 1\r\n\t}\r\n\tprintln(""allocated"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = nil\r\n\tdebug.FreeOSMemory()\r\n\ttime.Sleep(3 * time.Second) // wait for the scavenger's effects to be visible\r\n\tprintln(""freed"")\r\n\ttime.Sleep(3 * time.Hour)\r\n}\r\n```\r\n\r\nRunning this on macOS, I use `footprint` to measure the app's footprint and `vmmap` to get the memory usage details, at each pause point. Concretely, I run `go build -o jjj x.go && GODEBUG=allocfreetrace=1 ./jjj` to run it and `footprint jjj && vmmap -pages -interleaved -submap jjj` to measure it.\r\n\r\nBefore the alloc, for the Go heap, `footprint` reports:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5344 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n4192 KB        0 B      1344 KB         40    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nNote that 4192KB-1344KB=2848KB, which is considerably higher than the 1168KB we began with.\r\n\r\n(The exact numbers vary slightly from run to run.)\r\n\r\n\r\nWe can get a glimpse into the details of the accounting using `vmmap` (with flags listed above). For the Go heap, before the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      200      200        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      202      202        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nThis lines up with what tracealloc said:\r\n\r\n```\r\ntracealloc(0x14000180000, 0x3d2000, uint8)\r\n```\r\n\r\nand then\r\n\r\n```\r\ntracefree(0x14000180000, 0x3d2000)\r\n```\r\n\r\nThe large byte slice spans the 14000000000-14000400000 and the 14000400000-14000800000 regions. However, the free appears only to have marked the pages in the 14000400000-14000800000 region as reclaimable. (84 pages = 1344KB, which is exactly what `footprint` reported as reclaimable.) The pages in the 14000000000-14000400000 region are still marked as dirty.\r\n\r\n\r\nAs an experiment, I changed `sysUnused` to also call `mprotect(v, n, _PROT_NONE)` then `mprotect(v, n, _PROT_READ|_PROT_WRITE)`. See https://github.com/tailscale/go/commit/38ab03e1b4bd0699759860fb9235ae382470b623.\r\n\r\nRunning again with this change, the unreclaimable space reported by `footprint` disappears. At the three pause points:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         37    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5328 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1584 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nWe're not back down to 1168KB (I wish I knew why), but it's considerably better than 2848KB. `vmmap` shows more or less the same pattern as before:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      188      188       12   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      197      197        5   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n(Note that if you add the dirty and swapped pages together in the `mprotect` run, they match the `madvise` run dirty pages count exactly.)\r\n\r\nI don't know how to interpret all of this. But it looks a bit like `madvise(v, n, _MADV_FREE_REUSABLE)` isn't sufficient to fully return memory to the OS, perhaps because of something having to do with allocation regions.\r\n\r\nI'm out of ideas for what/how to investigate from here, but I'm happy to follow up on suggestions.\r\n\r\ncc @mknyszek @bradfitz @randall77 \r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""runtime/debug""\r\n\t""time""\r\n)\r\n\r\nvar b []byte\r\n\r\nfunc main() {\r\n\t// Call time.Sleep and debug.FreeOSMemory once up front,\r\n\t// so that all basic runtime structures get set up\r\n\t// and all relevant pages get dirtied.\r\n\ttime.Sleep(time.Millisecond)\r\n\tdebug.FreeOSMemory()\r\n\tprintln(""start"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = make([]byte, 4_000_000)\r\n\tfor i := range b {\r\n\t\tb[i] = 1\r\n\t}\r\n\tprintln(""allocated"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = nil\r\n\tdebug.FreeOSMemory()\r\n\ttime.Sleep(3 * time.Second) // wait for the scavenger's effects to be visible\r\n\tprintln(""freed"")\r\n\ttime.Sleep(3 * time.Hour)\r\n}\r\n"
47538,"x/tools/gopls: error loading workspace when go.mod is directly updated to include a new dependency### What version of Go/Gopls are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.16.6\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.7.1\r\n    golang.org/x/tools/gopls@v0.7.1 h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\r\n    golang.org/x/tools@v0.1.6-0.20210802203754-9b21a8868e16 h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nmac\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Ran `go clean -modcache` to empty the module cache. (clean state)\r\n* Cloned vscode-go repo.\r\n* Opened vscode and waited until the initial workspace loading is complete.\r\n* Cherry-picked a gerrit cl that adds a new dependency to go.mod\r\n```\r\n   git fetch https://go.googlesource.com/vscode-go refs/changes/95/337495/3 && git cherry-pick FETCH_HEAD\r\n```  \r\n\r\n### What did you expect to see?\r\n\r\nThe new dependency is picked up automatically.\r\nOr gopls sends diagnostics with code actions or codelens that downloads the new dependency.\r\n\r\n### What did you see instead?\r\n\r\nStuck in workspace loading, without any action or helpful info to address the issue.\r\n\r\nI found multiple ways to get out of this broken state, and would be nice if gopls suggests one of them or other:\r\n - Restart gopls so the initial workspace loading downloads necessary dependency, or\r\n - Run `go mod tidy`  or\r\n - Run `go get` ...\r\n\r\nThe following is the gopls log - \r\n<details><summary>gopls log</summary>\r\n<pre>\r\n[Trace - 18:53:14.115 PM] Sending request 'initialize - (0)'.\r\nParams: {""processId"":6803,""clientInfo"":{""name"":""Visual Studio Code - Insiders"",""version"":""1.59.0-insider""},""locale"":""en-us"",""rootPath"":""/Users/hakim/projects/google/vscode-go"",""rootUri"":""file:///Users/hakim/projects/google/vscode-go"",""capabilities"":{""workspace"":{""applyEdit"":true,""workspaceEdit"":{""documentChanges"":true,""resourceOperations"":[""create"",""rename"",""delete""],""failureHandling"":""textOnlyTransactional"",""normalizesLineEndings"":true,""changeAnnotationSupport"":{""groupsOnLabel"":true}},""didChangeConfiguration"":{""dynamicRegistration"":true},""didChangeWatchedFiles"":{""dynamicRegistration"":true},""symbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""tagSupport"":{""valueSet"":[1]}},""codeLens"":{""refreshSupport"":true},""executeCommand"":{""dynamicRegistration"":true},""configuration"":true,""workspaceFolders"":true,""semanticTokens"":{""refreshSupport"":true},""fileOperations"":{""dynamicRegistration"":true,""didCreate"":true,""didRename"":true,""didDelete"":true,""willCreate"":true,""willRename"":true,""willDelete"":true}},""textDocument"":{""publishDiagnostics"":{""relatedInformation"":true,""versionSupport"":false,""tagSupport"":{""valueSet"":[1,2]},""codeDescriptionSupport"":true,""dataSupport"":true},""synchronization"":{""dynamicRegistration"":true,""willSave"":true,""willSaveWaitUntil"":true,""didSave"":true},""completion"":{""dynamicRegistration"":true,""contextSupport"":true,""completionItem"":{""snippetSupport"":true,""commitCharactersSupport"":true,""documentationFormat"":[""markdown"",""plaintext""],""deprecatedSupport"":true,""preselectSupport"":true,""tagSupport"":{""valueSet"":[1]},""insertReplaceSupport"":true,""resolveSupport"":{""properties"":[""documentation"",""detail"",""additionalTextEdits""]},""insertTextModeSupport"":{""valueSet"":[1,2]}},""completionItemKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},""hover"":{""dynamicRegistration"":true,""contentFormat"":[""markdown"",""plaintext""]},""signatureHelp"":{""dynamicRegistration"":true,""signatureInformation"":{""documentationFormat"":[""markdown"",""plaintext""],""parameterInformation"":{""labelOffsetSupport"":true},""activeParameterSupport"":true},""contextSupport"":true},""definition"":{""dynamicRegistration"":true,""linkSupport"":true},""references"":{""dynamicRegistration"":true},""documentHighlight"":{""dynamicRegistration"":true},""documentSymbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""hierarchicalDocumentSymbolSupport"":true,""tagSupport"":{""valueSet"":[1]},""labelSupport"":true},""codeAction"":{""dynamicRegistration"":true,""isPreferredSupport"":true,""disabledSupport"":true,""dataSupport"":true,""resolveSupport"":{""properties"":[""edit""]},""codeActionLiteralSupport"":{""codeActionKind"":{""valueSet"":["""",""quickfix"",""refactor"",""refactor.extract"",""refactor.inline"",""refactor.rewrite"",""source"",""source.organizeImports""]}},""honorsChangeAnnotations"":false},""codeLens"":{""dynamicRegistration"":true},""formatting"":{""dynamicRegistration"":true},""rangeFormatting"":{""dynamicRegistration"":true},""onTypeFormatting"":{""dynamicRegistration"":true},""rename"":{""dynamicRegistration"":true,""prepareSupport"":true,""prepareSupportDefaultBehavior"":1,""honorsChangeAnnotations"":true},""documentLink"":{""dynamicRegistration"":true,""tooltipSupport"":true},""typeDefinition"":{""dynamicRegistration"":true,""linkSupport"":true},""implementation"":{""dynamicRegistration"":true,""linkSupport"":true},""colorProvider"":{""dynamicRegistration"":true},""foldingRange"":{""dynamicRegistration"":true,""rangeLimit"":5000,""lineFoldingOnly"":true},""declaration"":{""dynamicRegistration"":true,""linkSupport"":true},""selectionRange"":{""dynamicRegistration"":true},""callHierarchy"":{""dynamicRegistration"":true},""semanticTokens"":{""dynamicRegistration"":true,""tokenTypes"":[""namespace"",""type"",""class"",""enum"",""interface"",""struct"",""typeParameter"",""parameter"",""variable"",""property"",""enumMember"",""event"",""function"",""method"",""macro"",""keyword"",""modifier"",""comment"",""string"",""number"",""regexp"",""operator""],""tokenModifiers"":[""declaration"",""definition"",""readonly"",""static"",""deprecated"",""abstract"",""async"",""modification"",""documentation"",""defaultLibrary""],""formats"":[""relative""],""requests"":{""range"":true,""full"":{""delta"":true}},""multilineTokenSupport"":false,""overlappingTokenSupport"":false},""linkedEditingRange"":{""dynamicRegistration"":true}},""window"":{""showMessage"":{""messageActionItem"":{""additionalPropertiesSupport"":true}},""showDocument"":{""support"":true},""workDoneProgress"":true},""general"":{""regularExpressions"":{""engine"":""ECMAScript"",""version"":""ES2020""},""markdown"":{""parser"":""marked"",""version"":""1.1.0""}}},""initializationOptions"":{""verboseOutput"":true},""trace"":""verbose"",""workspaceFolders"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go"",""name"":""vscode-go""}]}\r\n\r\n\r\n[Trace - 18:53:14.117 PM] Received response 'initialize - (0)' in 2ms.\r\nResult: {""capabilities"":{""textDocumentSync"":{""openClose"":true,""change"":2,""save"":{}},""completionProvider"":{""triggerCharacters"":["".""],""completionItem"":{}},""hoverProvider"":true,""signatureHelpProvider"":{""triggerCharacters"":[""("","",""]},""definitionProvider"":true,""typeDefinitionProvider"":true,""implementationProvider"":true,""referencesProvider"":true,""documentHighlightProvider"":true,""documentSymbolProvider"":true,""codeActionProvider"":{""codeActionKinds"":[""quickfix"",""refactor.extract"",""refactor.rewrite"",""source.fixAll"",""source.organizeImports""]},""codeLensProvider"":{},""documentLinkProvider"":{},""workspaceSymbolProvider"":true,""documentFormattingProvider"":true,""documentOnTypeFormattingProvider"":{""firstTriggerCharacter"":""""},""renameProvider"":{""prepareProvider"":true},""foldingRangeProvider"":true,""executeCommandProvider"":{""commands"":[""gopls.add_dependency"",""gopls.add_import"",""gopls.apply_fix"",""gopls.check_upgrades"",""gopls.gc_details"",""gopls.generate"",""gopls.generate_gopls_mod"",""gopls.go_get_package"",""gopls.list_known_packages"",""gopls.regenerate_cgo"",""gopls.remove_dependency"",""gopls.run_tests"",""gopls.start_debugging"",""gopls.test"",""gopls.tidy"",""gopls.toggle_gc_details"",""gopls.update_go_sum"",""gopls.upgrade_dependency"",""gopls.vendor"",""gopls.workspace_metadata""]},""callHierarchyProvider"":true,""workspace"":{""workspaceFolders"":{""supported"":true,""changeNotifications"":""workspace/didChangeWorkspaceFolders""}}},""serverInfo"":{""name"":""gopls"",""version"":""{\\""path\\"":\\""golang.org/x/tools/gopls\\"",\\""version\\"":\\""v0.7.1\\"",\\""sum\\"":\\""h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\\"",\\""deps\\"":[{\\""path\\"":\\""github.com/BurntSushi/toml\\"",\\""version\\"":\\""v0.3.1\\"",\\""sum\\"":\\""h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\\""},{\\""path\\"":\\""github.com/google/go-cmp\\"",\\""version\\"":\\""v0.5.5\\"",\\""sum\\"":\\""h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\\""},{\\""path\\"":\\""github.com/sergi/go-diff\\"",\\""version\\"":\\""v1.1.0\\"",\\""sum\\"":\\""h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\\""},{\\""path\\"":\\""golang.org/x/mod\\"",\\""version\\"":\\""v0.4.2\\"",\\""sum\\"":\\""h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\\""},{\\""path\\"":\\""golang.org/x/sync\\"",\\""version\\"":\\""v0.0.0-20210220032951-036812b2e83c\\"",\\""sum\\"":\\""h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\\""},{\\""path\\"":\\""golang.org/x/sys\\"",\\""version\\"":\\""v0.0.0-20210510120138-977fb7262007\\"",\\""sum\\"":\\""h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\\""},{\\""path\\"":\\""golang.org/x/tools\\"",\\""version\\"":\\""v0.1.6-0.20210802203754-9b21a8868e16\\"",\\""sum\\"":\\""h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\\""},{\\""path\\"":\\""golang.org/x/xerrors\\"",\\""version\\"":\\""v0.0.0-20200804184101-5ec99f83aff1\\"",\\""sum\\"":\\""h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\\""},{\\""path\\"":\\""honnef.co/go/tools\\"",\\""version\\"":\\""v0.2.0\\"",\\""sum\\"":\\""h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\\""},{\\""path\\"":\\""mvdan.cc/gofumpt\\"",\\""version\\"":\\""v0.1.1\\"",\\""sum\\"":\\""h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\\""},{\\""path\\"":\\""mvdan.cc/xurls/v2\\"",\\""version\\"":\\""v2.2.0\\"",\\""sum\\"":\\""h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\\""}]}""}}\r\n\r\n\r\n[Trace - 18:53:14.152 PM] Sending notification 'initialized'.\r\nParams: {}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Received request 'window/workDoneProgress/create - (1)'.\r\nParams: {""token"":""5577006791947779410""}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Sending notification 'textDocument/didOpen'.\r\nParams: {...}}\r\n\r\n\r\n[Trace - 18:53:14.171 PM] Sending response 'window/workDoneProgress/create - (1)' in 18ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:14.171 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""begin"",""title"":""Setting up workspace"",""message"":""Loading packages...""}}\r\n\r\n\r\n[Trace - 18:53:14.172 PM] Received request 'workspace/configuration - (2)'.\r\nParams: {""items"":[{""scopeUri"":""file:///Users/hakim/projects/google/vscode-go"",""section"":""gopls""}]}\r\n\r\n\r\n[Trace - 18:53:14.230 PM] Sending response 'workspace/configuration - (2)' in 58ms.\r\nResult: [{""verboseOutput"":true}]\r\n\r\n\r\n[Trace - 18:53:14.734 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\\n(root /Users/hakim/projects/google/vscode-go)\\n(go version go version go1.16.6 darwin/amd64)\\n(valid build configuration = true)\\n(build flags: [])\\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\\nGOPATH=/Users/hakim/go\\nGOSUMDB=sum.golang.org\\nGOMODCACHE=/Users/hakim/go/pkg/mod\\nGONOSUMDB=\\nGOPROXY=https://proxy.golang.org,direct\\nGOCACHE=/Users/hakim/Library/Caches/go-build\\nGOFLAGS=\\nGOINSECURE=\\nGO111MODULE=\\nGONOPROXY=\\nGOPRIVATE=\\nGOROOT=/Users/hakim/sdk/go1.16.6\\n\\n""}\r\n\r\n\r\n[Trace - 18:53:14.758 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:14.763 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/documentSymbol - (1)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/codeAction - (2)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""range"":{""start"":{""line"":67,""character"":12},""end"":{""line"":67,""character"":12}},""context"":{""diagnostics"":[]}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\r\n(root /Users/hakim/projects/google/vscode-go)\r\n(go version go version go1.16.6 darwin/amd64)\r\n(valid build configuration = true)\r\n(build flags: [])\r\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\r\nGOPATH=/Users/hakim/go\r\nGOSUMDB=sum.golang.org\r\nGOMODCACHE=/Users/hakim/go/pkg/mod\r\nGONOSUMDB=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOCACHE=/Users/hakim/Library/Caches/go-build\r\nGOFLAGS=\r\nGOINSECURE=\r\nGO111MODULE=\r\nGONOPROXY=\r\nGOPRIVATE=\r\nGOROOT=/Users/hakim/sdk/go1.16.6\r\n\r\n\r\n[Trace - 18:53:15.038 PM] Sending request 'textDocument/documentLink - (3)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/foldingRange - (4)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/codeLens - (5)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.563 PM] Sending request 'textDocument/documentLink - (6)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":6}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending request 'textDocument/documentLink - (7)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.915 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":4}\r\n\r\n\r\n[Trace - 18:53:18.142 PM] Sending request 'textDocument/foldingRange - (8)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.369 PM] Sending request 'textDocument/documentLink - (9)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.879 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":5}\r\n\r\n\r\n[Trace - 18:53:19.432 PM] Sending request 'textDocument/codeLens - (10)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.459 PM] Sending request 'textDocument/codeLens - (11)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.598 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":9}\r\n\r\n\r\n[Trace - 18:53:19.601 PM] Sending request 'textDocument/documentLink - (12)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:31.288 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:53:31.343 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:53:31.344 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:53:31.425 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:53:31.426 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:53:31.431 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""end"",""message"":""Finished loading packages.""}}\r\n\r\n\r\n[Trace - 18:53:31.434 PM] Received request 'client/registerCapability - (3)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeWatchedFiles-0"",""method"":""workspace/didChangeWatchedFiles"",""registerOptions"":{""watchers"":[{""globPattern"":""**/*.{go,mod,sum}"",""kind"":7},{""globPattern"":""**/*.*tmpl"",""kind"":7},{""globPattern"":""{/Users/hakim/projects/google/vscode-go/tools,/Users/hakim/projects/google/vscode-go/tools/goplssetting,/Users/hakim/projects/google/vscode-go/tools/relnotes}"",""kind"":7}]}}]}\r\n\r\n\r\n[Trace - 18:53:31.455 PM] Sending response 'client/registerCapability - (3)' in 21ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.460 PM] Received request 'client/registerCapability - (4)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeConfiguration"",""method"":""workspace/didChangeConfiguration""},{""id"":""workspace/didChangeWorkspaceFolders"",""method"":""workspace/didChangeWorkspaceFolders""}]}\r\n\r\n\r\n[Trace - 18:53:31.468 PM] Sending response 'client/registerCapability - (4)' in 8ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.712 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\\n\\tpackage=\\""runtime\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\r\n\tpackage=""runtime""\r\n\r\n[Trace - 18:53:31.831 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:53:31.856 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\\n\\tpackage=\\""vendor/golang.org/x/text/unicode/bidi\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\r\n\tpackage=""vendor/golang.org/x/text/unicode/bidi""\r\n\r\n[Trace - 18:53:31.869 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\\n\\tpackage=\\""os/user\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\r\n\tpackage=""os/user""\r\n\r\n[Trace - 18:53:31.965 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\\n\\tpackage=\\""github.com/google/go-github/github\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\r\n\tpackage=""github.com/google/go-github/github""\r\n\r\n[Trace - 18:53:32.046 PM] Received response 'textDocument/documentSymbol - (1)' in 17021ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.048 PM] Received response 'textDocument/codeAction - (2)' in 17023ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.050 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:32 fixImports(filename=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\""), abs=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\"", srcDir=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes\\"" ...\\n""}\r\n\r\n\r\n[Trace - 18:53:32.052 PM] Received response 'textDocument/documentLink - (3)' in 17014ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #4 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #5 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #6 JSON RPC cancelled\r\n\r\n\r\n[Info  - 6:53:32 PM] 2021/08/04 18:53:32 fixImports(filename=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""), abs=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"", srcDir=""/Users/hakim/projects/google/vscode-go/tools/relnotes"" ...\r\n\r\n[Trace - 18:53:32.056 PM] Received response 'textDocument/documentLink - (7)' in 14141ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.067 PM] Received response 'textDocument/foldingRange - (8)' in 13925ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.068 PM #9 JSON RPC cancelled\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (10)' in 12636ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (11)' in 12609ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.070 PM] Received response 'textDocument/documentLink - (12)' in 12470ms.\r\nResult: [{...}]\r\n\r\n</pre>\r\n\r\n* Now I ran `git fetch`.\r\n\r\n<pre>\r\n[Trace - 18:53:48.172 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":22,""character"":0},""end"":{""line"":296,""character"":0}},""rangeLength"":7095,""text"":""\\t\\""github.com/stamblerre/work-stats/generic\\""\\n\\t\\""github.com/stamblerre/work-stats/golang\\""\\n\\t\\""golang.org/x/build/maintner\\""\\n\\t\\""golang.org/x/build/maintner/godata\\""\\n)\\n\\nvar (\\n\\tmilestone  = flag.String(\\""milestone\\"", \\""\\"", \\""milestone associated with the release\\"")\\n\\tfilterDirs = flag.String(\\""dirs\\"", \\""\\"", \\""comma-separated list of directories that should be touched for a CL to be considered relevant\\"")\\n\\tsinceCL    = flag.Int(\\""cl\\"", -1, \\""the gerrit change number of the first CL to include in the output. Only changes submitted more recently than 'cl' will be included.\\"")\\n\\tproject    = flag.String(\\""project\\"", \\""vscode-go\\"", \\""name of the golang project\\"")\\n\\tmdMode     = flag.Bool(\\""md\\"", false, \\""write MD output\\"")\\n\\texclFile   = flag.String(\\""exclude-from\\"", \\""\\"", \\""optional path to changelog MD file. If specified, any 'CL NNNN' occurence in the content will cause that CL to be excluded from this tool's output.\\"")\\n)\\n\\nfunc main() {\\n\\tflag.Parse()\\n\\n\\tvar existingMD []byte\\n\\tif *exclFile != \\""\\"" {\\n\\t\\tvar err error\\n\\t\\texistingMD, err = ioutil.ReadFile(*exclFile)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatal(err)\\n\\t\\t}\\n\\t}\\n\\n\\tcorpus, err := godata.Get(context.Background())\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\n\\tvar dirs []string\\n\\tfor _, dir := range strings.FieldsFunc(*filterDirs, func(r rune) bool {\\n\\t\\treturn unicode.IsSpace(r) || r == ','\\n\\t}) {\\n\\t\\tdirs = append(dirs, filepath.ToSlash(dir))\\n\\t}\\n\\n\\tger := corpus.Gerrit()\\n\\n\\t// Find the cutoff time for changes to include.\\n\\tstart := time.Date(2020, time.August, 1, 00, 00, 00, 0, time.UTC)\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif *sinceCL >= 0 {\\n\\t\\t\\t\\tif int(cl.Number) == *sinceCL {\\n\\t\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if cl.Branch() == \\""release\\"" && cl.Commit.CommitTime.After(start) {\\n\\t\\t\\t\\t// Try to figure out when the last release was\\n\\t\\t\\t\\tfmt.Println(cl.Commit.CommitTime)\\n\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t}\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tvar changes []*generic.Changelist\\n\\tauthors := map[*maintner.GitPerson]bool{}\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\t// Only include 'master'\\n\\t\\t\\tif cl.Branch() != \\""master\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Commit.CommitTime.Before(start) {\\n\\t\\t\\t\\t// Was in a previous release; not for this one.\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\tif bytes.Contains(existingMD, []byte(fmt.Sprintf(\\""CL %d \\"", cl.Number))) {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that at least one file is in a relevant directory before\\n\\t\\t\\t// adding the CL.\\n\\t\\t\\tif len(dirs) > 0 {\\n\\t\\t\\t\\tvar found bool\\n\\t\\t\\t\\tfor _, file := range cl.Commit.Files {\\n\\t\\t\\t\\t\\tfor _, dir := range dirs {\\n\\t\\t\\t\\t\\t\\tif strings.Contains(file.File, dir) {\\n\\t\\t\\t\\t\\t\\t\\tfound = true\\n\\t\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif !found {\\n\\t\\t\\t\\t\\treturn nil\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tchanges = append(changes, golang.GerritToGenericCL(cl))\\n\\t\\t\\tauthors[cl.Owner()] = true\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tsort.Slice(changes, func(i, j int) bool {\\n\\t\\treturn changes[i].Number < changes[j].Number\\n\\t})\\n\\n\\tif *mdMode {\\n\\t\\tfmt.Printf(\\""## TODO: version - \\"")\\n\\t\\tnow := time.Now()\\n\\t\\tfmt.Printf(\\""%s\\\\n\\\\n\\"", now.Format(\\""2 Jan, 2006\\""))\\n\\t\\tfmt.Printf(\\""### Changes\\\\n\\\\n\\"")\\n\\t\\tmdPrintChanges(changes, true)\\n\\n\\t\\tfmt.Printf(\\""### Issues\\\\n\\\\n\\"")\\n\\t\\tmdPrintIssues(changes, *milestone)\\n\\n\\t\\tfmt.Printf(\\""\\\\n### Thanks\\\\n\\\\n\\"")\\n\\t\\tmdPrintContributors(authors)\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tfmt.Printf(\\""  %s\\\\n\\"", change.Subject)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintChanges(changes []*generic.Changelist, byCategory bool) {\\n\\tprintChange := func(change *generic.Changelist) {\\n\\t\\tfmt.Printf(\\""- \\"")\\n\\t\\tcontent := change.Subject\\n\\t\\tnote := releaseNote(change)\\n\\t\\tif note != \\""\\"" && note != \\""yes\\"" && note != \\""y\\"" {\\n\\t\\t\\t// The release note contains content.\\n\\t\\t\\tcontent = note\\n\\t\\t}\\n\\n\\t\\tfmt.Printf(\\""%s\\"", content)\\n\\t\\tif len(change.AssociatedIssues) > 0 {\\n\\t\\t\\tfmt.Printf(\\"" (\\"")\\n\\t\\t\\tfor i, issue := range change.AssociatedIssues {\\n\\t\\t\\t\\tif i == 0 {\\n\\t\\t\\t\\t\\tfmt.Printf(\\""[Issue %d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfmt.Printf(\\"", [%d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfmt.Printf(\\"")\\"")\\n\\t\\t}\\n\\t\\tfmt.Printf(\\"" <!-- CL %d -->\\\\n\\"", change.Number)\\n\\t}\\n\\t// Group CLs by category or by number order.\\n\\tif byCategory {\\n\\t\\tpkgMap := map[string][]*generic.Changelist{}\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tpkgMap[change.Category()] = append(pkgMap[change.Category()], change)\\n\\t\\t}\\n\\t\\tfor _, changes := range pkgMap {\\n\\t\\t\\tfor _, change := range changes {\\n\\t\\t\\t\\tprintChange(change)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tprintChange(change)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintIssues(changes []*generic.Changelist, milestone string) {\\n\\tvar issues []*generic.Issue\\n\\tfor _, change := range changes {\\n\\t\\tissues = append(issues, change.AssociatedIssues...)\\n\\t}\\n\\tsort.Slice(issues, func(i, j int) bool {\\n\\t\\treturn issues[i].Link < issues[j].Link\\n\\t})\\n\\tfor _, issue := range issues {\\n\\t\\tif !issue.Closed() {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tfmt.Printf(\\""%s: %s\\\\n\\"", issue.Link, issue.Milestone)\\n\\t}\\n}\\n\\n// clPackage returns the package name from the CL's commit message,\\n// or \\""??\\"" if it's formatted unconventionally.\\nfunc clPackage(cl *maintner.GerritCL) string {\\n\\tsubj := cl.Subject()\\n\\tif i := strings.Index(subj, \\"":\\""); i != -1 {\\n\\t\\treturn subj[:i]\\n\\t}\\n\\treturn \\""??\\""\\n}\\n\\nvar relNoteRx = regexp.MustCompile(`RELNOTES?=(.+)`)\\n\\nfunc parseRelNote(s string) string {\\n\\tif m := relNoteRx.FindStringSubmatch(s); m != nil {\\n\\t\\treturn m[1]\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc releaseNote(cl *generic.Changelist) string {\\n\\tif strings.Contains(cl.Message, \\""RELNOTE\\"") {\\n\\t\\treturn parseRelNote(cl.Message)\\n\\t}\\n\\tfor _, comment := range cl.Comments {\\n\\t\\tif strings.Contains(comment, \\""RELNOTE\\"") {\\n\\t\\t\\treturn parseRelNote(comment)\\n\\t\\t}\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc mdPrintContributors(authors map[*maintner.GitPerson]bool) {\\n\\tvar names []string\\n\\tfor author := range authors {\\n\\t\\t// It would be great to look up the GitHub username by using:\\n\\t\\t// https://pkg.go.dev/golang.org/x/build/internal/gophers#GetPerson.\\n""}]}\r\n\r\n\r\n[Trace - 18:53:48.206 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.357 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.379 PM] Sending request 'textDocument/foldingRange - (13)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:48.390 PM] Received response 'textDocument/foldingRange - (13)' in 11ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:48.410 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:53:48.421 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.444 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.446 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.463 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.478 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\n""}\r\n\r\n\r\n[Trace - 18:53:48.480 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.771 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:48.774 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:49.163 PM] Sending request 'textDocument/documentLink - (14)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:49.178 PM] Received response 'textDocument/documentLink - (14)' in 14ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received request 'window/workDoneProgress/create - (5)'.\r\nParams: {""token"":""8674665223082153551""}\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n\\tsnapshot=3\\n\\tdirectory=file:///Users/hakim/projects/google/vscode-go\\n""}\r\n\r\n\r\n[Error - 6:53:49 PM] 2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\tsnapshot=3\r\n\tdirectory=file:///Users/hakim/projects/google/vscode-go\r\n\r\n[Trace - 18:53:49.705 PM] Sending response 'window/workDoneProgress/create - (5)' in 1ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""begin"",""title"":""Error loading workspace"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off : packages.Load error""}}\r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[{""range"":{""start"":{""line"":0,""character"":0},""end"":{""line"":0,""character"":34}},""severity"":1,""source"":""go list"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error""}]}\r\n\r\n\r\n[Trace - 18:53:50.672 PM] Sending request 'textDocument/codeLens - (15)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.673 PM] Received response 'textDocument/codeLens - (15)' in 1ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/codeLens - (16)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/documentSymbol - (17)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Received response 'textDocument/codeLens - (16)' in 0ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.677 PM] Received response 'textDocument/documentSymbol - (17)' in 0ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:54:02.090 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\r\n\r\n[Trace - 18:54:02.092 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background imports cache refresh starting\r\n\r\n[Trace - 18:54:02.189 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f \\""{{.Path}}\\\\n{{.Dir}}\\\\n{{.GoMod}}\\\\n{{.GoVersion}}\\\\n{{range context.ReleaseTags}}{{if eq . \\\\\\""go1.14\\\\\\""}}{{.}}{{end}}{{end}}\\\\n\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f ""{{.Path}}\\n{{.Dir}}\\n{{.GoMod}}\\n{{.GoVersion}}\\n{{range context.ReleaseTags}}{{if eq . \\""go1.14\\""}}{{.}}{{end}}{{end}}\\n""\r\n\r\n[Trace - 18:54:02.207 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\r\n\r\n[Trace - 18:54:02.229 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\\n""}\r\n\r\n\r\n[Trace - 18:54:02.230 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\r\n[Trace - 18:54:57.318 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:54:57.604 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:54:57.676 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:54:59.200 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:54:59.250 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:54:59.251 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:54:59.278 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:54:59.308 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\\n\\tpackage=\\""google.golang.org/protobuf/internal/impl\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\r\n\tpackage=""google.golang.org/protobuf/internal/impl""\r\n\r\n[Trace - 18:55:00.133 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""end"",""message"":""Done.""}}\r\n\r\n\r\n[Trace - 18:55:00.135 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 18:55:00.426 PM] Sending request 'textDocument/hover - (18)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""position"":{""line"":227,""character"":23}}\r\n\r\n\r\n[Trace - 18:55:00.443 PM] Received response 'textDocument/hover - (18)' in 17ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""\\n\\n[`(regexp.Regexp).FindStringSubmatch` on pkg.go.dev](https://pkg.go.dev/regexp?utm_source=gopls#Regexp.FindStringSubmatch)\\n\\nFindStringSubmatch returns a slice of strings holding the text of the\\nleftmost match of the regular expression in s and the matches, if any, of\\nits subexpressions, as defined by the \\\\'Submatch\\\\' description in the\\npackage comment\\\\.\\nA return value of nil indicates no match\\\\.\\n""},""range"":{""start"":{""line"":227,""character"":19},""end"":{""line"":227,""character"":37}}}\r\n</pre>\r\n</details>\r\n\r\nThis was the only diagnostic message presented in `go.mod`.\r\n![Screen Shot 2021-08-04 at 6 54 21 PM](https://user-images.githubusercontent.com/4999471/128267424-4a45f03a-9e2c-4f2d-8ee1-9f5cd311bc31.png)\r\n\r\nSorry that I didn't report with a simpler repro case. Probably it's easy enough (just adding a change that adds a new module to go.mod and the code) but want to check if this is a known issue.\r\n",NeedsInvestigation|FrozenDueToAge|gopls|Tools|gopls/metadata,findleyr,"### What version of Go/Gopls are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.16.6\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.7.1\r\n    golang.org/x/tools/gopls@v0.7.1 h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\r\n    golang.org/x/tools@v0.1.6-0.20210802203754-9b21a8868e16 h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nmac\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Ran `go clean -modcache` to empty the module cache. (clean state)\r\n* Cloned vscode-go repo.\r\n* Opened vscode and waited until the initial workspace loading is complete.\r\n* Cherry-picked a gerrit cl that adds a new dependency to go.mod\r\n```\r\n   git fetch https://go.googlesource.com/vscode-go refs/changes/95/337495/3 && git cherry-pick FETCH_HEAD\r\n```  \r\n\r\n### What did you expect to see?\r\n\r\nThe new dependency is picked up automatically.\r\nOr gopls sends diagnostics with code actions or codelens that downloads the new dependency.\r\n\r\n### What did you see instead?\r\n\r\nStuck in workspace loading, without any action or helpful info to address the issue.\r\n\r\nI found multiple ways to get out of this broken state, and would be nice if gopls suggests one of them or other:\r\n - Restart gopls so the initial workspace loading downloads necessary dependency, or\r\n - Run `go mod tidy`  or\r\n - Run `go get` ...\r\n\r\nThe following is the gopls log - \r\n<details><summary>gopls log</summary>\r\n<pre>\r\n[Trace - 18:53:14.115 PM] Sending request 'initialize - (0)'.\r\nParams: {""processId"":6803,""clientInfo"":{""name"":""Visual Studio Code - Insiders"",""version"":""1.59.0-insider""},""locale"":""en-us"",""rootPath"":""/Users/hakim/projects/google/vscode-go"",""rootUri"":""file:///Users/hakim/projects/google/vscode-go"",""capabilities"":{""workspace"":{""applyEdit"":true,""workspaceEdit"":{""documentChanges"":true,""resourceOperations"":[""create"",""rename"",""delete""],""failureHandling"":""textOnlyTransactional"",""normalizesLineEndings"":true,""changeAnnotationSupport"":{""groupsOnLabel"":true}},""didChangeConfiguration"":{""dynamicRegistration"":true},""didChangeWatchedFiles"":{""dynamicRegistration"":true},""symbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""tagSupport"":{""valueSet"":[1]}},""codeLens"":{""refreshSupport"":true},""executeCommand"":{""dynamicRegistration"":true},""configuration"":true,""workspaceFolders"":true,""semanticTokens"":{""refreshSupport"":true},""fileOperations"":{""dynamicRegistration"":true,""didCreate"":true,""didRename"":true,""didDelete"":true,""willCreate"":true,""willRename"":true,""willDelete"":true}},""textDocument"":{""publishDiagnostics"":{""relatedInformation"":true,""versionSupport"":false,""tagSupport"":{""valueSet"":[1,2]},""codeDescriptionSupport"":true,""dataSupport"":true},""synchronization"":{""dynamicRegistration"":true,""willSave"":true,""willSaveWaitUntil"":true,""didSave"":true},""completion"":{""dynamicRegistration"":true,""contextSupport"":true,""completionItem"":{""snippetSupport"":true,""commitCharactersSupport"":true,""documentationFormat"":[""markdown"",""plaintext""],""deprecatedSupport"":true,""preselectSupport"":true,""tagSupport"":{""valueSet"":[1]},""insertReplaceSupport"":true,""resolveSupport"":{""properties"":[""documentation"",""detail"",""additionalTextEdits""]},""insertTextModeSupport"":{""valueSet"":[1,2]}},""completionItemKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},""hover"":{""dynamicRegistration"":true,""contentFormat"":[""markdown"",""plaintext""]},""signatureHelp"":{""dynamicRegistration"":true,""signatureInformation"":{""documentationFormat"":[""markdown"",""plaintext""],""parameterInformation"":{""labelOffsetSupport"":true},""activeParameterSupport"":true},""contextSupport"":true},""definition"":{""dynamicRegistration"":true,""linkSupport"":true},""references"":{""dynamicRegistration"":true},""documentHighlight"":{""dynamicRegistration"":true},""documentSymbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""hierarchicalDocumentSymbolSupport"":true,""tagSupport"":{""valueSet"":[1]},""labelSupport"":true},""codeAction"":{""dynamicRegistration"":true,""isPreferredSupport"":true,""disabledSupport"":true,""dataSupport"":true,""resolveSupport"":{""properties"":[""edit""]},""codeActionLiteralSupport"":{""codeActionKind"":{""valueSet"":["""",""quickfix"",""refactor"",""refactor.extract"",""refactor.inline"",""refactor.rewrite"",""source"",""source.organizeImports""]}},""honorsChangeAnnotations"":false},""codeLens"":{""dynamicRegistration"":true},""formatting"":{""dynamicRegistration"":true},""rangeFormatting"":{""dynamicRegistration"":true},""onTypeFormatting"":{""dynamicRegistration"":true},""rename"":{""dynamicRegistration"":true,""prepareSupport"":true,""prepareSupportDefaultBehavior"":1,""honorsChangeAnnotations"":true},""documentLink"":{""dynamicRegistration"":true,""tooltipSupport"":true},""typeDefinition"":{""dynamicRegistration"":true,""linkSupport"":true},""implementation"":{""dynamicRegistration"":true,""linkSupport"":true},""colorProvider"":{""dynamicRegistration"":true},""foldingRange"":{""dynamicRegistration"":true,""rangeLimit"":5000,""lineFoldingOnly"":true},""declaration"":{""dynamicRegistration"":true,""linkSupport"":true},""selectionRange"":{""dynamicRegistration"":true},""callHierarchy"":{""dynamicRegistration"":true},""semanticTokens"":{""dynamicRegistration"":true,""tokenTypes"":[""namespace"",""type"",""class"",""enum"",""interface"",""struct"",""typeParameter"",""parameter"",""variable"",""property"",""enumMember"",""event"",""function"",""method"",""macro"",""keyword"",""modifier"",""comment"",""string"",""number"",""regexp"",""operator""],""tokenModifiers"":[""declaration"",""definition"",""readonly"",""static"",""deprecated"",""abstract"",""async"",""modification"",""documentation"",""defaultLibrary""],""formats"":[""relative""],""requests"":{""range"":true,""full"":{""delta"":true}},""multilineTokenSupport"":false,""overlappingTokenSupport"":false},""linkedEditingRange"":{""dynamicRegistration"":true}},""window"":{""showMessage"":{""messageActionItem"":{""additionalPropertiesSupport"":true}},""showDocument"":{""support"":true},""workDoneProgress"":true},""general"":{""regularExpressions"":{""engine"":""ECMAScript"",""version"":""ES2020""},""markdown"":{""parser"":""marked"",""version"":""1.1.0""}}},""initializationOptions"":{""verboseOutput"":true},""trace"":""verbose"",""workspaceFolders"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go"",""name"":""vscode-go""}]}\r\n\r\n\r\n[Trace - 18:53:14.117 PM] Received response 'initialize - (0)' in 2ms.\r\nResult: {""capabilities"":{""textDocumentSync"":{""openClose"":true,""change"":2,""save"":{}},""completionProvider"":{""triggerCharacters"":["".""],""completionItem"":{}},""hoverProvider"":true,""signatureHelpProvider"":{""triggerCharacters"":[""("","",""]},""definitionProvider"":true,""typeDefinitionProvider"":true,""implementationProvider"":true,""referencesProvider"":true,""documentHighlightProvider"":true,""documentSymbolProvider"":true,""codeActionProvider"":{""codeActionKinds"":[""quickfix"",""refactor.extract"",""refactor.rewrite"",""source.fixAll"",""source.organizeImports""]},""codeLensProvider"":{},""documentLinkProvider"":{},""workspaceSymbolProvider"":true,""documentFormattingProvider"":true,""documentOnTypeFormattingProvider"":{""firstTriggerCharacter"":""""},""renameProvider"":{""prepareProvider"":true},""foldingRangeProvider"":true,""executeCommandProvider"":{""commands"":[""gopls.add_dependency"",""gopls.add_import"",""gopls.apply_fix"",""gopls.check_upgrades"",""gopls.gc_details"",""gopls.generate"",""gopls.generate_gopls_mod"",""gopls.go_get_package"",""gopls.list_known_packages"",""gopls.regenerate_cgo"",""gopls.remove_dependency"",""gopls.run_tests"",""gopls.start_debugging"",""gopls.test"",""gopls.tidy"",""gopls.toggle_gc_details"",""gopls.update_go_sum"",""gopls.upgrade_dependency"",""gopls.vendor"",""gopls.workspace_metadata""]},""callHierarchyProvider"":true,""workspace"":{""workspaceFolders"":{""supported"":true,""changeNotifications"":""workspace/didChangeWorkspaceFolders""}}},""serverInfo"":{""name"":""gopls"",""version"":""{\\""path\\"":\\""golang.org/x/tools/gopls\\"",\\""version\\"":\\""v0.7.1\\"",\\""sum\\"":\\""h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\\"",\\""deps\\"":[{\\""path\\"":\\""github.com/BurntSushi/toml\\"",\\""version\\"":\\""v0.3.1\\"",\\""sum\\"":\\""h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\\""},{\\""path\\"":\\""github.com/google/go-cmp\\"",\\""version\\"":\\""v0.5.5\\"",\\""sum\\"":\\""h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\\""},{\\""path\\"":\\""github.com/sergi/go-diff\\"",\\""version\\"":\\""v1.1.0\\"",\\""sum\\"":\\""h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\\""},{\\""path\\"":\\""golang.org/x/mod\\"",\\""version\\"":\\""v0.4.2\\"",\\""sum\\"":\\""h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\\""},{\\""path\\"":\\""golang.org/x/sync\\"",\\""version\\"":\\""v0.0.0-20210220032951-036812b2e83c\\"",\\""sum\\"":\\""h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\\""},{\\""path\\"":\\""golang.org/x/sys\\"",\\""version\\"":\\""v0.0.0-20210510120138-977fb7262007\\"",\\""sum\\"":\\""h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\\""},{\\""path\\"":\\""golang.org/x/tools\\"",\\""version\\"":\\""v0.1.6-0.20210802203754-9b21a8868e16\\"",\\""sum\\"":\\""h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\\""},{\\""path\\"":\\""golang.org/x/xerrors\\"",\\""version\\"":\\""v0.0.0-20200804184101-5ec99f83aff1\\"",\\""sum\\"":\\""h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\\""},{\\""path\\"":\\""honnef.co/go/tools\\"",\\""version\\"":\\""v0.2.0\\"",\\""sum\\"":\\""h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\\""},{\\""path\\"":\\""mvdan.cc/gofumpt\\"",\\""version\\"":\\""v0.1.1\\"",\\""sum\\"":\\""h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\\""},{\\""path\\"":\\""mvdan.cc/xurls/v2\\"",\\""version\\"":\\""v2.2.0\\"",\\""sum\\"":\\""h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\\""}]}""}}\r\n\r\n\r\n[Trace - 18:53:14.152 PM] Sending notification 'initialized'.\r\nParams: {}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Received request 'window/workDoneProgress/create - (1)'.\r\nParams: {""token"":""5577006791947779410""}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Sending notification 'textDocument/didOpen'.\r\nParams: {...}}\r\n\r\n\r\n[Trace - 18:53:14.171 PM] Sending response 'window/workDoneProgress/create - (1)' in 18ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:14.171 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""begin"",""title"":""Setting up workspace"",""message"":""Loading packages...""}}\r\n\r\n\r\n[Trace - 18:53:14.172 PM] Received request 'workspace/configuration - (2)'.\r\nParams: {""items"":[{""scopeUri"":""file:///Users/hakim/projects/google/vscode-go"",""section"":""gopls""}]}\r\n\r\n\r\n[Trace - 18:53:14.230 PM] Sending response 'workspace/configuration - (2)' in 58ms.\r\nResult: [{""verboseOutput"":true}]\r\n\r\n\r\n[Trace - 18:53:14.734 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\\n(root /Users/hakim/projects/google/vscode-go)\\n(go version go version go1.16.6 darwin/amd64)\\n(valid build configuration = true)\\n(build flags: [])\\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\\nGOPATH=/Users/hakim/go\\nGOSUMDB=sum.golang.org\\nGOMODCACHE=/Users/hakim/go/pkg/mod\\nGONOSUMDB=\\nGOPROXY=https://proxy.golang.org,direct\\nGOCACHE=/Users/hakim/Library/Caches/go-build\\nGOFLAGS=\\nGOINSECURE=\\nGO111MODULE=\\nGONOPROXY=\\nGOPRIVATE=\\nGOROOT=/Users/hakim/sdk/go1.16.6\\n\\n""}\r\n\r\n\r\n[Trace - 18:53:14.758 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:14.763 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/documentSymbol - (1)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/codeAction - (2)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""range"":{""start"":{""line"":67,""character"":12},""end"":{""line"":67,""character"":12}},""context"":{""diagnostics"":[]}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\r\n(root /Users/hakim/projects/google/vscode-go)\r\n(go version go version go1.16.6 darwin/amd64)\r\n(valid build configuration = true)\r\n(build flags: [])\r\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\r\nGOPATH=/Users/hakim/go\r\nGOSUMDB=sum.golang.org\r\nGOMODCACHE=/Users/hakim/go/pkg/mod\r\nGONOSUMDB=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOCACHE=/Users/hakim/Library/Caches/go-build\r\nGOFLAGS=\r\nGOINSECURE=\r\nGO111MODULE=\r\nGONOPROXY=\r\nGOPRIVATE=\r\nGOROOT=/Users/hakim/sdk/go1.16.6\r\n\r\n\r\n[Trace - 18:53:15.038 PM] Sending request 'textDocument/documentLink - (3)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/foldingRange - (4)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/codeLens - (5)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.563 PM] Sending request 'textDocument/documentLink - (6)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":6}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending request 'textDocument/documentLink - (7)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.915 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":4}\r\n\r\n\r\n[Trace - 18:53:18.142 PM] Sending request 'textDocument/foldingRange - (8)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.369 PM] Sending request 'textDocument/documentLink - (9)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.879 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":5}\r\n\r\n\r\n[Trace - 18:53:19.432 PM] Sending request 'textDocument/codeLens - (10)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.459 PM] Sending request 'textDocument/codeLens - (11)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.598 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":9}\r\n\r\n\r\n[Trace - 18:53:19.601 PM] Sending request 'textDocument/documentLink - (12)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:31.288 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:53:31.343 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:53:31.344 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:53:31.425 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:53:31.426 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:53:31.431 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""end"",""message"":""Finished loading packages.""}}\r\n\r\n\r\n[Trace - 18:53:31.434 PM] Received request 'client/registerCapability - (3)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeWatchedFiles-0"",""method"":""workspace/didChangeWatchedFiles"",""registerOptions"":{""watchers"":[{""globPattern"":""**/*.{go,mod,sum}"",""kind"":7},{""globPattern"":""**/*.*tmpl"",""kind"":7},{""globPattern"":""{/Users/hakim/projects/google/vscode-go/tools,/Users/hakim/projects/google/vscode-go/tools/goplssetting,/Users/hakim/projects/google/vscode-go/tools/relnotes}"",""kind"":7}]}}]}\r\n\r\n\r\n[Trace - 18:53:31.455 PM] Sending response 'client/registerCapability - (3)' in 21ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.460 PM] Received request 'client/registerCapability - (4)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeConfiguration"",""method"":""workspace/didChangeConfiguration""},{""id"":""workspace/didChangeWorkspaceFolders"",""method"":""workspace/didChangeWorkspaceFolders""}]}\r\n\r\n\r\n[Trace - 18:53:31.468 PM] Sending response 'client/registerCapability - (4)' in 8ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.712 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\\n\\tpackage=\\""runtime\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\r\n\tpackage=""runtime""\r\n\r\n[Trace - 18:53:31.831 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:53:31.856 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\\n\\tpackage=\\""vendor/golang.org/x/text/unicode/bidi\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\r\n\tpackage=""vendor/golang.org/x/text/unicode/bidi""\r\n\r\n[Trace - 18:53:31.869 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\\n\\tpackage=\\""os/user\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\r\n\tpackage=""os/user""\r\n\r\n[Trace - 18:53:31.965 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\\n\\tpackage=\\""github.com/google/go-github/github\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\r\n\tpackage=""github.com/google/go-github/github""\r\n\r\n[Trace - 18:53:32.046 PM] Received response 'textDocument/documentSymbol - (1)' in 17021ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.048 PM] Received response 'textDocument/codeAction - (2)' in 17023ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.050 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:32 fixImports(filename=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\""), abs=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\"", srcDir=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes\\"" ...\\n""}\r\n\r\n\r\n[Trace - 18:53:32.052 PM] Received response 'textDocument/documentLink - (3)' in 17014ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #4 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #5 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #6 JSON RPC cancelled\r\n\r\n\r\n[Info  - 6:53:32 PM] 2021/08/04 18:53:32 fixImports(filename=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""), abs=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"", srcDir=""/Users/hakim/projects/google/vscode-go/tools/relnotes"" ...\r\n\r\n[Trace - 18:53:32.056 PM] Received response 'textDocument/documentLink - (7)' in 14141ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.067 PM] Received response 'textDocument/foldingRange - (8)' in 13925ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.068 PM #9 JSON RPC cancelled\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (10)' in 12636ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (11)' in 12609ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.070 PM] Received response 'textDocument/documentLink - (12)' in 12470ms.\r\nResult: [{...}]\r\n\r\n</pre>\r\n\r\n* Now I ran `git fetch`.\r\n\r\n<pre>\r\n[Trace - 18:53:48.172 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":22,""character"":0},""end"":{""line"":296,""character"":0}},""rangeLength"":7095,""text"":""\\t\\""github.com/stamblerre/work-stats/generic\\""\\n\\t\\""github.com/stamblerre/work-stats/golang\\""\\n\\t\\""golang.org/x/build/maintner\\""\\n\\t\\""golang.org/x/build/maintner/godata\\""\\n)\\n\\nvar (\\n\\tmilestone  = flag.String(\\""milestone\\"", \\""\\"", \\""milestone associated with the release\\"")\\n\\tfilterDirs = flag.String(\\""dirs\\"", \\""\\"", \\""comma-separated list of directories that should be touched for a CL to be considered relevant\\"")\\n\\tsinceCL    = flag.Int(\\""cl\\"", -1, \\""the gerrit change number of the first CL to include in the output. Only changes submitted more recently than 'cl' will be included.\\"")\\n\\tproject    = flag.String(\\""project\\"", \\""vscode-go\\"", \\""name of the golang project\\"")\\n\\tmdMode     = flag.Bool(\\""md\\"", false, \\""write MD output\\"")\\n\\texclFile   = flag.String(\\""exclude-from\\"", \\""\\"", \\""optional path to changelog MD file. If specified, any 'CL NNNN' occurence in the content will cause that CL to be excluded from this tool's output.\\"")\\n)\\n\\nfunc main() {\\n\\tflag.Parse()\\n\\n\\tvar existingMD []byte\\n\\tif *exclFile != \\""\\"" {\\n\\t\\tvar err error\\n\\t\\texistingMD, err = ioutil.ReadFile(*exclFile)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatal(err)\\n\\t\\t}\\n\\t}\\n\\n\\tcorpus, err := godata.Get(context.Background())\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\n\\tvar dirs []string\\n\\tfor _, dir := range strings.FieldsFunc(*filterDirs, func(r rune) bool {\\n\\t\\treturn unicode.IsSpace(r) || r == ','\\n\\t}) {\\n\\t\\tdirs = append(dirs, filepath.ToSlash(dir))\\n\\t}\\n\\n\\tger := corpus.Gerrit()\\n\\n\\t// Find the cutoff time for changes to include.\\n\\tstart := time.Date(2020, time.August, 1, 00, 00, 00, 0, time.UTC)\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif *sinceCL >= 0 {\\n\\t\\t\\t\\tif int(cl.Number) == *sinceCL {\\n\\t\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if cl.Branch() == \\""release\\"" && cl.Commit.CommitTime.After(start) {\\n\\t\\t\\t\\t// Try to figure out when the last release was\\n\\t\\t\\t\\tfmt.Println(cl.Commit.CommitTime)\\n\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t}\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tvar changes []*generic.Changelist\\n\\tauthors := map[*maintner.GitPerson]bool{}\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\t// Only include 'master'\\n\\t\\t\\tif cl.Branch() != \\""master\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Commit.CommitTime.Before(start) {\\n\\t\\t\\t\\t// Was in a previous release; not for this one.\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\tif bytes.Contains(existingMD, []byte(fmt.Sprintf(\\""CL %d \\"", cl.Number))) {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that at least one file is in a relevant directory before\\n\\t\\t\\t// adding the CL.\\n\\t\\t\\tif len(dirs) > 0 {\\n\\t\\t\\t\\tvar found bool\\n\\t\\t\\t\\tfor _, file := range cl.Commit.Files {\\n\\t\\t\\t\\t\\tfor _, dir := range dirs {\\n\\t\\t\\t\\t\\t\\tif strings.Contains(file.File, dir) {\\n\\t\\t\\t\\t\\t\\t\\tfound = true\\n\\t\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif !found {\\n\\t\\t\\t\\t\\treturn nil\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tchanges = append(changes, golang.GerritToGenericCL(cl))\\n\\t\\t\\tauthors[cl.Owner()] = true\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tsort.Slice(changes, func(i, j int) bool {\\n\\t\\treturn changes[i].Number < changes[j].Number\\n\\t})\\n\\n\\tif *mdMode {\\n\\t\\tfmt.Printf(\\""## TODO: version - \\"")\\n\\t\\tnow := time.Now()\\n\\t\\tfmt.Printf(\\""%s\\\\n\\\\n\\"", now.Format(\\""2 Jan, 2006\\""))\\n\\t\\tfmt.Printf(\\""### Changes\\\\n\\\\n\\"")\\n\\t\\tmdPrintChanges(changes, true)\\n\\n\\t\\tfmt.Printf(\\""### Issues\\\\n\\\\n\\"")\\n\\t\\tmdPrintIssues(changes, *milestone)\\n\\n\\t\\tfmt.Printf(\\""\\\\n### Thanks\\\\n\\\\n\\"")\\n\\t\\tmdPrintContributors(authors)\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tfmt.Printf(\\""  %s\\\\n\\"", change.Subject)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintChanges(changes []*generic.Changelist, byCategory bool) {\\n\\tprintChange := func(change *generic.Changelist) {\\n\\t\\tfmt.Printf(\\""- \\"")\\n\\t\\tcontent := change.Subject\\n\\t\\tnote := releaseNote(change)\\n\\t\\tif note != \\""\\"" && note != \\""yes\\"" && note != \\""y\\"" {\\n\\t\\t\\t// The release note contains content.\\n\\t\\t\\tcontent = note\\n\\t\\t}\\n\\n\\t\\tfmt.Printf(\\""%s\\"", content)\\n\\t\\tif len(change.AssociatedIssues) > 0 {\\n\\t\\t\\tfmt.Printf(\\"" (\\"")\\n\\t\\t\\tfor i, issue := range change.AssociatedIssues {\\n\\t\\t\\t\\tif i == 0 {\\n\\t\\t\\t\\t\\tfmt.Printf(\\""[Issue %d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfmt.Printf(\\"", [%d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfmt.Printf(\\"")\\"")\\n\\t\\t}\\n\\t\\tfmt.Printf(\\"" <!-- CL %d -->\\\\n\\"", change.Number)\\n\\t}\\n\\t// Group CLs by category or by number order.\\n\\tif byCategory {\\n\\t\\tpkgMap := map[string][]*generic.Changelist{}\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tpkgMap[change.Category()] = append(pkgMap[change.Category()], change)\\n\\t\\t}\\n\\t\\tfor _, changes := range pkgMap {\\n\\t\\t\\tfor _, change := range changes {\\n\\t\\t\\t\\tprintChange(change)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tprintChange(change)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintIssues(changes []*generic.Changelist, milestone string) {\\n\\tvar issues []*generic.Issue\\n\\tfor _, change := range changes {\\n\\t\\tissues = append(issues, change.AssociatedIssues...)\\n\\t}\\n\\tsort.Slice(issues, func(i, j int) bool {\\n\\t\\treturn issues[i].Link < issues[j].Link\\n\\t})\\n\\tfor _, issue := range issues {\\n\\t\\tif !issue.Closed() {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tfmt.Printf(\\""%s: %s\\\\n\\"", issue.Link, issue.Milestone)\\n\\t}\\n}\\n\\n// clPackage returns the package name from the CL's commit message,\\n// or \\""??\\"" if it's formatted unconventionally.\\nfunc clPackage(cl *maintner.GerritCL) string {\\n\\tsubj := cl.Subject()\\n\\tif i := strings.Index(subj, \\"":\\""); i != -1 {\\n\\t\\treturn subj[:i]\\n\\t}\\n\\treturn \\""??\\""\\n}\\n\\nvar relNoteRx = regexp.MustCompile(`RELNOTES?=(.+)`)\\n\\nfunc parseRelNote(s string) string {\\n\\tif m := relNoteRx.FindStringSubmatch(s); m != nil {\\n\\t\\treturn m[1]\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc releaseNote(cl *generic.Changelist) string {\\n\\tif strings.Contains(cl.Message, \\""RELNOTE\\"") {\\n\\t\\treturn parseRelNote(cl.Message)\\n\\t}\\n\\tfor _, comment := range cl.Comments {\\n\\t\\tif strings.Contains(comment, \\""RELNOTE\\"") {\\n\\t\\t\\treturn parseRelNote(comment)\\n\\t\\t}\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc mdPrintContributors(authors map[*maintner.GitPerson]bool) {\\n\\tvar names []string\\n\\tfor author := range authors {\\n\\t\\t// It would be great to look up the GitHub username by using:\\n\\t\\t// https://pkg.go.dev/golang.org/x/build/internal/gophers#GetPerson.\\n""}]}\r\n\r\n\r\n[Trace - 18:53:48.206 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.357 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.379 PM] Sending request 'textDocument/foldingRange - (13)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:48.390 PM] Received response 'textDocument/foldingRange - (13)' in 11ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:48.410 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:53:48.421 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.444 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.446 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.463 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.478 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\n""}\r\n\r\n\r\n[Trace - 18:53:48.480 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.771 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:48.774 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:49.163 PM] Sending request 'textDocument/documentLink - (14)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:49.178 PM] Received response 'textDocument/documentLink - (14)' in 14ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received request 'window/workDoneProgress/create - (5)'.\r\nParams: {""token"":""8674665223082153551""}\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n\\tsnapshot=3\\n\\tdirectory=file:///Users/hakim/projects/google/vscode-go\\n""}\r\n\r\n\r\n[Error - 6:53:49 PM] 2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\tsnapshot=3\r\n\tdirectory=file:///Users/hakim/projects/google/vscode-go\r\n\r\n[Trace - 18:53:49.705 PM] Sending response 'window/workDoneProgress/create - (5)' in 1ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""begin"",""title"":""Error loading workspace"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off : packages.Load error""}}\r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[{""range"":{""start"":{""line"":0,""character"":0},""end"":{""line"":0,""character"":34}},""severity"":1,""source"":""go list"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error""}]}\r\n\r\n\r\n[Trace - 18:53:50.672 PM] Sending request 'textDocument/codeLens - (15)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.673 PM] Received response 'textDocument/codeLens - (15)' in 1ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/codeLens - (16)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/documentSymbol - (17)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Received response 'textDocument/codeLens - (16)' in 0ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.677 PM] Received response 'textDocument/documentSymbol - (17)' in 0ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:54:02.090 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\r\n\r\n[Trace - 18:54:02.092 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background imports cache refresh starting\r\n\r\n[Trace - 18:54:02.189 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f \\""{{.Path}}\\\\n{{.Dir}}\\\\n{{.GoMod}}\\\\n{{.GoVersion}}\\\\n{{range context.ReleaseTags}}{{if eq . \\\\\\""go1.14\\\\\\""}}{{.}}{{end}}{{end}}\\\\n\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f ""{{.Path}}\\n{{.Dir}}\\n{{.GoMod}}\\n{{.GoVersion}}\\n{{range context.ReleaseTags}}{{if eq . \\""go1.14\\""}}{{.}}{{end}}{{end}}\\n""\r\n\r\n[Trace - 18:54:02.207 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\r\n\r\n[Trace - 18:54:02.229 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\\n""}\r\n\r\n\r\n[Trace - 18:54:02.230 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\r\n[Trace - 18:54:57.318 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:54:57.604 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:54:57.676 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:54:59.200 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:54:59.250 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:54:59.251 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:54:59.278 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:54:59.308 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\\n\\tpackage=\\""google.golang.org/protobuf/internal/impl\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\r\n\tpackage=""google.golang.org/protobuf/internal/impl""\r\n\r\n[Trace - 18:55:00.133 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""end"",""message"":""Done.""}}\r\n\r\n\r\n[Trace - 18:55:00.135 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 18:55:00.426 PM] Sending request 'textDocument/hover - (18)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""position"":{""line"":227,""character"":23}}\r\n\r\n\r\n[Trace - 18:55:00.443 PM] Received response 'textDocument/hover - (18)' in 17ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""```go\\nfunc (*regexp.Regexp).FindStringSubmatch(s string) []string\\n```\\n\\n[`(regexp.Regexp).FindStringSubmatch` on pkg.go.dev](https://pkg.go.dev/regexp?utm_source=gopls#Regexp.FindStringSubmatch)\\n\\nFindStringSubmatch returns a slice of strings holding the text of the\\nleftmost match of the regular expression in s and the matches, if any, of\\nits subexpressions, as defined by the \\\\'Submatch\\\\' description in the\\npackage comment\\\\.\\nA return value of nil indicates no match\\\\.\\n""},""range"":{""start"":{""line"":227,""character"":19},""end"":{""line"":227,""character"":37}}}\r\n</pre>\r\n</details>\r\n\r\nThis was the only diagnostic message presented in `go.mod`.\r\n![Screen Shot 2021-08-04 at 6 54 21 PM](https://user-images.githubusercontent.com/4999471/128267424-4a45f03a-9e2c-4f2d-8ee1-9f5cd311bc31.png)\r\n\r\nSorry that I didn't report with a simpler repro case. Probably it's easy enough (just adding a change that adds a new module to go.mod and the code) but want to check if this is a known issue.\r\n",go\\nfunc (*regexp.Regexp).FindStringSubmatch(s string) []string\\n
47410,"types2: adjust types reported for shift expressions with constant RHS to match `go/types`As discussed in #47243, go/types should preserve the type of untyped constants on the RHS of a shift expression.\r\n\r\nHowever, it does this inconsistently for integral vs non-integral types. Consider\r\n\r\nIn 1.16 (and probably earlier), go/types reports the type of `1` as `untyped int`, but the type of `2.` as `uint`. It should preserve the type of `2.` as `untyped float`.\r\n\r\nhttps://play.golang.org/p/aZZ48onPW2z\r\n\r\nWe're going to preserve this behavior for 1.17, but should try to fix it for 1.18.\r\n\r\nCC @griesemer ",NeedsFix,griesemer,"As discussed in #47243, go/types should preserve the type of untyped constants on the RHS of a shift expression.\r\n\r\nHowever, it does this inconsistently for integral vs non-integral types. Consider\r\n```go\r\n  var s int\r\n  var _ = s << 1\r\n  var _ = s << 2.\r\n```\r\nIn 1.16 (and probably earlier), go/types reports the type of `1` as `untyped int`, but the type of `2.` as `uint`. It should preserve the type of `2.` as `untyped float`.\r\n\r\nhttps://play.golang.org/p/aZZ48onPW2z\r\n\r\nWe're going to preserve this behavior for 1.17, but should try to fix it for 1.18.\r\n\r\nCC @griesemer ",go\r\n  var s int\r\n  var _ = s << 1\r\n  var _ = s << 2.\r\n
47276,"strings: copying but not using a Builder after first use leads to runtime crash (generates heap -> stack pointer)<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.6\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://play.golang.org/p/RRI3-srzVrR\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI don't see any error message\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--\r\nruntime: pointer 0xc035a7bc78 to unused region of span span.base()=0xc0001de000 span.limit=0xc0001dff80 span.state=1\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | runtime: found in object at *(0xc0026a6000+0x0)\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | object=0xc0026a6000 s.base()=0xc0026a6000 s.limit=0xc0026a8000 s.spanclass=36 s.elemsize=256 s.state=mSpanInUse\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+0) = 0xc035a7bc78 <==\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+8) = 0xc002700000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+16) = 0x113a6c\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+24) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+32) = 0xc035a7bc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+40) = 0xc0017ce000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+48) = 0x1100aa\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+56) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+64) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+72) = 0xc002300000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+80) = 0x115fcc\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+88) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+96) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+104) = 0xc0018f6000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+112) = 0x115de0\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+120) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+128) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+136) = 0xc002992000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+144) = 0x114359\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+152) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+160) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+168) = 0xc001a1e000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+176) = 0x11aa0e\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+184) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+192) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+200) = 0xc001f80000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+208) = 0x113b9b\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+216) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+224) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+232) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+240) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+248) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | fatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime stack:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.throw(0x98583e, 0x3e)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/panic.go:1117 +0x72 fp=0xc000049e28 sp=0xc000049df8 pc=0x435db2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.badPointer(0x7f0421f06050, 0xc035a7bc78, 0xc0026a6000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:351 +0x235 fp=0xc000049e70 sp=0xc000049e28 pc=0x415335\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.findObject(0xc035a7bc78, 0xc0026a6000, 0x0, 0x0, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:387 +0x9b fp=0xc000049ea8 sp=0xc000049e70 pc=0x4153fb\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.scanobject(0xc0026a6000, 0xc000027698)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1286 +0x24a fp=0xc000049f38 sp=0xc000049ea8 pc=0x42138a\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcDrain(0xc000027698, 0x3)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1048 +0x22b fp=0xc000049f90 sp=0xc000049f38 pc=0x420b0b\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker.func2()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1980 +0x88 fp=0xc000049fd0 sp=0xc000049f90 pc=0x461f28\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack(0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:379 +0x66 fp=0xc000049fd8 sp=0xc000049fd0 pc=0x4693e6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mstart()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:1246 fp=0xc000049fe0 sp=0xc000049fd8 pc=0x43b080\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 34 [GC worker (idle)]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack_switch()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:339 fp=0xc000030f60 sp=0xc000030f58 pc=0x469360\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1967 +0x1c7 fp=0xc000030fe0 sp=0xc000030f60 pc=0x41d627\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.goexit()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:1371 +0x1 fp=0xc000030fe8 sp=0xc000030fe0 pc=0x46b061\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | created by runtime.gcBgMarkStartWorkers\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1835 +0x37\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 1 [runnable]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.Gosched(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:292\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcAssistAlloc(0xc000000180)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:469 +0x1bc fp=0xc00008faa0 sp=0xc00008fa40 pc=0x41f55c\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mallocgc(0xbc000, 0x0, 0xc0032c7000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/malloc.go:961 +0x996 fp=0xc00008fb28 sp=0xc00008faa0 pc=0x40ddb6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.growslice(0x8b9ec0, 0xc003100000, 0x95dcc, 0x96000, 0x96199, 0xc0032cd000, 0x3cd, 0x400)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/slice.go:224 +0x154 fp=0xc00008fb90 sp=0xc00008fb28 pc=0x44d6d4\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | strings.(*Builder).WriteString(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/strings/builder.go:123\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).changeTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x9798ab, 0x17, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:71 +0x392 fp=0xc00008fcc8 sp=0xc00008fb90 pc=0x8666b2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).ChangeAllTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:19 +0x5e fp=0xc00008fd18 sp=0xc00008fcc8 pc=0x86623e\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/services.(*service).SetEsElasticsearch(0xc000024360, 0xa0aef0, 0xc00001a040, 0xc00006ba00, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/services/es_elasticsearch.go:40 +0x439 fp=0xc00008fe18 sp=0xc00008fd18 pc=0x871739\r\n\xa0```\r\n",NeedsDecision|compiler/runtime,dr2chase,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.6\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://play.golang.org/p/RRI3-srzVrR\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc f(myList []string) error {\r\n\tconst (\r\n\t\tThreshold = 1000\r\n\t)\r\n\r\n\tvar (\r\n\t\tbuilderList = []strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tbullder = strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tcount uint64 = 0\r\n\t)\r\n\tfor _, _ = range myList {\r\n\t\tif count > Threshold {\r\n\t\t\tbuilderList = append(builderList, bullder)\r\n\t\t\tbullder = strings.Builder{}\r\n\t\t\tcount = 0\r\n\t\t}\r\n\t\tbullder.WriteString(""123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"")\r\n\t\tcount++\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tmyList := make([]string, 1000000)\r\n\terr := f(myList)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(""success"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI don't see any error message\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--\r\nruntime: pointer 0xc035a7bc78 to unused region of span span.base()=0xc0001de000 span.limit=0xc0001dff80 span.state=1\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | runtime: found in object at *(0xc0026a6000+0x0)\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | object=0xc0026a6000 s.base()=0xc0026a6000 s.limit=0xc0026a8000 s.spanclass=36 s.elemsize=256 s.state=mSpanInUse\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+0) = 0xc035a7bc78 <==\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+8) = 0xc002700000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+16) = 0x113a6c\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+24) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+32) = 0xc035a7bc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+40) = 0xc0017ce000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+48) = 0x1100aa\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+56) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+64) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+72) = 0xc002300000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+80) = 0x115fcc\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+88) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+96) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+104) = 0xc0018f6000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+112) = 0x115de0\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+120) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+128) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+136) = 0xc002992000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+144) = 0x114359\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+152) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+160) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+168) = 0xc001a1e000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+176) = 0x11aa0e\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+184) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+192) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+200) = 0xc001f80000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+208) = 0x113b9b\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+216) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+224) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+232) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+240) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+248) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | fatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime stack:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.throw(0x98583e, 0x3e)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/panic.go:1117 +0x72 fp=0xc000049e28 sp=0xc000049df8 pc=0x435db2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.badPointer(0x7f0421f06050, 0xc035a7bc78, 0xc0026a6000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:351 +0x235 fp=0xc000049e70 sp=0xc000049e28 pc=0x415335\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.findObject(0xc035a7bc78, 0xc0026a6000, 0x0, 0x0, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:387 +0x9b fp=0xc000049ea8 sp=0xc000049e70 pc=0x4153fb\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.scanobject(0xc0026a6000, 0xc000027698)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1286 +0x24a fp=0xc000049f38 sp=0xc000049ea8 pc=0x42138a\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcDrain(0xc000027698, 0x3)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1048 +0x22b fp=0xc000049f90 sp=0xc000049f38 pc=0x420b0b\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker.func2()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1980 +0x88 fp=0xc000049fd0 sp=0xc000049f90 pc=0x461f28\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack(0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:379 +0x66 fp=0xc000049fd8 sp=0xc000049fd0 pc=0x4693e6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mstart()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:1246 fp=0xc000049fe0 sp=0xc000049fd8 pc=0x43b080\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 34 [GC worker (idle)]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack_switch()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:339 fp=0xc000030f60 sp=0xc000030f58 pc=0x469360\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1967 +0x1c7 fp=0xc000030fe0 sp=0xc000030f60 pc=0x41d627\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.goexit()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:1371 +0x1 fp=0xc000030fe8 sp=0xc000030fe0 pc=0x46b061\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | created by runtime.gcBgMarkStartWorkers\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1835 +0x37\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 1 [runnable]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.Gosched(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:292\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcAssistAlloc(0xc000000180)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:469 +0x1bc fp=0xc00008faa0 sp=0xc00008fa40 pc=0x41f55c\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mallocgc(0xbc000, 0x0, 0xc0032c7000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/malloc.go:961 +0x996 fp=0xc00008fb28 sp=0xc00008faa0 pc=0x40ddb6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.growslice(0x8b9ec0, 0xc003100000, 0x95dcc, 0x96000, 0x96199, 0xc0032cd000, 0x3cd, 0x400)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/slice.go:224 +0x154 fp=0xc00008fb90 sp=0xc00008fb28 pc=0x44d6d4\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | strings.(*Builder).WriteString(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/strings/builder.go:123\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).changeTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x9798ab, 0x17, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:71 +0x392 fp=0xc00008fcc8 sp=0xc00008fb90 pc=0x8666b2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).ChangeAllTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:19 +0x5e fp=0xc00008fd18 sp=0xc00008fcc8 pc=0x86623e\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/services.(*service).SetEsElasticsearch(0xc000024360, 0xa0aef0, 0xc00001a040, 0xc00006ba00, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/services/es_elasticsearch.go:40 +0x439 fp=0xc00008fe18 sp=0xc00008fd18 pc=0x871739\r\n\xa0```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc f(myList []string) error {\r\n\tconst (\r\n\t\tThreshold = 1000\r\n\t)\r\n\r\n\tvar (\r\n\t\tbuilderList = []strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tbullder = strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tcount uint64 = 0\r\n\t)\r\n\tfor _, _ = range myList {\r\n\t\tif count > Threshold {\r\n\t\t\tbuilderList = append(builderList, bullder)\r\n\t\t\tbullder = strings.Builder{}\r\n\t\t\tcount = 0\r\n\t\t}\r\n\t\tbullder.WriteString(""123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"")\r\n\t\tcount++\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tmyList := make([]string, 1000000)\r\n\terr := f(myList)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(""success"")\r\n}\r\n"
46825,"cmd/cover: treats empty lambdas as being executed even when not executed### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nThis problem came to my attention because I was surprised the coverage reported by `go test -coverprofile=cover` was significantly higher than that reported by the Codecov service. After carefully looking at a couple of files in the project which should have had identical coverage I came to the conclusion there appears to be an off by one bug, or something akin to it, in the go coverage calculations.\r\n\r\nCreate a directory with the following two files, run `go mod example.com/coverage` then `go test -coverprofile=cover ./...`.\r\n\r\nFile *x.go*:\r\n\r\n\r\n\r\nFile *x_test.go*:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCorrect coverage of 66.7%.\r\n\r\n### What did you see instead?\r\n\r\nIncorrect coverage of 80% due to treating the lambda in the `BadCoverage` function as if it had been executed. Changing the body of the lambda to do anything at all ""fixes"" the coverage. Interestingly, the HTML produced by `go tool cover -html=cover` highlights the right-paren in red in the `BadCoverage` case. Which suggests a disconnect between the code highlighting and coverage calculation. Also, the incorrect value of 80% is also wrong, it seems to me, since it is treating the code as if 5/6 of the lines were executed which is 83.3%. It looks like it is treating the incorrect case as if 4/5 of the lines were executed. Which is another clue how the coverage data is being misinterpreted.\r\n\r\nFor the record, the *cover* data is (compare lines 3 and 5):\r\n\r\n```\r\nmode: set\r\nexample.com/t/x.go:9.20,10.15 1 1\r\nexample.com/t/x.go:10.16,10.17 0 0\r\nexample.com/t/x.go:13.22,14.15 1 1\r\nexample.com/t/x.go:14.15,14.32 1 0\r\nexample.com/t/x.go:17.22,18.15 1 1\r\nexample.com/t/x.go:19.2,19.7 1 1\r\nexample.com/t/x.go:18.16,18.17 0 1\r\n```",NeedsInvestigation|compiler/runtime,thanm,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nThis problem came to my attention because I was surprised the coverage reported by `go test -coverprofile=cover` was significantly higher than that reported by the Codecov service. After carefully looking at a couple of files in the project which should have had identical coverage I came to the conclusion there appears to be an off by one bug, or something akin to it, in the go coverage calculations.\r\n\r\nCreate a directory with the following two files, run `go mod example.com/coverage` then `go test -coverprofile=cover ./...`.\r\n\r\nFile *x.go*:\r\n\r\n```go\r\npackage coverage\r\n\r\ntype covered struct {\r\n        f func()\r\n}\r\n\r\nvar c covered\r\n\r\nfunc BadCoverage() {\r\n        c.f = func() {}\r\n}\r\n\r\nfunc GoodCoverage1() {\r\n        c.f = func() { c = covered{} }\r\n}\r\n\r\nfunc GoodCoverage2() {\r\n        c.f = func() {}\r\n        c.f()\r\n}\r\n```\r\n\r\nFile *x_test.go*:\r\n\r\n```go\r\npackage coverage\r\n\r\nimport ""testing""\r\n\r\nfunc TestCoverage(t *testing.T) {\r\n        BadCoverage()\r\n        GoodCoverage1()\r\n        GoodCoverage2()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrect coverage of 66.7%.\r\n\r\n### What did you see instead?\r\n\r\nIncorrect coverage of 80% due to treating the lambda in the `BadCoverage` function as if it had been executed. Changing the body of the lambda to do anything at all ""fixes"" the coverage. Interestingly, the HTML produced by `go tool cover -html=cover` highlights the right-paren in red in the `BadCoverage` case. Which suggests a disconnect between the code highlighting and coverage calculation. Also, the incorrect value of 80% is also wrong, it seems to me, since it is treating the code as if 5/6 of the lines were executed which is 83.3%. It looks like it is treating the incorrect case as if 4/5 of the lines were executed. Which is another clue how the coverage data is being misinterpreted.\r\n\r\nFor the record, the *cover* data is (compare lines 3 and 5):\r\n\r\n```\r\nmode: set\r\nexample.com/t/x.go:9.20,10.15 1 1\r\nexample.com/t/x.go:10.16,10.17 0 0\r\nexample.com/t/x.go:13.22,14.15 1 1\r\nexample.com/t/x.go:14.15,14.32 1 0\r\nexample.com/t/x.go:17.22,18.15 1 1\r\nexample.com/t/x.go:19.2,19.7 1 1\r\nexample.com/t/x.go:18.16,18.17 0 1\r\n```",go\r\npackage coverage\r\n\r\ntype covered struct {\r\n        f func()\r\n}\r\n\r\nvar c covered\r\n\r\nfunc BadCoverage() {\r\n        c.f = func() {}\r\n}\r\n\r\nfunc GoodCoverage1() {\r\n        c.f = func() { c = covered{} }\r\n}\r\n\r\nfunc GoodCoverage2() {\r\n        c.f = func() {}\r\n        c.f()\r\n}\r\n
46787,"runtime: provide Pinner API for object pinning**Update**, 2021-10-20: the latest proposal is the API in https://github.com/golang/go/issues/46787#issuecomment-942547949.\r\n\r\n- - - \r\n\r\n## Problem Statement\r\n\r\nThe [pointer passing rules](https://golang.org/cmd/cgo/#hdr-Passing_pointers) state:\r\n\r\n> Go code may pass a Go pointer to C provided the Go memory to which it points does not contain any Go pointers. \r\n\r\nand\r\n> Go code may not store a Go pointer in C memory.\r\n\r\nThere are C APIs, most notably the `iovec` based ones for [vectored I/O](https://en.wikipedia.org/wiki/Vectored_I/O) which expect an array of structs that describe buffers to read to or write from. The naive approach would be to allocate both the array and the buffers with `C.malloc()` and then either work on the C buffers directly or copy the content to Go buffers. In the case of Go bindings for a C API, which is assumably the most common use case for Cgo, the users of the bindings shouldn't have to deal with C types, which means that all data has to be copied into Go allocated buffers. This of course impairs the performance, especially for larger buffers. Therefore it would be desirable to have a safe possibility to let the C API write directly into the Go buffers. This, however, is not possible because\r\n\r\n* either the buffer array is allocated in C memory, but then the pointers of the Go buffers can't be stored in it. (Storing Go pointers in C memory is forbidden.)\r\n* or the buffer array is allocated in Go memory and the Go buffer pointers are stored in it. But then the pointer to that buffer array can't be passed  to a C function. (Passing a Go pointer that points to memory containing other Go pointers to a C function is forbidden.)\r\n\r\nObviously, what is missing is a safe way to pin an arbitrary number of Go pointers in order to store them in C memory or in passed-to-C Go memory for the duration of a C call.\r\n \r\n## Workarounds\r\n\r\n### Break the rules and store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n\r\n\r\nbut `GODEBUG=cgocheck=2` would catch that.\r\n\r\nHowever, you can circumvent cgocheck=2 with this casting trick: \r\n\r\n\r\nThis might work, as long as the GC is not moving the pointers, which might be a fact as of now, but is not guaranteed. \r\n\r\n</details>\r\n\r\n### Break the rules and hide the Go pointer in  Go memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n\r\nAgain: This might work, as long as the GC is not moving the pointers. `GODEBUG=cgocheck=2` wouldn't complain about this.\r\n\r\n</details>\r\n\r\n### Break the rules and temporarily disable `cgocheck`\r\n<details><summary>(click)</summary>\r\n\r\nIf hiding the Go pointer as a uintptr like in the last workaround is not possible, passing Go memory that contains Go pointers usually bails out because of the default `cgocheck=1` setting. It is possible to disable temporarily `cgocheck` during a C call, which can especially useful, when the pointer have been ""pinned"" with one of the later workarounds. For example the `_cgoCheckPtr()` function, that is used in the generated Cgo code, can be  shadowed in the local scope, which disables the check for the following C calls in the scope:\r\n\r\n\r\n\r\nMaybe slightly more robust, is to export the runtime.dbgvars list:\r\n\r\n\r\n\r\n</details>\r\n\r\n### Use a C function to store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nThe rules allow that a C function stores a Go pointer in C memory for the duration of the call. So, for each Go pointer a C function can be called in a Go routine, that stores the Go pointer in C memory and then calls a Go function callback that waits for a release signal. After the release signal is received, the Go callback returns to the C function, the C function clears the C memory from the Go pointer, and returns as well, finishing the Go routine.\r\n\r\nThis approach fully complies with the rules, but is quite expensive, because each Go routine that calls a C function creates a new thread, that means one thread per stored Go pointer.\r\n\r\n</details>\r\n\r\n### Use the `//go:uintptrescapes` compiler directive\r\n<details><summary>(click)</summary>\r\n\r\n`//go:uintptrescapes` is a compiler directive that\r\n\r\n> specifies that the function's uintptr arguments may be pointer values that have been converted to uintptr and must be treated as such by the garbage collector.\r\n\r\nSo, similar to the workaround before, a Go function with this directive can be called in a Go routine, which simply waits for a release signal. When the signal is received, the function returns and sets the pointer free.\r\n\r\nThis seems already almost like a proper solution, so that I implemented a package with this approach, that allows to `Pin()` a Go pointer and `Poke()` it into C memory: [PtrGuard](https://github.com/ansiwen/ptrguard)\r\n\r\nBut there are still caveats. The compiler and the runtime (cgocheck=2) don't seem to know about which pointers are protected by the directive, because they still don't allow to pass Go memory containing these Go pointers to a C function, or to store the pointers in C memory. Therefore the two first workarounds are additionally necessary. Also there is the small overhead for the Go routine and the release signalling.\r\n\r\n</details>\r\n\r\n## Proposal\r\n\r\nIt would make Cgo a lot more usable for C APIs with more complex pointer handling like `iovec`, if there would be a programmatic way to provide what `//go:uintptrescapes` provides already through the backdoor. There should be a possibility to pin an arbitrary amount of Go pointers in the current scope, so that they are allowed to be stored in C memory or be contained in Go memory that is passed to a C function within this scope, for example with a `runtime.PtrEscapes()` function. It's cumbersome, that it's required to abuse Go routines, channels and casting tricks in order provide bindings to such C APIs. As long as the Go GC is not moving pointers, it could be a trivial implementation, but it would encapsulate this knowledge and would give users a guarantee.\r\n\r\nI know from the other issues and discussions around this topic that it's seen as dangerous if it is possible to pin an arbitrary amount of pointers. But\r\n\r\n1. it is possible to call an arbitrary amount of C or `//go:uintptrescapes` functions, therefore it is also possible to pin arbitrary amount of Go pointers already.\r\n2. it is necessary for some C APIs\r\n\r\nRelated issues: #32115, #40431\r\n\r\n/cc @ianlancetaylor @rsc @seebs \r\n\r\n**edit:** the first workaround had an incorrect statement.\r\n**edit 2:** add workarounds for disabling cgocheck",Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod|compiler/runtime,ansiwen,"**Update**, 2021-10-20: the latest proposal is the API in https://github.com/golang/go/issues/46787#issuecomment-942547949.\r\n\r\n- - - \r\n\r\n## Problem Statement\r\n\r\nThe [pointer passing rules](https://golang.org/cmd/cgo/#hdr-Passing_pointers) state:\r\n\r\n> Go code may pass a Go pointer to C provided the Go memory to which it points does not contain any Go pointers. \r\n\r\nand\r\n> Go code may not store a Go pointer in C memory.\r\n\r\nThere are C APIs, most notably the `iovec` based ones for [vectored I/O](https://en.wikipedia.org/wiki/Vectored_I/O) which expect an array of structs that describe buffers to read to or write from. The naive approach would be to allocate both the array and the buffers with `C.malloc()` and then either work on the C buffers directly or copy the content to Go buffers. In the case of Go bindings for a C API, which is assumably the most common use case for Cgo, the users of the bindings shouldn't have to deal with C types, which means that all data has to be copied into Go allocated buffers. This of course impairs the performance, especially for larger buffers. Therefore it would be desirable to have a safe possibility to let the C API write directly into the Go buffers. This, however, is not possible because\r\n\r\n* either the buffer array is allocated in C memory, but then the pointers of the Go buffers can't be stored in it. (Storing Go pointers in C memory is forbidden.)\r\n* or the buffer array is allocated in Go memory and the Go buffer pointers are stored in it. But then the pointer to that buffer array can't be passed  to a C function. (Passing a Go pointer that points to memory containing other Go pointers to a C function is forbidden.)\r\n\r\nObviously, what is missing is a safe way to pin an arbitrary number of Go pointers in order to store them in C memory or in passed-to-C Go memory for the duration of a C call.\r\n \r\n## Workarounds\r\n\r\n### Break the rules and store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n```go\r\nIovecCPtr.iov_base = unsafe.Pointer(myGoPtr)\r\n```\r\n\r\nbut `GODEBUG=cgocheck=2` would catch that.\r\n\r\nHowever, you can circumvent cgocheck=2 with this casting trick: \r\n\r\n```go\r\n*(*uintptr)(unsafe.Pointer(&IovecCPtr.iov_base)) = uintptr(myGoPtr)\r\n```\r\nThis might work, as long as the GC is not moving the pointers, which might be a fact as of now, but is not guaranteed. \r\n\r\n</details>\r\n\r\n### Break the rules and hide the Go pointer in  Go memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n```go\r\ntype iovecT struct {\r\n  iov_base uintptr\r\n  iov_len  C.size_t\r\n}\r\niovec := make([]iovecT, numberOfBuffers)\r\nfor i := range iovec {\r\n  bufferPtr := unsafe.Pointer(&bufferArray[i][0])\r\n  iovec[i].iov_base = uintptr(bufferPtr)\r\n  iovec[i].iov_len = C.size_t(len(bufferArray[i]))\r\n}\r\nn := C.my_iovec_read((*C.struct_iovec)(unsafe.Pointer(&iovec[0])), C.int(numberOfBuffers))\r\n```\r\n\r\nAgain: This might work, as long as the GC is not moving the pointers. `GODEBUG=cgocheck=2` wouldn't complain about this.\r\n\r\n</details>\r\n\r\n### Break the rules and temporarily disable `cgocheck`\r\n<details><summary>(click)</summary>\r\n\r\nIf hiding the Go pointer as a uintptr like in the last workaround is not possible, passing Go memory that contains Go pointers usually bails out because of the default `cgocheck=1` setting. It is possible to disable temporarily `cgocheck` during a C call, which can especially useful, when the pointer have been ""pinned"" with one of the later workarounds. For example the `_cgoCheckPtr()` function, that is used in the generated Cgo code, can be  shadowed in the local scope, which disables the check for the following C calls in the scope:\r\n\r\n```go\r\nfunc ... {\r\n  _cgoCheckPointer := func(interface{}, interface{}) {}\r\n  C.my_c_function(x, y)\r\n}\r\n```\r\n\r\nMaybe slightly more robust, is to export the runtime.dbgvars list:\r\n\r\n```go\r\ntype dbgVar struct {\r\n\tname  string\r\n\tvalue *int32\r\n}\r\n\r\n//go:linkname dbgvars runtime.dbgvars\r\nvar dbgvars []dbgVar\r\n\r\nvar cgocheck = func() *int32 {\r\n\tfor i := range dbgvars {\r\n\t\tif dbgvars[i].name == ""cgocheck"" {\r\n\t\t\treturn dbgvars[i].value\r\n\t\t}\r\n\t}\r\n\tpanic(""Couln't find cgocheck debug variable"")\r\n}()\r\n\r\nfunc ... {\r\n\tbefore := *cgocheck\r\n\t*cgocheck = 0\r\n\tC.my_c_function(x, y)\r\n\t*cgocheck = before\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Use a C function to store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nThe rules allow that a C function stores a Go pointer in C memory for the duration of the call. So, for each Go pointer a C function can be called in a Go routine, that stores the Go pointer in C memory and then calls a Go function callback that waits for a release signal. After the release signal is received, the Go callback returns to the C function, the C function clears the C memory from the Go pointer, and returns as well, finishing the Go routine.\r\n\r\nThis approach fully complies with the rules, but is quite expensive, because each Go routine that calls a C function creates a new thread, that means one thread per stored Go pointer.\r\n\r\n</details>\r\n\r\n### Use the `//go:uintptrescapes` compiler directive\r\n<details><summary>(click)</summary>\r\n\r\n`//go:uintptrescapes` is a compiler directive that\r\n\r\n> specifies that the function's uintptr arguments may be pointer values that have been converted to uintptr and must be treated as such by the garbage collector.\r\n\r\nSo, similar to the workaround before, a Go function with this directive can be called in a Go routine, which simply waits for a release signal. When the signal is received, the function returns and sets the pointer free.\r\n\r\nThis seems already almost like a proper solution, so that I implemented a package with this approach, that allows to `Pin()` a Go pointer and `Poke()` it into C memory: [PtrGuard](https://github.com/ansiwen/ptrguard)\r\n\r\nBut there are still caveats. The compiler and the runtime (cgocheck=2) don't seem to know about which pointers are protected by the directive, because they still don't allow to pass Go memory containing these Go pointers to a C function, or to store the pointers in C memory. Therefore the two first workarounds are additionally necessary. Also there is the small overhead for the Go routine and the release signalling.\r\n\r\n</details>\r\n\r\n## Proposal\r\n\r\nIt would make Cgo a lot more usable for C APIs with more complex pointer handling like `iovec`, if there would be a programmatic way to provide what `//go:uintptrescapes` provides already through the backdoor. There should be a possibility to pin an arbitrary amount of Go pointers in the current scope, so that they are allowed to be stored in C memory or be contained in Go memory that is passed to a C function within this scope, for example with a `runtime.PtrEscapes()` function. It's cumbersome, that it's required to abuse Go routines, channels and casting tricks in order provide bindings to such C APIs. As long as the Go GC is not moving pointers, it could be a trivial implementation, but it would encapsulate this knowledge and would give users a guarantee.\r\n\r\nI know from the other issues and discussions around this topic that it's seen as dangerous if it is possible to pin an arbitrary amount of pointers. But\r\n\r\n1. it is possible to call an arbitrary amount of C or `//go:uintptrescapes` functions, therefore it is also possible to pin arbitrary amount of Go pointers already.\r\n2. it is necessary for some C APIs\r\n\r\nRelated issues: #32115, #40431\r\n\r\n/cc @ianlancetaylor @rsc @seebs \r\n\r\n**edit:** the first workaround had an incorrect statement.\r\n**edit 2:** add workarounds for disabling cgocheck",go\r\nIovecCPtr.iov_base = unsafe.Pointer(myGoPtr)\r\n
46746,"reflect: add Value.Equal, Value.ComparableIn Go 1.17 we have introduced a conversion that can panic (#395).  This is the first case in which a conversion can panic.  This means that code that calls `reflect.Type.ConvertibleTo` and then, if that returns `true`, calls `reflect.Value.Convert`, can see an unexpected panic.  (See #46730.)\r\n\r\nSeparately, for a long time now it has been possible for a comparison to panic, when comparing two interface values that have the same dynamic type but for which the dynamic type is not comparable.  Therefore, for a long time code that calls `reflect.Type.Comparable` and then, if that returns true, uses the `==` operator can see an unexpected panic.  (This is a fairly uncommon case as the problem only arises when working with indirectly accessed interface types, such as pointers to interfaces.)\r\n\r\nI propose adding two new methods to `reflect.Value`.\r\n\r\n\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod|compiler/runtime,ianlancetaylor|hopehook,"In Go 1.17 we have introduced a conversion that can panic (#395).  This is the first case in which a conversion can panic.  This means that code that calls `reflect.Type.ConvertibleTo` and then, if that returns `true`, calls `reflect.Value.Convert`, can see an unexpected panic.  (See #46730.)\r\n\r\nSeparately, for a long time now it has been possible for a comparison to panic, when comparing two interface values that have the same dynamic type but for which the dynamic type is not comparable.  Therefore, for a long time code that calls `reflect.Type.Comparable` and then, if that returns true, uses the `==` operator can see an unexpected panic.  (This is a fairly uncommon case as the problem only arises when working with indirectly accessed interface types, such as pointers to interfaces.)\r\n\r\nI propose adding two new methods to `reflect.Value`.\r\n\r\n```Go\r\n// ConvertibleTo reports whether v can be converted to type t.\r\n// If this reports true then v.Convert(t) will not panic.\r\nfunc (v Value) ConvertibleTo(t Type) bool\r\n\r\n// Comparable reports whether the type of v is comparable.\r\n// If the type of v is an interface, this checks the dynamic type.\r\n// If this reports true then v.Interface() == x will not panic for any x.\r\nfunc (v Value) Comparable() bool\r\n```\r\n","Go\r\n// ConvertibleTo reports whether v can be converted to type t.\r\n// If this reports true then v.Convert(t) will not panic.\r\nfunc (v Value) ConvertibleTo(t Type) bool\r\n\r\n// Comparable reports whether the type of v is comparable.\r\n// If the type of v is an interface, this checks the dynamic type.\r\n// If this reports true then v.Interface() == x will not panic for any x.\r\nfunc (v Value) Comparable() bool\r\n"
46505,"spec: allow conversion from slice to arrayI recently tried to use the new #395 feature (for converting a slice to an array pointer: https://golang.org/cl/216424) in:\r\n\r\nhttps://go-review.googlesource.com/c/go/+/322329\r\n\r\nBut in review, it was pointed out that it was a little ugly, as what I wanted to return was an array, which required a dereference:\r\n\r\n\r\n\r\nIt would've been nicer if I could've just converted to an array instead:\r\n\r\n\r\n\r\nTalking to @ianlancetaylor and @griesemer, we couldn't remember great reasons for not also allowing this as part of #395. It does mean there's an subtle copy, but arguably the `*` dereference above is also a somewhat subtle copy.\r\n\r\nCould we also add support for converting to the array?\r\n\r\n/cc @katiehockman @josharian @rogpeppe  @mdempsky ",LanguageChange|Proposal|Proposal-Accepted|FrozenDueToAge|early-in-cycle|Proposal-FinalCommentPeriod,mdempsky|timothy-king,"I recently tried to use the new #395 feature (for converting a slice to an array pointer: https://golang.org/cl/216424) in:\r\n\r\nhttps://go-review.googlesource.com/c/go/+/322329\r\n\r\nBut in review, it was pointed out that it was a little ugly, as what I wanted to return was an array, which required a dereference:\r\n\r\n```go\r\n\treturn *(*[Size224]byte)(sum[:Size224])\r\n```\r\n\r\nIt would've been nicer if I could've just converted to an array instead:\r\n\r\n```go\r\n\treturn ([Size224]byte)(sum[:Size224])\r\n```\r\n\r\nTalking to @ianlancetaylor and @griesemer, we couldn't remember great reasons for not also allowing this as part of #395. It does mean there's an subtle copy, but arguably the `*` dereference above is also a somewhat subtle copy.\r\n\r\nCould we also add support for converting to the array?\r\n\r\n/cc @katiehockman @josharian @rogpeppe  @mdempsky ",go\r\n\treturn *(*[Size224]byte)(sum[:Size224])\r\n
46159,"regexp: support encoding.TextMarshaler### What did you do?\r\n\r\nMarshaling a compiled regular expression, for example as part of a JSON object, results in an empty object. Example:\r\n\r\n\r\nProduces:\r\n```\r\n{""foo"":{}}\r\n```\r\n([Playground](https://play.golang.org/p/gRl2CkOS7pm))\r\n\r\n### What did you expect to see?\r\n\r\nIt would seem more intuitive for a compiled regexp to marshal to its string representation, as if `.String()` were called. Example:\r\n\r\n```\r\n{""foo"":""foo?""}\r\n```\r\n\r\nI propose we implement the `encoding.TextMarshaler` interface to return the value produced by the `String()` method.\r\n\r\nStrictly speaking, this would be a breaking change, so may need to be targeted to Go 2.  On the other hand, in a practical sense, the current behavior is completely useless, so anyone depending on the current behavior probably already has a bug in their program.  \U0001f937\u200d\u2642\ufe0f",Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod,rsc,"### What did you do?\r\n\r\nMarshaling a compiled regular expression, for example as part of a JSON object, results in an empty object. Example:\r\n\r\n```golang\r\nre := regexp.MustCompile(""foo?"")\r\ndata, _ := json.Marshal(map[string]interface{}{""foo"":re})\r\nfmt.Println(string(data))\r\n```\r\nProduces:\r\n```\r\n{""foo"":{}}\r\n```\r\n([Playground](https://play.golang.org/p/gRl2CkOS7pm))\r\n\r\n### What did you expect to see?\r\n\r\nIt would seem more intuitive for a compiled regexp to marshal to its string representation, as if `.String()` were called. Example:\r\n\r\n```\r\n{""foo"":""foo?""}\r\n```\r\n\r\nI propose we implement the `encoding.TextMarshaler` interface to return the value produced by the `String()` method.\r\n\r\nStrictly speaking, this would be a breaking change, so may need to be targeted to Go 2.  On the other hand, in a practical sense, the current behavior is completely useless, so anyone depending on the current behavior probably already has a bug in their program.  \U0001f937\u200d\u2642\ufe0f","golang\r\nre := regexp.MustCompile(""foo?"")\r\ndata, _ := json.Marshal(map[string]interface{}{""foo"":re})\r\nfmt.Println(string(data))\r\n"
45609,"cmd/go: improve handling of symlinked module root for `go mod (tidy)`<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n(not relevant)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nFor easy navigation between projects, I have a ""jump"" directory on my machine,\r\nin which I keep symlinks to frequently used projects. `go mod tidy` ignores\r\nsymlinks (and warns about ignoring them), which is generally ok, but in situations\r\nwhere the whole module is detected to be in a ""symlinked"" path, it can be more\r\ndisruptive.\r\n\r\nTo reproduce this situation (you can run this inside a container to not clutter\r\nup your host);\r\n\r\n\r\n1. have a Go project on your machine\r\n\r\n    \r\n\r\n2. Create a ""projects"" directory with a symlink to the project\r\n\r\n    \r\n3. Navigate to the project using the symlink\r\n\r\n    \r\n\r\n4. Notice that `pwd` shows the path of the _symlink_\r\n\r\n    \r\n\r\n    (This is expected, and could be avoided by using `cd -P` instead of `cd`)\r\n\r\n5. Run `go mod tidy` (usually, this would be _after_ updating `go.mod` to update some dependencies)\r\n\r\n    \r\n\r\n6. Find out that all dependencies were removed from `go.mod`, and `go.sum` tobe emptied\r\n\r\n    \r\n    ```patch\r\n    diff --git a/go.mod b/go.mod\r\n    index d9b9ad5..ce733f8 100644\r\n    --- a/go.mod\r\n    +++ b/go.mod\r\n    @@ -1,5 +1,3 @@\r\n     module github.com/moby/spdystream\r\n    \r\n     go 1.13\r\n    -\r\n    -require github.com/gorilla/websocket v1.4.2\r\n    diff --git a/go.sum b/go.sum\r\n    index 85efffd..e69de29 100644\r\n    --- a/go.sum\r\n    +++ b/go.sum\r\n    @@ -1,2 +0,0 @@\r\n    -github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\r\n    -github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\n    ```\r\n\r\n\r\nWhile it's generally ok to ignore symlinks _within_ the project/module (there must be [reasons for that](https://github.com/golang/go/blob/954879d6d19175a5f0066c0ac0df0edda7f731b3/src/cmd/go/internal/modload/search.go#L88-L95)), it's somewhat disruptive in this situation; especially in situations where you just edited `go.mod`, and then see your changes being wiped.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhat I _expected_ to see for step `5.`, is `go mod (tidy)` to either:\r\n\r\n- follow the symlink to `/go/src/github.com/moby/spdystream/` and resolve modules from inside that context\r\n- or `go mod tidy` to produce an _error_ instead of a _warning_, and terminate _before_ modifying `go.mod` and `go.sum`\r\n\r\n\r\n### What did you see instead?\r\n\r\nAll dependencies removed from `go.mod`, and `go.sum` emptied\r\n",NeedsInvestigation|FrozenDueToAge|GoCommand,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n(not relevant)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nFor easy navigation between projects, I have a ""jump"" directory on my machine,\r\nin which I keep symlinks to frequently used projects. `go mod tidy` ignores\r\nsymlinks (and warns about ignoring them), which is generally ok, but in situations\r\nwhere the whole module is detected to be in a ""symlinked"" path, it can be more\r\ndisruptive.\r\n\r\nTo reproduce this situation (you can run this inside a container to not clutter\r\nup your host);\r\n\r\n\r\n1. have a Go project on your machine\r\n\r\n    ```bash\r\n    git clone https://github.com/moby/spdystream /go/src/github.com/moby/spdystream\r\n    ```\r\n\r\n2. Create a ""projects"" directory with a symlink to the project\r\n\r\n    ```bash\r\n    mkdir -p /projects \\\r\n      && ln -s /go/src/github.com/moby/spdystream/ /projects/spdystream\r\n    ```\r\n3. Navigate to the project using the symlink\r\n\r\n    ```bash\r\n    cd /projects/spdystream\r\n    ```\r\n\r\n4. Notice that `pwd` shows the path of the _symlink_\r\n\r\n    ```bash\r\n    pwd\r\n    /projects/spdystream\r\n    ```\r\n\r\n    (This is expected, and could be avoided by using `cd -P` instead of `cd`)\r\n\r\n5. Run `go mod tidy` (usually, this would be _after_ updating `go.mod` to update some dependencies)\r\n\r\n    ```bash\r\n    go mod tidy\r\n    warning: ignoring symlink /projects/spdystream\r\n    go: warning: ""all"" matched no packages\r\n    ```\r\n\r\n6. Find out that all dependencies were removed from `go.mod`, and `go.sum` tobe emptied\r\n\r\n    ```bash\r\n    git diff\r\n    ```\r\n    ```patch\r\n    diff --git a/go.mod b/go.mod\r\n    index d9b9ad5..ce733f8 100644\r\n    --- a/go.mod\r\n    +++ b/go.mod\r\n    @@ -1,5 +1,3 @@\r\n     module github.com/moby/spdystream\r\n    \r\n     go 1.13\r\n    -\r\n    -require github.com/gorilla/websocket v1.4.2\r\n    diff --git a/go.sum b/go.sum\r\n    index 85efffd..e69de29 100644\r\n    --- a/go.sum\r\n    +++ b/go.sum\r\n    @@ -1,2 +0,0 @@\r\n    -github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\r\n    -github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\n    ```\r\n\r\n\r\nWhile it's generally ok to ignore symlinks _within_ the project/module (there must be [reasons for that](https://github.com/golang/go/blob/954879d6d19175a5f0066c0ac0df0edda7f731b3/src/cmd/go/internal/modload/search.go#L88-L95)), it's somewhat disruptive in this situation; especially in situations where you just edited `go.mod`, and then see your changes being wiped.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhat I _expected_ to see for step `5.`, is `go mod (tidy)` to either:\r\n\r\n- follow the symlink to `/go/src/github.com/moby/spdystream/` and resolve modules from inside that context\r\n- or `go mod tidy` to produce an _error_ instead of a _warning_, and terminate _before_ modifying `go.mod` and `go.sum`\r\n\r\n\r\n### What did you see instead?\r\n\r\nAll dependencies removed from `go.mod`, and `go.sum` emptied\r\n",bash\r\n    git clone https://github.com/moby/spdystream /go/src/github.com/moby/spdystream\r\n    
45424,"gollvm: can't find some C std pthread_xxx  functions<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16 gollvm LLVM 13.0.0git linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""off""\r\nGOARCH=""amd64""\r\nGOBIN=""/home/jxzhang/workspace/gowork/bin""\r\nGOCACHE=""/home/jxzhang/.cache/go-build""\r\nGOENV=""/home/jxzhang/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/jxzhang/workspace/gowork/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/jxzhang/workspace/gowork""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/jxzhang/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/jxzhang/.local/gollvm/tools""\r\nGOVCS=""""\r\nGOVERSION=""go1.16 gollvm LLVM 13.0.0git""\r\nGCCGO=""/home/jxzhang/.local/gollvm/bin/llvm-goc""\r\nAR=""ar""\r\nCC=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang""\r\nCXX=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4207555597=/tmp/go-build -gno-record-gcc-switches -funwind-tables""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nI wrote a cgo demo which call pthread std functions and tried to compile it with gollvm\r\nHere is a link on [play.golang- https://play.golang.org/p/PiaY0AIGprl](https://play.golang.org/p/PiaY0AIGprl)\r\nThough the code can't run on play.golang for some reason...\r\n\r\n\r\n### What did you expect to see?\r\nCompile succeed with gollvm\r\n\r\n\r\n### What did you see instead?\r\nAn error caused by an undefined reference occured \r\n```\r\nccode.c:11: error: undefined reference to 'pthread_join'\r\n```\r\nIn addition to this function, there are some other functions that also have this error:\r\n`pthread_once`, `pthread_mutexattr_init`, `pthread_mutexattr_settype`, `pthread_key_create`, `pthread_getspecific`, `pthread_mutexattr_destroy` ...\r\n\r\n### Some extra observations\r\nThese functions above seems different between `pthread_create` which can be referenced normally\r\n\r\n\r\n\r\n",NeedsInvestigation,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16 gollvm LLVM 13.0.0git linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""off""\r\nGOARCH=""amd64""\r\nGOBIN=""/home/jxzhang/workspace/gowork/bin""\r\nGOCACHE=""/home/jxzhang/.cache/go-build""\r\nGOENV=""/home/jxzhang/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/jxzhang/workspace/gowork/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/jxzhang/workspace/gowork""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/jxzhang/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/jxzhang/.local/gollvm/tools""\r\nGOVCS=""""\r\nGOVERSION=""go1.16 gollvm LLVM 13.0.0git""\r\nGCCGO=""/home/jxzhang/.local/gollvm/bin/llvm-goc""\r\nAR=""ar""\r\nCC=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang""\r\nCXX=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4207555597=/tmp/go-build -gno-record-gcc-switches -funwind-tables""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nI wrote a cgo demo which call pthread std functions and tried to compile it with gollvm\r\nHere is a link on [play.golang- https://play.golang.org/p/PiaY0AIGprl](https://play.golang.org/p/PiaY0AIGprl)\r\nThough the code can't run on play.golang for some reason...\r\n\r\n\r\n### What did you expect to see?\r\nCompile succeed with gollvm\r\n\r\n\r\n### What did you see instead?\r\nAn error caused by an undefined reference occured \r\n```\r\nccode.c:11: error: undefined reference to 'pthread_join'\r\n```\r\nIn addition to this function, there are some other functions that also have this error:\r\n`pthread_once`, `pthread_mutexattr_init`, `pthread_mutexattr_settype`, `pthread_key_create`, `pthread_getspecific`, `pthread_mutexattr_destroy` ...\r\n\r\n### Some extra observations\r\nThese functions above seems different between `pthread_create` which can be referenced normally\r\n\r\n```shell\r\njx $  nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_create           \r\n00000000010831e0 t __wrap_pthread_create\r\n                 w pthread_create\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_join\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_once  \r\n                 w pthread_once\r\n\r\n```\r\n\r\n",shell\r\njx $  nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_create           \r\n00000000010831e0 t __wrap_pthread_create\r\n                 w pthread_create\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_join\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_once  \r\n                 w pthread_once\r\n\r\n
44410,"go/types, types2: type-checker internal type printing doesn't print embedded fields that are alias types correctlyGiven\r\n\r\nthe struct `S` will be printed with an embedded field named `map[string]int` because we have lost information about its alias name.\r\n\r\nThis affects debugging and test cases, e.g., `src/go/internal/gccgoimporter/importer_test.go:97` wants `""type S struct{b int; A2""` but we only have `""type S struct{b int; map[Y]Z}""`.\r\n\r\nThe relevant printing code is in `go/types/typestring.go`, function `writeType`.",NeedsFix,griesemer,"Given\r\n```Go\r\ntype E = map[string]int\r\ntype S struct {\r\n   E\r\n}\r\n```\r\nthe struct `S` will be printed with an embedded field named `map[string]int` because we have lost information about its alias name.\r\n\r\nThis affects debugging and test cases, e.g., `src/go/internal/gccgoimporter/importer_test.go:97` wants `""type S struct{b int; A2""` but we only have `""type S struct{b int; map[Y]Z}""`.\r\n\r\nThe relevant printing code is in `go/types/typestring.go`, function `writeType`.",Go\r\ntype E = map[string]int\r\ntype S struct {\r\n   E\r\n}\r\n
43163,"x/tools/cmd/ssadump: interpreting causes a crash### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15.5 linux/amd64\r\n</pre>\r\n\r\nI've tested both Go 1.15.5 and Go 1.14.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, in the latest major release and with x/tools commit d93e913c1a5829629e8005c31b45b96a7b143a16.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke:/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build217519519=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code in a directory named `const`:\r\n\r\n\r\n\r\nI run it with `ssadump -run .` when I'm in that directory (or alternatively `ssadump -interp=RT -run .`).\r\n\r\n### What did you expect to see?\r\n\r\nI expect it to print ""test"".\r\n\r\n### What did you see instead?\r\n\r\nIt crashes:\r\n\r\n```\r\n$ ssadump -run .\r\nRunning: _/home/ayke/tmp/const\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n```\r\n$ ssadump -interp=RT -run .\r\nRunning: _/home/ayke/tmp/const\r\nEntering _/home/ayke/tmp/const.init.\r\n.0:\r\n\t t0 = *init$guard\r\n\t if t0 goto 2 else 1\r\n.1:\r\n\t *init$guard = true:bool\r\n\t t1 = runtime.init()\r\nEntering runtime.init.\r\n[... removed excessive log messages...]\r\nEntering runtime.float64frombits at /usr/local/go/src/runtime/float.go:51:6.\r\n.0:\r\n\t t0 = new uint64 (b)\r\n\t *t0 = b\r\n\t t1 = convert unsafe.Pointer <- *uint64 (t0)\r\n\t t2 = convert *float64 <- unsafe.Pointer (t1)\r\n\t t3 = *t2\r\nLeaving runtime.float64frombits, resuming runtime.init at /usr/local/go/src/runtime/float.go:9:26.\r\nLeaving runtime.init, resuming _/home/ayke/tmp/const.init.\r\nLeaving _/home/ayke/tmp/const.init.\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x689fa6]\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/ssa/interp.load(0x767420, 0x8cf9c0, 0x0, 0x400000c000487040, 0x3)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/value.go:338 +0x1a6\r\ngolang.org/x/tools/go/ssa/interp.unop(0xc0036288a0, 0x6a6860, 0x0, 0x6a6860, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/ops.go:847 +0x739\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d43500, 0x76dd00, 0xc0036288a0, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:195 +0x745\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d43500)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42f00, 0x18600a, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42f00, 0x18600a, 0x7053c0, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42f00, 0x76c740, 0xc000a2ac80, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42f00)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42e80, 0x0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42e80, 0x0, 0x7053c0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x18, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42e80, 0x76c740, 0xc001265080, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42e80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0x0, 0x0, 0xc00153e500, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0x0, 0x0, 0x7053c0, 0xc00153e500, 0x0, 0x0, 0x0, 0xc000605bf8, 0x1f)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.Interpret(0xc001cbd620, 0x3, 0x76ad20, 0xc00018c080, 0xc0000cbdc0, 0x15, 0x0, 0x0, 0x0, 0x2)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:701 +0x5ec\r\nmain.doMain(0x0, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:170 +0x78c\r\nmain.main()\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:64 +0x26\r\n```\r\n\r\n---\r\n\r\nWhat I _really_ wanted to report was what appears to be a bug in either go/constant or x/tools/go/ssa, but I'm not sure how to reproduce this in an easy way with `ssadump` crashing on any program that I feed it.",Unfortunate|FrozenDueToAge|Tools,timothy-king,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15.5 linux/amd64\r\n</pre>\r\n\r\nI've tested both Go 1.15.5 and Go 1.14.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, in the latest major release and with x/tools commit d93e913c1a5829629e8005c31b45b96a7b143a16.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke:/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build217519519=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code in a directory named `const`:\r\n\r\n```go\r\npackage main\r\n\r\nimport _ ""runtime""\r\n\r\nfunc main() {\r\n\tprintln(""test"")\r\n}\r\n```\r\n\r\nI run it with `ssadump -run .` when I'm in that directory (or alternatively `ssadump -interp=RT -run .`).\r\n\r\n### What did you expect to see?\r\n\r\nI expect it to print ""test"".\r\n\r\n### What did you see instead?\r\n\r\nIt crashes:\r\n\r\n```\r\n$ ssadump -run .\r\nRunning: _/home/ayke/tmp/const\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n```\r\n$ ssadump -interp=RT -run .\r\nRunning: _/home/ayke/tmp/const\r\nEntering _/home/ayke/tmp/const.init.\r\n.0:\r\n\t t0 = *init$guard\r\n\t if t0 goto 2 else 1\r\n.1:\r\n\t *init$guard = true:bool\r\n\t t1 = runtime.init()\r\nEntering runtime.init.\r\n[... removed excessive log messages...]\r\nEntering runtime.float64frombits at /usr/local/go/src/runtime/float.go:51:6.\r\n.0:\r\n\t t0 = new uint64 (b)\r\n\t *t0 = b\r\n\t t1 = convert unsafe.Pointer <- *uint64 (t0)\r\n\t t2 = convert *float64 <- unsafe.Pointer (t1)\r\n\t t3 = *t2\r\nLeaving runtime.float64frombits, resuming runtime.init at /usr/local/go/src/runtime/float.go:9:26.\r\nLeaving runtime.init, resuming _/home/ayke/tmp/const.init.\r\nLeaving _/home/ayke/tmp/const.init.\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x689fa6]\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/ssa/interp.load(0x767420, 0x8cf9c0, 0x0, 0x400000c000487040, 0x3)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/value.go:338 +0x1a6\r\ngolang.org/x/tools/go/ssa/interp.unop(0xc0036288a0, 0x6a6860, 0x0, 0x6a6860, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/ops.go:847 +0x739\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d43500, 0x76dd00, 0xc0036288a0, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:195 +0x745\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d43500)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42f00, 0x18600a, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42f00, 0x18600a, 0x7053c0, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42f00, 0x76c740, 0xc000a2ac80, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42f00)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42e80, 0x0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42e80, 0x0, 0x7053c0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x18, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42e80, 0x76c740, 0xc001265080, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42e80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0x0, 0x0, 0xc00153e500, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0x0, 0x0, 0x7053c0, 0xc00153e500, 0x0, 0x0, 0x0, 0xc000605bf8, 0x1f)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.Interpret(0xc001cbd620, 0x3, 0x76ad20, 0xc00018c080, 0xc0000cbdc0, 0x15, 0x0, 0x0, 0x0, 0x2)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:701 +0x5ec\r\nmain.doMain(0x0, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:170 +0x78c\r\nmain.main()\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:64 +0x26\r\n```\r\n\r\n---\r\n\r\nWhat I _really_ wanted to report was what appears to be a bug in either go/constant or x/tools/go/ssa, but I'm not sure how to reproduce this in an easy way with `ssadump` crashing on any program that I feed it.","go\r\npackage main\r\n\r\nimport _ ""runtime""\r\n\r\nfunc main() {\r\n\tprintln(""test"")\r\n}\r\n"
43058,"x/tools/gopls: cannot navigate unsafe package from vscode thru gopls#### What did you do?\r\nedit below golang code in vscode with gopls used, try navigate Sizeof function to open unsafe.go\r\n\r\n\r\n#### What did you expect to see?\r\nnavigate from unsafe usage to unsafe.go in `vscode` when using gopls. if gopls is not used, vscode works to navigate on unsafe package\r\n\r\n#### What did you see instead?\r\nfail to navigate, showing ""No definition found for 'Sizeof'"", open unsafe.go in the same vscode window, will see the following problem on package line\r\n![image](https://user-images.githubusercontent.com/2386133/101446413-44dd6080-395e-11eb-9d30-2b843cde04ed.png)\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.5.5\r\n    golang.org/x/tools/gopls@v0.5.5 h1:YBLs2WCwxx6mBF98Y6/mDIpKhP4Dt4Dz2q6LnMRBpDw=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.1 h1:JFrFEBb2xKufg6XkJsJr+WbKb4FQlURi5RUcBveYu9k=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=\r\n    golang.org/x/sync@v0.0.0-20201020160332-67f06af15bc9 h1:SQFwaSi55rU7vdNs9Yr0Z324VNlrF+0wMqRXT4St8ck=\r\n    golang.org/x/tools@v0.0.0-20201204180437-c46b611624b3 h1:uxH+MECLNmX/vsPe4txyeQ1LCmhdUxf7p4hjkHexg+c=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.0.1-2020.1.6 h1:W18jzjh8mfPez+AwGLxmOImucz/IFjpNlrKVnaj2YVc=\r\n    mvdan.cc/gofumpt@v0.0.0-20200927160801-5bfeb2e70dd6 h1:z+/YqapuV7VZPvBb3GYmuEJbA88M3PFUxaHilHYVCpQ=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n```\r\n",NeedsInvestigation|gopls|Tools,adonovan,"#### What did you do?\r\nedit below golang code in vscode with gopls used, try navigate Sizeof function to open unsafe.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc main() {\r\n\taccount := 100\r\n\tfmt.Println(unsafe.Sizeof(account))\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\nnavigate from unsafe usage to unsafe.go in `vscode` when using gopls. if gopls is not used, vscode works to navigate on unsafe package\r\n\r\n#### What did you see instead?\r\nfail to navigate, showing ""No definition found for 'Sizeof'"", open unsafe.go in the same vscode window, will see the following problem on package line\r\n![image](https://user-images.githubusercontent.com/2386133/101446413-44dd6080-395e-11eb-9d30-2b843cde04ed.png)\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.5.5\r\n    golang.org/x/tools/gopls@v0.5.5 h1:YBLs2WCwxx6mBF98Y6/mDIpKhP4Dt4Dz2q6LnMRBpDw=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.1 h1:JFrFEBb2xKufg6XkJsJr+WbKb4FQlURi5RUcBveYu9k=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=\r\n    golang.org/x/sync@v0.0.0-20201020160332-67f06af15bc9 h1:SQFwaSi55rU7vdNs9Yr0Z324VNlrF+0wMqRXT4St8ck=\r\n    golang.org/x/tools@v0.0.0-20201204180437-c46b611624b3 h1:uxH+MECLNmX/vsPe4txyeQ1LCmhdUxf7p4hjkHexg+c=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.0.1-2020.1.6 h1:W18jzjh8mfPez+AwGLxmOImucz/IFjpNlrKVnaj2YVc=\r\n    mvdan.cc/gofumpt@v0.0.0-20200927160801-5bfeb2e70dd6 h1:z+/YqapuV7VZPvBb3GYmuEJbA88M3PFUxaHilHYVCpQ=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc main() {\r\n\taccount := 100\r\n\tfmt.Println(unsafe.Sizeof(account))\r\n}\r\n"
42563,"make.{bash,bat,rc}, cmd/dist: important note to place right go binary in PATH is not printed via make.bash### What did you do?\r\n\r\n```\r\n$ git clone https://go.googlesource.com/go $HOME/gotip\r\n$ cd $HOME/gotip/src\r\nsrc $ ./make.bash\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n*** You need to add /Users/gopher/gotip/bin to your PATH.\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n```\r\n\r\nNote the ""*** You need to add /Users/gopher/gotip/bin to your PATH."" line is missing.\r\n\r\nThat line is important because if it isn't done, and there happens to be another `go` binary in PATH (quite likely for Go developers), the wrong `go` binary will be used.\r\n\r\n### Cause\r\n\r\n`make.bash` includes these lines:\r\n\r\n```\r\n# -e doesn't propagate out of eval, so check success by hand.\r\neval $(./cmd/dist/dist env -p || echo FAIL=true)\r\nif [ ""$FAIL"" = true ]; then\r\n\texit 1\r\nfi\r\n```\r\n\r\n`dist env -p` includes a modified version of PATH in its output, which is then `eval`ed.\r\n\r\nThe banner is printed afterwards with a check for whether PATH contains GOROOT/bin:\r\n\r\n\r\n\r\nWhere `os.Getenv(""PATH"")` ends up containing `gobin`, but only because `make.bash` added it temporarily.\r\n\r\nAs far as I can tell, this same problem affected `all.bash` 8 years ago in #3699, and it was fixed in [CL 6272048](https://golang.org/cl/6272048) and [CL 6525049](https://golang.org/cl/6525049), so this is a matter of resolving this for when `make.bash` (or make.bat, make.rc) is invoked directly.",NeedsFix|DevExp,dmitshur,"### What did you do?\r\n\r\n```\r\n$ git clone https://go.googlesource.com/go $HOME/gotip\r\n$ cd $HOME/gotip/src\r\nsrc $ ./make.bash\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n*** You need to add /Users/gopher/gotip/bin to your PATH.\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n```\r\n\r\nNote the ""*** You need to add /Users/gopher/gotip/bin to your PATH."" line is missing.\r\n\r\nThat line is important because if it isn't done, and there happens to be another `go` binary in PATH (quite likely for Go developers), the wrong `go` binary will be used.\r\n\r\n### Cause\r\n\r\n`make.bash` includes these lines:\r\n\r\n```\r\n# -e doesn't propagate out of eval, so check success by hand.\r\neval $(./cmd/dist/dist env -p || echo FAIL=true)\r\nif [ ""$FAIL"" = true ]; then\r\n\texit 1\r\nfi\r\n```\r\n\r\n`dist env -p` includes a modified version of PATH in its output, which is then `eval`ed.\r\n\r\nThe banner is printed afterwards with a check for whether PATH contains GOROOT/bin:\r\n\r\n```Go\r\nif !strings.Contains(pathsep+os.Getenv(""PATH"")+pathsep, pathsep+gobin+pathsep) {\r\n\txprintf(""*** You need to add %s to your PATH.\\n"", gobin)\r\n}\r\n```\r\n\r\nWhere `os.Getenv(""PATH"")` ends up containing `gobin`, but only because `make.bash` added it temporarily.\r\n\r\nAs far as I can tell, this same problem affected `all.bash` 8 years ago in #3699, and it was fixed in [CL 6272048](https://golang.org/cl/6272048) and [CL 6525049](https://golang.org/cl/6525049), so this is a matter of resolving this for when `make.bash` (or make.bat, make.rc) is invoked directly.","Go\r\nif !strings.Contains(pathsep+os.Getenv(""PATH"")+pathsep, pathsep+gobin+pathsep) {\r\n\txprintf(""*** You need to add %s to your PATH.\\n"", gobin)\r\n}\r\n"
41988,cmd/compile: not inlined closures can't inline inner closures### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\nWrote code:\r\n\r\n\r\n</details>\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`getInt` is inlined into `outer`. `outer` escapes to the heap.\r\n\r\n### What did you see instead?\r\n\r\n`getInt` isn't inlined into `outer`. Both `outer` and `getInt` escape to the heap.,Performance|NeedsInvestigation|compiler/runtime,danscales,### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\nWrote code:\r\n\r\n```go\r\npackage go_closures\r\n\r\nfunc callInt(val int) int {\r\n\tgetInt := func() int { return val }\r\n\treturn callFn(getInt)\r\n}\r\n\r\nfunc callFn(getInt func() int) int {\r\n\touter := func() int { return getInt() }\r\n\treturn globalFunc(outer)\r\n}\r\n\r\nvar globalFunc = func(f func() int) int {\r\n\treturn f()\r\n}\r\n```\r\n</details>\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`getInt` is inlined into `outer`. `outer` escapes to the heap.\r\n\r\n### What did you see instead?\r\n\r\n`getInt` isn't inlined into `outer`. Both `outer` and `getInt` escape to the heap.,go\r\npackage go_closures\r\n\r\nfunc callInt(val int) int {\r\n\tgetInt := func() int { return val }\r\n\treturn callFn(getInt)\r\n}\r\n\r\nfunc callFn(getInt func() int) int {\r\n\touter := func() int { return getInt() }\r\n\treturn globalFunc(outer)\r\n}\r\n\r\nvar globalFunc = func(f func() int) int {\r\n\treturn f()\r\n}\r\n
40882,"spec: document that recursive type declarations through type parameters are not permittedHere's a type:\r\n\r\n\r\nCurrently `go2go` complains with confusing errors; the first declaration fails with `Rec is not a generic type` (it obviously is) and the equivalent `type Rec[type T Rec] interface{ r(T) }` fails with `Rec is not an interface` (it also obviously is).\r\n\r\nI assume this shouldn't be allowed: to know if `Rec[T]` is a valid type for `T` to implement, we need to know if `T` implements `Rec[T]`, which is circular.  But I can't find anything in the draft design that would prohibit it.\r\n\r\n([playground for convenience](https://go2goplay.golang.org/p/TsopGuR9oFR))",Documentation|FrozenDueToAge,griesemer,"Here's a type:\r\n```go\r\ntype Rec[type T Rec[T]] interface{ r(T) }\r\n```\r\n\r\nCurrently `go2go` complains with confusing errors; the first declaration fails with `Rec is not a generic type` (it obviously is) and the equivalent `type Rec[type T Rec] interface{ r(T) }` fails with `Rec is not an interface` (it also obviously is).\r\n\r\nI assume this shouldn't be allowed: to know if `Rec[T]` is a valid type for `T` to implement, we need to know if `T` implements `Rec[T]`, which is circular.  But I can't find anything in the draft design that would prohibit it.\r\n\r\n([playground for convenience](https://go2goplay.golang.org/p/TsopGuR9oFR))",go\r\ntype Rec[type T Rec[T]] interface{ r(T) }\r\n
39742,"go/types, types2: better error message for failing type inference### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +0a030888da Sat Jun 20 04:46:40 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\nI felt upon this while toying with `go2go`.\r\nThis is the minimal reproducible example illustrating what I think is a bug/problem.\r\n\r\n\r\nhttps://go2goplay.golang.org/p/TBApH4WbSxk\r\n\r\n### What did you expect to see?\r\n\r\nFirst, I think  `int` should not have to be provided explicitly since it can be inferred from `v`.\r\nAlso `v` does match `iterable(T)` since `iterable` is the empty constraint.",NeedsInvestigation|FrozenDueToAge,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +0a030888da Sat Jun 20 04:46:40 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\nI felt upon this while toying with `go2go`.\r\nThis is the minimal reproducible example illustrating what I think is a bug/problem.\r\n\r\n```go\r\ntype (\r\n\titerable(type T)   interface{} // empty constraint\r\n\tbinaryTree(type T) struct{}\r\n)\r\n\r\nfunc forEach(type T)(t iterable(T)) {}\r\n\r\nfunc main() {\r\n\tv := binaryTree(int){}\r\n\r\n\tforEach(v) // error: type binaryTree(int) of v does not match iterable(T)\r\n\t// forEach(int)(v) // ok\r\n}\r\n```\r\nhttps://go2goplay.golang.org/p/TBApH4WbSxk\r\n\r\n### What did you expect to see?\r\n\r\nFirst, I think  `int` should not have to be provided explicitly since it can be inferred from `v`.\r\nAlso `v` does match `iterable(T)` since `iterable` is the empty constraint.",go\r\ntype (\r\n\titerable(type T)   interface{} // empty constraint\r\n\tbinaryTree(type T) struct{}\r\n)\r\n\r\nfunc forEach(type T)(t iterable(T)) {}\r\n\r\nfunc main() {\r\n\tv := binaryTree(int){}\r\n\r\n\tforEach(v) // error: type binaryTree(int) of v does not match iterable(T)\r\n\t// forEach(int)(v) // ok\r\n}\r\n
38931,"runtime: preemption in startTemplateThread may cause infinite hangSummary:\r\n\r\nIf a call to `startTemplateThread` is preempted by a gcstop before creating the new thread, then newmHandoff looks initialized even though it is not. When other locked Ms stop they may handoff their (now _Pidle) P to a new M. Creation of that new M will never occur because the template thread is not running, and stopTheWorldWithSema will hang forever waiting for the P to enter _Pgcstop.\r\n\r\nDetails:\r\n\r\nWhen a locked M wants to start a new M, it hands off to the template thread to actually call clone and start the thread. The template thread is lazily created the first time a thread is locked (or if cgo is in use).\r\n\r\nstoplockedm will release the P (_Pidle), then call handoffp to give the P to another M. In the case of a pending STW, one of two things can happen:\r\n\r\n1. handoffp starts an M, which does acquirep followed by schedule, which will finally enter _Pgcstop.\r\n\r\n2. handoffp immediately enters _Pgcstop. This only occurs if the P has no local work, GC work, and no spinning M is required.\r\n\r\nIf handoffp starts an M, and must create a new M to do so, then newm simply queue the M on newmHandoff for the template thread to do the clone.\r\n\r\nIf the template thread was never fully created because startTemplateThread is stopped, then that thread will never get created, and the handoff P will never enter _Pgcstop.\r\n\r\nTo visualize, consider two threads running when a STW occurs:\r\n\r\n```\r\n  T1                                        T2\r\n--------------------------------         -----------------------------\r\n\r\nLockOSThread                             LockOSThread\r\n  haveTemplateThread == 0\r\n  startTemplateThread\r\n    haveTemplateThread = 1\r\n    newm                                   haveTemplateThread == 1\r\n      preempt -> schedule                  g.m.lockedExt++\r\n        gcstopm -> _Pgcstop                g.m.lockedg = ...\r\n        park                               g.lockedm = ...\r\n                                           return\r\n\r\n                                        ... (any code)\r\n                                          preempt -> schedule\r\n                                            stoplockedm\r\n                                              releasep -> _Pidle\r\n                                              handoffp\r\n                                                startm (one of first three handoffp cases)\r\n                                                 newm\r\n                                                   g.m.lockedExt != 0\r\n                                                   Add to newmHandoff, return\r\n                                              park\r\n```\r\n\r\nNote that T2's P is sitting in _Pidle. It expects the template thread to clone the new M, which would then acquirep, schedule, and gcstopm. Since the template thread doesn't exist yet, this never happens, and stopTheWorldWithSema waits forever for the last P to enter stop.\r\n\r\nI believe the best fix for this is to disable preemption in startTemplateThread (acquirem) so we can guarantee that the template thread will eventually exist after haveTemplateThread = 1.\r\n\r\nI've reproduced this issue with an internal program, and the suggested acquirem fixes that case. This should be reproducible with something like the below program, but I haven't quite managed to get that to trigger the bug:\r\n\r\n\r\n\r\ncc @aclements ",NeedsFix|FrozenDueToAge,prattmic,"Summary:\r\n\r\nIf a call to `startTemplateThread` is preempted by a gcstop before creating the new thread, then newmHandoff looks initialized even though it is not. When other locked Ms stop they may handoff their (now _Pidle) P to a new M. Creation of that new M will never occur because the template thread is not running, and stopTheWorldWithSema will hang forever waiting for the P to enter _Pgcstop.\r\n\r\nDetails:\r\n\r\nWhen a locked M wants to start a new M, it hands off to the template thread to actually call clone and start the thread. The template thread is lazily created the first time a thread is locked (or if cgo is in use).\r\n\r\nstoplockedm will release the P (_Pidle), then call handoffp to give the P to another M. In the case of a pending STW, one of two things can happen:\r\n\r\n1. handoffp starts an M, which does acquirep followed by schedule, which will finally enter _Pgcstop.\r\n\r\n2. handoffp immediately enters _Pgcstop. This only occurs if the P has no local work, GC work, and no spinning M is required.\r\n\r\nIf handoffp starts an M, and must create a new M to do so, then newm simply queue the M on newmHandoff for the template thread to do the clone.\r\n\r\nIf the template thread was never fully created because startTemplateThread is stopped, then that thread will never get created, and the handoff P will never enter _Pgcstop.\r\n\r\nTo visualize, consider two threads running when a STW occurs:\r\n\r\n```\r\n  T1                                        T2\r\n--------------------------------         -----------------------------\r\n\r\nLockOSThread                             LockOSThread\r\n  haveTemplateThread == 0\r\n  startTemplateThread\r\n    haveTemplateThread = 1\r\n    newm                                   haveTemplateThread == 1\r\n      preempt -> schedule                  g.m.lockedExt++\r\n        gcstopm -> _Pgcstop                g.m.lockedg = ...\r\n        park                               g.lockedm = ...\r\n                                           return\r\n\r\n                                        ... (any code)\r\n                                          preempt -> schedule\r\n                                            stoplockedm\r\n                                              releasep -> _Pidle\r\n                                              handoffp\r\n                                                startm (one of first three handoffp cases)\r\n                                                 newm\r\n                                                   g.m.lockedExt != 0\r\n                                                   Add to newmHandoff, return\r\n                                              park\r\n```\r\n\r\nNote that T2's P is sitting in _Pidle. It expects the template thread to clone the new M, which would then acquirep, schedule, and gcstopm. Since the template thread doesn't exist yet, this never happens, and stopTheWorldWithSema waits forever for the last P to enter stop.\r\n\r\nI believe the best fix for this is to disable preemption in startTemplateThread (acquirem) so we can guarantee that the template thread will eventually exist after haveTemplateThread = 1.\r\n\r\nI've reproduced this issue with an internal program, and the suggested acquirem fixes that case. This should be reproducible with something like the below program, but I haven't quite managed to get that to trigger the bug:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""runtime""\r\n        ""sync""\r\n        ""time""\r\n)\r\n\r\n//go:noinline\r\nfunc work() int {\r\n        // Do something complicated on the stack so this function gets a morestack call.\r\n\r\n        var arr [10000]int\r\n        for i := 0; i < 10000; i++ {\r\n                arr[i] = i\r\n        }\r\n\r\n        var sum int\r\n        for i := 0; i < 10000; i++ {\r\n                sum += arr[i]\r\n        }\r\n\r\n        return sum\r\n}\r\n\r\nfunc main() {\r\n        // Try to synchronize STW and LockOSThreads.\r\n        start := time.Now().Add(50*time.Millisecond)\r\n\r\n        go func() {\r\n                // The goroutines below are a bit slower. Add a fudge factor.\r\n                for time.Now().Before(start.Add(10*time.Microsecond)) {\r\n                }\r\n\r\n                // Stop the world.\r\n                var m runtime.MemStats\r\n                runtime.ReadMemStats(&m)\r\n        }()\r\n\r\n        var wg sync.WaitGroup\r\n        wg.Add(2)\r\n\r\n        for i := 0; i < 2; i++ {\r\n                go func() {\r\n                        for time.Now().Before(start) {\r\n                        }\r\n\r\n                        // Add work to the local runq to trigger early startm\r\n                        // in handoffp.\r\n                        go func(){}()\r\n\r\n                        runtime.LockOSThread()\r\n                        work()  // add a preemption point.\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n        // If both LockOSThreads completed then we did not hit the race.\r\n}\r\n```\r\n\r\ncc @aclements ","go\r\npackage main\r\n\r\nimport (\r\n        ""runtime""\r\n        ""sync""\r\n        ""time""\r\n)\r\n\r\n//go:noinline\r\nfunc work() int {\r\n        // Do something complicated on the stack so this function gets a morestack call.\r\n\r\n        var arr [10000]int\r\n        for i := 0; i < 10000; i++ {\r\n                arr[i] = i\r\n        }\r\n\r\n        var sum int\r\n        for i := 0; i < 10000; i++ {\r\n                sum += arr[i]\r\n        }\r\n\r\n        return sum\r\n}\r\n\r\nfunc main() {\r\n        // Try to synchronize STW and LockOSThreads.\r\n        start := time.Now().Add(50*time.Millisecond)\r\n\r\n        go func() {\r\n                // The goroutines below are a bit slower. Add a fudge factor.\r\n                for time.Now().Before(start.Add(10*time.Microsecond)) {\r\n                }\r\n\r\n                // Stop the world.\r\n                var m runtime.MemStats\r\n                runtime.ReadMemStats(&m)\r\n        }()\r\n\r\n        var wg sync.WaitGroup\r\n        wg.Add(2)\r\n\r\n        for i := 0; i < 2; i++ {\r\n                go func() {\r\n                        for time.Now().Before(start) {\r\n                        }\r\n\r\n                        // Add work to the local runq to trigger early startm\r\n                        // in handoffp.\r\n                        go func(){}()\r\n\r\n                        runtime.LockOSThread()\r\n                        work()  // add a preemption point.\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n        // If both LockOSThreads completed then we did not hit the race.\r\n}\r\n"
38571,"cmd/go: 'go mod vendor' does not fail on case-insensitive import collision### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.14.2 linux/amd64\r\n</pre>\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n### What did you do?\r\nDuring the investigation of #38342, I discovered the following ux quirk:\r\n\r\nOn a case insensitive filesystem: (I am using `vfat`)\r\n\r\n```sh\r\ngo mod vendor\r\n```\r\n### What did you expect to see?\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```\r\n\r\n### What did you see instead?\r\n`go mod vendor` succeeds, but `go build` fails, and one must flush `vendor` to fix things:\r\n```sh\r\ngo build\r\n```\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```",Vendoring|modules|FixPending,samthanawalla,"### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.14.2 linux/amd64\r\n</pre>\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n### What did you do?\r\nDuring the investigation of #38342, I discovered the following ux quirk:\r\n\r\nOn a case insensitive filesystem: (I am using `vfat`)\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t_ ""example.com/Foo""\r\n\t_ ""example.com/foo""\r\n)\r\n\r\nfunc main() {}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.14\r\n\r\nrequire (\r\n\texample.com/foo v0.1.0\r\n\texample.com/Foo v0.1.0\r\n)\r\n\r\nreplace (\r\n\texample.com/foo => ./foo\r\n\texample.com/Foo => ./!foo\r\n)\r\n-- foo/go.mod --\r\nmodule example.com/foo\r\n-- foo/foo.go --\r\npackage foo\r\n-- !foo/go.mod --\r\nmodule example.com/Foo\r\n-- !foo/foo.go --\r\npackage Foo\r\n```\r\n```sh\r\ngo mod vendor\r\n```\r\n### What did you expect to see?\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```\r\n\r\n### What did you see instead?\r\n`go mod vendor` succeeds, but `go build` fails, and one must flush `vendor` to fix things:\r\n```sh\r\ngo build\r\n```\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t_ ""example.com/Foo""\r\n\t_ ""example.com/foo""\r\n)\r\n\r\nfunc main() {}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.14\r\n\r\nrequire (\r\n\texample.com/foo v0.1.0\r\n\texample.com/Foo v0.1.0\r\n)\r\n\r\nreplace (\r\n\texample.com/foo => ./foo\r\n\texample.com/Foo => ./!foo\r\n)\r\n-- foo/go.mod --\r\nmodule example.com/foo\r\n-- foo/foo.go --\r\npackage foo\r\n-- !foo/go.mod --\r\nmodule example.com/Foo\r\n-- !foo/foo.go --\r\npackage Foo\r\n"
36819,"net/http: graceful shutdown race condition<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n**Update**: I have found a super trivial way to reproduce it, see the step at the very bottom\r\n\r\nPreamble: I think it's relevant to https://github.com/golang/go/issues/23829\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go _version_\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ivan/.cache/go-build""\r\nGOENV=""/home/ivan/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/srv/work/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ivan/.local/share/umake/go/go-lang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ivan/.local/share/umake/go/go-lang/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build903857222=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\nWith the following code it's possible to get a case when the _new_ connection in accepted, then closed within milliseconds, which makes the shutdown not graceful\r\n\r\n\r\n### What did you expect to see?\r\nA graceful shutdown\r\n\r\n\r\n### What did you see instead?\r\n![Screenshot from 2020-01-28 11-29-15](https://user-images.githubusercontent.com/302295/73224371-29e28180-41ce-11ea-9478-f8a0063f98a5.png)\r\n\r\n![Screenshot from 2020-01-28 13-04-16](https://user-images.githubusercontent.com/302295/73224546-b2f9b880-41ce-11ea-8209-a03b0e1e2692.png)\r\n\r\nHow to reproduce:\r\n\r\nJust `ab -t 20 -c 5 -A foo:foo http://localhost:8080/` is enough to capture the case. The former is much more rare, the latter is quite frequent.\r\n\r\nWhat you can see on screenshots: the connection is accepted, then as per https://go-review.googlesource.com/c/go/+/121419/ it should be treated as ""new"" (but it's not due to race), and is closed.\r\nIn first case the client had chance to send a request.\r\nIn second - it was closed even before that.\r\n\r\nIn both cases it happens with the `Connection reset by peer` on the client side, which should never be the case with non-keepalived connections and graceful termination.\r\n\r\nBoth pcap files are available at: https://www.dropbox.com/s/2co7wkucfey90zz/bug.tgz?dl=0\r\n\r\nMy assumption on why it's the race and how it happens:\r\n\r\n1. the connection is accepted with `rw, e := l.Accept()` successfully\r\n2. A moment later a shutdown request is made\r\n3. Before the `c.setState(c.rwc, StateNew)` statement is reached the server completes shutdown\r\n4. Because the connection is not tracked - `http.Server` is not aware of it\r\n5. The process quits, network sockets are closed by kernel\r\n\r\n**UPDATE**:\r\n\r\nIt can be easier reproducible by adding `time.Sleep(3 * time.Second)` right before `c := srv.newConn(rw)`\r\n\r\nSteps:\r\n\r\n1. Patch the `http/server.go` with `time.Sleep(3 * time.Second)` before `c := srv.newConn(rw)`\r\n2. Start the app\r\n3. Make a request\r\n4. Send ctrl-c\r\n\r\nExpected: the request should complete\r\nActual:\r\n\r\n```\r\n\u279c curl -v --user foo:foo http://localhost:8080\r\n* Rebuilt URL to: http://localhost:8080/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n* Server auth using Basic with user 'foo'\r\n> GET / HTTP/1.1\r\n> Host: localhost:8080\r\n> Authorization: Basic Zm9vOmZvbw==\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> \r\n* Recv failure: Connection reset by peer\r\n* stopped the pause stream!\r\n* Closing connection 0\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAnd a corresponding pcap: https://www.dropbox.com/s/5vsvwoow4ydcs3f/with-timeout.tgz?dl=0\r\n\r\nAnd a corresponding wireshark screenshot:\r\n\r\n![Screenshot from 2020-01-28 14-02-22](https://user-images.githubusercontent.com/302295/73226992-dfb1ce00-41d6-11ea-961f-f752ad1da55f.png)\r\n",NeedsInvestigation|FrozenDueToAge,odeke-em,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n**Update**: I have found a super trivial way to reproduce it, see the step at the very bottom\r\n\r\nPreamble: I think it's relevant to https://github.com/golang/go/issues/23829\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go _version_\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ivan/.cache/go-build""\r\nGOENV=""/home/ivan/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/srv/work/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ivan/.local/share/umake/go/go-lang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ivan/.local/share/umake/go/go-lang/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build903857222=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""net/http""\r\n\t""os""\r\n\t""os/signal""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tsig := make(chan os.Signal, 1)\r\n\tsignal.Notify(sig, syscall.SIGTERM, os.Interrupt)\r\n\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    "":8080"",\r\n\t\tHandler: mux,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(srv.ListenAndServe())\r\n\t}()\r\n\r\n\t<-sig\r\n\tfmt.Println(srv.Shutdown(context.Background()))\r\n}\r\n```\r\n\r\nWith the following code it's possible to get a case when the _new_ connection in accepted, then closed within milliseconds, which makes the shutdown not graceful\r\n\r\n\r\n### What did you expect to see?\r\nA graceful shutdown\r\n\r\n\r\n### What did you see instead?\r\n![Screenshot from 2020-01-28 11-29-15](https://user-images.githubusercontent.com/302295/73224371-29e28180-41ce-11ea-9478-f8a0063f98a5.png)\r\n\r\n![Screenshot from 2020-01-28 13-04-16](https://user-images.githubusercontent.com/302295/73224546-b2f9b880-41ce-11ea-8209-a03b0e1e2692.png)\r\n\r\nHow to reproduce:\r\n\r\nJust `ab -t 20 -c 5 -A foo:foo http://localhost:8080/` is enough to capture the case. The former is much more rare, the latter is quite frequent.\r\n\r\nWhat you can see on screenshots: the connection is accepted, then as per https://go-review.googlesource.com/c/go/+/121419/ it should be treated as ""new"" (but it's not due to race), and is closed.\r\nIn first case the client had chance to send a request.\r\nIn second - it was closed even before that.\r\n\r\nIn both cases it happens with the `Connection reset by peer` on the client side, which should never be the case with non-keepalived connections and graceful termination.\r\n\r\nBoth pcap files are available at: https://www.dropbox.com/s/2co7wkucfey90zz/bug.tgz?dl=0\r\n\r\nMy assumption on why it's the race and how it happens:\r\n\r\n1. the connection is accepted with `rw, e := l.Accept()` successfully\r\n2. A moment later a shutdown request is made\r\n3. Before the `c.setState(c.rwc, StateNew)` statement is reached the server completes shutdown\r\n4. Because the connection is not tracked - `http.Server` is not aware of it\r\n5. The process quits, network sockets are closed by kernel\r\n\r\n**UPDATE**:\r\n\r\nIt can be easier reproducible by adding `time.Sleep(3 * time.Second)` right before `c := srv.newConn(rw)`\r\n\r\nSteps:\r\n\r\n1. Patch the `http/server.go` with `time.Sleep(3 * time.Second)` before `c := srv.newConn(rw)`\r\n2. Start the app\r\n3. Make a request\r\n4. Send ctrl-c\r\n\r\nExpected: the request should complete\r\nActual:\r\n\r\n```\r\n\u279c curl -v --user foo:foo http://localhost:8080\r\n* Rebuilt URL to: http://localhost:8080/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n* Server auth using Basic with user 'foo'\r\n> GET / HTTP/1.1\r\n> Host: localhost:8080\r\n> Authorization: Basic Zm9vOmZvbw==\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> \r\n* Recv failure: Connection reset by peer\r\n* stopped the pause stream!\r\n* Closing connection 0\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAnd a corresponding pcap: https://www.dropbox.com/s/5vsvwoow4ydcs3f/with-timeout.tgz?dl=0\r\n\r\nAnd a corresponding wireshark screenshot:\r\n\r\n![Screenshot from 2020-01-28 14-02-22](https://user-images.githubusercontent.com/302295/73226992-dfb1ce00-41d6-11ea-961f-f752ad1da55f.png)\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""net/http""\r\n\t""os""\r\n\t""os/signal""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tsig := make(chan os.Signal, 1)\r\n\tsignal.Notify(sig, syscall.SIGTERM, os.Interrupt)\r\n\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    "":8080"",\r\n\t\tHandler: mux,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(srv.ListenAndServe())\r\n\t}()\r\n\r\n\t<-sig\r\n\tfmt.Println(srv.Shutdown(context.Background()))\r\n}\r\n"
34806,"x/tools/go/packages: IgnoreFuncBodies implementation and comment mismatchhttps://github.com/golang/tools/blob/567d1c21dc5f922038933aa862c0719a9768eb83/go/packages/packages.go#L827-L830\r\n\r\n\r\nThe comment and the given example is self-contradictory. The implementation is actually `type-check bodies of functions only in initial packages`.\r\n\r\n---\r\n\r\nFor my use case, I would appreciate if `IgnoreFuncBodies` could be somehow controlled by `packages.Config`.\r\n\r\nI have a script (invoked by `go generate`) parsing source code, harvesting struct definition and generating serialization-related code for those structs. Due to lack of serialization-related code, the type-checking for function bodies always fail because those structs does not implement my serialization interface yet.\r\n\r\nI don't have any assertions like `var _ MySerializationInterface = MyStruct{}`. So as long as I can turn `IgnoreFuncBodies` on, everything works for me.",NeedsInvestigation|FrozenDueToAge|Tools,adonovan,"https://github.com/golang/tools/blob/567d1c21dc5f922038933aa862c0719a9768eb83/go/packages/packages.go#L827-L830\r\n```go\r\n// Type-check bodies of functions only in non-initial packages.\r\n// Example: for import graph A->B->C and initial packages {A,C},\r\n// we can ignore function bodies in B.\r\nIgnoreFuncBodies: ld.Mode&NeedDeps == 0 && !lpkg.initial,\r\n```\r\n\r\nThe comment and the given example is self-contradictory. The implementation is actually `type-check bodies of functions only in initial packages`.\r\n\r\n---\r\n\r\nFor my use case, I would appreciate if `IgnoreFuncBodies` could be somehow controlled by `packages.Config`.\r\n\r\nI have a script (invoked by `go generate`) parsing source code, harvesting struct definition and generating serialization-related code for those structs. Due to lack of serialization-related code, the type-checking for function bodies always fail because those structs does not implement my serialization interface yet.\r\n\r\nI don't have any assertions like `var _ MySerializationInterface = MyStruct{}`. So as long as I can turn `IgnoreFuncBodies` on, everything works for me.","go\r\n// Type-check bodies of functions only in non-initial packages.\r\n// Example: for import graph A->B->C and initial packages {A,C},\r\n// we can ignore function bodies in B.\r\nIgnoreFuncBodies: ld.Mode&NeedDeps == 0 && !lpkg.initial,\r\n"
31897,"x/tools/go/analysis: provide driver for running analysis programmaticallyCurrently there is no driver suitable for running analyzers from a go test (or from code, in general). The multichecker and singlechecker drivers are meant for cli tools and call os.Exit(), so they cannot be used.\r\n\r\nWe want to be able to run analysis from a go test rather than a separate binary. It is easier to integrate into our CI system if is a normal test.\r\n\r\nMy first thought was something that looks like this:\r\n\r\n\r\nReturning Diagnostic is not quite right though since the user doesn't have the FileSet to translate the diagnostics' token.Pos. I also assume something would have to be done for passing analyzer flags programatically.\r\n\r\n/cc @ianthehat since you responded briefly in Slack regarding this feature request",NeedsInvestigation|Tools|Analysis,adonovan,"Currently there is no driver suitable for running analyzers from a go test (or from code, in general). The multichecker and singlechecker drivers are meant for cli tools and call os.Exit(), so they cannot be used.\r\n\r\nWe want to be able to run analysis from a go test rather than a separate binary. It is easier to integrate into our CI system if is a normal test.\r\n\r\nMy first thought was something that looks like this:\r\n```go\r\nfunc Run(args []string, analyzers []*analysis.Analyzer) ([]analysis.Diagnostic, error)\r\n```\r\n\r\nReturning Diagnostic is not quite right though since the user doesn't have the FileSet to translate the diagnostics' token.Pos. I also assume something would have to be done for passing analyzer flags programatically.\r\n\r\n/cc @ianthehat since you responded briefly in Slack regarding this feature request","go\r\nfunc Run(args []string, analyzers []*analysis.Analyzer) ([]analysis.Diagnostic, error)\r\n"
29785,"cmd/compile: eliminate memory allocation for non-int n in slice extension idiomThe slice extension idiom from #21266 doesn't work in go tip for non-int `n` in `append(a, make([]T, n)...)`:\r\n\r\n\r\n\r\nBenchmark results:\r\n```\r\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\r\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\r\n```\r\n\r\nAs you can see, if `n` has a type other than `int`, go doesn't remove the allocation.",Performance|NeedsFix|compiler/runtime,martisch,"The slice extension idiom from #21266 doesn't work in go tip for non-int `n` in `append(a, make([]T, n)...)`:\r\n\r\n```go\r\nfunc BenchmarkExtendInt(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := int(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n\r\nfunc BenchmarkExtendUint64(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := uint64(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n```\r\n\r\nBenchmark results:\r\n```\r\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\r\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\r\n```\r\n\r\nAs you can see, if `n` has a type other than `int`, go doesn't remove the allocation.","go\r\nfunc BenchmarkExtendInt(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := int(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n\r\nfunc BenchmarkExtendUint64(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := uint64(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n"
29037,"x/build/cmd/gomote: configure instance by an environment variableI've been doing a fair amount of `gomote`-based debugging for the `cmd/go` file-locking changes, and wrote the following script to improve the ergonomics of gomote commands:\r\n\r\n`~/bin/mote`:\r\n\r\n\r\nThat allows me to eliminate stutter in `gomote` commands and still keep them repeatable.\r\nInstead of:\r\n\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ gomote push $GOMOTE && gomote run $GOMOTE go/src/make.bash\r\n$ gomote run $GOMOTE go/bin/go test -short cmd/go\r\n```\r\n\r\nI can run:\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ mote push && mote run go/src/make.bash\r\n$ mote run go/bin/go test -short cmd/go\r\n```\r\n\r\nHowever, there is no fundamental reason why this should be a separate bash script.\r\n@bradfitz, @dmitshur, @aclements: what do you think of pulling this into `gomote` proper?",Builders|FeatureRequest,mknyszek,"I've been doing a fair amount of `gomote`-based debugging for the `cmd/go` file-locking changes, and wrote the following script to improve the ergonomics of gomote commands:\r\n\r\n`~/bin/mote`:\r\n```bash\r\n#!/bin/sh\r\n\r\nSUBCMD=$1\r\nshift\r\ngomote ""${SUBCMD}"" ""${GOMOTE}"" ""$@""\r\n```\r\n\r\nThat allows me to eliminate stutter in `gomote` commands and still keep them repeatable.\r\nInstead of:\r\n\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ gomote push $GOMOTE && gomote run $GOMOTE go/src/make.bash\r\n$ gomote run $GOMOTE go/bin/go test -short cmd/go\r\n```\r\n\r\nI can run:\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ mote push && mote run go/src/make.bash\r\n$ mote run go/bin/go test -short cmd/go\r\n```\r\n\r\nHowever, there is no fundamental reason why this should be a separate bash script.\r\n@bradfitz, @dmitshur, @aclements: what do you think of pulling this into `gomote` proper?","bash\r\n#!/bin/sh\r\n\r\nSUBCMD=$1\r\nshift\r\ngomote ""${SUBCMD}"" ""${GOMOTE}"" ""$@""\r\n"
28089,"go/ast: add func IsGenerated(*File) boolGiven that #13560 has been accepted, resolved, and by now, widely accepted by the Go community, I think it can be helpful to have a Go parser for it that tools written in Go could use (if desired).\r\n\r\nIt's relatively easy to write an ad hoc parser using the `regexp` package, but it's also possible to write a more specialized one that has less overhead.\r\n\r\nI already wrote one a while ago, and it currently lives at [`github.com/shurcooL/go/generated`](https://godoc.org/github.com/shurcooL/go/generated).\r\n\r\nI want to move it out of the repository it's currently in, which contains [many miscellaneous Go packages](https://github.com/shurcooL/go#directories) of lower utility and quality. I was originally planning to move it out into a standalone repository on my personal site, but then I thought it might be a good fit under `x/tools` subrepo, specifically, in the [`x/tools/go` directory](https://godoc.org/golang.org/x/tools/go), since it deals with Go code. The proposed import path would be:\r\n\r\n\r\n\r\nHence this proposal. If accepted, I'm happy to maintain it/be the owner. The scope is very narrow, so it should be very low volume of work.\r\n\r\nNot sure how this intersects with #17244.\r\n\r\nIf not accepted, I would likely move it here instead:\r\n\r\n\r\n\r\n(The code is currently MIT licensed, but in either case, I'd relicense it under the [Go license](https://golang.org/LICENSE).)\r\n\r\n/cc @andybons @bradfitz @alandonovan @matloob @ianthehat",Proposal|Proposal-Accepted|NeedsFix|Proposal-FinalCommentPeriod,adonovan,"Given that #13560 has been accepted, resolved, and by now, widely accepted by the Go community, I think it can be helpful to have a Go parser for it that tools written in Go could use (if desired).\r\n\r\nIt's relatively easy to write an ad hoc parser using the `regexp` package, but it's also possible to write a more specialized one that has less overhead.\r\n\r\nI already wrote one a while ago, and it currently lives at [`github.com/shurcooL/go/generated`](https://godoc.org/github.com/shurcooL/go/generated).\r\n\r\nI want to move it out of the repository it's currently in, which contains [many miscellaneous Go packages](https://github.com/shurcooL/go#directories) of lower utility and quality. I was originally planning to move it out into a standalone repository on my personal site, but then I thought it might be a good fit under `x/tools` subrepo, specifically, in the [`x/tools/go` directory](https://godoc.org/golang.org/x/tools/go), since it deals with Go code. The proposed import path would be:\r\n\r\n```Go\r\nimport ""golang.org/x/tools/go/generated""\r\n```\r\n\r\nHence this proposal. If accepted, I'm happy to maintain it/be the owner. The scope is very narrow, so it should be very low volume of work.\r\n\r\nNot sure how this intersects with #17244.\r\n\r\nIf not accepted, I would likely move it here instead:\r\n\r\n```Go\r\nimport ""dmitri.shuralyov.com/go/generated""\r\n```\r\n\r\n(The code is currently MIT licensed, but in either case, I'd relicense it under the [Go license](https://golang.org/LICENSE).)\r\n\r\n/cc @andybons @bradfitz @alandonovan @matloob @ianthehat","Go\r\nimport ""golang.org/x/tools/go/generated""\r\n"
27631,"x/build/internal/gophers: improve internal package design## Problem\r\n\r\n> _Total mess, but a functional mess, and a starting point for the future._\r\n> \u2014 Commit [`891b12dc`](https://github.com/golang/build/commit/891b12dcbdd4ee448d573a78681b2e785daa71ca)\r\n\r\nThe `gophers` package is currently hard to use and hard to modify. It's not easy to read its [documentation](https://godoc.org/golang.org/x/build/internal/gophers) and start using it:\r\n\r\n\r\n\r\nI've used and modified it multiple times, and each time, I had to read its internal code to figure out:\r\n\r\n- what kind of value can ""id"" be?\r\n- what is its exact format?\r\n    - is leading '@' required for GH usernames? optional? unneeded?\r\n- is it case sensitive or not?\r\n- in what order/what type of information to add to the `addPerson(...)` lines?\r\n\r\nDespite being an internal package, `gophers` is an important package providing value to 4 other packages, and potentially becoming used in more places. It's no longer just for computing stats, but also for tracking package owners and assigning reviews. Being internal means we can change it easily (even break the API if needed) if we come to agreement on an improved design.\r\n\r\n## Proposed Solution\r\n\r\nI think it can be made easier to use by:\r\n\r\n-\tdocumenting it (so its [godoc](https://godoc.org/golang.org/x/build/internal/gophers) is all you need to use it, no need to read code)\r\n\r\n\tFor example:\r\n\r\n\t\r\n\r\n\t@bradfitz If you prefer not to be used as an example, let me know, and we can use someone else (I'm happy to volunteer) or use a generic name. But I think a well known real user makes for a better example.\r\n\r\nMade easier to modify by:\r\n\r\n-\tmaking its internal `addPerson` logic more explicit rather than implicit\r\n\r\n\tFor example, instead of what we have now:\r\n\r\n\t\r\n\r\n\tIt could be something more explicit, along the lines of:\r\n\r\n\t\r\n\r\n\tThe intention is to make it easy for people to manually add and modify their entries, with predictable results, while still being able to to use code generation (ala `gopherstats -mode=find-gerrit-gophers`) to add missing entries.\r\n\r\nThis is just a quick draft proposal, not necessarily the final API design. If the general direction is well received but there are concerns or improvement suggestions, I'm happy to flesh it out and incorporate feedback. I wouldn't send a CL until I have a solid design.\r\n\r\n/cc @bradfitz @andybons",Documentation|Builders|NeedsFix,dmitshur,"## Problem\r\n\r\n> _Total mess, but a functional mess, and a starting point for the future._\r\n> \u2014 Commit [`891b12dc`](https://github.com/golang/build/commit/891b12dcbdd4ee448d573a78681b2e785daa71ca)\r\n\r\nThe `gophers` package is currently hard to use and hard to modify. It's not easy to read its [documentation](https://godoc.org/golang.org/x/build/internal/gophers) and start using it:\r\n\r\n```Go\r\n// (no documentation)\r\nfunc GetPerson(id string) *Person\r\n```\r\n\r\nI've used and modified it multiple times, and each time, I had to read its internal code to figure out:\r\n\r\n- what kind of value can ""id"" be?\r\n- what is its exact format?\r\n    - is leading '@' required for GH usernames? optional? unneeded?\r\n- is it case sensitive or not?\r\n- in what order/what type of information to add to the `addPerson(...)` lines?\r\n\r\nDespite being an internal package, `gophers` is an important package providing value to 4 other packages, and potentially becoming used in more places. It's no longer just for computing stats, but also for tracking package owners and assigning reviews. Being internal means we can change it easily (even break the API if needed) if we come to agreement on an improved design.\r\n\r\n## Proposed Solution\r\n\r\nI think it can be made easier to use by:\r\n\r\n-\tdocumenting it (so its [godoc](https://godoc.org/golang.org/x/build/internal/gophers) is all you need to use it, no need to read code)\r\n\r\n\tFor example:\r\n\r\n\t```Go\r\n\t// GetPerson looks up a person by id and returns one if found, or nil otherwise.\r\n\t//\r\n\t// The id is case insensitive, and may be one of:\r\n\t// \t- full name (""Brad Fitzpatrick"")\r\n\t// \t- GitHub username (""@bradfitz"")\r\n\t// \t- Gerrit <account ID>@<instance ID> (""5065@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\t// \t- email (""bradfitz@golang.org"")\r\n\tfunc GetPerson(id string) *Person\r\n\t```\r\n\r\n\t@bradfitz If you prefer not to be used as an example, let me know, and we can use someone else (I'm happy to volunteer) or use a generic name. But I think a well known real user makes for a better example.\r\n\r\nMade easier to modify by:\r\n\r\n-\tmaking its internal `addPerson` logic more explicit rather than implicit\r\n\r\n\tFor example, instead of what we have now:\r\n\r\n\t```Go\r\n\taddPerson(""Filippo Valsorda"", """", ""6195@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@cloudflare.com"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@golang.org"", ""11715@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@golang.org"", ""hi@filippo.io"", ""@FiloSottile"")\r\n\r\n\t// what kind of changes should be done to modify the end result Person struct?\r\n\t```\r\n\r\n\tIt could be something more explicit, along the lines of:\r\n\r\n\t```Go\r\n\tadd(Person{\r\n\t\tName:      ""Filippo Valsorda"",\r\n\t\tGitHub:    ""FiloSottile"",\r\n\t\tGerrit:    ""filippo@golang.org"",\r\n\t\tGerritIDs: []int{6195, 11715}, // Gerrit account IDs.\r\n\t\tGitEmails: []string{\r\n\t\t\t""filippo@golang.org"",\r\n\t\t\t""filippo@cloudflare.com"",\r\n\t\t\t""hi@filippo.io"",\r\n\t\t},\r\n\t\tgomote: ""valsorda"", // Gomote user.\r\n\t})\r\n\t```\r\n\r\n\tThe intention is to make it easy for people to manually add and modify their entries, with predictable results, while still being able to to use code generation (ala `gopherstats -mode=find-gerrit-gophers`) to add missing entries.\r\n\r\nThis is just a quick draft proposal, not necessarily the final API design. If the general direction is well received but there are concerns or improvement suggestions, I'm happy to flesh it out and incorporate feedback. I wouldn't send a CL until I have a solid design.\r\n\r\n/cc @bradfitz @andybons",Go\r\n// (no documentation)\r\nfunc GetPerson(id string) *Person\r\n
27585,"cmd/compile: BCE optimizes less for string than slicePlease answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.11 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nFor `T` is either `string` or `[]int`,  the bounds check for `y[i]` at line 25 should be eliminated.\r\nBut this is only true for `T` is `[]int`.\r\n\r\n### What did you see instead?\r\n\r\nWhen `T` is `string`, the bounds check for y[i] at line 25 is still needed.\r\n\r\n```\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n# command-line-arguments\r\n./main.go:11:15: Found IsInBounds\r\n./main.go:23:7: Found IsSliceInBounds\r\n./main.go:25:15: Found IsInBounds\r\n```\r\n\r\n",Performance|NeedsInvestigation|compiler/runtime,rasky,"Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.11 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n```golang\r\npackage main\r\n\r\ntype T = string\r\n// type T = []int\r\n\r\nfunc NumSameBytes_1(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] needs bound check\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_2(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\t\r\n\ty = y[:len(x)] // this line doesn't work\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] still needs bound check (line 25)\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_3(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tif len(x) <= len(y) { // this line works\r\n\t\tfor i := 0; i < len(x); i++ {\r\n\t\t\tif x[i] != y[i] { // bound check elimated for y[i]\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc main() {}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nFor `T` is either `string` or `[]int`,  the bounds check for `y[i]` at line 25 should be eliminated.\r\nBut this is only true for `T` is `[]int`.\r\n\r\n### What did you see instead?\r\n\r\nWhen `T` is `string`, the bounds check for y[i] at line 25 is still needed.\r\n\r\n```\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n# command-line-arguments\r\n./main.go:11:15: Found IsInBounds\r\n./main.go:23:7: Found IsSliceInBounds\r\n./main.go:25:15: Found IsInBounds\r\n```\r\n\r\n","golang\r\npackage main\r\n\r\ntype T = string\r\n// type T = []int\r\n\r\nfunc NumSameBytes_1(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] needs bound check\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_2(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\t\r\n\ty = y[:len(x)] // this line doesn't work\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] still needs bound check (line 25)\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_3(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tif len(x) <= len(y) { // this line works\r\n\t\tfor i := 0; i < len(x); i++ {\r\n\t\t\tif x[i] != y[i] { // bound check elimated for y[i]\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc main() {}\r\n"
27540,"runtime: crash with ""invalid pc-encoded table"" in TSAN mode### What version of Go are you using (`go version`)?\r\ngo 1.11\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n### What did you do?\r\nI am running a fairly run-of-the-mill production api server. I have observed one crash so far on this code since upgrading to go1.11 with `fatal error: invalid runtime symbol table`. I am running a library in this server code that periodically captures a cpu, block, and mutex profile every few minutes. The sample rates on the mutex profile is 1/10 and 1 block profile every second.\r\n\r\n\r\n### What did you expect to see?\r\nNo crashes\r\n\r\n\r\n### What did you see instead?\r\n```\r\nruntime: invalid pc-encoded table [...]\r\nfatal error: invalid runtime symbol table\r\ngoroutine 0 [idle]:\r\nruntime.throw(0x10501de, 0x1c)\r\n      /usr/local/go/src/runtime/panic.go:608 +0x72 fp=0xc00064f258 sp=0xc00064f228 pc=0x42c2b2\r\nruntime.pcvalue(0x179ed90, 0x19f6800, 0xXXXXXXXX005ea0e7, 0xaaf94c, 0xc00064f480, 0xXXXXXXXXXXXXXX01, 0xXXXXXXXX00000000)\r\n      /usr/local/go/src/runtime/symtab.go:791 +0x50a fp=0xc00064f300 sp=0xc00064f258 pc=0x449d3a\r\nruntime.funcspdelta(0x179ed90, 0x19f6800, 0xaaf94c, 0xc00064f480, 0xXXXXXXXX00000000)\r\n     /usr/local/go/src/runtime/symtab.go:843 +0x5f fp=0xc00064f370 sp=0xc00064f300 pc=0x44a1ef\r\nruntime.gentraceback(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0x0, 0xc00064f6d8, 0x40, 0x0, 0x0, 0x6, ...)\r\n      /usr/local/go/src/runtime/traceback.go:208 +0x1828 fp=0xc00064f678 sp=0xc00064f370 pc=0x450ca8\r\nruntime.sigprof(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0xc000244380)\r\n      /usr/local/go/src/runtime/proc.go:3823 +0x4b6 fp=0xc00064f928 sp=0xc00064f678 pc=0x436cd6\r\nruntime.sighandler(0xc00000001b, 0xc00064fbf0, 0xc00064fac0, 0xc0004d1080)\r\n      /usr/local/go/src/runtime/signal_sighandler.go:38 +0x73c fp=0xc00064f9b8 sp=0xc00064f928 pc=0x440dec\r\n```\r\nThis crash is reminiscent of a bug I was hoping would be fixed with the 1.11 release related to https://github.com/golang/go/issues/24925.\r\nThe crashes do seem less frequent than when I was running the same code under 1.10.\r\n\r\nCC @heschik and @rhysh ",NeedsInvestigation|FrozenDueToAge|release-blocker|okay-after-beta1,prattmic,"### What version of Go are you using (`go version`)?\r\ngo 1.11\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```go env\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/users/kai.hayashi/go""\r\nGORACE=""""\r\nGOROOT=""/usr/local/go""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nCC=""gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build387775402=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n```\r\n\r\n\r\n### What did you do?\r\nI am running a fairly run-of-the-mill production api server. I have observed one crash so far on this code since upgrading to go1.11 with `fatal error: invalid runtime symbol table`. I am running a library in this server code that periodically captures a cpu, block, and mutex profile every few minutes. The sample rates on the mutex profile is 1/10 and 1 block profile every second.\r\n\r\n\r\n### What did you expect to see?\r\nNo crashes\r\n\r\n\r\n### What did you see instead?\r\n```\r\nruntime: invalid pc-encoded table [...]\r\nfatal error: invalid runtime symbol table\r\ngoroutine 0 [idle]:\r\nruntime.throw(0x10501de, 0x1c)\r\n      /usr/local/go/src/runtime/panic.go:608 +0x72 fp=0xc00064f258 sp=0xc00064f228 pc=0x42c2b2\r\nruntime.pcvalue(0x179ed90, 0x19f6800, 0xXXXXXXXX005ea0e7, 0xaaf94c, 0xc00064f480, 0xXXXXXXXXXXXXXX01, 0xXXXXXXXX00000000)\r\n      /usr/local/go/src/runtime/symtab.go:791 +0x50a fp=0xc00064f300 sp=0xc00064f258 pc=0x449d3a\r\nruntime.funcspdelta(0x179ed90, 0x19f6800, 0xaaf94c, 0xc00064f480, 0xXXXXXXXX00000000)\r\n     /usr/local/go/src/runtime/symtab.go:843 +0x5f fp=0xc00064f370 sp=0xc00064f300 pc=0x44a1ef\r\nruntime.gentraceback(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0x0, 0xc00064f6d8, 0x40, 0x0, 0x0, 0x6, ...)\r\n      /usr/local/go/src/runtime/traceback.go:208 +0x1828 fp=0xc00064f678 sp=0xc00064f370 pc=0x450ca8\r\nruntime.sigprof(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0xc000244380)\r\n      /usr/local/go/src/runtime/proc.go:3823 +0x4b6 fp=0xc00064f928 sp=0xc00064f678 pc=0x436cd6\r\nruntime.sighandler(0xc00000001b, 0xc00064fbf0, 0xc00064fac0, 0xc0004d1080)\r\n      /usr/local/go/src/runtime/signal_sighandler.go:38 +0x73c fp=0xc00064f9b8 sp=0xc00064f928 pc=0x440dec\r\n```\r\nThis crash is reminiscent of a bug I was hoping would be fixed with the 1.11 release related to https://github.com/golang/go/issues/24925.\r\nThe crashes do seem less frequent than when I was running the same code under 1.10.\r\n\r\nCC @heschik and @rhysh ","go env\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/users/kai.hayashi/go""\r\nGORACE=""""\r\nGOROOT=""/usr/local/go""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nCC=""gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build387775402=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n"
26904,"cmd/go: allow replacement modules to alias other active modules### What version of Go are you using (`go version`)?\r\nGo tip:\r\n`go version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64`\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (it is not reproduced with `go version go1.11beta2 darwin/amd64`)\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ikorolev/Library/Caches/go-build""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOOS=""darwin""\r\nGOPATH=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/gopath""\r\nGOPROXY=""""\r\nGORACE=""""\r\nGOROOT=""/Users/ikorolev/.gvm/gos/go1.11beta3""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ikorolev/.gvm/gos/go1.11beta3/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/vgo-a-user/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/go-build138999780=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nSorry, no standalone reproduction, since issue is connected with repository forking\r\n\r\nAssume we have a repository A: https://github.com/mwf/vgo-a with the only feature:\r\n\r\n\r\nThan we have a `fork1` https://github.com/mwf/vgo-a-fork1, adding a feature B : \r\n\r\nUnfortunately `fork1` will never be merged to the upstream, just because `a` author don't like this feature.\r\n\r\nIt's important to note, that both `a` and `a-fork1` **don't have** `go.mod`, they are too conservative for that \U0001f604 \r\n\r\nThen we got a happy user, using both projects in his repo.\r\ngo.mod:\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n```\r\nmain.go\r\n\r\nAll just works fine:\r\n```\r\n$ go run .\r\nA: ""A""\r\nB: ""B is a new feature in a-fork1""\r\n```\r\n\r\nHere appears `fork2` https://github.com/mwf/vgo-a-fork2, forked from `fork1`, and fixing some bugs **both** in the upstream and in `fork1`.\r\n\r\nWe use the fork2 with `replace` in our main repo: https://github.com/mwf/vgo-a-user/blob/master/go.mod\r\n\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.2.1\r\n\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1\r\n```\r\n\r\n### What did you expect to see?\r\nBuilding this with `go1.11beta2` works just fine:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version go1.11beta2 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: finding github.com/mwf/vgo-a v0.1.0\r\ngo: finding github.com/mwf/vgo-a-fork1 v0.2.0\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\n### What did you see instead?\r\nBuilding with the tip (and beta3) returns an error:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: github.com/mwf/vgo-a-fork1@v0.2.0 used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n```\r\n\r\n### More comments\r\n\r\nI understand that this case is very specific and arguable - this should not ever happen ideally, but we have the real case here:\r\nhttps://github.com/utrack/clay/blob/master/integration/binding_with_body_and_response/go.mod\r\n\r\nThere is a little workaround, to define `go.mod` at fork2 and make a replace upstream -> fork2_with_go.mod, but it's too dirty :)\r\n```\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.3.0 // version with go.mod\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1 // no go.mod\r\n```\r\nIt works with tip and beta3:\r\n```\r\n$ go version && go run .\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\nIf you decide that the case is too specific and crazy, and you'd like to close as ""**Won't fix**"" - then I assume we should change the error string, because it's **confusing** now:\r\n> go: github.com/mwf/**vgo-a-fork1@v0.2.0** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n\r\nIt should look like this:\r\n> go: github.com/mwf/**vgo-a-fork2@v0.2.1** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1) \r\n\r\nbecause it's `github.com/mwf/vgo-a-fork2` who's to blame for the error.",NeedsInvestigation|modules,matloob,"### What version of Go are you using (`go version`)?\r\nGo tip:\r\n`go version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64`\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (it is not reproduced with `go version go1.11beta2 darwin/amd64`)\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ikorolev/Library/Caches/go-build""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOOS=""darwin""\r\nGOPATH=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/gopath""\r\nGOPROXY=""""\r\nGORACE=""""\r\nGOROOT=""/Users/ikorolev/.gvm/gos/go1.11beta3""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ikorolev/.gvm/gos/go1.11beta3/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/vgo-a-user/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/go-build138999780=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nSorry, no standalone reproduction, since issue is connected with repository forking\r\n\r\nAssume we have a repository A: https://github.com/mwf/vgo-a with the only feature:\r\n```go\r\npackage a\r\n\r\nvar A = ""A""\r\n```\r\n\r\nThan we have a `fork1` https://github.com/mwf/vgo-a-fork1, adding a feature B : \r\n```go\r\npackage a\r\n\r\nvar B = ""B is a new feature in a-fork1""\r\n```\r\nUnfortunately `fork1` will never be merged to the upstream, just because `a` author don't like this feature.\r\n\r\nIt's important to note, that both `a` and `a-fork1` **don't have** `go.mod`, they are too conservative for that \U0001f604 \r\n\r\nThen we got a happy user, using both projects in his repo.\r\ngo.mod:\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n```\r\nmain.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/mwf/vgo-a""\r\n\ta_fork ""github.com/mwf/vgo-a-fork1""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Printf(""A: %q\\n"", a.A)\r\n\tfmt.Printf(""B: %q\\n"", a_fork.B)\r\n}\r\n```\r\nAll just works fine:\r\n```\r\n$ go run .\r\nA: ""A""\r\nB: ""B is a new feature in a-fork1""\r\n```\r\n\r\nHere appears `fork2` https://github.com/mwf/vgo-a-fork2, forked from `fork1`, and fixing some bugs **both** in the upstream and in `fork1`.\r\n\r\nWe use the fork2 with `replace` in our main repo: https://github.com/mwf/vgo-a-user/blob/master/go.mod\r\n\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.2.1\r\n\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1\r\n```\r\n\r\n### What did you expect to see?\r\nBuilding this with `go1.11beta2` works just fine:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version go1.11beta2 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: finding github.com/mwf/vgo-a v0.1.0\r\ngo: finding github.com/mwf/vgo-a-fork1 v0.2.0\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\n### What did you see instead?\r\nBuilding with the tip (and beta3) returns an error:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: github.com/mwf/vgo-a-fork1@v0.2.0 used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n```\r\n\r\n### More comments\r\n\r\nI understand that this case is very specific and arguable - this should not ever happen ideally, but we have the real case here:\r\nhttps://github.com/utrack/clay/blob/master/integration/binding_with_body_and_response/go.mod\r\n\r\nThere is a little workaround, to define `go.mod` at fork2 and make a replace upstream -> fork2_with_go.mod, but it's too dirty :)\r\n```\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.3.0 // version with go.mod\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1 // no go.mod\r\n```\r\nIt works with tip and beta3:\r\n```\r\n$ go version && go run .\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\nIf you decide that the case is too specific and crazy, and you'd like to close as ""**Won't fix**"" - then I assume we should change the error string, because it's **confusing** now:\r\n> go: github.com/mwf/**vgo-a-fork1@v0.2.0** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n\r\nIt should look like this:\r\n> go: github.com/mwf/**vgo-a-fork2@v0.2.1** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1) \r\n\r\nbecause it's `github.com/mwf/vgo-a-fork2` who's to blame for the error.","go\r\npackage a\r\n\r\nvar A = ""A""\r\n"
25965,"os: remove 5ms sleep on Windows in (*Process).WaitIn our Windows implementation of os/Process.Wait, we always do a 5 millisecond sleep:\r\n\r\n\r\n\r\nSleeps in code are always gross. They're either too fast (and still flaky) or too slow (incurring extra delays on everybody when not needed).\r\n\r\nThis bug is about figuring out what we're doing wrong on Windows that made us need that sleep in the first place.\r\n\r\nhttps://go-review.googlesource.com/c/go/+/84175 was one attempt to remove it, but the goal then was fixing a Windows XP test failure (for #17245), and it didn't fix the XP failure. We no longer support XP, though, so maybe that CL is okay now.\r\n\r\nBut maybe it's not correct.\r\n\r\nThere was also https://golang.org/cl/84896 from @johnsonj to use jobs to wait for process completion on windows, but it was ""not working as expected on Server 2008"" and @alexbrainman had concerns in https://github.com/golang/go/issues/17245#issuecomment-353811567 (that whole thread is worth a read, even if it's mostly about debugging an XP issue, which *might've* been related to this bug.)\r\n",Performance|help wanted|OS-Windows|NeedsFix|early-in-cycle,qmuntal,"In our Windows implementation of os/Process.Wait, we always do a 5 millisecond sleep:\r\n\r\n```go\r\nfunc (p *Process) wait() (ps *ProcessState, err error) {\r\n\thandle := atomic.LoadUintptr(&p.handle)\r\n\ts, e := syscall.WaitForSingleObject(syscall.Handle(handle), syscall.INFINITE)\r\n\tswitch s {\r\n\tcase syscall.WAIT_OBJECT_0:\r\n\t\tbreak\r\n\tcase syscall.WAIT_FAILED:\r\n\t\treturn nil, NewSyscallError(""WaitForSingleObject"", e)\r\n\tdefault:\r\n\t\treturn nil, errors.New(""os: unexpected result from WaitForSingleObject"")\r\n\t}\r\n\tvar ec uint32\r\n\te = syscall.GetExitCodeProcess(syscall.Handle(handle), &ec)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetExitCodeProcess"", e)\r\n\t}\r\n\tvar u syscall.Rusage\r\n\te = syscall.GetProcessTimes(syscall.Handle(handle), &u.CreationTime, &u.ExitTime, &u.KernelTime, &u.UserTime)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetProcessTimes"", e)\r\n\t}\r\n\tp.setDone()\r\n\t// NOTE(brainman): It seems that sometimes process is not dead\r\n\t// when WaitForSingleObject returns. But we do not know any\r\n\t// other way to wait for it. Sleeping for a while seems to do\r\n\t// the trick sometimes. So we will sleep and smell the roses.\r\n\tdefer time.Sleep(5 * time.Millisecond)\r\n\tdefer p.Release()\r\n\treturn &ProcessState{p.Pid, syscall.WaitStatus{ExitCode: ec}, &u}, nil\r\n}\r\n```\r\n\r\nSleeps in code are always gross. They're either too fast (and still flaky) or too slow (incurring extra delays on everybody when not needed).\r\n\r\nThis bug is about figuring out what we're doing wrong on Windows that made us need that sleep in the first place.\r\n\r\nhttps://go-review.googlesource.com/c/go/+/84175 was one attempt to remove it, but the goal then was fixing a Windows XP test failure (for #17245), and it didn't fix the XP failure. We no longer support XP, though, so maybe that CL is okay now.\r\n\r\nBut maybe it's not correct.\r\n\r\nThere was also https://golang.org/cl/84896 from @johnsonj to use jobs to wait for process completion on windows, but it was ""not working as expected on Server 2008"" and @alexbrainman had concerns in https://github.com/golang/go/issues/17245#issuecomment-353811567 (that whole thread is worth a read, even if it's mostly about debugging an XP issue, which *might've* been related to this bug.)\r\n","go\r\nfunc (p *Process) wait() (ps *ProcessState, err error) {\r\n\thandle := atomic.LoadUintptr(&p.handle)\r\n\ts, e := syscall.WaitForSingleObject(syscall.Handle(handle), syscall.INFINITE)\r\n\tswitch s {\r\n\tcase syscall.WAIT_OBJECT_0:\r\n\t\tbreak\r\n\tcase syscall.WAIT_FAILED:\r\n\t\treturn nil, NewSyscallError(""WaitForSingleObject"", e)\r\n\tdefault:\r\n\t\treturn nil, errors.New(""os: unexpected result from WaitForSingleObject"")\r\n\t}\r\n\tvar ec uint32\r\n\te = syscall.GetExitCodeProcess(syscall.Handle(handle), &ec)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetExitCodeProcess"", e)\r\n\t}\r\n\tvar u syscall.Rusage\r\n\te = syscall.GetProcessTimes(syscall.Handle(handle), &u.CreationTime, &u.ExitTime, &u.KernelTime, &u.UserTime)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetProcessTimes"", e)\r\n\t}\r\n\tp.setDone()\r\n\t// NOTE(brainman): It seems that sometimes process is not dead\r\n\t// when WaitForSingleObject returns. But we do not know any\r\n\t// other way to wait for it. Sleeping for a while seems to do\r\n\t// the trick sometimes. So we will sleep and smell the roses.\r\n\tdefer time.Sleep(5 * time.Millisecond)\r\n\tdefer p.Release()\r\n\treturn &ProcessState{p.Pid, syscall.WaitStatus{ExitCode: ec}, &u}, nil\r\n}\r\n"
25838,"cmd/compile: make alias decls work correctly under all circumstances[edit: This is now the umbrella issue for work on alias declarations. This includes parameterized alias declarations; see issue #46477. It also includes proper names for aliases in error messages.]\r\n\r\nThe original fix for #18640 was only partially correct. However, removing that incorrect code leads to another cycle related issue for the test case:\r\n\r\n~~Left the original, partially correct code in place for now as it's not wrong, it just doesn't cover the expected cases and it appears to circumvent this issue.~~\r\n\r\n~~Marking for 1.11 if we get to it but it's not a showstopper.~~\r\n\r\nCommented out this test case in test/fixedbugs/issue18640.go for now.",NeedsFix|early-in-cycle,griesemer,"[edit: This is now the umbrella issue for work on alias declarations. This includes parameterized alias declarations; see issue #46477. It also includes proper names for aliases in error messages.]\r\n\r\nThe original fix for #18640 was only partially correct. However, removing that incorrect code leads to another cycle related issue for the test case:\r\n```Go\r\ntype (\r\n\te = f\r\n\tf = g\r\n\tg = []h\r\n\th i\r\n\ti = j\r\n\tj = e\r\n)\r\n```\r\n~~Left the original, partially correct code in place for now as it's not wrong, it just doesn't cover the expected cases and it appears to circumvent this issue.~~\r\n\r\n~~Marking for 1.11 if we get to it but it's not a showstopper.~~\r\n\r\nCommented out this test case in test/fixedbugs/issue18640.go for now.",Go\r\ntype (\r\n\te = f\r\n\tf = g\r\n\tg = []h\r\n\th i\r\n\ti = j\r\n\tj = e\r\n)\r\n
25448,"spec: guarantee non-nil return value from recoverCalling `panic` with a `nil` panic value is allowed in Go 1, but weird.\r\n\r\nAlmost all code checks for panics with:\r\n\r\n\r\n\r\n... which is not correct in the case of `panic(nil)`.\r\n\r\nThe proper way is more like:\r\n\r\n\r\n\r\n\r\n**Proposal**: make the runtime `panic` function promote its panic value from `nil` to something like a `runtime.NilPanic` global value of private, unassignable type:\r\n\r\n\r\n\r\nProbably Go2.\r\n",LanguageChange|v2|Proposal|Proposal-Accepted|NeedsFix,rsc,"Calling `panic` with a `nil` panic value is allowed in Go 1, but weird.\r\n\r\nAlmost all code checks for panics with:\r\n\r\n```go\r\n     defer func() {\r\n        if e := recover(); e != nil { ... }\r\n     }()\r\n```\r\n\r\n... which is not correct in the case of `panic(nil)`.\r\n\r\nThe proper way is more like:\r\n\r\n\r\n```go\r\n     panicked := true\r\n     defer func() {\r\n        if panicked {\r\n              e := recover()\r\n              ...\r\n        }\r\n     }()\r\n     ...\r\n     panicked = false\r\n     return\r\n     ....\r\n     panicked = false\r\n     return\r\n```\r\n\r\n**Proposal**: make the runtime `panic` function promote its panic value from `nil` to something like a `runtime.NilPanic` global value of private, unassignable type:\r\n\r\n```go\r\npackage runtime\r\n\r\ntype nilPanic struct{}\r\n\r\n// NilPanic is the value returned by recover when code panics with a nil value.\r\nvar NilPanic nilPanic\r\n```\r\n\r\nProbably Go2.\r\n",go\r\n     defer func() {\r\n        if e := recover(); e != nil { ... }\r\n     }()\r\n
18478,"database/sql: missing escape functions### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/nefthy/go-test/""\r\nGORACE=""""\r\nGOROOT=""/usr/lib/go""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nCC=""x86_64-pc-linux-gnu-gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/nefthy/go-test/tmp/go-build451484149=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""x86_64-pc-linux-gnu-g++""\r\nCGO_ENABLED=""1""\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThere are situations when strings need to be escaped in queries that can not be done with placeholders. An example the following queries cannot be expressed with ? placeholders:\r\n\r\n\r\n\r\nUsing Sprintf is no option, since the identifiers need to be properly quoted. The quoting and escaping is inherently vendor specific and may even depend on configuration on a per database/connection basis (hello there MySql...).  \r\n\r\n### What did you expect to see?\r\n\r\nThe driver must export Quoting which are passed along by the database/sql Api. As far as I can tell the folling functions are needed\r\n\r\n- QuoteString: quotes and escapes a string so it can be used as a string literal (ex: mysql_real_escape_string)\r\n- QuoteIdentifier: quote and escapes a string so it can be used as an identifier*\r\n- QuoteBinary: quote and escapes binary data (ex: PQescapeBytea)\r\n\r\n* I am not sure if all identifiers are quoted consistently among all Databases. It might be that separate functions are needed depending on the type of the identifier.\r\n\r\n### What did you see instead?\r\n\r\nNo escaping/quoting functions",Thinking|FeatureRequest,kardianos,"### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/nefthy/go-test/""\r\nGORACE=""""\r\nGOROOT=""/usr/lib/go""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nCC=""x86_64-pc-linux-gnu-gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/nefthy/go-test/tmp/go-build451484149=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""x86_64-pc-linux-gnu-g++""\r\nCGO_ENABLED=""1""\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThere are situations when strings need to be escaped in queries that can not be done with placeholders. An example the following queries cannot be expressed with ? placeholders:\r\n\r\n```sql\r\nSELECT id, ? FROM table\r\n-- Must be escaped as an identifier\r\nSELECT id FROM ?\r\n-- Also identifier quoting\r\nSELECT id FROM table WHERE ? LIKE ?\r\n-- With either the first or second parameter being a column reference\r\n```\r\n\r\nUsing Sprintf is no option, since the identifiers need to be properly quoted. The quoting and escaping is inherently vendor specific and may even depend on configuration on a per database/connection basis (hello there MySql...).  \r\n\r\n### What did you expect to see?\r\n\r\nThe driver must export Quoting which are passed along by the database/sql Api. As far as I can tell the folling functions are needed\r\n\r\n- QuoteString: quotes and escapes a string so it can be used as a string literal (ex: mysql_real_escape_string)\r\n- QuoteIdentifier: quote and escapes a string so it can be used as an identifier*\r\n- QuoteBinary: quote and escapes binary data (ex: PQescapeBytea)\r\n\r\n* I am not sure if all identifiers are quoted consistently among all Databases. It might be that separate functions are needed depending on the type of the identifier.\r\n\r\n### What did you see instead?\r\n\r\nNo escaping/quoting functions","sql\r\nSELECT id, ? FROM table\r\n-- Must be escaped as an identifier\r\nSELECT id FROM ?\r\n-- Also identifier quoting\r\nSELECT id FROM table WHERE ? LIKE ?\r\n-- With either the first or second parameter being a column reference\r\n"
