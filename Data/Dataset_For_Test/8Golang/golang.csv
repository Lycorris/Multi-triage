ID,Title_Description,Name,FixedByID,raw_Title_Description,AST
67027,"cmd/compile: internal compiler error: unexpected type: <nil> (<nil>) in for-rangeReproducer (1.22 and at tip, [playground](https://go.dev/play/p/rNynbbndOHS?v=gotip)):\r\n\r\nRunning the code leads to:\r\n```\r\n<unknown line number>: internal compiler error: unexpected type: <nil> (<nil>)\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/usr/local/go/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x212300?, 0xc0?}, {0xe130b2, 0x18}, {0xc00008ece0, 0x2, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/noder.(*pkgWriter).typIdx(0xc000212300, {0x0, 0x0}, 0xc0001aa6e0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:505 +0x8d9\r\ncmd/compile/internal/noder.(*writer).itab(0xc0004d06e0, {0x0?, 0x0?}, {0xf66fe8, 0x14a7be0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:2401 +0xa5\r\ncmd/compile/internal/noder.(*writer).convRTTI(0xc0004d06e0, {0x0, 0x0}, {0xf66fe8, 0x14a7be0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:2415 +0x58\r\ncmd/compile/internal/noder.(*writer).forStmt.func1(0xf66fe8?, {0x0, 0x0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1475 +0x127\r\ncmd/compile/internal/noder.(*writer).forStmt(0xc0004d06e0, 0xc0004c68c0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1479 +0x313\r\ncmd/compile/internal/noder.(*writer).stmt1(0xc0004d06e0, {0xf690d0?, 0xc0004c68c0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1308 +0x25a\r\ncmd/compile/internal/noder.(*writer).stmts(...)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1239\r\ncmd/compile/internal/noder.(*pkgWriter).bodyIdx(0xd79800?, 0xc0004c8580, 0xc0004c8480, 0xc0001aa6e0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1136 +0x1b3\r\ncmd/compile/internal/noder.(*writer).funcExt(0xc0004d0370, 0xc0004c4700)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1071 +0x328\r\ncmd/compile/internal/noder.(*writer).doObj(0xc0004d02c0, 0xc0004d0370, {0xf6ef80, 0xc0004c4700})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:828 +0x213\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0xc000212300, {0xf6ef80, 0xc0004c4700})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:787 +0x612\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0xc000212300, {0xf6ef80, 0xc0004c4700}, 0x0, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:728 +0xf0\r\ncmd/compile/internal/noder.(*writer).obj(0xc0004d0000, {0xf6ef80?, 0xc0004c4700?}, 0xc0004c4700?)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:704 +0x2f\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc0001a0598, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:325 +0x53e\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0001a0598?, 0xd44cc0?, 0x0?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:180 +0x9a\r\ncmd/compile/internal/noder.LoadPackage({0xc0001b6100, 0x1, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe3aec0)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t/usr/local/go/src/cmd/compile/main.go:57 +0xf9\r\n```\r\n",NeedsFix|compiler/runtime,griesemer,"Reproducer (1.22 and at tip, [playground](https://go.dev/play/p/rNynbbndOHS?v=gotip)):\r\n```Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar i float64\r\n\tfor i = range 10 {\r\n\t\t_ = i\r\n\t}\r\n}\r\n```\r\nRunning the code leads to:\r\n```\r\n<unknown line number>: internal compiler error: unexpected type: <nil> (<nil>)\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/usr/local/go/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x212300?, 0xc0?}, {0xe130b2, 0x18}, {0xc00008ece0, 0x2, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/noder.(*pkgWriter).typIdx(0xc000212300, {0x0, 0x0}, 0xc0001aa6e0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:505 +0x8d9\r\ncmd/compile/internal/noder.(*writer).itab(0xc0004d06e0, {0x0?, 0x0?}, {0xf66fe8, 0x14a7be0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:2401 +0xa5\r\ncmd/compile/internal/noder.(*writer).convRTTI(0xc0004d06e0, {0x0, 0x0}, {0xf66fe8, 0x14a7be0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:2415 +0x58\r\ncmd/compile/internal/noder.(*writer).forStmt.func1(0xf66fe8?, {0x0, 0x0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1475 +0x127\r\ncmd/compile/internal/noder.(*writer).forStmt(0xc0004d06e0, 0xc0004c68c0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1479 +0x313\r\ncmd/compile/internal/noder.(*writer).stmt1(0xc0004d06e0, {0xf690d0?, 0xc0004c68c0})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1308 +0x25a\r\ncmd/compile/internal/noder.(*writer).stmts(...)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1239\r\ncmd/compile/internal/noder.(*pkgWriter).bodyIdx(0xd79800?, 0xc0004c8580, 0xc0004c8480, 0xc0001aa6e0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1136 +0x1b3\r\ncmd/compile/internal/noder.(*writer).funcExt(0xc0004d0370, 0xc0004c4700)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:1071 +0x328\r\ncmd/compile/internal/noder.(*writer).doObj(0xc0004d02c0, 0xc0004d0370, {0xf6ef80, 0xc0004c4700})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:828 +0x213\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0xc000212300, {0xf6ef80, 0xc0004c4700})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:787 +0x612\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0xc000212300, {0xf6ef80, 0xc0004c4700}, 0x0, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:728 +0xf0\r\ncmd/compile/internal/noder.(*writer).obj(0xc0004d0000, {0xf6ef80?, 0xc0004c4700?}, 0xc0004c4700?)\r\n\t/usr/local/go/src/cmd/compile/internal/noder/writer.go:704 +0x2f\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc0001a0598, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:325 +0x53e\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0001a0598?, 0xd44cc0?, 0x0?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:180 +0x9a\r\ncmd/compile/internal/noder.LoadPackage({0xc0001b6100, 0x1, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe3aec0)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t/usr/local/go/src/cmd/compile/main.go:57 +0xf9\r\n```\r\n",Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar i float64\r\n\tfor i = range 10 {\r\n\t\t_ = i\r\n\t}\r\n}\r\n
67019,"runtime/metrics: /memory/classes/heap/unused:bytes spikes### Go version\r\n\r\ngo1.22.1\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nWe're trying to build [nice dashboards](https://www.datadoghq.com/blog/go-memory-metrics/) to expose runtime/metrics to all Datadog users. For this reason we started rolling out a package that collects these metrics across our fleet.\r\n\r\n### What did you see happen?\r\n\r\nWhile graphing the data, we noticed occasional spikes in the memory metrics. Upon closer inspection, we discovered that all of these spikes were caused by the `/memory/classes/heap/unused:bytes` metric.\r\n\r\n![2024-04-24 PROF-9661 Report Go Heap Spikes Upstream  Datadog at 17 41 16@2x](https://github.com/golang/go/assets/15000/e01ad5a6-a2cb-4360-93c2-396aa48514e0)\r\n\r\nThese spikes are pretty rare (e.g. 18 spikes per day in the last 24h for a very large fleet), but frequent enough to cause problems with building nice dashboards. The issue occurs across architectures (arm64, amd64), instance types, and hyperscalers without any clear pattern.\r\n\r\nWe suspect the large values are the result of an underflow in the [runtime/metrics code](https://github.com/golang/go/blob/go1.22.1/src/runtime/metrics.go#L364):\r\n\r\n\r\n\r\nTo investigate further we started logging the values (we internally use float64 for storage). Below are a few values we logged and their distance from `math.MaxUint64` (assuming it's indeed an underflow we're seeing here).\r\n\r\nvalue | math.MaxUint64 - value\r\n-- | --\r\n18446744073337960688 | 371652608\r\n18446744073325609896 | 383950848\r\n18446744073455472696 | 254150656\r\n18446744073690885408 | 18751488\r\n18446744073702264952 | 7352320\r\n\r\nWe also logged the values of all `KindUint64` runtime metrics that were collected as part of the same `metrics.Read()` call. I've dumped the results into [this sheet](https://docs.google.com/spreadsheets/d/1oc5mYRaXV4mWdF3WuzJvMnYRNj7UWWUFKseje4CzKYc/edit#gid=393738873) (apologies for the formatting)\r\n\r\n### What did you expect to see?\r\n\r\nNo spikes.\r\n\r\ncc @mknyszek ",NeedsInvestigation|compiler/runtime,mknyszek,"### Go version\r\n\r\ngo1.22.1\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nN/A - many different prod environments\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nWe're trying to build [nice dashboards](https://www.datadoghq.com/blog/go-memory-metrics/) to expose runtime/metrics to all Datadog users. For this reason we started rolling out a package that collects these metrics across our fleet.\r\n\r\n### What did you see happen?\r\n\r\nWhile graphing the data, we noticed occasional spikes in the memory metrics. Upon closer inspection, we discovered that all of these spikes were caused by the `/memory/classes/heap/unused:bytes` metric.\r\n\r\n![2024-04-24 PROF-9661 Report Go Heap Spikes Upstream  Datadog at 17 41 16@2x](https://github.com/golang/go/assets/15000/e01ad5a6-a2cb-4360-93c2-396aa48514e0)\r\n\r\nThese spikes are pretty rare (e.g. 18 spikes per day in the last 24h for a very large fleet), but frequent enough to cause problems with building nice dashboards. The issue occurs across architectures (arm64, amd64), instance types, and hyperscalers without any clear pattern.\r\n\r\nWe suspect the large values are the result of an underflow in the [runtime/metrics code](https://github.com/golang/go/blob/go1.22.1/src/runtime/metrics.go#L364):\r\n\r\n```go\r\nout.scalar = uint64(in.heapStats.inHeap) - in.heapStats.inObjects\r\n```\r\n\r\nTo investigate further we started logging the values (we internally use float64 for storage). Below are a few values we logged and their distance from `math.MaxUint64` (assuming it's indeed an underflow we're seeing here).\r\n\r\nvalue | math.MaxUint64 - value\r\n-- | --\r\n18446744073337960688 | 371652608\r\n18446744073325609896 | 383950848\r\n18446744073455472696 | 254150656\r\n18446744073690885408 | 18751488\r\n18446744073702264952 | 7352320\r\n\r\nWe also logged the values of all `KindUint64` runtime metrics that were collected as part of the same `metrics.Read()` call. I've dumped the results into [this sheet](https://docs.google.com/spreadsheets/d/1oc5mYRaXV4mWdF3WuzJvMnYRNj7UWWUFKseje4CzKYc/edit#gid=393738873) (apologies for the formatting)\r\n\r\n### What did you expect to see?\r\n\r\nNo spikes.\r\n\r\ncc @mknyszek ",shell\r\nN/A - many different prod environments\r\n
67016,"cmd/compile: changing a hot concrete method to interface method triggers a PGO ICE### Go version\n\ngo version go1.22.2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRun this program to generate `/tmp/cpu.pprof`:\r\n\r\n\r\n\r\nNow change `Type` to an interface type. For example:\r\n\r\n\r\n\r\nThen build with PGO:\r\n\r\n```\r\n$ go build -pgo=/tmp/cpu.pprof\r\n```\n\n### What did you see happen?\n\n```\r\n$ go build -pgo /tmp/cpu.pprof\r\n# example.com/ice                                                     \r\n./main.go:23:6: internal compiler error: panic: interface conversion: types.Object is nil, not *ir.Name\r\n                                                                      \r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\n\n### What did you expect to see?\n\nNo ICE",NeedsFix|compiler/runtime,prattmic,"### Go version\n\ngo version go1.22.2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/mpratt/.cache/go-build'\r\nGOENV='/usr/local/google/home/mpratt/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/mpratt/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/mpratt/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/mpratt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='go1.22.2'\r\nGOTOOLDIR='/usr/local/google/home/mpratt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/mpratt/Downloads/b336740241_pgo_ice/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2161017047=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nRun this program to generate `/tmp/cpu.pprof`:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""os""\r\n        ""runtime/pprof""\r\n)\r\n\r\ntype Type struct{}\r\n\r\nvar sink int\r\n\r\n//go:noinline\r\nfunc (Type) Method() {\r\n        for range 10000000 {\r\n                sink++\r\n        }\r\n}\r\n\r\nfunc main() {\r\n        f, _ := os.Create(""/tmp/cpu.pprof"")\r\n        defer f.Close()\r\n        pprof.StartCPUProfile(f)\r\n        defer pprof.StopCPUProfile()\r\n\r\n        var t Type\r\n        t.Method()\r\n}\r\n```\r\n\r\nNow change `Type` to an interface type. For example:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""os""\r\n        ""runtime/pprof""\r\n)\r\n\r\ntype Type interface{\r\n        Method()\r\n}\r\n\r\ntype Type2 struct{}\r\n\r\nvar sink int\r\n\r\n//go:noinline\r\nfunc (Type2) Method() {\r\n        for i := 0; i < 10000000; i++ {\r\n                sink++\r\n        }\r\n}\r\n\r\nfunc main() {\r\n        f, _ := os.Create(""/tmp/cpu.pprof"")\r\n        defer f.Close()\r\n        pprof.StartCPUProfile(f)\r\n        defer pprof.StopCPUProfile()\r\n\r\n        var t Type2\r\n        t.Method()\r\n}\r\n```\r\n\r\nThen build with PGO:\r\n\r\n```\r\n$ go build -pgo=/tmp/cpu.pprof\r\n```\n\n### What did you see happen?\n\n```\r\n$ go build -pgo /tmp/cpu.pprof\r\n# example.com/ice                                                     \r\n./main.go:23:6: internal compiler error: panic: interface conversion: types.Object is nil, not *ir.Name\r\n                                                                      \r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\n\n### What did you expect to see?\n\nNo ICE","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/mpratt/.cache/go-build'\r\nGOENV='/usr/local/google/home/mpratt/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/mpratt/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/mpratt/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/mpratt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='go1.22.2'\r\nGOTOOLDIR='/usr/local/google/home/mpratt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/mpratt/Downloads/b336740241_pgo_ice/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2161017047=/tmp/go-build -gno-record-gcc-switches'\n"
67007,runtime: WinDBG can't unwind runtime.mcall### Go version\n\ngo version devel go1.23-0304d035cd Tue Apr 23 02:53:00 2024 +0000 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n1. Build the following program:\r\n\r\n\r\n2. Run it with WinDBG with the following command:\r\n```\r\n> g\r\n> g KERNELBASE!GetQueuedCompletionStatusEx\r\n```\n\n### What did you see happen?\n\nThe stack traces show some corrupted entries and a partial g0 stack:\r\n\r\n![image](https://github.com/golang/go/assets/3747816/344011f0-4cf9-42d2-97c3-8af803b77a6d)\r\n\n\n### What did you expect to see?\n\nThe stack traces should reach the main function and attribute the `runtime.mcall` to the userland `time.Sleep` call:\r\n\r\n![image](https://github.com/golang/go/assets/3747816/eb5c525c-d661-471b-8177-3d68b914552c)\r\n,OS-Windows|Debugging|compiler/runtime,qmuntal,"### Go version\n\ngo version devel go1.23-0304d035cd Tue Apr 23 02:53:00 2024 +0000 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\qmuntaldiaz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\qmuntaldiaz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\qmuntaldiaz\\go\\pkg\\mod\r\nset GONOPROXY=github.com/microsoft/*,dev.azure.com/*\r\nset GONOSUMDB=github.com/microsoft/*,dev.azure.com/*\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\qmuntaldiaz\\go\r\nset GOPRIVATE=github.com/microsoft/*,dev.azure.com/*\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\qmuntaldiaz\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\qmuntaldiaz\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.23-0304d035cd Tue Apr 23 02:53:00 2024 +0000\r\nset GODEBUG=\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\qmuntaldiaz\\code\\gotest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\QMUNTA~1\\AppData\\Local\\Temp\\go-build402316087=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\n1. Build the following program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""runtime""\r\n\t""time""\r\n)\r\n\r\nfunc main() {\r\n\truntime.Breakpoint()\r\n\ttime.Sleep(10 * time.Minute)\r\n}\r\n```\r\n\r\n2. Run it with WinDBG with the following command:\r\n```\r\n> g\r\n> g KERNELBASE!GetQueuedCompletionStatusEx\r\n```\n\n### What did you see happen?\n\nThe stack traces show some corrupted entries and a partial g0 stack:\r\n\r\n![image](https://github.com/golang/go/assets/3747816/344011f0-4cf9-42d2-97c3-8af803b77a6d)\r\n\n\n### What did you expect to see?\n\nThe stack traces should reach the main function and attribute the `runtime.mcall` to the userland `time.Sleep` call:\r\n\r\n![image](https://github.com/golang/go/assets/3747816/eb5c525c-d661-471b-8177-3d68b914552c)\r\n","shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\qmuntaldiaz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\qmuntaldiaz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\qmuntaldiaz\\go\\pkg\\mod\r\nset GONOPROXY=github.com/microsoft/*,dev.azure.com/*\r\nset GONOSUMDB=github.com/microsoft/*,dev.azure.com/*\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\qmuntaldiaz\\go\r\nset GOPRIVATE=github.com/microsoft/*,dev.azure.com/*\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\qmuntaldiaz\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\qmuntaldiaz\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.23-0304d035cd Tue Apr 23 02:53:00 2024 +0000\r\nset GODEBUG=\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\qmuntaldiaz\\code\\gotest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\QMUNTA~1\\AppData\\Local\\Temp\\go-build402316087=/tmp/go-build -gno-record-gcc-switches\n"
66967,"spec: a valid range uint(maxUint) is not acceptedPer the spec:\r\n\r\n> If the range expression is a (possibly untyped) integer expression n, n too must be [assignable](https://tip.golang.org/ref/spec#Assignability) to the iteration variable; if there is no iteration variable, n must be assignable to int.\r\n\r\nyet the following program is accepted ([playground](https://go.dev/play/p/2Af8O3bqtjk)):\r\n\r\n\r\n\r\nThe range expression `uint(maxUint)` is an integer expression but cannot be assigned to an int variable, yet this code is permitted. Or perhaps the intent was that the assignability requirement to `int` is only present if the expression `x` is untyped, but it's not super-clear from the prose. Furthermore, it doesn't say anything about rune constants `x`.\r\n\r\nIn general, an (integer) numeric range expression x produces the index values from 0, 1, ... x-1 and so we want the same type behavior as we get in assignments. If the index variable i is:\r\n\r\n- declared outside the for statement, `i = x` must be valid\r\n- := declared in the for-range statement, `i := x` must be valid (but we may want to allow floating point constants `x` representable as `int` values\r\n- not declared, `_ = x` must be valid\r\n\r\nThe spec needs to be updated accordingly.",Documentation|NeedsFix,griesemer,"Per the spec:\r\n\r\n> If the range expression is a (possibly untyped) integer expression n, n too must be [assignable](https://tip.golang.org/ref/spec#Assignability) to the iteration variable; if there is no iteration variable, n must be assignable to int.\r\n\r\nyet the following program is accepted ([playground](https://go.dev/play/p/2Af8O3bqtjk)):\r\n\r\n```Go\r\npackage main\r\n\r\nconst maxUint = 18446744073709551615\r\n\r\nfunc main() {\r\n\tfor range uint(maxUint) {\r\n\t\tbreak\r\n\t}\r\n}\r\n```\r\n\r\nThe range expression `uint(maxUint)` is an integer expression but cannot be assigned to an int variable, yet this code is permitted. Or perhaps the intent was that the assignability requirement to `int` is only present if the expression `x` is untyped, but it's not super-clear from the prose. Furthermore, it doesn't say anything about rune constants `x`.\r\n\r\nIn general, an (integer) numeric range expression x produces the index values from 0, 1, ... x-1 and so we want the same type behavior as we get in assignments. If the index variable i is:\r\n\r\n- declared outside the for statement, `i = x` must be valid\r\n- := declared in the for-range statement, `i := x` must be valid (but we may want to allow floating point constants `x` representable as `int` values\r\n- not declared, `_ = x` must be valid\r\n\r\nThe spec needs to be updated accordingly.",Go\r\npackage main\r\n\r\nconst maxUint = 18446744073709551615\r\n\r\nfunc main() {\r\n\tfor range uint(maxUint) {\r\n\t\tbreak\r\n\t}\r\n}\r\n
66955,"cmd/compile: Go 1.22.x failed to be bootstrapped from 386 to ppc64le### Go version\n\ngo version go1.21.9 linux/386\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nCross-build go-1.22 for ppc64le from 386.\r\n\r\n0. Prepare a go environment of 386 isa\r\n1. Checkout a source directory of go1.22.2\r\n2. Run\r\n```\r\ncd src\r\nbash make.bash\r\n```\r\n\r\nwith environments\r\n\r\n```\r\nGOARCH: ppc64le\r\nGOOS: linux\r\nGOHOSTARCH: 386\r\nCGO_ENABLED: 0\r\n```\r\n\r\nThe was run in a test of freedesktop-sdk-binary-seed, full log is available https://gitlab.com/freedesktop-sdk/freedesktop-sdk-binary-seed/-/jobs/6679102887\r\n\r\nI also tested some other combinations:\r\n\r\n* go-1.21 386 bootstraps go-1.21 ppc64le: good\r\n* go-1.21 386 bootstraps go-1.22 amd64, arm64, 386: good\r\n* go-1.22 386 bootstraps go-1.22 ppc64le: bad\r\n\n\n### What did you see happen?\n\nThe build failed with errror log:\r\n\r\n```\r\n+ sh -c -e 'cd src\r\nbash make.bash\r\n'\r\nBuilding Go cmd/dist using /cross/lib/go. (go1.21.9 linux/386)\r\nBuilding Go toolchain1 using /cross/lib/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding commands for host, linux/386.\r\nBuilding packages and commands for target, linux/ppc64le.\r\n# time\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n<autogenerated>:1: illegal combination MOVD 64CON NONE NONE NONE NONE REG\r\n# crypto/des\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n<autogenerated>:1: illegal combination MOVD 64CON NONE NONE NONE NONE REG\r\ngo tool dist: FAILED: /buildstream-build/pkg/tool/linux_386/go_bootstrap install std: exit status 1\r\nCommand 'cd src\r\nbash make.bash' failed with exitcode 2\r\n```\r\n\n\n### What did you expect to see?\n\nThe build succeeds since Go 1.22 was announced boostrappable from Go 1.20+.",NeedsFix|arch-ppc64x|arch-386,pmur,"### Go version\n\ngo version go1.21.9 linux/386\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='ppc64le'\r\nGOBIN=''\r\nGOCACHE='/tmp/.cache/go-build'\r\nGOENV='/tmp/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='386'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/tmp/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/tmp/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/cross/lib/go'\r\nGOSUMDB=''\r\nGOTMPDIR=''\r\nGOTOOLCHAIN=''\r\nGOTOOLDIR='/cross/lib/go/pkg/tool/linux_386'\r\nGOVCS=''\r\nGOVERSION='go1.21.9'\r\nGCCGO='gccgo'\r\nGOPPC64='power8'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4273291414=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nCross-build go-1.22 for ppc64le from 386.\r\n\r\n0. Prepare a go environment of 386 isa\r\n1. Checkout a source directory of go1.22.2\r\n2. Run\r\n```\r\ncd src\r\nbash make.bash\r\n```\r\n\r\nwith environments\r\n\r\n```\r\nGOARCH: ppc64le\r\nGOOS: linux\r\nGOHOSTARCH: 386\r\nCGO_ENABLED: 0\r\n```\r\n\r\nThe was run in a test of freedesktop-sdk-binary-seed, full log is available https://gitlab.com/freedesktop-sdk/freedesktop-sdk-binary-seed/-/jobs/6679102887\r\n\r\nI also tested some other combinations:\r\n\r\n* go-1.21 386 bootstraps go-1.21 ppc64le: good\r\n* go-1.21 386 bootstraps go-1.22 amd64, arm64, 386: good\r\n* go-1.22 386 bootstraps go-1.22 ppc64le: bad\r\n\n\n### What did you see happen?\n\nThe build failed with errror log:\r\n\r\n```\r\n+ sh -c -e 'cd src\r\nbash make.bash\r\n'\r\nBuilding Go cmd/dist using /cross/lib/go. (go1.21.9 linux/386)\r\nBuilding Go toolchain1 using /cross/lib/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding commands for host, linux/386.\r\nBuilding packages and commands for target, linux/ppc64le.\r\n# time\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00072 (/buildstream-build/src/time/time.go:1242)        MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n00152 (<autogenerated>:1)       MOVD    $-51844517355891, R5\r\n<autogenerated>:1: illegal combination MOVD 64CON NONE NONE NONE NONE REG\r\n# crypto/des\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00080 (/buildstream-build/src/crypto/des/block.go:187)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n00088 (/buildstream-build/src/crypto/des/block.go:131)  MOVD    $16557098929935, R5\r\n<autogenerated>:1: illegal combination MOVD 64CON NONE NONE NONE NONE REG\r\ngo tool dist: FAILED: /buildstream-build/pkg/tool/linux_386/go_bootstrap install std: exit status 1\r\nCommand 'cd src\r\nbash make.bash' failed with exitcode 2\r\n```\r\n\n\n### What did you expect to see?\n\nThe build succeeds since Go 1.22 was announced boostrappable from Go 1.20+.",shell\nGO111MODULE=''\r\nGOARCH='ppc64le'\r\nGOBIN=''\r\nGOCACHE='/tmp/.cache/go-build'\r\nGOENV='/tmp/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='386'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/tmp/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/tmp/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/cross/lib/go'\r\nGOSUMDB=''\r\nGOTMPDIR=''\r\nGOTOOLCHAIN=''\r\nGOTOOLDIR='/cross/lib/go/pkg/tool/linux_386'\r\nGOVCS=''\r\nGOVERSION='go1.21.9'\r\nGCCGO='gccgo'\r\nGOPPC64='power8'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4273291414=/tmp/go-build -gno-record-gcc-switches'\n
66911,"x/tools/gopls: cgocall analyzer: ""token.Pos not within package"" bug (reported by telemetry)This stack `E4ACQw` was [reported by telemetry](https://storage.googleapis.com/prod-telemetry-merged/2024-04-17.json):\r\n\r\n[cache.(*action).exec.func2:+37](https://cs.opensource.google/go/x/tools/+/refs/tags/gopls/v0.15.3:gopls/internal/cache/analysis.go;l=1334;drc=c69dfaffd78ea784616c6efc7ece5eea34eaa8c0) is:\r\n\r\n\r\n```\r\ngopls/bug\r\ngolang.org/x/tools/gopls/internal/util/bug.report:+35\r\ngolang.org/x/tools/gopls/internal/util/bug.Errorf:+2\r\ngolang.org/x/tools/gopls/internal/cache.(*action).exec.func2:+37\r\ngolang.org/x/tools/gopls/internal/cache.toGobDiagnostic:+32\r\ngolang.org/x/tools/gopls/internal/cache.(*action).exec.func3:+1\r\ngolang.org/x/tools/go/analysis.(*Pass).Reportf:+2\r\ngolang.org/x/tools/go/analysis/passes/cgocall.checkCgo.func1:+28\r\ngo/ast.inspector.Visit:+1\r\ngo/ast.Walk:+1\r\ngo/ast.Walk:+173\r\ngo/ast.walkStmtList:=32\r\ngo/ast.Walk:+184\r\ngo/ast.Walk:+245\r\ngo/ast.walkStmtList:=32\r\ngo/ast.Walk:+184\r\ngo/ast.Walk:+307\r\n```\r\n```\r\ngolang.org/x/tools/gopls@v0.15.3 go1.22.0 windows/amd64 neovim,vscode (2)\r\n```\r\n\r\nIssue created by golang.org/x/tools/gopls/internal/telemetry/cmd/stacks.\r\n",NeedsInvestigation|gopls|Tools|gopls/telemetry-wins,adonovan,"This stack `E4ACQw` was [reported by telemetry](https://storage.googleapis.com/prod-telemetry-merged/2024-04-17.json):\r\n\r\n[cache.(*action).exec.func2:+37](https://cs.opensource.google/go/x/tools/+/refs/tags/gopls/v0.15.3:gopls/internal/cache/analysis.go;l=1334;drc=c69dfaffd78ea784616c6efc7ece5eea34eaa8c0) is:\r\n```go\r\n\t\treturn protocol.Location{}, errorf(""token.Pos not within package"")\r\n```\r\n\r\n```\r\ngopls/bug\r\ngolang.org/x/tools/gopls/internal/util/bug.report:+35\r\ngolang.org/x/tools/gopls/internal/util/bug.Errorf:+2\r\ngolang.org/x/tools/gopls/internal/cache.(*action).exec.func2:+37\r\ngolang.org/x/tools/gopls/internal/cache.toGobDiagnostic:+32\r\ngolang.org/x/tools/gopls/internal/cache.(*action).exec.func3:+1\r\ngolang.org/x/tools/go/analysis.(*Pass).Reportf:+2\r\ngolang.org/x/tools/go/analysis/passes/cgocall.checkCgo.func1:+28\r\ngo/ast.inspector.Visit:+1\r\ngo/ast.Walk:+1\r\ngo/ast.Walk:+173\r\ngo/ast.walkStmtList:=32\r\ngo/ast.Walk:+184\r\ngo/ast.Walk:+245\r\ngo/ast.walkStmtList:=32\r\ngo/ast.Walk:+184\r\ngo/ast.Walk:+307\r\n```\r\n```\r\ngolang.org/x/tools/gopls@v0.15.3 go1.22.0 windows/amd64 neovim,vscode (2)\r\n```\r\n\r\nIssue created by golang.org/x/tools/gopls/internal/telemetry/cmd/stacks.\r\n","go\r\n\t\treturn protocol.Location{}, errorf(""token.Pos not within package"")\r\n"
66890,"proposal: go/types: add HasTypeName interfaceDuring the types.Alias work, there was a recurring need (7 times in x/tools; @findleyr is adding an eighth) for this interface:\r\n\r\n\r\n\r\nOf course users can easily define it for themselves, but adding it to `go/types` provides a good place to hang additional documentation.\r\n\r\nRelated:\r\n- https://github.com/golang/go/issues/65774\r\n\r\n@findleyr @griesemer ",Proposal,adonovan,"During the types.Alias work, there was a recurring need (7 times in x/tools; @findleyr is adding an eighth) for this interface:\r\n\r\n```go\r\npackage types // import ""go/types""\r\n\r\n// HasTypeName abstracts the three kinds of types that have declared names:\r\n// aliases ([*Alias]), defined types ([*Named]), and type parameters ([*TypeParam]).\r\n//\r\n// Note that the Go spec considers built-in types such as string and int to\r\n// be defined types, but this package represents them as [*Basic],\r\n// since they do not have a declaration or [TypeName].\r\ntype HasTypeName interface {\r\n    Obj() *TypeName\r\n}\r\n```\r\n\r\nOf course users can easily define it for themselves, but adding it to `go/types` provides a good place to hang additional documentation.\r\n\r\nRelated:\r\n- https://github.com/golang/go/issues/65774\r\n\r\n@findleyr @griesemer ","go\r\npackage types // import ""go/types""\r\n\r\n// HasTypeName abstracts the three kinds of types that have declared names:\r\n// aliases ([*Alias]), defined types ([*Named]), and type parameters ([*TypeParam]).\r\n//\r\n// Note that the Go spec considers built-in types such as string and int to\r\n// be defined types, but this package represents them as [*Basic],\r\n// since they do not have a declaration or [TypeName].\r\ntype HasTypeName interface {\r\n    Obj() *TypeName\r\n}\r\n"
66878,"go/types,types2: internal compiler error: panic: cmd/compile/internal/types2/check.go:595: assertion failed### Go version\n\ngo dev branch (for playground)\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThis program crashes the compiler at the current dev branch in the playground: https://go.dev/play/p/3JI9h22Igk8?v=gotip\r\n\r\n(sidenote: I was only trying to get [this part of the spec](https://tip.golang.org/ref/spec#:~:text=x%2C%20ok%20%3D%20%3C%2Dch-,var%20x%2C%20ok%20T%20%3D%20%3C%2Dch,-yields%20an%20additional) to compile :])\n\n### What did you see happen?\n\nCompiler crash\n\n### What did you expect to see?\n\nCompiler success or standard error message",NeedsInvestigation,griesemer,"### Go version\n\ngo dev branch (for playground)\n\n### Output of `go env` in your module/workspace:\n\n```shell\ngo playground (sorry, not sure how to get the env from there)\n```\n\n\n### What did you do?\n\nThis program crashes the compiler at the current dev branch in the playground: https://go.dev/play/p/3JI9h22Igk8?v=gotip\r\n\r\n(sidenote: I was only trying to get [this part of the spec](https://tip.golang.org/ref/spec#:~:text=x%2C%20ok%20%3D%20%3C%2Dch-,var%20x%2C%20ok%20T%20%3D%20%3C%2Dch,-yields%20an%20additional) to compile :])\n\n### What did you see happen?\n\nCompiler crash\n\n### What did you expect to see?\n\nCompiler success or standard error message","shell\ngo playground (sorry, not sure how to get the env from there)\n"
66874,"cmd/compile: fails to bootstrap with go1.21.9 at 15cec430d7### Go version\n\nmaster\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n```\r\n# checkout upstream go commit 076166ab4e\r\nGOROOT_BOOTSTRAP=~/path/to/go1.21.9 ./make.bash\r\n```\r\n\n\n### What did you see happen?\n\n```\r\nBuilding Go cmd/dist using /home/murp/go-bootstrap-121. (go1.21.9 linux/ppc64le)\r\nBuilding Go toolchain1 using /home/murp/go-bootstrap-121.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\n<unknown line number>: internal compiler error: panic: godebug: Value of name not listed in godebugs.All: gotypesalias\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/home/murp/go-bootstrap-121/src/runtime/debug/stack.go:24 +0x6c\r\nbootstrap/cmd/compile/internal/base.FatalfAt({0x2152c?, 0x0?}, {0x79e1fb, 0x9}, {0xc000186c80, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/base/print.go:225 +0x270\r\nbootstrap/cmd/compile/internal/base.Fatalf(...)\r\n\t/home/murp/git/go/src/cmd/compile/internal/base/print.go:194\r\nbootstrap/cmd/compile/internal/gc.handlePanic()\r\n\t/home/murp/git/go/src/cmd/compile/internal/gc/main.go:52 +0xa4\r\npanic({0x6f3260?, 0xc00003ca00?})\r\n\t/home/murp/go-bootstrap-121/src/runtime/panic.go:914 +0x27c\r\ninternal/godebug.(*Setting).Value.func1()\r\n\t/home/murp/go-bootstrap-121/src/internal/godebug/godebug.go:141 +0xf4\r\nsync.(*Once).doSlow(0xc0000de401?, 0x5c4864?)\r\n\t/home/murp/go-bootstrap-121/src/sync/once.go:74 +0x110\r\nsync.(*Once).Do(...)\r\n\t/home/murp/go-bootstrap-121/src/sync/once.go:65\r\ninternal/godebug.(*Setting).Value(0xcb9180)\r\n\t/home/murp/go-bootstrap-121/src/internal/godebug/godebug.go:138 +0x78\r\nbootstrap/cmd/compile/internal/types2.NewChecker(0x7fffffffe898?, 0xc000466120, 0x0?)\r\n\t/home/murp/git/go/src/cmd/compile/internal/types2/check.go:261 +0x8c\r\nbootstrap/cmd/compile/internal/types2.(*Config).Check(0x79be6d?, {0x7fffffffe898?, 0x7a6074?}, {0xc00009c598, 0x1, 0x1}, 0x1d8d88?)\r\n\t/home/murp/git/go/src/cmd/compile/internal/types2/api.go:470 +0x98\r\nbootstrap/cmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0xc00009c528, 0x1, 0x18?})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/irgen.go:93 +0x5a0\r\nbootstrap/cmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc00009c528, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/unified.go:304 +0x7c\r\nbootstrap/cmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc00009c528?, 0x6e2500?, 0x0?})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/unified.go:180 +0xf4\r\nbootstrap/cmd/compile/internal/noder.LoadPackage({0xc00001e1d0, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/noder.go:77 +0x468\r\nbootstrap/cmd/compile/internal/gc.Main(0x7d72b0)\r\n\t/home/murp/git/go/src/cmd/compile/internal/gc/main.go:197 +0xce0\r\nmain.main()\r\n\t/home/murp/git/go/src/cmd/compile/main.go:57 +0x134\r\n```\n\n### What did you expect to see?\n\nA few lines indicating the toolchain bootstrapped.\r\n",NeedsFix|Soon|compiler/runtime,griesemer,"### Go version\n\nmaster\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGOARCH=ppc64le and GOARCH=amd64\r\nGOOS=linux\n```\n\n\n### What did you do?\n\n```\r\n# checkout upstream go commit 076166ab4e\r\nGOROOT_BOOTSTRAP=~/path/to/go1.21.9 ./make.bash\r\n```\r\n\n\n### What did you see happen?\n\n```\r\nBuilding Go cmd/dist using /home/murp/go-bootstrap-121. (go1.21.9 linux/ppc64le)\r\nBuilding Go toolchain1 using /home/murp/go-bootstrap-121.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\n<unknown line number>: internal compiler error: panic: godebug: Value of name not listed in godebugs.All: gotypesalias\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/home/murp/go-bootstrap-121/src/runtime/debug/stack.go:24 +0x6c\r\nbootstrap/cmd/compile/internal/base.FatalfAt({0x2152c?, 0x0?}, {0x79e1fb, 0x9}, {0xc000186c80, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/base/print.go:225 +0x270\r\nbootstrap/cmd/compile/internal/base.Fatalf(...)\r\n\t/home/murp/git/go/src/cmd/compile/internal/base/print.go:194\r\nbootstrap/cmd/compile/internal/gc.handlePanic()\r\n\t/home/murp/git/go/src/cmd/compile/internal/gc/main.go:52 +0xa4\r\npanic({0x6f3260?, 0xc00003ca00?})\r\n\t/home/murp/go-bootstrap-121/src/runtime/panic.go:914 +0x27c\r\ninternal/godebug.(*Setting).Value.func1()\r\n\t/home/murp/go-bootstrap-121/src/internal/godebug/godebug.go:141 +0xf4\r\nsync.(*Once).doSlow(0xc0000de401?, 0x5c4864?)\r\n\t/home/murp/go-bootstrap-121/src/sync/once.go:74 +0x110\r\nsync.(*Once).Do(...)\r\n\t/home/murp/go-bootstrap-121/src/sync/once.go:65\r\ninternal/godebug.(*Setting).Value(0xcb9180)\r\n\t/home/murp/go-bootstrap-121/src/internal/godebug/godebug.go:138 +0x78\r\nbootstrap/cmd/compile/internal/types2.NewChecker(0x7fffffffe898?, 0xc000466120, 0x0?)\r\n\t/home/murp/git/go/src/cmd/compile/internal/types2/check.go:261 +0x8c\r\nbootstrap/cmd/compile/internal/types2.(*Config).Check(0x79be6d?, {0x7fffffffe898?, 0x7a6074?}, {0xc00009c598, 0x1, 0x1}, 0x1d8d88?)\r\n\t/home/murp/git/go/src/cmd/compile/internal/types2/api.go:470 +0x98\r\nbootstrap/cmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0xc00009c528, 0x1, 0x18?})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/irgen.go:93 +0x5a0\r\nbootstrap/cmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc00009c528, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/unified.go:304 +0x7c\r\nbootstrap/cmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc00009c528?, 0x6e2500?, 0x0?})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/unified.go:180 +0xf4\r\nbootstrap/cmd/compile/internal/noder.LoadPackage({0xc00001e1d0, 0x1, 0x1})\r\n\t/home/murp/git/go/src/cmd/compile/internal/noder/noder.go:77 +0x468\r\nbootstrap/cmd/compile/internal/gc.Main(0x7d72b0)\r\n\t/home/murp/git/go/src/cmd/compile/internal/gc/main.go:197 +0xce0\r\nmain.main()\r\n\t/home/murp/git/go/src/cmd/compile/main.go:57 +0x134\r\n```\n\n### What did you expect to see?\n\nA few lines indicating the toolchain bootstrapped.\r\n",shell\nGOARCH=ppc64le and GOARCH=amd64\r\nGOOS=linux\n
66872,"x/vuln: unexpected publishing latency### govulncheck version\n\n% govulncheck -version                   \r\nGo: go1.22.2\r\nScanner: govulncheck@v1.0.1\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-04-17 15:34:19 +0000 UTC\r\n\r\nNo vulnerabilities found.\r\n\r\nShare feedback at https://go.dev/s/govulncheck-feedback.\r\n\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nYes, it\u2019s server-side\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI ran govulncheck ./...\n\n### What did you see happen?\n\ngovulncheck would not print https://pkg.go.dev/vuln/GO-2024-2730, despite my program being affected.\n\n### What did you expect to see?\n\nI saw https://github.com/golang/vulndb/commit/cd4d4fed9803036201ace6287f2f8c16bd2f4a2f was merged and https://pkg.go.dev/vuln/GO-2024-2730 worked in my browser, so I was surprised to see that it took about 10 more minutes or so for govulncheck to find the vulnerability locally. \r\n\r\nAt first, I suspected govulncheck was using a locally cached version of the database. I looked for an \u201cupdate\u201d command but couldn\u2019t find anything. Finally I read the source to see that govulncheck always seems to query the database (but doesn\u2019t print anything about that), and that\u2019s roughly when govulncheck invocations started showing the expected output:\r\n\r\n```\r\nVulnerability #1: GO-2024-2730\r\n    Directory traversal in FilesystemStore in github.com/gorilla/sessions\r\n  More info: https://pkg.go.dev/vuln/GO-2024-2730\r\n  Module: github.com/gorilla/sessions\r\n    Found in: github.com/gorilla/sessions@v1.2.0\r\n    Fixed in: N/A\r\n    Example traces found:\r\n      #1: internal/webui/web.go:93:30: webui.UI.indexHandler calls sessions.FilesystemStore.Get\r\n      #2: internal/webui/web.go:76:25: webui.UI.constantsHandler calls sessions.Session.Save\r\n\r\n```\r\n\r\nWhat is the current publishing latency and could it be improved? Is there a cache that should be invalidated or something along these lines?",NeedsInvestigation|vulncheck or vulndb,zpavlinovic|tatianab,"### govulncheck version\n\n% govulncheck -version                   \r\nGo: go1.22.2\r\nScanner: govulncheck@v1.0.1\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-04-17 15:34:19 +0000 UTC\r\n\r\nNo vulnerabilities found.\r\n\r\nShare feedback at https://go.dev/s/govulncheck-feedback.\r\n\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nYes, it\u2019s server-side\n\n### Output of `go env` in your module/workspace:\n\n```shell\ngo env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/michael/.cache/go-build'\r\nGOENV='/home/michael/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/michael/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/michael/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/michael/sdk/go1.22.2'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/michael/sdk/go1.22.2/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/michael/go/src/github.com/stapelberg/scan2drive/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4268251989=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI ran govulncheck ./...\n\n### What did you see happen?\n\ngovulncheck would not print https://pkg.go.dev/vuln/GO-2024-2730, despite my program being affected.\n\n### What did you expect to see?\n\nI saw https://github.com/golang/vulndb/commit/cd4d4fed9803036201ace6287f2f8c16bd2f4a2f was merged and https://pkg.go.dev/vuln/GO-2024-2730 worked in my browser, so I was surprised to see that it took about 10 more minutes or so for govulncheck to find the vulnerability locally. \r\n\r\nAt first, I suspected govulncheck was using a locally cached version of the database. I looked for an \u201cupdate\u201d command but couldn\u2019t find anything. Finally I read the source to see that govulncheck always seems to query the database (but doesn\u2019t print anything about that), and that\u2019s roughly when govulncheck invocations started showing the expected output:\r\n\r\n```\r\nVulnerability #1: GO-2024-2730\r\n    Directory traversal in FilesystemStore in github.com/gorilla/sessions\r\n  More info: https://pkg.go.dev/vuln/GO-2024-2730\r\n  Module: github.com/gorilla/sessions\r\n    Found in: github.com/gorilla/sessions@v1.2.0\r\n    Fixed in: N/A\r\n    Example traces found:\r\n      #1: internal/webui/web.go:93:30: webui.UI.indexHandler calls sessions.FilesystemStore.Get\r\n      #2: internal/webui/web.go:76:25: webui.UI.constantsHandler calls sessions.Session.Save\r\n\r\n```\r\n\r\nWhat is the current publishing latency and could it be improved? Is there a cache that should be invalidated or something along these lines?","shell\ngo env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/michael/.cache/go-build'\r\nGOENV='/home/michael/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/michael/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/michael/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/michael/sdk/go1.22.2'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/michael/sdk/go1.22.2/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/michael/go/src/github.com/stapelberg/scan2drive/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4268251989=/tmp/go-build -gno-record-gcc-switches'\n"
66876,"x/tools/gopls: go1.22.2 warning loop variable v captured by func literal loopclosure<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.22.2 linux/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.15.3\r\n    golang.org/x/tools/gopls@v0.15.3 h1:zbdOidFrPTc8Bx0YrN5QKgJ0zCjyGi0L27sKQ/bDG5o=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\r\n    golang.org/x/sync@v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\r\n    golang.org/x/telemetry@v0.0.0-20240209200032-7b892fcb8a78 h1:vcVnuftN4J4UKLRcgetjzfU9FjjgXUUYUc3JhFplgV4=\r\n    golang.org/x/text@v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\r\n    golang.org/x/tools@v0.18.1-0.20240412183611-d92ae0781217 h1:uH9jJYgeLCvblH0S+03kFO0qUDxRkbLRLFiKVVDl7ak=\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.6 h1:oFEHCKeID7to/3autwsWfnuv69j3NsfcXbvJKuIcep8=\r\n    mvdan.cc/gofumpt@v0.6.0 h1:G3QvahNDmpD+Aek/bNOLrFR2XC6ZAdo62dZu65gmwGo=\r\n    mvdan.cc/xurls/v2@v2.5.0 h1:lyBNOm8Wo71UknhUs4QTFUNNMyxy2JEIaKKo0RWOh+8=\r\ngo: go1.22.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.88.1\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.41.2\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n## Environment\r\n\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: /root/go\r\nGOROOT: /usr/local/go\r\nPATH: /root/.vscode-server/bin/e170252f762678dec6ca2cc69aba1570769a5d39/bin/remote-cli:/usr/local/go/bin:/root/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin:/root/.local/bin\r\n\r\n## Tools\r\n\r\n\tgo:\t/usr/local/go/bin/go: go version go1.22.2 linux/amd64\r\n\r\n\tgopls:\t/root/go/bin/gopls\t(version: v0.15.3 built with go: go1.22.2)\r\n\tgotests:\t/root/go/bin/gotests\t(version: v1.6.0 built with go: go1.22.2)\r\n\tgomodifytags:\t/root/go/bin/gomodifytags\t(version: v1.16.0 built with go: go1.22.2)\r\n\timpl:\t/root/go/bin/impl\t(version: v1.1.0 built with go: go1.22.2)\r\n\tgoplay:\t/root/go/bin/goplay\t(version: v1.0.0 built with go: go1.22.2)\r\n\tdlv:\t/root/go/bin/dlv\t(version: v1.22.1 built with go: go1.22.2)\r\n\tstaticcheck:\t/root/go/bin/staticcheck\t(version: v0.4.7 built with go: go1.22.2)\r\n\r\n## Go env\r\n\r\nWorkspace Folder (server): \r\n\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/root/.cache/go-build'\r\n\tGOENV='/root/.config/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='linux'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/root/go/pkg/mod'\r\n\tGONOPROXY=''\r\n\tGONOSUMDB=''\r\n\tGOOS='linux'\r\n\tGOPATH='/root/go'\r\n\tGOPRIVATE=''\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/go'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.22.2'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='gcc'\r\n\tCXX='g++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/xxx/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build445704314=/tmp/go-build -gno-record-gcc-switches'\r\n\t\r\nWorkspace Folder (web): \r\n\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/root/.cache/go-build'\r\n\tGOENV='/root/.config/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='linux'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/root/go/pkg/mod'\r\n\tGONOPROXY=''\r\n\tGONOSUMDB=''\r\n\tGOOS='linux'\r\n\tGOPATH='/root/go'\r\n\tGOPRIVATE=''\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/go'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.22.2'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='gcc'\r\n\tCXX='g++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/xxx/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build300344583=/tmp/go-build -gno-record-gcc-switches'\r\n\t\r\n</details>\r\n\r\n### Describe the bug\r\ngo 1.22 alredy fix the loop vairable issue, why waring ""loop variable v captured by func literal loopclosure"" (go.mod go version 1.22.2)\r\n\r\nwaring link https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/loopclosure\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n\r\n\r\n### Screenshots or recordings\r\n![image](https://github.com/golang/vscode-go/assets/12025422/8071f465-f002-4609-92da-5a8ee7815613)\r\n\r\n",gopls|Tools,findleyr,"<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.22.2 linux/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.15.3\r\n    golang.org/x/tools/gopls@v0.15.3 h1:zbdOidFrPTc8Bx0YrN5QKgJ0zCjyGi0L27sKQ/bDG5o=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\r\n    golang.org/x/sync@v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\r\n    golang.org/x/telemetry@v0.0.0-20240209200032-7b892fcb8a78 h1:vcVnuftN4J4UKLRcgetjzfU9FjjgXUUYUc3JhFplgV4=\r\n    golang.org/x/text@v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\r\n    golang.org/x/tools@v0.18.1-0.20240412183611-d92ae0781217 h1:uH9jJYgeLCvblH0S+03kFO0qUDxRkbLRLFiKVVDl7ak=\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.6 h1:oFEHCKeID7to/3autwsWfnuv69j3NsfcXbvJKuIcep8=\r\n    mvdan.cc/gofumpt@v0.6.0 h1:G3QvahNDmpD+Aek/bNOLrFR2XC6ZAdo62dZu65gmwGo=\r\n    mvdan.cc/xurls/v2@v2.5.0 h1:lyBNOm8Wo71UknhUs4QTFUNNMyxy2JEIaKKo0RWOh+8=\r\ngo: go1.22.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.88.1\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.41.2\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n## Environment\r\n\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: /root/go\r\nGOROOT: /usr/local/go\r\nPATH: /root/.vscode-server/bin/e170252f762678dec6ca2cc69aba1570769a5d39/bin/remote-cli:/usr/local/go/bin:/root/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin:/root/.local/bin\r\n\r\n## Tools\r\n\r\n\tgo:\t/usr/local/go/bin/go: go version go1.22.2 linux/amd64\r\n\r\n\tgopls:\t/root/go/bin/gopls\t(version: v0.15.3 built with go: go1.22.2)\r\n\tgotests:\t/root/go/bin/gotests\t(version: v1.6.0 built with go: go1.22.2)\r\n\tgomodifytags:\t/root/go/bin/gomodifytags\t(version: v1.16.0 built with go: go1.22.2)\r\n\timpl:\t/root/go/bin/impl\t(version: v1.1.0 built with go: go1.22.2)\r\n\tgoplay:\t/root/go/bin/goplay\t(version: v1.0.0 built with go: go1.22.2)\r\n\tdlv:\t/root/go/bin/dlv\t(version: v1.22.1 built with go: go1.22.2)\r\n\tstaticcheck:\t/root/go/bin/staticcheck\t(version: v0.4.7 built with go: go1.22.2)\r\n\r\n## Go env\r\n\r\nWorkspace Folder (server): \r\n\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/root/.cache/go-build'\r\n\tGOENV='/root/.config/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='linux'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/root/go/pkg/mod'\r\n\tGONOPROXY=''\r\n\tGONOSUMDB=''\r\n\tGOOS='linux'\r\n\tGOPATH='/root/go'\r\n\tGOPRIVATE=''\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/go'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.22.2'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='gcc'\r\n\tCXX='g++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/xxx/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build445704314=/tmp/go-build -gno-record-gcc-switches'\r\n\t\r\nWorkspace Folder (web): \r\n\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/root/.cache/go-build'\r\n\tGOENV='/root/.config/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='linux'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/root/go/pkg/mod'\r\n\tGONOPROXY=''\r\n\tGONOSUMDB=''\r\n\tGOOS='linux'\r\n\tGOPATH='/root/go'\r\n\tGOPRIVATE=''\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/go'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.22.2'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='gcc'\r\n\tCXX='g++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/xxx/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build300344583=/tmp/go-build -gno-record-gcc-switches'\r\n\t\r\n</details>\r\n\r\n### Describe the bug\r\ngo 1.22 alredy fix the loop vairable issue, why waring ""loop variable v captured by func literal loopclosure"" (go.mod go version 1.22.2)\r\n\r\nwaring link https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/loopclosure\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\telem := make([]string, 10)\r\n\tfor _, v := range elem {\r\n\t\tgo func() {\r\n\t\t\tfmt.Println(v)\r\n\t\t}()\r\n\t}\r\n}\r\n```\r\n\r\n### Screenshots or recordings\r\n![image](https://github.com/golang/vscode-go/assets/12025422/8071f465-f002-4609-92da-5a8ee7815613)\r\n\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\telem := make([]string, 10)\r\n\tfor _, v := range elem {\r\n\t\tgo func() {\r\n\t\t\tfmt.Println(v)\r\n\t\t}()\r\n\t}\r\n}\r\n"
66863,x/vuln/cmd/govulncheck: v1.1.0: Fatal error when used in a workspace### govulncheck version\r\n\r\nGo: go1.22.2\r\nScanner: govulncheck@v1.1.0\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-04-16 21:40:19 +0000 UTC\r\n\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nYes\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nConstruct a workspace like this:\r\n\r\n`go.work` \r\n\r\n\r\n`pkg/go.mod`\r\n```\r\nmodule example\r\n\r\ngo 1.22.2\r\n```\r\n\r\n`pkg/main.go`\r\n\r\n\r\n### Run `govulncheck`\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n,vulncheck or vulndb,zpavlinovic,"### govulncheck version\r\n\r\nGo: go1.22.2\r\nScanner: govulncheck@v1.1.0\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-04-16 21:40:19 +0000 UTC\r\n\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nYes\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/nicholas/.cache/go-build'\r\nGOENV='/home/nicholas/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/nicholas/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/nicholas/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go-1.22'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go-1.22/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK='/home/nicholas/src/demo/example/go.work'\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2849136563=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nConstruct a workspace like this:\r\n```shell\r\n$ tree\r\n.\r\n\u251c\u2500\u2500 go.work\r\n\u2514\u2500\u2500 pkg\r\n    \u251c\u2500\u2500 go.mod\r\n    \u2514\u2500\u2500 main.go\r\n```\r\n`go.work` \r\n```go\r\ngo 1.22.2\r\n\r\nuse ./pkg\r\n```\r\n\r\n`pkg/go.mod`\r\n```\r\nmodule example\r\n\r\ngo 1.22.2\r\n```\r\n\r\n`pkg/main.go`\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\tfmt.Println(""main"")\r\n}\r\n```\r\n\r\n### Run `govulncheck`\r\n\r\n```shell\r\n$ govulncheck ./pkg/...\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```shell\r\ngovulncheck: no go.mod file\r\n\r\ngovulncheck only works with Go modules. Try navigating to your module directory.\r\nOtherwise, run go mod init to make your project a module.\r\n\r\nSee https://go.dev/doc/modules/managing-dependencies for more information.\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```shell\r\nScanning your code and 45 packages across 1 dependent module for known vulnerabilities...\r\n\r\nNo vulnerabilities found.\r\n```\r\n","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/nicholas/.cache/go-build'\r\nGOENV='/home/nicholas/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/nicholas/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/nicholas/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go-1.22'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go-1.22/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK='/home/nicholas/src/demo/example/go.work'\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2849136563=/tmp/go-build -gno-record-gcc-switches'\r\n"
66842,"cmd/compile: spurious ""cannot infer T"" type errorWhile working on https://go.dev/cl/578675, I noticed that some explicit type arguments were required in order to pacify the compiler---and also gopls' diagnostics, which run the go/types type checker. (Adding the explicit type arguments caused gopls' infertypeargs analyzer to tell me they were redundant, which I think they should be, but that's not what either go/types or go/types2 thinks.)\r\n\r\nGOROOT @ 7418d41, x/tools @ cb134f5\r\n```\r\nxtools$ go build -o x ./gopls && echo PASS\r\nPASS\r\n```\r\nNow apply this patch, which removes type arguments from the call to [`typesSeqToSlice`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/golang/pkgdoc.go;l=675;drc=cb134f5c93e4e9e51a5b5d614c3dce636c481eca):\r\n```\r\nxtools$ git diff\r\ndiff --git a/gopls/internal/golang/pkgdoc.go b/gopls/internal/golang/pkgdoc.go\r\nindex 2d3cdd02cb..2f1c78499f 100644\r\n--- a/gopls/internal/golang/pkgdoc.go\r\n+++ b/gopls/internal/golang/pkgdoc.go\r\n@@ -492,10 +492,10 @@ window.onload = () => {\r\n                if sig.Params().Len() > 3 {\r\n                        sig = types.NewSignatureType(\r\n                                sig.Recv(),\r\n-                               typesSeqToSlice[*types.TypeParam](sig.RecvTypeParams()),\r\n-                               typesSeqToSlice[*types.TypeParam](sig.TypeParams()),\r\n+                               typesSeqToSlice(sig.RecvTypeParams()),\r\n+                               typesSeqToSlice(sig.TypeParams()),\r\n                                types.NewTuple(append(\r\n-                                       typesSeqToSlice[*types.Var](sig.Params())[:3],\r\n+                                       typesSeqToSlice(sig.Params())[:3],\r\n                                        types.NewVar(0, nil, """", types.Typ[types.Invalid]))...),\r\n                                sig.Results(),\r\n                                sig.Variadic())\r\nxtools$ go build -o x ./gopls || echo FAIL\r\n# golang.org/x/tools/gopls/internal/golang\r\ngopls/internal/golang/pkgdoc.go:495:21: in call to typesSeqToSlice, type *types.TypeParamList of sig.RecvTypeParams() does not match typesSeq[T] (cannot infer T)\r\ngopls/internal/golang/pkgdoc.go:496:21: in call to typesSeqToSlice, type *types.TypeParamList of sig.TypeParams() does not match typesSeq[T] (cannot infer T)\r\ngopls/internal/golang/pkgdoc.go:498:22: in call to typesSeqToSlice, type *types.Tuple of sig.Params() does not match typesSeq[T] (cannot infer T)\r\nFAIL\r\n```\r\n\r\n[typesSeqToSlice](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/golang/pkgdoc.go;l=675;drc=cb134f5c93e4e9e51a5b5d614c3dce636c481eca) is defined thus:\r\n\r\n\r\nNotably, its type parameters constrain only the results, not the arguments.\r\n\r\nStrangely, the offending statement compiles just fine [in the playground](https://go.dev/play/p/SeTqQlciXZI) so I wonder whether the nested function context is confusing the type inference algorithm.\r\n",generics|TypeInference|compiler/runtime,griesemer,"While working on https://go.dev/cl/578675, I noticed that some explicit type arguments were required in order to pacify the compiler---and also gopls' diagnostics, which run the go/types type checker. (Adding the explicit type arguments caused gopls' infertypeargs analyzer to tell me they were redundant, which I think they should be, but that's not what either go/types or go/types2 thinks.)\r\n\r\nGOROOT @ 7418d41, x/tools @ cb134f5\r\n```\r\nxtools$ go build -o x ./gopls && echo PASS\r\nPASS\r\n```\r\nNow apply this patch, which removes type arguments from the call to [`typesSeqToSlice`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/golang/pkgdoc.go;l=675;drc=cb134f5c93e4e9e51a5b5d614c3dce636c481eca):\r\n```\r\nxtools$ git diff\r\ndiff --git a/gopls/internal/golang/pkgdoc.go b/gopls/internal/golang/pkgdoc.go\r\nindex 2d3cdd02cb..2f1c78499f 100644\r\n--- a/gopls/internal/golang/pkgdoc.go\r\n+++ b/gopls/internal/golang/pkgdoc.go\r\n@@ -492,10 +492,10 @@ window.onload = () => {\r\n                if sig.Params().Len() > 3 {\r\n                        sig = types.NewSignatureType(\r\n                                sig.Recv(),\r\n-                               typesSeqToSlice[*types.TypeParam](sig.RecvTypeParams()),\r\n-                               typesSeqToSlice[*types.TypeParam](sig.TypeParams()),\r\n+                               typesSeqToSlice(sig.RecvTypeParams()),\r\n+                               typesSeqToSlice(sig.TypeParams()),\r\n                                types.NewTuple(append(\r\n-                                       typesSeqToSlice[*types.Var](sig.Params())[:3],\r\n+                                       typesSeqToSlice(sig.Params())[:3],\r\n                                        types.NewVar(0, nil, """", types.Typ[types.Invalid]))...),\r\n                                sig.Results(),\r\n                                sig.Variadic())\r\nxtools$ go build -o x ./gopls || echo FAIL\r\n# golang.org/x/tools/gopls/internal/golang\r\ngopls/internal/golang/pkgdoc.go:495:21: in call to typesSeqToSlice, type *types.TypeParamList of sig.RecvTypeParams() does not match typesSeq[T] (cannot infer T)\r\ngopls/internal/golang/pkgdoc.go:496:21: in call to typesSeqToSlice, type *types.TypeParamList of sig.TypeParams() does not match typesSeq[T] (cannot infer T)\r\ngopls/internal/golang/pkgdoc.go:498:22: in call to typesSeqToSlice, type *types.Tuple of sig.Params() does not match typesSeq[T] (cannot infer T)\r\nFAIL\r\n```\r\n\r\n[typesSeqToSlice](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/golang/pkgdoc.go;l=675;drc=cb134f5c93e4e9e51a5b5d614c3dce636c481eca) is defined thus:\r\n\r\n```go\r\ntype typesSeq[T any] interface {\r\n\tLen() int\r\n\tAt(int) T\r\n}\r\n\r\nfunc typesSeqToSlice[T any](seq typesSeq[T]) []T {\r\n\tslice := make([]T, seq.Len())\r\n\tfor i := range slice {\r\n\t\tslice[i] = seq.At(i)\r\n\t}\r\n\treturn slice\r\n}\r\n```\r\nNotably, its type parameters constrain only the results, not the arguments.\r\n\r\nStrangely, the offending statement compiles just fine [in the playground](https://go.dev/play/p/SeTqQlciXZI) so I wonder whether the nested function context is confusing the type inference algorithm.\r\n","go\r\ntype typesSeq[T any] interface {\r\n\tLen() int\r\n\tAt(int) T\r\n}\r\n\r\nfunc typesSeqToSlice[T any](seq typesSeq[T]) []T {\r\n\tslice := make([]T, seq.Len())\r\n\tfor i := range slice {\r\n\t\tslice[i] = seq.At(i)\r\n\t}\r\n\treturn slice\r\n}\r\n"
66835,"x/tools/go/analysis/passes/nilness: bogus ""impossible condition: non-nil == nil"" that is actually possible### Go version\r\n\r\ngo version go1.21.3 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThe following minimal example function\r\n```\r\nfunc F[T error](x T) {\r\n\tif any(x) == nil {\r\n\t\tpanic(0) // or whatever\r\n\t}\r\n}\r\n```\r\ntriggers a ""impossible condition: non-nil == nil (nilness) cond"" warning by the nilness analyser.\r\nI'm using vscode with its own gopls integration (which, as opposed to calling go vet (by default, unless opted-in) actually performs nilness analysis, as far as I understand).\r\nOf course, the nilness check is actually not bogus:\r\nCalling `F[error](nil)` will happily run panic(0).\r\nI suspect the analyser somehow thinks T is a non-interface type.\r\n\r\n### What did you see happen?\r\n\r\nAn impossible condition: non-nil == nil nilness (cond) warning flagged by my IDE\r\n\r\n### What did you expect to see?\r\n\r\nno warning.",Tools,adonovan,"### Go version\r\n\r\ngo version go1.21.3 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/gottfried/.cache/go-build'\r\nGOENV='/home/gottfried/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/gottfried/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/gottfried/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/gottfried/sdk/go1.21.3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/gottfried/sdk/go1.21.3/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/gottfried/Bandersnatch/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2158884728=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nThe following minimal example function\r\n```\r\nfunc F[T error](x T) {\r\n\tif any(x) == nil {\r\n\t\tpanic(0) // or whatever\r\n\t}\r\n}\r\n```\r\ntriggers a ""impossible condition: non-nil == nil (nilness) cond"" warning by the nilness analyser.\r\nI'm using vscode with its own gopls integration (which, as opposed to calling go vet (by default, unless opted-in) actually performs nilness analysis, as far as I understand).\r\nOf course, the nilness check is actually not bogus:\r\nCalling `F[error](nil)` will happily run panic(0).\r\nI suspect the analyser somehow thinks T is a non-interface type.\r\n\r\n### What did you see happen?\r\n\r\nAn impossible condition: non-nil == nil nilness (cond) warning flagged by my IDE\r\n\r\n### What did you expect to see?\r\n\r\nno warning.","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/gottfried/.cache/go-build'\r\nGOENV='/home/gottfried/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/gottfried/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/gottfried/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/gottfried/sdk/go1.21.3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/gottfried/sdk/go1.21.3/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/gottfried/Bandersnatch/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2158884728=/tmp/go-build -gno-record-gcc-switches'\r\n"
66826,"cmd/compile: missed trivial bound check elimination### Go version\n\ngo version go1.22.2 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI have this function in a fairly hot loop.\r\n\r\n```\r\nconst n = 256\r\ntype fieldElement uint16\r\ntype nttElement [n]fieldElement\r\n\r\nfunc nttMul(f, g nttElement) nttElement {\r\n\tvar h nttElement\r\n\tfor i := 0; i < 128; i++ {\r\n\t\ta0, a1 := f[2*i], f[2*i+1]\r\n\t\tb0, b1 := g[2*i], g[2*i+1]\r\n\t\th[2*i] = fieldAdd(fieldMul(a0, b0), fieldMul(fieldMul(a1, b1), gammas[i]))\r\n\t\th[2*i+1] = fieldAdd(fieldMul(a0, b1), fieldMul(a1, b0))\r\n\t}\r\n\treturn h\r\n}\r\n```\n\n### What did you see happen?\n\nBoth `f[2*i]` and `f[2*i+1]` get a `isInBounds()`. `g[2*i]` and `g[2*i+1]` don't.\n\n### What did you expect to see?\n\nOne or zero bounds checks.\r\n\r\nOne if the compiler realized that if `f[2*i+1]` is in bounds with `i` positive and small (0 to 127), then `f[2*i]` is clearly in bounds.\r\n\r\nZero if the compiler figured out that i is 0 to 127, so `2*i+1` is 0 to 255, and the size of f is a constant 256.",Performance|NeedsInvestigation|compiler/runtime,randall77,"### Go version\n\ngo version go1.22.2 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/filippo/Library/Caches/go-build'\r\nGOENV='/Users/filippo/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/filippo/pkg/mod'\r\nGONOPROXY='github.com/FiloSottile/*,filippo.io/*'\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/filippo'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org'\r\nGOROOT='/Users/filippo/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.darwin-arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/filippo/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.darwin-arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/filippo/src/filippo.io/mlkem768/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_j/hq4ytn1n4b94fhrpvvb9tktr0000gn/T/go-build3556564162=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI have this function in a fairly hot loop.\r\n\r\n```\r\nconst n = 256\r\ntype fieldElement uint16\r\ntype nttElement [n]fieldElement\r\n\r\nfunc nttMul(f, g nttElement) nttElement {\r\n\tvar h nttElement\r\n\tfor i := 0; i < 128; i++ {\r\n\t\ta0, a1 := f[2*i], f[2*i+1]\r\n\t\tb0, b1 := g[2*i], g[2*i+1]\r\n\t\th[2*i] = fieldAdd(fieldMul(a0, b0), fieldMul(fieldMul(a1, b1), gammas[i]))\r\n\t\th[2*i+1] = fieldAdd(fieldMul(a0, b1), fieldMul(a1, b0))\r\n\t}\r\n\treturn h\r\n}\r\n```\n\n### What did you see happen?\n\nBoth `f[2*i]` and `f[2*i+1]` get a `isInBounds()`. `g[2*i]` and `g[2*i+1]` don't.\n\n### What did you expect to see?\n\nOne or zero bounds checks.\r\n\r\nOne if the compiler realized that if `f[2*i+1]` is in bounds with `i` positive and small (0 to 127), then `f[2*i]` is clearly in bounds.\r\n\r\nZero if the compiler figured out that i is 0 to 127, so `2*i+1` is 0 to 255, and the size of f is a constant 256.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/filippo/Library/Caches/go-build'\r\nGOENV='/Users/filippo/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/filippo/pkg/mod'\r\nGONOPROXY='github.com/FiloSottile/*,filippo.io/*'\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/filippo'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org'\r\nGOROOT='/Users/filippo/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.darwin-arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/filippo/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.2.darwin-arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/filippo/src/filippo.io/mlkem768/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_j/hq4ytn1n4b94fhrpvvb9tktr0000gn/T/go-build3556564162=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66789,"cmd/go: `go list` reports all dependencies as indirect with workspaces### Go version\r\n\r\ngo version go1.22.2 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nTried to run `go list -f '{{if not (or .Main .Indirect)}}{{.Path}}{{end}}' -m xxx` to get the direct dependencies of one module on a workspace with multiple modules\r\n\r\n### What did you see happen?\r\n\r\nThe command outputs nothing, i.e. all direct dependencies of the module are discovered as indirect dependencies\r\n\r\n### What did you expect to see?\r\n\r\nThe command should show the direct dependencies of the module",NeedsInvestigation|GoCommand|modules,matloob,"### Go version\r\n\r\ngo version go1.22.2 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/xxx/Library/Caches/go-build'\r\nGOENV='/Users/xxx/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/xxx/go/pkg/mod'\r\nGONOPROXY='bitbucket.org/labscale'\r\nGONOSUMDB='bitbucket.org/labscale'\r\nGOOS='darwin'\r\nGOPATH='/Users/xxx/go'\r\nGOPRIVATE='bitbucket.org/labscale'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/wc/l5mz01h92p58tgq77kn1c6pr0000gn/T/go-build1746990975=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nTried to run `go list -f '{{if not (or .Main .Indirect)}}{{.Path}}{{end}}' -m xxx` to get the direct dependencies of one module on a workspace with multiple modules\r\n\r\n### What did you see happen?\r\n\r\nThe command outputs nothing, i.e. all direct dependencies of the module are discovered as indirect dependencies\r\n\r\n### What did you expect to see?\r\n\r\nThe command should show the direct dependencies of the module","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/xxx/Library/Caches/go-build'\r\nGOENV='/Users/xxx/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/xxx/go/pkg/mod'\r\nGONOPROXY='bitbucket.org/labscale'\r\nGONOSUMDB='bitbucket.org/labscale'\r\nGOOS='darwin'\r\nGOPATH='/Users/xxx/go'\r\nGOPRIVATE='bitbucket.org/labscale'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/wc/l5mz01h92p58tgq77kn1c6pr0000gn/T/go-build1746990975=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
66782,"cmd/trace: always opening browser, not printing profile### Go version\r\n\r\ngo version go1.22.2 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\nWhen running `go tool trace` with the trace generated by `go1.21.0` with `-pprof` a profile is printed to stdout:\r\n\r\n\r\n\r\nThis is _expected_\r\n\r\ndoing the same with the profile from `go1.22.0` opens the browser:\r\n\r\n```\r\n$ go1.22.0 tool trace -pprof=net 1_22_trace.out | wc -c\r\n2024/04/11 14:49:17 Preparing trace for viewer...\r\n2024/04/11 14:49:17 Splitting trace for viewer...\r\n2024/04/11 14:49:17 Opening browser. Trace viewer is listening on http://127.0.0.1:40941\r\n```\r\n\r\nThis is _unexpected_\r\n\r\n### What did you expect to see?\r\n\r\nPer the docs:\r\n\r\n```\r\n$ go1.22.0 tool trace -h\r\nUsage of 'go tool trace':\r\nGiven a trace file produced by 'go test':\r\n\tgo test -trace=trace.out pkg\r\n\r\nOpen a web browser displaying trace:\r\n\tgo tool trace [flags] [pkg.test] trace.out\r\n\r\nGenerate a pprof-like profile from the trace:\r\n    go tool trace -pprof=TYPE [pkg.test] trace.out\r\n```\r\n\r\nWhen I pass the `-pprof` flag I expect a profile to be generated",NeedsInvestigation|compiler/runtime,mknyszek,"### Go version\r\n\r\ngo version go1.22.2 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/my-user/.cache/go-build'\r\nGOENV='/home/my-user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/my-user/.local/share/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/my-user/.local/share/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/proj/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1974410770=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\nset -o errexit -o pipefail -o nounset\r\n\r\n# create a trivial module that supports 1.21.0+\r\ngo mod init m\r\ngo mod edit -go=1.21.0\r\n\r\ncat <<'EOF' > lib.go\r\npackage lib\r\n\r\nfunc Add(x int, y int) int {\r\n\treturn x+y\r\n}\r\nEOF\r\n\r\ncat <<'EOF' > lib_test.go\r\npackage lib\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc TestAdd(t *testing.T) {\r\n\tif Add(1,2) != 3 {\r\n\t\tt.Fatal(""forgot how to add"")\r\n\t}\r\n}\r\nEOF\r\n\r\n# generate a trace using go1.21.0 ...\r\ngo1.21.0 test -trace=1_21_trace.out ./...\r\n\r\n# and go1.21.0\r\ngo1.22.0 test -trace=1_22_trace.out ./...\r\n```\r\n\r\n\r\n### What did you see happen?\r\n\r\nWhen running `go tool trace` with the trace generated by `go1.21.0` with `-pprof` a profile is printed to stdout:\r\n\r\n```console\r\n$ go1.21.0 tool trace -pprof=net 1_21_trace.out | wc -c\r\n93\r\n$ go1.22.0 tool trace -pprof=net 1_21_trace.out | wc -c\r\n90\r\n```\r\n\r\nThis is _expected_\r\n\r\ndoing the same with the profile from `go1.22.0` opens the browser:\r\n\r\n```\r\n$ go1.22.0 tool trace -pprof=net 1_22_trace.out | wc -c\r\n2024/04/11 14:49:17 Preparing trace for viewer...\r\n2024/04/11 14:49:17 Splitting trace for viewer...\r\n2024/04/11 14:49:17 Opening browser. Trace viewer is listening on http://127.0.0.1:40941\r\n```\r\n\r\nThis is _unexpected_\r\n\r\n### What did you expect to see?\r\n\r\nPer the docs:\r\n\r\n```\r\n$ go1.22.0 tool trace -h\r\nUsage of 'go tool trace':\r\nGiven a trace file produced by 'go test':\r\n\tgo test -trace=trace.out pkg\r\n\r\nOpen a web browser displaying trace:\r\n\tgo tool trace [flags] [pkg.test] trace.out\r\n\r\nGenerate a pprof-like profile from the trace:\r\n    go tool trace -pprof=TYPE [pkg.test] trace.out\r\n```\r\n\r\nWhen I pass the `-pprof` flag I expect a profile to be generated","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/my-user/.cache/go-build'\r\nGOENV='/home/my-user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/my-user/.local/share/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/my-user/.local/share/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/proj/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1974410770=/tmp/go-build -gno-record-gcc-switches'\r\n"
66773,"cmd/compile: rerwrite cycle detection logic taking too long for large functions### Go version\n\ngo version go1.21.9 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThe code gets stuck when building it with go1.21, but it builds fine with go1.18\n\n### What did you see happen?\n\nIt keeps getting stuck when building the source code below using the command:\r\n\r\n\r\n\r\n[code.zip](https://github.com/golang/go/files/14941816/code.zip)\r\n\n\n### What did you expect to see?\n\nIt can be built normally using go1.21 or higher version",NeedsInvestigation|compiler/runtime,thanm,"### Go version\n\ngo version go1.21.9 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/codfrm/Library/Caches/go-build'\r\nGOENV='/Users/codfrm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/codfrm/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/codfrm/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/codfrm/go/go1.21.9'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/codfrm/go/go1.21.9/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.9'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='****/test/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xr/2xv9m3_j4vd3hp0bdjx52z7m0000gn/T/go-build1074337786=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nThe code gets stuck when building it with go1.21, but it builds fine with go1.18\n\n### What did you see happen?\n\nIt keeps getting stuck when building the source code below using the command:\r\n\r\n```bash\r\ngo build -x -work -v main.go\r\n\r\nWORK=/var/folders/xr/2xv9m3_j4vd3hp0bdjx52z7m0000gn/T/go-build2102151065\r\ntest/src\r\nmkdir -p $WORK/b043/\r\ncat >/var/folders/xr/2xv9m3_j4vd3hp0bdjx52z7m0000gn/T/go-build2102151065/b043/importcfg << 'EOF' # internal\r\n# import config\r\nEOF\r\ncd /****/test\r\n/Users/codfrm/go/go1.21.9/pkg/tool/darwin_arm64/compile -o $WORK/b043/_pkg_.a -trimpath ""$WORK/b043=>"" -p test/src -lang=go1.18 -complete -buildid BVwUNF2ANdz8supqWmvy/BVwUNF2ANdz8supqWmvy -goversion go1.21.9 -c=4 -shared -nolocalimports -importcfg $WORK/b043/importcfg -pack ./src/t.go\r\n```\r\n\r\n[code.zip](https://github.com/golang/go/files/14941816/code.zip)\r\n\n\n### What did you expect to see?\n\nIt can be built normally using go1.21 or higher version","shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/codfrm/Library/Caches/go-build'\r\nGOENV='/Users/codfrm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/codfrm/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/codfrm/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/codfrm/go/go1.21.9'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/codfrm/go/go1.21.9/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.9'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='****/test/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xr/2xv9m3_j4vd3hp0bdjx52z7m0000gn/T/go-build1074337786=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66763,x/net/http2: data race in Transport.newClientConn() when connection idle timeout is too low### Go version\r\n\r\n1.22.2\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nTest code:\r\n\r\nRun it via\r\n```\r\ngo test . -race -count 10000 -v -failfast\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe above trips the race detector due to `ClientConn.idleTimer` firing **while** the client connection is still being constructed. The race happens in `ClientConn.closeIfIdle()` when it tries to read from `ClientConn.nextStreamID` while it's being updated in\r\n\r\n\r\nOutput of the test with race detection enabled:\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.,NeedsFix,panjf2000,"### Go version\r\n\r\n1.22.2\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/echung/Library/Caches/go-build'\r\nGOENV='/Users/echung/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/echung/go-code/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/echung/go-code'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/echung/go-code/http2idleconntest/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/f6/d0y5wpkn14gb644rbckvn_dr0000gn/T/go-build46174965=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nTest code:\r\n```go\r\npackage idleconn_test\r\n\r\nimport (\r\n\t""context""\r\n\t""crypto/tls""\r\n\t""net""\r\n\t""net/http""\r\n\t""net/http/httptest""\r\n\t""testing""\r\n\t""time""\r\n\r\n\t""golang.org/x/net/http2""\r\n\t""golang.org/x/net/http2/h2c""\r\n)\r\n\r\nfunc TestHTTP2IdleConnTimeout(t *testing.T) {\r\n\tserver := httptest.NewServer(\r\n\t\th2c.NewHandler(\r\n\t\t\thttp.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}),\r\n\t\t\t&http2.Server{},\r\n\t\t),\r\n\t)\r\n\tdefer server.Close()\r\n\r\n\tclient := http.Client{\r\n\t\tTransport: &http2.Transport{\r\n\t\t\tAllowHTTP: true,\r\n\t\t\tDialTLSContext: func(ctx context.Context, network, addr string, cfg *tls.Config) (net.Conn, error) {\r\n\t\t\t\tvar d net.Dialer\r\n\t\t\t\treturn d.DialContext(ctx, network, addr)\r\n\t\t\t},\r\n\t\t\tIdleConnTimeout: time.Millisecond,\r\n\t\t},\r\n\t}\r\n\r\n\tfor range 1000 {\r\n\t\tgo func() {\r\n\t\t\t_, _ = client.Get(server.URL)\r\n\t\t}()\r\n\t}\r\n}\r\n\r\n```\r\nRun it via\r\n```\r\ngo test . -race -count 10000 -v -failfast\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe above trips the race detector due to `ClientConn.idleTimer` firing **while** the client connection is still being constructed. The race happens in `ClientConn.closeIfIdle()` when it tries to read from `ClientConn.nextStreamID` while it's being updated in\r\n```go\r\n\tif t.AllowHTTP {\r\n\t\tcc.nextStreamID = 3\r\n\t}\r\n```\r\n\r\nOutput of the test with race detection enabled:\r\n```shell\r\n $ go test . -race -count 10000 -v -failfast\r\n=== RUN   TestHTTP2IdleConnTimeout\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c0002c69b0 by goroutine 760:\r\n  golang.org/x/net/http2.(*ClientConn).closeIfIdle()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:1108 +0xc4\r\n  golang.org/x/net/http2.(*ClientConn).onIdleTimeout()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:1080 +0x34\r\n  golang.org/x/net/http2.(*ClientConn).onIdleTimeout-fm()\r\n      <autogenerated>:1 +0x20\r\n\r\nPrevious write at 0x00c0002c69b0 by goroutine 508:\r\n  golang.org/x/net/http2.(*Transport).newClientConn()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:864 +0x1048\r\n  golang.org/x/net/http2.(*Transport).dialClientConn()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:739 +0xdc\r\n  golang.org/x/net/http2.(*dialCall).dial()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/client_conn_pool.go:141 +0x7c\r\n  golang.org/x/net/http2.(*clientConnPool).getStartDialLocked.gowrap1()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/client_conn_pool.go:134 +0x64\r\n\r\nGoroutine 760 (running) created at:\r\n  time.goFunc()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/time/sleep.go:177 +0x40\r\n\r\nGoroutine 508 (running) created at:\r\n  golang.org/x/net/http2.(*clientConnPool).getStartDialLocked()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/client_conn_pool.go:134 +0x34c\r\n  golang.org/x/net/http2.(*clientConnPool).getClientConn()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/client_conn_pool.go:95 +0x200\r\n  golang.org/x/net/http2.(*clientConnPool).GetClientConn()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/client_conn_pool.go:55 +0x44\r\n  golang.org/x/net/http2.(*Transport).RoundTripOpt()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:610 +0x620\r\n  golang.org/x/net/http2.(*Transport).RoundTrip()\r\n      /Users/echung/go-code/pkg/mod/golang.org/x/net@v0.24.0/http2/transport.go:575 +0x34\r\n  net/http.send()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/net/http/client.go:259 +0x6ec\r\n  net/http.(*Client).send()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/net/http/client.go:180 +0x100\r\n  net/http.(*Client).do()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/net/http/client.go:724 +0xc60\r\n  net/http.(*Client).Do()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/net/http/client.go:590 +0x90\r\n  net/http.(*Client).Get()\r\n      /opt/homebrew/Cellar/go/1.22.2/libexec/src/net/http/client.go:487 +0xa0\r\n  http2idleconntest_test.TestHTTP2IdleConnTimeout.func3()\r\n      /Users/echung/go-code/http2idleconntest/idleconn_test.go:38 +0x58\r\n==================\r\n    testing.go:1398: race detected during execution of test\r\n--- FAIL: TestHTTP2IdleConnTimeout (0.01s)\r\nFAIL\r\nFAIL\thttp2idleconntest\t0.427s\r\nFAIL\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/echung/Library/Caches/go-build'\r\nGOENV='/Users/echung/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/echung/go-code/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/echung/go-code'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/echung/go-code/http2idleconntest/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/f6/d0y5wpkn14gb644rbckvn_dr0000gn/T/go-build46174965=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
66733,"x/tools/go/analysis/printf: doc: explain ""possible formatting directive"" message in documentationThe printf checker reports a diagnostic for [calls like this](https://go.dev/play/p/f40tlCD724f):\r\n\r\n\r\n(Aside: though it's easy to conceive of false positives for this heuristic, in practice it seems to be very reliable.)\r\n\r\nIn Google issue 302359716, a number of users tell us that the message makes them think the problem is in the format string, when really it's in the choice of formatting function. Perhaps the error message could give them a hint:\r\n\r\n\r\n\r\nThe error message could vary depending on whether the corresponding 'f' variant function exists. The main challenge is deciding the exact wording; these messages have been agonized over for a decade.\r\n\r\n\r\n\r\n@robpike ",Documentation|Analysis,adonovan,"The printf checker reports a diagnostic for [calls like this](https://go.dev/play/p/f40tlCD724f):\r\n\r\n```go\r\nfmt.Print(""hello, %s"") // ""%s call has possible Printf formatting directive %s""\r\n```\r\n(Aside: though it's easy to conceive of false positives for this heuristic, in practice it seems to be very reliable.)\r\n\r\nIn Google issue 302359716, a number of users tell us that the message makes them think the problem is in the format string, when really it's in the choice of formatting function. Perhaps the error message could give them a hint:\r\n\r\n```go\r\nfmt.Print(""hello, %s"") // ""fmt.Print call has possible formatting directive %s; use fmt.Printf(...) or fmt.Printf(""%s"", ...)""\r\n```\r\n\r\nThe error message could vary depending on whether the corresponding 'f' variant function exists. The main challenge is deciding the exact wording; these messages have been agonized over for a decade.\r\n\r\n\r\n\r\n@robpike ","go\r\nfmt.Print(""hello, %s"") // ""%s call has possible Printf formatting directive %s""\r\n"
66693,"x/website: release notes for Go 1.22 mentions inexistent math/rand/v2.Uint()### Go version\n\ngo version go1.22.2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRead release notes at [https://go.dev/doc/go1.22](https://go.dev/doc/go1.22#:~:text=The%20Intn%2C%20Int31%2C%20Int31n%2C%20Int63%2C%20and%20Int64n%20top%2Dlevel%20functions%20and%20methods%20from%20math/rand%20are%20spelled%20more%20idiomatically%20in%20math/rand/v2%3A%20IntN%2C%20Int32%2C%20Int32N%2C%20Int64%2C%20and%20Int64N.%20There%20are%20also%20new%20top%2Dlevel%20functions%20and%20methods%20Uint32%2C%20Uint32N%2C%20Uint64%2C%20Uint64N%2C%20Uint%2C%20and%20UintN), highlights are mine:\r\n\r\n> The Intn, Int31, Int31n, Int63, and Int64n top-level functions and methods from math/rand are spelled more idiomatically in math/rand/v2: IntN, Int32, Int32N, Int64, and Int64N. **There are also new top-level functions and methods** Uint32, Uint32N, Uint64, Uint64N, **Uint**, and UintN.\r\n\n\n### What did you see happen?\n\nTried to use `math/rand/v2.Uint`, got a compilation error and realized it doesn't exist, and looking at the CLs that added math/rand/v2 it is possible it never existed, even tough it is mentioned in the original proposal.\r\n\r\n\n\n### What did you expect to see?\n\nEither the release notes are wrong or the new package is missing intended functionality.",Documentation|NeedsFix|website,adonovan,"### Go version\n\ngo version go1.22.2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nRead release notes at [https://go.dev/doc/go1.22](https://go.dev/doc/go1.22#:~:text=The%20Intn%2C%20Int31%2C%20Int31n%2C%20Int63%2C%20and%20Int64n%20top%2Dlevel%20functions%20and%20methods%20from%20math/rand%20are%20spelled%20more%20idiomatically%20in%20math/rand/v2%3A%20IntN%2C%20Int32%2C%20Int32N%2C%20Int64%2C%20and%20Int64N.%20There%20are%20also%20new%20top%2Dlevel%20functions%20and%20methods%20Uint32%2C%20Uint32N%2C%20Uint64%2C%20Uint64N%2C%20Uint%2C%20and%20UintN), highlights are mine:\r\n\r\n> The Intn, Int31, Int31n, Int63, and Int64n top-level functions and methods from math/rand are spelled more idiomatically in math/rand/v2: IntN, Int32, Int32N, Int64, and Int64N. **There are also new top-level functions and methods** Uint32, Uint32N, Uint64, Uint64N, **Uint**, and UintN.\r\n\n\n### What did you see happen?\n\nTried to use `math/rand/v2.Uint`, got a compilation error and realized it doesn't exist, and looking at the CLs that added math/rand/v2 it is possible it never existed, even tough it is mentioned in the original proposal.\r\n\r\n\n\n### What did you expect to see?\n\nEither the release notes are wrong or the new package is missing intended functionality.",shell\nN/A\n
66690,"go/types: doc: clarify that Named types are canonical only within one Importer### Go version\n\ngo version go1.21.3 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI used SSA to load the packages and tried to compare the types using `types.Identical`, but if the packages are loaded separately, the `types.Identical` won't return the correct result.\r\n\r\nI have written my use cases here: https://github.com/xieyuschen/verify-identical/blob/master/main_test.go.\r\n\r\nIts pipeline shows the result: https://github.com/xieyuschen/verify-identical/actions/runs/8564767599/job/23471810349\r\n\r\n```\r\n--- FAIL: TestFailCase (1.23s)\r\n    --- FAIL: TestFailCase/Mutex_is_not_identical_when_load_sync_twice (0.67s)\r\n        main_test.go:39: actual and expected type are different\r\n    --- FAIL: TestFailCase/Mutex_is_not_identical_between_loading_from_sync_and_retrieving_from_code (0.30s)\r\n        main_test.go:39: actual and expected type are different\r\nFAIL\r\nFAIL\tgithub.com/xieyuschen/verify-identical\t1.237s\r\n```\r\n\r\n\n\n### What did you see happen?\n\n\r\n#### Unexpected Cases\r\n\r\n- load the `sync` package and get the `Mutex` type twice, and then check whether they are identical. The result is they're not identical.\r\n- load the `sync` package and another package which has a variable with type `sync.Mutex`, and then check whether they are identical. The result is they're not identical.\r\n\r\n#### Successful Case\r\n\r\nIf I load the package only once, and then get the variable with `sync.Mutex` type from the user-package and the Mutex type from sync package, their types are identical.\n\n### What did you expect to see?\n\nI want to see that no matter how the packages are loaded and types are retrieved, as long as they're identical(for example, they comes from the same revision of the same code, the `types.Identical` should return `true`. Sorry for the possible un-precise description of the `identical` due to my limited knowledge about type system. The possible of this idea is that what if users change their dependencies on the fly as the SSA will help you to resolve the dependencies. \r\n\r\nThe current implementation compares the `pointer` directly in the [identicalOrigin](https://github.com/golang/go/blob/2e064cf14441460290fd25d9d61f02a9d0bae671/src/cmd/compile/internal/types2/predicates.go#L487), which will of course fail the cases I mentioned because loading multiple times produce different pointers. It hits the concern left by @griesemer .\r\n\r\nI tried a simple change in the `identicalOrigin` in my fork: https://github.com/xieyuschen/go-1/commit/78b6c82555c8675b173695a4c404d78f9a3f0fdc, but it's not really helpful because even the `obj` fields contain different values. I believe this is caused by the pointers hold inside the [`obj`](https://github.com/golang/go/blob/2e064cf14441460290fd25d9d61f02a9d0bae671/src/cmd/compile/internal/types2/object.go#L91) structure.\r\n\r\nDue to this, I stoped my investigation as I feel like it's very likely something that closely embedded inside the compiler and a great of complexities are hidden. I am not sure:\r\n\r\n- whether the behavior is expected or not. but I do haven't found documents about it.\r\n- whether it's an SSA issue instead of the `go/types` package\r\n\r\nIf it's worthy fixing, i would like to spend more time about the details. If not, i'd like to add a comment for both types and SSA to state more details about this.\r\n\r\n",Documentation|NeedsFix,adonovan,"### Go version\n\ngo version go1.21.3 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/yuchen.xie/Library/Caches/go-build'\r\nGOENV='/Users/yuchen.xie/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/yuchen.xie/go/pkg/mod'\r\nGONOPROXY='git.garena.com'\r\nGONOSUMDB='git.garena.com'\r\nGOOS='darwin'\r\nGOPATH='/Users/yuchen.xie/go'\r\nGOPRIVATE='git.garena.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/yuchen.xie/workspace/verify-identical/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/28/7sypdf0519xfl4ylhq_90s0m0000gp/T/go-build3792409280=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI used SSA to load the packages and tried to compare the types using `types.Identical`, but if the packages are loaded separately, the `types.Identical` won't return the correct result.\r\n\r\nI have written my use cases here: https://github.com/xieyuschen/verify-identical/blob/master/main_test.go.\r\n\r\nIts pipeline shows the result: https://github.com/xieyuschen/verify-identical/actions/runs/8564767599/job/23471810349\r\n\r\n```\r\n--- FAIL: TestFailCase (1.23s)\r\n    --- FAIL: TestFailCase/Mutex_is_not_identical_when_load_sync_twice (0.67s)\r\n        main_test.go:39: actual and expected type are different\r\n    --- FAIL: TestFailCase/Mutex_is_not_identical_between_loading_from_sync_and_retrieving_from_code (0.30s)\r\n        main_test.go:39: actual and expected type are different\r\nFAIL\r\nFAIL\tgithub.com/xieyuschen/verify-identical\t1.237s\r\n```\r\n\r\n\n\n### What did you see happen?\n\n\r\n#### Unexpected Cases\r\n\r\n- load the `sync` package and get the `Mutex` type twice, and then check whether they are identical. The result is they're not identical.\r\n- load the `sync` package and another package which has a variable with type `sync.Mutex`, and then check whether they are identical. The result is they're not identical.\r\n\r\n#### Successful Case\r\n\r\nIf I load the package only once, and then get the variable with `sync.Mutex` type from the user-package and the Mutex type from sync package, their types are identical.\n\n### What did you expect to see?\n\nI want to see that no matter how the packages are loaded and types are retrieved, as long as they're identical(for example, they comes from the same revision of the same code, the `types.Identical` should return `true`. Sorry for the possible un-precise description of the `identical` due to my limited knowledge about type system. The possible of this idea is that what if users change their dependencies on the fly as the SSA will help you to resolve the dependencies. \r\n\r\nThe current implementation compares the `pointer` directly in the [identicalOrigin](https://github.com/golang/go/blob/2e064cf14441460290fd25d9d61f02a9d0bae671/src/cmd/compile/internal/types2/predicates.go#L487), which will of course fail the cases I mentioned because loading multiple times produce different pointers. It hits the concern left by @griesemer .\r\n\r\nI tried a simple change in the `identicalOrigin` in my fork: https://github.com/xieyuschen/go-1/commit/78b6c82555c8675b173695a4c404d78f9a3f0fdc, but it's not really helpful because even the `obj` fields contain different values. I believe this is caused by the pointers hold inside the [`obj`](https://github.com/golang/go/blob/2e064cf14441460290fd25d9d61f02a9d0bae671/src/cmd/compile/internal/types2/object.go#L91) structure.\r\n\r\nDue to this, I stoped my investigation as I feel like it's very likely something that closely embedded inside the compiler and a great of complexities are hidden. I am not sure:\r\n\r\n- whether the behavior is expected or not. but I do haven't found documents about it.\r\n- whether it's an SSA issue instead of the `go/types` package\r\n\r\nIf it's worthy fixing, i would like to spend more time about the details. If not, i'd like to add a comment for both types and SSA to state more details about this.\r\n\r\n","shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/yuchen.xie/Library/Caches/go-build'\r\nGOENV='/Users/yuchen.xie/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/yuchen.xie/go/pkg/mod'\r\nGONOPROXY='git.garena.com'\r\nGONOSUMDB='git.garena.com'\r\nGOOS='darwin'\r\nGOPATH='/Users/yuchen.xie/go'\r\nGOPRIVATE='git.garena.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/yuchen.xie/workspace/verify-identical/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/28/7sypdf0519xfl4ylhq_90s0m0000gp/T/go-build3792409280=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66663,"cmd/compile: ""internal compiler error: is not shape-identical"" crash### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nExperimenting with limits of the generic type system. Error triggered by addition of `Blocks()` to `Range` interface.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n### What did you see happen?\n\nInternal compile error running `go test` \r\n\r\n\n\n### What did you expect to see?\n\nExpected code to compile or compiler to emit error saying what is illegal about the code.",NeedsInvestigation|compiler/runtime,cuonglm,"### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ipfreely/.cache/go-build'\r\nGOENV='/home/ipfreely/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ipfreely/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ipfreely/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/go1.22.1'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/go1.22.1/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ipfreely/projects/gobug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3230307039=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nExperimenting with limits of the generic type system. Error triggered by addition of `Blocks()` to `Range` interface.\r\n\r\n```go\r\n// go.mod\r\nmodule example.com/bug/v2\r\n\r\ngo 1.22.1\r\n```\r\n\r\n```go\r\n// bug.go\r\npackage gobug\r\n\r\ntype Iterator[A any] func() (bool, A)\r\n\r\ntype Set[A any] interface {\r\n\tAddresses() Iterator[A]\r\n\tRanges() Iterator[Range[A]]\r\n}\r\n\r\ntype Range[A any] interface {\r\n\tSet[A]\r\n\t// Problem line\r\n\tBlocks() Iterator[Block[A]]\r\n}\r\n\r\ntype Block[A any] interface {\r\n\tRange[A]\r\n}\r\n\r\ntype rangeImpl[A any] struct{}\r\n\r\nfunc (r *rangeImpl[A]) Addresses() Iterator[A] {\r\n\treturn func() (bool, A) {\r\n\t\tvar a A\r\n\t\treturn false, a\r\n\t}\r\n}\r\n\r\nfunc (r *rangeImpl[A]) Ranges() Iterator[Range[A]] {\r\n\treturn func() (bool, Range[A]) {\r\n\t\tvar a Range[A]\r\n\t\treturn false, a\r\n\t}\r\n}\r\n\r\nfunc (r *rangeImpl[A]) Blocks() Iterator[Block[A]] {\r\n\treturn func() (bool, Block[A]) {\r\n\t\tvar a Block[A]\r\n\t\treturn false, a\r\n\t}\r\n}\r\n\r\nfunc NewRange[A any]() Range[A] {\r\n\treturn &rangeImpl[A]{}\r\n}\r\n```\r\n\r\n```go\r\n// bug_test.go\r\npackage gobug_test\r\n\r\nimport (\r\n\t""testing""\r\n\r\n\tgobug ""example.com/bug/v2""\r\n)\r\n\r\nfunc TestNetRange(t *testing.T) {\r\n\ttype AddrImpl struct{}\r\n\tr := gobug.NewRange[AddrImpl]()\r\n\tif r == nil {\r\n\t\tt.Fail()\r\n\t}\r\n}\r\n```\r\n\n\n### What did you see happen?\n\nInternal compile error running `go test` \r\n\r\n```shell\r\n$ go test example.com/bug/v2\r\n# example.com/bug/v2_test [example.com/bug/v2.test]\r\n./bug_test.go:11:31: internal compiler error: gobug.NewRange[go.shape.struct {}](&gobug..dict.NewRange[example.com/bug/v2_test.AddrImpl\xb71]) (type gobug.Range[go.shape.struct {}]) is not shape-identical to gobug.Range[example.com/bug/v2_test.AddrImpl\xb71]\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL\texample.com/bug/v2 [build failed]\r\nFAIL\r\n```\n\n### What did you expect to see?\n\nExpected code to compile or compiler to emit error saying what is illegal about the code.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ipfreely/.cache/go-build'\r\nGOENV='/home/ipfreely/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ipfreely/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ipfreely/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/go1.22.1'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/go1.22.1/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ipfreely/projects/gobug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3230307039=/tmp/go-build -gno-record-gcc-switches'\n"
66619,"x/build/cmd/gomote:  push failed for gotip-linux-ppc64-power10### Go version\n\ntip\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nCreated a new ppc64 gomote and tried to push my Go tree to it:\r\n\r\n```\r\n$ gomote create gotip-linux-ppc64-power10\r\n...\r\n$ gomote run thanm-gotip-linux-ppc64-power10-0 ls /usr/bin/bash\r\n... works properly\r\n$ gomote push thanm-gotip-linux-ppc64-power10-0\r\n```\r\n\r\n\n\n### What did you see happen?\n\nGot this error\r\n\r\n# Pushing GOROOT ""/w/zgo"" to ""thanm-gotip-linux-ppc64-power10-0""...\r\n2024/03/30 14:25:33 installing go-bootstrap version in the working directory\r\nError running push: unable to add bootstrap version of Go to instance: rpc error: code = Internal desc = unable to download bootstrap Go\r\n\n\n### What did you expect to see?\n\nSuccessful push",Builders|NeedsFix,cagedmantis,"### Go version\n\ntip\n\n### Output of `go env` in your module/workspace:\n\n```shell\nI'm issuing the commands from linux/amd64. \r\n\r\nThe gomote command is built from tip of x/build, e.g. \r\n\r\n$ go version `which gomote`\r\n/w/go1/bin/gomote: devel go1.23-89f7805c2e Fri Mar 29 23:09:29 2024 +0000\r\n$\n```\n\n\n### What did you do?\n\nCreated a new ppc64 gomote and tried to push my Go tree to it:\r\n\r\n```\r\n$ gomote create gotip-linux-ppc64-power10\r\n...\r\n$ gomote run thanm-gotip-linux-ppc64-power10-0 ls /usr/bin/bash\r\n... works properly\r\n$ gomote push thanm-gotip-linux-ppc64-power10-0\r\n```\r\n\r\n\n\n### What did you see happen?\n\nGot this error\r\n\r\n# Pushing GOROOT ""/w/zgo"" to ""thanm-gotip-linux-ppc64-power10-0""...\r\n2024/03/30 14:25:33 installing go-bootstrap version in the working directory\r\nError running push: unable to add bootstrap version of Go to instance: rpc error: code = Internal desc = unable to download bootstrap Go\r\n\n\n### What did you expect to see?\n\nSuccessful push","shell\nI'm issuing the commands from linux/amd64. \r\n\r\nThe gomote command is built from tip of x/build, e.g. \r\n\r\n$ go version `which gomote`\r\n/w/go1/bin/gomote: devel go1.23-89f7805c2e Fri Mar 29 23:09:29 2024 +0000\r\n$\n"
66600,"runtime: change in pacer behavior on ppc64le in go1.20### Go version\n\ngo version go1.20.14 linux/ppc64le\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nBuilt the test in test/bench/go1 and profiled BinaryTree17 in go1.20. I found that according to a perf profile, the % of time spent in gcDrain increased dramatically when the GOMAXPROCS value increased.\r\n\r\n```\r\nGOMAXPROCS=2 perf record -e cycles ./go1.test -test.bench=BinaryTree -test.run=NONE -test.count=4\r\n\r\nperf report\r\n  19.40%  go1.test  go1.test          [.] runtime.findObject\r\n  17.95%  go1.test  go1.test          [.] runtime.mallocgc\r\n  11.73%  go1.test  go1.test          [.] runtime.greyobject\r\n   8.21%  go1.test  go1.test          [.] runtime.scanobject\r\n   7.85%  go1.test  go1.test          [.] runtime.gcmarknewobject\r\n   5.57%  go1.test  go1.test          [.] runtime.(*mspan).writeHeapBitsSmall\r\n   3.63%  go1.test  go1.test          [.] runtime.deductAssistCredit\r\n   3.44%  go1.test  go1.test          [.] test/bench/go1.(*binaryNode).itemCheck\r\n   1.93%  go1.test  go1.test          [.] test/bench/go1.bottomUpTree\r\n   1.84%  go1.test  go1.test          [.] runtime.memclrNoHeapPointers\r\n   1.76%  go1.test  go1.test          [.] runtime.gcDrainN\r\n   1.64%  go1.test  go1.test          [.] runtime.(*mspan).heapBits\r\n   1.53%  go1.test  go1.test          [.] runtime.gcDrain\r\n\r\nDid the same perf record command except set GOMAXPROCS=32 and the report shows this:\r\n  28.80%  go1.test  go1.test          [.] runtime.gcDrain\r\n  12.25%  go1.test  go1.test          [.] runtime.greyobject\r\n   7.92%  go1.test  go1.test          [.] runtime.findObject\r\n   6.42%  go1.test  go1.test          [.] runtime.scanobject\r\n```\r\nI tried this on go1.19 and I don't see the dramatic increased % in gcDrain.\r\n\n\n### What did you see happen?\n\nI turned on some GODEBUG trace values and see that in go1.19 the pacer goal increased significantly in go1.19 and as a result the garbage collector doesn't run as often. In go1.20 the goal stays low resulting in a lot more executions of the garbage collector.\r\nI also tried the same experiment on an x86 and don't see the increase in % for gcDrain.\r\n\r\nOutput from go1.19:\r\n```\r\npacer: assist ratio=+4.320720e+005 (scan 0 MB in 263->4 MB) workers=0++2.500000e-001\r\npacer: 64% CPU (25 exp.) for 104104+3552+287792 B work (287792 B exp.) in 3997696 B -> 275783680 B (\u2206goal 271589376, cons/mark +0.000000e+000)\r\n\r\npacer: assist ratio=+1.896515e-003 (scan 8 MB in 326->525 MB) workers=0++2.500000e-001\r\ngc 2 @1.859s 0%: 0.032+0.89+0.003 ms clock, 0.065+0/0.18/1.3+0.006 ms cpu, 326->326->287 MB, 525 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\npacer: assist ratio=+2.838705e-003 (scan 0 MB in 287->575 MB) workers=0++2.500000e-001\r\ngc 3 @1.861s 0%: 0.053+0.94+0.002 ms clock, 0.10+0/0.11/1.2+0.004 ms cpu, 287->287->287 MB, 575 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\n\r\n```\r\nOutput from go1.20:\r\n```\r\npacer: assist ratio=+4.325928e+000 (scan 0 MB in 4->4 MB) workers=0++2.500000e-001\r\npacer: 37% CPU (25 exp.) for 102320+4184+283504 B work (283504 B exp.) in 4349952 B -> 4390912 B (\u2206goal -24576, cons/mark +0.000000e+000)\r\ngc 1 @0.000s 15%: 0.037+0.25+0.052 ms clock, 0.074+0.074/0.14/0.038+0.10 ms cpu, 4->4->3 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 2 P\r\npacer: assist ratio=+1.173052e-001 (scan 0 MB in 4->7 MB) workers=0++2.500000e-001\r\ngc 2 @0.003s 7%: 0.044+0.12+0.002 ms clock, 0.088+0/0.093/0.13+0.005 ms cpu, 4->4->0 MB, 7 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\n```\r\n\r\nSomeone had a question about why there was a dramatic increase in gcDrain % which is why I started experimenting.\n\n### What did you expect to see?\n\nI did not expect to see such an increase in gcDrain when increasing GOMAXPROCS. It appears that something changed in go1.20 to cause this.",NeedsInvestigation|arch-ppc64x|compiler/runtime,mknyszek,"### Go version\n\ngo version go1.20.14 linux/ppc64le\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=""""\r\nGOARCH=""ppc64le""\r\nGOBIN=""""\r\nGOCACHE=""/home/boger/.cache/go-build""\r\nGOENV=""/home/boger/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""ppc64le""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/boger/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/boger/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/boger/golang/go1.20/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/boger/golang/go1.20/go/pkg/tool/linux_ppc64le""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.14""\r\nGCCGO=""gccgo""\r\nGOPPC64=""power9""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3032074183=/tmp/go-build -gno-record-gcc-switches""\n```\n\n\n### What did you do?\n\nBuilt the test in test/bench/go1 and profiled BinaryTree17 in go1.20. I found that according to a perf profile, the % of time spent in gcDrain increased dramatically when the GOMAXPROCS value increased.\r\n\r\n```\r\nGOMAXPROCS=2 perf record -e cycles ./go1.test -test.bench=BinaryTree -test.run=NONE -test.count=4\r\n\r\nperf report\r\n  19.40%  go1.test  go1.test          [.] runtime.findObject\r\n  17.95%  go1.test  go1.test          [.] runtime.mallocgc\r\n  11.73%  go1.test  go1.test          [.] runtime.greyobject\r\n   8.21%  go1.test  go1.test          [.] runtime.scanobject\r\n   7.85%  go1.test  go1.test          [.] runtime.gcmarknewobject\r\n   5.57%  go1.test  go1.test          [.] runtime.(*mspan).writeHeapBitsSmall\r\n   3.63%  go1.test  go1.test          [.] runtime.deductAssistCredit\r\n   3.44%  go1.test  go1.test          [.] test/bench/go1.(*binaryNode).itemCheck\r\n   1.93%  go1.test  go1.test          [.] test/bench/go1.bottomUpTree\r\n   1.84%  go1.test  go1.test          [.] runtime.memclrNoHeapPointers\r\n   1.76%  go1.test  go1.test          [.] runtime.gcDrainN\r\n   1.64%  go1.test  go1.test          [.] runtime.(*mspan).heapBits\r\n   1.53%  go1.test  go1.test          [.] runtime.gcDrain\r\n\r\nDid the same perf record command except set GOMAXPROCS=32 and the report shows this:\r\n  28.80%  go1.test  go1.test          [.] runtime.gcDrain\r\n  12.25%  go1.test  go1.test          [.] runtime.greyobject\r\n   7.92%  go1.test  go1.test          [.] runtime.findObject\r\n   6.42%  go1.test  go1.test          [.] runtime.scanobject\r\n```\r\nI tried this on go1.19 and I don't see the dramatic increased % in gcDrain.\r\n\n\n### What did you see happen?\n\nI turned on some GODEBUG trace values and see that in go1.19 the pacer goal increased significantly in go1.19 and as a result the garbage collector doesn't run as often. In go1.20 the goal stays low resulting in a lot more executions of the garbage collector.\r\nI also tried the same experiment on an x86 and don't see the increase in % for gcDrain.\r\n\r\nOutput from go1.19:\r\n```\r\npacer: assist ratio=+4.320720e+005 (scan 0 MB in 263->4 MB) workers=0++2.500000e-001\r\npacer: 64% CPU (25 exp.) for 104104+3552+287792 B work (287792 B exp.) in 3997696 B -> 275783680 B (\u2206goal 271589376, cons/mark +0.000000e+000)\r\n\r\npacer: assist ratio=+1.896515e-003 (scan 8 MB in 326->525 MB) workers=0++2.500000e-001\r\ngc 2 @1.859s 0%: 0.032+0.89+0.003 ms clock, 0.065+0/0.18/1.3+0.006 ms cpu, 326->326->287 MB, 525 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\npacer: assist ratio=+2.838705e-003 (scan 0 MB in 287->575 MB) workers=0++2.500000e-001\r\ngc 3 @1.861s 0%: 0.053+0.94+0.002 ms clock, 0.10+0/0.11/1.2+0.004 ms cpu, 287->287->287 MB, 575 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\n\r\n```\r\nOutput from go1.20:\r\n```\r\npacer: assist ratio=+4.325928e+000 (scan 0 MB in 4->4 MB) workers=0++2.500000e-001\r\npacer: 37% CPU (25 exp.) for 102320+4184+283504 B work (283504 B exp.) in 4349952 B -> 4390912 B (\u2206goal -24576, cons/mark +0.000000e+000)\r\ngc 1 @0.000s 15%: 0.037+0.25+0.052 ms clock, 0.074+0.074/0.14/0.038+0.10 ms cpu, 4->4->3 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 2 P\r\npacer: assist ratio=+1.173052e-001 (scan 0 MB in 4->7 MB) workers=0++2.500000e-001\r\ngc 2 @0.003s 7%: 0.044+0.12+0.002 ms clock, 0.088+0/0.093/0.13+0.005 ms cpu, 4->4->0 MB, 7 MB goal, 0 MB stacks, 0 MB globals, 2 P (forced)\r\n```\r\n\r\nSomeone had a question about why there was a dramatic increase in gcDrain % which is why I started experimenting.\n\n### What did you expect to see?\n\nI did not expect to see such an increase in gcDrain when increasing GOMAXPROCS. It appears that something changed in go1.20 to cause this.","shell\nGO111MODULE=""""\r\nGOARCH=""ppc64le""\r\nGOBIN=""""\r\nGOCACHE=""/home/boger/.cache/go-build""\r\nGOENV=""/home/boger/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""ppc64le""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/boger/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/boger/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/boger/golang/go1.20/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/boger/golang/go1.20/go/pkg/tool/linux_ppc64le""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.14""\r\nGCCGO=""gccgo""\r\nGOPPC64=""power9""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3032074183=/tmp/go-build -gno-record-gcc-switches""\n"
66586,"os/exec: calling Cmd.Start after setting Cmd.Path manually to absolute path without "".exe"" no longer implicitly adds "".exe"" in Go 1.22https://go.dev/doc/go1.22#os/exec includes:\r\n\r\n> On Windows, `Command` and `Cmd.Start` no longer call `LookPath` if the path to the executable is already absolute and has an executable file extension.\r\n\r\nI don't quite understand what criteria is used for determining whether a path has an executable file extension. Which extensions are included? Is the `PATHEXT` environment variable involved?\r\n\r\n---\r\n\r\nThat said, I've narrowed down a following behavior change between Go 1.21 and 1.22 that I'm not sure if it's working as intended, so reporting it for investigation.\r\n\r\nConsider the output of the following Go program on a Windows machine that has an executable file at the path ""C:\\Program Files\\Go\\bin\\gofmt.exe"", in a roughly default environment (i.e., `PATHEXT` is not modified):\r\n\r\n\r\n\r\nWhen running it using Go 1.21.8, the output is:\r\n\r\n```\r\n$ go run .\r\ndiff (-cmdViaCommand +cmdManualPath):\r\n(no diff)\r\n\r\nerr: <nil>\r\n```\r\n\r\nBut when running it with Go 1.22.1:\r\n\r\n```\r\n$ go run .\r\ndiff (-cmdViaCommand +cmdManualPath):\r\n\xa0\xa0&exec.Cmd{\r\n-\xa0      Path: `C:\\Program Files\\Go\\bin\\gofmt.exe`,\r\n+\xa0      Path: `C:\\Program Files\\Go\\bin\\gofmt`,\r\n\xa0\xa0      Args: {`C:\\Program Files\\Go\\bin\\gofmt`},\r\n\xa0\xa0      Env:  nil,\r\n\xa0\xa0      ... // 8 ignored and 11 identical fields\r\n\xa0\xa0}\r\n\r\nerr: fork/exec C:\\Program Files\\Go\\bin\\gofmt: The system cannot find the file specified.\r\n```\r\n\r\nNot having to manually add "".exe"" to the path and instead relying on the `PATHEXT` mechanism is very convenient when writing multi-platform Go programs, since it permits there not to be special cases for one of the GOOS values.\r\n\r\nIn that context, it seems there's no change in behavior when using `exec.Command` to create a `*exec.Cmd` and then calling `Cmd.Start` on it. But when creating it manually, Go 1.21 would use `PATHEXT` compensate for `Cmd.Path` missing a "".exe"" suffix, whereas Go 1.22 doesn't. I can't quite tell from os/exec documentation (or the seemingly relevant release note) if this is a bug fix or a bug.\r\n\r\nCC @golang/windows.",OS-Windows|NeedsInvestigation|release-blocker,rsc,"https://go.dev/doc/go1.22#os/exec includes:\r\n\r\n> On Windows, `Command` and `Cmd.Start` no longer call `LookPath` if the path to the executable is already absolute and has an executable file extension.\r\n\r\nI don't quite understand what criteria is used for determining whether a path has an executable file extension. Which extensions are included? Is the `PATHEXT` environment variable involved?\r\n\r\n---\r\n\r\nThat said, I've narrowed down a following behavior change between Go 1.21 and 1.22 that I'm not sure if it's working as intended, so reporting it for investigation.\r\n\r\nConsider the output of the following Go program on a Windows machine that has an executable file at the path ""C:\\Program Files\\Go\\bin\\gofmt.exe"", in a roughly default environment (i.e., `PATHEXT` is not modified):\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/exec""\r\n\t""strings""\r\n\r\n\t""github.com/google/go-cmp/cmp""\r\n\t""github.com/google/go-cmp/cmp/cmpopts""\r\n)\r\n\r\nfunc main() {\r\n\tif _, err := os.Stat(`C:\\Program Files\\Go\\bin\\gofmt.exe`); err != nil {\r\n\t\tfmt.Println(""returning early; if gofmt.exe doesn't exist the rest of the output will be misleading"")\r\n\t\treturn\r\n\t} else if !strings.Contains(os.Getenv(""PATHEXT""), "".EXE"") {\r\n\t\tfmt.Println(""returning early; if .exe isn't included in PATHEXT the rest of the output will be misleading"")\r\n\t\treturn\r\n\t}\r\n\r\n\tcmdViaCommand := exec.Command(`C:\\Program Files\\Go\\bin\\gofmt`)\r\n\tcmdManualPath := &exec.Cmd{\r\n\t\tPath: `C:\\Program Files\\Go\\bin\\gofmt`,\r\n\t\tArgs: []string{`C:\\Program Files\\Go\\bin\\gofmt`},\r\n\t}\r\n\tdiff := cmp.Diff(cmdViaCommand, cmdManualPath, cmpopts.IgnoreUnexported(exec.Cmd{}))\r\n\tif diff == """" {\r\n\t\tdiff = ""(no diff)\\n""\r\n\t}\r\n\tfmt.Printf(""diff (-cmdViaCommand +cmdManualPath):\\n%s\\n"", diff)\r\n\r\n\terr := cmdManualPath.Run()\r\n\tfmt.Println(""err:"", err)\r\n}\r\n```\r\n\r\nWhen running it using Go 1.21.8, the output is:\r\n\r\n```\r\n$ go run .\r\ndiff (-cmdViaCommand +cmdManualPath):\r\n(no diff)\r\n\r\nerr: <nil>\r\n```\r\n\r\nBut when running it with Go 1.22.1:\r\n\r\n```\r\n$ go run .\r\ndiff (-cmdViaCommand +cmdManualPath):\r\n\xa0\xa0&exec.Cmd{\r\n-\xa0      Path: `C:\\Program Files\\Go\\bin\\gofmt.exe`,\r\n+\xa0      Path: `C:\\Program Files\\Go\\bin\\gofmt`,\r\n\xa0\xa0      Args: {`C:\\Program Files\\Go\\bin\\gofmt`},\r\n\xa0\xa0      Env:  nil,\r\n\xa0\xa0      ... // 8 ignored and 11 identical fields\r\n\xa0\xa0}\r\n\r\nerr: fork/exec C:\\Program Files\\Go\\bin\\gofmt: The system cannot find the file specified.\r\n```\r\n\r\nNot having to manually add "".exe"" to the path and instead relying on the `PATHEXT` mechanism is very convenient when writing multi-platform Go programs, since it permits there not to be special cases for one of the GOOS values.\r\n\r\nIn that context, it seems there's no change in behavior when using `exec.Command` to create a `*exec.Cmd` and then calling `Cmd.Start` on it. But when creating it manually, Go 1.21 would use `PATHEXT` compensate for `Cmd.Path` missing a "".exe"" suffix, whereas Go 1.22 doesn't. I can't quite tell from os/exec documentation (or the seemingly relevant release note) if this is a bug fix or a bug.\r\n\r\nCC @golang/windows.","Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/exec""\r\n\t""strings""\r\n\r\n\t""github.com/google/go-cmp/cmp""\r\n\t""github.com/google/go-cmp/cmp/cmpopts""\r\n)\r\n\r\nfunc main() {\r\n\tif _, err := os.Stat(`C:\\Program Files\\Go\\bin\\gofmt.exe`); err != nil {\r\n\t\tfmt.Println(""returning early; if gofmt.exe doesn't exist the rest of the output will be misleading"")\r\n\t\treturn\r\n\t} else if !strings.Contains(os.Getenv(""PATHEXT""), "".EXE"") {\r\n\t\tfmt.Println(""returning early; if .exe isn't included in PATHEXT the rest of the output will be misleading"")\r\n\t\treturn\r\n\t}\r\n\r\n\tcmdViaCommand := exec.Command(`C:\\Program Files\\Go\\bin\\gofmt`)\r\n\tcmdManualPath := &exec.Cmd{\r\n\t\tPath: `C:\\Program Files\\Go\\bin\\gofmt`,\r\n\t\tArgs: []string{`C:\\Program Files\\Go\\bin\\gofmt`},\r\n\t}\r\n\tdiff := cmp.Diff(cmdViaCommand, cmdManualPath, cmpopts.IgnoreUnexported(exec.Cmd{}))\r\n\tif diff == """" {\r\n\t\tdiff = ""(no diff)\\n""\r\n\t}\r\n\tfmt.Printf(""diff (-cmdViaCommand +cmdManualPath):\\n%s\\n"", diff)\r\n\r\n\terr := cmdManualPath.Run()\r\n\tfmt.Println(""err:"", err)\r\n}\r\n"
66585,cmd/compile: package-level variable initialization order looks not correct### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n\r\n\n\n### What did you see happen?\n\n1 0\n\n### What did you expect to see?\n\n1 1,NeedsFix|compiler/runtime,cuonglm,"### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\n.\n```\n\n\n### What did you do?\n\n\r\n```Go\r\npackage main\r\n\r\nvar x = 0\r\nvar a = foo()\r\nvar b = x\r\n\r\nfunc foo() int {\r\n\tx++\r\n\treturn x\r\n}\r\n\r\nfunc main() {\r\n\tprintln(a, b) // 1 0\r\n}\r\n```\n\n### What did you see happen?\n\n1 0\n\n### What did you expect to see?\n\n1 1",shell\n.\n
66579,"log/slog: logger discards errors from handler### Go version\n\ngo version go1.21.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n\n\n### What did you see happen?\n\nThe logger disregards errors from the handler, and there is a method to explicitly set an error handling mechanism.\r\n\r\nSee https://github.com/golang/go/blob/master/src/log/slog/logger.go#L257 \n\n### What did you expect to see?\n\nSlog has introduced a philosophy by adopting a frontend and backend design, where the logger serves as the frontend and the handler as the backend. However, the backend/handler may need to write logs to a remote logger, so handling those errors is essential for users to understand why some logs are not being sent or logged, regardless of what the handler is doing. While it's acceptable for the frontend/logger to ignore these errors by default, users should at least be allowed to set their error handler.\r\n\r\nWhen using the stdlib log, there is no way to set an error handler, but that is acceptable as that log package only adopted a different design. If a user intended to handle errors, they could wrap the io writer with a custom error handler. However, wrapping the slog handler and passing it to slog is considered overkill due to the interface and conflicts with the slog design and philosophy.\r\n\r\nLooking at other packages like flag, which offers error handling options like continue or panic, and httputil, where the proxy allows handling errors by setting a function explicitly, it would be beneficial to update the docs to clarify that the slog logger ignores errors from the handler (if this information is not already present). Additionally, exposing an error handling function to allow users to set it explicitly would be beneficial.\r\n\r\nThis may need to be converted from a bug report to a proposal, but starting the discussion here before moving it to the proposal boards could be helpful.\r\n\r\n\r\n",Documentation|NeedsFix,jba,"### Go version\n\ngo version go1.21.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/s.hajyahya/Library/Caches/go-build'\r\nGOENV='/Users/s.hajyahya/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/s.hajyahya/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/s.hajyahya/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/s.hajyahya/dev/stuff/ssh/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_w/y7hb861d42z_drrgmkk7pb440000gp/T/go-build182075280=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n```go \r\nfunc TestXxx(t *testing.T) {\r\n\tt.Error(""log"")\r\n\th := new(remoteHandler)\r\n\tlg := slog.New(h)\r\n\tlg.Info(""example"")\r\n}\r\n\r\ntype remoteHandler struct {\r\n}\r\n\r\nfunc (h *remoteHandler) Enabled(_ context.Context, level slog.Level) bool {\r\n\treturn true\r\n}\r\n\r\n// WithAttrs returns a new [TextHandler] whose attributes consists\r\n// of h's attributes followed by attrs.\r\nfunc (h *remoteHandler) WithAttrs(attrs []slog.Attr) slog.Handler {\r\n\treturn nil\r\n}\r\n\r\nfunc (h *remoteHandler) WithGroup(name string) slog.Handler {\r\n\treturn nil\r\n}\r\n\r\nfunc (h *remoteHandler) Handle(_ context.Context, r slog.Record) error {\r\n\terr := errors.New(""any remote error"")\r\n\tfmt.Println(err)\r\n\treturn err\r\n}\r\n\r\n```\n\n### What did you see happen?\n\nThe logger disregards errors from the handler, and there is a method to explicitly set an error handling mechanism.\r\n\r\nSee https://github.com/golang/go/blob/master/src/log/slog/logger.go#L257 \n\n### What did you expect to see?\n\nSlog has introduced a philosophy by adopting a frontend and backend design, where the logger serves as the frontend and the handler as the backend. However, the backend/handler may need to write logs to a remote logger, so handling those errors is essential for users to understand why some logs are not being sent or logged, regardless of what the handler is doing. While it's acceptable for the frontend/logger to ignore these errors by default, users should at least be allowed to set their error handler.\r\n\r\nWhen using the stdlib log, there is no way to set an error handler, but that is acceptable as that log package only adopted a different design. If a user intended to handle errors, they could wrap the io writer with a custom error handler. However, wrapping the slog handler and passing it to slog is considered overkill due to the interface and conflicts with the slog design and philosophy.\r\n\r\nLooking at other packages like flag, which offers error handling options like continue or panic, and httputil, where the proxy allows handling errors by setting a function explicitly, it would be beneficial to update the docs to clarify that the slog logger ignores errors from the handler (if this information is not already present). Additionally, exposing an error handling function to allow users to set it explicitly would be beneficial.\r\n\r\nThis may need to be converted from a bug report to a proposal, but starting the discussion here before moving it to the proposal boards could be helpful.\r\n\r\n\r\n```go \r\nfunc TestXxx(t *testing.T) {\r\n\tt.Error(""log"")\r\n\th := new(remoteHandler)\r\n\tlg := slog.New(h).WithErrorHandler(func(slog.Record, error){\r\n               // handle error. \r\n        })\r\n\tlg.Info(""example"")\r\n}\r\n\r\ntype remoteHandler struct {\r\n}\r\n\r\nfunc (h *remoteHandler) Enabled(_ context.Context, level slog.Level) bool {\r\n\treturn true\r\n}\r\n\r\n// WithAttrs returns a new [TextHandler] whose attributes consists\r\n// of h's attributes followed by attrs.\r\nfunc (h *remoteHandler) WithAttrs(attrs []slog.Attr) slog.Handler {\r\n\treturn nil\r\n}\r\n\r\nfunc (h *remoteHandler) WithGroup(name string) slog.Handler {\r\n\treturn nil\r\n}\r\n\r\nfunc (h *remoteHandler) Handle(_ context.Context, r slog.Record) error {\r\n\terr := errors.New(""any remote error"")\r\n\tfmt.Println(err)\r\n\treturn err\r\n}\r\n\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/s.hajyahya/Library/Caches/go-build'\r\nGOENV='/Users/s.hajyahya/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/s.hajyahya/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/s.hajyahya/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/s.hajyahya/dev/stuff/ssh/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_w/y7hb861d42z_drrgmkk7pb440000gp/T/go-build182075280=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66575,"spec: package-level variable initialization with constant dependencies not explicitly specified in Go spec### Go version\r\n\r\ngo 1.22.0\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI have example below:\r\n\r\n```\r\n// main.go\r\n\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\nvar (\r\n\tv0 = constInitCheck()\r\n\tv1 = variableInit(""v1"")\r\n\tv2 = variableInit(""v2"")\r\n)\r\n\r\nconst (\r\n\tc1 = ""c1""\r\n\tc2 = ""c2""\r\n)\r\n\r\nfunc constInitCheck() string {\r\n\tif c1 != """" {\r\n\t\tfmt.Println(""main: const c1 has been initialized"")\r\n\t}\r\n\tif c1 != """" {\r\n\t\tfmt.Println(""main: const c2 has been initialized"")\r\n\t}\r\n\treturn """"\r\n}\r\n\r\nfunc variableInit(name string) string {\r\n\tfmt.Printf(""main: var %s has been initialized\\n"", name)\r\n\treturn name\r\n}\r\n\r\nfunc init() {\r\n\tfmt.Println(""main: first init func invoked"")\r\n}\r\n\r\nfunc init() {\r\n\tfmt.Println(""main: second init func invoked"")\r\n}\r\n\r\nfunc main() {\r\n\t// do nothing\r\n}\r\n\r\n```\r\n\r\n### What did you see happen?\r\n\r\nCompile and run the code in go 1.22.0\uff0cI got this output:\r\n\r\n```\r\n$go run main.go\r\nmain: var v1 has been initialized\r\nmain: var v2 has been initialized\r\nmain: const c1 has been initialized\r\nmain: const c2 has been initialized\r\nmain: first init func invoked\r\nmain: second init func invoked\r\n\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAccording to the latest go spec:\r\n\r\n```\r\nWithin a package, package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables.\r\n\r\nMore precisely, a package-level variable is considered ready for initialization if it is not yet initialized and either has no [initialization expression](https://go.dev/ref/spec#Variable_declarations) or its initialization expression has no dependencies on uninitialized variables. Initialization proceeds by repeatedly initializing the next package-level variable that is earliest in declaration order and ready for initialization, until there are no variables ready for initialization.\r\n```\r\n\r\nv0\u3001v1 and v2 all have initializaiton expression , and should be considered as ""not ready for initialization""\u3002their init order should be v0 -> v1 -> v2\u3002but the real init order is v1 -> v2 -> v0\u3002 \r\n\r\n",NeedsDecision,griesemer,"### Go version\r\n\r\ngo 1.22.0\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\n$go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/tonybai/Library/Caches/go-build'\r\nGOENV='/Users/tonybai/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/tonybai/Go/pkg/mod'\r\nGONOPROXY='bitbucket.org/bigwhite/t'\r\nGOOS='darwin'\r\nGOPATH='/Users/tonybai/Go'\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/Users/tonybai/.bin/go1.22.0'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/tonybai/.bin/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cz/sbj5kg2d3m3c6j650z0qfm800000gn/T/go-build1615674647=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI have example below:\r\n\r\n```\r\n// main.go\r\n\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\nvar (\r\n\tv0 = constInitCheck()\r\n\tv1 = variableInit(""v1"")\r\n\tv2 = variableInit(""v2"")\r\n)\r\n\r\nconst (\r\n\tc1 = ""c1""\r\n\tc2 = ""c2""\r\n)\r\n\r\nfunc constInitCheck() string {\r\n\tif c1 != """" {\r\n\t\tfmt.Println(""main: const c1 has been initialized"")\r\n\t}\r\n\tif c1 != """" {\r\n\t\tfmt.Println(""main: const c2 has been initialized"")\r\n\t}\r\n\treturn """"\r\n}\r\n\r\nfunc variableInit(name string) string {\r\n\tfmt.Printf(""main: var %s has been initialized\\n"", name)\r\n\treturn name\r\n}\r\n\r\nfunc init() {\r\n\tfmt.Println(""main: first init func invoked"")\r\n}\r\n\r\nfunc init() {\r\n\tfmt.Println(""main: second init func invoked"")\r\n}\r\n\r\nfunc main() {\r\n\t// do nothing\r\n}\r\n\r\n```\r\n\r\n### What did you see happen?\r\n\r\nCompile and run the code in go 1.22.0\uff0cI got this output:\r\n\r\n```\r\n$go run main.go\r\nmain: var v1 has been initialized\r\nmain: var v2 has been initialized\r\nmain: const c1 has been initialized\r\nmain: const c2 has been initialized\r\nmain: first init func invoked\r\nmain: second init func invoked\r\n\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAccording to the latest go spec:\r\n\r\n```\r\nWithin a package, package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables.\r\n\r\nMore precisely, a package-level variable is considered ready for initialization if it is not yet initialized and either has no [initialization expression](https://go.dev/ref/spec#Variable_declarations) or its initialization expression has no dependencies on uninitialized variables. Initialization proceeds by repeatedly initializing the next package-level variable that is earliest in declaration order and ready for initialization, until there are no variables ready for initialization.\r\n```\r\n\r\nv0\u3001v1 and v2 all have initializaiton expression , and should be considered as ""not ready for initialization""\u3002their init order should be v0 -> v1 -> v2\u3002but the real init order is v1 -> v2 -> v0\u3002 \r\n\r\n",shell\r\n$go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/tonybai/Library/Caches/go-build'\r\nGOENV='/Users/tonybai/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/tonybai/Go/pkg/mod'\r\nGONOPROXY='bitbucket.org/bigwhite/t'\r\nGOOS='darwin'\r\nGOPATH='/Users/tonybai/Go'\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/Users/tonybai/.bin/go1.22.0'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/tonybai/.bin/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cz/sbj5kg2d3m3c6j650z0qfm800000gn/T/go-build1615674647=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n
66561,"cmd/compile: untyped float constants representable as int are rejected in range clauses### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nUsed a constant representable as int in a `range` clause.\r\n\r\nhttps://go.dev/play/p/Zkd_wK5-Y20\r\n\r\n\r\n\r\n(More realistically, I wrote a number of iterations for a test as `const N = 2e5`, then used `N` in a range clause.)\n\n### What did you see happen?\n\n`./prog.go:8:12: cannot range over 1e0 (untyped float constant 1)`\n\n### What did you expect to see?\n\nSince constant `1e0` is representable as int, I expect it to be implicitly typed as such in a `range` clause. AFAIK this is the only place the compiler rejects floating-point constants representable as an integer type where an integer expression is expected; e.g., `[1e0]struct{}{}` is accepted.\r\n\r\nPer the spec's section on [`for` loops with `range` clauses](https://go.dev/ref/spec#For_range):\r\n\r\n> The expression on the right in the ""range"" clause is called the range expression, its core type must be an array, pointer to an array, slice, string, map, channel permitting receive operations, or an integer.\r\n> ...\r\n> If the range expression is a (possibly untyped) integer expression `n`, `n` too must be assignable to the iteration variable; if there is no iteration variable, `n` must be assignable to int.\r\n\r\nalong with the section on [constants](https://go.dev/ref/spec#Constants):\r\n\r\n> A constant may be given a type explicitly by a constant declaration or conversion, or implicitly when used in a variable declaration or an assignment statement or as an operand in an expression. It is an error if the constant value cannot be represented as a value of the respective type.\r\n\r\nArguably, the fact that range clauses specify ""a (possibly untyped) *integer* expression"" is the justification that floating point constants are always rejected. In particular, that section is the only place where the phrase ""integer expression"" appears in the spec. However, the section on constants also classifies rune constants separately from integer constants (""Rune, integer, floating-point, and complex constants are collectively called numeric constants""), yet the compiler does not reject a rune constant in a range clause: https://go.dev/play/p/eh307dPM6s5. So, my reading of the spec is that both rune and floating-point constants should be either accepted or rejected.",NeedsFix|compiler/runtime,griesemer,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\n~/play/mapsample$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/branden/.cache/go-build'\r\nGOENV='/home/branden/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/branden/go/pkg/mod'\r\nGONOPROXY='*.redacted.net'\r\nGONOSUMDB='*.redacted.net'\r\nGOOS='linux'\r\nGOPATH='/home/branden/go'\r\nGOPRIVATE='*.redacted.net'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/branden/play/mapsample/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2983741865=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nUsed a constant representable as int in a `range` clause.\r\n\r\nhttps://go.dev/play/p/Zkd_wK5-Y20\r\n\r\n```go\r\nfor range 1e0 {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n}\r\n```\r\n\r\n(More realistically, I wrote a number of iterations for a test as `const N = 2e5`, then used `N` in a range clause.)\n\n### What did you see happen?\n\n`./prog.go:8:12: cannot range over 1e0 (untyped float constant 1)`\n\n### What did you expect to see?\n\nSince constant `1e0` is representable as int, I expect it to be implicitly typed as such in a `range` clause. AFAIK this is the only place the compiler rejects floating-point constants representable as an integer type where an integer expression is expected; e.g., `[1e0]struct{}{}` is accepted.\r\n\r\nPer the spec's section on [`for` loops with `range` clauses](https://go.dev/ref/spec#For_range):\r\n\r\n> The expression on the right in the ""range"" clause is called the range expression, its core type must be an array, pointer to an array, slice, string, map, channel permitting receive operations, or an integer.\r\n> ...\r\n> If the range expression is a (possibly untyped) integer expression `n`, `n` too must be assignable to the iteration variable; if there is no iteration variable, `n` must be assignable to int.\r\n\r\nalong with the section on [constants](https://go.dev/ref/spec#Constants):\r\n\r\n> A constant may be given a type explicitly by a constant declaration or conversion, or implicitly when used in a variable declaration or an assignment statement or as an operand in an expression. It is an error if the constant value cannot be represented as a value of the respective type.\r\n\r\nArguably, the fact that range clauses specify ""a (possibly untyped) *integer* expression"" is the justification that floating point constants are always rejected. In particular, that section is the only place where the phrase ""integer expression"" appears in the spec. However, the section on constants also classifies rune constants separately from integer constants (""Rune, integer, floating-point, and complex constants are collectively called numeric constants""), yet the compiler does not reject a rune constant in a range clause: https://go.dev/play/p/eh307dPM6s5. So, my reading of the spec is that both rune and floating-point constants should be either accepted or rejected.","shell\n~/play/mapsample$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/branden/.cache/go-build'\r\nGOENV='/home/branden/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/branden/go/pkg/mod'\r\nGONOPROXY='*.redacted.net'\r\nGONOSUMDB='*.redacted.net'\r\nGOOS='linux'\r\nGOPATH='/home/branden/go'\r\nGOPRIVATE='*.redacted.net'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/branden/play/mapsample/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2983741865=/tmp/go-build -gno-record-gcc-switches'\n"
66559,"go/types: add Alias.Rhs method### Proposal Details\r\n\r\n**Background:** Go 1.22's [go/types](https://pkg.go.dev/go/types) defined new API for [materialized alias types](https://pkg.go.dev/go/types#Alias), as a step towards generic alias types. Alias has two operations: `Underlying`, which removes all Alias and Named constructors, recursively, returning the representation type; and `Unalias`, which removes only Alias constructors, again recursively, returning the first non-alias type. (A judicious sprinkling of `Unalias` operations throughout existing code is the minimal change to keep most existing go/types clients working.)\r\n\r\nHowever, the API provides no way to remove a single `Alias` constructor. That means, for example, that there is no way for a client of go/types, given the types for:\r\n\r\nto write a function that prints ""type A = B"" (without calling the existing `ObjectString` method). More importantly, import/export tools are unable to preserve the structure of the original types.\r\n\r\n(`Unalias` is nonetheless useful, and `Underlying` is of course a requirement of the `Type` interface, but Alias types are not isomorphic to defined types in the way that, given `type A B; type B int`, the spec defines the underlying type of A as int, and otherwise stipulates no relationship between A and B.)\r\n\r\n**Proposal**: We add an `Alias.RHS` accessor method, which removes exactly one `Alias` constructor. So, `Alias.RHS(A)` would return B.\r\n\r\n@gri @findleyr @mdempsky ",Proposal|Proposal-Accepted,adonovan,"### Proposal Details\r\n\r\n**Background:** Go 1.22's [go/types](https://pkg.go.dev/go/types) defined new API for [materialized alias types](https://pkg.go.dev/go/types#Alias), as a step towards generic alias types. Alias has two operations: `Underlying`, which removes all Alias and Named constructors, recursively, returning the representation type; and `Unalias`, which removes only Alias constructors, again recursively, returning the first non-alias type. (A judicious sprinkling of `Unalias` operations throughout existing code is the minimal change to keep most existing go/types clients working.)\r\n\r\nHowever, the API provides no way to remove a single `Alias` constructor. That means, for example, that there is no way for a client of go/types, given the types for:\r\n```go\r\ntype A = B\r\ntype B = int\r\n```\r\nto write a function that prints ""type A = B"" (without calling the existing `ObjectString` method). More importantly, import/export tools are unable to preserve the structure of the original types.\r\n\r\n(`Unalias` is nonetheless useful, and `Underlying` is of course a requirement of the `Type` interface, but Alias types are not isomorphic to defined types in the way that, given `type A B; type B int`, the spec defines the underlying type of A as int, and otherwise stipulates no relationship between A and B.)\r\n\r\n**Proposal**: We add an `Alias.RHS` accessor method, which removes exactly one `Alias` constructor. So, `Alias.RHS(A)` would return B.\r\n\r\n@gri @findleyr @mdempsky ",go\r\ntype A = B\r\ntype B = int\r\n
66550,"cmd/compile: crash while exporting aliases (with GODEBUG=gotypesalias=1)(using pre-go1.23 toolchain built at f6b93a4)\r\n\r\nThis input file (a test case for issue #50259) causes the compiler to crash when `gotypesalias=1` is enabled:\r\n\r\n\r\n```\r\nxtools$ GODEBUG=gotypesalias=0 go build -o x ~/w/goroot/test/typeparam/issue50259.go\r\n\r\n(OK)\r\n\r\nxtools$ GODEBUG=gotypesalias=1 go build -o x ~/w/goroot/test/typeparam/issue50259.go\r\n# command-line-arguments\r\n<unknown line number>: internal compiler error: unexpected types2.Invalid\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../goroot/src/runtime/debug/stack.go:26 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x176300?, 0x140?}, {0x104e87fa3, 0x19}, {0x0, 0x0, 0x0})\r\n\t../goroot/src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../goroot/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/noder.(*pkgWriter).typIdx(0x14000176300, {0x1050c14a8, 0x1055ddd80}, 0x1400011c6e0)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:510 +0x2f8\r\ncmd/compile/internal/noder.(*writer).typ(0x14000414370, {0x1050c14a8?, 0x1055ddd80?})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:470 +0x34\r\ncmd/compile/internal/noder.(*writer).doObj(0x14000414370, 0x14000414420, {0x1050c8440, 0x14000420480})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:844 +0x468\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0x14000176300, {0x1050c8440, 0x14000420480})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:787 +0x5c0\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0x14000176300, {0x1050c8440, 0x14000420480}, 0x0, 0x0)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:728 +0x104\r\ncmd/compile/internal/noder.(*writer).obj(0x140004140b0, {0x1050c8440?, 0x14000420480?}, 0x14000420480?)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:704 +0x34\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0x1400005c570, 0x1, 0x1})\r\n\t../goroot/src/cmd/compile/internal/noder/unified.go:325 +0x3bc\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0x1400005c570?, 0x10500a440?, 0x0?})\r\n\t../goroot/src/cmd/compile/internal/noder/unified.go:180 +0x98\r\ncmd/compile/internal/noder.LoadPackage({0x14000002340, 0x1, 0x2})\r\n\t../goroot/src/cmd/compile/internal/noder/noder.go:77 +0x398\r\ncmd/compile/internal/gc.Main(0x1050bbde0)\r\n\t../goroot/src/cmd/compile/internal/gc/main.go:197 +0xb08\r\nmain.main()\r\n\t../goroot/src/cmd/compile/main.go:57 +0x110\r\n```",compiler/runtime,adonovan,"(using pre-go1.23 toolchain built at f6b93a4)\r\n\r\nThis input file (a test case for issue #50259) causes the compiler to crash when `gotypesalias=1` is enabled:\r\n```go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B]\r\ntype B = T[A]\r\n```\r\n\r\n```\r\nxtools$ GODEBUG=gotypesalias=0 go build -o x ~/w/goroot/test/typeparam/issue50259.go\r\n\r\n(OK)\r\n\r\nxtools$ GODEBUG=gotypesalias=1 go build -o x ~/w/goroot/test/typeparam/issue50259.go\r\n# command-line-arguments\r\n<unknown line number>: internal compiler error: unexpected types2.Invalid\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../goroot/src/runtime/debug/stack.go:26 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x176300?, 0x140?}, {0x104e87fa3, 0x19}, {0x0, 0x0, 0x0})\r\n\t../goroot/src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../goroot/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/noder.(*pkgWriter).typIdx(0x14000176300, {0x1050c14a8, 0x1055ddd80}, 0x1400011c6e0)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:510 +0x2f8\r\ncmd/compile/internal/noder.(*writer).typ(0x14000414370, {0x1050c14a8?, 0x1055ddd80?})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:470 +0x34\r\ncmd/compile/internal/noder.(*writer).doObj(0x14000414370, 0x14000414420, {0x1050c8440, 0x14000420480})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:844 +0x468\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0x14000176300, {0x1050c8440, 0x14000420480})\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:787 +0x5c0\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0x14000176300, {0x1050c8440, 0x14000420480}, 0x0, 0x0)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:728 +0x104\r\ncmd/compile/internal/noder.(*writer).obj(0x140004140b0, {0x1050c8440?, 0x14000420480?}, 0x14000420480?)\r\n\t../goroot/src/cmd/compile/internal/noder/writer.go:704 +0x34\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0x1400005c570, 0x1, 0x1})\r\n\t../goroot/src/cmd/compile/internal/noder/unified.go:325 +0x3bc\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0x1400005c570?, 0x10500a440?, 0x0?})\r\n\t../goroot/src/cmd/compile/internal/noder/unified.go:180 +0x98\r\ncmd/compile/internal/noder.LoadPackage({0x14000002340, 0x1, 0x2})\r\n\t../goroot/src/cmd/compile/internal/noder/noder.go:77 +0x398\r\ncmd/compile/internal/gc.Main(0x1050bbde0)\r\n\t../goroot/src/cmd/compile/internal/gc/main.go:197 +0xb08\r\nmain.main()\r\n\t../goroot/src/cmd/compile/main.go:57 +0x110\r\n```",go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B]\r\ntype B = T[A]\r\n
66540,cmd/compile: spurious promotion of methods from embedded aliases of unnamed typesI was surprised to learn yesterday that it is legal to embed an alias type whose underlying type is not a defined type.\r\n\r\n\r\n\r\nThis is legal according to the spec; there is supposed to be no promotion of methods from the alias's underlying type.\r\n\r\nAnd yet promotion does occur:\r\nhttps://go.dev/play/p/_bJZeiZW-cW\r\n\r\n\r\nI expect go/types has the same issue.,NeedsDecision|compiler/runtime,griesemer,"I was surprised to learn yesterday that it is legal to embed an alias type whose underlying type is not a defined type.\r\n\r\n```go\r\ntype strings = []string\r\ntype S struct { strings } // equivalent to 'strings []string'\r\nvar _ = new(S).strings\r\n```\r\n\r\nThis is legal according to the spec; there is supposed to be no promotion of methods from the alias's underlying type.\r\n\r\nAnd yet promotion does occur:\r\nhttps://go.dev/play/p/_bJZeiZW-cW\r\n```go\r\npackage main\r\n\r\nimport ""io""\r\n\r\ntype S struct{ A }\r\n\r\nvar _ = new(S).A\r\n\r\ntype A = struct{ io.Reader }\r\n\r\nfunc main() {\r\n\tif false {\r\n\t\tnew(S).Read(nil) // not a legal program\r\n\t}\r\n}\r\n```\r\n\r\nI expect go/types has the same issue.",go\r\ntype strings = []string\r\ntype S struct { strings } // equivalent to 'strings []string'\r\nvar _ = new(S).strings\r\n
66507,"cmd/covdata: percent does not support ./... for the -pkg pattern### Go version\r\n\r\ngo version go1.22.1 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI ran:\r\n\r\n```\r\nGOCOVERDIR=coverage go test -timeout 10m -cover -covermode atomic -args -test.gocoverdir=coverage ./...\r\n```\r\n\r\nto collect coverage data into `coverage` dir and then I ran:\r\n\r\n```\r\ngo tool covdata percent -i=coverage -pkg=./...\r\n```\r\n\r\n### What did you see happen?\r\n\r\nNo output was made.\r\n\r\n### What did you expect to see?\r\n\r\nTo get the coverage matching the `./...` package(s). Same as what was reported during a test run.\r\n\r\nThe use case here is that I have also some additional e2e main programs calling into the library I am testing and I want those to not be reported. But to report everything under the `./...` pattern.\r\n\r\nNote, help text says:\r\n\r\n```\r\n  -pkg string\r\n    \tRestrict output to package(s) matching specified package pattern.\r\n```\r\n\r\nWhich makes me think that `./...` should already be supported.",NeedsInvestigation|compiler/runtime,thanm,"### Go version\r\n\r\ngo version go1.22.1 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/code/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1985924870=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI ran:\r\n\r\n```\r\nGOCOVERDIR=coverage go test -timeout 10m -cover -covermode atomic -args -test.gocoverdir=coverage ./...\r\n```\r\n\r\nto collect coverage data into `coverage` dir and then I ran:\r\n\r\n```\r\ngo tool covdata percent -i=coverage -pkg=./...\r\n```\r\n\r\n### What did you see happen?\r\n\r\nNo output was made.\r\n\r\n### What did you expect to see?\r\n\r\nTo get the coverage matching the `./...` package(s). Same as what was reported during a test run.\r\n\r\nThe use case here is that I have also some additional e2e main programs calling into the library I am testing and I want those to not be reported. But to report everything under the `./...` pattern.\r\n\r\nNote, help text says:\r\n\r\n```\r\n  -pkg string\r\n    \tRestrict output to package(s) matching specified package pattern.\r\n```\r\n\r\nWhich makes me think that `./...` should already be supported.","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/code/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1985924870=/tmp/go-build -gno-record-gcc-switches'\r\n"
66490,x/tools/gopls: imports: nil panic in ClearModuleInfo (via telemetry)This stack `pUwreg` was [reported by telemetry](https://storage.googleapis.com/prod-telemetry-merged/2024-03-21.json):\r\n\r\n[`ClearModuleInfo:+4`](https://github.com/golang/tools/blob/3f9badb7e4f24c8a5f173e00729a3a20db38cc2c/internal/imports/mod.go#L319) is:\r\n\r\nbut I don't see at a glance how a ModuleResolver can be constructed without a valid scanSema.\r\n\r\nPossibly related to https://go.dev/cl/561235?\r\n\r\n```\r\ncrash/crash\r\nruntime.gopanic:+69\r\nruntime.panicmem:=261\r\nruntime.sigpanic:+19\r\ngolang.org/x/tools/internal/imports.(*ProcessEnv).ClearModuleInfo:+4\r\ngolang.org/x/tools/gopls/internal/cache.(*importsState).runProcessEnvFunc:+25\r\ngolang.org/x/tools/gopls/internal/cache.(*Snapshot).RunProcessEnvFunc:=439\r\ngolang.org/x/tools/gopls/internal/golang.allImportsFixes:+4\r\ngolang.org/x/tools/gopls/internal/golang.CodeActions:+13\r\ngolang.org/x/tools/gopls/internal/server.(*server).CodeAction:+95\r\ngolang.org/x/tools/gopls/internal/protocol.serverDispatch:+160\r\ngolang.org/x/tools/gopls/internal/lsprpc.(*streamServer).ServeStream.ServerHandler.func3:+5\r\ngolang.org/x/tools/gopls/internal/lsprpc.(*streamServer).ServeStream.handshaker.func4:+52\r\ngolang.org/x/tools/gopls/internal/protocol.Handlers.MustReplyHandler.func1:+2\r\ngolang.org/x/tools/gopls/internal/protocol.Handlers.AsyncHandler.func2.2:+3\r\nruntime.goexit:+0\r\n```\r\n```\r\ngolang.org/x/tools/gopls@v0.15.2 devel darwin/arm64 vscode (1)\r\n```\r\n\r\nIssue created by golang.org/x/tools/gopls/internal/telemetry/cmd/stacks.\r\n,gopls|Tools|gopls/imports|gopls/telemetry-wins,adonovan,This stack `pUwreg` was [reported by telemetry](https://storage.googleapis.com/prod-telemetry-merged/2024-03-21.json):\r\n\r\n[`ClearModuleInfo:+4`](https://github.com/golang/tools/blob/3f9badb7e4f24c8a5f173e00729a3a20db38cc2c/internal/imports/mod.go#L319) is:\r\n```go\r\n\t\tif resolverErr == nil {\r\n\t\t\t<-r.scanSema // acquire (guards caches)                            HERE\r\n\t\t\tresolver.moduleCacheCache = r.moduleCacheCache\r\n\t\t\tresolver.otherCache = r.otherCache\r\n\t\t\tr.scanSema <- struct{}{} // release\r\n\t\t}\r\n```\r\nbut I don't see at a glance how a ModuleResolver can be constructed without a valid scanSema.\r\n\r\nPossibly related to https://go.dev/cl/561235?\r\n\r\n```\r\ncrash/crash\r\nruntime.gopanic:+69\r\nruntime.panicmem:=261\r\nruntime.sigpanic:+19\r\ngolang.org/x/tools/internal/imports.(*ProcessEnv).ClearModuleInfo:+4\r\ngolang.org/x/tools/gopls/internal/cache.(*importsState).runProcessEnvFunc:+25\r\ngolang.org/x/tools/gopls/internal/cache.(*Snapshot).RunProcessEnvFunc:=439\r\ngolang.org/x/tools/gopls/internal/golang.allImportsFixes:+4\r\ngolang.org/x/tools/gopls/internal/golang.CodeActions:+13\r\ngolang.org/x/tools/gopls/internal/server.(*server).CodeAction:+95\r\ngolang.org/x/tools/gopls/internal/protocol.serverDispatch:+160\r\ngolang.org/x/tools/gopls/internal/lsprpc.(*streamServer).ServeStream.ServerHandler.func3:+5\r\ngolang.org/x/tools/gopls/internal/lsprpc.(*streamServer).ServeStream.handshaker.func4:+52\r\ngolang.org/x/tools/gopls/internal/protocol.Handlers.MustReplyHandler.func1:+2\r\ngolang.org/x/tools/gopls/internal/protocol.Handlers.AsyncHandler.func2.2:+3\r\nruntime.goexit:+0\r\n```\r\n```\r\ngolang.org/x/tools/gopls@v0.15.2 devel darwin/arm64 vscode (1)\r\n```\r\n\r\nIssue created by golang.org/x/tools/gopls/internal/telemetry/cmd/stacks.\r\n,go\r\n\t\tif resolverErr == nil {\r\n\t\t\t<-r.scanSema // acquire (guards caches)                            HERE\r\n\t\t\tresolver.moduleCacheCache = r.moduleCacheCache\r\n\t\t\tresolver.otherCache = r.otherCache\r\n\t\t\tr.scanSema <- struct{}{} // release\r\n\t\t}\r\n
66449,"x/tools/gopls: recovered panic in RenderPackageDocSteps:\r\n1. Clone repo and visit this file: https://codeberg.org/pfad.fr/vanitydoc/src/branch/main/example/nested/chan.go\r\n2. Source Actions > View Package Documentation...\r\n\r\nObserve panic (recovered by net/http) below.\r\n\r\nThe offending line is:\r\n\r\n```\r\npanic serving 127.0.0.1:58457: runtime error: slice bounds out of range [:-1]\r\ngoroutine 4715 [running]:\r\nnet/http.(*conn).serve.func1()\r\n\t/Users/adonovan/w/goroot/src/net/http/server.go:1898 +0xb0\r\npanic({0x105945a00?, 0x14007088978?})\r\n\t/Users/adonovan/w/goroot/src/runtime/panic.go:759 +0x124\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4.2(0x0)\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:187 +0xfc\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4.3({0x1059aa120?, 0x106001dc0})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:193 +0x128\r\ngo/ast.inspector.Visit(0x1400191b350, {0x1059aa120?, 0x106001dc0?})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:386 +0x38\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa120, 0x106001dc0})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:51 +0x44\r\ngo/ast.walkIdentList(...)\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:20\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa988, 0x1400210cb90})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:314 +0x661\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa618, 0x140018d5b40})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:344 +0x20e8\r\ngo/ast.Inspect(...)\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:397\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4({0x1059aa618, 0x140018d5b40})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:190 +0x1e5\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func6({0x140023b2780, 0x16, 0x105530eb5?})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:300 +0x5c\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc(0x14006893c80, 0x14002949860, 0x140080432f0)\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:316 +0x958\r\n```\r\n\r\n@oliverpool",gopls|Tools,adonovan,"Steps:\r\n1. Clone repo and visit this file: https://codeberg.org/pfad.fr/vanitydoc/src/branch/main/example/nested/chan.go\r\n2. Source Actions > View Package Documentation...\r\n\r\nObserve panic (recovered by net/http) below.\r\n\r\nThe offending line is:\r\n```go\r\nbuf.WriteString(escape(string(file.Src[start:end])))\r\n```\r\n```\r\npanic serving 127.0.0.1:58457: runtime error: slice bounds out of range [:-1]\r\ngoroutine 4715 [running]:\r\nnet/http.(*conn).serve.func1()\r\n\t/Users/adonovan/w/goroot/src/net/http/server.go:1898 +0xb0\r\npanic({0x105945a00?, 0x14007088978?})\r\n\t/Users/adonovan/w/goroot/src/runtime/panic.go:759 +0x124\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4.2(0x0)\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:187 +0xfc\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4.3({0x1059aa120?, 0x106001dc0})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:193 +0x128\r\ngo/ast.inspector.Visit(0x1400191b350, {0x1059aa120?, 0x106001dc0?})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:386 +0x38\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa120, 0x106001dc0})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:51 +0x44\r\ngo/ast.walkIdentList(...)\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:20\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa988, 0x1400210cb90})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:314 +0x661\r\ngo/ast.Walk({0x1059a6dc0?, 0x1400191b350?}, {0x1059aa618, 0x140018d5b40})\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:344 +0x20e8\r\ngo/ast.Inspect(...)\r\n\t/Users/adonovan/w/goroot/src/go/ast/walk.go:397\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func4({0x1059aa618, 0x140018d5b40})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:190 +0x1e5\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc.func6({0x140023b2780, 0x16, 0x105530eb5?})\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:300 +0x5c\r\ngolang.org/x/tools/gopls/internal/golang.RenderPackageDoc(0x14006893c80, 0x14002949860, 0x140080432f0)\r\n\t/Users/adonovan/w/xtools/gopls/internal/golang/pkgdoc.go:316 +0x958\r\n```\r\n\r\n@oliverpool",go\r\nbuf.WriteString(escape(string(file.Src[start:end])))\r\n
66428,"cmd/go: go test with nocoverageredesign uses huge amount temp files### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nWhile waiting on the backport of this issue https://github.com/golang/go/issues/65653, we decided to apply the work-around of setting `GOEXPERIMENT=nocoverageredesign`. This resulted in the `go test` command to consume huge amount storage under `/tmp`.\r\n\r\nSteps to reproduce, (apologies for including our repo, but I was not able to get significant results with small examples):\r\n\r\n1. `go env -w GOEXPERIMENT=nocoverageredesign`\r\n2. `git clone https://github.com/zitadel/zitadel.git`\r\n3. `cd zitadel`\r\n4. `make core_api core_assets` (installs protobuf, grpc and generates some stuff)\r\n5. `go test -race -coverprofile=profile.cov -coverpkg=./internal/...,./cmd/...  ./...`\r\n\n\n### What did you see happen?\n\nAs my `/tmp` is a `tmpfs`, it uses a restricted amount of space, `7.5G` to be exact. Some of that is used by other apps, but usualy never more than `1G`. While the test runs I'm getting errors like:\r\n\r\n```\r\n# github.com/zitadel/zitadel/internal/api [github.com/zitadel/zitadel/internal/idp/providers/oidc.test]\r\ncompile: writing output: write $WORK/b4043/_pkg_.a: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/grpc/auth: write /tmp/go-build3854946245/b4046/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/idp: write /tmp/go-build3854946245/b4056/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/saml: write /tmp/go-build3854946245/b4057/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/grpc/user/schema/v3alpha: write /tmp/go-build3854946245/b4098/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/logstore/emitters/access: write /tmp/go-build3854946245/b4101/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/logstore/emitters/execution: write /tmp/go-build3854946245/b4102/importcfg: no space left on device\r\n```\r\n\r\nFurther investigation shows, by running `du -h /tmp/go-build*` in a loop while running the test:\r\n\r\n1. running Go 1.22.x with `GOEXPERIMENT=nocoverageredesign` : consumed space comes close to 7GB, at which point `/tmp` is full\r\n2. running Go 1.22.x without `GOEXPERIMENT`: consumed space stays under 2GB, but confronts us with #65653\r\n3. running Go 1.21.x without `GOEXPERIMENT`: consumed space stays under 2GB.\r\n\r\nI would also like to note that I first encountered this locally on my system with the `tmpfs` setup, which might be considered custom. However, today I was confronted with a colleague trying to upgrade Go in our pipeline and the same bug essentially trashed the Github runner. This convinced me to raise the issue after all. (CC @adlerhurst)\n\n### What did you expect to see?\n\nWhen disabling an experimental feature,  the `go test` command should behave as the version before the feature was added, not introduce another type of bug.\r\n\r\n",NeedsInvestigation,thanm,"### Go version\n\ngo version go1.22.1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tim/.cache/go-build'\r\nGOENV='/home/tim/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='nocoverageredesign'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tim/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tim/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tim/Repositories/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tim/Repositories/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3522648992=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nWhile waiting on the backport of this issue https://github.com/golang/go/issues/65653, we decided to apply the work-around of setting `GOEXPERIMENT=nocoverageredesign`. This resulted in the `go test` command to consume huge amount storage under `/tmp`.\r\n\r\nSteps to reproduce, (apologies for including our repo, but I was not able to get significant results with small examples):\r\n\r\n1. `go env -w GOEXPERIMENT=nocoverageredesign`\r\n2. `git clone https://github.com/zitadel/zitadel.git`\r\n3. `cd zitadel`\r\n4. `make core_api core_assets` (installs protobuf, grpc and generates some stuff)\r\n5. `go test -race -coverprofile=profile.cov -coverpkg=./internal/...,./cmd/...  ./...`\r\n\n\n### What did you see happen?\n\nAs my `/tmp` is a `tmpfs`, it uses a restricted amount of space, `7.5G` to be exact. Some of that is used by other apps, but usualy never more than `1G`. While the test runs I'm getting errors like:\r\n\r\n```\r\n# github.com/zitadel/zitadel/internal/api [github.com/zitadel/zitadel/internal/idp/providers/oidc.test]\r\ncompile: writing output: write $WORK/b4043/_pkg_.a: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/grpc/auth: write /tmp/go-build3854946245/b4046/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/idp: write /tmp/go-build3854946245/b4056/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/saml: write /tmp/go-build3854946245/b4057/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/api/grpc/user/schema/v3alpha: write /tmp/go-build3854946245/b4098/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/logstore/emitters/access: write /tmp/go-build3854946245/b4101/importcfg: no space left on device\r\ngithub.com/zitadel/zitadel/internal/logstore/emitters/execution: write /tmp/go-build3854946245/b4102/importcfg: no space left on device\r\n```\r\n\r\nFurther investigation shows, by running `du -h /tmp/go-build*` in a loop while running the test:\r\n\r\n1. running Go 1.22.x with `GOEXPERIMENT=nocoverageredesign` : consumed space comes close to 7GB, at which point `/tmp` is full\r\n2. running Go 1.22.x without `GOEXPERIMENT`: consumed space stays under 2GB, but confronts us with #65653\r\n3. running Go 1.21.x without `GOEXPERIMENT`: consumed space stays under 2GB.\r\n\r\nI would also like to note that I first encountered this locally on my system with the `tmpfs` setup, which might be considered custom. However, today I was confronted with a colleague trying to upgrade Go in our pipeline and the same bug essentially trashed the Github runner. This convinced me to raise the issue after all. (CC @adlerhurst)\n\n### What did you expect to see?\n\nWhen disabling an experimental feature,  the `go test` command should behave as the version before the feature was added, not introduce another type of bug.\r\n\r\n","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tim/.cache/go-build'\r\nGOENV='/home/tim/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='nocoverageredesign'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tim/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tim/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tim/Repositories/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tim/Repositories/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3522648992=/tmp/go-build -gno-record-gcc-switches'\n"
66427,"runtime: TestTSAN: fails with `signal handler spoils errno````\r\n#!watchflakes\r\npost <- pkg == ""cmd/cgo/internal/testsanitizers"" && test ~ `TestTSAN` && `signal handler spoils errno`\r\n```\r\n\r\n### Go version\r\n\r\ngo version go1.22.1 linux/amd64 (go 1.21.7 for bootstrap stage)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\nThe following test fails sometimes (30-50% of the builds).  Usually retrying the `all.bash` script works. I haven't noticed a similar error on the 1.21 tags, but that might have been pure luck, or something was introduced in 1.22 that causes this flakiness.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nTest to pass each time.\r\n\r\nI tried looking if there is already a [similar issue](https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+ThreadSanitizer), but most issues have to do with sigfaults or other panics. I did not find this specific warning.",NeedsInvestigation|release-blocker|Soon|compiler/runtime,mknyszek|cherrymui,"```\r\n#!watchflakes\r\npost <- pkg == ""cmd/cgo/internal/testsanitizers"" && test ~ `TestTSAN` && `signal handler spoils errno`\r\n```\r\n\r\n### Go version\r\n\r\ngo version go1.22.1 linux/amd64 (go 1.21.7 for bootstrap stage)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tim/.cache/go-build'\r\nGOENV='/home/tim/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tim/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tim/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tim/Repositories/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tim/Repositories/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/tim/Repositories/goroot/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3241501588=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n```bash\r\ngit checkout go1.22.1\r\ncd src\r\n./all.bash\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe following test fails sometimes (30-50% of the builds).  Usually retrying the `all.bash` script works. I haven't noticed a similar error on the 1.21 tags, but that might have been pure luck, or something was introduced in 1.22 that causes this flakiness.\r\n\r\n```bash \r\n--- FAIL: TestTSAN (0.92s)\r\n    --- FAIL: TestTSAN/tsan14 (3.64s)\r\n        tsan_test.go:77: /tmp/TestTSAN756015491/tsan14 exited with exit status 66\r\n            ==================\r\n            WARNING: ThreadSanitizer: signal handler spoils errno (pid=13873)\r\n              Signal 28 handler invoked at:\r\n                #0 runtime.cgoSigtramp /home/tim/Repositories/goroot/src/runtime/sys_linux_amd64.s:388 (tsan14+0x5164c0) (BuildId: ee54abde780f2dee550d853b6a654a5328fde482)\r\n                #1 _cgo_release_context <null> (tsan14+0x518d90) (BuildId: ee54abde780f2dee550d853b6a654a5328fde482)\r\n                #2 go_callback <null> (tsan14+0x518ac3) (BuildId: ee54abde780f2dee550d853b6a654a5328fde482)\r\n            \r\n            SUMMARY: ThreadSanitizer: signal handler spoils errno /home/tim/Repositories/goroot/src/runtime/sys_linux_amd64.s:388 in runtime.cgoSigtramp\r\n            ==================\r\nFAIL\r\nFAIL    cmd/cgo/internal/testsanitizers 6.244s\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nTest to pass each time.\r\n\r\nI tried looking if there is already a [similar issue](https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+ThreadSanitizer), but most issues have to do with sigfaults or other panics. I did not find this specific warning.","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tim/.cache/go-build'\r\nGOENV='/home/tim/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tim/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tim/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tim/Repositories/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tim/Repositories/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/tim/Repositories/goroot/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3241501588=/tmp/go-build -gno-record-gcc-switches'\r\n"
66413,"cmd/compile: coalesce adjacent writes to struct fields### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nCompile the following:\r\n\n\n### What did you see happen?\n\nThe compiler output something like:\r\n```\r\n0x0000 00000 (main.go:13)\tMOVB\t$31, main.sink(SB)\r\n0x0007 00007 (main.go:13)\tMOVB\t$0, main.sink+1(SB)\r\n0x000e 00014 (main.go:13)\tMOVB\t$1, main.sink+2(SB)\r\n0x0015 00021 (main.go:13)\tMOVB\t$12, main.sink+3(SB)\r\n```\n\n### What did you expect to see?\n\nA single MOVL instruction.",Performance|NeedsFix|compiler/runtime,randall77,"### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGOARCH=amd64\r\nGOOS=linux\n```\n\n\n### What did you do?\n\nCompile the following:\r\n```go\r\nvar sink A\r\n\r\nfunc main() {\r\n\tsink = A{31, false, true, 12}\r\n}\r\n\r\ntype A struct {\r\n\ta byte\r\n\tb bool\r\n\tc bool\r\n\td int8\r\n}\r\n```\n\n### What did you see happen?\n\nThe compiler output something like:\r\n```\r\n0x0000 00000 (main.go:13)\tMOVB\t$31, main.sink(SB)\r\n0x0007 00007 (main.go:13)\tMOVB\t$0, main.sink+1(SB)\r\n0x000e 00014 (main.go:13)\tMOVB\t$1, main.sink+2(SB)\r\n0x0015 00021 (main.go:13)\tMOVB\t$12, main.sink+3(SB)\r\n```\n\n### What did you expect to see?\n\nA single MOVL instruction.",shell\nGOARCH=amd64\r\nGOOS=linux\n
66358,math/big: Float.Copy doc string can be misleadingReminder issue to review this documentation in math/big:\r\n\r\nThe 2nd sentence is confusing.,Documentation,griesemer,"Reminder issue to review this documentation in math/big:\r\n```Go\r\n// Copy sets z to x, with the same precision, rounding mode, and\r\n// accuracy as x, and returns z. x is not changed even if z and\r\n// x are the same.\r\nfunc (z *Float) Copy(x *Float) *Float\r\n```\r\nThe 2nd sentence is confusing.","Go\r\n// Copy sets z to x, with the same precision, rounding mode, and\r\n// accuracy as x, and returns z. x is not changed even if z and\r\n// x are the same.\r\nfunc (z *Float) Copy(x *Float) *Float\r\n"
66357,"cmd/link: Oversize object file (example uses generics) causes confusing ""slice bounds out of range"" panic### Go version\n\ngo version go1.21.8 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nWe updated our AWS SDK v1 version and existing code started failing. I distilled it down to this [minimal case](https://go.dev/play/p/XqQ8JDW5hQ8). The issue happens when the generated object in the GOCACHE goes above 4GB. The goobj/objfile Header appears to be using a uint32, which seems like an overflow might be happening when calculating the offsets. I dumped the headers from one of the objects while investigating (not the minimal case above, so offsets are a little different):\r\n\t\r\n```\r\nBlkAutolib: 3225526148\r\nBlkPkgIdx: 3225526596\r\nBlkFile: 3225526884\r\nBlkSymdef: 3225528524\r\nBlkHashed64def: 3225727751\r\nBlkHasheddef: 3225729032\r\nBlkNonpkgdef: 3226325537\r\nBlkNonpkgref: 3226479026\r\nBlkRefFlags: 3226587890\r\nBlkHash64: 3226587890\r\nBlkHash: 3226588378\r\nBlkRelocIdx: 3227042858\r\nBlkAuxIdx: 3227223910\r\nBlkDataIdx: 3227404962\r\nBlkReloc: 3227586014\r\nBlkAux: 3228926500\r\nBlkData: 3229305472\r\nBlkRefName: 10123514\r\nBlkEnd: 10148874\r\n```\r\n\r\n\r\nI tested it in a few other versions:\r\n1.22.1 - compiles\r\n1.22.0 - compiles\r\n1.22rc2 - compiles\r\n1.22rc1 - fails for same reason\r\n\n\n### What did you see happen?\n\n```\r\npanic: runtime error: slice bounds out of range [::3237855945] with capacity 26478551\r\n\r\ngoroutine 1 [running]:\r\ncmd/internal/goobj.(*Reader).BytesAt(...)\r\n\tcmd/internal/goobj/objfile.go:622\r\ncmd/internal/goobj.(*Reader).uint32At(...)\r\n\tcmd/internal/goobj/objfile.go:635\r\ncmd/internal/goobj.(*Reader).StringRef(0x0?, 0x1be438?)\r\n\tcmd/internal/goobj/objfile.go:675 +0xf8\r\ncmd/internal/goobj.(*Reader).Autolib(0xc000014120)\r\n\tcmd/internal/goobj/objfile.go:688 +0x71\r\ncmd/link/internal/loader.(*Loader).Preload(0xc0000ec000, 0xa, 0xc000028020, 0xc0001c2000, 0xc0000cc410, 0x46f725?)\r\n\tcmd/link/internal/loader/loader.go:2147 +0x395\r\ncmd/link/internal/ld.ldobj(0xc00019e000, 0xc000028020, 0xc0001c2000, 0x194086c, {0xc00001a300, 0x2c}, {0x7ffcd10911bc, 0x24})\r\n\tcmd/link/internal/ld/lib.go:2294 +0xa8f\r\ncmd/link/internal/ld.loadobjfile(0xc00019e000, 0xc0001c2000)\r\n\tcmd/link/internal/ld/lib.go:1136 +0x7f3\r\ncmd/link/internal/ld.(*Link).loadlib(0xc00019e000)\r\n\tcmd/link/internal/ld/lib.go:544 +0x214\r\ncmd/link/internal/ld.Main(_, {0x20, 0x20, 0x1, 0x7, 0x10, 0x0, {0xc000012439, 0x1, 0x1}, ...})\r\n\tcmd/link/internal/ld/main.go:284 +0x104b\r\nmain.main()\r\n\tcmd/link/main.go:72 +0xdfb\r\n```\n\n### What did you expect to see?\n\nA successful build",NeedsInvestigation|compiler/runtime,cherrymui,"### Go version\n\ngo version go1.21.8 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/dj/.cache/go-build'\r\nGOENV='/home/dj/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/dj/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/dj/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.8'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/dj/gosize/code/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2460092799=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nWe updated our AWS SDK v1 version and existing code started failing. I distilled it down to this [minimal case](https://go.dev/play/p/XqQ8JDW5hQ8). The issue happens when the generated object in the GOCACHE goes above 4GB. The goobj/objfile Header appears to be using a uint32, which seems like an overflow might be happening when calculating the offsets. I dumped the headers from one of the objects while investigating (not the minimal case above, so offsets are a little different):\r\n\t\r\n```\r\nBlkAutolib: 3225526148\r\nBlkPkgIdx: 3225526596\r\nBlkFile: 3225526884\r\nBlkSymdef: 3225528524\r\nBlkHashed64def: 3225727751\r\nBlkHasheddef: 3225729032\r\nBlkNonpkgdef: 3226325537\r\nBlkNonpkgref: 3226479026\r\nBlkRefFlags: 3226587890\r\nBlkHash64: 3226587890\r\nBlkHash: 3226588378\r\nBlkRelocIdx: 3227042858\r\nBlkAuxIdx: 3227223910\r\nBlkDataIdx: 3227404962\r\nBlkReloc: 3227586014\r\nBlkAux: 3228926500\r\nBlkData: 3229305472\r\nBlkRefName: 10123514\r\nBlkEnd: 10148874\r\n```\r\n\r\n\r\nI tested it in a few other versions:\r\n1.22.1 - compiles\r\n1.22.0 - compiles\r\n1.22rc2 - compiles\r\n1.22rc1 - fails for same reason\r\n\n\n### What did you see happen?\n\n```\r\npanic: runtime error: slice bounds out of range [::3237855945] with capacity 26478551\r\n\r\ngoroutine 1 [running]:\r\ncmd/internal/goobj.(*Reader).BytesAt(...)\r\n\tcmd/internal/goobj/objfile.go:622\r\ncmd/internal/goobj.(*Reader).uint32At(...)\r\n\tcmd/internal/goobj/objfile.go:635\r\ncmd/internal/goobj.(*Reader).StringRef(0x0?, 0x1be438?)\r\n\tcmd/internal/goobj/objfile.go:675 +0xf8\r\ncmd/internal/goobj.(*Reader).Autolib(0xc000014120)\r\n\tcmd/internal/goobj/objfile.go:688 +0x71\r\ncmd/link/internal/loader.(*Loader).Preload(0xc0000ec000, 0xa, 0xc000028020, 0xc0001c2000, 0xc0000cc410, 0x46f725?)\r\n\tcmd/link/internal/loader/loader.go:2147 +0x395\r\ncmd/link/internal/ld.ldobj(0xc00019e000, 0xc000028020, 0xc0001c2000, 0x194086c, {0xc00001a300, 0x2c}, {0x7ffcd10911bc, 0x24})\r\n\tcmd/link/internal/ld/lib.go:2294 +0xa8f\r\ncmd/link/internal/ld.loadobjfile(0xc00019e000, 0xc0001c2000)\r\n\tcmd/link/internal/ld/lib.go:1136 +0x7f3\r\ncmd/link/internal/ld.(*Link).loadlib(0xc00019e000)\r\n\tcmd/link/internal/ld/lib.go:544 +0x214\r\ncmd/link/internal/ld.Main(_, {0x20, 0x20, 0x1, 0x7, 0x10, 0x0, {0xc000012439, 0x1, 0x1}, ...})\r\n\tcmd/link/internal/ld/main.go:284 +0x104b\r\nmain.main()\r\n\tcmd/link/main.go:72 +0xdfb\r\n```\n\n### What did you expect to see?\n\nA successful build","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/dj/.cache/go-build'\r\nGOENV='/home/dj/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/dj/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/dj/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.8'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/dj/gosize/code/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2460092799=/tmp/go-build -gno-record-gcc-switches'\n"
66323,cmd/compile: assertion failure in validType test [go1.23]The following code causes a compiler crash ([playground](https://go.dev/play/p/krNaQQlVzAm?v=gotip)):\r\n\r\n```\r\npanic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed [recovered]\r\n        panic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed [recovered]\r\n        panic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed\r\n```,release-blocker|compiler/runtime,griesemer,"The following code causes a compiler crash ([playground](https://go.dev/play/p/krNaQQlVzAm?v=gotip)):\r\n```Go\r\npackage p\r\n\r\nimport ""time""\r\n\r\ntype S[T any] struct {\r\n\ta T\r\n\tb time.Time\r\n}\r\n\r\nvar _ S[time.Time]\r\n```\r\n```\r\npanic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed [recovered]\r\n        panic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed [recovered]\r\n        panic: /Users/gri/goroot/src/cmd/compile/internal/types2/validtype.go:126: assertion failed\r\n```","Go\r\npackage p\r\n\r\nimport ""time""\r\n\r\ntype S[T any] struct {\r\n\ta T\r\n\tb time.Time\r\n}\r\n\r\nvar _ S[time.Time]\r\n"
66313,"debug/gosym: Sym.PackageName provides the wrong result### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nIn some edge cases, Sym.PackageName will provide incorrect results. \r\nI'm sorry I couldn't provide a minimally reproducible sample. But you can find a sample at https://github.com/ZNotify/server/releases/download/test/analysis-server-linux.\r\n\r\nI use the follow code to identify the wrong output.\r\n\n\n### What did you see happen?\n\nWith the script above, I get the follow output\r\n```\r\nFnName: ariga.io/atlas/sql/sqlclient.(*Tx).database/sql.grabConn\r\nPackageGot:ariga.io/atlas/sql/sqlclient.(*Tx).database/sql\r\nFnName: ariga.io/atlas/sql/sqlclient.(*Tx).database/sql.txCtx\r\nPackageGot:ariga.io/atlas/sql/sqlclient.(*Tx).database/sql\r\nFnName: github.com/ZNotify/server/app/api/common.(*Context).github.com/gin-gonic/gin.reset\r\nPackageGot:github.com/ZNotify/server/app/api/common.(*Context).github.com/gin-gonic/gin\r\n```\n\n### What did you expect to see?\n\nThe correct package for these names should be\r\n```\r\nariga.io/atlas/sql/sqlclient\r\nariga.io/atlas/sql/sqlclient\r\ngithub.com/ZNotify/server/app/api/common\r\n```",NeedsInvestigation|compiler/runtime,mdempsky,"### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\zxilly\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\zxilly\\AppData\\Roaming\\go\\env\r\nset GOEXE=\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\zxilly\\go\\pkg\\mod\r\nset GONOPROXY=1\r\nset GONOSUMDB=\r\nset GOOS=linux\r\nset GOPATH=C:\\Users\\zxilly\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:/Program Files/Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=E:\\Temp\\gotmp\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\zxilly\\AppData\\Local\\Temp\\go-build2223077610=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\nIn some edge cases, Sym.PackageName will provide incorrect results. \r\nI'm sorry I couldn't provide a minimally reproducible sample. But you can find a sample at https://github.com/ZNotify/server/releases/download/test/analysis-server-linux.\r\n\r\nI use the follow code to identify the wrong output.\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""debug/elf""\r\n\t""debug/gosym""\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc main() {\r\n\tf, err := elf.Open(""analysis-server-linux"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\t// read pclntab\r\n\tpclntab, err := f.Section("".gopclntab"").Data()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tvar textStart uint64\r\n\tsymbols, err := f.Symbols()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfor _, sym := range symbols {\r\n\t\tif sym.Name == ""runtime.text"" {\r\n\t\t\ttextStart = sym.Value\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\tif textStart == 0 {\r\n\t\tpanic(""runtime.text not found"")\r\n\t}\r\n\r\n\t// create gosym.Table\r\n\tltable := gosym.NewLineTable(pclntab, textStart)\r\n\ttable,err := gosym.NewTable(nil, ltable)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tfor _, fn := range table.Funcs {\r\n\t\tpkgName := fn.PackageName()\r\n\t\tif strings.Contains(pkgName, ""*"") {\r\n\t\t\tfmt.Printf(""FnName: %s\\nPackageGot:%s\\n"", fn.Name, fn.PackageName())\r\n\t\t}\r\n\t}\r\n}\r\n```\n\n### What did you see happen?\n\nWith the script above, I get the follow output\r\n```\r\nFnName: ariga.io/atlas/sql/sqlclient.(*Tx).database/sql.grabConn\r\nPackageGot:ariga.io/atlas/sql/sqlclient.(*Tx).database/sql\r\nFnName: ariga.io/atlas/sql/sqlclient.(*Tx).database/sql.txCtx\r\nPackageGot:ariga.io/atlas/sql/sqlclient.(*Tx).database/sql\r\nFnName: github.com/ZNotify/server/app/api/common.(*Context).github.com/gin-gonic/gin.reset\r\nPackageGot:github.com/ZNotify/server/app/api/common.(*Context).github.com/gin-gonic/gin\r\n```\n\n### What did you expect to see?\n\nThe correct package for these names should be\r\n```\r\nariga.io/atlas/sql/sqlclient\r\nariga.io/atlas/sql/sqlclient\r\ngithub.com/ZNotify/server/app/api/common\r\n```","shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\zxilly\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\zxilly\\AppData\\Roaming\\go\\env\r\nset GOEXE=\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\zxilly\\go\\pkg\\mod\r\nset GONOPROXY=1\r\nset GONOSUMDB=\r\nset GOOS=linux\r\nset GOPATH=C:\\Users\\zxilly\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:/Program Files/Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=E:\\Temp\\gotmp\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\zxilly\\AppData\\Local\\Temp\\go-build2223077610=/tmp/go-build -gno-record-gcc-switches\n"
66285,"cmd/compile: surprising behavior for doubly declared methodsBefore Go 1.13, it was an error for a method to appear more than once (via embedding) in an interface. For instance, [this code](https://go.dev/play/p/Efvw3oJf8Qd) produced an error (""duplicate method Read""). With 1.14, [such code](https://go.dev/play/p/Jn2SGKUonuZ) was permitted.\r\n\r\nSimilarly, [this code](https://go.dev/play/p/FEBubhc8zIt) also produces the same error under 1.13 as one would expect:\r\n\r\n\r\nHowever, [this code](https://go.dev/play/p/t1obQLFn19h) does not:\r\n\r\n\r\nThe reason is that here the method `Read` both times is imported (through `io.Reader`): because the `io` package is ""correct"", the imported `Read` method is ""exempt"" from the 1.13 version check. This seems odd: even though `io` is valid, the actual embedding of `Read` happens in the current package (or file) and thus the 1.13 rules should apply irrespective of where the method came from.\r\n\r\nA method's origin package should not matter for the version test, only the (file) version of the source where the embedding happens.\r\n",NeedsDecision|compiler/runtime,griesemer,"Before Go 1.13, it was an error for a method to appear more than once (via embedding) in an interface. For instance, [this code](https://go.dev/play/p/Efvw3oJf8Qd) produced an error (""duplicate method Read""). With 1.14, [such code](https://go.dev/play/p/Jn2SGKUonuZ) was permitted.\r\n\r\nSimilarly, [this code](https://go.dev/play/p/FEBubhc8zIt) also produces the same error under 1.13 as one would expect:\r\n```Go\r\ntype T interface {\r\n\tio.Reader\r\n\tReader\r\n}\r\n\r\ntype Reader interface {\r\n\tRead(p []byte) (n int, err error)\r\n}\r\n```\r\n\r\nHowever, [this code](https://go.dev/play/p/t1obQLFn19h) does not:\r\n```Go\r\ntype T interface {\r\n\tio.Reader\r\n\tio.Reader\r\n}\r\n```\r\n\r\nThe reason is that here the method `Read` both times is imported (through `io.Reader`): because the `io` package is ""correct"", the imported `Read` method is ""exempt"" from the 1.13 version check. This seems odd: even though `io` is valid, the actual embedding of `Read` happens in the current package (or file) and thus the 1.13 rules should apply irrespective of where the method came from.\r\n\r\nA method's origin package should not matter for the version test, only the (file) version of the source where the embedding happens.\r\n","Go\r\ntype T interface {\r\n\tio.Reader\r\n\tReader\r\n}\r\n\r\ntype Reader interface {\r\n\tRead(p []byte) (n int, err error)\r\n}\r\n"
66274,"go/types2, types2: version check (Checker.allowVersion) ignores module version if position information is missingThe code in `Checker.allowVersion`:\r\n\r\nreturns true if `pos` is not known: `fileVersions` won't be set and thus is not valid, resulting in a `true` return value.\r\n\r\nThis leads to correct behavior if a position is missing because it belongs to an imported object/type: in those cases we don't need to do a version check (== any version is allowed). But it may hide problems due to incorrectly missing position information.\r\n\r\nInstead, the code should resort to the module version if no position is provided, and code that is version checking should not do the version checks if the checks are not needed in the first place (for imported types/objects).\r\n\r\nThis code exists also in 1.22 and it hides issue #66064 (in 1.22) because the missing position information effectively leads to an absent version check (which is what we want).\r\n\r\nA more robust approach is to explicitly disable the version check if none is needed, and assert that in all other cases we have a valid position.\r\n\r\ncc: @findleyr for visibilty\r\n",NeedsDecision,griesemer,"The code in `Checker.allowVersion`:\r\n```Go\r\n\t// If no explicit file version is specified,\r\n\t// fileVersion corresponds to the module version.\r\n\tvar fileVersion goVersion\r\n\tif pos := at.Pos(); pos.IsKnown() {\r\n\t\t// We need version.Lang below because file versions\r\n\t\t// can be (unaltered) Config.GoVersion strings that\r\n\t\t// may contain dot-release information.\r\n\t\tfileVersion = asGoVersion(check.versions[base(pos)])\r\n\t}\r\n\treturn !fileVersion.isValid() || fileVersion.cmp(v) >= 0\r\n```\r\nreturns true if `pos` is not known: `fileVersions` won't be set and thus is not valid, resulting in a `true` return value.\r\n\r\nThis leads to correct behavior if a position is missing because it belongs to an imported object/type: in those cases we don't need to do a version check (== any version is allowed). But it may hide problems due to incorrectly missing position information.\r\n\r\nInstead, the code should resort to the module version if no position is provided, and code that is version checking should not do the version checks if the checks are not needed in the first place (for imported types/objects).\r\n\r\nThis code exists also in 1.22 and it hides issue #66064 (in 1.22) because the missing position information effectively leads to an absent version check (which is what we want).\r\n\r\nA more robust approach is to explicitly disable the version check if none is needed, and assert that in all other cases we have a valid position.\r\n\r\ncc: @findleyr for visibilty\r\n","Go\r\n\t// If no explicit file version is specified,\r\n\t// fileVersion corresponds to the module version.\r\n\tvar fileVersion goVersion\r\n\tif pos := at.Pos(); pos.IsKnown() {\r\n\t\t// We need version.Lang below because file versions\r\n\t\t// can be (unaltered) Config.GoVersion strings that\r\n\t\t// may contain dot-release information.\r\n\t\tfileVersion = asGoVersion(check.versions[base(pos)])\r\n\t}\r\n\treturn !fileVersion.isValid() || fileVersion.cmp(v) >= 0\r\n"
66265,"cmd/link: bad carrier sym for symbol runtime.elf_savegpr0.args_stackmap on ppc64le### Go version\r\n\r\ngo version go1.22.1 linux/ppc64le\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI maintain the Go package for Alpine Linux. While rebuilding all of our packaged Go software for the 1.22.1 security release, we encountered several packages which failed to build on ppc64le with a linking error. These packages previously built fine with Go 1.21, hence *we believe this to be a regression with Go 1.22*.\r\n\r\nOne example of such software is [goimapnotify](https://gitlab.com/shackra/goimapnotify):\r\n\r\n```\r\n$ git clone https://gitlab.com/shackra/goimapnotify.git\r\n$ cd goimapnotify\r\n$ git checkout 2.3.11\r\n$ export CGO_CFLAGS=""-Os -fstack-clash-protection""\r\n$ export GOFLAGS=""-buildmode=pie""\r\n$ go build\r\n```\r\n\r\n### What did you see happen?\r\n\r\nA build failure with a linker error message:\r\n\r\n```\r\ngo: downloading github.com/emersion/go-imap v1.0.0-beta.4.0.20190414203716-b7db4a2bc5cc\r\ngo: downloading github.com/emersion/go-imap-idle v0.0.0-20180114101550-2af93776db6b\r\ngo: downloading github.com/sirupsen/logrus v1.8.1\r\ngo: downloading github.com/emersion/go-sasl v0.0.0-20200509203442-7bfe0ed36a21\r\ngo: downloading golang.org/x/text v0.3.2\r\ngo: downloading golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6\r\n# gitlab.com/shackra/goimapnotify\r\npanic: bad carrier sym for symbol runtime.elf_savegpr0.args_stackmap (funcdata runtime.elf_savegpr0#0), want go:func.* got ?\r\n\r\ngoroutine 61 [running]:\r\ncmd/link/internal/ld.writeFuncs(0xc0001a0000, 0xc0012940c0, {0xc000ab7500, 0x12e4, 0xc001174000?}, 0xc000e73b90, {0xc001174000, 0x12e4, 0x1bd8d?}, {0xc000520240, ...}, ...)\r\n        cmd/link/internal/ld/pcln.go:747 +0xc20\r\ncmd/link/internal/ld.(*pclntab).generateFunctab.func1(0xc0001a0000, 0x11eb40?)\r\n        cmd/link/internal/ld/pcln.go:544 +0x100\r\ncmd/link/internal/ld.writeBlock(0xc0001a0000, 0xc0001507e0, 0xc000154008, {0xc001826f20?, 0x544c60?, 0x200?}, 0x200?, 0x7?, {0x544c60, 0x200, ...})\r\n        cmd/link/internal/ld/data.go:1092 +0x434\r\ncmd/link/internal/ld.writeBlocks.func1(0xc00117e5e0?, 0xc00117e5e0?, {0xc001826f20?, 0xc000150620?, 0x540000?}, 0x1c1eb3?, 0x100000000000000?, {0x544c60?, 0xc00117e2b0?, 0xc0012187a8?})\r\n        cmd/link/internal/ld/data.go:1045 +0xc0\r\ncreated by cmd/link/internal/ld.writeBlocks in goroutine 55\r\n        cmd/link/internal/ld/data.go:1044 +0x50c\r\n```\r\n\r\nPlease note, this only happens when both `GOFLAGS` and `CGO_CFLAGS` is set.\r\n\r\nThe downstream bug report is: https://gitlab.alpinelinux.org/alpine/aports/-/issues/15862\r\n\r\n### What did you expect to see?\r\n\r\nA successful build. ",NeedsFix|compiler/runtime,pmur,"### Go version\r\n\r\ngo version go1.22.1 linux/ppc64le\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='ppc64le'\r\nGOBIN=''\r\nGOCACHE='/home/buildozer/.cache/go-build'\r\nGOENV='/home/buildozer/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS='-buildmode=pie'\r\nGOHOSTARCH='ppc64le'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/buildozer/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/buildozer/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_ppc64le'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOPPC64='power8'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/goimapnotify/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-Os -fstack-clash-protection'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2019875689=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI maintain the Go package for Alpine Linux. While rebuilding all of our packaged Go software for the 1.22.1 security release, we encountered several packages which failed to build on ppc64le with a linking error. These packages previously built fine with Go 1.21, hence *we believe this to be a regression with Go 1.22*.\r\n\r\nOne example of such software is [goimapnotify](https://gitlab.com/shackra/goimapnotify):\r\n\r\n```\r\n$ git clone https://gitlab.com/shackra/goimapnotify.git\r\n$ cd goimapnotify\r\n$ git checkout 2.3.11\r\n$ export CGO_CFLAGS=""-Os -fstack-clash-protection""\r\n$ export GOFLAGS=""-buildmode=pie""\r\n$ go build\r\n```\r\n\r\n### What did you see happen?\r\n\r\nA build failure with a linker error message:\r\n\r\n```\r\ngo: downloading github.com/emersion/go-imap v1.0.0-beta.4.0.20190414203716-b7db4a2bc5cc\r\ngo: downloading github.com/emersion/go-imap-idle v0.0.0-20180114101550-2af93776db6b\r\ngo: downloading github.com/sirupsen/logrus v1.8.1\r\ngo: downloading github.com/emersion/go-sasl v0.0.0-20200509203442-7bfe0ed36a21\r\ngo: downloading golang.org/x/text v0.3.2\r\ngo: downloading golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6\r\n# gitlab.com/shackra/goimapnotify\r\npanic: bad carrier sym for symbol runtime.elf_savegpr0.args_stackmap (funcdata runtime.elf_savegpr0#0), want go:func.* got ?\r\n\r\ngoroutine 61 [running]:\r\ncmd/link/internal/ld.writeFuncs(0xc0001a0000, 0xc0012940c0, {0xc000ab7500, 0x12e4, 0xc001174000?}, 0xc000e73b90, {0xc001174000, 0x12e4, 0x1bd8d?}, {0xc000520240, ...}, ...)\r\n        cmd/link/internal/ld/pcln.go:747 +0xc20\r\ncmd/link/internal/ld.(*pclntab).generateFunctab.func1(0xc0001a0000, 0x11eb40?)\r\n        cmd/link/internal/ld/pcln.go:544 +0x100\r\ncmd/link/internal/ld.writeBlock(0xc0001a0000, 0xc0001507e0, 0xc000154008, {0xc001826f20?, 0x544c60?, 0x200?}, 0x200?, 0x7?, {0x544c60, 0x200, ...})\r\n        cmd/link/internal/ld/data.go:1092 +0x434\r\ncmd/link/internal/ld.writeBlocks.func1(0xc00117e5e0?, 0xc00117e5e0?, {0xc001826f20?, 0xc000150620?, 0x540000?}, 0x1c1eb3?, 0x100000000000000?, {0x544c60?, 0xc00117e2b0?, 0xc0012187a8?})\r\n        cmd/link/internal/ld/data.go:1045 +0xc0\r\ncreated by cmd/link/internal/ld.writeBlocks in goroutine 55\r\n        cmd/link/internal/ld/data.go:1044 +0x50c\r\n```\r\n\r\nPlease note, this only happens when both `GOFLAGS` and `CGO_CFLAGS` is set.\r\n\r\nThe downstream bug report is: https://gitlab.alpinelinux.org/alpine/aports/-/issues/15862\r\n\r\n### What did you expect to see?\r\n\r\nA successful build. ","shell\r\nGO111MODULE=''\r\nGOARCH='ppc64le'\r\nGOBIN=''\r\nGOCACHE='/home/buildozer/.cache/go-build'\r\nGOENV='/home/buildozer/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS='-buildmode=pie'\r\nGOHOSTARCH='ppc64le'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/buildozer/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/buildozer/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_ppc64le'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nGOPPC64='power8'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/goimapnotify/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-Os -fstack-clash-protection'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2019875689=/tmp/go-build -gno-record-gcc-switches'\r\n"
66261,"cmd/compile: internal compiler error: 'TestEnv': value generic.t1 (v164) incorrectly live at entry### Go version\n\ngo version devel go1.23-a18aa0e3d1 Mon Mar 11 19:54:31 2024 +0000 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI ran the testcases for https://github.com/IBM/fp-go using gotip\r\n\r\n\n\n### What did you see happen?\n\nThe test bails out with an internal compiler error:\r\n\r\n```text\r\n# github.com/IBM/fp-go/iooption [github.com/IBM/fp-go/iooption.test]\r\niooption/iooption_test.go:68:6: internal compiler error: 'TestEnv': value generic.t1 (v164) incorrectly live at entry\r\n\r\ngoroutine 66 [running]:\r\nruntime/debug.Stack()\r\n        C:/Users/CarstenLeue/sdk/gotip/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x423730?, 0xc0?}, {0xc00051e180, 0x2d}, {0xc000507050, 0x3, 0x3})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0xc000526918?, {0x26ea160?, 0xc0?}, {0xef98f0, 0x27}, {0xc00053a260, 0x2, 0xc000507001?})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:8196 +0x119\r\ncmd/compile/internal/ssagen.(*state).Fatalf(0xc000423828?, {0xef98f0?, 0xc001d94cc0?}, {0xc00053a260?, 0xc0026ea160?, 0xc00050a250?})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:939 +0x64\r\ncmd/compile/internal/ssagen.(*simplePhiState).insertPhis(...)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/phi.go:486\r\ncmd/compile/internal/ssagen.(*state).insertPhis(0xc00011e600?)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/phi.go:45 +0xdc\r\ncmd/compile/internal/ssagen.buildssa(0xc001d9a900, 0x0)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:571 +0x25ec\r\ncmd/compile/internal/ssagen.Compile(0xc001d9a900, 0x0)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x0?)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 34\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n```\n\n### What did you expect to see?\n\nThe same test runs fine with `go version go1.22.1 windows/amd64` and `go1.20.11`\r\n\r\nI expect the test also to success for the latest gotip version.",NeedsFix|compiler/runtime,mdempsky,"### Go version\n\ngo version devel go1.23-a18aa0e3d1 Mon Mar 11 19:54:31 2024 +0000 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\CarstenLeue\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\CarstenLeue\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\CarstenLeue\\go\\pkg\\mod\r\nset GONOPROXY=github.ibm.com\r\nset GONOSUMDB=github.ibm.com\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\CarstenLeue\\go\r\nset GOPRIVATE=github.ibm.com\r\nset GOPROXY=https://eu.artifactory.swg-devops.com/artifactory/api/go/sys-zaas-team-dev-go-virtual/\r\nset GOROOT=C:\\Users\\CarstenLeue\\sdk\\gotip\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\CarstenLeue\\sdk\\gotip\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.23-a18aa0e3d1 Mon Mar 11 19:54:31 2024 +0000\r\nset GODEBUG=\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=C:\\d\\fp-go\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=c:\\temp\\Local\\Temp\\go-build3450821636=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\nI ran the testcases for https://github.com/IBM/fp-go using gotip\r\n\r\n```bash\r\ngotip test -run ^TestEnv$ .\\...\r\n```\n\n### What did you see happen?\n\nThe test bails out with an internal compiler error:\r\n\r\n```text\r\n# github.com/IBM/fp-go/iooption [github.com/IBM/fp-go/iooption.test]\r\niooption/iooption_test.go:68:6: internal compiler error: 'TestEnv': value generic.t1 (v164) incorrectly live at entry\r\n\r\ngoroutine 66 [running]:\r\nruntime/debug.Stack()\r\n        C:/Users/CarstenLeue/sdk/gotip/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x423730?, 0xc0?}, {0xc00051e180, 0x2d}, {0xc000507050, 0x3, 0x3})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0xc000526918?, {0x26ea160?, 0xc0?}, {0xef98f0, 0x27}, {0xc00053a260, 0x2, 0xc000507001?})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:8196 +0x119\r\ncmd/compile/internal/ssagen.(*state).Fatalf(0xc000423828?, {0xef98f0?, 0xc001d94cc0?}, {0xc00053a260?, 0xc0026ea160?, 0xc00050a250?})\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:939 +0x64\r\ncmd/compile/internal/ssagen.(*simplePhiState).insertPhis(...)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/phi.go:486\r\ncmd/compile/internal/ssagen.(*state).insertPhis(0xc00011e600?)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/phi.go:45 +0xdc\r\ncmd/compile/internal/ssagen.buildssa(0xc001d9a900, 0x0)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/ssa.go:571 +0x25ec\r\ncmd/compile/internal/ssagen.Compile(0xc001d9a900, 0x0)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x0?)\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 34\r\n        C:/Users/CarstenLeue/sdk/gotip/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n```\n\n### What did you expect to see?\n\nThe same test runs fine with `go version go1.22.1 windows/amd64` and `go1.20.11`\r\n\r\nI expect the test also to success for the latest gotip version.","shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\CarstenLeue\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\CarstenLeue\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\CarstenLeue\\go\\pkg\\mod\r\nset GONOPROXY=github.ibm.com\r\nset GONOSUMDB=github.ibm.com\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\CarstenLeue\\go\r\nset GOPRIVATE=github.ibm.com\r\nset GOPROXY=https://eu.artifactory.swg-devops.com/artifactory/api/go/sys-zaas-team-dev-go-virtual/\r\nset GOROOT=C:\\Users\\CarstenLeue\\sdk\\gotip\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\CarstenLeue\\sdk\\gotip\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.23-a18aa0e3d1 Mon Mar 11 19:54:31 2024 +0000\r\nset GODEBUG=\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=C:\\d\\fp-go\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=c:\\temp\\Local\\Temp\\go-build3450821636=/tmp/go-build -gno-record-gcc-switches\n"
66259,"x/tools/internal/typesinternal/: regression inside v0.19.0 related to ReceiverNamed### Go version\r\n\r\ngo version go1.22.1 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nUsing `httpresponse` pass through golangci-lint (current `master` branch) on this project [golangci-repro-4482](https://gitlab.com/accumulatenetwork/accumulate/-/tree/golangci-repro-4482?ref_type=heads)\r\n\r\n```\r\n./golangci-lint run ./tools/cmd/debug/...\r\n```\r\n\r\nRelated to https://github.com/golangci/golangci-lint/issues/4482\r\n\r\nI bisected `x/tools` and the first commit with this problem is [c111c4dfa](https://github.com/golang/tools/commit/c111c4dfa)\r\n\r\nthe value of `n` in `n, ok := aliases.Unalias(t).(*types.Named)` (inside `IsNamedType`) is nil and `ok` is true.\r\n\r\nI think the problem is related to `named, _ = aliases.Unalias(t).(*types.Named)` inside `ReceiverNamed`.\r\n\r\nThe type assertion is ""forcing"" the type of `named`.\r\n\r\nI'm still trying to find a minimal reproducible example, but if I extract the code the panic disappears.\r\n\r\n\r\n### What did you see happen?\r\n\r\nA panic:\r\n\r\n```\r\nruntime/debug.Stack()\r\n        /usr/lib/go/src/runtime/debug/stack.go:24 +0x5e\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func1()\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:108 +0x277\r\npanic({0x169eda0?, 0x22c2360?})\r\n        /usr/lib/go/src/runtime/panic.go:770 +0x132\r\ngo/types.(*Named).Obj(...)\r\n        /usr/lib/go/src/go/types/named.go:295\r\ngolang.org/x/tools/go/analysis/passes/internal/analysisutil.IsNamedType({0x1aa5cf0?, 0x0?}, {0x180ef88, 0x8}, {0xc0022d7af8, 0x1, 0x6c61562a5d5b2073?})\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/internal/analysisutil/util.go:123 +0x49\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.isHTTPFuncOrMethodOnClient(0xc015ef7380, 0xc0022d7ba0?)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:122 +0xfb\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.run.func1({0x1aa5110?, 0xc01642f700?}, 0x10?, {0xc007030200, 0x6, 0x20})\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:62 +0x73\r\ngolang.org/x/tools/go/ast/inspector.(*Inspector).WithStack(0xc0164ed200, {0xc0022d7cb8?, 0x22ee1c0?, 0xc001208008?}, 0xc002155cc8)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/ast/inspector/inspector.go:148 +0x188\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.run(0xc01e3fc0d0)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:57 +0x112\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyze(0xc00128e7e0)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:190 +0xa02\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func2()\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:112 +0x17\r\ngithub.com/golangci/golangci-lint/pkg/timeutils.(*Stopwatch).TrackStage(0xc001b5c3c0, {0x18596d7, 0xc}, 0xc002138f48)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/timeutils/stopwatch.go:111 +0x44\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe(0xc001037e60?)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:111 +0x7a\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze.func2(0xc00128e7e0)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:80 +0xa8\r\ncreated by github.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze in goroutine 204\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:75 +0x205 \r\nWARN [runner] Can't run linter goanalysis_metalinter: goanalysis_metalinter: httpresponse: package ""main"" (isInitialPkg: true, needAnalyzeSource: true): runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo panic.",Tools,timothy-king,"### Go version\r\n\r\ngo version go1.22.1 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ldez/.cache/go-build'\r\nGOENV='/home/ldez/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ldez/sources/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ldez/sources/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ldez/sources/go/src/github.com/golangci/golangci-lint/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1404820727=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nUsing `httpresponse` pass through golangci-lint (current `master` branch) on this project [golangci-repro-4482](https://gitlab.com/accumulatenetwork/accumulate/-/tree/golangci-repro-4482?ref_type=heads)\r\n\r\n```\r\n./golangci-lint run ./tools/cmd/debug/...\r\n```\r\n\r\nRelated to https://github.com/golangci/golangci-lint/issues/4482\r\n\r\nI bisected `x/tools` and the first commit with this problem is [c111c4dfa](https://github.com/golang/tools/commit/c111c4dfa)\r\n\r\nthe value of `n` in `n, ok := aliases.Unalias(t).(*types.Named)` (inside `IsNamedType`) is nil and `ok` is true.\r\n\r\nI think the problem is related to `named, _ = aliases.Unalias(t).(*types.Named)` inside `ReceiverNamed`.\r\n\r\nThe type assertion is ""forcing"" the type of `named`.\r\n\r\nI'm still trying to find a minimal reproducible example, but if I extract the code the panic disappears.\r\n\r\n\r\n### What did you see happen?\r\n\r\nA panic:\r\n\r\n```\r\nruntime/debug.Stack()\r\n        /usr/lib/go/src/runtime/debug/stack.go:24 +0x5e\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func1()\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:108 +0x277\r\npanic({0x169eda0?, 0x22c2360?})\r\n        /usr/lib/go/src/runtime/panic.go:770 +0x132\r\ngo/types.(*Named).Obj(...)\r\n        /usr/lib/go/src/go/types/named.go:295\r\ngolang.org/x/tools/go/analysis/passes/internal/analysisutil.IsNamedType({0x1aa5cf0?, 0x0?}, {0x180ef88, 0x8}, {0xc0022d7af8, 0x1, 0x6c61562a5d5b2073?})\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/internal/analysisutil/util.go:123 +0x49\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.isHTTPFuncOrMethodOnClient(0xc015ef7380, 0xc0022d7ba0?)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:122 +0xfb\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.run.func1({0x1aa5110?, 0xc01642f700?}, 0x10?, {0xc007030200, 0x6, 0x20})\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:62 +0x73\r\ngolang.org/x/tools/go/ast/inspector.(*Inspector).WithStack(0xc0164ed200, {0xc0022d7cb8?, 0x22ee1c0?, 0xc001208008?}, 0xc002155cc8)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/ast/inspector/inspector.go:148 +0x188\r\ngolang.org/x/tools/go/analysis/passes/httpresponse.run(0xc01e3fc0d0)\r\n        /home/ldez/sources/go/pkg/mod/golang.org/x/tools@v0.19.0/go/analysis/passes/httpresponse/httpresponse.go:57 +0x112\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyze(0xc00128e7e0)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:190 +0xa02\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func2()\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:112 +0x17\r\ngithub.com/golangci/golangci-lint/pkg/timeutils.(*Stopwatch).TrackStage(0xc001b5c3c0, {0x18596d7, 0xc}, 0xc002138f48)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/timeutils/stopwatch.go:111 +0x44\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe(0xc001037e60?)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_action.go:111 +0x7a\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze.func2(0xc00128e7e0)\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:80 +0xa8\r\ncreated by github.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze in goroutine 204\r\n        /home/ldez/sources/go/src/github.com/golangci/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:75 +0x205 \r\nWARN [runner] Can't run linter goanalysis_metalinter: goanalysis_metalinter: httpresponse: package ""main"" (isInitialPkg: true, needAnalyzeSource: true): runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo panic.","shell\r\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ldez/.cache/go-build'\r\nGOENV='/home/ldez/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ldez/sources/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ldez/sources/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ldez/sources/go/src/github.com/golangci/golangci-lint/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1404820727=/tmp/go-build -gno-record-gcc-switches'\r\n"
66251,"x/tools/cmd/callgraph: calls from unreachable unexported methods not reported in callgraph### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\ngo.mod\r\n```\r\nmodule scratchpad\r\n\r\ngo 1.21\r\n```\r\n\r\nexample2/main.go\r\n```\r\npackage main\r\n\r\nfunc called() {}\r\n\r\ntype unexported struct{}\r\n\r\nfunc (u unexported) Func1() {\r\n\tcalled()\r\n}\r\n\r\ntype Exported struct{}\r\n\r\nfunc (e Exported) Func1() {\r\n\tcalled()\r\n}\r\n\r\nfunc main() {\r\n\t\r\n}\r\n```\r\n\r\nRan `callgraph -algo={algo} ./example2` for `algo` in `[static, cha, rta, vta]`\n\n### What did you see happen?\n\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n{Empty Output}\r\n```\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\n\n### What did you expect to see?\n\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n{Empty Output}\r\n```\r\nThis is because rta only includes reachable funcs [by design](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=79)\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\nNote that the link from `example2.unexported).Func1` to `called` is present when `example2.unexported).Func1` is forced to be reachable. For example: \r\n\r\nexample2/main.go\r\n```\r\nfunc main() {\r\n\tunexported{}.Func1()\r\n}\r\n```\r\n\r\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\nThis is because rta only includes reachable funcs [by design](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=79)\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\nThis likely has to do with the same usage of `ssautil.AllFunctions` (at least for [vta](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=229)) that resulted in [this bug](https://github.com/golang/go/issues/65915) for the `deadcode` command. ",Tools,adonovan,"### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/aggnolek/go/bin'\r\nGOCACHE='/Users/aggnolek/Library/Caches/go-build'\r\nGOENV='/Users/aggnolek/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aggnolek/go/pkg/mod'\r\nGONOPROXY='*'\r\nGONOSUMDB='*'\r\nGOOS='darwin'\r\nGOPATH='/Users/aggnolek/go'\r\nGOPRIVATE='*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/aggnolek/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/aggnolek/sdk/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/aggnolek/gorepos/aggnolek/scratchpad/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/x7/2f8ynt3954s4y78yt_54v9fr0000gs/T/go-build886972198=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\ngo.mod\r\n```\r\nmodule scratchpad\r\n\r\ngo 1.21\r\n```\r\n\r\nexample2/main.go\r\n```\r\npackage main\r\n\r\nfunc called() {}\r\n\r\ntype unexported struct{}\r\n\r\nfunc (u unexported) Func1() {\r\n\tcalled()\r\n}\r\n\r\ntype Exported struct{}\r\n\r\nfunc (e Exported) Func1() {\r\n\tcalled()\r\n}\r\n\r\nfunc main() {\r\n\t\r\n}\r\n```\r\n\r\nRan `callgraph -algo={algo} ./example2` for `algo` in `[static, cha, rta, vta]`\n\n### What did you see happen?\n\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n{Empty Output}\r\n```\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n```\r\n\n\n### What did you expect to see?\n\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n{Empty Output}\r\n```\r\nThis is because rta only includes reachable funcs [by design](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=79)\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n```\r\n\r\nNote that the link from `example2.unexported).Func1` to `called` is present when `example2.unexported).Func1` is forced to be reachable. For example: \r\n\r\nexample2/main.go\r\n```\r\nfunc main() {\r\n\tunexported{}.Func1()\r\n}\r\n```\r\n\r\n`callgraph -algo=static ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\n`callgraph -algo=cha ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\n`callgraph -algo=rta ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\nThis is because rta only includes reachable funcs [by design](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=79)\r\n\r\n`callgraph -algo=vta ./example2`\r\n```\r\n(scratchpad/example2.unexported).Func1\t--static-8:8-->\tscratchpad/example2.called\r\n(scratchpad/example2.Exported).Func1\t--static-14:8-->\tscratchpad/example2.called\r\nscratchpad/example2.main\t--static-18:20-->\t(scratchpad/example2.unexported).Func1\r\n```\r\n\r\nThis likely has to do with the same usage of `ssautil.AllFunctions` (at least for [vta](https://cs.opensource.google/go/x/tools/+/refs/tags/v0.19.0:cmd/callgraph/main.go;l=229)) that resulted in [this bug](https://github.com/golang/go/issues/65915) for the `deadcode` command. ","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/aggnolek/go/bin'\r\nGOCACHE='/Users/aggnolek/Library/Caches/go-build'\r\nGOENV='/Users/aggnolek/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aggnolek/go/pkg/mod'\r\nGONOPROXY='*'\r\nGONOSUMDB='*'\r\nGOOS='darwin'\r\nGOPATH='/Users/aggnolek/go'\r\nGOPRIVATE='*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/aggnolek/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/aggnolek/sdk/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/aggnolek/gorepos/aggnolek/scratchpad/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/x7/2f8ynt3954s4y78yt_54v9fr0000gs/T/go-build886972198=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66239,"os: Read() blocking on named pipe despite O_NONBLOCK### Go version\r\n\r\ngo version go1.22.1 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nWhen calling `os.Read()` on a named pipe with `O_NONBLOCK`, that call will sometimes block. I only see the the bug on my M1 Mac. When I run this code in Linux or in the go playground, I do _not_ see the bug. Here is a full program to reproduce:\r\n\r\nhttps://go.dev/play/p/Ryc4jmgag3t\r\n\r\n### What did you see happen?\r\n\r\n```\r\njgoel@jgoels-Air bug % go run main.go\r\n2024/03/10 21:37:12 Opening pipe <nil>\r\n2024/03/10 21:37:12 About to read...\r\n2024/03/10 21:37:12 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:12 About to read...\r\n2024/03/10 21:37:13 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:13 About to read...\r\n2024/03/10 21:37:14 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:14 About to read...\r\n2024/03/10 21:37:15 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:15 About to read...\r\n2024/03/10 21:37:16 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:16 About to read...\r\n2024/03/10 21:37:17 Writer closed pipe <nil>\r\n\r\n(...program hangs indefinitely blocking on Read() when it should loop infinitely...)\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected to see the same output as above, plus the following lines looped infinitely:\r\n\r\n```\r\n2024/03/11 01:35:04 About to read...\r\n2024/03/11 01:35:04 Read from pipe 0 EOF ol\r\n2024/03/11 01:35:04 About to read...\r\n```\r\n\r\nThis program _does_ behave the way I'd like if I make any of these changes:\r\n\r\n1. If I replace `os.OpenFile()` and `os.File.Read()` with `syscall.Open()` and `syscall.Read()`, then the program does work as expected on Mac. It does not block, and it loops infinitely. Here is an example:  https://go.dev/play/p/cflSTMW3RCk\r\n2. If I remove the call to `time.Sleep()` in the goroutine, then the program also works as expected.\r\n3. Finally, the original program works as expected on Linux. I only observe the blocking Read() on Mac.",OS-Darwin|NeedsFix|compiler/runtime,panjf2000,"### Go version\r\n\r\ngo version go1.22.1 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jgoel/Library/Caches/go-build'\r\nGOENV='/Users/jgoel/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jgoel/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/jgoel/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.1/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.1/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jgoel/github/scratchdata/scripts/duckdbcopy/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/6y/xyh8yvqx7dx_ftw31n218m940000gn/T/go-build1801743762=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nWhen calling `os.Read()` on a named pipe with `O_NONBLOCK`, that call will sometimes block. I only see the the bug on my M1 Mac. When I run this code in Linux or in the go playground, I do _not_ see the bug. Here is a full program to reproduce:\r\n\r\nhttps://go.dev/play/p/Ryc4jmgag3t\r\n\r\n### What did you see happen?\r\n\r\n```\r\njgoel@jgoels-Air bug % go run main.go\r\n2024/03/10 21:37:12 Opening pipe <nil>\r\n2024/03/10 21:37:12 About to read...\r\n2024/03/10 21:37:12 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:12 About to read...\r\n2024/03/10 21:37:13 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:13 About to read...\r\n2024/03/10 21:37:14 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:14 About to read...\r\n2024/03/10 21:37:15 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:15 About to read...\r\n2024/03/10 21:37:16 Read from pipe 5 <nil> Hello\r\n2024/03/10 21:37:16 About to read...\r\n2024/03/10 21:37:17 Writer closed pipe <nil>\r\n\r\n(...program hangs indefinitely blocking on Read() when it should loop infinitely...)\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected to see the same output as above, plus the following lines looped infinitely:\r\n\r\n```\r\n2024/03/11 01:35:04 About to read...\r\n2024/03/11 01:35:04 Read from pipe 0 EOF ol\r\n2024/03/11 01:35:04 About to read...\r\n```\r\n\r\nThis program _does_ behave the way I'd like if I make any of these changes:\r\n\r\n1. If I replace `os.OpenFile()` and `os.File.Read()` with `syscall.Open()` and `syscall.Read()`, then the program does work as expected on Mac. It does not block, and it loops infinitely. Here is an example:  https://go.dev/play/p/cflSTMW3RCk\r\n2. If I remove the call to `time.Sleep()` in the goroutine, then the program also works as expected.\r\n3. Finally, the original program works as expected on Linux. I only observe the blocking Read() on Mac.","shell\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jgoel/Library/Caches/go-build'\r\nGOENV='/Users/jgoel/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jgoel/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/jgoel/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.1/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.1/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jgoel/github/scratchdata/scripts/duckdbcopy/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/6y/xyh8yvqx7dx_ftw31n218m940000gn/T/go-build1801743762=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
66225,"runtime/coverage: confusing go test -cover + GOCOVERDIR behavior### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI've created an example here: https://github.com/hugelgupf/gocoverdir/blob/main/main_test.go\r\n\r\nThe gist is: I'd like to be able to use GOCOVERDIR with `go test -cover`.\n\n### What did you see happen?\n\n`go test -cover` seems to create a temporary `GOCOVERDIR`, but does not expose that collected coverage literally anywhere.\r\n\r\nClone that repo, and run the following commands:\r\n\r\n```sh\r\n$ go test -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: \r\n    main_test.go:22: out: warning: GOCOVERDIR not set, no coverage data emitted\r\n        hello world\r\n--- PASS: TestXxx (0.28s)\r\nPASS\r\nok      github.com/hugelgupf/gocoverdir 0.307s\r\n```\r\nok, that seems expected.\r\n\r\n```\r\n$ go test -coverprofile=cover.out -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: /tmp/go-build4220322233/b001/gocoverdir\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.35s)\r\nPASS\r\ncoverage: 0.0% of statements\r\nok      github.com/hugelgupf/gocoverdir 0.378s\r\n\r\n$ go tool cover -func=cover.out\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            0.0%\r\ntotal:                                          (statements)    0.0%\r\n```\r\n\r\nblowing a raspberry here. Why does `go test` create a GOCOVERDIR but not give me the results?\r\n\r\n```\r\n$ mkdir cover\r\n$ GOCOVERDIR=cover go test -coverprofile=cover.out -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: /tmp/go-build4220322233/b001/gocoverdir\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.35s)\r\nPASS\r\ncoverage: 0.0% of statements\r\nok      github.com/hugelgupf/gocoverdir 0.378s\r\n\r\n$ go tool cover -func=cover.out\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            0.0%\r\ntotal:                                          (statements)    0.0%\r\n\r\n$ ls -l cover\r\ntotal 0\r\n$ go tool covdata func -i=cover\r\nwarning: no applicable files found in input directories\r\n```\r\n\r\nIf I supply my own `GOCOVERDIR`, why is it not available?\r\n\r\n```sh\r\n$ GOCOVERDIR=cover go test -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: cover\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.29s)\r\nPASS\r\nok      github.com/hugelgupf/gocoverdir 0.315s\r\n\r\n$ go tool covdata func -i=cover\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            100.0%\r\ntotal                                           (statements)    100.0%\r\n```\r\n\r\nthe only combo that works!\n\n### What did you expect to see?\n\nThe use case of `GOCOVERDIR=x go test -coverprofile` is that I'd like to be able to have (a) mixed tests, and (b) be able to have one `go test -cover ./...` at the root of the project. This makes that hard, as a test that wants `GOCOVERDIR` can't be run with `-cover`.\r\n\r\nIn order of priority, I'd request:\r\n\r\n1. Document this behavior somewhere, because I don't think either the [blog post](https://go.dev/doc/build-cover) nor [`go` cmd docs](https://pkg.go.dev/cmd/go) document any of this.\r\n1. If you supply your own `GOCOVERDIR`, don't make `go test` set one.\r\n1. If no `GOCOVERDIR` is set, I'd like `go test -cover` to set it, collect the coverage, and expose it through the old text format with a conversion.\r\n1. `GOCOVERDIR=./relative-path go test ./...` is likely a bit weird, because it'll expect a `relative-path` directory in each package directory that it is running in. May be worth printing a warning and pointing the user to the `go test -coverprofile=foo` behavior auto-collecting `GOCOVERDIR` coverage in that case, as in point 3.",NeedsInvestigation|GoCommand|compiler/runtime,thanm,"### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n```shell\n-\n```\n\n\n### What did you do?\n\nI've created an example here: https://github.com/hugelgupf/gocoverdir/blob/main/main_test.go\r\n\r\nThe gist is: I'd like to be able to use GOCOVERDIR with `go test -cover`.\n\n### What did you see happen?\n\n`go test -cover` seems to create a temporary `GOCOVERDIR`, but does not expose that collected coverage literally anywhere.\r\n\r\nClone that repo, and run the following commands:\r\n\r\n```sh\r\n$ go test -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: \r\n    main_test.go:22: out: warning: GOCOVERDIR not set, no coverage data emitted\r\n        hello world\r\n--- PASS: TestXxx (0.28s)\r\nPASS\r\nok      github.com/hugelgupf/gocoverdir 0.307s\r\n```\r\nok, that seems expected.\r\n\r\n```\r\n$ go test -coverprofile=cover.out -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: /tmp/go-build4220322233/b001/gocoverdir\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.35s)\r\nPASS\r\ncoverage: 0.0% of statements\r\nok      github.com/hugelgupf/gocoverdir 0.378s\r\n\r\n$ go tool cover -func=cover.out\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            0.0%\r\ntotal:                                          (statements)    0.0%\r\n```\r\n\r\nblowing a raspberry here. Why does `go test` create a GOCOVERDIR but not give me the results?\r\n\r\n```\r\n$ mkdir cover\r\n$ GOCOVERDIR=cover go test -coverprofile=cover.out -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: /tmp/go-build4220322233/b001/gocoverdir\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.35s)\r\nPASS\r\ncoverage: 0.0% of statements\r\nok      github.com/hugelgupf/gocoverdir 0.378s\r\n\r\n$ go tool cover -func=cover.out\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            0.0%\r\ntotal:                                          (statements)    0.0%\r\n\r\n$ ls -l cover\r\ntotal 0\r\n$ go tool covdata func -i=cover\r\nwarning: no applicable files found in input directories\r\n```\r\n\r\nIf I supply my own `GOCOVERDIR`, why is it not available?\r\n\r\n```sh\r\n$ GOCOVERDIR=cover go test -v\r\n=== RUN   TestXxx\r\n    main_test.go:18: gocoverdir: cover\r\n    main_test.go:22: out: hello world\r\n--- PASS: TestXxx (0.29s)\r\nPASS\r\nok      github.com/hugelgupf/gocoverdir 0.315s\r\n\r\n$ go tool covdata func -i=cover\r\ngithub.com/hugelgupf/gocoverdir/main.go:7:      main            100.0%\r\ntotal                                           (statements)    100.0%\r\n```\r\n\r\nthe only combo that works!\n\n### What did you expect to see?\n\nThe use case of `GOCOVERDIR=x go test -coverprofile` is that I'd like to be able to have (a) mixed tests, and (b) be able to have one `go test -cover ./...` at the root of the project. This makes that hard, as a test that wants `GOCOVERDIR` can't be run with `-cover`.\r\n\r\nIn order of priority, I'd request:\r\n\r\n1. Document this behavior somewhere, because I don't think either the [blog post](https://go.dev/doc/build-cover) nor [`go` cmd docs](https://pkg.go.dev/cmd/go) document any of this.\r\n1. If you supply your own `GOCOVERDIR`, don't make `go test` set one.\r\n1. If no `GOCOVERDIR` is set, I'd like `go test -cover` to set it, collect the coverage, and expose it through the old text format with a conversion.\r\n1. `GOCOVERDIR=./relative-path go test ./...` is likely a bit weird, because it'll expect a `relative-path` directory in each package directory that it is running in. May be worth printing a warning and pointing the user to the `go test -coverprofile=foo` behavior auto-collecting `GOCOVERDIR` coverage in that case, as in point 3.",shell\n-\n
66212,"runtime/metrics: inconsistency can be observed in /cpu/classes metrics### Go version\r\n\r\ngo version 1.23-dev-c8c46e746b778c39727c588adf79aff34ab6f151\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nRun the following program over and over until it fails. It compares the result of fetching `/cpu/classes/gc/total:cpu-seconds` and calculating it from its parts, and also prints how many ULPs apart the numbers are ([good article on this])(https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/). The program makes a little effort to entice a sheared update (successfully on my workstation). This is perhaps the reason the current tests need a [2% fudge factor](https://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/metrics_test.go#L372) to pass. Once fixed, I recommend adjusting the tests to be much stricter, allowing only a couple of ULPs difference.\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n```\r\n$ GO111MODULE=off go build && ( export GOMAXPROCS=20 ; while ./metricsbug ; do : ; done )\r\n2024/03/08 15:20:59 \u0394 = -0.004854960000000075 = total (0.50744394) - scav+gc+user+idle (0.50258898), there's 43729592093798 floats between them\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected the diff to be much smaller, on the order of [`4*ULP(total)`](https://stackoverflow.com/a/51601753/558819). But there's a very large difference (in float space) between these values.  After investigation together with @mknyszek, the issue was found: most of the value that serve as the source for these metrics are updated in `accumulate`: https://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/mstats.go#L953-L976 \r\n\r\nunder the same (STW) lock. But  `gcPauseTime` and `gcTotalTime` are not updated outside of the lock somewhere else:\r\nhttps://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/mgc.go#L751-L752\r\n\r\n It is possible that a metric read happens in between these calls, and sheared results are observed. I've verified that this is what happens by manually changing `sweepTermCpu` to a large value and re-running the test. Exactly this change then appears in the diff. ",compiler/runtime,mknyszek,"### Go version\r\n\r\ngo version 1.23-dev-c8c46e746b778c39727c588adf79aff34ab6f151\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nNot relevant.\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nRun the following program over and over until it fails. It compares the result of fetching `/cpu/classes/gc/total:cpu-seconds` and calculating it from its parts, and also prints how many ULPs apart the numbers are ([good article on this])(https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/). The program makes a little effort to entice a sheared update (successfully on my workstation). This is perhaps the reason the current tests need a [2% fudge factor](https://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/metrics_test.go#L372) to pass. Once fixed, I recommend adjusting the tests to be much stricter, allowing only a couple of ULPs difference.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""math""\r\n\t""os""\r\n\t""runtime""\r\n\t""runtime/metrics""\r\n\t""strconv""\r\n\t""sync""\r\n\t""time""\r\n)\r\n\r\nvar samples = []metrics.Sample{\r\n\t{Name: ""/cpu/classes/gc/total:cpu-seconds""},       // 0\r\n\t{Name: ""/cpu/classes/idle:cpu-seconds""},           // 1\r\n\t{Name: ""/cpu/classes/scavenge/total:cpu-seconds""}, // 2\r\n\t{Name: ""/cpu/classes/total:cpu-seconds""},          // 3\r\n\t{Name: ""/cpu/classes/user:cpu-seconds""},           // 4\r\n}\r\n\r\nfunc main() {\r\n\t// Apply some GC load and wait for a bit. Gives a high chance of obtaining the\r\n\t// sheared result on my workstation.\r\n\tgo applyGCLoad()\r\n\ttime.Sleep(50 * time.Millisecond)\r\n\r\n\t// Read metrics.\r\n\tmetrics.Read(samples)\r\n\tgc := samples[0].Value.Float64()\r\n\tidle := samples[1].Value.Float64()\r\n\tscav := samples[2].Value.Float64()\r\n\ttotal := samples[3].Value.Float64()\r\n\tuser := samples[4].Value.Float64()\r\n\r\n\t// Calculate the total from the subtotals.\r\n\tcalcTotal := (((scav + gc) + user) + idle)\r\n\r\n\t// Compare total read from metrics versus our own calculation.\r\n\tlog.Printf(""\u0394 = %s = total (%s) - scav+gc+user+idle (%s), there's %d floats between them\\n"",\r\n\t\tstrconv.FormatFloat(total-calcTotal, 'f', -1, 64),\r\n\t\tstrconv.FormatFloat(calcTotal, 'f', -1, 64),\r\n\t\tstrconv.FormatFloat(total, 'f', -1, 64),\r\n\t\tint64(math.Float64bits(calcTotal)-math.Float64bits(total)),\r\n\t)\r\n\tif want, got := total, calcTotal; got != want && (got-want > 0.0001 || want-got > 0.0001) {\r\n\t\tos.Exit(1)\r\n\t}\r\n}\r\n\r\nfunc applyGCLoad() func() {\r\n\t// We\u2019ll apply load to the runtime with maxProcs-1 goroutines\r\n\t// and use one more to actually benchmark. It doesn't make sense\r\n\t// to try to run this test with only 1 P (that's what\r\n\t// BenchmarkReadMemStats is for).\r\n\tmaxProcs := runtime.GOMAXPROCS(-1)\r\n\r\n\t// Code to build a big tree with lots of pointers.\r\n\ttype node struct {\r\n\t\tchildren [16]*node\r\n\t}\r\n\tvar buildTree func(depth int) *node\r\n\tbuildTree = func(depth int) *node {\r\n\t\ttree := new(node)\r\n\t\tif depth != 0 {\r\n\t\t\tfor i := range tree.children {\r\n\t\t\t\ttree.children[i] = buildTree(depth - 1)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tree\r\n\t}\r\n\r\n\t// Keep the GC busy by continuously generating large trees.\r\n\tdone := make(chan struct{})\r\n\tvar wg sync.WaitGroup\r\n\tfor i := 0; i < maxProcs-1; i++ {\r\n\t\twg.Add(1)\r\n\t\tgo func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\tvar hold *node\r\n\t\tloop:\r\n\t\t\tfor {\r\n\t\t\t\thold = buildTree(5)\r\n\t\t\t\tselect {\r\n\t\t\t\tcase <-done:\r\n\t\t\t\t\tbreak loop\r\n\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\truntime.KeepAlive(hold)\r\n\t\t}()\r\n\t}\r\n\treturn func() {\r\n\t\tclose(done)\r\n\t\twg.Wait()\r\n\t}\r\n}\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n$ GO111MODULE=off go build && ( export GOMAXPROCS=20 ; while ./metricsbug ; do : ; done )\r\n2024/03/08 15:20:59 \u0394 = -0.004854960000000075 = total (0.50744394) - scav+gc+user+idle (0.50258898), there's 43729592093798 floats between them\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected the diff to be much smaller, on the order of [`4*ULP(total)`](https://stackoverflow.com/a/51601753/558819). But there's a very large difference (in float space) between these values.  After investigation together with @mknyszek, the issue was found: most of the value that serve as the source for these metrics are updated in `accumulate`: https://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/mstats.go#L953-L976 \r\n\r\nunder the same (STW) lock. But  `gcPauseTime` and `gcTotalTime` are not updated outside of the lock somewhere else:\r\nhttps://github.com/golang/go/blob/61d6817c832e318a8a69c4b48e6b823010b9da96/src/runtime/mgc.go#L751-L752\r\n\r\n It is possible that a metric read happens in between these calls, and sheared results are observed. I've verified that this is what happens by manually changing `sweepTermCpu` to a large value and re-running the test. Exactly this change then appears in the diff. ",shell\r\nNot relevant.\r\n
66202,x/build/cmd/gitmirror: fails if global git config has safe.bareRepository set to 'explicit'### Go version\n\ngo version devel go1.23-58052fe8 Thu Mar 7 05:27:04 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n```\r\n~/x/build$ go test ./cmd/gitmirror -v\r\n```\n\n### What did you see happen?\n\n```\r\n~/x/build$ go test ./cmd/gitmirror -v\r\n=== RUN   TestHomepage\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestHomepage (0.04s)\r\n=== RUN   TestDebugWatcher\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestDebugWatcher (0.04s)\r\n=== RUN   TestArchive\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestArchive (0.04s)\r\n=== RUN   TestMirror\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestMirror (0.04s)\r\n=== RUN   TestMirrorInitiallyEmpty\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestMirrorInitiallyEmpty (0.04s)\r\nFAIL\r\nFAIL    golang.org/x/build/cmd/gitmirror        0.257s\r\nFAIL\r\n```\n\n### What did you expect to see?\n\nAll tests passing.,Builders|NeedsFix,dmitshur,"### Go version\n\ngo version devel go1.23-58052fe8 Thu Mar 7 05:27:04 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-58052fe8 Thu Mar 7 05:27:04 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/x/build/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1970418467=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n```\r\n~/x/build$ go test ./cmd/gitmirror -v\r\n```\n\n### What did you see happen?\n\n```\r\n~/x/build$ go test ./cmd/gitmirror -v\r\n=== RUN   TestHomepage\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestHomepage (0.04s)\r\n=== RUN   TestDebugWatcher\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestDebugWatcher (0.04s)\r\n=== RUN   TestArchive\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestArchive (0.04s)\r\n=== RUN   TestMirror\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestMirror (0.04s)\r\n=== RUN   TestMirrorInitiallyEmpty\r\n    gitmirror_test.go:161: git config user.name Gopher: exit status 128\r\n        fatal: not in a git directory\r\n--- FAIL: TestMirrorInitiallyEmpty (0.04s)\r\nFAIL\r\nFAIL    golang.org/x/build/cmd/gitmirror        0.257s\r\nFAIL\r\n```\n\n### What did you expect to see?\n\nAll tests passing.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-58052fe8 Thu Mar 7 05:27:04 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/x/build/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1970418467=/tmp/go-build -gno-record-gcc-switches'\n"
66194,"runtime: crash during generating CPU profile### Go version\r\n\r\ngo version 1.20.13 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nProgram ran for some time with CPU profile being generated in the background before crashing.\r\nUnfortunately, could not reproduce the issue so far. Seen only once in a customer environment.\r\n\r\n### What did you see happen?\r\n\r\nProgram crashes with stack trace:\r\n\r\n```\r\nfatal error: unexpected signal during runtime execution\r\n[signal 0xc0000005 code=0x0 addr=0x150 pc=0xeef4f8]\r\n\r\nruntime stack:\r\nruntime.throw({0x25dd44c?, 0xee8?})\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/panic.go:1047 +0x65 fp=0x2fdfed20 sp=0x2fdfecf0 pc=0xecb1c5\r\nruntime.sigpanic()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/signal_windows.go:252 +0x265 fp=0x2fdfed68 sp=0x2fdfed20 pc=0xee0205\r\nruntime.gentraceback(0x2fdff830?, 0x774a15d6?, 0x7ffc0000001?, 0xffffffffffffffff?, 0x2fdff8a0?, 0x0?, 0xc0003dc678?, 0x77482863?, 0xadae?, 0x6)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/traceback.go:80 +0xf8 fp=0x2fdff0c8 sp=0x2fdfed68 pc=0xeef4f8\r\nruntime.sigprof(0x0, 0x380?, 0x2fdff370?, 0x0, 0xc000080800)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:4750 +0x1b9 fp=0x2fdff338 sp=0x2fdff0c8 pc=0xed71f9\r\nruntime.profilem(0xc000080800, 0x380?)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/os_windows.go:1228 +0xfa fp=0x2fdff858 sp=0x2fdff338 pc=0xec7eda\r\nruntime.profileLoop()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/os_windows.go:1284 +0x1cc fp=0x2fdff8d0 sp=0x2fdff858 pc=0xec80ec\r\nruntime.mstart1()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:1499 +0x9d fp=0x2fdff8f8 sp=0x2fdff8d0 pc=0xed041d\r\nruntime.mstart0()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:1456 +0x6c fp=0x2fdff920 sp=0x2fdff8f8 pc=0xed034c\r\nruntime.mstart()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/asm_amd64.s:394 +0x5 fp=0x2fdff928 sp=0x2fdff920 pc=0xefcac5\r\n```\r\n\r\nBased on the stack trace, the runtime crashes while creating the CPU profile. More specifically, the `gp` used in `sigprof` seems to be nil. Based on the code, I suppose this can happen - `sigprof` explicitly has a comment that states this: `Note: it can happen on Windows that we interrupted a system thread with no g, so gp could nil.`\r\n\r\ngo1.22 still seems to be have the same issue from what I can tell (`initAt` assumes that `gp` is never `nil`, and `sigprof` never checks this).\r\n\r\n### What did you expect to see?\r\n\r\nCPU profile should be collected without crash",NeedsInvestigation|compiler/runtime,cherrymui,"### Go version\r\n\r\ngo version 1.20.13 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE="".exe""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""windows""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/3rdparty/_3rdparty/tgt/golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/3rdparty/_3rdparty/tgt/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.13""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""x86_64-w64-mingw32-gcc""\r\nCXX=""x86_64-w64-mingw32-g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""<redacted>""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-I/3rdparty/_3rdparty/tgt/x86_64-w64-mingw32/include""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-L/3rdparty/_3rdparty/tgt/x86_64-w64-mingw32/lib""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build208241099=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nProgram ran for some time with CPU profile being generated in the background before crashing.\r\nUnfortunately, could not reproduce the issue so far. Seen only once in a customer environment.\r\n\r\n### What did you see happen?\r\n\r\nProgram crashes with stack trace:\r\n\r\n```\r\nfatal error: unexpected signal during runtime execution\r\n[signal 0xc0000005 code=0x0 addr=0x150 pc=0xeef4f8]\r\n\r\nruntime stack:\r\nruntime.throw({0x25dd44c?, 0xee8?})\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/panic.go:1047 +0x65 fp=0x2fdfed20 sp=0x2fdfecf0 pc=0xecb1c5\r\nruntime.sigpanic()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/signal_windows.go:252 +0x265 fp=0x2fdfed68 sp=0x2fdfed20 pc=0xee0205\r\nruntime.gentraceback(0x2fdff830?, 0x774a15d6?, 0x7ffc0000001?, 0xffffffffffffffff?, 0x2fdff8a0?, 0x0?, 0xc0003dc678?, 0x77482863?, 0xadae?, 0x6)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/traceback.go:80 +0xf8 fp=0x2fdff0c8 sp=0x2fdfed68 pc=0xeef4f8\r\nruntime.sigprof(0x0, 0x380?, 0x2fdff370?, 0x0, 0xc000080800)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:4750 +0x1b9 fp=0x2fdff338 sp=0x2fdff0c8 pc=0xed71f9\r\nruntime.profilem(0xc000080800, 0x380?)\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/os_windows.go:1228 +0xfa fp=0x2fdff858 sp=0x2fdff338 pc=0xec7eda\r\nruntime.profileLoop()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/os_windows.go:1284 +0x1cc fp=0x2fdff8d0 sp=0x2fdff858 pc=0xec80ec\r\nruntime.mstart1()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:1499 +0x9d fp=0x2fdff8f8 sp=0x2fdff8d0 pc=0xed041d\r\nruntime.mstart0()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/proc.go:1456 +0x6c fp=0x2fdff920 sp=0x2fdff8f8 pc=0xed034c\r\nruntime.mstart()\r\n\t/3rdparty/_3rdparty/tgt/golang/src/runtime/asm_amd64.s:394 +0x5 fp=0x2fdff928 sp=0x2fdff920 pc=0xefcac5\r\n```\r\n\r\nBased on the stack trace, the runtime crashes while creating the CPU profile. More specifically, the `gp` used in `sigprof` seems to be nil. Based on the code, I suppose this can happen - `sigprof` explicitly has a comment that states this: `Note: it can happen on Windows that we interrupted a system thread with no g, so gp could nil.`\r\n\r\ngo1.22 still seems to be have the same issue from what I can tell (`initAt` assumes that `gp` is never `nil`, and `sigprof` never checks this).\r\n\r\n### What did you expect to see?\r\n\r\nCPU profile should be collected without crash","shell\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE="".exe""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""windows""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/3rdparty/_3rdparty/tgt/golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/3rdparty/_3rdparty/tgt/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.13""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""x86_64-w64-mingw32-gcc""\r\nCXX=""x86_64-w64-mingw32-g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""<redacted>""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-I/3rdparty/_3rdparty/tgt/x86_64-w64-mingw32/include""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-L/3rdparty/_3rdparty/tgt/x86_64-w64-mingw32/lib""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build208241099=/tmp/go-build -gno-record-gcc-switches""\r\n"
66147,"cmd/go: git shallow fetches broken at CL 556358### Go version\n\ngo version devel go1.23-7986e26a39 Mon Mar 4 18:59:50 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n```\r\n$ go clean -modcache\r\n$ GOPROXY=direct go mod download -json gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7\r\n```\n\n### What did you see happen?\n\n```\r\n$ GOPROXY=direct go mod download -x -json gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7\r\n# get https://gerrit.wikimedia.org/r/mediawiki?go-get=1\r\n# get https://gerrit.wikimedia.org/r/mediawiki?go-get=1: 200 OK (0.066s)\r\nmkdir -p /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs # git3 https://gerrit.wikimedia.org/r/mediawiki\r\n# lock /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79.lock\r\nmkdir -p /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79 # git3 https://gerrit.wikimedia.org/r/mediawiki\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git init --bare\r\n0.010s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git init --bare\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git remote add origin -- https://gerrit.wikimedia.org/r/mediawiki\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git remote add origin -- https://gerrit.wikimedia.org/r/mediawiki\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7 --\r\n0.007s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7 --\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git ls-remote -q origin\r\n0.116s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git ls-remote -q origin\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git tag -l\r\n0.005s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git tag -l\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f -c protocol.version=2 --depth=1 origin 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e:refs/dummy\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f -c protocol.version=2 --depth=1 origin 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e:refs/dummy\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f origin 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'\r\n0.122s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f origin 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e --\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e --\r\n{\r\n        ""Path"": ""gerrit.wikimedia.org/r/mediawiki"",\r\n        ""Version"": ""v0.0.0-20240202145822-67da0cbcfdf7"",\r\n        ""Error"": ""gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7: invalid version: unknown revision 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e"",\r\n        ""Origin"": {\r\n                ""VCS"": ""git"",\r\n                ""URL"": ""https://gerrit.wikimedia.org/r/mediawiki"",\r\n                ""Ref"": ""67da0cbcfdf7f6e1c40e9d145df77a088fb6231e"",\r\n                ""RepoSum"": ""r1:sSchJC9s3IXQjz9XqT6meZ2hU1YmTimbSLTEdXEHdYQ=""\r\n        }\r\n}\r\n```\n\n### What did you expect to see?\n\nSuccessful fetch, as with previous `go` versions.\r\n\r\nIt appears that I put the arguments in the wrong order in https://go.dev/cl/556358, inadventently breaking shallow `git` fetches. That went undiagnosed, because it fixed the symptom I was testing for (#56881) and we didn't have any tests specifically probing for shallowness of git repos in the module cache.\r\n\r\n(CC @suzmue @matloob @samthanawalla)",NeedsFix|GoCommand|modules,bcmills,"### Go version\n\ngo version devel go1.23-7986e26a39 Mon Mar 4 18:59:50 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-7986e26a39 Mon Mar 4 18:59:50 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build954033280=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n```\r\n$ go clean -modcache\r\n$ GOPROXY=direct go mod download -json gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7\r\n```\n\n### What did you see happen?\n\n```\r\n$ GOPROXY=direct go mod download -x -json gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7\r\n# get https://gerrit.wikimedia.org/r/mediawiki?go-get=1\r\n# get https://gerrit.wikimedia.org/r/mediawiki?go-get=1: 200 OK (0.066s)\r\nmkdir -p /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs # git3 https://gerrit.wikimedia.org/r/mediawiki\r\n# lock /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79.lock\r\nmkdir -p /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79 # git3 https://gerrit.wikimedia.org/r/mediawiki\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git init --bare\r\n0.010s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git init --bare\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git remote add origin -- https://gerrit.wikimedia.org/r/mediawiki\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git remote add origin -- https://gerrit.wikimedia.org/r/mediawiki\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7 --\r\n0.007s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7 --\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git ls-remote -q origin\r\n0.116s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git ls-remote -q origin\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git tag -l\r\n0.005s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git tag -l\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f -c protocol.version=2 --depth=1 origin 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e:refs/dummy\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f -c protocol.version=2 --depth=1 origin 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e:refs/dummy\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f origin 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'\r\n0.122s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git fetch -f origin 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'\r\ncd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e --\r\n0.006s # cd /tmp/tmp.eR42iY5yuP/.gopath/pkg/mod/cache/vcs/2392d99bd78679c31c3fa1a4a878b61b45bbf0cdee531116b849df5fa3954d79; git -c log.showsignature=false log --no-decorate -n1 '--format=format:%H %ct %D' 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e --\r\n{\r\n        ""Path"": ""gerrit.wikimedia.org/r/mediawiki"",\r\n        ""Version"": ""v0.0.0-20240202145822-67da0cbcfdf7"",\r\n        ""Error"": ""gerrit.wikimedia.org/r/mediawiki@v0.0.0-20240202145822-67da0cbcfdf7: invalid version: unknown revision 67da0cbcfdf7f6e1c40e9d145df77a088fb6231e"",\r\n        ""Origin"": {\r\n                ""VCS"": ""git"",\r\n                ""URL"": ""https://gerrit.wikimedia.org/r/mediawiki"",\r\n                ""Ref"": ""67da0cbcfdf7f6e1c40e9d145df77a088fb6231e"",\r\n                ""RepoSum"": ""r1:sSchJC9s3IXQjz9XqT6meZ2hU1YmTimbSLTEdXEHdYQ=""\r\n        }\r\n}\r\n```\n\n### What did you expect to see?\n\nSuccessful fetch, as with previous `go` versions.\r\n\r\nIt appears that I put the arguments in the wrong order in https://go.dev/cl/556358, inadventently breaking shallow `git` fetches. That went undiagnosed, because it fixed the symptom I was testing for (#56881) and we didn't have any tests specifically probing for shallowness of git repos in the module cache.\r\n\r\n(CC @suzmue @matloob @samthanawalla)","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-7986e26a39 Mon Mar 4 18:59:50 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build954033280=/tmp/go-build -gno-record-gcc-switches'\n"
66143,"x/vulndb/cmd/vulnreport: add lint check for runtime package vulnerabilities### govulncheck version\n\n-\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\n-\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n-\n\n### What did you see happen?\n\n-\n\n### What did you expect to see?\n\nTo help out govulncheck, every vulnerability for the runtime package should declare all symbols as vulnerable. Likely the best way to do that is to add a lint check to vulnreport.",vulncheck or vulndb,tatianab,"### govulncheck version\n\n-\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\n-\n\n### Output of `go env` in your module/workspace:\n\n```shell\n-\n```\n\n\n### What did you do?\n\n-\n\n### What did you see happen?\n\n-\n\n### What did you expect to see?\n\nTo help out govulncheck, every vulnerability for the runtime package should declare all symbols as vulnerable. Likely the best way to do that is to add a lint check to vulnreport.",shell\n-\n
66139,"x/vuln: invalid finding: if Frame.Function is set, Frame.Package must also be### govulncheck version\n\nThis was on version 1.0.4 (I've since downgraded back to 1.0.1 which works fine).\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nHaven't tried latest unforunately.\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nA simple `govulncheck ./...`\n\n### What did you see happen?\n\nreturned the above error in the title. The fun part is, switching to package instead of symbol actually showed me that there was a protobuf vuln I need to upgrade dependencies for. I will try to get a minimal reproduction together.\n\n### What did you expect to see?\n\nA successful scan with the protobuf dependencies called out as needing an upgrade due to an active vuln.",NeedsInvestigation|vulncheck or vulndb,zpavlinovic,"### govulncheck version\n\nThis was on version 1.0.4 (I've since downgraded back to 1.0.1 which works fine).\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nHaven't tried latest unforunately.\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/zachary/Library/Caches/go-build'\r\nGOENV='/Users/zachary/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/zachary/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/zachary/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/zachary/workspace/my-repo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-argume\n```\n\n\n### What did you do?\n\nA simple `govulncheck ./...`\n\n### What did you see happen?\n\nreturned the above error in the title. The fun part is, switching to package instead of symbol actually showed me that there was a protobuf vuln I need to upgrade dependencies for. I will try to get a minimal reproduction together.\n\n### What did you expect to see?\n\nA successful scan with the protobuf dependencies called out as needing an upgrade due to an active vuln.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/zachary/Library/Caches/go-build'\r\nGOENV='/Users/zachary/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/zachary/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/zachary/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/zachary/workspace/my-repo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-argume\n"
66131,"cmd/compile: dynamic checks for atomics should be removed for ARM64 targets that support LSE### Go version\n\nupstream\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\ntest.go:\r\n\r\n```\r\npackage main\r\n\r\nimport ""sync/atomic""\r\n\r\ntype Counter struct {\r\n        counter int32\r\n}\r\n\r\nfunc main() {\r\n        x := Counter{10}\r\n        atomic.AddInt32(&x.counter, 1)\r\n}\r\n```\r\n\r\nBuild:\r\n```\r\nGOOS=linux GOARCH=arm64 GOARM64=v8.2 go build test.go\r\n```\r\n\r\nGet disassembly:\r\n```\r\ngo tool objdump -s main\\.main test\r\n```\n\n### What did you see happen?\n\nAtomic add includes checks for presence of atomic instructions and a loop for ARM64 architectures that don't support them:\r\n\r\n```\r\n  test.go:11            0x708cc                 b00007db                ADRP 1019904(PC), R27\r\n  test.go:11            0x708d0                 3961af61                MOVBU 2155(R27), R1\r\n  test.go:11            0x708d4                 360000a1                TBZ $0, R1, 5(PC)\r\n  test.go:11            0x708d8                 b24003e1                ORR $1, ZR, R1\r\n  test.go:11            0x708dc                 b8e10002                ?\r\n  test.go:11            0x708e0                 8b010042                ADD R1, R2, R2\r\n  test.go:11            0x708e4                 14000006                JMP 6(PC)\r\n  test.go:11            0x708e8                 b24003e1                ORR $1, ZR, R1\r\n  test.go:11            0x708ec                 885ffc02                LDAXRW (R0), R2\r\n  test.go:11            0x708f0                 8b010042                ADD R1, R2, R2\r\n  test.go:11            0x708f4                 881bfc02                STLXRW R2, (R0), R27\r\n  test.go:11            0x708f8                 b5ffffbb                CBNZ R27, -3(PC)\r\n```\r\n\n\n### What did you expect to see?\n\nWith `GOARCH=arm64 GOARM64=v8.2` we can eliminate runtime checks and thus, improve performance.",arch-arm64|compiler/runtime|FixPending,andreybokhanko,"### Go version\n\nupstream\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/abokhanko/.cache/go-build'\r\nGOENV='/home/abokhanko/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/abokhanko/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/abokhanko/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/abokhanko/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/abokhanko/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-e9ab25bdd0 Mon Feb 19 22:21:38 2024 +0300'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2057756495=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\ntest.go:\r\n\r\n```\r\npackage main\r\n\r\nimport ""sync/atomic""\r\n\r\ntype Counter struct {\r\n        counter int32\r\n}\r\n\r\nfunc main() {\r\n        x := Counter{10}\r\n        atomic.AddInt32(&x.counter, 1)\r\n}\r\n```\r\n\r\nBuild:\r\n```\r\nGOOS=linux GOARCH=arm64 GOARM64=v8.2 go build test.go\r\n```\r\n\r\nGet disassembly:\r\n```\r\ngo tool objdump -s main\\.main test\r\n```\n\n### What did you see happen?\n\nAtomic add includes checks for presence of atomic instructions and a loop for ARM64 architectures that don't support them:\r\n\r\n```\r\n  test.go:11            0x708cc                 b00007db                ADRP 1019904(PC), R27\r\n  test.go:11            0x708d0                 3961af61                MOVBU 2155(R27), R1\r\n  test.go:11            0x708d4                 360000a1                TBZ $0, R1, 5(PC)\r\n  test.go:11            0x708d8                 b24003e1                ORR $1, ZR, R1\r\n  test.go:11            0x708dc                 b8e10002                ?\r\n  test.go:11            0x708e0                 8b010042                ADD R1, R2, R2\r\n  test.go:11            0x708e4                 14000006                JMP 6(PC)\r\n  test.go:11            0x708e8                 b24003e1                ORR $1, ZR, R1\r\n  test.go:11            0x708ec                 885ffc02                LDAXRW (R0), R2\r\n  test.go:11            0x708f0                 8b010042                ADD R1, R2, R2\r\n  test.go:11            0x708f4                 881bfc02                STLXRW R2, (R0), R27\r\n  test.go:11            0x708f8                 b5ffffbb                CBNZ R27, -3(PC)\r\n```\r\n\n\n### What did you expect to see?\n\nWith `GOARCH=arm64 GOARM64=v8.2` we can eliminate runtime checks and thus, improve performance.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/abokhanko/.cache/go-build'\r\nGOENV='/home/abokhanko/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/abokhanko/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/abokhanko/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/abokhanko/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/abokhanko/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-e9ab25bdd0 Mon Feb 19 22:21:38 2024 +0300'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2057756495=/tmp/go-build -gno-record-gcc-switches'\n"
66130,"x/vuln: govulncheck: panic on a nil types.Object### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nScanner: govulncheck@v1.0.4\r\n\r\nRun scanner as `govulncheck.exe ./...` \r\n\n\n### What did you see happen?\n\n```\r\nScanning your code and 220 packages across 30 dependent modules for known vulnerabilities...\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0x28 pc=0x131c6fa]\r\n\r\ngoroutine 2938 [running]:\r\ngolang.org/x/tools/go/ssa.memberFromObject(0xc015d38980, {0x0, 0x0?}, {0x0, 0x0}, {0x0, 0x0})\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:55 +0x5a\r\ngolang.org/x/tools/go/ssa.membersFromDecl(0xc015d38980, {0x14f6d90?, 0xc00d280240?}, {0x0, 0x0})\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:161 +0x485\r\ngolang.org/x/tools/go/ssa.(*Program).CreatePackage(0xc009f6a0d0, 0xc012463260, {0xc011f95740, 0x1, 0x1}, 0xc012461e50, 0x0)    \r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:250 +0x865\r\ngolang.org/x/vuln/internal/vulncheck.buildSSA({0xc011f95810, 0x1, 0xc0002c1f90?}, 0xc000038900)\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/utils.go:54 +0x45a\r\ngolang.org/x/vuln/internal/vulncheck.source.func1()\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/source.go:54 +0x8f\r\ncreated by golang.org/x/vuln/internal/vulncheck.source in goroutine 6\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/source.go:52 +0x28e\r\n```\n\n### What did you expect to see?\n\nNo panic",NeedsInvestigation|vulncheck or vulndb,zpavlinovic,"### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\pteti\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\pteti\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\pteti\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\pteti\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\pteti\\go\\pkg\\mod\\golang.org\\toolchain@v0.0.1-go1.22.0.windows-amd64\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\pteti\\go\\pkg\\mod\\golang.org\\toolchain@v0.0.1-go1.22.0.windows-amd64\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\repos\\alstom.com\\new\\estclient\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\pteti\\AppData\\Local\\Temp\\go-build931439042=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\nScanner: govulncheck@v1.0.4\r\n\r\nRun scanner as `govulncheck.exe ./...` \r\n\n\n### What did you see happen?\n\n```\r\nScanning your code and 220 packages across 30 dependent modules for known vulnerabilities...\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0x28 pc=0x131c6fa]\r\n\r\ngoroutine 2938 [running]:\r\ngolang.org/x/tools/go/ssa.memberFromObject(0xc015d38980, {0x0, 0x0?}, {0x0, 0x0}, {0x0, 0x0})\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:55 +0x5a\r\ngolang.org/x/tools/go/ssa.membersFromDecl(0xc015d38980, {0x14f6d90?, 0xc00d280240?}, {0x0, 0x0})\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:161 +0x485\r\ngolang.org/x/tools/go/ssa.(*Program).CreatePackage(0xc009f6a0d0, 0xc012463260, {0xc011f95740, 0x1, 0x1}, 0xc012461e50, 0x0)    \r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/tools@v0.17.0/go/ssa/create.go:250 +0x865\r\ngolang.org/x/vuln/internal/vulncheck.buildSSA({0xc011f95810, 0x1, 0xc0002c1f90?}, 0xc000038900)\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/utils.go:54 +0x45a\r\ngolang.org/x/vuln/internal/vulncheck.source.func1()\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/source.go:54 +0x8f\r\ncreated by golang.org/x/vuln/internal/vulncheck.source in goroutine 6\r\n        C:/Users/pteti/go/pkg/mod/golang.org/x/vuln@v1.0.4/internal/vulncheck/source.go:52 +0x28e\r\n```\n\n### What did you expect to see?\n\nNo panic","shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\pteti\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\pteti\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\pteti\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\pteti\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\pteti\\go\\pkg\\mod\\golang.org\\toolchain@v0.0.1-go1.22.0.windows-amd64\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\pteti\\go\\pkg\\mod\\golang.org\\toolchain@v0.0.1-go1.22.0.windows-amd64\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\repos\\alstom.com\\new\\estclient\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\pteti\\AppData\\Local\\Temp\\go-build931439042=/tmp/go-build -gno-record-gcc-switches\n"
66119,"cmd/go/internal/modload: `MainModuleSet.DirImportPath` does not check module boundaries### Go version\n\n5dcc04aeacdaa78cc431e3f8b2119d2f351685b5\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nReviewed test failures on pending https://go.dev/cl/567435.\r\n\r\nNoticed an existing bug in `modload.MainModuleSet.DirImportPath` introduced in https://go.dev/cl/129798 (for #27022).\r\n\r\nReproduced the bug as follows:\r\n```\r\ngo build testdata/q/q.go\r\n\r\n-- go.mod --\r\nmodule example\r\n\r\ngo 1.23\r\n\r\nrequire (\r\n\ttestdata/q v0.1.0\r\n)\r\n\r\nreplace (\r\n\ttestdata/q => ./testdata/q\r\n)\r\n-- internal/p/p.go --\r\npackage p\r\n-- testdata/q/go.mod --\r\nmodule testdata/q\r\n\r\ngo 1.23\r\n-- testdata/q/q.go --\r\npackage q\r\n\r\nimport _ ""example/internal/p""\r\n```\n\n### What did you see happen?\n\n```\r\n$ go build ./testdata/q/q.go\r\n\r\n```\r\n(no error)\n\n### What did you expect to see?\n\nAn error, because (per the behavior agreed upon in #23970) a package in the module `testdata/q` should not be allowed to import an `internal` module from a module that does not share its import path.\r\n\r\nPer https://go.dev/cl/129798:\r\n> In GOPATH mode the rule has always been that 'go run x.go' can\r\n> import whatever the package in x.go's directory would be able to\r\n> import. Apply the same rule here.\r\n\r\n`go build testdata/q` confirms that the package in `q.go`'s directory is _not_ allowed to import that package:\r\n```\r\n$ go build testdata/q\r\npackage testdata/q\r\n        testdata/q/q.go:3:8: use of internal package example/internal/p not allowed\r\n```\r\n\r\nThe underlying problem is that `DirImportPath` is just checking for a file path prefix, not using `modload.dirInModule` to properly check that the directory is contained in the module without intervening `go.mod` files carving out module boundaries.\r\n\r\n(CC @matloob @samthanawalla)",GoCommand|modules|FixPending,samthanawalla,"### Go version\n\n5dcc04aeacdaa78cc431e3f8b2119d2f351685b5\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/tmp/tmp.JAmBbk4Nn9/.gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/tmp/tmp.JAmBbk4Nn9/.gopath'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-5dcc04ae Mon Mar 4 21:01:23 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/tmp.JAmBbk4Nn9/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4217272553=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nReviewed test failures on pending https://go.dev/cl/567435.\r\n\r\nNoticed an existing bug in `modload.MainModuleSet.DirImportPath` introduced in https://go.dev/cl/129798 (for #27022).\r\n\r\nReproduced the bug as follows:\r\n```\r\ngo build testdata/q/q.go\r\n\r\n-- go.mod --\r\nmodule example\r\n\r\ngo 1.23\r\n\r\nrequire (\r\n\ttestdata/q v0.1.0\r\n)\r\n\r\nreplace (\r\n\ttestdata/q => ./testdata/q\r\n)\r\n-- internal/p/p.go --\r\npackage p\r\n-- testdata/q/go.mod --\r\nmodule testdata/q\r\n\r\ngo 1.23\r\n-- testdata/q/q.go --\r\npackage q\r\n\r\nimport _ ""example/internal/p""\r\n```\n\n### What did you see happen?\n\n```\r\n$ go build ./testdata/q/q.go\r\n\r\n```\r\n(no error)\n\n### What did you expect to see?\n\nAn error, because (per the behavior agreed upon in #23970) a package in the module `testdata/q` should not be allowed to import an `internal` module from a module that does not share its import path.\r\n\r\nPer https://go.dev/cl/129798:\r\n> In GOPATH mode the rule has always been that 'go run x.go' can\r\n> import whatever the package in x.go's directory would be able to\r\n> import. Apply the same rule here.\r\n\r\n`go build testdata/q` confirms that the package in `q.go`'s directory is _not_ allowed to import that package:\r\n```\r\n$ go build testdata/q\r\npackage testdata/q\r\n        testdata/q/q.go:3:8: use of internal package example/internal/p not allowed\r\n```\r\n\r\nThe underlying problem is that `DirImportPath` is just checking for a file path prefix, not using `modload.dirInModule` to properly check that the directory is contained in the module without intervening `go.mod` files carving out module boundaries.\r\n\r\n(CC @matloob @samthanawalla)","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/tmp/tmp.JAmBbk4Nn9/.gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/tmp/tmp.JAmBbk4Nn9/.gopath'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-5dcc04ae Mon Mar 4 21:01:23 2024 +0000'\r\nGODEBUG=''\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/tmp.JAmBbk4Nn9/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4217272553=/tmp/go-build -gno-record-gcc-switches'\n"
66096,"cmd/compile: ICE: panic: interface conversion: ir.Node is *ir.ConvExpr, not *ir.IndexExpr### Go version\n\ngo version go1.22.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nExplicitly converted type map value into the slice.  Removing type conversion works.\r\n\r\nhttps://play.golang.org/p/kLwlEV4WW1R\n\n### What did you see happen?\n\nCompiler asks to file a bug report:\r\n\r\n```\r\n./prog.go:16:17: internal compiler error: panic: interface conversion: ir.Node is *ir.ConvExpr, not *ir.IndexExpr\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\n\n### What did you expect to see?\n\nCompilation succeeds.",NeedsFix|compiler/runtime,cuonglm,"### Go version\n\ngo version go1.22.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/redacted/Library/Caches/go-build'\r\nGOENV='/Users/redacted/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/redacted/Developer/pkg/mod'\r\nGONOPROXY='github.com/Company/*'\r\nGONOSUMDB='github.com/Company/*'\r\nGOOS='darwin'\r\nGOPATH='/Users/redacted/Developer'\r\nGOPRIVATE='github.com/redacted/*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/local/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/local/lib/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='/usr/bin/clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/redacted/Developer/src/github.com/velppa/go-playground/internal-compiler-error-at-2024-03-04-191051/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/q7/f_x2pvyd0jgc1h2x_rrl3d2m0000gn/T/go-build4100637186=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nExplicitly converted type map value into the slice.  Removing type conversion works.\r\n\r\nhttps://play.golang.org/p/kLwlEV4WW1R\n\n### What did you see happen?\n\nCompiler asks to file a bug report:\r\n\r\n```\r\n./prog.go:16:17: internal compiler error: panic: interface conversion: ir.Node is *ir.ConvExpr, not *ir.IndexExpr\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\n\n### What did you expect to see?\n\nCompilation succeeds.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/redacted/Library/Caches/go-build'\r\nGOENV='/Users/redacted/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/redacted/Developer/pkg/mod'\r\nGONOPROXY='github.com/Company/*'\r\nGONOSUMDB='github.com/Company/*'\r\nGOOS='darwin'\r\nGOPATH='/Users/redacted/Developer'\r\nGOPRIVATE='github.com/redacted/*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/local/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/local/lib/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='/usr/bin/clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/redacted/Developer/src/github.com/velppa/go-playground/internal-compiler-error-at-2024-03-04-191051/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/q7/f_x2pvyd0jgc1h2x_rrl3d2m0000gn/T/go-build4100637186=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66095,"sync/atomic: describe return value of atomic.Bool CompareAndSwap### Proposal Details\n\nThis is the current documentation for `atomic.Bool` `CompareAndSwap`:\r\n\r\n\r\n\r\nThis only happens for the special case `Bool`: From reading only the types `bool * bool -> bool` it is not clear if the return value is the first or second parameter, or some other bool value. The documentation comment just states the obvious (CompareAndSwap does compare-and-swap) and `swapped` is ambiguous IMHO b/c it could mean the swapped-in value new, the swapped-out value old, or that the swap operation was done.\r\n\r\nThe proposal is to clarify the doc comment as e.g. (assuming this is even correct)\r\n\r\n\r\n\r\nI'm not native English speaking, so, there is probably better wording.\r\n\r\n## References\r\n\r\n- https://github.com/golang/go/issues/50860\r\n- https://github.com/golang/go/issues/50859\r\n",Documentation|NeedsInvestigation|compiler/runtime,dr2chase,"### Proposal Details\n\nThis is the current documentation for `atomic.Bool` `CompareAndSwap`:\r\n\r\n```go\r\n// CompareAndSwap executes the compare-and-swap operation for the boolean value x.\r\nfunc (x *Bool) CompareAndSwap(old, new bool) (swapped bool) {\r\n\treturn CompareAndSwapUint32(&x.v, b32(old), b32(new))\r\n}\r\n```\r\n\r\nThis only happens for the special case `Bool`: From reading only the types `bool * bool -> bool` it is not clear if the return value is the first or second parameter, or some other bool value. The documentation comment just states the obvious (CompareAndSwap does compare-and-swap) and `swapped` is ambiguous IMHO b/c it could mean the swapped-in value new, the swapped-out value old, or that the swap operation was done.\r\n\r\nThe proposal is to clarify the doc comment as e.g. (assuming this is even correct)\r\n\r\n```go\r\n// CompareAndSwap executes the compare-and-swap operation for the boolean value x.\r\n// It returns true if the swap was done.\r\n```\r\n\r\nI'm not native English speaking, so, there is probably better wording.\r\n\r\n## References\r\n\r\n- https://github.com/golang/go/issues/50860\r\n- https://github.com/golang/go/issues/50859\r\n","go\r\n// CompareAndSwap executes the compare-and-swap operation for the boolean value x.\r\nfunc (x *Bool) CompareAndSwap(old, new bool) (swapped bool) {\r\n\treturn CompareAndSwapUint32(&x.v, b32(old), b32(new))\r\n}\r\n"
66092,"cmd/go: always pass -lang to cmd/compile### Go version\r\n\r\ngo version go1.22.0 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n\r\nmain.go:\r\n\r\n\r\n\r\n```\r\ngo run main.go\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\ntrue\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nfalse\r\n```\r\n\r\nNote that when the `-gcflags=-lang=go1.22` compiler flag is specified, then the ""//go:build go1.xy"" comment directive is respected (`go run .` with a go.mod file also respects it).\r\n\r\n```\r\n$ gotv 1.22. run main.go \r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run main.go\r\nfalse\r\n$ gotv 1.22. run -gcflags=-lang=go1.22 main.go \r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run -gcflags=-lang=go1.22 main.go\r\ntrue\r\n$ gotv 1.22. run .\r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run .\r\ntrue\r\n$ gotv 1.22. run -gcflags=-lang=go1.22 .\r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run -gcflags=-lang=go1.22 .\r\ntrue\r\n```\r\n\r\n",GoCommand|FixPending,samthanawalla,"### Go version\r\n\r\ngo version go1.22.0 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\n.\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n\r\nmain.go:\r\n\r\n```Go\r\n//go:build go1.21\r\n\r\npackage main\r\n\r\nfunc main() {\r\n\tfor i, p := 0, (*int)(nil); p == nil; println(p == &i) {\r\n\t\tp = &i\r\n\t}\r\n}\r\n```\r\n\r\n```\r\ngo run main.go\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\ntrue\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nfalse\r\n```\r\n\r\nNote that when the `-gcflags=-lang=go1.22` compiler flag is specified, then the ""//go:build go1.xy"" comment directive is respected (`go run .` with a go.mod file also respects it).\r\n\r\n```\r\n$ gotv 1.22. run main.go \r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run main.go\r\nfalse\r\n$ gotv 1.22. run -gcflags=-lang=go1.22 main.go \r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run -gcflags=-lang=go1.22 main.go\r\ntrue\r\n$ gotv 1.22. run .\r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run .\r\ntrue\r\n$ gotv 1.22. run -gcflags=-lang=go1.22 .\r\n[Run]: $HOME/.cache/gotv/tag_go1.22.0/bin/go run -gcflags=-lang=go1.22 .\r\ntrue\r\n```\r\n\r\n",shell\r\n.\r\n
66070,cmd/compile: loopvar doesn't trigger nocopy detection### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n\n\n### What did you see happen?\n\nConsistent behavior between `foo` and `bar` with 1.22 compiler.\n\n### What did you expect to see?\n\nInconsistent behavior between `foo` and `bar` with 1.22 compiler.,NeedsInvestigation|compiler/runtime,dr2chase,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\n.\n```\n\n\n### What did you do?\n\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc foo() string {\r\n\tfor b, i := (strings.Builder{}), byte('a'); ; i++ {\r\n\t\tb.WriteByte(i)\r\n\t\tif i == 'z' {\r\n\t\t\treturn b.String()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc bar(callback func(*strings.Builder)) string {\r\n\tfor b, i := (strings.Builder{}), byte('a'); ; i++ {\r\n\t\tb.WriteByte(i)\r\n\t\tcallback(&b) // <-- difference here\r\n\t\tif i == 'z' {\r\n\t\t\treturn b.String()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tdebugProcess := func(pb *strings.Builder) {\r\n\t\t// do nothing\r\n\t}\r\n\tfmt.Println(""foo:"", foo())\r\n\tfmt.Println(""bar:"", bar(debugProcess))\r\n}\r\n```\n\n### What did you see happen?\n\nConsistent behavior between `foo` and `bar` with 1.22 compiler.\n\n### What did you expect to see?\n\nInconsistent behavior between `foo` and `bar` with 1.22 compiler.",shell\n.\n
66066,"cmd/compile: out-of-bounds panic with uint32 conversion and modulus operation in Go 1.22.0 on arm64### Go version\n\ngo version go1.22.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nOn linux/arm64 and darwin/arm64, with the latest compiler, this program crashes:\r\n\r\n```\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\n/*\r\nThis code demonstrates an out-of-bounds panic that occurs on go1.22.0 on linux/arm64 and darwin/arm64.\r\n\r\nIt does not panic on go1.21.6 on arm64, or on go1.22.0 on amd64.\r\nIt also does not panic when built with -gcflags=""-N -l"" on go1.22.0 on arm64.\r\n*/\r\n\r\n// if this function is inlined, the code will not panic\r\n//\r\n//go:noinline\r\nfunc u32max() uint32 {\r\n\t// if bit 32 is clear, the code will not panic\r\n\tx := int64(1<<32 - 1)\r\n\treturn uint32(x)\r\n}\r\n\r\nfunc main() {\r\n\tarr := []int{1, 2, 3}\r\n\r\n\tfmt.Printf(""u32max: %d\\n"", u32max())\r\n\tfmt.Printf(""len(arr): %d\\n"", len(arr))\r\n\tfmt.Printf(""u32max mod len(arr): %d\\n"", u32max()%uint32(len(arr)))\r\n\r\n\t_ = arr[u32max()%uint32(len(arr))]\r\n}\r\n```\n\n### What did you see happen?\n\n`go run main.go`\r\n```\r\nu32max: 4294967295\r\nlen(arr): 3\r\nu32max mod len(arr): 0\r\npanic: runtime error: index out of range [-4294967296]\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/Users/jeff/go/src/github.com/jnoxon/crash-example/main.go:28 +0x150\r\nexit status 2\r\n```\n\n### What did you expect to see?\n\nIt should run the same as it does without optimizations:\r\n\r\n`go run -gcflags=""-N -l"" main.go`\r\n\r\n```\r\nu32max: 4294967295\r\nlen(arr): 3\r\nu32max mod len(arr): 0\r\n```",NeedsFix|arch-arm64|compiler/runtime,randall77,"### Go version\n\ngo version go1.22.0 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jeff/Library/Caches/go-build'\r\nGOENV='/Users/jeff/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jeff/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/jeff/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/jeff/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.darwin-arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/jeff/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.darwin-arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jeff/go/src/github.com/spyderbat/crash-example/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/h8/9kxv3svd2bx_6hg8pxcg_skh0000gn/T/go-build1296351590=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nOn linux/arm64 and darwin/arm64, with the latest compiler, this program crashes:\r\n\r\n```\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\n/*\r\nThis code demonstrates an out-of-bounds panic that occurs on go1.22.0 on linux/arm64 and darwin/arm64.\r\n\r\nIt does not panic on go1.21.6 on arm64, or on go1.22.0 on amd64.\r\nIt also does not panic when built with -gcflags=""-N -l"" on go1.22.0 on arm64.\r\n*/\r\n\r\n// if this function is inlined, the code will not panic\r\n//\r\n//go:noinline\r\nfunc u32max() uint32 {\r\n\t// if bit 32 is clear, the code will not panic\r\n\tx := int64(1<<32 - 1)\r\n\treturn uint32(x)\r\n}\r\n\r\nfunc main() {\r\n\tarr := []int{1, 2, 3}\r\n\r\n\tfmt.Printf(""u32max: %d\\n"", u32max())\r\n\tfmt.Printf(""len(arr): %d\\n"", len(arr))\r\n\tfmt.Printf(""u32max mod len(arr): %d\\n"", u32max()%uint32(len(arr)))\r\n\r\n\t_ = arr[u32max()%uint32(len(arr))]\r\n}\r\n```\n\n### What did you see happen?\n\n`go run main.go`\r\n```\r\nu32max: 4294967295\r\nlen(arr): 3\r\nu32max mod len(arr): 0\r\npanic: runtime error: index out of range [-4294967296]\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/Users/jeff/go/src/github.com/jnoxon/crash-example/main.go:28 +0x150\r\nexit status 2\r\n```\n\n### What did you expect to see?\n\nIt should run the same as it does without optimizations:\r\n\r\n`go run -gcflags=""-N -l"" main.go`\r\n\r\n```\r\nu32max: 4294967295\r\nlen(arr): 3\r\nu32max mod len(arr): 0\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jeff/Library/Caches/go-build'\r\nGOENV='/Users/jeff/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jeff/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/jeff/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/jeff/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.darwin-arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/jeff/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.darwin-arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jeff/go/src/github.com/spyderbat/crash-example/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/h8/9kxv3svd2bx_6hg8pxcg_skh0000gn/T/go-build1296351590=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
66064,"cmd/compile: //go:build file version ignored when using generic function from package ""slices"" in Go 1.21### Go version\n\ngo version go1.21.7 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/-yiceeveEDz?v=goprev\r\n\r\n<details><summary>Details</summary>\r\n<p>\r\n\r\n```\r\n//go:build go1.21\r\n\r\npackage main\r\n\r\nimport ""slices""\r\n\r\nfunc main() {\r\n\t_ = slices.Clone([]string{})\r\n}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.16\r\n```\r\n\r\n</p>\r\n</details> \n\n### What did you see happen?\n\nGo 1.21:\r\n```\r\nembedding interface element ~[]string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n\r\nGo build failed.\r\n```\r\n\r\nGo 1.22:\r\n```\r\n\r\nProgram exited.\r\n```\n\n### What did you expect to see?\n\nI expect the program to type-check successfully on Go 1.21, same as it does with Go 1.22.\r\n\r\nThis issue is making it impossible to use packages in non-module repositories which use the `slices` or `maps` packages with Go modules as the synthesized go.mod file has an implied language version of go1.16.\r\n\r\n- Likely related to https://github.com/golang/go/issues/64759",NeedsFix|compiler/runtime,griesemer,"### Go version\n\ngo version go1.21.7 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.7'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/go/src/repro/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build936666295=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/-yiceeveEDz?v=goprev\r\n\r\n<details><summary>Details</summary>\r\n<p>\r\n\r\n```\r\n//go:build go1.21\r\n\r\npackage main\r\n\r\nimport ""slices""\r\n\r\nfunc main() {\r\n\t_ = slices.Clone([]string{})\r\n}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.16\r\n```\r\n\r\n</p>\r\n</details> \n\n### What did you see happen?\n\nGo 1.21:\r\n```\r\nembedding interface element ~[]string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n\r\nGo build failed.\r\n```\r\n\r\nGo 1.22:\r\n```\r\n\r\nProgram exited.\r\n```\n\n### What did you expect to see?\n\nI expect the program to type-check successfully on Go 1.21, same as it does with Go 1.22.\r\n\r\nThis issue is making it impossible to use packages in non-module repositories which use the `slices` or `maps` packages with Go modules as the synthesized go.mod file has an implied language version of go1.16.\r\n\r\n- Likely related to https://github.com/golang/go/issues/64759","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.7'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/go/src/repro/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build936666295=/tmp/go-build -gno-record-gcc-switches'\n"
66055,"x/tools/gopls: Upgrade check on Go 1.22 projects fails ### gopls version\n\nv0.15.1\n\n### go env\n\n\n\n\n### What did you do?\n\nI updated a project to use Go 1.22 and set `go 1.22.0` in the `go.mod` file. After that I pressed the `Check for upgrades` button in VSCode.\n\n### What did you see happen?\n\nError by VSCode saying:\r\n```\r\nCommand 'gopls.check_upgrades' failed: Error: err: exit status 1: stderr:\r\n  go: can't determine available upgrades using the vendor directory (Use -mod=mod or -mod=readonly to bypass.) .\r\n```\r\nMy guess is that [this is the root cause](https://github.com/golang/tools/blob/master/gopls/internal/server/command.go#L750-L758), as the `go list -m -u -json` command fails on my command prompt as well. When I add `""buildFlags"": [""-mod=mod""],` to the gopls config in vscode, it's starting to work again.\n\n### What did you expect to see?\n\nA running upgrade check that marks dependencies that can be updated.\n\n### Editor and settings\n\n```\r\n    ""gopls"": {\r\n        // Add parameter placeholders when completing a function.\r\n        ""usePlaceholders"": true,\r\n        // If true, enable additional analyses with staticcheck.\r\n        // Warning: This will significantly increase memory usage.\r\n        ""staticcheck"": false,\r\n    },\r\n    ""[go]"": {\r\n        ""editor.formatOnSave"": true,\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        },\r\n        // Optional: Disable snippets, as they conflict with completion ranking.\r\n        ""editor.snippetSuggestions"": ""none"",\r\n    },\r\n    ""[go.mod]"": {\r\n        ""editor.formatOnSave"": true,\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        },\r\n    },\r\n    ""[go][go.mod]"": {\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        }\r\n    },\r\n```\n\n### Logs\n\n```\r\n[Error - 14:05:37] Request workspace/executeCommand failed.\r\n  Message: err: exit status 1: stderr: go: can't determine available upgrades using the vendor directory\r\n\t(Use -mod=mod or -mod=readonly to bypass.)\r\n```",gopls|Tools,findleyr,"### gopls version\n\nv0.15.1\n\n### go env\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/sysop/.cache/go-build'\r\nGOENV='/home/sysop/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/sysop/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/sysop/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/var/lib/snapd/snap/go/10506'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/var/lib/snapd/snap/go/10506/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/sysop/rebuy/terraform-cluster-config/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3341802980=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI updated a project to use Go 1.22 and set `go 1.22.0` in the `go.mod` file. After that I pressed the `Check for upgrades` button in VSCode.\n\n### What did you see happen?\n\nError by VSCode saying:\r\n```\r\nCommand 'gopls.check_upgrades' failed: Error: err: exit status 1: stderr:\r\n  go: can't determine available upgrades using the vendor directory (Use -mod=mod or -mod=readonly to bypass.) .\r\n```\r\nMy guess is that [this is the root cause](https://github.com/golang/tools/blob/master/gopls/internal/server/command.go#L750-L758), as the `go list -m -u -json` command fails on my command prompt as well. When I add `""buildFlags"": [""-mod=mod""],` to the gopls config in vscode, it's starting to work again.\n\n### What did you expect to see?\n\nA running upgrade check that marks dependencies that can be updated.\n\n### Editor and settings\n\n```\r\n    ""gopls"": {\r\n        // Add parameter placeholders when completing a function.\r\n        ""usePlaceholders"": true,\r\n        // If true, enable additional analyses with staticcheck.\r\n        // Warning: This will significantly increase memory usage.\r\n        ""staticcheck"": false,\r\n    },\r\n    ""[go]"": {\r\n        ""editor.formatOnSave"": true,\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        },\r\n        // Optional: Disable snippets, as they conflict with completion ranking.\r\n        ""editor.snippetSuggestions"": ""none"",\r\n    },\r\n    ""[go.mod]"": {\r\n        ""editor.formatOnSave"": true,\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        },\r\n    },\r\n    ""[go][go.mod]"": {\r\n        ""editor.codeActionsOnSave"": {\r\n            ""source.organizeImports"": ""explicit""\r\n        }\r\n    },\r\n```\n\n### Logs\n\n```\r\n[Error - 14:05:37] Request workspace/executeCommand failed.\r\n  Message: err: exit status 1: stderr: go: can't determine available upgrades using the vendor directory\r\n\t(Use -mod=mod or -mod=readonly to bypass.)\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/sysop/.cache/go-build'\r\nGOENV='/home/sysop/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/sysop/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/sysop/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/var/lib/snapd/snap/go/10506'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/var/lib/snapd/snap/go/10506/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/sysop/rebuy/terraform-cluster-config/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3341802980=/tmp/go-build -gno-record-gcc-switches'\n"
66046,"x/tools/go/analysis/passes/directive: spurious requirement for blank line between `//go:debug` and package declaration### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nPrompted by a question from Sean Sorrell in the #general channel in the Gophers Slack about [using go:debug directives in test files](https://go.dev/doc/godebug#default), I wrote the following file called `main_test.go:`:\r\n\r\n```\r\n//go:debug panicnil=1\r\npackage main_test\r\n\r\nimport ""testing""\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tt.Errorf(""oops!"")\r\n}\r\n```\r\n\r\nAccording to the documentation, this should pass `go vet`.\r\n\r\n### What did you see happen?\r\n\r\n`go vet .` returns:\r\n\r\n`./main_test.go:1:1: //go:debug directive only valid before package declaration` \r\n\r\n### What did you expect to see?\r\n\r\nA clean `go vet` output.",NeedsInvestigation|Tools|Analysis,rsc,"### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/me/Library/Caches/go-build'\r\nGOENV='/Users/me/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/me/go/pkg/mod'\r\nGONOPROXY='private/*'\r\nGONOSUMDB='private/*'\r\nGOOS='darwin'\r\nGOPATH='/Users/me/go'\r\nGOPRIVATE='private/*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/vl/k9dw37lx0x5bbtzj98plsqbh0000gp/T/go-build1408921875=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nPrompted by a question from Sean Sorrell in the #general channel in the Gophers Slack about [using go:debug directives in test files](https://go.dev/doc/godebug#default), I wrote the following file called `main_test.go:`:\r\n\r\n```\r\n//go:debug panicnil=1\r\npackage main_test\r\n\r\nimport ""testing""\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tt.Errorf(""oops!"")\r\n}\r\n```\r\n\r\nAccording to the documentation, this should pass `go vet`.\r\n\r\n### What did you see happen?\r\n\r\n`go vet .` returns:\r\n\r\n`./main_test.go:1:1: //go:debug directive only valid before package declaration` \r\n\r\n### What did you expect to see?\r\n\r\nA clean `go vet` output.","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/me/Library/Caches/go-build'\r\nGOENV='/Users/me/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/me/go/pkg/mod'\r\nGONOPROXY='private/*'\r\nGONOSUMDB='private/*'\r\nGOOS='darwin'\r\nGOPATH='/Users/me/go'\r\nGOPRIVATE='private/*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/vl/k9dw37lx0x5bbtzj98plsqbh0000gp/T/go-build1408921875=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
66038,"cmd/go: coverpkg doesn't ignore directories starting with '.'### Go version\r\n\r\ngo version go1.22.0 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nRan Go tests with `-coverpkg=./...` in a directory which included `GOMODCACHE/GOCACHE` in a subdirectory starting with `"".""` (the use case is for caching in GitLab, which requires directories stored in caches exist in the working directory, see their Go example https://docs.gitlab.com/ee/ci/caching/#cache-go-dependencies)\r\n\r\nHere's a bash script to reproduce:\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\nThe modules under `.go` were included in test coverage, output of the above script (note the coverage % in the last line):    \r\n\r\n```\r\ngo: creating new go.mod: module example-proj\r\ngo: finding module for package golang.org/x/tools/cover\r\ngo: downloading golang.org/x/tools v0.18.0\r\ngo: found golang.org/x/tools/cover in golang.org/x/tools v0.18.0\r\nok  \texample-proj\t0.002s\tcoverage: 0.8% of statements in ./...\r\n```\r\n\r\ninspecting the coverage profile:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nModules under the `.go` directory to be ignored, per https://pkg.go.dev/cmd/go#hdr-Package_lists_and_patterns\r\n\r\n> Directory and file names that begin with ""."" or ""_"" are ignored by the go tool, as are directories named ""testdata"". \r\n\r\nEDIT: for anyone looking for a workaround, I just filtered out lines not belonging to my module in the coverage file:\r\n\r\n    awk -v go_mod=""$(go list -m)"" 'NR==1 || $0 ~ ""^""go_mod' ""coverage.in"" > coverage.out\r\n",NeedsInvestigation|GoCommand,thanm,"### Go version\r\n\r\ngo version go1.22.0 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mjh/.cache/go-build'\r\nGOENV='/home/mjh/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mjh/.local/share/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mjh/.local/share/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mjh/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mjh/sdk/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mjh/src/personal/go-cov/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3982892531=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nRan Go tests with `-coverpkg=./...` in a directory which included `GOMODCACHE/GOCACHE` in a subdirectory starting with `"".""` (the use case is for caching in GitLab, which requires directories stored in caches exist in the working directory, see their Go example https://docs.gitlab.com/ee/ci/caching/#cache-go-dependencies)\r\n\r\nHere's a bash script to reproduce:\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\nset -o errexit -o pipefail -o nounset\r\n\r\nmkdir proj\r\ncd proj\r\ngo mod init example-proj\r\n\r\n# create a trivial lib with 100% test coverage\r\ncat <<EOF > lib.go\r\npackage lib\r\n\r\nimport (\r\n\t// add an unused dependency, just so something is stored in the cache directory\r\n\t_ ""golang.org/x/tools/cover""\r\n)\r\n\r\nfunc Sum(a int, b int) int { \r\n\treturn a + b\r\n}\r\nEOF\r\n\r\ncat <<EOF > lib_test.go\r\npackage lib\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc TestSum(t *testing.T) {\r\n\tif Sum(1, 2) != 3 {\r\n\t\tt.Error(""fail"")\r\n\t}\r\n}\r\nEOF\r\n\r\n# .go contains directories we wish to cache\r\nmkdir .go\r\nexport GOMODCACHE=""$PWD/.go/mod_cache"" \r\nexport GOCACHE=""$PWD/.go/cache""\r\n\r\ngo mod tidy\r\ngo test -coverprofile=coverage.out -coverpkg=./... ./...\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe modules under `.go` were included in test coverage, output of the above script (note the coverage % in the last line):    \r\n\r\n```\r\ngo: creating new go.mod: module example-proj\r\ngo: finding module for package golang.org/x/tools/cover\r\ngo: downloading golang.org/x/tools v0.18.0\r\ngo: found golang.org/x/tools/cover in golang.org/x/tools v0.18.0\r\nok  \texample-proj\t0.002s\tcoverage: 0.8% of statements in ./...\r\n```\r\n\r\ninspecting the coverage profile:\r\n\r\n```console\r\n$ grep --invert-match ""$(go list -m)"" coverage.out | head\r\nmode: set\r\ngolang.org/x/tools/cover/profile.go:37.41,37.58 1 0\r\ngolang.org/x/tools/cover/profile.go:38.41,38.81 1 0\r\ngolang.org/x/tools/cover/profile.go:39.41,39.68 1 0\r\ngolang.org/x/tools/cover/profile.go:43.57,45.16 2 0\r\ngolang.org/x/tools/cover/profile.go:45.16,47.3 1 0\r\ngolang.org/x/tools/cover/profile.go:48.2,49.36 2 0\r\ngolang.org/x/tools/cover/profile.go:54.64,62.15 4 0\r\ngolang.org/x/tools/cover/profile.go:62.15,64.17 2 0\r\ngolang.org/x/tools/cover/profile.go:64.17,66.48 2 0\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nModules under the `.go` directory to be ignored, per https://pkg.go.dev/cmd/go#hdr-Package_lists_and_patterns\r\n\r\n> Directory and file names that begin with ""."" or ""_"" are ignored by the go tool, as are directories named ""testdata"". \r\n\r\nEDIT: for anyone looking for a workaround, I just filtered out lines not belonging to my module in the coverage file:\r\n\r\n    awk -v go_mod=""$(go list -m)"" 'NR==1 || $0 ~ ""^""go_mod' ""coverage.in"" > coverage.out\r\n","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mjh/.cache/go-build'\r\nGOENV='/home/mjh/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mjh/.local/share/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mjh/.local/share/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mjh/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mjh/sdk/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mjh/src/personal/go-cov/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3982892531=/tmp/go-build -gno-record-gcc-switches'\r\n"
65997,"runtime/trace: v2 traces contain an incorrect timestamp scaling factor on Windows### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI'm trying to record a trace of a program that utilizes glfw/opengl and other c/c++ libraries to check why in rare occasions 1ms sleep or runtime.Gosched can take up to 2-20 seconds. I wanted to check the new tracing introduced in go 1.22, but noticed that timestamps are completely wrong.\r\n\r\nMinified example that also has this issue: [glfwtest.zip](https://github.com/golang/go/files/14434499/glfwtest.zip)\r\n\n\n### What did you see happen?\n\nMain thread is set to pace at ~144Hz (pacing is done using time.Sleep(time.Millisecond)+runtime.Gosched), so it means rendering function should run every ~7ms. But looking at trace tool page it shows that it is running every 28us:\r\n\r\n![2024-02-28_12-38-57_Oy93U](https://github.com/golang/go/assets/5307179/9aeae45a-df5d-4289-a89f-77b3271be6be)\r\n\r\nI see the same delta between other frames.\r\n\r\nThat's how it looks for the minified example (VSync is on, I'm measuring time between glfw.PollEvents()):\r\n![2024-02-28_14-04-59_UDWQx](https://github.com/golang/go/assets/5307179/30124b4c-130f-426e-a84e-6208dc9be9a4)\r\n\r\nAgain, 27us where 6.9-7ms is expected\n\n### What did you expect to see?\n\nBoth screenshots are from traces recorded by programs compiled with `GOEXPERIMENT=noexectracer2`.\r\n\r\nMain program:\r\n![2024-02-28_12-38-19_biwwS](https://github.com/golang/go/assets/5307179/e031a117-a47d-4d88-b2f6-f9a08229f95f)\r\n\r\nMinified example (VSync on 144hz monitor):\r\n![image](https://github.com/golang/go/assets/5307179/7da66a17-5832-439a-a13c-7676e413f5bd)\r\n\r\nAs we can see, delta in both examples is ~6.9ms, so it is correct.",NeedsFix|compiler/runtime,mknyszek,"### Go version\n\ngo version go1.22.0 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\Wieku\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\Wieku\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\Wieku\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Wieku\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:/Program Files/Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\Wieku\\projects\\danser\\danser-go\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\Wieku\\AppData\\Local\\Temp\\go-build2797386340=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\nI'm trying to record a trace of a program that utilizes glfw/opengl and other c/c++ libraries to check why in rare occasions 1ms sleep or runtime.Gosched can take up to 2-20 seconds. I wanted to check the new tracing introduced in go 1.22, but noticed that timestamps are completely wrong.\r\n\r\nMinified example that also has this issue: [glfwtest.zip](https://github.com/golang/go/files/14434499/glfwtest.zip)\r\n\n\n### What did you see happen?\n\nMain thread is set to pace at ~144Hz (pacing is done using time.Sleep(time.Millisecond)+runtime.Gosched), so it means rendering function should run every ~7ms. But looking at trace tool page it shows that it is running every 28us:\r\n\r\n![2024-02-28_12-38-57_Oy93U](https://github.com/golang/go/assets/5307179/9aeae45a-df5d-4289-a89f-77b3271be6be)\r\n\r\nI see the same delta between other frames.\r\n\r\nThat's how it looks for the minified example (VSync is on, I'm measuring time between glfw.PollEvents()):\r\n![2024-02-28_14-04-59_UDWQx](https://github.com/golang/go/assets/5307179/30124b4c-130f-426e-a84e-6208dc9be9a4)\r\n\r\nAgain, 27us where 6.9-7ms is expected\n\n### What did you expect to see?\n\nBoth screenshots are from traces recorded by programs compiled with `GOEXPERIMENT=noexectracer2`.\r\n\r\nMain program:\r\n![2024-02-28_12-38-19_biwwS](https://github.com/golang/go/assets/5307179/e031a117-a47d-4d88-b2f6-f9a08229f95f)\r\n\r\nMinified example (VSync on 144hz monitor):\r\n![image](https://github.com/golang/go/assets/5307179/7da66a17-5832-439a-a13c-7676e413f5bd)\r\n\r\nAs we can see, delta in both examples is ~6.9ms, so it is correct.","shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\Wieku\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\Wieku\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\Wieku\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Wieku\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:/Program Files/Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.22.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\Wieku\\projects\\danser\\danser-go\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\Wieku\\AppData\\Local\\Temp\\go-build2797386340=/tmp/go-build -gno-record-gcc-switches\n"
65962,"runtime: SIGBUS in initItab (write to readonly ITab.Fun) on unchecked type assertion with generics### Go version\r\n\r\nfrom go1.18 to gotip(go1.23-ccbc725f)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThis came up during an internal code review on a convoluted dynamodb unmarshaler implementation, the crash could be striped down to this:\r\n\r\nhttps://go.dev/play/p/buw65E2QFzU\r\n\r\n\r\nThe crash only occurs if the `v.(T)` is present, even though the condition evaluates to false (shown by not reaching the unreachable panic). Checking any of the 2 assertions also prevents the crash.\r\n\r\n### What did you see happen?\r\n\r\n```\r\nunexpected fault address 0x1004545c0\r\nfatal error: fault\r\n[signal SIGBUS: bus error code=0x1 addr=0x1004545c0 pc=0x10038d328]\r\n\r\ngoroutine 1 gp=0x140000021c0 m=0 mp=0x1004ca540 [running]:\r\nruntime.throw({0x1004127ad?, 0x10038d168?})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/panic.go:1023 +0x40 fp=0x1400010ad40 sp=0x1400010ad10 pc=0x1003b6140\r\nruntime.sigpanic()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/signal_unix.go:878 +0x178 fp=0x1400010ada0 sp=0x1400010ad40 pc=0x1003cdd38\r\nruntime.(*itab).init(0x1004545a8)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:239 +0x338 fp=0x1400010ae70 sp=0x1400010adb0 pc=0x10038d328\r\nruntime.getitab(0x100443da0, 0x10043ff20, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:93 +0x17c fp=0x1400010aec0 sp=0x1400010ae70 pc=0x10038cc9c\r\nruntime.typeAssert(0x1004c5bf0, 0x10043ff20)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:434 +0x44 fp=0x1400010af00 sp=0x1400010aec0 pc=0x10038d994\r\nmain.check[...](...)\r\n\t/Users/meroje/projects/memcrash/main.go:15\r\nmain.main()\r\n\t/Users/meroje/projects/memcrash/main.go:23 +0xe8 fp=0x1400010af40 sp=0x1400010af00 pc=0x1004121e8\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:271 +0x28c fp=0x1400010afd0 sp=0x1400010af40 pc=0x1003b8a7c\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x1400010afd0 sp=0x1400010afd0 pc=0x1003e7754\r\n\r\ngoroutine 2 gp=0x14000002700 m=nil [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000058f90 sp=0x14000058f70 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:326 +0xb8 fp=0x14000058fd0 sp=0x14000058f90 pc=0x1003b8d38\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x14000058fd0 sp=0x14000058fd0 pc=0x1003e7754\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:314 +0x24\r\n\r\ngoroutine 3 gp=0x14000002c40 m=nil [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000059760 sp=0x14000059740 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.bgsweep(0x14000072000)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcsweep.go:278 +0xa0 fp=0x140000597b0 sp=0x14000059760 pc=0x1003a5ab0\r\nruntime.gcenable.gowrap1()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:203 +0x28 fp=0x140000597d0 sp=0x140000597b0 pc=0x100399f48\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000597d0 sp=0x140000597d0 pc=0x1003e7754\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:203 +0x6c\r\n\r\ngoroutine 17 gp=0x14000084380 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x100433cd0?, 0x1?, 0x0?, 0x14000084380?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000054760 sp=0x14000054740 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x1004c9e60)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcscavenge.go:425 +0x5c fp=0x14000054790 sp=0x14000054760 pc=0x1003a34ac\r\nruntime.bgscavenge(0x14000072000)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcscavenge.go:653 +0x44 fp=0x140000547b0 sp=0x14000054790 pc=0x1003a3a04\r\nruntime.gcenable.gowrap2()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:204 +0x28 fp=0x140000547d0 sp=0x140000547b0 pc=0x100399ee8\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000547d0 sp=0x140000547d0 pc=0x1003e7754\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:204 +0xac\r\n\r\ngoroutine 33 gp=0x1400011e000 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x6d?, 0x0?, 0x1003976b4?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000058580 sp=0x14000058560 pc=0x1003b8ea8\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mfinal.go:194 +0x108 fp=0x140000587d0 sp=0x14000058580 pc=0x100399018\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000587d0 sp=0x140000587d0 pc=0x1003e7754\r\ncreated by runtime.createfing in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mfinal.go:164 +0x80\r\nexit status 2\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nWe expected to recover from a common type assertion panic, as is the case without the unreachable if branch.",compiler/runtime,randall77,"### Go version\r\n\r\nfrom go1.18 to gotip(go1.23-ccbc725f)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/meroje/Library/Caches/go-build'\r\nGOENV='/Users/meroje/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/meroje/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/meroje/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/meroje/projects/memcrash/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/fq/_z724rr10kb802r6v4m4jnjw0000gq/T/go-build1130271614=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nThis came up during an internal code review on a convoluted dynamodb unmarshaler implementation, the crash could be striped down to this:\r\n\r\nhttps://go.dev/play/p/buw65E2QFzU\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype I interface {\r\n\tx()\r\n}\r\n\r\nfunc check[T bool]() {\r\n\tvar value bool\r\n\tif v, ok := any(value).(I); ok {\r\n\t\t_ = v.(T)\r\n\t\tpanic(""unreachable"")\r\n\t}\r\n\t_ = any(value).(I)\r\n}\r\n\r\nfunc main() {\r\n\tdefer func() {\r\n\t\terr := recover()\r\n\t\tfmt.Printf(""recovered: %v\\n"", err)\r\n\t}()\r\n\tcheck()\r\n}\r\n```\r\n\r\nThe crash only occurs if the `v.(T)` is present, even though the condition evaluates to false (shown by not reaching the unreachable panic). Checking any of the 2 assertions also prevents the crash.\r\n\r\n### What did you see happen?\r\n\r\n```\r\nunexpected fault address 0x1004545c0\r\nfatal error: fault\r\n[signal SIGBUS: bus error code=0x1 addr=0x1004545c0 pc=0x10038d328]\r\n\r\ngoroutine 1 gp=0x140000021c0 m=0 mp=0x1004ca540 [running]:\r\nruntime.throw({0x1004127ad?, 0x10038d168?})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/panic.go:1023 +0x40 fp=0x1400010ad40 sp=0x1400010ad10 pc=0x1003b6140\r\nruntime.sigpanic()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/signal_unix.go:878 +0x178 fp=0x1400010ada0 sp=0x1400010ad40 pc=0x1003cdd38\r\nruntime.(*itab).init(0x1004545a8)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:239 +0x338 fp=0x1400010ae70 sp=0x1400010adb0 pc=0x10038d328\r\nruntime.getitab(0x100443da0, 0x10043ff20, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:93 +0x17c fp=0x1400010aec0 sp=0x1400010ae70 pc=0x10038cc9c\r\nruntime.typeAssert(0x1004c5bf0, 0x10043ff20)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/iface.go:434 +0x44 fp=0x1400010af00 sp=0x1400010aec0 pc=0x10038d994\r\nmain.check[...](...)\r\n\t/Users/meroje/projects/memcrash/main.go:15\r\nmain.main()\r\n\t/Users/meroje/projects/memcrash/main.go:23 +0xe8 fp=0x1400010af40 sp=0x1400010af00 pc=0x1004121e8\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:271 +0x28c fp=0x1400010afd0 sp=0x1400010af40 pc=0x1003b8a7c\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x1400010afd0 sp=0x1400010afd0 pc=0x1003e7754\r\n\r\ngoroutine 2 gp=0x14000002700 m=nil [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000058f90 sp=0x14000058f70 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:326 +0xb8 fp=0x14000058fd0 sp=0x14000058f90 pc=0x1003b8d38\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x14000058fd0 sp=0x14000058fd0 pc=0x1003e7754\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:314 +0x24\r\n\r\ngoroutine 3 gp=0x14000002c40 m=nil [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000059760 sp=0x14000059740 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.bgsweep(0x14000072000)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcsweep.go:278 +0xa0 fp=0x140000597b0 sp=0x14000059760 pc=0x1003a5ab0\r\nruntime.gcenable.gowrap1()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:203 +0x28 fp=0x140000597d0 sp=0x140000597b0 pc=0x100399f48\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000597d0 sp=0x140000597d0 pc=0x1003e7754\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:203 +0x6c\r\n\r\ngoroutine 17 gp=0x14000084380 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x100433cd0?, 0x1?, 0x0?, 0x14000084380?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000054760 sp=0x14000054740 pc=0x1003b8ea8\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x1004c9e60)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcscavenge.go:425 +0x5c fp=0x14000054790 sp=0x14000054760 pc=0x1003a34ac\r\nruntime.bgscavenge(0x14000072000)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgcscavenge.go:653 +0x44 fp=0x140000547b0 sp=0x14000054790 pc=0x1003a3a04\r\nruntime.gcenable.gowrap2()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:204 +0x28 fp=0x140000547d0 sp=0x140000547b0 pc=0x100399ee8\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000547d0 sp=0x140000547d0 pc=0x1003e7754\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mgc.go:204 +0xac\r\n\r\ngoroutine 33 gp=0x1400011e000 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x6d?, 0x0?, 0x1003976b4?)\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/proc.go:402 +0xc8 fp=0x14000058580 sp=0x14000058560 pc=0x1003b8ea8\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mfinal.go:194 +0x108 fp=0x140000587d0 sp=0x14000058580 pc=0x100399018\r\nruntime.goexit({})\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/asm_arm64.s:1222 +0x4 fp=0x140000587d0 sp=0x140000587d0 pc=0x1003e7754\r\ncreated by runtime.createfing in goroutine 1\r\n\t/opt/homebrew/Cellar/go/1.22.0/libexec/src/runtime/mfinal.go:164 +0x80\r\nexit status 2\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nWe expected to recover from a common type assertion panic, as is the case without the unreachable if branch.","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/meroje/Library/Caches/go-build'\r\nGOENV='/Users/meroje/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/meroje/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/meroje/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/meroje/projects/memcrash/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/fq/_z724rr10kb802r6v4m4jnjw0000gq/T/go-build1130271614=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
65957,cmd/compile: hash of unhashable type [4]int32### Go version\n\ngotip\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nplayground link: https://go.dev/play/p/WAX0OTneh60\n\n### What did you see happen?\n\n```\r\npanic: runtime error: hash of unhashable type [4]int32\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/tmp/sandbox3460698193/prog.go:15 +0xc7\r\n```\n\n### What did you expect to see?\n\nno panic,NeedsFix|compiler/runtime,randall77,"### Go version\n\ngotip\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGOARCH=""arm64""\r\nGOOS=""darwin""\n```\n\n\n### What did you do?\n\nplayground link: https://go.dev/play/p/WAX0OTneh60\n\n### What did you see happen?\n\n```\r\npanic: runtime error: hash of unhashable type [4]int32\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/tmp/sandbox3460698193/prog.go:15 +0xc7\r\n```\n\n### What did you expect to see?\n\nno panic","shell\nGOARCH=""arm64""\r\nGOOS=""darwin""\n"
65939,"cmd/vet: unitchecker panic checking left shift with float### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRun this: https://go.dev/play/p/oVYKMHyztHy\r\n\r\n\n\n### What did you see happen?\n\nPanic:\r\n\r\n```\r\n# [play]\r\npanic: 2 not an Int\r\n\r\ngoroutine 25 [running]:\r\ngo/constant.Int64Val({0x7ba0b8?, 0xc000111140?})\r\n\tgo/constant/value.go:516 +0x109\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.checkLongShift(0xc000122b60, {0x7b83d0, 0xc000015f50}, {0x7b9548, 0xc00005f2a0}, {0x7b9998, 0xc00005f2c0})\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:92 +0xbe\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.run.func2({0x7b83d0, 0xc000015f50})\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:64 +0x105\r\ncmd/vendor/golang.org/x/tools/go/ast/inspector.(*Inspector).Preorder(0xc0001820a8, {0xc000147bd0?, 0x969ae0?, 0x30?}, 0xc0000a7c10)\r\n\tcmd/vendor/golang.org/x/tools/go/ast/inspector/inspector.go:82 +0x8f\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.run(0xc000122b60)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:55 +0x159\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func2.1()\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:382 +0x8ce\r\nsync.(*Once).doSlow(0x6ee9e0?, 0xc00011e480?)\r\n\tsync/once.go:74 +0xc2\r\nsync.(*Once).Do(...)\r\n\tsync/once.go:65\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func2(0x968de0)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:333 +0x19e\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func3.1(0x0?)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:404 +0x23\r\ncreated by cmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func3 in goroutine 1\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:403 +0x47\r\n```\n\n### What did you expect to see?\n\n`4` is printed",NeedsInvestigation|Analysis,timothy-king,"### Go version\n\ngo1.22\n\n### Output of `go env` in your module/workspace:\n\n```shell\nn/a\n```\n\n\n### What did you do?\n\nRun this: https://go.dev/play/p/oVYKMHyztHy\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\ta := 1\r\n\tprintln(a << 2.0)\r\n}\r\n```\n\n### What did you see happen?\n\nPanic:\r\n\r\n```\r\n# [play]\r\npanic: 2 not an Int\r\n\r\ngoroutine 25 [running]:\r\ngo/constant.Int64Val({0x7ba0b8?, 0xc000111140?})\r\n\tgo/constant/value.go:516 +0x109\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.checkLongShift(0xc000122b60, {0x7b83d0, 0xc000015f50}, {0x7b9548, 0xc00005f2a0}, {0x7b9998, 0xc00005f2c0})\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:92 +0xbe\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.run.func2({0x7b83d0, 0xc000015f50})\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:64 +0x105\r\ncmd/vendor/golang.org/x/tools/go/ast/inspector.(*Inspector).Preorder(0xc0001820a8, {0xc000147bd0?, 0x969ae0?, 0x30?}, 0xc0000a7c10)\r\n\tcmd/vendor/golang.org/x/tools/go/ast/inspector/inspector.go:82 +0x8f\r\ncmd/vendor/golang.org/x/tools/go/analysis/passes/shift.run(0xc000122b60)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/passes/shift/shift.go:55 +0x159\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func2.1()\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:382 +0x8ce\r\nsync.(*Once).doSlow(0x6ee9e0?, 0xc00011e480?)\r\n\tsync/once.go:74 +0xc2\r\nsync.(*Once).Do(...)\r\n\tsync/once.go:65\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func2(0x968de0)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:333 +0x19e\r\ncmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func3.1(0x0?)\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:404 +0x23\r\ncreated by cmd/vendor/golang.org/x/tools/go/analysis/unitchecker.run.func3 in goroutine 1\r\n\tcmd/vendor/golang.org/x/tools/go/analysis/unitchecker/unitchecker.go:403 +0x47\r\n```\n\n### What did you expect to see?\n\n`4` is printed",shell\nn/a\n
65918,cmd/compile: loop inversion does not support unsigned numbersThis is duplicate of #61629 but for:\r\n\r\n---\r\nI didn't implemented it back then since I reused existing scanning code (`findIndVar`) which only supported signed ops:\r\n\r\nhttps://github.com/golang/go/blob/ef84d62cfc358ff62c60da9ceec754e7a389b5d5/src/cmd/compile/internal/ssa/loopbce.go#L99\r\n---\r\nI'll submit a patch.,Performance|compiler/runtime,Jorropo,This is duplicate of #61629 but for:\r\n```go\r\nfor range uint(x) {\r\n // ...\r\n}\r\n```\r\n---\r\nI didn't implemented it back then since I reused existing scanning code (`findIndVar`) which only supported signed ops:\r\n\r\nhttps://github.com/golang/go/blob/ef84d62cfc358ff62c60da9ceec754e7a389b5d5/src/cmd/compile/internal/ssa/loopbce.go#L99\r\n---\r\nI'll submit a patch.,go\r\nfor range uint(x) {\r\n // ...\r\n}\r\n
65915,"x/tools/cmd/deadcode: unexported methods not reported as unreachable### Go version\r\n\r\ngo version go1.21.0 darwin/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule scratchpad\r\n\r\ngo 1.21\r\n```\r\n\r\nexample/main.go\r\n```\r\npackage main\r\n\r\ntype example struct{}\r\n\r\nfunc (e example) UnUsed() {}\r\n\r\nfunc (e example) Used() {}\r\n\r\nfunc (e example) unUsed() {}\r\n\r\nfunc (e example) used() {}\r\n\r\ntype PublicExample struct{}\r\n\r\nfunc (p PublicExample) UnUsed() {}\r\n\r\nfunc (p PublicExample) Used() {}\r\n\r\nfunc (p PublicExample) unUsed() {}\r\n\r\nfunc (p PublicExample) used() {}\r\n\r\nfunc main() {\r\n\texample{}.Used()\r\n\texample{}.used()\r\n\tPublicExample{}.Used()\r\n\tPublicExample{}.used()\r\n}\r\n\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe output of `deadcode ./...` reports:\r\n\r\n```\r\nexample/main.go:15:24: unreachable func: PublicExample.UnUsed\r\nexample/main.go:19:24: unreachable func: PublicExample.unUsed\r\n```\r\n\r\nIn this case, the non-used methods on `example` (`UnUsed` and `unUsed`) should be reported as unreachable, but they weren't. \r\n\r\nThe output of `deadcode -whylive scratchpad/example.example.UnUsed ./...` mistakenly reports: \r\n\r\n```\r\ndeadcode: function ""scratchpad/example.example.UnUsed"" not found in program\r\n```\r\n\r\nThe output of `deadcode -whylive scratchpad/example.PublicExample.UnUsed ./...` correctly reports: \r\n\r\n```\r\ndeadcode: function scratchpad/example.PublicExample.UnUsed is dead code\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe output of `deadcode ./...` should report:\r\n\r\n```\r\nexample/main.go:9:18: unreachable func: example.UnUsed\r\nexample/main.go:11:18: unreachable func: example.unUsed\r\nexample/main.go:15:24: unreachable func: PublicExample.UnUsed\r\nexample/main.go:19:24: unreachable func: PublicExample.unUsed\r\n```\r\n\r\nThe output of `deadcode -whylive scratchpad/example.example.UnUsed ./...` should report: \r\n\r\n```\r\ndeadcode: function ""scratchpad/example.example.UnUsed"" is dead code\r\n```",NeedsInvestigation|Tools,adonovan,"### Go version\r\n\r\ngo version go1.21.0 darwin/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/aggnolek/go/bin'\r\nGOCACHE='/Users/aggnolek/Library/Caches/go-build'\r\nGOENV='/Users/aggnolek/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aggnolek/go/pkg/mod'\r\nGONOPROXY='*'\r\nGONOSUMDB='*'\r\nGOOS='darwin'\r\nGOPATH='/Users/aggnolek/go'\r\nGOPRIVATE='*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/opt/go/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/opt/go/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/aggnolek/gorepos/aggnolek/scratchpad/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/x7/2f8ynt3954s4y78yt_54v9fr0000gs/T/go-build3150741677=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule scratchpad\r\n\r\ngo 1.21\r\n```\r\n\r\nexample/main.go\r\n```\r\npackage main\r\n\r\ntype example struct{}\r\n\r\nfunc (e example) UnUsed() {}\r\n\r\nfunc (e example) Used() {}\r\n\r\nfunc (e example) unUsed() {}\r\n\r\nfunc (e example) used() {}\r\n\r\ntype PublicExample struct{}\r\n\r\nfunc (p PublicExample) UnUsed() {}\r\n\r\nfunc (p PublicExample) Used() {}\r\n\r\nfunc (p PublicExample) unUsed() {}\r\n\r\nfunc (p PublicExample) used() {}\r\n\r\nfunc main() {\r\n\texample{}.Used()\r\n\texample{}.used()\r\n\tPublicExample{}.Used()\r\n\tPublicExample{}.used()\r\n}\r\n\r\n```\r\n\r\n### What did you see happen?\r\n\r\nThe output of `deadcode ./...` reports:\r\n\r\n```\r\nexample/main.go:15:24: unreachable func: PublicExample.UnUsed\r\nexample/main.go:19:24: unreachable func: PublicExample.unUsed\r\n```\r\n\r\nIn this case, the non-used methods on `example` (`UnUsed` and `unUsed`) should be reported as unreachable, but they weren't. \r\n\r\nThe output of `deadcode -whylive scratchpad/example.example.UnUsed ./...` mistakenly reports: \r\n\r\n```\r\ndeadcode: function ""scratchpad/example.example.UnUsed"" not found in program\r\n```\r\n\r\nThe output of `deadcode -whylive scratchpad/example.PublicExample.UnUsed ./...` correctly reports: \r\n\r\n```\r\ndeadcode: function scratchpad/example.PublicExample.UnUsed is dead code\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe output of `deadcode ./...` should report:\r\n\r\n```\r\nexample/main.go:9:18: unreachable func: example.UnUsed\r\nexample/main.go:11:18: unreachable func: example.unUsed\r\nexample/main.go:15:24: unreachable func: PublicExample.UnUsed\r\nexample/main.go:19:24: unreachable func: PublicExample.unUsed\r\n```\r\n\r\nThe output of `deadcode -whylive scratchpad/example.example.UnUsed ./...` should report: \r\n\r\n```\r\ndeadcode: function ""scratchpad/example.example.UnUsed"" is dead code\r\n```","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/aggnolek/go/bin'\r\nGOCACHE='/Users/aggnolek/Library/Caches/go-build'\r\nGOENV='/Users/aggnolek/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aggnolek/go/pkg/mod'\r\nGONOPROXY='*'\r\nGONOSUMDB='*'\r\nGOOS='darwin'\r\nGOPATH='/Users/aggnolek/go'\r\nGOPRIVATE='*'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/opt/go/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/opt/go/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/aggnolek/gorepos/aggnolek/scratchpad/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/x7/2f8ynt3954s4y78yt_54v9fr0000gs/T/go-build3150741677=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
65898,"go/types: types.CheckExpr returns error when 'FuncType' ast.Expr has TypeParams### Go version\n\ngo1.22 \n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/ZPv6Er1H6K3\n\n### What did you see happen?\n\nerror 'undefined: A' is returned\n\n### What did you expect to see?\n\nIn Go version 1.21, there were no errors",NeedsInvestigation,griesemer,"### Go version\n\ngo1.22 \n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/gura/Library/Caches/go-build'\r\nGOENV='/Users/gura/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/gura/go/pkg/mod'\r\nGONOPROXY='*.uangel.com'\r\nGONOSUMDB='*.uangel.com'\r\nGOOS='darwin'\r\nGOPATH='/Users/gura/go'\r\nGOPRIVATE='*.uangel.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/gura/git/fp/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/mr/dvhjg7zd4l125pln73bqyr400000gp/T/go-build857521387=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/ZPv6Er1H6K3\n\n### What did you see happen?\n\nerror 'undefined: A' is returned\n\n### What did you expect to see?\n\nIn Go version 1.21, there were no errors","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/gura/Library/Caches/go-build'\r\nGOENV='/Users/gura/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/gura/go/pkg/mod'\r\nGONOPROXY='*.uangel.com'\r\nGONOSUMDB='*.uangel.com'\r\nGOOS='darwin'\r\nGOPATH='/Users/gura/go'\r\nGOPRIVATE='*.uangel.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.22.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.22.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/gura/git/fp/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/mr/dvhjg7zd4l125pln73bqyr400000gp/T/go-build857521387=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65893,"cmd/compile: ICE with `assertion failed` when using `GODEBUG=gotypesalias=1`### Go version\r\n\r\n`go version devel go1.23-d2c49a55be Thu Feb 22 20:02:36 2024 +0700 X:rangefunc linux/amd64` (this has https://go-review.googlesource.com/c/go/+/565995 checked out because I was running into #65778 too)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n```fish\r\ncd (mktemp -d)\r\npushd .\r\nmkdir go && cd go\r\ngit init && git fetch --depth 1 https://go.googlesource.com/go refs/changes/95/565995/3 && git checkout -b change-565995 FETCH_HEAD\r\ncd src\r\n./make.bash\r\npopd\r\ngit clone -b v0.33.0 --depth 1 https://github.com/libp2p/go-libp2p && cd go-libp2p\r\nGODEBUG=gotypesalias=1 ../go/bin/go build .\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n# google.golang.org/protobuf/reflect/protoreflect\r\n/home/hugo/go/pkg/mod/google.golang.org/protobuf@v1.32.0/reflect/protoreflect/value.go:163:6: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/tmp/go/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xb1ec80?, 0xc0?}, {0xdf5168, 0x10}, {0x0, 0x0, 0x0})\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:430\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000b1eb40, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000b1eb40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:516 +0x1af\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9af00, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).param(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:622\r\ncmd/compile/internal/noder.(*reader).params(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:615 +0x50\r\ncmd/compile/internal/noder.(*reader).signature(0xc000a9af00, 0xc000b20140)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:603 +0x5c\r\ncmd/compile/internal/noder.(*reader).interfaceType(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:574 +0x16a\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:524 +0x36e\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9ab40, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x10, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:805 +0x53c\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0xffffffff?, {0x15928e0?, 0xc000a9a640?, 0xc000a87ef0?}}, 0xc000a7bad0, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a9a780)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a780)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9a640, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000a9a640)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a640)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9a3c0, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x51, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0xffffffff?, {0x15928e0?, 0xc00064efc8?, 0xbcee0e?}}, 0xc000a7b790, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a9a000)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a000)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a97e00, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).param(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:622\r\ncmd/compile/internal/noder.(*reader).params(0xc000a97e00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:615 +0x50\r\ncmd/compile/internal/noder.(*reader).signature(0xc000a97e00, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:602 +0x45\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a97e00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:518 +0x347\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a96b40, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000a96b40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a96b40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a96780, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x4e, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0x46060a?, {0x15928e0?, 0x45fe49?, 0x8?}}, 0x0, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a76280)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).pkgObjs(0xc000a76280, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3331 +0x9d\r\ncmd/compile/internal/noder.(*reader).pkgDecls(0xc000a76280, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3320 +0x18f\r\ncmd/compile/internal/noder.(*reader).pkgInit(0xc000a76280, 0xc00008c320?, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3226 +0xe5\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0003a8690?, 0xd32380?, 0x0?})\r\n\t/tmp/go/src/cmd/compile/internal/noder/unified.go:188 +0x17c\r\ncmd/compile/internal/noder.LoadPackage({0xc0000222a0, 0x9, 0xa})\r\n\t/tmp/go/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe24a40)\r\n\t/tmp/go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t/tmp/go/src/cmd/compile/main.go:57 +0xf9\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNothing (the build succeed)",NeedsFix|compiler/runtime,cuonglm,"### Go version\r\n\r\n`go version devel go1.23-d2c49a55be Thu Feb 22 20:02:36 2024 +0700 X:rangefunc linux/amd64` (this has https://go-review.googlesource.com/c/go/+/565995 checked out because I was running into #65778 too)\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/hugo/.cache/go-build'\r\nGOENV='/home/hugo/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='rangefunc'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/hugo/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/hugo/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/hugo/k/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/hugo/k/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-d2c49a55be Thu Feb 22 20:02:36 2024 +0700 X:rangefunc'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/hugo/k/go-libp2p/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2580004202=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n```fish\r\ncd (mktemp -d)\r\npushd .\r\nmkdir go && cd go\r\ngit init && git fetch --depth 1 https://go.googlesource.com/go refs/changes/95/565995/3 && git checkout -b change-565995 FETCH_HEAD\r\ncd src\r\n./make.bash\r\npopd\r\ngit clone -b v0.33.0 --depth 1 https://github.com/libp2p/go-libp2p && cd go-libp2p\r\nGODEBUG=gotypesalias=1 ../go/bin/go build .\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n# google.golang.org/protobuf/reflect/protoreflect\r\n/home/hugo/go/pkg/mod/google.golang.org/protobuf@v1.32.0/reflect/protoreflect/value.go:163:6: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/tmp/go/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xb1ec80?, 0xc0?}, {0xdf5168, 0x10}, {0x0, 0x0, 0x0})\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t/tmp/go/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:430\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000b1eb40, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000b1eb40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:516 +0x1af\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9af00, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).param(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:622\r\ncmd/compile/internal/noder.(*reader).params(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:615 +0x50\r\ncmd/compile/internal/noder.(*reader).signature(0xc000a9af00, 0xc000b20140)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:603 +0x5c\r\ncmd/compile/internal/noder.(*reader).interfaceType(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:574 +0x16a\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9af00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:524 +0x36e\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9ab40, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x10, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:805 +0x53c\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0xffffffff?, {0x15928e0?, 0xc000a9a640?, 0xc000a87ef0?}}, 0xc000a7bad0, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a9a780)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a780)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9a640, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000a9a640)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a640)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a9a3c0, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x51, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0xffffffff?, {0x15928e0?, 0xc00064efc8?, 0xbcee0e?}}, 0xc000a7b790, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a9a000)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a9a000)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a97e00, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).param(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:622\r\ncmd/compile/internal/noder.(*reader).params(0xc000a97e00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:615 +0x50\r\ncmd/compile/internal/noder.(*reader).signature(0xc000a97e00, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:602 +0x45\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a97e00)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:518 +0x347\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a96b40, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000a96b40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000a96b40)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000a96780, 0x1)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00089a0e0, 0x4e, {0x0, 0x0, 0x0}, {0x15928e0, 0x0, 0x0}, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00089a0e0, {0x46060a?, {0x15928e0?, 0x45fe49?, 0x8?}}, 0x0, 0x0)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000a76280)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).pkgObjs(0xc000a76280, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3331 +0x9d\r\ncmd/compile/internal/noder.(*reader).pkgDecls(0xc000a76280, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3320 +0x18f\r\ncmd/compile/internal/noder.(*reader).pkgInit(0xc000a76280, 0xc00008c320?, 0xc000002240)\r\n\t/tmp/go/src/cmd/compile/internal/noder/reader.go:3226 +0xe5\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0003a8690?, 0xd32380?, 0x0?})\r\n\t/tmp/go/src/cmd/compile/internal/noder/unified.go:188 +0x17c\r\ncmd/compile/internal/noder.LoadPackage({0xc0000222a0, 0x9, 0xa})\r\n\t/tmp/go/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe24a40)\r\n\t/tmp/go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t/tmp/go/src/cmd/compile/main.go:57 +0xf9\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNothing (the build succeed)","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/hugo/.cache/go-build'\r\nGOENV='/home/hugo/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='rangefunc'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/hugo/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/hugo/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/hugo/k/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/hugo/k/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-d2c49a55be Thu Feb 22 20:02:36 2024 +0700 X:rangefunc'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/hugo/k/go-libp2p/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2580004202=/tmp/go-build -gno-record-gcc-switches'\r\n"
65887,"cmd/go: cannot compile Go binary with external linking without cgo with v1.22.0### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI am trying to make BootBoot from the following path:\r\nhttps://gitlab.com/bztsrc/bootboot/-/tree/master/mykernel/go?ref_type=heads\r\n\r\nI am just running the make command.\r\n\r\n```\r\n$ make\r\n```\r\n\n\n### What did you see happen?\n\nI have found that this does not work with Go 1.22.0. The error message from making is shown below.\r\n\r\n```\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n-linkmode requires external (cgo) linking, but cgo is not enabled\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\n\n### What did you expect to see?\n\nMaking this code used to work in Go 1.21.7. I expected to see the following output.\r\n\r\n```\r\n$ make\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n# gitlab.com/bztsrc/bootboot\r\nloadinternal: cannot find runtime/cgo\r\nGNU ld (GNU Binutils for Ubuntu) 2.38\r\naarch64-linux-gnu-strip -s -K mmio -K fb -K bootboot -K environment -K initstack mykernel.aarch64.elf\r\naarch64-linux-gnu-readelf -hls mykernel.aarch64.elf >mykernel.aarch64.txt\r\n```\r\nI am developing an embedded OS in Go. Compiling this code (the default bootboot kernel) works with Go version 1.21.7, but fails with the compiler changes in Go 1.22.0, like so:\r\n```\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n-linkmode requires external (cgo) linking, but cgo is not enabled\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\r\nThe output from making with CGO enabled while using Go 1.22.0 is also shown below.\r\n```\r\n$ go version\r\ngo version go1.22.0 linux/amd64\r\n$ make\r\nCGO_ENABLED=1 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n# runtime/cgo\r\ngcc_arm64.S: Assembler messages:\r\ngcc_arm64.S:30: Error: no such instruction: `stp x29,x30,[sp,'\r\ngcc_arm64.S:34: Error: too many memory references for `mov'\r\ngcc_arm64.S:36: Error: no such instruction: `stp x19,x20,[sp,'\r\ngcc_arm64.S:39: Error: no such instruction: `stp x21,x22,[sp,'\r\ngcc_arm64.S:42: Error: no such instruction: `stp x23,x24,[sp,'\r\ngcc_arm64.S:45: Error: no such instruction: `stp x25,x26,[sp,'\r\ngcc_arm64.S:48: Error: no such instruction: `stp x27,x28,[sp,'\r\ngcc_arm64.S:52: Error: too many memory references for `mov'\r\ngcc_arm64.S:53: Error: too many memory references for `mov'\r\ngcc_arm64.S:54: Error: too many memory references for `mov'\r\ngcc_arm64.S:56: Error: no such instruction: `blr x20'\r\ngcc_arm64.S:57: Error: no such instruction: `blr x19'\r\ngcc_arm64.S:59: Error: no such instruction: `ldp x27,x28,[sp,'\r\ngcc_arm64.S:62: Error: no such instruction: `ldp x25,x26,[sp,'\r\ngcc_arm64.S:65: Error: no such instruction: `ldp x23,x24,[sp,'\r\ngcc_arm64.S:68: Error: no such instruction: `ldp x21,x22,[sp,'\r\ngcc_arm64.S:71: Error: no such instruction: `ldp x19,x20,[sp,'\r\ngcc_arm64.S:74: Error: no such instruction: `ldp x29,x30,[sp],'\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\r\nIf I am no longer supposed to be able to use an external linker while compiling with CGO disabled, how can I get past this compilation error?\r\n",Documentation|NeedsFix|GoCommand|FixPending,bcmills,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='~/.cache/go-build'\r\nGOENV='~/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='~/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='~/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/snap/go/10506'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/snap/go/10506/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='~/bootboot/mykernel/go/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4216832776=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI am trying to make BootBoot from the following path:\r\nhttps://gitlab.com/bztsrc/bootboot/-/tree/master/mykernel/go?ref_type=heads\r\n\r\nI am just running the make command.\r\n\r\n```\r\n$ make\r\n```\r\n\n\n### What did you see happen?\n\nI have found that this does not work with Go 1.22.0. The error message from making is shown below.\r\n\r\n```\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n-linkmode requires external (cgo) linking, but cgo is not enabled\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\n\n### What did you expect to see?\n\nMaking this code used to work in Go 1.21.7. I expected to see the following output.\r\n\r\n```\r\n$ make\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n# gitlab.com/bztsrc/bootboot\r\nloadinternal: cannot find runtime/cgo\r\nGNU ld (GNU Binutils for Ubuntu) 2.38\r\naarch64-linux-gnu-strip -s -K mmio -K fb -K bootboot -K environment -K initstack mykernel.aarch64.elf\r\naarch64-linux-gnu-readelf -hls mykernel.aarch64.elf >mykernel.aarch64.txt\r\n```\r\nI am developing an embedded OS in Go. Compiling this code (the default bootboot kernel) works with Go version 1.21.7, but fails with the compiler changes in Go 1.22.0, like so:\r\n```\r\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n-linkmode requires external (cgo) linking, but cgo is not enabled\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\r\nThe output from making with CGO enabled while using Go 1.22.0 is also shown below.\r\n```\r\n$ go version\r\ngo version go1.22.0 linux/amd64\r\n$ make\r\nCGO_ENABLED=1 GOOS=linux GOARCH=arm64 GOARM=5 go build -trimpath -gcflags=gitlab.com/bztsrc/bootboot=-std -ldflags=""-linkmode external -extld aarch64-linux-gnu-ld -extldflags '-nostdlib -n -v -static -m aarch64elf -T link.ld'"" -o mykernel.aarch64.elf\r\n# runtime/cgo\r\ngcc_arm64.S: Assembler messages:\r\ngcc_arm64.S:30: Error: no such instruction: `stp x29,x30,[sp,'\r\ngcc_arm64.S:34: Error: too many memory references for `mov'\r\ngcc_arm64.S:36: Error: no such instruction: `stp x19,x20,[sp,'\r\ngcc_arm64.S:39: Error: no such instruction: `stp x21,x22,[sp,'\r\ngcc_arm64.S:42: Error: no such instruction: `stp x23,x24,[sp,'\r\ngcc_arm64.S:45: Error: no such instruction: `stp x25,x26,[sp,'\r\ngcc_arm64.S:48: Error: no such instruction: `stp x27,x28,[sp,'\r\ngcc_arm64.S:52: Error: too many memory references for `mov'\r\ngcc_arm64.S:53: Error: too many memory references for `mov'\r\ngcc_arm64.S:54: Error: too many memory references for `mov'\r\ngcc_arm64.S:56: Error: no such instruction: `blr x20'\r\ngcc_arm64.S:57: Error: no such instruction: `blr x19'\r\ngcc_arm64.S:59: Error: no such instruction: `ldp x27,x28,[sp,'\r\ngcc_arm64.S:62: Error: no such instruction: `ldp x25,x26,[sp,'\r\ngcc_arm64.S:65: Error: no such instruction: `ldp x23,x24,[sp,'\r\ngcc_arm64.S:68: Error: no such instruction: `ldp x21,x22,[sp,'\r\ngcc_arm64.S:71: Error: no such instruction: `ldp x19,x20,[sp,'\r\ngcc_arm64.S:74: Error: no such instruction: `ldp x29,x30,[sp],'\r\nmake: *** [Makefile:47: mykernel.aarch64.elf] Error 1\r\n```\r\nIf I am no longer supposed to be able to use an external linker while compiling with CGO disabled, how can I get past this compilation error?\r\n","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='~/.cache/go-build'\r\nGOENV='~/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='~/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='~/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/snap/go/10506'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/snap/go/10506/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='~/bootboot/mykernel/go/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4216832776=/tmp/go-build -gno-record-gcc-switches'\n"
65878,"cmd/compile: counter-intuitive comparison of zero-sized pointers wrapped in interfaces### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n[Playground](https://go.dev/play/p/I16N39xzvjV):\r\n\r\n\n\n### What did you see happen?\n\n`false true false`\n\n### What did you expect to see?\n\nEither `false false false` or `true true true`.\r\n\r\nThe spec defines comparison for interfaces as:\r\n\r\n> Interface types that are not type parameters are comparable. Two interface values are equal if they have [identical](https://go.dev/ref/spec#Type_identity) dynamic types and equal dynamic values or if both have value nil.\r\n\r\nNow, from this definition, the observed behavior should clearly be impossible. The dynamic values are not equal - either before or after wrapping them into `any`. However, the interfaces compare as equal.\r\n\r\nI suspect there is an optimization going on, where the comparison function stored in the rtype short-circuits for pointers to zero-sized values, based on the permission for all zero-sized values to have the same address. But that is only correct, if the compiler does the same short-circuiting for `==`, in my opinion.\r\n\r\n[Originally mentioned on golang-nuts](https://groups.google.com/g/golang-nuts/c/JBVqWYFdtC4).",NeedsInvestigation|compiler/runtime,mdempsky,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mero/.cache/go-build'\r\nGOENV='/home/mero/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mero/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mero'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mero/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/home/mero/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mero/tmp/x/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build624578175=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n[Playground](https://go.dev/play/p/I16N39xzvjV):\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\ta, b := new(struct{}), new(struct{})\r\n\tx, y := any(a), any(b)\r\n\tfmt.Println(a == b, x == y, x.(*struct{}) == y.(*struct{}))\r\n}\r\n```\n\n### What did you see happen?\n\n`false true false`\n\n### What did you expect to see?\n\nEither `false false false` or `true true true`.\r\n\r\nThe spec defines comparison for interfaces as:\r\n\r\n> Interface types that are not type parameters are comparable. Two interface values are equal if they have [identical](https://go.dev/ref/spec#Type_identity) dynamic types and equal dynamic values or if both have value nil.\r\n\r\nNow, from this definition, the observed behavior should clearly be impossible. The dynamic values are not equal - either before or after wrapping them into `any`. However, the interfaces compare as equal.\r\n\r\nI suspect there is an optimization going on, where the comparison function stored in the rtype short-circuits for pointers to zero-sized values, based on the permission for all zero-sized values to have the same address. But that is only correct, if the compiler does the same short-circuiting for `==`, in my opinion.\r\n\r\n[Originally mentioned on golang-nuts](https://groups.google.com/g/golang-nuts/c/JBVqWYFdtC4).","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mero/.cache/go-build'\r\nGOENV='/home/mero/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mero/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mero'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mero/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/home/mero/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mero/tmp/x/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build624578175=/tmp/go-build -gno-record-gcc-switches'\n"
65855,"proposal: go/types: adopt ""defined type"" terminology consistentlyThe spec uses the term ""defined type"" for a type created by a declaration such as `type T int`; a defined type is capable of bearing declared methods. Historically, this was called a `Named` type, but the advent of type aliases made this confusing and ambiguous.\r\n\r\nThough I was initially lukewarm about the term ""defined type"" (aren't all types defined?), recent work auditing dense type-checking code in x/tools as made me appreciate it, because there are now three kinds of ""named"" types:\r\n- defined types (`*Named`)\r\n- type parameters (`*TypeParam`, go1.18), and\r\n- type aliases (`*Alias` in go1.22).\r\n\r\nIn some cases, their namedness is a meaningful commonality that can be used by tooling. For example, they all have an associated TypeName symbol that provides their location and logical name for use in a tool's UI.\r\n\r\nI propose that we follow through with the renaming, using the name ""Named"" as little as possible. Obviously we can't get rid of `Named`, or make it an alias for Defined (as its reflect.Type.String would change), but we can make Defined an alias for it:\r\n\r\n",Proposal,griesemer|findleyr,"The spec uses the term ""defined type"" for a type created by a declaration such as `type T int`; a defined type is capable of bearing declared methods. Historically, this was called a `Named` type, but the advent of type aliases made this confusing and ambiguous.\r\n\r\nThough I was initially lukewarm about the term ""defined type"" (aren't all types defined?), recent work auditing dense type-checking code in x/tools as made me appreciate it, because there are now three kinds of ""named"" types:\r\n- defined types (`*Named`)\r\n- type parameters (`*TypeParam`, go1.18), and\r\n- type aliases (`*Alias` in go1.22).\r\n\r\nIn some cases, their namedness is a meaningful commonality that can be used by tooling. For example, they all have an associated TypeName symbol that provides their location and logical name for use in a tool's UI.\r\n\r\nI propose that we follow through with the renaming, using the name ""Named"" as little as possible. Obviously we can't get rid of `Named`, or make it an alias for Defined (as its reflect.Type.String would change), but we can make Defined an alias for it:\r\n```go\r\n// A Defined type is a type created by a declaration such as `type T underlying`,\r\n// capable of bearing method declarations.\r\n//\r\n// Along with TypeParam and Alias, it is one of three types that are named\r\n// and have an associated TypeName symbol.\r\n// Named is a historical and deprecated term for Defined.\r\ntype Defined = types.Named\r\nfunc NewDefined(obj *TypeName, underlying Type, methods []*Func) *Defined\r\n\r\n// Named is the historical term for a Defined type.\r\n// Use Defined in new code.\r\ntype Named struct { ... }\r\n\r\n// Deprecated: use NewDefined.\r\nfunc NewNamed( ... ) { return NewDefined ... }\r\n```\r\n","go\r\n// A Defined type is a type created by a declaration such as `type T underlying`,\r\n// capable of bearing method declarations.\r\n//\r\n// Along with TypeParam and Alias, it is one of three types that are named\r\n// and have an associated TypeName symbol.\r\n// Named is a historical and deprecated term for Defined.\r\ntype Defined = types.Named\r\nfunc NewDefined(obj *TypeName, underlying Type, methods []*Func) *Defined\r\n\r\n// Named is the historical term for a Defined type.\r\n// Use Defined in new code.\r\ntype Named struct { ... }\r\n\r\n// Deprecated: use NewDefined.\r\nfunc NewNamed( ... ) { return NewDefined ... }\r\n"
65854,"go/types, types2: substitution crashes when GODEBUG=gotypesalias=1 and alias types occur in generic typesTest case:\r\n",NeedsFix,griesemer,Test case:\r\n```Go\r\n// -gotypesalias=1\r\n\r\npackage p\r\n\r\ntype A = int\r\n\r\ntype T[P any] *A\r\n\r\nvar _ T[int]\r\n```,Go\r\n// -gotypesalias=1\r\n\r\npackage p\r\n\r\ntype A = int\r\n\r\ntype T[P any] *A\r\n\r\nvar _ T[int]\r\n
65845,"x/build: timeout_scale parameter not applied on LUCI builders for x/ repos ### Go version\r\n\r\n86a32d6d9c4b2da88cb97da91a15e1af9efc87f7\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nRead https://github.com/golang/go/issues/65820#issuecomment-1954975510.\r\n\r\n### What did you see happen?\r\n\r\nThe logs linked from https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-darwin-amd64-longtest/b8755859092256698353/overview appear to show `go test` commands run without setting the `-timeout` flag.\r\n\r\nIt appears that the LUCI configuration only uses the `timeout_scale` parameter to set the `GO_TEST_TIMEOUT_SCALE` environment variable, which is intended to be specific to `cmd/dist` and should have little to no effect on other commands.\r\n(https://cs.opensource.google/go/x/build/+/luci-config:main.star;l=1206-1208;drc=c0163da662349fff6c2f585cebd08bbd836b8470)\r\n\r\n### What did you expect to see?\r\n\r\nA `-timeout` flag set according to the `timeout_scale` parameter of the builder, analogous to what happens on the legacy builders:\r\nhttps://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1187-1190;drc=498808697e0db626ec196a9a5290f5f121fa056a (issue #56968)",Builders|NeedsInvestigation,mknyszek,"### Go version\r\n\r\n86a32d6d9c4b2da88cb97da91a15e1af9efc87f7\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nRead https://github.com/golang/go/issues/65820#issuecomment-1954975510.\r\n\r\n### What did you see happen?\r\n\r\nThe logs linked from https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-darwin-amd64-longtest/b8755859092256698353/overview appear to show `go test` commands run without setting the `-timeout` flag.\r\n\r\nIt appears that the LUCI configuration only uses the `timeout_scale` parameter to set the `GO_TEST_TIMEOUT_SCALE` environment variable, which is intended to be specific to `cmd/dist` and should have little to no effect on other commands.\r\n(https://cs.opensource.google/go/x/build/+/luci-config:main.star;l=1206-1208;drc=c0163da662349fff6c2f585cebd08bbd836b8470)\r\n\r\n### What did you expect to see?\r\n\r\nA `-timeout` flag set according to the `timeout_scale` parameter of the builder, analogous to what happens on the legacy builders:\r\nhttps://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1187-1190;drc=498808697e0db626ec196a9a5290f5f121fa056a (issue #56968)",shell\r\nN/A\r\n
65808,cmd/compile: internal compiler error with zero-size types### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n[This playground code.](https://go.dev/play/p/1-WmDgnZMlc)\n\n### What did you see happen?\n\nI would expect it to compile (it does in Go 1.21).\n\n### What did you expect to see?\n\nIt does not:\r\n```\r\n<autogenerated>:1: internal compiler error: 'foo.toStrings': value v2 still has 1 uses\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n\r\nGo build failed.\r\n```,NeedsInvestigation|compiler/runtime,dr2chase,"### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/fabianr/Library/Caches/go-build'\r\nGOENV='/Users/fabianr/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='rangefunc'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/fabianr/e/be/gohome/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/fabianr/e/be/gohome'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/fabianr/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/5y/2cd0ydxn7nl7sz2nnk3d91xc0000gn/T/go-build3586506670=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n[This playground code.](https://go.dev/play/p/1-WmDgnZMlc)\n\n### What did you see happen?\n\nI would expect it to compile (it does in Go 1.21).\n\n### What did you expect to see?\n\nIt does not:\r\n```\r\n<autogenerated>:1: internal compiler error: 'foo.toStrings': value v2 still has 1 uses\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n\r\nGo build failed.\r\n```","shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/fabianr/Library/Caches/go-build'\r\nGOENV='/Users/fabianr/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='rangefunc'\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/fabianr/e/be/gohome/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/fabianr/e/be/gohome'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/fabianr/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/5y/2cd0ydxn7nl7sz2nnk3d91xc0000gn/T/go-build3586506670=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65801,"x/tools/gopls: publishDiagnostics is unstable### gopls version\r\n\r\n\r\n\r\n### go env\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n1. Opened VS Code from `src` dir of the Go project.\r\n1. Opened `src/cmd/go/internal/load/pkg.go` in the Go project.\r\n1. Change one of the exported field name of `PackagePublic` (but, not update the references). For example,\r\n\r\n```\r\ndiff --git a/src/cmd/go/internal/load/pkg.go b/src/cmd/go/internal/load/pkg.go\r\nindex 1549800afb..f9cc8f599d 100644\r\n--- a/src/cmd/go/internal/load/pkg.go\r\n+++ b/src/cmd/go/internal/load/pkg.go\r\n@@ -63,7 +63,7 @@ type PackagePublic struct {\r\n        Dir           string                `json:"",omitempty""` // directory containing package sources\r\n        ImportPath    string                `json:"",omitempty""` // import path of package in dir\r\n        ImportComment string                `json:"",omitempty""` // path in import comment on package statement\r\n-       Name          string                `json:"",omitempty""` // package name\r\n+       NameX         string                `json:"",omitempty""` // package name\r\n        Doc           string                `json:"",omitempty""` // package documentation string\r\n        Target        string                `json:"",omitempty""` // installed target for this package (may be executable)\r\n        Shlib         string                `json:"",omitempty""` // the shared library that contains this package (only set when -linkshared)\r\n```\r\n\r\n        \r\n\r\n### What did you see happen?\r\n\r\nExpected gopls to detect build breakage (""has no field or method Name"" error), across many packages.\r\n \r\n\r\n### What did you expect to see?\r\n\r\nGopls published diagnostics for some files and then soon empty diagnostics for all those files. This empty diagnostic message makes vscode (client) clears all diagnostics immediately.\r\n\r\n\r\n### Editor and settings\r\n\r\n```\r\n""gopls"": {},\r\n""go.languageServerFlags"": [ ""-rpc.trace"" ]\r\n```\r\n\r\n### Logs\r\n\r\n```\r\n[Info  - 10:07:51 PM] 2024/02/19 22:07:51 go info for /Users/hakim/go_tip/go/src\r\n(view type GoModView)\r\n(root dir /Users/hakim/go_tip/go/src)\r\n(go version go version devel go1.23-b91bad7819 Mon Jan 29 19:39:24 2024 +0000 darwin/amd64)\r\n(build flags: [])\r\n(go env: {GOOS:darwin GOARCH:amd64 GOCACHE:/Users/hakim/Library/Caches/go-build GOMODCACHE:/Users/hakim/go/pkg/mod GOPATH:/Users/hakim/go GOPRIVATE: GOFLAGS: GO111MODULE: GoVersion:23 GoVersionOutput:go version devel go1.23-b91bad7819 Mon Jan 29 19:39:24 2024 +0000 darwin/amd64\r\n GOWORK: GOPACKAGESDRIVER:})\r\n(env overlay: map[])\r\n...\r\n\r\n[Trace - 22:08:00.621 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":65,""character"":5},""end"":{""line"":65,""character"":5}},""rangeLength"":0,""text"":""X""}]}\r\n\r\n...\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/godebug.go"",""diagnostics"":[{""range"":{""start"":{""line"":59,""character"":6},""end"":{""line"":59,""character"":10}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2,""diagnostics"":[{""range"":{""start"":{""line"":399,""character"":3},""end"":{""line"":399,""character"":7}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":817,""character"":6},""end"":{""line"":817,""character"":10}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1693,""character"":61},""end"":{""line"":1693,""character"":65}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1802,""character"":16},""end"":{""line"":1802,""character"":20}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1926,""character"":7},""end"":{""line"":1926,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2034,""character"":24},""end"":{""line"":2034,""character"":28}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2372,""character"":7},""end"":{""line"":2372,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2961,""character"":8},""end"":{""line"":2961,""character"":12}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3093,""character"":9},""end"":{""line"":3093,""character"":13}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3093,""character"":32},""end"":{""line"":3093,""character"":36}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3165,""character"":7},""end"":{""line"":3165,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3167,""character"":61},""end"":{""line"":3167,""character"":65}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3227,""character"":8},""end"":{""line"":3227,""character"":12}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3237,""character"":25},""end"":{""line"":3237,""character"":29}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3379,""character"":7},""end"":{""line"":3379,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""d.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3497,""character"":22},""end"":{""line"":3497,""character"":26}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/test.go"",""diagnostics"":[{""range"":{""start"":{""line"":174,""character"":32},""end"":{""line"":174,""character"":36}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":230,""character"":4},""end"":{""line"":230,""character"":8}},""severity"":1,""code"":""MissingLitField"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingLitField""},""source"":""compiler"",""message"":""unknown field Name in struct literal of type PackagePublic""},{""range"":{""start"":{""line"":230,""character"":18},""end"":{""line"":230,""character"":22}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":273,""character"":3},""end"":{""line"":273,""character"":7}},""severity"":1,""code"":""MissingLitField"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingLitField""},""source"":""compiler"",""message"":""unknown field Name in struct literal of type PackagePublic""},{""range"":{""start"":{""line"":500,""character"":7},""end"":{""line"":500,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":684,""character"":18},""end"":{""line"":684,""character"":22}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""t.Package.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n....\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2,""diagnostics"":[]}\r\n\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/godebug.go"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/test.go"",""diagnostics"":[]}\r\n```\r\n\r\nAnd, the session info:\r\n```\r\nSession 1\r\nFrom: [Cache 1](http://127.0.0.1:52081/cache/1)\r\nViews\r\nID: 1\r\nType: GoModView\r\nRoot: file:///Users/hakim/go_tip/go/src\r\nFolder: src:file:///Users/hakim/go_tip/go/src\r\nID: 2\r\nType: GoModView\r\nRoot: file:///Users/hakim/go_tip/go/src/cmd\r\nFolder: src:file:///Users/hakim/go_tip/go/src\r\nOverlays\r\n[file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go](http://127.0.0.1:52081/file/1/099fab280c86b6e134a3bdd7366359e3b3372b5057354446bad0cb2f9c504df2)\r\n```\r\n",NeedsInvestigation|gopls|Tools,findleyr,"### gopls version\r\n\r\n```shell\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls (devel)\r\n    golang.org/x/tools/gopls@(devel)\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\r\n    golang.org/x/sync@v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\r\n    golang.org/x/telemetry@v0.0.0-20240209200032-7b892fcb8a78 h1:vcVnuftN4J4UKLRcgetjzfU9FjjgXUUYUc3JhFplgV4=\r\n    golang.org/x/text@v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\r\n    golang.org/x/tools@v0.17.0 => ../\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.6 h1:oFEHCKeID7to/3autwsWfnuv69j3NsfcXbvJKuIcep8=\r\n    mvdan.cc/gofumpt@v0.6.0 h1:G3QvahNDmpD+Aek/bNOLrFR2XC6ZAdo62dZu65gmwGo=\r\n    mvdan.cc/xurls/v2@v2.5.0 h1:lyBNOm8Wo71UknhUs4QTFUNNMyxy2JEIaKKo0RWOh+8=\r\ngo: devel go1.23-daa58db486 Fri Feb 16 11:59:07 2024 +0000\r\n```\r\n\r\n### go env\r\n\r\n```shell\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/hakim/Library/Caches/go-build'\r\nGOENV='/Users/hakim/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/hakim/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/hakim/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/hakim/go_tip/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN=''\r\nGOTOOLDIR='/Users/hakim/go_tip/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-b91bad7819 Mon Jan 29 19:39:24 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/hakim/go_tip/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n1. Opened VS Code from `src` dir of the Go project.\r\n1. Opened `src/cmd/go/internal/load/pkg.go` in the Go project.\r\n1. Change one of the exported field name of `PackagePublic` (but, not update the references). For example,\r\n\r\n```\r\ndiff --git a/src/cmd/go/internal/load/pkg.go b/src/cmd/go/internal/load/pkg.go\r\nindex 1549800afb..f9cc8f599d 100644\r\n--- a/src/cmd/go/internal/load/pkg.go\r\n+++ b/src/cmd/go/internal/load/pkg.go\r\n@@ -63,7 +63,7 @@ type PackagePublic struct {\r\n        Dir           string                `json:"",omitempty""` // directory containing package sources\r\n        ImportPath    string                `json:"",omitempty""` // import path of package in dir\r\n        ImportComment string                `json:"",omitempty""` // path in import comment on package statement\r\n-       Name          string                `json:"",omitempty""` // package name\r\n+       NameX         string                `json:"",omitempty""` // package name\r\n        Doc           string                `json:"",omitempty""` // package documentation string\r\n        Target        string                `json:"",omitempty""` // installed target for this package (may be executable)\r\n        Shlib         string                `json:"",omitempty""` // the shared library that contains this package (only set when -linkshared)\r\n```\r\n\r\n        \r\n\r\n### What did you see happen?\r\n\r\nExpected gopls to detect build breakage (""has no field or method Name"" error), across many packages.\r\n \r\n\r\n### What did you expect to see?\r\n\r\nGopls published diagnostics for some files and then soon empty diagnostics for all those files. This empty diagnostic message makes vscode (client) clears all diagnostics immediately.\r\n\r\n\r\n### Editor and settings\r\n\r\n```\r\n""gopls"": {},\r\n""go.languageServerFlags"": [ ""-rpc.trace"" ]\r\n```\r\n\r\n### Logs\r\n\r\n```\r\n[Info  - 10:07:51 PM] 2024/02/19 22:07:51 go info for /Users/hakim/go_tip/go/src\r\n(view type GoModView)\r\n(root dir /Users/hakim/go_tip/go/src)\r\n(go version go version devel go1.23-b91bad7819 Mon Jan 29 19:39:24 2024 +0000 darwin/amd64)\r\n(build flags: [])\r\n(go env: {GOOS:darwin GOARCH:amd64 GOCACHE:/Users/hakim/Library/Caches/go-build GOMODCACHE:/Users/hakim/go/pkg/mod GOPATH:/Users/hakim/go GOPRIVATE: GOFLAGS: GO111MODULE: GoVersion:23 GoVersionOutput:go version devel go1.23-b91bad7819 Mon Jan 29 19:39:24 2024 +0000 darwin/amd64\r\n GOWORK: GOPACKAGESDRIVER:})\r\n(env overlay: map[])\r\n...\r\n\r\n[Trace - 22:08:00.621 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":65,""character"":5},""end"":{""line"":65,""character"":5}},""rangeLength"":0,""text"":""X""}]}\r\n\r\n...\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/godebug.go"",""diagnostics"":[{""range"":{""start"":{""line"":59,""character"":6},""end"":{""line"":59,""character"":10}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2,""diagnostics"":[{""range"":{""start"":{""line"":399,""character"":3},""end"":{""line"":399,""character"":7}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":817,""character"":6},""end"":{""line"":817,""character"":10}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1693,""character"":61},""end"":{""line"":1693,""character"":65}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1802,""character"":16},""end"":{""line"":1802,""character"":20}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":1926,""character"":7},""end"":{""line"":1926,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2034,""character"":24},""end"":{""line"":2034,""character"":28}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2372,""character"":7},""end"":{""line"":2372,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":2961,""character"":8},""end"":{""line"":2961,""character"":12}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3093,""character"":9},""end"":{""line"":3093,""character"":13}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3093,""character"":32},""end"":{""line"":3093,""character"":36}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3165,""character"":7},""end"":{""line"":3165,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3167,""character"":61},""end"":{""line"":3167,""character"":65}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3227,""character"":8},""end"":{""line"":3227,""character"":12}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3237,""character"":25},""end"":{""line"":3237,""character"":29}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""pkg.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3379,""character"":7},""end"":{""line"":3379,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""d.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":3497,""character"":22},""end"":{""line"":3497,""character"":26}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n\r\n[Trace - 22:08:00.676 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/test.go"",""diagnostics"":[{""range"":{""start"":{""line"":174,""character"":32},""end"":{""line"":174,""character"":36}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":230,""character"":4},""end"":{""line"":230,""character"":8}},""severity"":1,""code"":""MissingLitField"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingLitField""},""source"":""compiler"",""message"":""unknown field Name in struct literal of type PackagePublic""},{""range"":{""start"":{""line"":230,""character"":18},""end"":{""line"":230,""character"":22}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":273,""character"":3},""end"":{""line"":273,""character"":7}},""severity"":1,""code"":""MissingLitField"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingLitField""},""source"":""compiler"",""message"":""unknown field Name in struct literal of type PackagePublic""},{""range"":{""start"":{""line"":500,""character"":7},""end"":{""line"":500,""character"":11}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""p.Name undefined (type *Package has no field or method Name)""},{""range"":{""start"":{""line"":684,""character"":18},""end"":{""line"":684,""character"":22}},""severity"":1,""code"":""MissingFieldOrMethod"",""codeDescription"":{""href"":""https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#MissingFieldOrMethod""},""source"":""compiler"",""message"":""t.Package.Name undefined (type *Package has no field or method Name)""}]}\r\n\r\n....\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go"",""version"":2,""diagnostics"":[]}\r\n\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/godebug.go"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 22:08:01.659 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/test.go"",""diagnostics"":[]}\r\n```\r\n\r\nAnd, the session info:\r\n```\r\nSession 1\r\nFrom: [Cache 1](http://127.0.0.1:52081/cache/1)\r\nViews\r\nID: 1\r\nType: GoModView\r\nRoot: file:///Users/hakim/go_tip/go/src\r\nFolder: src:file:///Users/hakim/go_tip/go/src\r\nID: 2\r\nType: GoModView\r\nRoot: file:///Users/hakim/go_tip/go/src/cmd\r\nFolder: src:file:///Users/hakim/go_tip/go/src\r\nOverlays\r\n[file:///Users/hakim/go_tip/go/src/cmd/go/internal/load/pkg.go](http://127.0.0.1:52081/file/1/099fab280c86b6e134a3bdd7366359e3b3372b5057354446bad0cb2f9c504df2)\r\n```\r\n",shell\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls (devel)\r\n    golang.org/x/tools/gopls@(devel)\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\r\n    golang.org/x/sync@v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\r\n    golang.org/x/telemetry@v0.0.0-20240209200032-7b892fcb8a78 h1:vcVnuftN4J4UKLRcgetjzfU9FjjgXUUYUc3JhFplgV4=\r\n    golang.org/x/text@v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\r\n    golang.org/x/tools@v0.17.0 => ../\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.6 h1:oFEHCKeID7to/3autwsWfnuv69j3NsfcXbvJKuIcep8=\r\n    mvdan.cc/gofumpt@v0.6.0 h1:G3QvahNDmpD+Aek/bNOLrFR2XC6ZAdo62dZu65gmwGo=\r\n    mvdan.cc/xurls/v2@v2.5.0 h1:lyBNOm8Wo71UknhUs4QTFUNNMyxy2JEIaKKo0RWOh+8=\r\ngo: devel go1.23-daa58db486 Fri Feb 16 11:59:07 2024 +0000\r\n
65790,"cmd/compile: compiler errors should quote user-provided names where they are used ""in sentence"" of an error message### Go version\r\n\r\ngo version devel go1.23-4a7f3ac8eb Sat Feb 10 02:14:22 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/cUZM3KyGHda\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n```\r\n# go.seankhliao.com/testrepo0548\r\n./main.go:8:13: syntax error: unexpected status at end of statement\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n""status"" quoted as a user provided token, separating it from compiler status.\r\n\r\nfrom #65788\r\n\r\ncc @golang/compiler ",NeedsInvestigation|compiler/runtime|BadErrorMessage,griesemer,"### Go version\r\n\r\ngo version devel go1.23-4a7f3ac8eb Sat Feb 10 02:14:22 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/user/.cache/go-build'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='cacheprog'\r\nGOFLAGS='-trimpath ""-ldflags=-s -w""'\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/user/.data/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/user/.data/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/user/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='path'\r\nGOTOOLDIR='/home/user/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-4a7f3ac8eb Sat Feb 10 02:14:22 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/home/user/tmp/testrepo0548/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2290460180=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/cUZM3KyGHda\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n)\r\n\r\nfunc main() {\r\n        int status\r\n        fmt.Println(status)\r\n}\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n# go.seankhliao.com/testrepo0548\r\n./main.go:8:13: syntax error: unexpected status at end of statement\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n""status"" quoted as a user provided token, separating it from compiler status.\r\n\r\nfrom #65788\r\n\r\ncc @golang/compiler ","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/user/.cache/go-build'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='cacheprog'\r\nGOFLAGS='-trimpath ""-ldflags=-s -w""'\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/user/.data/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/user/.data/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/user/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='path'\r\nGOTOOLDIR='/home/user/sdk/gotip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-4a7f3ac8eb Sat Feb 10 02:14:22 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/home/user/tmp/testrepo0548/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2290460180=/tmp/go-build -gno-record-gcc-switches'\r\n"
65783,"runtime: go1.22.0 test with -race will SIGSEGV or SIGBUS or Bad Pointer### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\ngo1.22.0 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1 -race\r\n\n\n### What did you see happen?\n\n=== RUN   TestPlanVisitor\r\nunexpected fault address 0xb01dfacedebac1e\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xb01dfacedebac1e pc=0xfa7e9de]\r\n\r\ngoroutine 9 gp=0xc000186e00 m=0 mp=0x11c19320 [running]:\r\nruntime.throw({0x108da285?, 0x20?})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/panic.go:1023 +0x5c fp=0xc0000ebac8 sp=0xc0000eba98 pc=0xf9647fc\r\nruntime.sigpanic()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/signal_unix.go:895 +0x285 fp=0xc0000ebb28 sp=0xc0000ebac8 pc=0xf97ec45\r\nfmt.(*pp).printArg(0xc000697860, {0xcccccccccccccccc, 0x108d70ed}, 0x76)\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:707 +0x11e fp=0xc0000ebbb8 sp=0xc0000ebb28 pc=0xfa7e9de\r\nfmt.(*pp).doPrintf(0xc000697860, {0x108fa625, 0x1e}, {0xc0000ebd90, 0x1, 0x1})\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:1075 +0x593 fp=0xc0000ebcf0 sp=0xc0000ebbb8 pc=0xfa83bb3\r\nfmt.Sprintf({0x108fa625, 0x1e}, {0xc0000ebd90, 0x1, 0x1})\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:239 +0x5d fp=0xc0000ebd48 sp=0xc0000ebcf0 pc=0xfa79e1d\r\ngithub.com/stretchr/testify/assert.NoError({0x10e94ae0, 0xc0005dc4e0}, {0xf9a5301, 0x108d70ed}, {0x0, 0x0, 0x0})\r\n\t/Users/timmy/go/pkg/mod/github.com/stretchr/testify@v1.8.4/assert/assertions.go:1495 +0x11a fp=0xc0000ebdb0 sp=0xc0000ebd48 pc=0x106eaf9a\r\ngithub.com/stretchr/testify/require.NoError({0x10e983f0, 0xc0005dc4e0}, {0xf9a5301, 0x108d70ed}, {0x0, 0x0, 0x0})\r\n\t/Users/timmy/go/pkg/mod/github.com/stretchr/testify@v1.8.4/require/require.go:1357 +0xc5 fp=0xc0000ebdf8 sp=0xc0000ebdb0 pc=0x106ebc45\r\ngithub.com/timmy21/test/planx/planx_test.TestPlanVisitor(0xc0005dc4e0)\r\n\t/Users/timmy/code/test/planx/planx_test.go:60 +0xade fp=0xc0000ebee8 sp=0xc0000ebdf8 pc=0x108d711e\r\ntesting.tRunner(0xc0005dc4e0, 0x10e8e2b8)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1689 +0x21f fp=0xc0000ebfb0 sp=0xc0000ebee8 pc=0xfacb35f\r\ntesting.(*T).Run.gowrap1()\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1742 +0x45 fp=0xc0000ebfe0 sp=0xc0000ebfb0 pc=0xfacd0a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000ebfe8 sp=0xc0000ebfe0 pc=0xf9a1ee1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1742 +0x826\r\n\r\ngoroutine 1 gp=0xc0000061c0 m=nil [chan receive]:\r\nruntime.gopark(0x18?, 0x11c15c80?, 0x18?, 0x0?, 0x12c8d1a8?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0005c7710 sp=0xc0005c76f0 pc=0xf9676ce\r\nruntime.chanrecv(0xc0006920e0, 0xc0005c77f7, 0x1)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/chan.go:583 +0x36d fp=0xc0005c7788 sp=0xc0005c7710 pc=0xf93166d\r\nruntime.chanrecv1(0x11c15c80?, 0x10d2d4a0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/chan.go:442 +0x12 fp=0xc0005c77b0 sp=0xc0005c7788 pc=0xf9312d2\r\ntesting.(*T).Run(0xc0005dc340, {0x108f47d3, 0x19}, 0x10e8e2b8)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1750 +0x851 fp=0xc0005c78d0 sp=0xc0005c77b0 pc=0xfacce11\r\ntesting.runTests.func1(0xc0005dc340)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2161 +0x86 fp=0xc0005c7920 sp=0xc0005c78d0 pc=0xfad0fa6\r\ntesting.tRunner(0xc0005dc340, 0xc0005c7b10)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1689 +0x21f fp=0xc0005c79e8 sp=0xc0005c7920 pc=0xfacb35f\r\ntesting.runTests(0xc0000125b8, {0x11bcd900, 0x4, 0x4}, {0xc0005c7bb8?, 0xc0005c7c00?, 0x11c16fa0?})\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2159 +0x8bf fp=0xc0005c7b40 sp=0xc0005c79e8 pc=0xfad0dff\r\ntesting.(*M).Run(0xc0005de1e0)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2027 +0xf18 fp=0xc0005c7ec8 sp=0xc0005c7b40 pc=0xface3d8\r\nmain.main()\r\n\t_testmain.go:55 +0x2be fp=0xc0005c7f50 sp=0xc0005c7ec8 pc=0x108d89fe\r\nruntime.main()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:271 +0x29d fp=0xc0005c7fe0 sp=0xc0005c7f50 pc=0xf96725d\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0005c7fe8 sp=0xc0005c7fe0 pc=0xf9a1ee1\r\n\r\ngoroutine 2 gp=0xc000006c40 m=nil [force gc (idle)]:\r\nruntime.gopark(0x11524110?, 0x11c19320?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000727a8 sp=0xc000072788 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:326 +0xb3 fp=0xc0000727e0 sp=0xc0000727a8 pc=0xf967533\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000727e8 sp=0xc0000727e0 pc=0xf9a1ee1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:314 +0x1a\r\n\r\ngoroutine 3 gp=0xc000007500 m=nil [GC sweep wait]:\r\nruntime.gopark(0x1?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc000088f80 sp=0xc000088f60 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.bgsweep(0xc00007e000)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcsweep.go:318 +0xdf fp=0xc000088fc8 sp=0xc000088f80 pc=0xf95199f\r\nruntime.gcenable.gowrap1()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:203 +0x25 fp=0xc000088fe0 sp=0xc000088fc8 pc=0xf9462c5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000088fe8 sp=0xc000088fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:203 +0x66\r\n\r\ngoroutine 4 gp=0xc0000076c0 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x10000?, 0x10c9c4e0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc00008ef78 sp=0xc00008ef58 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x11c17140)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc00008efa8 sp=0xc00008ef78 pc=0xf94f369\r\nruntime.bgscavenge(0xc00007e000)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc00008efc8 sp=0xc00008efa8 pc=0xf94f8f9\r\nruntime.gcenable.gowrap2()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:204 +0x25 fp=0xc00008efe0 sp=0xc00008efc8 pc=0xf946265\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc00008efe8 sp=0xc00008efe0 pc=0xf9a1ee1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:204 +0xa5\r\n\r\ngoroutine 5 gp=0xc000007880 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc000089e20 sp=0xc000089e00 pc=0xf9676ce\r\nruntime.runfinq()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mfinal.go:194 +0x145 fp=0xc000089fe0 sp=0xc000089e20 pc=0xf945305\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000089fe8 sp=0xc000089fe0 pc=0xf9a1ee1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mfinal.go:164 +0x3d\r\n\r\ngoroutine 6 gp=0xc000332fc0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b7f50 sp=0xc0000b7f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b7fe0 sp=0xc0000b7f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b7fe8 sp=0xc0000b7fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 18 gp=0xc000186380 m=nil [GC worker (idle)]:\r\nruntime.gopark(0xf9396e5?, 0x48?, 0xe0?, 0x74?, 0x1?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b6f50 sp=0xc0000b6f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b6fe0 sp=0xc0000b6f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b6fe8 sp=0xc0000b6fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 7 gp=0xc000333180 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557dfca0ae?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b5f50 sp=0xc0000b5f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b5fe0 sp=0xc0000b5f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b5fe8 sp=0xc0000b5fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 19 gp=0xc000186540 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df801e9?, 0x10c9c4e0?, 0x1?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b4f50 sp=0xc0000b4f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b4fe0 sp=0xc0000b4f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b4fe8 sp=0xc0000b4fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 20 gp=0xc000186700 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df8f189?, 0x3?, 0xe0?, 0xb0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b3f50 sp=0xc0000b3f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b3fe0 sp=0xc0000b3f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b3fe8 sp=0xc0000b3fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 8 gp=0xc000333340 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df8f478?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b2f50 sp=0xc0000b2f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b2fe0 sp=0xc0000b2f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b2fe8 sp=0xc0000b2fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 21 gp=0xc0001868c0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557e083f7b?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b1f50 sp=0xc0000b1f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b1fe0 sp=0xc0000b1f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b1fe8 sp=0xc0000b1fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 34 gp=0xc0000a4380 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df97755?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b0f50 sp=0xc0000b0f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b0fe0 sp=0xc0000b0f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b0fe8 sp=0xc0000b0fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\nFAIL\tgithub.com/timmy21/test/planx\t1.113s\r\nFAIL\n\n### What did you expect to see?\n\ntest passed used bellow command:\r\ngo1.21.7 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1 -race\r\ngo1.22.0 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1",compiler/runtime,randall77,"### Go version\n\ngo version go1.22.0 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/timmy/Library/Caches/go-build'\r\nGOENV='/Users/timmy/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/timmy/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/timmy/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/timmy/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/timmy/sdk/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/timmy/code/test/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/pv/rs024ry56j3cqlcqgjnm48l00000gn/T/go-build2295311270=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\ngo1.22.0 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1 -race\r\n\n\n### What did you see happen?\n\n=== RUN   TestPlanVisitor\r\nunexpected fault address 0xb01dfacedebac1e\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xb01dfacedebac1e pc=0xfa7e9de]\r\n\r\ngoroutine 9 gp=0xc000186e00 m=0 mp=0x11c19320 [running]:\r\nruntime.throw({0x108da285?, 0x20?})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/panic.go:1023 +0x5c fp=0xc0000ebac8 sp=0xc0000eba98 pc=0xf9647fc\r\nruntime.sigpanic()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/signal_unix.go:895 +0x285 fp=0xc0000ebb28 sp=0xc0000ebac8 pc=0xf97ec45\r\nfmt.(*pp).printArg(0xc000697860, {0xcccccccccccccccc, 0x108d70ed}, 0x76)\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:707 +0x11e fp=0xc0000ebbb8 sp=0xc0000ebb28 pc=0xfa7e9de\r\nfmt.(*pp).doPrintf(0xc000697860, {0x108fa625, 0x1e}, {0xc0000ebd90, 0x1, 0x1})\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:1075 +0x593 fp=0xc0000ebcf0 sp=0xc0000ebbb8 pc=0xfa83bb3\r\nfmt.Sprintf({0x108fa625, 0x1e}, {0xc0000ebd90, 0x1, 0x1})\r\n\t/Users/timmy/sdk/go1.22.0/src/fmt/print.go:239 +0x5d fp=0xc0000ebd48 sp=0xc0000ebcf0 pc=0xfa79e1d\r\ngithub.com/stretchr/testify/assert.NoError({0x10e94ae0, 0xc0005dc4e0}, {0xf9a5301, 0x108d70ed}, {0x0, 0x0, 0x0})\r\n\t/Users/timmy/go/pkg/mod/github.com/stretchr/testify@v1.8.4/assert/assertions.go:1495 +0x11a fp=0xc0000ebdb0 sp=0xc0000ebd48 pc=0x106eaf9a\r\ngithub.com/stretchr/testify/require.NoError({0x10e983f0, 0xc0005dc4e0}, {0xf9a5301, 0x108d70ed}, {0x0, 0x0, 0x0})\r\n\t/Users/timmy/go/pkg/mod/github.com/stretchr/testify@v1.8.4/require/require.go:1357 +0xc5 fp=0xc0000ebdf8 sp=0xc0000ebdb0 pc=0x106ebc45\r\ngithub.com/timmy21/test/planx/planx_test.TestPlanVisitor(0xc0005dc4e0)\r\n\t/Users/timmy/code/test/planx/planx_test.go:60 +0xade fp=0xc0000ebee8 sp=0xc0000ebdf8 pc=0x108d711e\r\ntesting.tRunner(0xc0005dc4e0, 0x10e8e2b8)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1689 +0x21f fp=0xc0000ebfb0 sp=0xc0000ebee8 pc=0xfacb35f\r\ntesting.(*T).Run.gowrap1()\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1742 +0x45 fp=0xc0000ebfe0 sp=0xc0000ebfb0 pc=0xfacd0a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000ebfe8 sp=0xc0000ebfe0 pc=0xf9a1ee1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1742 +0x826\r\n\r\ngoroutine 1 gp=0xc0000061c0 m=nil [chan receive]:\r\nruntime.gopark(0x18?, 0x11c15c80?, 0x18?, 0x0?, 0x12c8d1a8?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0005c7710 sp=0xc0005c76f0 pc=0xf9676ce\r\nruntime.chanrecv(0xc0006920e0, 0xc0005c77f7, 0x1)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/chan.go:583 +0x36d fp=0xc0005c7788 sp=0xc0005c7710 pc=0xf93166d\r\nruntime.chanrecv1(0x11c15c80?, 0x10d2d4a0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/chan.go:442 +0x12 fp=0xc0005c77b0 sp=0xc0005c7788 pc=0xf9312d2\r\ntesting.(*T).Run(0xc0005dc340, {0x108f47d3, 0x19}, 0x10e8e2b8)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1750 +0x851 fp=0xc0005c78d0 sp=0xc0005c77b0 pc=0xfacce11\r\ntesting.runTests.func1(0xc0005dc340)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2161 +0x86 fp=0xc0005c7920 sp=0xc0005c78d0 pc=0xfad0fa6\r\ntesting.tRunner(0xc0005dc340, 0xc0005c7b10)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:1689 +0x21f fp=0xc0005c79e8 sp=0xc0005c7920 pc=0xfacb35f\r\ntesting.runTests(0xc0000125b8, {0x11bcd900, 0x4, 0x4}, {0xc0005c7bb8?, 0xc0005c7c00?, 0x11c16fa0?})\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2159 +0x8bf fp=0xc0005c7b40 sp=0xc0005c79e8 pc=0xfad0dff\r\ntesting.(*M).Run(0xc0005de1e0)\r\n\t/Users/timmy/sdk/go1.22.0/src/testing/testing.go:2027 +0xf18 fp=0xc0005c7ec8 sp=0xc0005c7b40 pc=0xface3d8\r\nmain.main()\r\n\t_testmain.go:55 +0x2be fp=0xc0005c7f50 sp=0xc0005c7ec8 pc=0x108d89fe\r\nruntime.main()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:271 +0x29d fp=0xc0005c7fe0 sp=0xc0005c7f50 pc=0xf96725d\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0005c7fe8 sp=0xc0005c7fe0 pc=0xf9a1ee1\r\n\r\ngoroutine 2 gp=0xc000006c40 m=nil [force gc (idle)]:\r\nruntime.gopark(0x11524110?, 0x11c19320?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000727a8 sp=0xc000072788 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:326 +0xb3 fp=0xc0000727e0 sp=0xc0000727a8 pc=0xf967533\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000727e8 sp=0xc0000727e0 pc=0xf9a1ee1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:314 +0x1a\r\n\r\ngoroutine 3 gp=0xc000007500 m=nil [GC sweep wait]:\r\nruntime.gopark(0x1?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc000088f80 sp=0xc000088f60 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.bgsweep(0xc00007e000)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcsweep.go:318 +0xdf fp=0xc000088fc8 sp=0xc000088f80 pc=0xf95199f\r\nruntime.gcenable.gowrap1()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:203 +0x25 fp=0xc000088fe0 sp=0xc000088fc8 pc=0xf9462c5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000088fe8 sp=0xc000088fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:203 +0x66\r\n\r\ngoroutine 4 gp=0xc0000076c0 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x10000?, 0x10c9c4e0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc00008ef78 sp=0xc00008ef58 pc=0xf9676ce\r\nruntime.goparkunlock(...)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x11c17140)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc00008efa8 sp=0xc00008ef78 pc=0xf94f369\r\nruntime.bgscavenge(0xc00007e000)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc00008efc8 sp=0xc00008efa8 pc=0xf94f8f9\r\nruntime.gcenable.gowrap2()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:204 +0x25 fp=0xc00008efe0 sp=0xc00008efc8 pc=0xf946265\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc00008efe8 sp=0xc00008efe0 pc=0xf9a1ee1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:204 +0xa5\r\n\r\ngoroutine 5 gp=0xc000007880 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc000089e20 sp=0xc000089e00 pc=0xf9676ce\r\nruntime.runfinq()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mfinal.go:194 +0x145 fp=0xc000089fe0 sp=0xc000089e20 pc=0xf945305\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000089fe8 sp=0xc000089fe0 pc=0xf9a1ee1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mfinal.go:164 +0x3d\r\n\r\ngoroutine 6 gp=0xc000332fc0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b7f50 sp=0xc0000b7f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b7fe0 sp=0xc0000b7f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b7fe8 sp=0xc0000b7fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 18 gp=0xc000186380 m=nil [GC worker (idle)]:\r\nruntime.gopark(0xf9396e5?, 0x48?, 0xe0?, 0x74?, 0x1?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b6f50 sp=0xc0000b6f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b6fe0 sp=0xc0000b6f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b6fe8 sp=0xc0000b6fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 7 gp=0xc000333180 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557dfca0ae?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b5f50 sp=0xc0000b5f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b5fe0 sp=0xc0000b5f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b5fe8 sp=0xc0000b5fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 19 gp=0xc000186540 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df801e9?, 0x10c9c4e0?, 0x1?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b4f50 sp=0xc0000b4f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b4fe0 sp=0xc0000b4f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b4fe8 sp=0xc0000b4fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 20 gp=0xc000186700 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df8f189?, 0x3?, 0xe0?, 0xb0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b3f50 sp=0xc0000b3f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b3fe0 sp=0xc0000b3f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b3fe8 sp=0xc0000b3fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 8 gp=0xc000333340 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df8f478?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b2f50 sp=0xc0000b2f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b2fe0 sp=0xc0000b2f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b2fe8 sp=0xc0000b2fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 21 gp=0xc0001868c0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557e083f7b?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b1f50 sp=0xc0000b1f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b1fe0 sp=0xc0000b1f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b1fe8 sp=0xc0000b1fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\n\r\ngoroutine 34 gp=0xc0000a4380 m=nil [GC worker (idle)]:\r\nruntime.gopark(0x7e557df97755?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/proc.go:402 +0xce fp=0xc0000b0f50 sp=0xc0000b0f30 pc=0xf9676ce\r\nruntime.gcBgMarkWorker()\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1310 +0xe5 fp=0xc0000b0fe0 sp=0xc0000b0f50 pc=0xf9483a5\r\nruntime.goexit({})\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000b0fe8 sp=0xc0000b0fe0 pc=0xf9a1ee1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\r\n\t/Users/timmy/sdk/go1.22.0/src/runtime/mgc.go:1234 +0x1c\r\nFAIL\tgithub.com/timmy21/test/planx\t1.113s\r\nFAIL\n\n### What did you expect to see?\n\ntest passed used bellow command:\r\ngo1.21.7 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1 -race\r\ngo1.22.0 test -timeout 30s -run ^TestPlanVisitor$ github.com/timmy21/test/planx -v -count 1","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/timmy/Library/Caches/go-build'\r\nGOENV='/Users/timmy/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/timmy/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/timmy/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/timmy/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/timmy/sdk/go1.22.0/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/timmy/code/test/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/pv/rs024ry56j3cqlcqgjnm48l00000gn/T/go-build2295311270=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65778,"cmd/compile: unreachable panic with GODEBUG=gotypesalias=1### Go version\n\ngo version devel go1.23-86a32d6d9c 2024-02-17 06:03:15 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nClone https://github.com/mvdan/garble-fork at branch go-alias-panic (9e9c6235febfa5a6ea9d87569ea67d4cca0721a9).\r\n\r\n```\r\n$ export GODEBUG=gotypesalias=1\r\n$ go build\r\n```\n\n### What did you see happen?\n\n```\r\n# runtime\r\n../../tip/src/runtime/runtime2.go:993:6: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../../tip/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x12a640?, 0xc0?}, {0xdf38ce, 0x10}, {0x0, 0x0, 0x0})\r\n\t../../tip/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../../tip/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t../../tip/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t../../tip/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:430\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc00012a280, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x6c, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xffffffff?, {0x1591860?, 0x13c400000005?, 0xbcdc4e?}}, 0xc002141520, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000127e00)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127e00)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127cc0, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127cc0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:516 +0x1af\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127b80, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127b80)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:509 +0x29f\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127900, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000127900)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127900)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127680, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x493, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:805 +0x53c\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xffffffff?, {0x1591860?, 0x0?, 0xc0020e0840?}}, 0xc002141450, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc0001272c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc0001272c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000126f00, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x8c3, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:830 +0xb27\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xf5d358?, {0x1591860?, 0x45ff09?, 0x10?}}, 0x0, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc0000ac3c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).pkgInitOrder(0xc0000ac3c0, 0xc000002180)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:3253 +0x5bb\r\ncmd/compile/internal/noder.(*reader).pkgInit(0xc0000ac3c0, 0xc00009c320?, 0xc000002180)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:3224 +0xd6\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0001ae588?, 0xd312c0?, 0x0?})\r\n\t../../tip/src/cmd/compile/internal/noder/unified.go:188 +0x17c\r\ncmd/compile/internal/noder.LoadPackage({0xc000022d38, 0xa1, 0xac})\r\n\t../../tip/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe231f0)\r\n\t../../tip/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t../../tip/src/cmd/compile/main.go:57 +0xf9\r\n```\n\n### What did you expect to see?\n\nNo failure, just like without `GODEBUG`.\r\n\r\nI can reproduce by building other modules as well, but I'm just showing one here with a known ""bad"" commit.\r\n\r\nGo 1.22.0 also fails, just with less information:\r\n\r\n```\r\n$ go version\r\ngo version go1.22.0 linux/amd64\r\n$ go build\r\n# mvdan.cc/garble\r\n<unknown line number>: internal compiler error: panic: unreachable\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n\r\ncc @findleyr @adonovan @griesemer ",NeedsFix|compiler/runtime,mdempsky|cuonglm,"### Go version\n\ngo version devel go1.23-86a32d6d9c 2024-02-17 06:03:15 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mvdan/.cache/go-build'\r\nGOENV='/home/mvdan/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mvdan/go/pkg/mod'\r\nGONOPROXY='github.com/cue-unity'\r\nGONOSUMDB='github.com/cue-unity'\r\nGOOS='linux'\r\nGOPATH='/home/mvdan/go'\r\nGOPRIVATE='github.com/cue-unity'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mvdan/tip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mvdan/tip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-86a32d6d9c 2024-02-17 06:03:15 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build938505312=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nClone https://github.com/mvdan/garble-fork at branch go-alias-panic (9e9c6235febfa5a6ea9d87569ea67d4cca0721a9).\r\n\r\n```\r\n$ export GODEBUG=gotypesalias=1\r\n$ go build\r\n```\n\n### What did you see happen?\n\n```\r\n# runtime\r\n../../tip/src/runtime/runtime2.go:993:6: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../../tip/src/runtime/debug/stack.go:26 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x12a640?, 0xc0?}, {0xdf38ce, 0x10}, {0x0, 0x0, 0x0})\r\n\t../../tip/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../../tip/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t../../tip/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t../../tip/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:430\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc00012a280, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x6c, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:744 +0xca6\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xffffffff?, {0x1591860?, 0x13c400000005?, 0xbcdc4e?}}, 0xc002141520, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc000127e00)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127e00)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127cc0, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127cc0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:516 +0x1af\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127b80, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127b80)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:509 +0x29f\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127900, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*reader).structType(0xc000127900)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:589 +0x90\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc000127900)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:522 +0x35a\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000127680, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x493, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:805 +0x53c\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xffffffff?, {0x1591860?, 0x0?, 0xc0020e0840?}}, 0xc002141450, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc0001272c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).doTyp(0xc0001272c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:500 +0x72\r\ncmd/compile/internal/noder.(*pkgReader).typIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:429\r\ncmd/compile/internal/noder.(*reader).typWrapped(0xc000126f00, 0x1)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:388 +0x4e\r\ncmd/compile/internal/noder.(*reader).typ(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:382\r\ncmd/compile/internal/noder.(*pkgReader).objIdxMayFail(0xc00204b880, 0x8c3, {0x0, 0x0, 0x0}, {0x1591860, 0x0, 0x0}, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:830 +0xb27\r\ncmd/compile/internal/noder.(*pkgReader).objIdx(...)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:670\r\ncmd/compile/internal/noder.(*pkgReader).objInstIdx(0xc00204b880, {0xf5d358?, {0x1591860?, 0x45ff09?, 0x10?}}, 0x0, 0x0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:662 +0xe7\r\ncmd/compile/internal/noder.(*reader).obj(0xc0000ac3c0)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:634 +0x46\r\ncmd/compile/internal/noder.(*reader).pkgInitOrder(0xc0000ac3c0, 0xc000002180)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:3253 +0x5bb\r\ncmd/compile/internal/noder.(*reader).pkgInit(0xc0000ac3c0, 0xc00009c320?, 0xc000002180)\r\n\t../../tip/src/cmd/compile/internal/noder/reader.go:3224 +0xd6\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc0001ae588?, 0xd312c0?, 0x0?})\r\n\t../../tip/src/cmd/compile/internal/noder/unified.go:188 +0x17c\r\ncmd/compile/internal/noder.LoadPackage({0xc000022d38, 0xa1, 0xac})\r\n\t../../tip/src/cmd/compile/internal/noder/noder.go:77 +0x43a\r\ncmd/compile/internal/gc.Main(0xe231f0)\r\n\t../../tip/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t../../tip/src/cmd/compile/main.go:57 +0xf9\r\n```\n\n### What did you expect to see?\n\nNo failure, just like without `GODEBUG`.\r\n\r\nI can reproduce by building other modules as well, but I'm just showing one here with a known ""bad"" commit.\r\n\r\nGo 1.22.0 also fails, just with less information:\r\n\r\n```\r\n$ go version\r\ngo version go1.22.0 linux/amd64\r\n$ go build\r\n# mvdan.cc/garble\r\n<unknown line number>: internal compiler error: panic: unreachable\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n\r\ncc @findleyr @adonovan @griesemer ","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mvdan/.cache/go-build'\r\nGOENV='/home/mvdan/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mvdan/go/pkg/mod'\r\nGONOPROXY='github.com/cue-unity'\r\nGONOSUMDB='github.com/cue-unity'\r\nGOOS='linux'\r\nGOPATH='/home/mvdan/go'\r\nGOPRIVATE='github.com/cue-unity'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mvdan/tip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mvdan/tip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-86a32d6d9c 2024-02-17 06:03:15 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build938505312=/tmp/go-build -gno-record-gcc-switches'\n"
65772,"go/types: add Func.Signature method### Proposal Details\r\n\r\nThe expression `f.Type().(*types.Signature)`, where f is a `*types.Func`, appears over a hundred times in x/tools. Each time I read it, I am momentarily compelled to prove a little theorem that the type assertion is sound.\r\n\r\nFor brevity, convenience, and simplicity, I propose that we add this method to `go/types`:\r\n\r\n",Proposal|Proposal-Accepted,griesemer|findleyr,"### Proposal Details\r\n\r\nThe expression `f.Type().(*types.Signature)`, where f is a `*types.Func`, appears over a hundred times in x/tools. Each time I read it, I am momentarily compelled to prove a little theorem that the type assertion is sound.\r\n\r\nFor brevity, convenience, and simplicity, I propose that we add this method to `go/types`:\r\n\r\n```go\r\n// Signature returns the signature (type) of the function or method.\r\nfunc (f *Func) Signature() *Signature {\r\n    return f.Type().(*types.Signature)\r\n}\r\n```",go\r\n// Signature returns the signature (type) of the function or method.\r\nfunc (f *Func) Signature() *Signature {\r\n    return f.Type().(*types.Signature)\r\n}\r\n
65754,"x/tools/go/cfg: add CFG.Dot method### Proposal Details\n\nThe [golang.org/x/tools/go/cfg.CFG](https://pkg.go.dev/golang.org/x/tools/go/cfg#CFG) type, which represents a syntactic control-flow graph, has an unexported  method that renders the graph in AT&T graphviz format, which I have found useful for debugging.\r\n\r\nI propose to export it:\r\n\r\n\r\n",Proposal|Proposal-Accepted,adonovan,"### Proposal Details\n\nThe [golang.org/x/tools/go/cfg.CFG](https://pkg.go.dev/golang.org/x/tools/go/cfg#CFG) type, which represents a syntactic control-flow graph, has an unexported  method that renders the graph in AT&T graphviz format, which I have found useful for debugging.\r\n\r\nI propose to export it:\r\n\r\n```go\r\n// Graphviz returns the control-flow graph in AT&T GraphViz form.\r\n// Use a command such as 'dot -Tsvg' to render it in a form viewable in a browser.\r\n// This method is provided as a debugging aid; the details of the\r\n// output are unspecified and may change. \r\nfunc (g *CFG) Graphviz(fset *token.FileSet) string\r\n```\r\n",go\r\n// Graphviz returns the control-flow graph in AT&T GraphViz form.\r\n// Use a command such as 'dot -Tsvg' to render it in a form viewable in a browser.\r\n// This method is provided as a debugging aid; the details of the\r\n// output are unspecified and may change. \r\nfunc (g *CFG) Graphviz(fset *token.FileSet) string\r\n
65753,"fmt: inconsistent pointer formatting with b/d/o/x/X verbs### Go version\r\n\r\nPlayground Go 1.22\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/ivQo1wTK4NM\r\n\r\n### What did you see happen?\r\n\r\n0xc000014070\r\n&{%!b(string=baz)}\r\n&{%!d(string=baz)}\r\n&{%!o(string=baz)}\r\n&{62617a}\r\n&{62617A}\r\n\r\n\r\n### What did you expect to see?\r\n\r\nhttps://pkg.go.dev/fmt#hdr-Printing for go1.22.0 states:\r\n\r\n> The %b, %d, %o, %x and %X verbs also work with pointers,\r\nformatting the value exactly as if it were an integer.\r\n\r\nEither the documentation should be fixed or the behavior of fmt.",NeedsInvestigation,robpike,"### Go version\r\n\r\nPlayground Go 1.22\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nPlayground 1.22 go env\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/ivQo1wTK4NM\r\n\r\n### What did you see happen?\r\n\r\n0xc000014070\r\n&{%!b(string=baz)}\r\n&{%!d(string=baz)}\r\n&{%!o(string=baz)}\r\n&{62617a}\r\n&{62617A}\r\n\r\n\r\n### What did you expect to see?\r\n\r\nhttps://pkg.go.dev/fmt#hdr-Printing for go1.22.0 states:\r\n\r\n> The %b, %d, %o, %x and %X verbs also work with pointers,\r\nformatting the value exactly as if it were an integer.\r\n\r\nEither the documentation should be fixed or the behavior of fmt.",shell\r\nPlayground 1.22 go env\r\n
65740,"x/tools/go/analysis/passes/slog: False negitive when `error` type used as key.### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI wrote code that assumed `slog` methods worked like `fmt.Printf`, instead of talking `Attr`/key-value pairs:\r\n\r\n\r\n\r\n[playground](https://go.dev/play/p/JV5EVFyZ_1s)\r\n\r\nRunning `go vet -slog ./main.go`\n\n### What did you see happen?\n\n`go vet -slog` reports no errors, but the key isn't present.\r\n\r\n```\r\n$ go vet -slog ./main.go\r\n$ go run ./main.go\r\n2024/02/16 00:50:48 ERROR The error is %v !BADKEY=<nil>\r\n```\n\n### What did you expect to see?\n\n`go vet -slog ./main.go` should report an error like `./main.go:7:32: slog.Error arg ""x"" should be a string or a slog.Attr (possible missing key or value)`.\r\n\r\nInterestingly, if you change the type of `x` to `int`, the error fires as you'd expect.\r\n\r\n\r\n\r\n```\r\n$ go vet -slog ./main.go\r\n# command-line-arguments\r\n# [command-line-arguments]\r\n./main.go:7:32: slog.Error arg ""x"" should be a string or a slog.Attr (possible missing key or value)\r\n$ go run ./main.go\r\n2024/02/16 00:52:58 ERROR The error is %v !BADKEY=0\r\n``` ",NeedsInvestigation|Tools,jba,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/alona/.cache/go-build'\r\nGOENV='/home/alona/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/alona/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/alona/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/alona/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/alona/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/goo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3366501523=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI wrote code that assumed `slog` methods worked like `fmt.Printf`, instead of talking `Attr`/key-value pairs:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""log/slog""\r\n\r\nfunc main() {\r\n        var x error\r\n        slog.Error(""The error is %v"", x)\r\n}\r\n```\r\n\r\n[playground](https://go.dev/play/p/JV5EVFyZ_1s)\r\n\r\nRunning `go vet -slog ./main.go`\n\n### What did you see happen?\n\n`go vet -slog` reports no errors, but the key isn't present.\r\n\r\n```\r\n$ go vet -slog ./main.go\r\n$ go run ./main.go\r\n2024/02/16 00:50:48 ERROR The error is %v !BADKEY=<nil>\r\n```\n\n### What did you expect to see?\n\n`go vet -slog ./main.go` should report an error like `./main.go:7:32: slog.Error arg ""x"" should be a string or a slog.Attr (possible missing key or value)`.\r\n\r\nInterestingly, if you change the type of `x` to `int`, the error fires as you'd expect.\r\n\r\n```go\r\npackage main\r\n\r\nimport ""log/slog""\r\n\r\nfunc main() {\r\n        var x int\r\n        slog.Error(""The error is %v"", x)\r\n}\r\n```\r\n\r\n```\r\n$ go vet -slog ./main.go\r\n# command-line-arguments\r\n# [command-line-arguments]\r\n./main.go:7:32: slog.Error arg ""x"" should be a string or a slog.Attr (possible missing key or value)\r\n$ go run ./main.go\r\n2024/02/16 00:52:58 ERROR The error is %v !BADKEY=0\r\n``` ","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/alona/.cache/go-build'\r\nGOENV='/home/alona/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/alona/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/alona/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/alona/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/alona/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/goo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3366501523=/tmp/go-build -gno-record-gcc-switches'\n"
65714,"cmd/compile: inconsistent typechecking with self-referential type parameter constraints This issue is similar to #65711. However, the behaviour of the compiler is different, so I am opening a separate issue.\r\n\r\n### What did you do?\r\n\r\nWhile working on formal methods (in the style of [Featherweight Go](https://dl.acm.org/doi/10.1145/3428217)) and a prototype type checker and interpreter for https://github.com/golang/go/issues/65555, I came across a pattern of programs that either pass or fail type checking, depending on the order of the type declarations.\r\n\r\nE.g. the following program passes the type checker (and the program successfully compiles), and it is possible to implement and use the `Bar` interface ([Go playground](https://go.dev/play/p/eGRvr4GJPBG)):\r\n\r\n\r\n\r\n(note: this program looks silly because it is part of my interpreter's testing suite, explicitly meant to test various edge cases in the type checker)\r\n\r\nHowever, if we swap the order of the type declaration, the compiler rejects the program ([playground](https://go.dev/play/p/4ss9CVwBJnA)):\r\n\r\n\r\n\r\nOutput of `go build` for the latter example:\r\n\r\n```\r\n./prog.go:3:6: invalid recursive type Bar\r\n\t./prog.go:3:6: Bar refers to\r\n\t./prog.go:7:6: Foo refers to\r\n\t./prog.go:3:6: Bar\r\n```\r\n\r\nAs far as I'm aware, the order of type declarations should not matter in a Go program.\r\n\r\nFrom the [Go spec](https://go.dev/ref/spec#Type_parameter_declarations), it is not clear to me, which is the correct behaviour. The spec says:\r\n\r\n> Within a type parameter list of a generic type T, a type constraint may not (directly, or indirectly through the type parameter list of another generic type) refer to T. \r\n\r\nand provides an example:\r\n\r\n\r\n\r\n`Foo` neither refers to itself directly via its own type parameter list (i.e. the `Bar` interface is not inlined in the type parameter list), nor is it referred through ""the type parameter list of another generic type"" (`Foo` is the only generic type in the program).\r\n\r\nThe issue is not exclusive to interface type declarations. The same behaviour can be observed through pairs of program using struct and array types.\r\n\r\n#### Struct example\r\n\r\nCompiles ([playground](https://go.dev/play/p/elmdXldkQVp)):\r\n\r\n\r\n\r\nDoes not compile ([playground](https://go.dev/play/p/1fy6MUmgWQW)):\r\n\r\n\r\n\r\n### Related issues\r\n\r\n#65711 is also affected by the ordering of the type declarations, which suggests that the two issues are related.\r\n\r\n### What did you see happen?\r\n\r\nType checker accepting or rejecting programs depending on the order of type declarations.\r\n\r\n### What did you expect to see?\r\n\r\nType checker consistently accepting or rejecting programs, regardless of the ordering of type declarations.\r\n\r\n### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,griesemer,"This issue is similar to #65711. However, the behaviour of the compiler is different, so I am opening a separate issue.\r\n\r\n### What did you do?\r\n\r\nWhile working on formal methods (in the style of [Featherweight Go](https://dl.acm.org/doi/10.1145/3428217)) and a prototype type checker and interpreter for https://github.com/golang/go/issues/65555, I came across a pattern of programs that either pass or fail type checking, depending on the order of the type declarations.\r\n\r\nE.g. the following program passes the type checker (and the program successfully compiles), and it is possible to implement and use the `Bar` interface ([Go playground](https://go.dev/play/p/eGRvr4GJPBG)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Foo[T Bar] interface {\r\n}\r\n\r\ntype Bar interface {\r\n\tfoo() Foo[Bar]\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n(note: this program looks silly because it is part of my interpreter's testing suite, explicitly meant to test various edge cases in the type checker)\r\n\r\nHowever, if we swap the order of the type declaration, the compiler rejects the program ([playground](https://go.dev/play/p/4ss9CVwBJnA)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Bar interface {\r\n\tfoo() Foo[Bar]\r\n}\r\n\r\ntype Foo[T Bar] interface {\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\nOutput of `go build` for the latter example:\r\n\r\n```\r\n./prog.go:3:6: invalid recursive type Bar\r\n\t./prog.go:3:6: Bar refers to\r\n\t./prog.go:7:6: Foo refers to\r\n\t./prog.go:3:6: Bar\r\n```\r\n\r\nAs far as I'm aware, the order of type declarations should not matter in a Go program.\r\n\r\nFrom the [Go spec](https://go.dev/ref/spec#Type_parameter_declarations), it is not clear to me, which is the correct behaviour. The spec says:\r\n\r\n> Within a type parameter list of a generic type T, a type constraint may not (directly, or indirectly through the type parameter list of another generic type) refer to T. \r\n\r\nand provides an example:\r\n\r\n```go\r\ntype T3[P interface{ m(T3[int])}] \u2026   // illegal: T3 refers to itself\r\n```\r\n\r\n`Foo` neither refers to itself directly via its own type parameter list (i.e. the `Bar` interface is not inlined in the type parameter list), nor is it referred through ""the type parameter list of another generic type"" (`Foo` is the only generic type in the program).\r\n\r\nThe issue is not exclusive to interface type declarations. The same behaviour can be observed through pairs of program using struct and array types.\r\n\r\n#### Struct example\r\n\r\nCompiles ([playground](https://go.dev/play/p/elmdXldkQVp)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Foo[T Bar] interface {\r\n}\r\n\r\ntype Bar struct {\r\n\tfoo Foo[Bar]\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\nDoes not compile ([playground](https://go.dev/play/p/1fy6MUmgWQW)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Bar struct {\r\n\tfoo Foo[Bar]\r\n}\r\n\r\ntype Foo[T Bar] interface {\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n### Related issues\r\n\r\n#65711 is also affected by the ordering of the type declarations, which suggests that the two issues are related.\r\n\r\n### What did you see happen?\r\n\r\nType checker accepting or rejecting programs depending on the order of type declarations.\r\n\r\n### What did you expect to see?\r\n\r\nType checker consistently accepting or rejecting programs, regardless of the ordering of type declarations.\r\n\r\n### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/dawidl022/Library/Caches/go-build'\r\nGOENV='/Users/dawidl022/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/dawidl022/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/dawidl022/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/dawidl022/Learning/Uni/ECS635U-project/work/projects/go-generic-array-sizes/interpreters/fgg/go.mod'\r\nGOWORK='/Users/dawidl022/Learning/Uni/ECS635U-project/work/projects/go-generic-array-sizes/go.work'\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/70/xq_w4nkj0fg4n8g8sc4y3g080000gn/T/go-build2129288715=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n",go\r\npackage main\r\n\r\ntype Foo[T Bar] interface {\r\n}\r\n\r\ntype Bar interface {\r\n\tfoo() Foo[Bar]\r\n}\r\n\r\nfunc main() {\r\n}\r\n
65711,"go/types, types2: missing diagnosis for structs that contain themselves through type parameters### What did you do?\r\n\r\nWhile working on formal methods (in the style of [Featherweight Go](https://dl.acm.org/doi/10.1145/3428217)) and a prototype type checker and interpreter for #65555, I stumbled across an example program that crashes the Go compiler ([try it out in the playground](https://go.dev/play/p/rJfHn64VYg0)):\r\n\r\n\r\n\r\n(note: this program looks silly because it is part of my interpreter's testing suite, explicitly meant to test various edge cases in the type checker)\r\n\r\nThis program causes a stack overflow in the Go compiler. The expected outcome is that the compiler rejects such a program, due to an indirectly self-referential struct type via type parameters.\r\n\r\nThis bug also occurs for array type declarations, using the same setup ([playground](https://go.dev/play/p/jc3vCFs41xq)):\r\n\r\n\r\n\r\nThe interesting thing is that this bug only seems to trigger in certain permutations of the type declarations (i.e. order of the declarations matters). E.g. if we place `Baz` before `Bar` or before `Foo`, then the compiler correctly rejects the program (i.e. without crashing).\r\n\r\nE.g. the following program is correctly rejected by the compiler ([playground](https://go.dev/play/p/z04KAgJlKMp)):\r\n\r\n\r\n\r\n### Related issues\r\n\r\n#60817 reports deadlocks with recursive generic types.\r\n\r\n### What did you see happen?\r\n\r\nThe output of `go build`:\r\n\r\n```\r\n# github.com/dawidl022/go-generic-array-sizes/interpreters/fgg/typecheck/testdata/self_ref/self_ref_indirect\r\nruntime: goroutine stack exceeds 1000000000-byte limit\r\nruntime: sp=0x140204603b0 stack=[0x14020460000, 0x14040460000]\r\nfatal error: stack overflow\r\n\r\nruntime stack:\r\nruntime.throw({0x104fd31f4?, 0x20000001?})\r\n\truntime/panic.go:1023 +0x40 fp=0x16b68a840 sp=0x16b68a810 pc=0x1047b8390\r\nruntime.newstack()\r\n\truntime/stack.go:1103 +0x5e0 fp=0x16b68aa40 sp=0x16b68a840 pc=0x1047d64f0\r\nruntime.morestack()\r\n\truntime/asm_arm64.s:341 +0x70 fp=0x16b68aa40 sp=0x16b68aa40 pc=0x1047f40d0\r\n\r\ngoroutine 1 gp=0x140000021c0 m=0 mp=0x1057c8900 [running]:\r\ncmd/compile/internal/types2.(*Named).resolve(0x140000b5960)\r\n\tcmd/compile/internal/types2/named.go:157 +0x43c fp=0x140204603b0 sp=0x140204603b0 pc=0x104f12bdc\r\ncmd/compile/internal/types2.(*Named).Underlying(0x10521c8a8?)\r\n\tcmd/compile/internal/types2/named.go:457 +0x1c fp=0x14020460400 sp=0x140204603b0 pc=0x104f13e8c\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:124 +0xdc fp=0x14020460440 sp=0x14020460400 pc=0x104f51d0c\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460480 sp=0x14020460440 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204604c0 sp=0x14020460480 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460500 sp=0x140204604c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460540 sp=0x14020460500 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460580 sp=0x14020460540 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204605c0 sp=0x14020460580 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460600 sp=0x140204605c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460640 sp=0x14020460600 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460680 sp=0x14020460640 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204606c0 sp=0x14020460680 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460700 sp=0x140204606c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460740 sp=0x14020460700 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460780 sp=0x14020460740 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204607c0 sp=0x14020460780 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460800 sp=0x140204607c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460840 sp=0x14020460800 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460880 sp=0x14020460840 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204608c0 sp=0x14020460880 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460900 sp=0x140204608c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460940 sp=0x14020460900 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460980 sp=0x14020460940 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204609c0 sp=0x14020460980 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a00 sp=0x140204609c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a40 sp=0x14020460a00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a80 sp=0x14020460a40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460ac0 sp=0x14020460a80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b00 sp=0x14020460ac0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b40 sp=0x14020460b00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b80 sp=0x14020460b40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460bc0 sp=0x14020460b80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c00 sp=0x14020460bc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c40 sp=0x14020460c00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c80 sp=0x14020460c40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460cc0 sp=0x14020460c80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d00 sp=0x14020460cc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d40 sp=0x14020460d00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d80 sp=0x14020460d40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460dc0 sp=0x14020460d80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e00 sp=0x14020460dc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e40 sp=0x14020460e00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e80 sp=0x14020460e40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460ec0 sp=0x14020460e80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f00 sp=0x14020460ec0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f40 sp=0x14020460f00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f80 sp=0x14020460f40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460fc0 sp=0x14020460f80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020461000 sp=0x14020460fc0 pc=0x104f51dc8\r\n...8388443 frames elided...\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e700 sp=0x1404045e6c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e740 sp=0x1404045e700 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e780 sp=0x1404045e740 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e7c0 sp=0x1404045e780 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e800 sp=0x1404045e7c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e840 sp=0x1404045e800 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e880 sp=0x1404045e840 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e8c0 sp=0x1404045e880 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e900 sp=0x1404045e8c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e940 sp=0x1404045e900 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e980 sp=0x1404045e940 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e9c0 sp=0x1404045e980 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea00 sp=0x1404045e9c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea40 sp=0x1404045ea00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea80 sp=0x1404045ea40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eac0 sp=0x1404045ea80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb00 sp=0x1404045eac0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb40 sp=0x1404045eb00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb80 sp=0x1404045eb40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ebc0 sp=0x1404045eb80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec00 sp=0x1404045ebc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec40 sp=0x1404045ec00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec80 sp=0x1404045ec40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ecc0 sp=0x1404045ec80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed00 sp=0x1404045ecc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed40 sp=0x1404045ed00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed80 sp=0x1404045ed40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045edc0 sp=0x1404045ed80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee00 sp=0x1404045edc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee40 sp=0x1404045ee00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee80 sp=0x1404045ee40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eec0 sp=0x1404045ee80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef00 sp=0x1404045eec0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef40 sp=0x1404045ef00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef80 sp=0x1404045ef40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045efc0 sp=0x1404045ef80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f000 sp=0x1404045efc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f040 sp=0x1404045f000 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f080 sp=0x1404045f040 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f0c0 sp=0x1404045f080 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f100 sp=0x1404045f0c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f140 sp=0x1404045f100 pc=0x104f51dc8\r\ncmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0x14000066538, 0x1, 0x0?})\r\n\tcmd/compile/internal/noder/irgen.go:125 +0x7ec fp=0x1404045f3b0 sp=0x1404045f140 pc=0x104f5433c\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0x14000066538, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/unified.go:296 +0x48 fp=0x1404045f6f0 sp=0x1404045f3b0 pc=0x104f74b88\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0x14000066538?, 0x1051662c0?, 0x0?})\r\n\tcmd/compile/internal/noder/unified.go:172 +0x98 fp=0x1404045f8c0 sp=0x1404045f6f0 pc=0x104f74258\r\ncmd/compile/internal/noder.LoadPackage({0x1400001e630, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/noder.go:77 +0x398 fp=0x1404045fa00 sp=0x1404045f8c0 pc=0x104f58628\r\ncmd/compile/internal/gc.Main(0x1052173c0)\r\n\tcmd/compile/internal/gc/main.go:197 +0xb08 fp=0x1404045fee0 sp=0x1404045fa00 pc=0x104f9df68\r\nmain.main()\r\n\tcmd/compile/main.go:57 +0x110 fp=0x1404045ff40 sp=0x1404045fee0 pc=0x104fc31e0\r\nruntime.main()\r\n\truntime/proc.go:271 +0x28c fp=0x1404045ffd0 sp=0x1404045ff40 pc=0x1047bacbc\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x1404045ffd0 sp=0x1404045ffd0 pc=0x1047f6344\r\n\r\ngoroutine 2 gp=0x14000002700 m=nil [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000062f90 sp=0x14000062f70 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.forcegchelper()\r\n\truntime/proc.go:326 +0xb8 fp=0x14000062fd0 sp=0x14000062f90 pc=0x1047baf78\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x14000062fd0 sp=0x14000062fd0 pc=0x1047f6344\r\ncreated by runtime.init.6 in goroutine 1\r\n\truntime/proc.go:314 +0x24\r\n\r\ngoroutine 3 gp=0x14000002c40 m=nil [GC sweep wait]:\r\nruntime.gopark(0x14000030070?, 0x10512eda8?, 0x0?, 0x0?, 0x0?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000063720 sp=0x14000063700 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.bgsweep(0x14000030070)\r\n\truntime/mgcsweep.go:278 +0xa4 fp=0x140000637b0 sp=0x14000063720 pc=0x1047a2d74\r\nruntime.gcenable.gowrap1()\r\n\truntime/mgc.go:203 +0x28 fp=0x140000637d0 sp=0x140000637b0 pc=0x104795f38\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x140000637d0 sp=0x140000637d0 pc=0x1047f6344\r\ncreated by runtime.gcenable in goroutine 1\r\n\truntime/mgc.go:203 +0x6c\r\n\r\ngoroutine 4 gp=0x14000002e00 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x140000300c8?, 0x0?, 0xe0?, 0xc9?, 0x14000030070?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000063f60 sp=0x14000063f40 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.(*scavengerState).park(0x1057c5ac0)\r\n\truntime/mgcscavenge.go:425 +0x5c fp=0x14000063f90 sp=0x14000063f60 pc=0x10479feac\r\nruntime.bgscavenge(0x14000030070)\r\n\truntime/mgcscavenge.go:653 +0x44 fp=0x14000063fb0 sp=0x14000063f90 pc=0x1047a0404\r\nruntime.gcenable.gowrap2()\r\n\truntime/mgc.go:204 +0x28 fp=0x14000063fd0 sp=0x14000063fb0 pc=0x104795ed8\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x14000063fd0 sp=0x14000063fd0 pc=0x1047f6344\r\ncreated by runtime.gcenable in goroutine 1\r\n\truntime/mgc.go:204 +0xac\r\n\r\ngoroutine 5 gp=0x14000003340 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x1047bb1b8?, 0xb8?, 0x25?, 0x33?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000062580 sp=0x14000062560 pc=0x1047bb118\r\nruntime.runfinq()\r\n\truntime/mfinal.go:194 +0x108 fp=0x140000627d0 sp=0x14000062580 pc=0x104794e88\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x140000627d0 sp=0x140000627d0 pc=0x1047f6344\r\ncreated by runtime.createfing in goroutine 1\r\n\truntime/mfinal.go:164 +0x80\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe type checker consistently reporting a type error due to a self-referential type, regardless of the type declaration order, without the compiler crashing.\r\n\r\nExpected output (modulo line numbers):\r\n\r\n```\r\n# github.com/dawidl022/go-generic-array-sizes/interpreters/fgg/typecheck/testdata/self_ref/self_ref_indirect\r\n./self_ref_indirect.go:6:6: invalid recursive type Baz\r\n\t./self_ref_indirect.go:6:6: Baz refers to\r\n\t./self_ref_indirect.go:7:6: Bar refers to\r\n\t./self_ref_indirect.go:15:6: Foo refers to\r\n\t./self_ref_indirect.go:6:6: Baz\r\n```\r\n\r\n### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,griesemer,"### What did you do?\r\n\r\nWhile working on formal methods (in the style of [Featherweight Go](https://dl.acm.org/doi/10.1145/3428217)) and a prototype type checker and interpreter for #65555, I stumbled across an example program that crashes the Go compiler ([try it out in the playground](https://go.dev/play/p/rJfHn64VYg0)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Foo[T any] struct {\r\n\tbaz T\r\n}\r\n\r\ntype Bar[T any] struct {\r\n\tfoo Foo[T]\r\n}\r\n\r\ntype Baz struct {\r\n\tbar Bar[Baz]\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n(note: this program looks silly because it is part of my interpreter's testing suite, explicitly meant to test various edge cases in the type checker)\r\n\r\nThis program causes a stack overflow in the Go compiler. The expected outcome is that the compiler rejects such a program, due to an indirectly self-referential struct type via type parameters.\r\n\r\nThis bug also occurs for array type declarations, using the same setup ([playground](https://go.dev/play/p/jc3vCFs41xq)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Foo[T any] [2]T\r\n\r\ntype Bar[T any] [2]Foo[T]\r\n\r\ntype Baz [2]Bar[Baz]\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\nThe interesting thing is that this bug only seems to trigger in certain permutations of the type declarations (i.e. order of the declarations matters). E.g. if we place `Baz` before `Bar` or before `Foo`, then the compiler correctly rejects the program (i.e. without crashing).\r\n\r\nE.g. the following program is correctly rejected by the compiler ([playground](https://go.dev/play/p/z04KAgJlKMp)):\r\n\r\n```go\r\npackage main\r\n\r\ntype Baz [2]Bar[Baz]\r\n\r\ntype Foo[T any] [2]T\r\n\r\ntype Bar[T any] [2]Foo[T]\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n### Related issues\r\n\r\n#60817 reports deadlocks with recursive generic types.\r\n\r\n### What did you see happen?\r\n\r\nThe output of `go build`:\r\n\r\n```\r\n# github.com/dawidl022/go-generic-array-sizes/interpreters/fgg/typecheck/testdata/self_ref/self_ref_indirect\r\nruntime: goroutine stack exceeds 1000000000-byte limit\r\nruntime: sp=0x140204603b0 stack=[0x14020460000, 0x14040460000]\r\nfatal error: stack overflow\r\n\r\nruntime stack:\r\nruntime.throw({0x104fd31f4?, 0x20000001?})\r\n\truntime/panic.go:1023 +0x40 fp=0x16b68a840 sp=0x16b68a810 pc=0x1047b8390\r\nruntime.newstack()\r\n\truntime/stack.go:1103 +0x5e0 fp=0x16b68aa40 sp=0x16b68a840 pc=0x1047d64f0\r\nruntime.morestack()\r\n\truntime/asm_arm64.s:341 +0x70 fp=0x16b68aa40 sp=0x16b68aa40 pc=0x1047f40d0\r\n\r\ngoroutine 1 gp=0x140000021c0 m=0 mp=0x1057c8900 [running]:\r\ncmd/compile/internal/types2.(*Named).resolve(0x140000b5960)\r\n\tcmd/compile/internal/types2/named.go:157 +0x43c fp=0x140204603b0 sp=0x140204603b0 pc=0x104f12bdc\r\ncmd/compile/internal/types2.(*Named).Underlying(0x10521c8a8?)\r\n\tcmd/compile/internal/types2/named.go:457 +0x1c fp=0x14020460400 sp=0x140204603b0 pc=0x104f13e8c\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:124 +0xdc fp=0x14020460440 sp=0x14020460400 pc=0x104f51d0c\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460480 sp=0x14020460440 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204604c0 sp=0x14020460480 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460500 sp=0x140204604c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460540 sp=0x14020460500 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460580 sp=0x14020460540 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204605c0 sp=0x14020460580 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460600 sp=0x140204605c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460640 sp=0x14020460600 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460680 sp=0x14020460640 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204606c0 sp=0x14020460680 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460700 sp=0x140204606c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460740 sp=0x14020460700 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460780 sp=0x14020460740 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204607c0 sp=0x14020460780 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460800 sp=0x140204607c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460840 sp=0x14020460800 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460880 sp=0x14020460840 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204608c0 sp=0x14020460880 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460900 sp=0x140204608c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460940 sp=0x14020460900 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460980 sp=0x14020460940 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x140204609c0 sp=0x14020460980 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a00 sp=0x140204609c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a40 sp=0x14020460a00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460a80 sp=0x14020460a40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460ac0 sp=0x14020460a80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b00 sp=0x14020460ac0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b40 sp=0x14020460b00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460b80 sp=0x14020460b40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460bc0 sp=0x14020460b80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c00 sp=0x14020460bc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c40 sp=0x14020460c00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460c80 sp=0x14020460c40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460cc0 sp=0x14020460c80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d00 sp=0x14020460cc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d40 sp=0x14020460d00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460d80 sp=0x14020460d40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460dc0 sp=0x14020460d80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e00 sp=0x14020460dc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e40 sp=0x14020460e00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460e80 sp=0x14020460e40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460ec0 sp=0x14020460e80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f00 sp=0x14020460ec0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f40 sp=0x14020460f00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460f80 sp=0x14020460f40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020460fc0 sp=0x14020460f80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x14020461000 sp=0x14020460fc0 pc=0x104f51dc8\r\n...8388443 frames elided...\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e700 sp=0x1404045e6c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e740 sp=0x1404045e700 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e780 sp=0x1404045e740 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e7c0 sp=0x1404045e780 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e800 sp=0x1404045e7c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e840 sp=0x1404045e800 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e880 sp=0x1404045e840 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e8c0 sp=0x1404045e880 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e900 sp=0x1404045e8c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e940 sp=0x1404045e900 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e980 sp=0x1404045e940 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045e9c0 sp=0x1404045e980 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea00 sp=0x1404045e9c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea40 sp=0x1404045ea00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ea80 sp=0x1404045ea40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eac0 sp=0x1404045ea80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb00 sp=0x1404045eac0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb40 sp=0x1404045eb00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eb80 sp=0x1404045eb40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ebc0 sp=0x1404045eb80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec00 sp=0x1404045ebc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec40 sp=0x1404045ec00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ec80 sp=0x1404045ec40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ecc0 sp=0x1404045ec80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed00 sp=0x1404045ecc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed40 sp=0x1404045ed00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ed80 sp=0x1404045ed40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045edc0 sp=0x1404045ed80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee00 sp=0x1404045edc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee40 sp=0x1404045ee00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ee80 sp=0x1404045ee40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045eec0 sp=0x1404045ee80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef00 sp=0x1404045eec0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef40 sp=0x1404045ef00 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045ef80 sp=0x1404045ef40 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045efc0 sp=0x1404045ef80 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f000 sp=0x1404045efc0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f040 sp=0x1404045f000 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f080 sp=0x1404045f040 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5b90?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f0c0 sp=0x1404045f080 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b5960?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f100 sp=0x1404045f0c0 pc=0x104f51dc8\r\ncmd/compile/internal/noder.isNotInHeap({0x10521c8a8?, 0x140000b58f0?})\r\n\tcmd/compile/internal/noder/helpers.go:132 +0x198 fp=0x1404045f140 sp=0x1404045f100 pc=0x104f51dc8\r\ncmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0x14000066538, 0x1, 0x0?})\r\n\tcmd/compile/internal/noder/irgen.go:125 +0x7ec fp=0x1404045f3b0 sp=0x1404045f140 pc=0x104f5433c\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0x14000066538, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/unified.go:296 +0x48 fp=0x1404045f6f0 sp=0x1404045f3b0 pc=0x104f74b88\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0x14000066538?, 0x1051662c0?, 0x0?})\r\n\tcmd/compile/internal/noder/unified.go:172 +0x98 fp=0x1404045f8c0 sp=0x1404045f6f0 pc=0x104f74258\r\ncmd/compile/internal/noder.LoadPackage({0x1400001e630, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/noder.go:77 +0x398 fp=0x1404045fa00 sp=0x1404045f8c0 pc=0x104f58628\r\ncmd/compile/internal/gc.Main(0x1052173c0)\r\n\tcmd/compile/internal/gc/main.go:197 +0xb08 fp=0x1404045fee0 sp=0x1404045fa00 pc=0x104f9df68\r\nmain.main()\r\n\tcmd/compile/main.go:57 +0x110 fp=0x1404045ff40 sp=0x1404045fee0 pc=0x104fc31e0\r\nruntime.main()\r\n\truntime/proc.go:271 +0x28c fp=0x1404045ffd0 sp=0x1404045ff40 pc=0x1047bacbc\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x1404045ffd0 sp=0x1404045ffd0 pc=0x1047f6344\r\n\r\ngoroutine 2 gp=0x14000002700 m=nil [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000062f90 sp=0x14000062f70 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.forcegchelper()\r\n\truntime/proc.go:326 +0xb8 fp=0x14000062fd0 sp=0x14000062f90 pc=0x1047baf78\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x14000062fd0 sp=0x14000062fd0 pc=0x1047f6344\r\ncreated by runtime.init.6 in goroutine 1\r\n\truntime/proc.go:314 +0x24\r\n\r\ngoroutine 3 gp=0x14000002c40 m=nil [GC sweep wait]:\r\nruntime.gopark(0x14000030070?, 0x10512eda8?, 0x0?, 0x0?, 0x0?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000063720 sp=0x14000063700 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.bgsweep(0x14000030070)\r\n\truntime/mgcsweep.go:278 +0xa4 fp=0x140000637b0 sp=0x14000063720 pc=0x1047a2d74\r\nruntime.gcenable.gowrap1()\r\n\truntime/mgc.go:203 +0x28 fp=0x140000637d0 sp=0x140000637b0 pc=0x104795f38\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x140000637d0 sp=0x140000637d0 pc=0x1047f6344\r\ncreated by runtime.gcenable in goroutine 1\r\n\truntime/mgc.go:203 +0x6c\r\n\r\ngoroutine 4 gp=0x14000002e00 m=nil [GC scavenge wait]:\r\nruntime.gopark(0x140000300c8?, 0x0?, 0xe0?, 0xc9?, 0x14000030070?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000063f60 sp=0x14000063f40 pc=0x1047bb118\r\nruntime.goparkunlock(...)\r\n\truntime/proc.go:408\r\nruntime.(*scavengerState).park(0x1057c5ac0)\r\n\truntime/mgcscavenge.go:425 +0x5c fp=0x14000063f90 sp=0x14000063f60 pc=0x10479feac\r\nruntime.bgscavenge(0x14000030070)\r\n\truntime/mgcscavenge.go:653 +0x44 fp=0x14000063fb0 sp=0x14000063f90 pc=0x1047a0404\r\nruntime.gcenable.gowrap2()\r\n\truntime/mgc.go:204 +0x28 fp=0x14000063fd0 sp=0x14000063fb0 pc=0x104795ed8\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x14000063fd0 sp=0x14000063fd0 pc=0x1047f6344\r\ncreated by runtime.gcenable in goroutine 1\r\n\truntime/mgc.go:204 +0xac\r\n\r\ngoroutine 5 gp=0x14000003340 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x1047bb1b8?, 0xb8?, 0x25?, 0x33?)\r\n\truntime/proc.go:402 +0xc8 fp=0x14000062580 sp=0x14000062560 pc=0x1047bb118\r\nruntime.runfinq()\r\n\truntime/mfinal.go:194 +0x108 fp=0x140000627d0 sp=0x14000062580 pc=0x104794e88\r\nruntime.goexit({})\r\n\truntime/asm_arm64.s:1222 +0x4 fp=0x140000627d0 sp=0x140000627d0 pc=0x1047f6344\r\ncreated by runtime.createfing in goroutine 1\r\n\truntime/mfinal.go:164 +0x80\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe type checker consistently reporting a type error due to a self-referential type, regardless of the type declaration order, without the compiler crashing.\r\n\r\nExpected output (modulo line numbers):\r\n\r\n```\r\n# github.com/dawidl022/go-generic-array-sizes/interpreters/fgg/typecheck/testdata/self_ref/self_ref_indirect\r\n./self_ref_indirect.go:6:6: invalid recursive type Baz\r\n\t./self_ref_indirect.go:6:6: Baz refers to\r\n\t./self_ref_indirect.go:7:6: Bar refers to\r\n\t./self_ref_indirect.go:15:6: Foo refers to\r\n\t./self_ref_indirect.go:6:6: Baz\r\n```\r\n\r\n### Go version\r\n\r\ngo version go1.22.0 darwin/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/dawidl022/Library/Caches/go-build'\r\nGOENV='/Users/dawidl022/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/dawidl022/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/dawidl022/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK='/Users/dawidl022/Learning/Uni/ECS635U-project/work/projects/go-generic-array-sizes/go.work'\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/70/xq_w4nkj0fg4n8g8sc4y3g080000gn/T/go-build2827072922=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n",go\r\npackage main\r\n\r\ntype Foo[T any] struct {\r\n\tbaz T\r\n}\r\n\r\ntype Bar[T any] struct {\r\n\tfoo Foo[T]\r\n}\r\n\r\ntype Baz struct {\r\n\tbar Bar[Baz]\r\n}\r\n\r\nfunc main() {\r\n}\r\n
65674,"x/tools/go/analysis/passes/nilness: false positive with range over slice### Go version\n\ntip\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThe nilness Analyzer produces a false positive on:\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n    var a []int\r\n    for i, j := range a { // nil dereference in index operation\r\n        fmt.Println(i, j)\r\n    }\r\n}\r\n```\n\n### What did you see happen?\n\nThe nilness analyzer reports `nil dereference in index operation` on the for loop even though the code is safe.\n\n### What did you expect to see?\n\nThe analyzer should not report a diagnostic.",NeedsFix|Tools|FixPending,adonovan,"### Go version\n\ntip\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nThe nilness Analyzer produces a false positive on:\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n    var a []int\r\n    for i, j := range a { // nil dereference in index operation\r\n        fmt.Println(i, j)\r\n    }\r\n}\r\n```\n\n### What did you see happen?\n\nThe nilness analyzer reports `nil dereference in index operation` on the for loop even though the code is safe.\n\n### What did you expect to see?\n\nThe analyzer should not report a diagnostic.",shell\nN/A\n
65666,"time: ParseDuration example bug### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nNavigate to https://pkg.go.dev/time#ParseDuration and expand the ""Example"" sub-link.\n\n### What did you see happen?\n\nIn src/time/example_test.go::ExampleParseDuration, visible at the earlier mentioned link:\r\n\r\n\tfmt.Printf(""There are %6.2e seconds in %v.\\n"", micro2.Seconds(), micro)\r\n\n\n### What did you expect to see?\n\n\tfmt.Printf(""There are %6.2e seconds in %v.\\n"", micro2.Seconds(), micro2)\r\n\r\nNote `micro` -> `micro2` in case the change isn't immediately apparent. Or perhaps the idea was to have `micro` as both. The two values are effectively the same, so nbd, but ... seems like the docs should be consistent in that regard.",Documentation|NeedsFix,robpike,"### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nNavigate to https://pkg.go.dev/time#ParseDuration and expand the ""Example"" sub-link.\n\n### What did you see happen?\n\nIn src/time/example_test.go::ExampleParseDuration, visible at the earlier mentioned link:\r\n\r\n\tfmt.Printf(""There are %6.2e seconds in %v.\\n"", micro2.Seconds(), micro)\r\n\n\n### What did you expect to see?\n\n\tfmt.Printf(""There are %6.2e seconds in %v.\\n"", micro2.Seconds(), micro2)\r\n\r\nNote `micro` -> `micro2` in case the change isn't immediately apparent. Or perhaps the idea was to have `micro` as both. The two values are effectively the same, so nbd, but ... seems like the docs should be consistent in that regard.",shell\nN/A\n
65653,"cmd/go: go 1.22.0: go test throws errors when processing folders not listed in coverpkg argument### Go version\r\n\r\ngo version go1.22.0 linux/amd64, go version go1.22.0 darwin/amd64, go version go1.22.0 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nHave a `main.go` and a package `internal` with some functions.\r\n\r\nSee reproducer: https://github.com/sonic-martin/golang-test-cover\r\n\r\nRun `go test`:\r\n\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n\r\n\r\ncoverage.out:\r\n```\r\nmode: count\r\nexample.com/m/internal/helloer.go:3.23,5.2 1 1\r\n```\r\n\r\nThe both outputs of `go tool cover` are fine.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBefore `go 1.22.0` it worked fine and no `no such file or directory` errors happend.\r\n\r\nThere are two workarounds:\r\n\r\n(1) `go test` with `-coverpkg` equal to the folder/packages processed\r\n\r\n\r\n\r\nBut changes semantic of the coverage result.\r\n\r\n(2) `go test` with `GOEXPERIMENT=nocoverageredesign`\r\n\r\n\r\nSee the discussion from Brian Candler, Aldemar F, Thomas McNulty and me in the mailing list:\r\nhttps://groups.google.com/g/golang-nuts/c/PjAWIdSdQHc\r\n ",NeedsInvestigation|GoCommand,thanm,"### Go version\r\n\r\ngo version go1.22.0 linux/amd64, go version go1.22.0 darwin/amd64, go version go1.22.0 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/home/martin/bin'\r\nGOCACHE='/home/martin/.cache/go-build'\r\nGOENV='/home/martin/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/mnt/c/dev/git/pkg/mod'\r\nGONOPROXY='*.mycompany.com'\r\nGONOSUMDB='*.mycompany.com'\r\nGOOS='linux'\r\nGOPATH='/mnt/c/dev/git'\r\nGOPRIVATE='*.mycompany.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/mnt/c/dev/git/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/mnt/c/dev/git/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/c/dev/git/golang-test-cover/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2876750124=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nHave a `main.go` and a package `internal` with some functions.\r\n\r\nSee reproducer: https://github.com/sonic-martin/golang-test-cover\r\n\r\nRun `go test`:\r\n```shell\r\ngo test -v ./... -coverprofile=coverage.out -coverpkg=./internal/... -covermode count\r\ngo tool cover -html=coverage.out -o coverage.html\r\ngo tool cover -func=coverage.out\r\n```\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n```shell\r\n$ go test -v ./... -coverprofile=coverage.out -coverpkg=./internal/... -covermode count\r\nexample.com/m: open /tmp/go-build1123786392/b002/covmeta.f6e4431d5ec1fd71f02b3ce4e56eb691a86525173d917007425576a7d9db7c72: no such file or directory\r\n=== RUN   TestHelloer\r\n--- PASS: TestHelloer (0.00s)\r\nPASS\r\ncoverage: 100.0% of statements in ./internal/...\r\nok      example.com/m/internal  0.003s  coverage: 100.0% of statements in ./internal/...\r\n$ echo $?\r\n1\r\n$ go tool cover -html=coverage.out -o coverage.html\r\n$ go tool cover -func=coverage.out\r\nexample.com/m/internal/helloer.go:3:    Helloer         100.0%\r\ntotal:                                  (statements)    100.0%\r\n```\r\n\r\ncoverage.out:\r\n```\r\nmode: count\r\nexample.com/m/internal/helloer.go:3.23,5.2 1 1\r\n```\r\n\r\nThe both outputs of `go tool cover` are fine.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBefore `go 1.22.0` it worked fine and no `no such file or directory` errors happend.\r\n\r\nThere are two workarounds:\r\n\r\n(1) `go test` with `-coverpkg` equal to the folder/packages processed\r\n\r\n```shell\r\ngo test -v ./... -coverprofile=coverage.out -coverpkg=./... -covermode count\r\n        example.com/m           coverage: 0.0% of statements\r\n=== RUN   TestHelloer\r\n--- PASS: TestHelloer (0.00s)\r\nPASS\r\ncoverage: 50.0% of statements in ./...\r\nok      example.com/m/internal  0.003s  coverage: 50.0% of statements in ./...\r\n```\r\n\r\nBut changes semantic of the coverage result.\r\n\r\n(2) `go test` with `GOEXPERIMENT=nocoverageredesign`\r\n```shell\r\n$ GOEXPERIMENT=nocoverageredesign go test -v ./... -coverprofile=coverage.out -coverpkg=./internal/... -covermode count\r\n?       example.com/m   [no test files]\r\n=== RUN   TestHelloer\r\n--- PASS: TestHelloer (0.00s)\r\nPASS\r\ncoverage: 100.0% of statements in ./internal/...\r\nok      example.com/m/internal  0.002s  coverage: 100.0% of statements in ./internal/...\r\n```\r\n\r\nSee the discussion from Brian Candler, Aldemar F, Thomas McNulty and me in the mailing list:\r\nhttps://groups.google.com/g/golang-nuts/c/PjAWIdSdQHc\r\n ","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/home/martin/bin'\r\nGOCACHE='/home/martin/.cache/go-build'\r\nGOENV='/home/martin/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/mnt/c/dev/git/pkg/mod'\r\nGONOPROXY='*.mycompany.com'\r\nGONOSUMDB='*.mycompany.com'\r\nGOOS='linux'\r\nGOPATH='/mnt/c/dev/git'\r\nGOPRIVATE='*.mycompany.com'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/mnt/c/dev/git/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/mnt/c/dev/git/pkg/mod/golang.org/toolchain@v0.0.1-go1.22.0.linux-amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/c/dev/git/golang-test-cover/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2876750124=/tmp/go-build -gno-record-gcc-switches'\r\n"
65646,"cmd/link: RISC-V external link, failed to find text symbol for HI20 relocation### Go version\r\n\r\ngo version go1.22.0 linux/riscv64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n```text\r\n# command-line-arguments\r\nfailed to find text symbol for HI20 relocation at 16198024 (f72988)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.morestack_noctxt\r\nfailed to find text symbol for HI20 relocation at 16198076 (f729bc)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to regexp.MustCompile\r\nfailed to find text symbol for HI20 relocation at 16198096 (f729d0)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.gcWriteBarrier2\r\nfailed to find text symbol for HI20 relocation at 16198128 (f729f0)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to github.com/aws/aws-sdk-go/aws/endpoints.map.init.0\r\nfailed to find text symbol for HI20 relocation at 16198136 (f729f8)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to github.com/aws/aws-sdk-go/aws/endpoints.init.func1\r\nfailed to find text symbol for HI20 relocation at 16198156 (f72a0c)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.gcWriteBarrier2\r\nfailed to find text symbol for HI20 relocation at 16198188 (f72a2c)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.makemap_small\r\nfailed to find text symbol for HI20 relocation at 16198228 (f72a54)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.duffzero\r\nfailed to find text symbol for HI20 relocation at 16198280 (f72a88)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.newobject\r\nfailed to find text symbol for HI20 relocation at 16198356 (f72ad4)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.newobject\r\nfailed to find text symbol for HI20 relocation at 16198448 (f72b30)\r\n/usr/lib/go/pkg/tool/linux_riscv64/link: too many errors\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nBuild successfully.\r\nA successor of #62465 , but no the same issue.",help wanted|NeedsInvestigation|arch-riscv|compiler/runtime,4a6f656c,"### Go version\r\n\r\ngo version go1.22.0 linux/riscv64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='riscv64'\r\nGOBIN=''\r\nGOCACHE='/home/xeonacid/.cache/go-build'\r\nGOENV='/home/xeonacid/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS='-buildmode=pie -ldflags=-linkmode=external'\r\nGOHOSTARCH='riscv64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/xeonacid/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/xeonacid/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_riscv64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/xeonacid/rekor/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build549560519=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n```bash\r\nexport GOFLAGS=""-buildmode=pie -ldflags=-linkmode=external""\r\ngit clone https://github.com/sigstore/rekor -b v1.3.5 --depth 1\r\ncd rekor\r\ngo build -o cmd/rekor-server/rekor-server cmd/rekor-server/main.go\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```text\r\n# command-line-arguments\r\nfailed to find text symbol for HI20 relocation at 16198024 (f72988)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.morestack_noctxt\r\nfailed to find text symbol for HI20 relocation at 16198076 (f729bc)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to regexp.MustCompile\r\nfailed to find text symbol for HI20 relocation at 16198096 (f729d0)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.gcWriteBarrier2\r\nfailed to find text symbol for HI20 relocation at 16198128 (f729f0)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to github.com/aws/aws-sdk-go/aws/endpoints.map.init.0\r\nfailed to find text symbol for HI20 relocation at 16198136 (f729f8)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to github.com/aws/aws-sdk-go/aws/endpoints.init.func1\r\nfailed to find text symbol for HI20 relocation at 16198156 (f72a0c)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.gcWriteBarrier2\r\nfailed to find text symbol for HI20 relocation at 16198188 (f72a2c)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.makemap_small\r\nfailed to find text symbol for HI20 relocation at 16198228 (f72a54)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.duffzero\r\nfailed to find text symbol for HI20 relocation at 16198280 (f72a88)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.newobject\r\nfailed to find text symbol for HI20 relocation at 16198356 (f72ad4)\r\ngithub.com/aws/aws-sdk-go/aws/endpoints.init: unsupported obj reloc 62 (R_RISCV_CALL)/8 to runtime.newobject\r\nfailed to find text symbol for HI20 relocation at 16198448 (f72b30)\r\n/usr/lib/go/pkg/tool/linux_riscv64/link: too many errors\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nBuild successfully.\r\nA successor of #62465 , but no the same issue.","shell\r\nGO111MODULE=''\r\nGOARCH='riscv64'\r\nGOBIN=''\r\nGOCACHE='/home/xeonacid/.cache/go-build'\r\nGOENV='/home/xeonacid/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS='-buildmode=pie -ldflags=-linkmode=external'\r\nGOHOSTARCH='riscv64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/xeonacid/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/xeonacid/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_riscv64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/xeonacid/rekor/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build549560519=/tmp/go-build -gno-record-gcc-switches'\r\n"
65636,"cmd/go: duplicate lines in coverage file after update to 1.22### Go version\r\n\r\ngo version go1.22.0 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nClone https://github.com/alainstoffels/coverageRepro\r\nRun inside the root of the repo: `go test -cover -coverpkg=./... -coverprofile=coverage.out ./...`\r\n\r\n### What did you see happen?\r\n\r\ncoverage.out now contains 2 lines for `coverageRepro/bar/bar.go`. One where it indicates that it's not covered, and another where it indicates that it is covered:\r\n```\r\nmode: set\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 0\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 1\r\ncoverageRepro/foo/foo.go:5.12,7.2 1 1\r\n```\r\n\r\n`foo.Foo()` calls `bar.Bar()`, so `foo.TestFoo()` should cover `bar.Bar()`.\r\n\r\n### What did you expect to see?\r\n\r\nI would expect it to output a single line for `coverageRepro/bar/bar.go`, indicating it as covered, like it did before the 1.22 update:\r\n```\r\nmode: set\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 1\r\ncoverageRepro/foo/foo.go:5.12,7.2 1 1\r\n```",NeedsInvestigation|GoCommand,thanm,"### Go version\r\n\r\ngo version go1.22.0 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=on\r\nGOARCH=amd64\r\nGOBIN=\r\nGOCACHE=C:\\Users\\astoffels\\AppData\\Local\\go-build\r\nGOENV=C:\\Users\\astoffels\\AppData\\Roaming\\go\\env\r\nGOEXE=.exe\r\nGOEXPERIMENT=\r\nGOFLAGS=\r\nGOHOSTARCH=amd64\r\nGOHOSTOS=windows\r\nGOINSECURE=\r\nGOMODCACHE=C:\\Source\\golang\\pkg\\mod\r\nGONOPROXY=\r\nGONOSUMDB=\r\nGOOS=windows\r\nGOPATH=C:\\Source\\golang\r\nGOPRIVATE=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOROOT=C:/Program Files/Go\r\nGOSUMDB=sum.golang.org\r\nGOTMPDIR=\r\nGOTOOLCHAIN=auto\r\nGOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nGOVCS=\r\nGOVERSION=go1.22.0\r\nGCCGO=gccgo\r\nGOAMD64=v1\r\nAR=ar\r\nCC=gcc\r\nCXX=g++\r\nCGO_ENABLED=0\r\nGOMOD=C:\\Source\\golang\\src\\coverageRepro\\go.mod\r\nGOWORK=\r\nCGO_CFLAGS=-O2 -g\r\nCGO_CPPFLAGS=\r\nCGO_CXXFLAGS=-O2 -g\r\nCGO_FFLAGS=-O2 -g\r\nCGO_LDFLAGS=-O2 -g\r\nPKG_CONFIG=pkg-config\r\nGOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\ASTOFF~1\\AppData\\Local\\Temp\\go-build2371241097=/tmp/go-build -gno-record-gcc-switches\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nClone https://github.com/alainstoffels/coverageRepro\r\nRun inside the root of the repo: `go test -cover -coverpkg=./... -coverprofile=coverage.out ./...`\r\n\r\n### What did you see happen?\r\n\r\ncoverage.out now contains 2 lines for `coverageRepro/bar/bar.go`. One where it indicates that it's not covered, and another where it indicates that it is covered:\r\n```\r\nmode: set\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 0\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 1\r\ncoverageRepro/foo/foo.go:5.12,7.2 1 1\r\n```\r\n\r\n`foo.Foo()` calls `bar.Bar()`, so `foo.TestFoo()` should cover `bar.Bar()`.\r\n\r\n### What did you expect to see?\r\n\r\nI would expect it to output a single line for `coverageRepro/bar/bar.go`, indicating it as covered, like it did before the 1.22 update:\r\n```\r\nmode: set\r\ncoverageRepro/bar/bar.go:3.12,5.2 1 1\r\ncoverageRepro/foo/foo.go:5.12,7.2 1 1\r\n```","shell\r\nGO111MODULE=on\r\nGOARCH=amd64\r\nGOBIN=\r\nGOCACHE=C:\\Users\\astoffels\\AppData\\Local\\go-build\r\nGOENV=C:\\Users\\astoffels\\AppData\\Roaming\\go\\env\r\nGOEXE=.exe\r\nGOEXPERIMENT=\r\nGOFLAGS=\r\nGOHOSTARCH=amd64\r\nGOHOSTOS=windows\r\nGOINSECURE=\r\nGOMODCACHE=C:\\Source\\golang\\pkg\\mod\r\nGONOPROXY=\r\nGONOSUMDB=\r\nGOOS=windows\r\nGOPATH=C:\\Source\\golang\r\nGOPRIVATE=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOROOT=C:/Program Files/Go\r\nGOSUMDB=sum.golang.org\r\nGOTMPDIR=\r\nGOTOOLCHAIN=auto\r\nGOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nGOVCS=\r\nGOVERSION=go1.22.0\r\nGCCGO=gccgo\r\nGOAMD64=v1\r\nAR=ar\r\nCC=gcc\r\nCXX=g++\r\nCGO_ENABLED=0\r\nGOMOD=C:\\Source\\golang\\src\\coverageRepro\\go.mod\r\nGOWORK=\r\nCGO_CFLAGS=-O2 -g\r\nCGO_CPPFLAGS=\r\nCGO_CXXFLAGS=-O2 -g\r\nCGO_FFLAGS=-O2 -g\r\nCGO_LDFLAGS=-O2 -g\r\nPKG_CONFIG=pkg-config\r\nGOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\ASTOFF~1\\AppData\\Local\\Temp\\go-build2371241097=/tmp/go-build -gno-record-gcc-switches\r\n"
65625,"runtime: SIGSEGV after performing clone(CLONE_PARENT) via C constructor prior to runtime start### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThe main language of [runc](https://github.com/opencontainers/runc) is `go`, but we are using `c` to enter some linux namespaces. Recently, go 1.22.0 has been released, when we want to bump go version to `1.22.0`(https://github.com/opencontainers/runc/pull/4193), the CI is fail, it seems that after we are calling `clone(2)` in `c`, the children process can't return to `go` if the first process exited in `c`.\r\n\r\nThe test code is in https://github.com/lifubang/cgoclone2/blob/main/main.go\r\nI think we should see `From main!` in the last line.\n\n### What did you see happen?\n\nroot@acmcoder:/home/acmcoder/cgo# go version\r\ngo version go1.22.0 linux/amd64\r\nroot@acmcoder:/home/acmcoder/cgo# go run main.go\r\nSTAGE_PARENT\r\nSTAGE_CHILD\r\nSTAGE_INIT\r\nThis from nsexec\n\n### What did you expect to see?\n\nroot@acmcoder:/home/acmcoder/cgo# go version\r\ngo version go1.21.1 linux/amd64\r\nroot@acmcoder:/home/acmcoder/cgo# go run main.go\r\nSTAGE_PARENT\r\nSTAGE_CHILD\r\nSTAGE_INIT\r\nThis from nsexec\r\nFrom main!",NeedsInvestigation|compiler/runtime,prattmic,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build720171492=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nThe main language of [runc](https://github.com/opencontainers/runc) is `go`, but we are using `c` to enter some linux namespaces. Recently, go 1.22.0 has been released, when we want to bump go version to `1.22.0`(https://github.com/opencontainers/runc/pull/4193), the CI is fail, it seems that after we are calling `clone(2)` in `c`, the children process can't return to `go` if the first process exited in `c`.\r\n\r\nThe test code is in https://github.com/lifubang/cgoclone2/blob/main/main.go\r\nI think we should see `From main!` in the last line.\n\n### What did you see happen?\n\nroot@acmcoder:/home/acmcoder/cgo# go version\r\ngo version go1.22.0 linux/amd64\r\nroot@acmcoder:/home/acmcoder/cgo# go run main.go\r\nSTAGE_PARENT\r\nSTAGE_CHILD\r\nSTAGE_INIT\r\nThis from nsexec\n\n### What did you expect to see?\n\nroot@acmcoder:/home/acmcoder/cgo# go version\r\ngo version go1.21.1 linux/amd64\r\nroot@acmcoder:/home/acmcoder/cgo# go run main.go\r\nSTAGE_PARENT\r\nSTAGE_CHILD\r\nSTAGE_INIT\r\nThis from nsexec\r\nFrom main!","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build720171492=/tmp/go-build -gno-record-gcc-switches'\n"
65624,"net/http: 301 instead of 404 for unmatched requests### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/obFHzvRU_DL\r\n\r\nRegister a pattern, and make a request to a prefix of the pattern\r\n\r\n\n\n### What did you see happen?\n\n> 301 Moved Permanently /\r\n\r\nWhen used with an http client, this results in a redirect loop (get `/`, redirected to `/`)\n\n### What did you expect to see?\n\nReturn a 404 for no matching routes.",NeedsInvestigation,jba,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/user/.cache/go-build'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='cacheprog'\r\nGOFLAGS='-trimpath ""-ldflags=-s -w""'\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/user/.data/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/user/.data/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/user/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='path'\r\nGOTOOLDIR='/home/user/sdk/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/home/user/tmp/testrepo0527/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build984268338=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/obFHzvRU_DL\r\n\r\nRegister a pattern, and make a request to a prefix of the pattern\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""net/http""\r\n\t""net/http/httptest""\r\n)\r\n\r\nfunc main() {\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(""/{y}/"", func(w http.ResponseWriter, r *http.Request) {\r\n\t\tfmt.Fprintln(w, ""ok"")\r\n\t})\r\n\tw := httptest.NewRecorder()\r\n\treq, _ := http.NewRequest(""GET"", ""/"", nil)\r\n\tmux.ServeHTTP(w, req)\r\n\tfmt.Println(w.Result().Status, w.Result().Header.Get(""Location""))\r\n}\r\n```\n\n### What did you see happen?\n\n> 301 Moved Permanently /\r\n\r\nWhen used with an http client, this results in a redirect loop (get `/`, redirected to `/`)\n\n### What did you expect to see?\n\nReturn a 404 for no matching routes.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/user/.cache/go-build'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='cacheprog'\r\nGOFLAGS='-trimpath ""-ldflags=-s -w""'\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/user/.data/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/user/.data/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/user/sdk/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='path'\r\nGOTOOLDIR='/home/user/sdk/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/home/user/tmp/testrepo0527/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build984268338=/tmp/go-build -gno-record-gcc-switches'\n"
65609,"x/tools/gopls: completing argument to `%p` verb adds unwanted `&` for some types### gopls version\n\nf4fa7a75e44868caa1b37947e8b811b1bdb144e6\n\n### go env\n\n\n\n\n### What did you do?\n\nTrigger completion at the end of\r\n\r\n```\r\npackage pkg\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\tvar longword any\r\n\tfmt.Printf(""%p"", lon\r\n```\n\n### What did you see happen?\n\nThe line completes to\r\n```\r\nfmt.Printf(""%p"", &longword\r\n```\n\n### What did you expect to see?\n\n```\r\nfmt.Printf(""%p"", longword\r\n```\r\n\r\nThe variable has an interface type. I intended to print the pointer stored in the interface value, not the address of the local variable.\r\n\r\nThe same happens with maps, channels, unsafe.Pointer, and functions, all of which are accepted by `%p`. It does not happen with true pointers, or slices.\n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_",help wanted|gopls|Tools,naeemaei,"### gopls version\n\nf4fa7a75e44868caa1b37947e8b811b1bdb144e6\n\n### go env\n\n```shell\n-\n```\n\n\n### What did you do?\n\nTrigger completion at the end of\r\n\r\n```\r\npackage pkg\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\tvar longword any\r\n\tfmt.Printf(""%p"", lon\r\n```\n\n### What did you see happen?\n\nThe line completes to\r\n```\r\nfmt.Printf(""%p"", &longword\r\n```\n\n### What did you expect to see?\n\n```\r\nfmt.Printf(""%p"", longword\r\n```\r\n\r\nThe variable has an interface type. I intended to print the pointer stored in the interface value, not the address of the local variable.\r\n\r\nThe same happens with maps, channels, unsafe.Pointer, and functions, all of which are accepted by `%p`. It does not happen with true pointers, or slices.\n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_",shell\n-\n
65607,"runtime: crash in race detector when execution tracer reads from CPU profile buffer### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRan this program, compiled with the race detector enabled:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""io""\r\n\t""runtime""\r\n\t""runtime/trace""\r\n)\r\n\r\nfunc main() {\r\n\truntime.SetCPUProfileRate(100)\r\n\ttrace.Start(io.Discard)\r\n\tdefer trace.Stop()\r\n\r\n\tfor {\r\n\t\twaste()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc waste() int {\r\n\treturn 42\r\n}\r\n```\n\n### What did you see happen?\n\nThe program crashes with a segfault during a race detector call:\r\n\r\n<details>\r\n<summary>crash output</summary>\r\n\r\n```\r\nSIGSEGV: segmentation violation\r\nPC=0x41d920 m=4 sigcode=1 addr=0x4\r\n\r\ngoroutine 0 gp=0xc0000821c0 m=4 mp=0xc000080008 [idle]:\r\n\r\ngoroutine 20 gp=0xc000102a80 m=4 mp=0xc000080008 [running]:\r\nruntime.systemstack_switch()\r\n        /usr/local/go/src/runtime/asm_amd64.s:474 +0x8 fp=0xc000054e70 sp=0xc000054e60 pc=0x49b028\r\nruntime.traceAdvance(0x0)\r\n        /usr/local/go/src/runtime/trace2.go:519 +0x57f fp=0xc000054fb0 sp=0xc000054e70 pc=0x48a9df\r\nruntime.(*traceAdvancerState).start.func1()\r\n        /usr/local/go/src/runtime/trace2.go:883 +0x2f fp=0xc000054fe0 sp=0xc000054fb0 pc=0x48bcaf\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000054fe8 sp=0xc000054fe0 pc=0x49d001\r\ncreated by runtime.(*traceAdvancerState).start in goroutine 1\r\n        /usr/local/go/src/runtime/trace2.go:877 +0x165\r\n\r\ngoroutine 1 gp=0xc0000061c0 m=nil [runnable]:\r\nruntime.asyncPreempt2()\r\n        /usr/local/go/src/runtime/preempt.go:307 +0x39 fp=0xc000057d78 sp=0xc000057d58 pc=0x469779\r\nruntime.asyncPreempt()\r\n        /usr/local/go/src/runtime/preempt_amd64.s:53 +0xdb fp=0xc000057f00 sp=0xc000057d78 pc=0x49e51b\r\nmain.main()\r\n        /home/ec2-user/testrace/main.go:15 +0x77 fp=0xc000057f50 sp=0xc000057f00 pc=0x4a78b7\r\nruntime.main()\r\n        /usr/local/go/src/runtime/proc.go:271 +0x29d fp=0xc000057fe0 sp=0xc000057f50 pc=0x46ac1d\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x49d001\r\n\r\ngoroutine 2 gp=0xc000006c40 m=nil [force gc (idle)]:\r\nruntime.gopark(0x5585f0?, 0x564700?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc0000427a8 sp=0xc000042788 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n        /usr/local/go/src/runtime/proc.go:326 +0xb3 fp=0xc0000427e0 sp=0xc0000427a8 pc=0x46aef3\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000427e8 sp=0xc0000427e0 pc=0x49d001\r\ncreated by runtime.init.6 in goroutine 1\r\n        /usr/local/go/src/runtime/proc.go:314 +0x1a\r\n\r\ngoroutine 3 gp=0xc000007180 m=nil [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000052f80 sp=0xc000052f60 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.bgsweep(0xc00006a000)\r\n        /usr/local/go/src/runtime/mgcsweep.go:278 +0x94 fp=0xc000052fc8 sp=0xc000052f80 pc=0x457374\r\nruntime.gcenable.gowrap1()\r\n        /usr/local/go/src/runtime/mgc.go:203 +0x25 fp=0xc000052fe0 sp=0xc000052fc8 pc=0x44bee5\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000052fe8 sp=0xc000052fe0 pc=0x49d001\r\ncreated by runtime.gcenable in goroutine 1\r\n        /usr/local/go/src/runtime/mgc.go:203 +0x66\r\n\r\ngoroutine 4 gp=0xc000007340 m=nil [GC scavenge wait]:                                                                                                                              [31/766]\r\nruntime.gopark(0xc00006a000?, 0x4dc0b0?, 0x1?, 0x0?, 0xc000007340?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000112f78 sp=0xc000112f58 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x5640a0)\r\n        /usr/local/go/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc000112fa8 sp=0xc000112f78 pc=0x454d89\r\nruntime.bgscavenge(0xc00006a000)\r\n        /usr/local/go/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc000112fc8 sp=0xc000112fa8 pc=0x4552fc\r\nruntime.gcenable.gowrap2()\r\n        /usr/local/go/src/runtime/mgc.go:204 +0x25 fp=0xc000112fe0 sp=0xc000112fc8 pc=0x44be85\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000112fe8 sp=0xc000112fe0 pc=0x49d001\r\ncreated by runtime.gcenable in goroutine 1\r\n        /usr/local/go/src/runtime/mgc.go:204 +0xa5\r\n\r\ngoroutine 18 gp=0xc000102700 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000053e20 sp=0xc000053e00 pc=0x46b06e\r\nruntime.runfinq()\r\n        /usr/local/go/src/runtime/mfinal.go:194 +0x145 fp=0xc000053fe0 sp=0xc000053e20 pc=0x44af25\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000053fe8 sp=0xc000053fe0 pc=0x49d001\r\ncreated by runtime.createfing in goroutine 1\r\n        /usr/local/go/src/runtime/mfinal.go:164 +0x3d\r\n\r\ngoroutine 19 gp=0xc0001028c0 m=nil [chan receive]:\r\nruntime.gopark(0x471ef6?, 0xc000058f20?, 0xe5?, 0x8b?, 0xc000032508?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000058ed8 sp=0xc000058eb8 pc=0x46b06e\r\nruntime.chanrecv(0xc0001180c0, 0x0, 0x1)\r\n        /usr/local/go/src/runtime/chan.go:583 +0x36d fp=0xc000058f50 sp=0xc000058ed8 pc=0x43c90d\r\nruntime.chanrecv1(0xc000116050?, 0xeedefa415e?)\r\n        /usr/local/go/src/runtime/chan.go:442 +0x12 fp=0xc000058f78 sp=0xc000058f50 pc=0x43c592\r\nruntime.(*wakeableSleep).sleep(0xc000136000, 0x5f5e100)\r\n        /usr/local/go/src/runtime/trace2.go:943 +0xa7 fp=0xc000058fa8 sp=0xc000058f78 pc=0x48be27\r\nruntime.traceStartReadCPU.func1()\r\n        /usr/local/go/src/runtime/trace2cpu.go:56 +0x45 fp=0xc000058fe0 sp=0xc000058fa8 pc=0x48c9a5\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000058fe8 sp=0xc000058fe0 pc=0x49d001\r\ncreated by runtime.traceStartReadCPU in goroutine 1\r\n        /usr/local/go/src/runtime/trace2cpu.go:44 +0x156\r\n\r\ngoroutine 21 gp=0xc000102c40 m=nil [trace reader (blocked)]:\r\nruntime.gopark(0xc00003f778?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc00003f738 sp=0xc00003f718 pc=0x46b06e\r\nruntime.ReadTrace()\r\n        /usr/local/go/src/runtime/trace2.go:678 +0x31 fp=0xc00003f7a0 sp=0xc00003f738 pc=0x48b551\r\nruntime/trace.Start.func1()\r\n        /usr/local/go/src/runtime/trace/trace.go:130 +0x4a fp=0xc00003f7e0 sp=0xc00003f7a0 pc=0x4a768a\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc00003f7e8 sp=0xc00003f7e0 pc=0x49d001\r\ncreated by runtime/trace.Start in goroutine 1\r\n        /usr/local/go/src/runtime/trace/trace.go:128 +0x125\r\n\r\nrax    0x41db10\r\nrbx    0x5c3768\r\nrcx    0x0\r\nrdx    0x5c3768\r\nrdi    0x0\r\nrsi    0x0\r\nrbp    0x7f37a7ffe908\r\nrsp    0x7f37a7ffe8c8\r\nr8     0xa\r\nr9     0x52\r\nr10    0xc0000821c0\r\nr11    0xc0003c17a0\r\nr12    0x7f37a7ffe8d0\r\nr13    0xc000080008\r\nr14    0xc0000821c0\r\nr15    0x52\r\nrip    0x41d920\r\nrflags 0x10246\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n</details>\r\n\r\nHere's the traceback from a debugger:\r\n\r\n```\r\nThread 5 ""testrace"" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7fffadefc700 (LWP 9980)]\r\n0x000000000041d920 in __tsan::Acquire(__tsan::ThreadState*, unsigned long, unsigned long) ()\r\n(gdb) bt\r\n#0  0x000000000041d920 in __tsan::Acquire(__tsan::ThreadState*, unsigned long, unsigned long) ()\r\n#1  0x000000000049e71a in racecall () at /usr/local/go/src/runtime/race_amd64.s:396\r\n#2  0x000000000047b807 in runtime.raceacquireg (gp=<optimized out>, addr=<optimized out>) at /usr/local/go/src/runtime/race.go:529\r\n#3  0x000000000047aa25 in runtime.raceacquire (addr=<optimized out>) at /usr/local/go/src/runtime/profbuf.go:557\r\n#4  runtime.(*profBuf).read (b=<optimized out>, mode=1, data=..., tags=..., eof=<optimized out>) at /usr/local/go/src/runtime/profbuf.go:557\r\n#5  0x000000000048cba5 in runtime.traceReadCPU (gen=1, ~r0=<optimized out>) at /usr/local/go/src/runtime/trace2cpu.go:118\r\n#6  0x000000000048d1d8 in runtime.traceCPUFlush (gen=4315920) at /usr/local/go/src/runtime/trace2cpu.go:202\r\n#7  0x000000000048aea5 in runtime.traceAdvance.func4 () at /usr/local/go/src/runtime/trace2.go:525\r\n#8  0x000000000049b08a in runtime.systemstack () at /usr/local/go/src/runtime/asm_amd64.s:509\r\n#9  0x01007fffa4000020 in ?? ()\r\n#10 0x0000000000a00000 in __sanitizer::theDepot ()\r\n#11 0x000000c0000821c0 in ?? ()\r\n#12 0x000000c0000821c0 in ?? ()\r\n#13 0x000000000049af85 in runtime.mstart () at /usr/local/go/src/runtime/asm_amd64.s:394\r\n#14 0x0000000000437664 in runtime/cgo(.text) ()\r\n#15 0x00007fffaf2fdb80 in ?? ()\r\n#16 0x00000000014feaa0 in ?? ()\r\n#17 0x00007fffaf2fda8f in ?? ()\r\n#18 0x00007fffaf2fda8e in ?? ()\r\n#19 0x000000c0000821c0 in ?? ()\r\n#20 0x000000000049af80 in ?? ()\r\n#21 0x0000000000437244 in threadentry ()\r\n#22 0x0000000000000000 in ?? ()\r\n```\r\n\r\nIt's faulting on the first instruction in `__tsan::Acquire`, looks like the first argument is 0:\r\n\r\n```\r\n(gdb) disas $rip,$rip+8\r\nDump of assembler code from 0x41d920 to 0x41d928:\r\n=> 0x000000000041d920 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+0>:      mov    0x4(%rdi),%eax\r\n   0x000000000041d923 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+3>:      test   %eax,%eax\r\n   0x000000000041d925 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+5>:      je     0x41d930 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+16>\r\n   0x000000000041d927 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+7>:      retq \r\n(gdb) p $rdi\r\n$1 = 0\r\n```\n\n### What did you expect to see?\n\nNo crash.\r\n\r\nFWIW, it seems like the combination of race detector + execution tracer + CPU profiler, on Go 1.22, is not working. If I just run the CPU profiler, without the tracer, I don't see the crash. I also tried with Go 1.21.7 and didn't see a crash.",NeedsFix|compiler/runtime,prattmic,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ec2-user/.cache/go-build'\r\nGOENV='/home/ec2-user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ec2-user/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ec2-user/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ec2-user/testrace/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2165696407=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nRan this program, compiled with the race detector enabled:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""io""\r\n\t""runtime""\r\n\t""runtime/trace""\r\n)\r\n\r\nfunc main() {\r\n\truntime.SetCPUProfileRate(100)\r\n\ttrace.Start(io.Discard)\r\n\tdefer trace.Stop()\r\n\r\n\tfor {\r\n\t\twaste()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc waste() int {\r\n\treturn 42\r\n}\r\n```\n\n### What did you see happen?\n\nThe program crashes with a segfault during a race detector call:\r\n\r\n<details>\r\n<summary>crash output</summary>\r\n\r\n```\r\nSIGSEGV: segmentation violation\r\nPC=0x41d920 m=4 sigcode=1 addr=0x4\r\n\r\ngoroutine 0 gp=0xc0000821c0 m=4 mp=0xc000080008 [idle]:\r\n\r\ngoroutine 20 gp=0xc000102a80 m=4 mp=0xc000080008 [running]:\r\nruntime.systemstack_switch()\r\n        /usr/local/go/src/runtime/asm_amd64.s:474 +0x8 fp=0xc000054e70 sp=0xc000054e60 pc=0x49b028\r\nruntime.traceAdvance(0x0)\r\n        /usr/local/go/src/runtime/trace2.go:519 +0x57f fp=0xc000054fb0 sp=0xc000054e70 pc=0x48a9df\r\nruntime.(*traceAdvancerState).start.func1()\r\n        /usr/local/go/src/runtime/trace2.go:883 +0x2f fp=0xc000054fe0 sp=0xc000054fb0 pc=0x48bcaf\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000054fe8 sp=0xc000054fe0 pc=0x49d001\r\ncreated by runtime.(*traceAdvancerState).start in goroutine 1\r\n        /usr/local/go/src/runtime/trace2.go:877 +0x165\r\n\r\ngoroutine 1 gp=0xc0000061c0 m=nil [runnable]:\r\nruntime.asyncPreempt2()\r\n        /usr/local/go/src/runtime/preempt.go:307 +0x39 fp=0xc000057d78 sp=0xc000057d58 pc=0x469779\r\nruntime.asyncPreempt()\r\n        /usr/local/go/src/runtime/preempt_amd64.s:53 +0xdb fp=0xc000057f00 sp=0xc000057d78 pc=0x49e51b\r\nmain.main()\r\n        /home/ec2-user/testrace/main.go:15 +0x77 fp=0xc000057f50 sp=0xc000057f00 pc=0x4a78b7\r\nruntime.main()\r\n        /usr/local/go/src/runtime/proc.go:271 +0x29d fp=0xc000057fe0 sp=0xc000057f50 pc=0x46ac1d\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x49d001\r\n\r\ngoroutine 2 gp=0xc000006c40 m=nil [force gc (idle)]:\r\nruntime.gopark(0x5585f0?, 0x564700?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc0000427a8 sp=0xc000042788 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n        /usr/local/go/src/runtime/proc.go:326 +0xb3 fp=0xc0000427e0 sp=0xc0000427a8 pc=0x46aef3\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc0000427e8 sp=0xc0000427e0 pc=0x49d001\r\ncreated by runtime.init.6 in goroutine 1\r\n        /usr/local/go/src/runtime/proc.go:314 +0x1a\r\n\r\ngoroutine 3 gp=0xc000007180 m=nil [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000052f80 sp=0xc000052f60 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.bgsweep(0xc00006a000)\r\n        /usr/local/go/src/runtime/mgcsweep.go:278 +0x94 fp=0xc000052fc8 sp=0xc000052f80 pc=0x457374\r\nruntime.gcenable.gowrap1()\r\n        /usr/local/go/src/runtime/mgc.go:203 +0x25 fp=0xc000052fe0 sp=0xc000052fc8 pc=0x44bee5\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000052fe8 sp=0xc000052fe0 pc=0x49d001\r\ncreated by runtime.gcenable in goroutine 1\r\n        /usr/local/go/src/runtime/mgc.go:203 +0x66\r\n\r\ngoroutine 4 gp=0xc000007340 m=nil [GC scavenge wait]:                                                                                                                              [31/766]\r\nruntime.gopark(0xc00006a000?, 0x4dc0b0?, 0x1?, 0x0?, 0xc000007340?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000112f78 sp=0xc000112f58 pc=0x46b06e\r\nruntime.goparkunlock(...)\r\n        /usr/local/go/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x5640a0)\r\n        /usr/local/go/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc000112fa8 sp=0xc000112f78 pc=0x454d89\r\nruntime.bgscavenge(0xc00006a000)\r\n        /usr/local/go/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc000112fc8 sp=0xc000112fa8 pc=0x4552fc\r\nruntime.gcenable.gowrap2()\r\n        /usr/local/go/src/runtime/mgc.go:204 +0x25 fp=0xc000112fe0 sp=0xc000112fc8 pc=0x44be85\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000112fe8 sp=0xc000112fe0 pc=0x49d001\r\ncreated by runtime.gcenable in goroutine 1\r\n        /usr/local/go/src/runtime/mgc.go:204 +0xa5\r\n\r\ngoroutine 18 gp=0xc000102700 m=nil [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000053e20 sp=0xc000053e00 pc=0x46b06e\r\nruntime.runfinq()\r\n        /usr/local/go/src/runtime/mfinal.go:194 +0x145 fp=0xc000053fe0 sp=0xc000053e20 pc=0x44af25\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000053fe8 sp=0xc000053fe0 pc=0x49d001\r\ncreated by runtime.createfing in goroutine 1\r\n        /usr/local/go/src/runtime/mfinal.go:164 +0x3d\r\n\r\ngoroutine 19 gp=0xc0001028c0 m=nil [chan receive]:\r\nruntime.gopark(0x471ef6?, 0xc000058f20?, 0xe5?, 0x8b?, 0xc000032508?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc000058ed8 sp=0xc000058eb8 pc=0x46b06e\r\nruntime.chanrecv(0xc0001180c0, 0x0, 0x1)\r\n        /usr/local/go/src/runtime/chan.go:583 +0x36d fp=0xc000058f50 sp=0xc000058ed8 pc=0x43c90d\r\nruntime.chanrecv1(0xc000116050?, 0xeedefa415e?)\r\n        /usr/local/go/src/runtime/chan.go:442 +0x12 fp=0xc000058f78 sp=0xc000058f50 pc=0x43c592\r\nruntime.(*wakeableSleep).sleep(0xc000136000, 0x5f5e100)\r\n        /usr/local/go/src/runtime/trace2.go:943 +0xa7 fp=0xc000058fa8 sp=0xc000058f78 pc=0x48be27\r\nruntime.traceStartReadCPU.func1()\r\n        /usr/local/go/src/runtime/trace2cpu.go:56 +0x45 fp=0xc000058fe0 sp=0xc000058fa8 pc=0x48c9a5\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc000058fe8 sp=0xc000058fe0 pc=0x49d001\r\ncreated by runtime.traceStartReadCPU in goroutine 1\r\n        /usr/local/go/src/runtime/trace2cpu.go:44 +0x156\r\n\r\ngoroutine 21 gp=0xc000102c40 m=nil [trace reader (blocked)]:\r\nruntime.gopark(0xc00003f778?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        /usr/local/go/src/runtime/proc.go:402 +0xce fp=0xc00003f738 sp=0xc00003f718 pc=0x46b06e\r\nruntime.ReadTrace()\r\n        /usr/local/go/src/runtime/trace2.go:678 +0x31 fp=0xc00003f7a0 sp=0xc00003f738 pc=0x48b551\r\nruntime/trace.Start.func1()\r\n        /usr/local/go/src/runtime/trace/trace.go:130 +0x4a fp=0xc00003f7e0 sp=0xc00003f7a0 pc=0x4a768a\r\nruntime.goexit({})\r\n        /usr/local/go/src/runtime/asm_amd64.s:1695 +0x1 fp=0xc00003f7e8 sp=0xc00003f7e0 pc=0x49d001\r\ncreated by runtime/trace.Start in goroutine 1\r\n        /usr/local/go/src/runtime/trace/trace.go:128 +0x125\r\n\r\nrax    0x41db10\r\nrbx    0x5c3768\r\nrcx    0x0\r\nrdx    0x5c3768\r\nrdi    0x0\r\nrsi    0x0\r\nrbp    0x7f37a7ffe908\r\nrsp    0x7f37a7ffe8c8\r\nr8     0xa\r\nr9     0x52\r\nr10    0xc0000821c0\r\nr11    0xc0003c17a0\r\nr12    0x7f37a7ffe8d0\r\nr13    0xc000080008\r\nr14    0xc0000821c0\r\nr15    0x52\r\nrip    0x41d920\r\nrflags 0x10246\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n</details>\r\n\r\nHere's the traceback from a debugger:\r\n\r\n```\r\nThread 5 ""testrace"" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7fffadefc700 (LWP 9980)]\r\n0x000000000041d920 in __tsan::Acquire(__tsan::ThreadState*, unsigned long, unsigned long) ()\r\n(gdb) bt\r\n#0  0x000000000041d920 in __tsan::Acquire(__tsan::ThreadState*, unsigned long, unsigned long) ()\r\n#1  0x000000000049e71a in racecall () at /usr/local/go/src/runtime/race_amd64.s:396\r\n#2  0x000000000047b807 in runtime.raceacquireg (gp=<optimized out>, addr=<optimized out>) at /usr/local/go/src/runtime/race.go:529\r\n#3  0x000000000047aa25 in runtime.raceacquire (addr=<optimized out>) at /usr/local/go/src/runtime/profbuf.go:557\r\n#4  runtime.(*profBuf).read (b=<optimized out>, mode=1, data=..., tags=..., eof=<optimized out>) at /usr/local/go/src/runtime/profbuf.go:557\r\n#5  0x000000000048cba5 in runtime.traceReadCPU (gen=1, ~r0=<optimized out>) at /usr/local/go/src/runtime/trace2cpu.go:118\r\n#6  0x000000000048d1d8 in runtime.traceCPUFlush (gen=4315920) at /usr/local/go/src/runtime/trace2cpu.go:202\r\n#7  0x000000000048aea5 in runtime.traceAdvance.func4 () at /usr/local/go/src/runtime/trace2.go:525\r\n#8  0x000000000049b08a in runtime.systemstack () at /usr/local/go/src/runtime/asm_amd64.s:509\r\n#9  0x01007fffa4000020 in ?? ()\r\n#10 0x0000000000a00000 in __sanitizer::theDepot ()\r\n#11 0x000000c0000821c0 in ?? ()\r\n#12 0x000000c0000821c0 in ?? ()\r\n#13 0x000000000049af85 in runtime.mstart () at /usr/local/go/src/runtime/asm_amd64.s:394\r\n#14 0x0000000000437664 in runtime/cgo(.text) ()\r\n#15 0x00007fffaf2fdb80 in ?? ()\r\n#16 0x00000000014feaa0 in ?? ()\r\n#17 0x00007fffaf2fda8f in ?? ()\r\n#18 0x00007fffaf2fda8e in ?? ()\r\n#19 0x000000c0000821c0 in ?? ()\r\n#20 0x000000000049af80 in ?? ()\r\n#21 0x0000000000437244 in threadentry ()\r\n#22 0x0000000000000000 in ?? ()\r\n```\r\n\r\nIt's faulting on the first instruction in `__tsan::Acquire`, looks like the first argument is 0:\r\n\r\n```\r\n(gdb) disas $rip,$rip+8\r\nDump of assembler code from 0x41d920 to 0x41d928:\r\n=> 0x000000000041d920 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+0>:      mov    0x4(%rdi),%eax\r\n   0x000000000041d923 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+3>:      test   %eax,%eax\r\n   0x000000000041d925 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+5>:      je     0x41d930 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+16>\r\n   0x000000000041d927 <_ZN6__tsan7AcquireEPNS_11ThreadStateEmm+7>:      retq \r\n(gdb) p $rdi\r\n$1 = 0\r\n```\n\n### What did you expect to see?\n\nNo crash.\r\n\r\nFWIW, it seems like the combination of race detector + execution tracer + CPU profiler, on Go 1.22, is not working. If I just run the CPU profiler, without the tracer, I don't see the crash. I also tried with Go 1.21.7 and didn't see a crash.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ec2-user/.cache/go-build'\r\nGOENV='/home/ec2-user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ec2-user/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ec2-user/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ec2-user/testrace/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2165696407=/tmp/go-build -gno-record-gcc-switches'\n"
65605,"cmd/compile: generics add significant build time and build size overhead### Go version\n\ngo 1.20.7 linux/amd64 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nWe have a large DB-like solution in golang. This project has a fancy b-tree implementation with around 10x B-tree instances working with different key/value structs using interface{}.\r\nTo save some memory and improve the performance we recently switched to generics, so B-Tree is now a parametrized struct with key/value types.\n\n### What did you see happen?\n\nWe found the following important issues after switching to generics:\r\n1. Cold CI build time has increased from 6 to 16 minutes\r\n2. CLI tool executable size has increased from 48 to 58 MB.\r\n3. go build cache has increased from 760MB to 4.4GB (after clean build)\r\n\r\nAll of those seem rather bad and I hope someone would be interested looking into it.\n\n### What did you expect to see?\n\nNot so significant build time and go build cache size changes.\r\nExecutable size is not so important, though is very surprising as well.",ToolSpeed|NeedsInvestigation|binary-size|compiler/runtime,mdempsky,"### Go version\n\ngo 1.20.7 linux/amd64 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/user/Library/Caches/go-build'\r\nGOENV='/Users/user/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/user/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/user/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.3/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.3/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/03/7b5nrjcj4b31k3mvrqswnxxm0000gn/T/go-build1457705092=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nWe have a large DB-like solution in golang. This project has a fancy b-tree implementation with around 10x B-tree instances working with different key/value structs using interface{}.\r\nTo save some memory and improve the performance we recently switched to generics, so B-Tree is now a parametrized struct with key/value types.\n\n### What did you see happen?\n\nWe found the following important issues after switching to generics:\r\n1. Cold CI build time has increased from 6 to 16 minutes\r\n2. CLI tool executable size has increased from 48 to 58 MB.\r\n3. go build cache has increased from 760MB to 4.4GB (after clean build)\r\n\r\nAll of those seem rather bad and I hope someone would be interested looking into it.\n\n### What did you expect to see?\n\nNot so significant build time and go build cache size changes.\r\nExecutable size is not so important, though is very surprising as well.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/user/Library/Caches/go-build'\r\nGOENV='/Users/user/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/user/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/user/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.3/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.3/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/03/7b5nrjcj4b31k3mvrqswnxxm0000gn/T/go-build1457705092=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65593,"cmd/compile:  go test . results in CLOSURE ... <unknown line number>: internal compiler error: assertion failed### Go version\n\ngo1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nTest upgrading some things to go 1.22.0, was able to cut it down to fairly small reproducer (Which also fails on the playground, yay!):\r\n\r\nhttps://go.dev/play/p/SrzHxxnTmm7\n\n### What did you see happen?\n\nCLOSURE [prog_test.go:14:12:var messages chan struct{}]\r\n<unknown line number>: internal compiler error: assertion failed\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\n\n### What did you expect to see?\n\nAnything other than an assertion failed",NeedsInvestigation|compiler/runtime,mdempsky,"### Go version\n\ngo1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/alex/.cache/go-build'\r\nGOENV='/home/alex/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/alex/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/home/alex/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/alex/bug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3894783791=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nTest upgrading some things to go 1.22.0, was able to cut it down to fairly small reproducer (Which also fails on the playground, yay!):\r\n\r\nhttps://go.dev/play/p/SrzHxxnTmm7\n\n### What did you see happen?\n\nCLOSURE [prog_test.go:14:12:var messages chan struct{}]\r\n<unknown line number>: internal compiler error: assertion failed\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\n\n### What did you expect to see?\n\nAnything other than an assertion failed","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/alex/.cache/go-build'\r\nGOENV='/home/alex/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/alex/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/home/alex/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/alex/bug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3894783791=/tmp/go-build -gno-record-gcc-switches'\n"
65592,"proposal: spec: make len(a), cap(a) const for some type parameters### Proposal Details\n\nThe code\r\n\r\n\r\nshould be valid if the constraint `C` describes a type set containing only (pointer to) arrays and all arrays have the same length. Currently, the length and capacity of a type parameter value are always non-constant. Either way, the type is defined to be `int` per the spec. An `int` constant value can be used wherever an `int` non-constant value is permitted. Thus, this change is strictly backward-compatible; it simply increases the set of valid programs.\r\n\r\nSee also #50226.\r\n",Proposal,griesemer,"### Proposal Details\n\nThe code\r\n```Go\r\nfunc _[A C](a A) {\r\n   const _ = len(a) // or cap(a)\r\n}\r\n```\r\n\r\nshould be valid if the constraint `C` describes a type set containing only (pointer to) arrays and all arrays have the same length. Currently, the length and capacity of a type parameter value are always non-constant. Either way, the type is defined to be `int` per the spec. An `int` constant value can be used wherever an `int` non-constant value is permitted. Thus, this change is strictly backward-compatible; it simply increases the set of valid programs.\r\n\r\nSee also #50226.\r\n",Go\r\nfunc _[A C](a A) {\r\n   const _ = len(a) // or cap(a)\r\n}\r\n
65570,"cmd/go: go 1.22.0 inconsistent and variable code coverage output for the same folder### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nHaving a directory called, e.g., `holiday` with some go files and their corresponding test files, I called the `go test -cover` from the parent directory. Depending on directories arguments, I have different percentage values, which wasn't occurring on go < 1.22.0.\n\n### What did you see happen?\n\n\n\n### What did you expect to see?\n\nA consistent percentage value (in this case, 97.6%) for all commands:\r\n",GoCommand,thanm,"### Go version\n\ngo version go1.22.0 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/hamada/.cache/go-build'\r\nGOENV='/home/hamada/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/hamada/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/hamada/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/hamada/go/src/gitlab.in.registro.br/dev/br/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3637209596=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nHaving a directory called, e.g., `holiday` with some go files and their corresponding test files, I called the `go test -cover` from the parent directory. Depending on directories arguments, I have different percentage values, which wasn't occurring on go < 1.22.0.\n\n### What did you see happen?\n\n```shell\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./holiday/\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t(cached)\tcoverage: 97.6% of statements\r\n\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./h*\r\n...\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t0.005s\tcoverage: 47.3% of statements\r\n\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./...\r\n...\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t(cached)\tcoverage: 23.5% of statements\r\n...\r\n```\n\n### What did you expect to see?\n\nA consistent percentage value (in this case, 97.6%) for all commands:\r\n```shell\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./holiday/\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t(cached)\tcoverage: 97.6% of statements\r\n\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./h*\r\n...\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t0.005s\tcoverage: 97.6% of statements\r\n\r\nDEV=dev go test -tags dev -cover -buildvcs=false -ldflags '-s -w' ./...\r\n...\r\nok  \tgitlab.in.registro.br/dev/br/core/holiday\t(cached)\tcoverage: 97.6% of statements\r\n...\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/hamada/.cache/go-build'\r\nGOENV='/home/hamada/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/hamada/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/hamada/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go1.22.0'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go1.22.0/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/hamada/go/src/gitlab.in.registro.br/dev/br/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3637209596=/tmp/go-build -gno-record-gcc-switches'\n"
65549,"x/build: missing LUCI TryBot coverage for x/telemetry### Go version\n\n9819d8265f92e0797df646f9a7056bb979d0005b\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nSee #65544.\n\n### What did you see happen?\n\nhttps://go.dev/cl/560462 had a TryBot+1 vote from LUCI, but introduced deterministic failures on two [first class ports](https://go.dev/wiki/PortingPolicy#first-class-ports) (`linux/386` and `windows/386`).\n\n### What did you expect to see?\n\nI expect all user-facing `x/` repos to have TryBots configured for at least all of the first class ports that have scalable builders.",Builders|NeedsInvestigation,mknyszek|hyangah,"### Go version\n\n9819d8265f92e0797df646f9a7056bb979d0005b\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nSee #65544.\n\n### What did you see happen?\n\nhttps://go.dev/cl/560462 had a TryBot+1 vote from LUCI, but introduced deterministic failures on two [first class ports](https://go.dev/wiki/PortingPolicy#first-class-ports) (`linux/386` and `windows/386`).\n\n### What did you expect to see?\n\nI expect all user-facing `x/` repos to have TryBots configured for at least all of the first class ports that have scalable builders.",shell\nN/A\n
65544,"x/telemetry/internal/regtest: test consistently failing on many platforms since CL 560462```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/telemetry/internal/regtest"" && (\r\n\tgoarch == ""386"" ||\r\n\tgoarch == ""wasm"" ||\r\n\tgoos == ""android"" ||\r\n\tgoos == ""illumos"" ||\r\n\tgoos == ""solaris"" ||\r\n\tgoos == ""openbsd"" ||\r\n\tgoos == ""plan9"")\r\n```\r\n\r\n### Go version\r\n\r\n9819d8265f92e0797df646f9a7056bb979d0005b\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck builder status for #11811.\r\n\r\n### What did you see happen?\r\n\r\nhttps://build.golang.org/log/3ea3d15a5b41086aeb875a6846533cb78175b83b:\r\n```\r\n--- FAIL: TestE2E (0.00s)\r\n    e2e_test.go:145: unmet expectation:\r\n        got {}\r\n        want {\r\n        \t ""counter"": 1,\r\n        \t ""gopls/editor:expected"": 1,\r\n        \t ""stack/expected\\n"": 1\r\n        \t}\r\n    e2e_test.go:152: unmet expectation:\r\n        got {}\r\n        want {\r\n        \t ""counter:surprise"": 1,\r\n        \t ""gopls/editor:surprise"": 1,\r\n        \t ""stack-surprise\\n"": 1\r\n        \t}\r\nFAIL\r\nFAIL\tgolang.org/x/telemetry/internal/regtest\t0.024s\r\n```\r\n\r\nThis affects all `386` platforms, including the [first class ports](https://go.dev/wiki/PortingPolicy#first-class-ports) for `linux/386` and `windows/386`.\r\n\r\nSimilar failures occur on the `android`, `illumos`, `js`, `openbsd`, `plan9`, `solaris`, and `wasip1` builders, although since those are secondary ports perhaps they are just misconfigured builders.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests should be either passing or skipped, especially on first class ports such as `linux/386` and `windows/386`.\r\n\r\nFor secondary ports that are intentionally not supported, either the tests should be skipped or the builders should be configured not to run them in the first place.",Soon|telemetry,matloob,"```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/telemetry/internal/regtest"" && (\r\n\tgoarch == ""386"" ||\r\n\tgoarch == ""wasm"" ||\r\n\tgoos == ""android"" ||\r\n\tgoos == ""illumos"" ||\r\n\tgoos == ""solaris"" ||\r\n\tgoos == ""openbsd"" ||\r\n\tgoos == ""plan9"")\r\n```\r\n\r\n### Go version\r\n\r\n9819d8265f92e0797df646f9a7056bb979d0005b\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck builder status for #11811.\r\n\r\n### What did you see happen?\r\n\r\nhttps://build.golang.org/log/3ea3d15a5b41086aeb875a6846533cb78175b83b:\r\n```\r\n--- FAIL: TestE2E (0.00s)\r\n    e2e_test.go:145: unmet expectation:\r\n        got {}\r\n        want {\r\n        \t ""counter"": 1,\r\n        \t ""gopls/editor:expected"": 1,\r\n        \t ""stack/expected\\n"": 1\r\n        \t}\r\n    e2e_test.go:152: unmet expectation:\r\n        got {}\r\n        want {\r\n        \t ""counter:surprise"": 1,\r\n        \t ""gopls/editor:surprise"": 1,\r\n        \t ""stack-surprise\\n"": 1\r\n        \t}\r\nFAIL\r\nFAIL\tgolang.org/x/telemetry/internal/regtest\t0.024s\r\n```\r\n\r\nThis affects all `386` platforms, including the [first class ports](https://go.dev/wiki/PortingPolicy#first-class-ports) for `linux/386` and `windows/386`.\r\n\r\nSimilar failures occur on the `android`, `illumos`, `js`, `openbsd`, `plan9`, `solaris`, and `wasip1` builders, although since those are secondary ports perhaps they are just misconfigured builders.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests should be either passing or skipped, especially on first class ports such as `linux/386` and `windows/386`.\r\n\r\nFor secondary ports that are intentionally not supported, either the tests should be skipped or the builders should be configured not to run them in the first place.",shell\r\nN/A\r\n
65519,"x/tools/gopls: configuration ignored### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI have the following in my eglot configuration:\r\n```\r\n(setq-default eglot-workspace-configuration\r\n              '(:gopls (:analyses (:composites :json-false))))\r\n```\r\nThis works fine with gopls 0.16, but doesn't seem to do anything useful in gopls 0.17.\n\n### What did you see happen?\n\nWith gopls 0.17, Emacs displays diagnostics about unkeyed composites.  WIth gopls 0.16, composites diagnostics are correctly suppressed.\n\n### What did you expect to see?\n\nNo composites diagnostics in both 0.16 and 0.17.",NeedsInvestigation|gopls|Tools,findleyr,"### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/jch/.cache/go-build'\r\nGOENV='/home/jch/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/jch/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/jch/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go-1.21'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go-1.21/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/jch/go/src/github.com/jech/galene/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2905991881=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI have the following in my eglot configuration:\r\n```\r\n(setq-default eglot-workspace-configuration\r\n              '(:gopls (:analyses (:composites :json-false))))\r\n```\r\nThis works fine with gopls 0.16, but doesn't seem to do anything useful in gopls 0.17.\n\n### What did you see happen?\n\nWith gopls 0.17, Emacs displays diagnostics about unkeyed composites.  WIth gopls 0.16, composites diagnostics are correctly suppressed.\n\n### What did you expect to see?\n\nNo composites diagnostics in both 0.16 and 0.17.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/jch/.cache/go-build'\r\nGOENV='/home/jch/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/jch/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/jch/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go-1.21'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go-1.21/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/jch/go/src/github.com/jech/galene/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2905991881=/tmp/go-build -gno-record-gcc-switches'\n"
65505,"net/http: `Content-Length` values are not validated when `Transfer-Encoding: chunked` is present### Go version\n\ngo version devel go1.23-b8ac61e6e6 Fri Feb 2 23:14:07 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nStarted a web server using net/http, and sent a request with an invalid `Content-Length` header, as well as a `Transfer-Encoding: chunked` header. (e.g. `GET / HTTP/1.1\\r\\nHost: a\\r\\nContent-Length: blahblahblah\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\n`)\n\n### What did you see happen?\n\nI received a 200 response, as though the invalid `Content-Length` value were not sent.\n\n### What did you expect to see?\n\nI expected to see a 400 response because the `Content-Length` value was invalid.",Security|NeedsDecision,panjf2000,"### Go version\n\ngo version devel go1.23-b8ac61e6e6 Fri Feb 2 23:14:07 2024 +0000 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-b8ac61e6e6 Fri Feb 2 23:14:07 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1902103395=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nStarted a web server using net/http, and sent a request with an invalid `Content-Length` header, as well as a `Transfer-Encoding: chunked` header. (e.g. `GET / HTTP/1.1\\r\\nHost: a\\r\\nContent-Length: blahblahblah\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\n`)\n\n### What did you see happen?\n\nI received a 200 response, as though the invalid `Content-Length` value were not sent.\n\n### What did you expect to see?\n\nI expected to see a 400 response because the `Content-Length` value was invalid.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-b8ac61e6e6 Fri Feb 2 23:14:07 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1902103395=/tmp/go-build -gno-record-gcc-switches'\n"
65503,"x/telemetry/internal/counter: ErrDisabled references non-existent GOTELEMETRY environment variable### Go version\n\nn/a\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI read the source code of x/telemetry.\r\n\r\nhttps://github.com/golang/telemetry/blob/0391c11e4dcd12fa196c5be1a861988de5b6395c/internal/counter/file.go#L114-L115\n\n### What did you see happen?\n\nI expected the error message to be accurate. It currently implies that you can disable telemetry by setting `GOTELEMETRY=off`.\n\n### What did you expect to see?\n\nThis error message is incorrect. There is no `GOTELEMETRY` environment variable. The only way to disable telemetry is to explicitly install `golang.org/x/telemetry/cmd/gotelemetry` and run `gotelemetry off`, or equivalently create a file under `${os.UserConfigDir()}/go/telemetry/mode` that says ""off"".\r\n\r\nhttps://github.com/golang/telemetry/blob/0391c11e4dcd12fa196c5be1a861988de5b6395c/internal/telemetry/mode.go#L85-L91",telemetry,findleyr,"### Go version\n\nn/a\n\n### Output of `go env` in your module/workspace:\n\n```shell\nn/a\n```\n\n\n### What did you do?\n\nI read the source code of x/telemetry.\r\n\r\nhttps://github.com/golang/telemetry/blob/0391c11e4dcd12fa196c5be1a861988de5b6395c/internal/counter/file.go#L114-L115\n\n### What did you see happen?\n\nI expected the error message to be accurate. It currently implies that you can disable telemetry by setting `GOTELEMETRY=off`.\n\n### What did you expect to see?\n\nThis error message is incorrect. There is no `GOTELEMETRY` environment variable. The only way to disable telemetry is to explicitly install `golang.org/x/telemetry/cmd/gotelemetry` and run `gotelemetry off`, or equivalently create a file under `${os.UserConfigDir()}/go/telemetry/mode` that says ""off"".\r\n\r\nhttps://github.com/golang/telemetry/blob/0391c11e4dcd12fa196c5be1a861988de5b6395c/internal/telemetry/mode.go#L85-L91",shell\nn/a\n
65500,"x/telemetry: consolidate initialization into telemetry.StartThis issue summarizes a team discussion about integrating telemetry with cmd/go, or generally any tool that may be short-lived. Currently the only tool with telemetry integration is gopls, which is a long-running server and therefore doesn't need to worry about rate limiting or overhead when calling `upload.Run` once when it starts serving.\r\n\r\nThe plan was for cmd/go to occasionally start a subprocess to run `upload.Run`, but as we discussed the details of this, it became clear that this is something `x/telemetry` should manage.  cmd/go should be able to start telemetry without worrying about overhead.\r\n\r\nHere's an outline of how this could work:\r\n\r\n- Add a new `telemetry.Start` function to encapsulate the telemetry entrypoint:\r\n\r\n\r\n\r\n(some phrasing borrowed from https://go.dev/cl/559503, which added the `crashmonitor.Start` function that `telemetry.Start` would supersede).\r\n\r\n- As documented, `Start` would be in charge of calling `counter.Open`, `crashmonitor.Start`, and `upload.Run`, per the provided configuration. By encapsulating, `Start` can guarantee that the order of these calls is appropriate, and can share the subprocess for crash monitoring and uploading. Without encapsulation, we'd have to start _two_ subprocesses: one for crash monitoring and one for uploading, and they may interact poorly.\r\n- `Start` should daemonize itself, so that the upload may outlast a short-running process. (we can borrow from the [gopls daemon](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsprpc/autostart_posix.go;l=24;drc=129144e6c5b3b7ba7bb393275351dc3440cb08f7))\r\n- `Start` should implement rate limiting, to amortize its cost over many invocations. E.g. use lockfile acquisition to rate limit `upload.Run` to once a day. We do something like this for the gopls [telemetry prompt](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/server/prompt.go;l=175;drc=6d109d1133da8b25c847b69458614b0ab44da0fb).\r\n- If necessary, `Start` can wait a short amount of time in a goroutine (e.g. 1s) before doing anything expensive. This minimizes overhead extremely short-lived processes such as `go version`. This may or may not be necessary.\r\n\r\nCC @matloob @adonovan @hyangah @pjweinb ",telemetry,matloob,"This issue summarizes a team discussion about integrating telemetry with cmd/go, or generally any tool that may be short-lived. Currently the only tool with telemetry integration is gopls, which is a long-running server and therefore doesn't need to worry about rate limiting or overhead when calling `upload.Run` once when it starts serving.\r\n\r\nThe plan was for cmd/go to occasionally start a subprocess to run `upload.Run`, but as we discussed the details of this, it became clear that this is something `x/telemetry` should manage.  cmd/go should be able to start telemetry without worrying about overhead.\r\n\r\nHere's an outline of how this could work:\r\n\r\n- Add a new `telemetry.Start` function to encapsulate the telemetry entrypoint:\r\n\r\n```go\r\npackage telemetry\r\n\r\n// Config controls the behavior of [Start].\r\ntype Config struct {\r\n\tUpload       bool\r\n\tWatchCrashes bool\r\n\tLogger       io.Writer\r\n}\r\n\r\n// Start initializes telemetry, and may start a subprocess to monitor crashes\r\n// and process expired counter files.\r\n//\r\n// Specifically, start opens a counter file if local collection is enabled,\r\n// and starts a subprocess if [Config.WatchCrashes] is set or if the local\r\n// telemetry directory is due for processing. If [Config.Upload] is set, and\r\n// the user has opted in to telemetry uploading, this process may attempt to\r\n// upload approved counters to telemetry.go.dev.\r\n//\r\n// Start may re-execute the current executable as a child process, in a special\r\n// mode. In that mode, the call to Start will never return. Therefore, Start should\r\n// be called near the top of the main function of the application, and the\r\n// application should avoid doing expensive work in init functions as they will\r\n// be executed twice.\r\nfunc Start(cfg Config)\r\n```\r\n\r\n(some phrasing borrowed from https://go.dev/cl/559503, which added the `crashmonitor.Start` function that `telemetry.Start` would supersede).\r\n\r\n- As documented, `Start` would be in charge of calling `counter.Open`, `crashmonitor.Start`, and `upload.Run`, per the provided configuration. By encapsulating, `Start` can guarantee that the order of these calls is appropriate, and can share the subprocess for crash monitoring and uploading. Without encapsulation, we'd have to start _two_ subprocesses: one for crash monitoring and one for uploading, and they may interact poorly.\r\n- `Start` should daemonize itself, so that the upload may outlast a short-running process. (we can borrow from the [gopls daemon](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsprpc/autostart_posix.go;l=24;drc=129144e6c5b3b7ba7bb393275351dc3440cb08f7))\r\n- `Start` should implement rate limiting, to amortize its cost over many invocations. E.g. use lockfile acquisition to rate limit `upload.Run` to once a day. We do something like this for the gopls [telemetry prompt](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/server/prompt.go;l=175;drc=6d109d1133da8b25c847b69458614b0ab44da0fb).\r\n- If necessary, `Start` can wait a short amount of time in a goroutine (e.g. 1s) before doing anything expensive. This minimizes overhead extremely short-lived processes such as `go version`. This may or may not be necessary.\r\n\r\nCC @matloob @adonovan @hyangah @pjweinb ","go\r\npackage telemetry\r\n\r\n// Config controls the behavior of [Start].\r\ntype Config struct {\r\n\tUpload       bool\r\n\tWatchCrashes bool\r\n\tLogger       io.Writer\r\n}\r\n\r\n// Start initializes telemetry, and may start a subprocess to monitor crashes\r\n// and process expired counter files.\r\n//\r\n// Specifically, start opens a counter file if local collection is enabled,\r\n// and starts a subprocess if [Config.WatchCrashes] is set or if the local\r\n// telemetry directory is due for processing. If [Config.Upload] is set, and\r\n// the user has opted in to telemetry uploading, this process may attempt to\r\n// upload approved counters to telemetry.go.dev.\r\n//\r\n// Start may re-execute the current executable as a child process, in a special\r\n// mode. In that mode, the call to Start will never return. Therefore, Start should\r\n// be called near the top of the main function of the application, and the\r\n// application should avoid doing expensive work in init functions as they will\r\n// be executed twice.\r\nfunc Start(cfg Config)\r\n"
65496,"x/tools/gopls: make it clearer when diagnostics come from a non-default build context### Go version\n\ngo1.21.6\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\ndownload x/telemetry at tip. Then in counter/counter.go and counter/counter_disabled.go remove the references to 386 in //go:build lines. (one in each file)\n\n### What did you see happen?\n\nType errors on c in counter/countertest/counter_test.go:\r\n\r\ncannot use c (variable of type *""golang.org/x/telemetry/counter"".Counter) as *""golang.org/x/telemetry/internal/counter"".Counter value in argument to ReadCountercompiler[IncompatibleAssign](https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#IncompatibleAssign)\n\n### What did you expect to see?\n\nno errors. The tests in countertest/counter_test.go compile without errors and run.",gopls|Tools,adonovan,"### Go version\n\ngo1.21.6\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/pjw/Library/Caches/go-build""\r\nGOENV=""/Users/pjw/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/pjw/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/pjw/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/pjw/alt/telemetry/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xx/sy8s7hy16mnfcj8kyn5hwq5800052r/T/go-build2649792271=/tmp/go-build -gno-record-gcc-switches -fno-common""\n```\n\n\n### What did you do?\n\ndownload x/telemetry at tip. Then in counter/counter.go and counter/counter_disabled.go remove the references to 386 in //go:build lines. (one in each file)\n\n### What did you see happen?\n\nType errors on c in counter/countertest/counter_test.go:\r\n\r\ncannot use c (variable of type *""golang.org/x/telemetry/counter"".Counter) as *""golang.org/x/telemetry/internal/counter"".Counter value in argument to ReadCountercompiler[IncompatibleAssign](https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#IncompatibleAssign)\n\n### What did you expect to see?\n\nno errors. The tests in countertest/counter_test.go compile without errors and run.","shell\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/pjw/Library/Caches/go-build""\r\nGOENV=""/Users/pjw/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/pjw/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/pjw/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/pjw/alt/telemetry/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xx/sy8s7hy16mnfcj8kyn5hwq5800052r/T/go-build2649792271=/tmp/go-build -gno-record-gcc-switches -fno-common""\n"
65494,"x/tools/gopls: Labels are treated as parameters when assigning semantic tokens### gopls version\n\n0.14.2-1\n\n### go env\n\n\n\n\n### What did you do?\n\nCreate a label called `mylabel` and then inspect the semantic token assigned to it using an inspection tool.\n\n### What did you see happen?\n\nThe language server treats `mylabel` as function parameters rather than a keyword or a variable. \r\n\r\nOn Neovim:\r\n\r\n![2024-02-03-21-05-49](https://github.com/golang/go/assets/69449791/5d57cfc1-85ad-450a-ae76-6509fd6012da)\r\n\r\nOn VsCode:\r\n\r\n![2024-02-03-20-56-53](https://github.com/golang/go/assets/69449791/016cdf97-19ec-4c59-a188-de43d9c966cc)\r\n\n\n### What did you expect to see?\n\nI'm not sure if it's because I'm misinterpreting the language, but I don't think labels and function parameters are semantically equivalent. I would expect a more appropriate semantic token to be assigned to labels. Either that, or don't assign any semantic tokens to labels at all\u2014a syntax highlighter like Treesitter can detect labels just fine since labels require a special syntax. \n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_",gopls|Tools,adonovan,"### gopls version\n\n0.14.2-1\n\n### go env\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/anthony93/.cache/go-build'\r\nGOENV='/home/anthony93/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/anthony93/Devfiles/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/anthony93/Devfiles/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/anthony93/Devfiles/testing/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build410492386=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nCreate a label called `mylabel` and then inspect the semantic token assigned to it using an inspection tool.\n\n### What did you see happen?\n\nThe language server treats `mylabel` as function parameters rather than a keyword or a variable. \r\n\r\nOn Neovim:\r\n\r\n![2024-02-03-21-05-49](https://github.com/golang/go/assets/69449791/5d57cfc1-85ad-450a-ae76-6509fd6012da)\r\n\r\nOn VsCode:\r\n\r\n![2024-02-03-20-56-53](https://github.com/golang/go/assets/69449791/016cdf97-19ec-4c59-a188-de43d9c966cc)\r\n\n\n### What did you expect to see?\n\nI'm not sure if it's because I'm misinterpreting the language, but I don't think labels and function parameters are semantically equivalent. I would expect a more appropriate semantic token to be assigned to labels. Either that, or don't assign any semantic tokens to labels at all\u2014a syntax highlighter like Treesitter can detect labels just fine since labels require a special syntax. \n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/anthony93/.cache/go-build'\r\nGOENV='/home/anthony93/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/anthony93/Devfiles/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/anthony93/Devfiles/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/anthony93/Devfiles/testing/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build410492386=/tmp/go-build -gno-record-gcc-switches'\n"
65419,"io/fs: SubFS.Open returns incorrect errors for invalid paths### Go version\n\ngo version go1.21.1 linux/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThe documentation for the `fs.FS` interface says:\r\n\r\n> Open should reject attempts to open names that do not satisfy ValidPath(name), returning a *PathError with Err set to ErrInvalid or ErrNotExist.\r\n\r\nThe errors returned by `SubFS.Open()` do not fulfill this contract, as demonstrated by https://go.dev/play/p/N5lvehlpeB5. Calling Open with an invalid path returns a *PathError with Err set to `errors.New(""invalid name"")` instead. This breaks any code that accepts an `fs.FS` and attempts to handle the documented errors.\n\n### What did you see happen?\n\n```\r\nerr open ./: invalid name\r\nisInvalid false\r\nisNotExist false\r\n```\n\n### What did you expect to see?\n\n```\r\nerr open ./: invalid argument\r\nisInvalid true\r\nisNotExist false\r\n```",NeedsFix|FixPending,panjf2000,"### Go version\n\ngo version go1.21.1 linux/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/vscode/.cache/go-build'\r\nGOENV='/home/vscode/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY='github.com/paulhammond'\r\nGONOSUMDB='github.com/paulhammond'\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE='github.com/paulhammond'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/workspace/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2551620224=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nThe documentation for the `fs.FS` interface says:\r\n\r\n> Open should reject attempts to open names that do not satisfy ValidPath(name), returning a *PathError with Err set to ErrInvalid or ErrNotExist.\r\n\r\nThe errors returned by `SubFS.Open()` do not fulfill this contract, as demonstrated by https://go.dev/play/p/N5lvehlpeB5. Calling Open with an invalid path returns a *PathError with Err set to `errors.New(""invalid name"")` instead. This breaks any code that accepts an `fs.FS` and attempts to handle the documented errors.\n\n### What did you see happen?\n\n```\r\nerr open ./: invalid name\r\nisInvalid false\r\nisNotExist false\r\n```\n\n### What did you expect to see?\n\n```\r\nerr open ./: invalid argument\r\nisInvalid true\r\nisNotExist false\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/vscode/.cache/go-build'\r\nGOENV='/home/vscode/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY='github.com/paulhammond'\r\nGONOSUMDB='github.com/paulhammond'\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE='github.com/paulhammond'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/workspace/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2551620224=/tmp/go-build -gno-record-gcc-switches'\n"
65417,"cmd/compile: constant bounds check inconsistency with type parameters### Go version\n\ngo version go1.21.6 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nThis won't build, as it's known at compile time that the index is out of bounds of the constant string ([playground](https://go.dev/play/p/iSW442k3Uwe)):\r\n```\r\nfunc wontBuild[T byte]() {\r\n\tconst str = ""a""\r\n\tvar t T\r\n\tvar _ = str[unsafe.Sizeof(t)]\r\n}\r\n```\r\n\r\nThis does build, though, even though the only difference is some arithmetic (+1) on the index, which is even more out of bounds. It instead produces a runtime panic ([playground](https://go.dev/play/p/zW7lp7sC_2z)):\r\n```\r\nfunc panics[T byte]() {\r\n\tconst str = ""a""\r\n\tvar t T\r\n\tvar _ = str[unsafe.Sizeof(t)+1]\r\n}\r\n```\n\n### What did you see happen?\n\nAn inconsistency in how the unsafe.Sizeof() pseudo-constants are applied to static bounds checks.\n\n### What did you expect to see?\n\nI'd expect neither version to build.\r\n\r\nThis was discovered when attempting to make an offset slice into a string constant, the offset depending on the passed type's size. In that particular case it would have panicked if a sufficiently large type was applied to the function, but no code ever used that large types with it. It would be nice if the compiler could ignore this error in case it's only ever fed smaller types. Probably difficult, though.",Suggested|NeedsFix|compiler/runtime,mdempsky|cuonglm,"### Go version\n\ngo version go1.21.6 windows/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\telic\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\telic\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\telic\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\telic\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.6\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\telic\\AppData\\Local\\Temp\\go-build2584633790=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\nThis won't build, as it's known at compile time that the index is out of bounds of the constant string ([playground](https://go.dev/play/p/iSW442k3Uwe)):\r\n```\r\nfunc wontBuild[T byte]() {\r\n\tconst str = ""a""\r\n\tvar t T\r\n\tvar _ = str[unsafe.Sizeof(t)]\r\n}\r\n```\r\n\r\nThis does build, though, even though the only difference is some arithmetic (+1) on the index, which is even more out of bounds. It instead produces a runtime panic ([playground](https://go.dev/play/p/zW7lp7sC_2z)):\r\n```\r\nfunc panics[T byte]() {\r\n\tconst str = ""a""\r\n\tvar t T\r\n\tvar _ = str[unsafe.Sizeof(t)+1]\r\n}\r\n```\n\n### What did you see happen?\n\nAn inconsistency in how the unsafe.Sizeof() pseudo-constants are applied to static bounds checks.\n\n### What did you expect to see?\n\nI'd expect neither version to build.\r\n\r\nThis was discovered when attempting to make an offset slice into a string constant, the offset depending on the passed type's size. In that particular case it would have panicked if a sufficiently large type was applied to the function, but no code ever used that large types with it. It would be nice if the compiler could ignore this error in case it's only ever fed smaller types. Probably difficult, though.","shell\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\telic\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\telic\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\telic\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\telic\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.6\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\telic\\AppData\\Local\\Temp\\go-build2584633790=/tmp/go-build -gno-record-gcc-switches\n"
65414,"runtime: array index not starting at 0 in memstats.PauseNs on windows### Go version\n\n1.21.5\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\ncollected runtime.Memstats on Windows\n\n### What did you see happen?\n\n\r\nThere have been 9 garbage collections according to NumGC and also the PauseEnd array; However, the PauseNs array only shows two pause times, and they are incorrectly positioned in the array (the first time is logged at PauseNs[4] rather than PauseNs[0])\r\n,""PauseTotalNs"":1999400,""PauseNs"":[0,0,0,0,1000100,999300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],""PauseEnd"":[1706534601618276400,1706534601625558600,1706534601643261400,1706534601677238900,1706534601781174700,1706534602022683900,1706534602465533900,1706534603516006900,1706534604837389800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],""NumGC"":9,\n\n### What did you expect to see?\n\n9 PauseNs times (the same as PauseEnd)",NeedsFix|compiler/runtime,mknyszek,"### Go version\n\n1.21.5\n\n### Output of `go env` in your module/workspace:\n\n```shell\nset GO111MODULE=auto\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\M\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\M\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\Malle\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Malle\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.5\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\M\\AppData\\Local\\Temp\\go-build808946283=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\ncollected runtime.Memstats on Windows\n\n### What did you see happen?\n\n\r\nThere have been 9 garbage collections according to NumGC and also the PauseEnd array; However, the PauseNs array only shows two pause times, and they are incorrectly positioned in the array (the first time is logged at PauseNs[4] rather than PauseNs[0])\r\n,""PauseTotalNs"":1999400,""PauseNs"":[0,0,0,0,1000100,999300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],""PauseEnd"":[1706534601618276400,1706534601625558600,1706534601643261400,1706534601677238900,1706534601781174700,1706534602022683900,1706534602465533900,1706534603516006900,1706534604837389800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],""NumGC"":9,\n\n### What did you expect to see?\n\n9 PauseNs times (the same as PauseEnd)","shell\nset GO111MODULE=auto\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\M\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\M\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\Malle\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Malle\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.5\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\M\\AppData\\Local\\Temp\\go-build808946283=/tmp/go-build -gno-record-gcc-switches\n"
65382,"text/template: parsing and re-rendering a PipeNode replaces a range assignment with a declaration### Go version\n\ngo version go1.21.5 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nGiven the following template:\r\n\r\n```\r\n{{$y := .}}\r\n\r\n{{ range $y = .sub }}\r\n{{ . }}\r\n{{ end }}\r\n\r\n{{ $y }}\r\n```\r\n\r\nafter parsing the template, and write the String repl of the parsed tree using:\r\n```\r\nfor _, n := range tpl.Tree.Root.Nodes {\r\n\t\tfmt.Print(n.String())\r\n\t}\r\n```\r\n\r\nthe result comes back as:\r\n\r\n```\r\n{{$y := .}}\r\n\r\n{{range $y := .sub}}\r\n{{.}}\r\n{{end}}\r\n\r\n{{$y}}\r\n```\r\n\r\nnotice that the `range` changed from `assignment` to `declare`\r\n\r\nhttps://github.com/golang/go/blob/702d609a31f02007b471c072b633fa4238554022/src/text/template/parse/node.go#L220C1-L221C1\r\nwriteto should test whether it is assigment or declare\n\n### What did you see happen?\n\nthe assignment part of the range changed to declaration.\n\n### What did you expect to see?\n\nthe semantic is preserved during parse -> String roundtrip.\r\n",NeedsInvestigation,robpike,"### Go version\n\ngo version go1.21.5 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\n...\n```\n\n\n### What did you do?\n\nGiven the following template:\r\n\r\n```\r\n{{$y := .}}\r\n\r\n{{ range $y = .sub }}\r\n{{ . }}\r\n{{ end }}\r\n\r\n{{ $y }}\r\n```\r\n\r\nafter parsing the template, and write the String repl of the parsed tree using:\r\n```\r\nfor _, n := range tpl.Tree.Root.Nodes {\r\n\t\tfmt.Print(n.String())\r\n\t}\r\n```\r\n\r\nthe result comes back as:\r\n\r\n```\r\n{{$y := .}}\r\n\r\n{{range $y := .sub}}\r\n{{.}}\r\n{{end}}\r\n\r\n{{$y}}\r\n```\r\n\r\nnotice that the `range` changed from `assignment` to `declare`\r\n\r\nhttps://github.com/golang/go/blob/702d609a31f02007b471c072b633fa4238554022/src/text/template/parse/node.go#L220C1-L221C1\r\nwriteto should test whether it is assigment or declare\n\n### What did you see happen?\n\nthe assignment part of the range changed to declaration.\n\n### What did you expect to see?\n\nthe semantic is preserved during parse -> String roundtrip.\r\n","shell\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\n...\n"
65366,cmd/compile: instantiation cycle error in method### Go version\n\n1.21\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/Rs1R0zaMrys\n\n### What did you see happen?\n\n./prog.go:14:12: instantiation cycle:\r\n\t./prog.go:16:38: E instantiated as []E\n\n### What did you expect to see?\n\nno error occurred,NeedsInvestigation|generics,griesemer,"### Go version\n\n1.21\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOOS='darwin'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_5/gqm2bdhs6jg5vpcqx9rp17qh0000gn/T/go-build1059361469=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/Rs1R0zaMrys\n\n### What did you see happen?\n\n./prog.go:14:12: instantiation cycle:\r\n\t./prog.go:16:38: E instantiated as []E\n\n### What did you expect to see?\n\nno error occurred","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOOS='darwin'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_5/gqm2bdhs6jg5vpcqx9rp17qh0000gn/T/go-build1059361469=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65362,"cmd/compile: recursive generic interface instantiation error### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI wrote the code shown below and in the following playground link: https://go.dev/play/p/d8XxoEklO6D\r\n\r\n\n\n### What did you see happen?\n\nThe compiler produced the following error:\r\n\r\n```\r\n./prog.go:38:27: cannot use v2Interface (type ReadVector[int]) as type ReadVector[go.shape.int] in argument to (*VectorImpl[go.shape.int]).Difference:\r\n\tReadVector[int] does not implement ReadVector[go.shape.int] (wrong type for Difference method)\r\n\t\thave Difference(ReadVector[int]) Vector[int]\r\n\t\twant Difference(ReadVector[go.shape.int]) go.shape.interface { main.otherMethods() }\r\n\r\nGo build failed.\r\n```\n\n### What did you expect to see?\n\nI expected the program to compile and print the empty Vector[int] structure value.\r\n\r\nOf note is if you change the second generic parameter on line 11 to ```Vector[int]``` as well as the corresponding type on the Difference method on line then the compiler successfully finishes, and the program works as intended.\r\n\r\nI am not sure if this is relevant, but the compiler error does not list the difference method on the Vector return type of the Difference method in the error it produces. It prints this:\r\n```\r\nwant Difference(ReadVector[go.shape.int]) go.shape.interface { main.otherMethods() }\r\n```\r\nwhen I think it should print something like this (formatting added for readability):\r\n```\r\nwant Difference(ReadVector[go.shape.int]) go.shape.interface { \r\n    main.otherMethods() \r\n    main.Difference(\r\n        ReadVector[go.shape.int]\r\n    ) go.shape.interface{ main.otherMethods(); ReadVector[go.shape.int]} \r\n}\r\n```\r\nI am guessing on the syntax of the output shown above, I am just saying what would make sense to see based on what I am already seeing, I am sure the correct output is different.\r\n\r\nI am not sure what the rules are regarding recursive interface type definitions as shown in the example, and the issue is only compounded by the added generics.",NeedsFix|generics,mdempsky|cuonglm,"### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/jcarmichael/.cache/go-build'\r\nGOENV='/home/jcarmichael/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/jcarmichael/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/jcarmichael/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/c/Users/Lenovo/Documents/Programming/util/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1952531264=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nI wrote the code shown below and in the following playground link: https://go.dev/play/p/d8XxoEklO6D\r\n\r\n```golang\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype Comparisons[OI any, OIR any, K any, V any] interface {\r\n\tDifference(other OIR) OI\r\n}\r\n\r\n// An interface that only allows read operations on a vector.\r\ntype ReadVector[V any] interface {\r\n\tComparisons[Vector[V], ReadVector[V], int, V]\r\n}\r\n\r\n// An interface that only allows write operations on a vector.\r\ntype WriteVector[V any] interface {\r\n\totherMethods()\r\n}\r\n\r\n// An interface that represents a vector with no restrictions on reading or\r\n// writing.\r\ntype Vector[V any] interface {\r\n\tReadVector[V]\r\n\tWriteVector[V]\r\n}\r\n\r\ntype VectorImpl[T any] struct{}\r\n\r\nfunc (v *VectorImpl[T]) otherMethods() {}\r\nfunc (v *VectorImpl[T]) Difference(other ReadVector[T]) Vector[T] {\r\n\trv := VectorImpl[T]{}\r\n\treturn &rv\r\n}\r\n\r\nfunc main() {\r\n\tv := VectorImpl[int]{}\r\n\tv2 := VectorImpl[int]{}\r\n\tvar v2Interface Vector[int] = &v2\r\n\tfmt.Println(v.Difference(v2Interface))\r\n}\r\n```\n\n### What did you see happen?\n\nThe compiler produced the following error:\r\n\r\n```\r\n./prog.go:38:27: cannot use v2Interface (type ReadVector[int]) as type ReadVector[go.shape.int] in argument to (*VectorImpl[go.shape.int]).Difference:\r\n\tReadVector[int] does not implement ReadVector[go.shape.int] (wrong type for Difference method)\r\n\t\thave Difference(ReadVector[int]) Vector[int]\r\n\t\twant Difference(ReadVector[go.shape.int]) go.shape.interface { main.otherMethods() }\r\n\r\nGo build failed.\r\n```\n\n### What did you expect to see?\n\nI expected the program to compile and print the empty Vector[int] structure value.\r\n\r\nOf note is if you change the second generic parameter on line 11 to ```Vector[int]``` as well as the corresponding type on the Difference method on line then the compiler successfully finishes, and the program works as intended.\r\n\r\nI am not sure if this is relevant, but the compiler error does not list the difference method on the Vector return type of the Difference method in the error it produces. It prints this:\r\n```\r\nwant Difference(ReadVector[go.shape.int]) go.shape.interface { main.otherMethods() }\r\n```\r\nwhen I think it should print something like this (formatting added for readability):\r\n```\r\nwant Difference(ReadVector[go.shape.int]) go.shape.interface { \r\n    main.otherMethods() \r\n    main.Difference(\r\n        ReadVector[go.shape.int]\r\n    ) go.shape.interface{ main.otherMethods(); ReadVector[go.shape.int]} \r\n}\r\n```\r\nI am guessing on the syntax of the output shown above, I am just saying what would make sense to see based on what I am already seeing, I am sure the correct output is different.\r\n\r\nI am not sure what the rules are regarding recursive interface type definitions as shown in the example, and the issue is only compounded by the added generics.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/jcarmichael/.cache/go-build'\r\nGOENV='/home/jcarmichael/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/jcarmichael/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/jcarmichael/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/c/Users/Lenovo/Documents/Programming/util/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1952531264=/tmp/go-build -gno-record-gcc-switches'\n"
65290,"runtime/cgo: build fails with GOARCH=arm GOARM=5 CC=clang### Go version\n\ngo version go1.22rc2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n[Attempted to (cross-)compile a cgo program for Linux/ARMv5 using clang.](https://github.com/moby/moby/pull/46982#issuecomment-1898673129)\r\n\n\n### What did you see happen?\n\n\n\n### What did you expect to see?\n\nThe runtime/cgo package should build without error, like when using gcc.\r\n",NeedsFix|arch-arm|compiler/runtime|FixPending,mauri870,"### Go version\n\ngo version go1.22rc2 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3163621444=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n[Attempted to (cross-)compile a cgo program for Linux/ARMv5 using clang.](https://github.com/moby/moby/pull/46982#issuecomment-1898673129)\r\n\n\n### What did you see happen?\n\n```console\r\n$ docker run --rm -it golang:1.22rc2\r\nroot@f78e65b632f2:/go# apt update && apt install -y crossbuild-essential-armhf clang\r\n[...snip...]\r\nroot@f78e65b632f2:/go# clang --version\r\nDebian clang version 14.0.6\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\nroot@f78e65b632f2:/go# CC='clang --target=armv5-none-linux-gnu -mfloat-abi=hard --sysroot=/usr/arm-linux-gnueabihf' GOARCH=arm GOARM=5 CGO_ENABLED=1 go build runtime/cgo\r\n# runtime/cgo\r\ngcc_libinit.c:44:8: error: large atomic operation may incur significant performance penalty; the access size (4 bytes) exceeds the max lock-free size (0  bytes) [-Werror,-Watomic-alignment]\r\ngcc_libinit.c:47:6: error: large atomic operation may incur significant performance penalty; the access size (4 bytes) exceeds the max lock-free size (0  bytes) [-Werror,-Watomic-alignment]\r\ngcc_libinit.c:49:10: error: large atomic operation may incur significant performance penalty; the access size (4 bytes) exceeds the max lock-free size (0  bytes) [-Werror,-Watomic-alignment]\r\ngcc_libinit.c:69:9: error: large atomic operation may incur significant performance penalty; the access size (4 bytes) exceeds the max lock-free size (0  bytes) [-Werror,-Watomic-alignment]\r\ngcc_libinit.c:71:3: error: large atomic operation may incur significant performance penalty; the access size (4 bytes) exceeds the max lock-free size (0  bytes) [-Werror,-Watomic-alignment]\r\n```\n\n### What did you expect to see?\n\nThe runtime/cgo package should build without error, like when using gcc.\r\n```console\r\nroot@f78e65b632f2:/go# CC=arm-linux-gnueabihf-gcc GOARCH=arm GOARM=5 CGO_ENABLED=1 go build runtime/cgo\r\nroot@f78e65b632f2:/go# arm-linux-gnueabihf-gcc --version\r\narm-linux-gnueabihf-gcc (Debian 12.2.0-14) 12.2.0\r\nCopyright (C) 2022 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3163621444=/tmp/go-build -gno-record-gcc-switches'\n"
65271,"x/tools/gopls/internal/cache: TestZeroConfigAlgorithm failing on `wasm` builders### Go version\n\n2c35def7efab9b8305487c23cb0575751642ce1e\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nView https://ci.chromium.org/p/golang/g/x-tools-gotip/console\n\n### What did you see happen?\n\nFailures for all `wasm` platforms:\r\n- `js`: https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-js-wasm/b8757980955903953457/overview\r\n- `wasip1`: https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wazero/b8757980953151405937/overview\r\n\r\n```\r\n--- FAIL: TestZeroConfigAlgorithm (0.43s)\r\n--- FAIL: TestZeroConfigAlgorithm/basic_AdHoc_workspace (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_GOPATH_workspace (0.04s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_go.mod_workspace (0.06s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_go.work_workspace (0.06s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/go.work_from_env (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/independent_module_view (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multi-folder_workspace (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multi-module_workspace (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multiple_go.work (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multiple_go.work,_c_unused (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/unified_workspace (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/zero-config_open_module (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/zero-config_open_modules (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\nFAIL\r\nFAIL\tgolang.org/x/tools/gopls/internal/cache\t2.264s\r\n```\n\n### What did you expect to see?\n\nAll tests either passing or skipped on the configured builders.\r\n\r\nI suspect that this test just needs a call to `testenv.NeedsGoPackages` or similar.\r\n\r\n(attn @findleyr)",Testing|NeedsFix|arch-wasm|gopls|Tools,findleyr,"### Go version\n\n2c35def7efab9b8305487c23cb0575751642ce1e\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nView https://ci.chromium.org/p/golang/g/x-tools-gotip/console\n\n### What did you see happen?\n\nFailures for all `wasm` platforms:\r\n- `js`: https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-js-wasm/b8757980955903953457/overview\r\n- `wasip1`: https://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wazero/b8757980953151405937/overview\r\n\r\n```\r\n--- FAIL: TestZeroConfigAlgorithm (0.43s)\r\n--- FAIL: TestZeroConfigAlgorithm/basic_AdHoc_workspace (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_GOPATH_workspace (0.04s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_go.mod_workspace (0.06s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/basic_go.work_workspace (0.06s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/go.work_from_env (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/independent_module_view (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multi-folder_workspace (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multi-module_workspace (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multiple_go.work (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/multiple_go.work,_c_unused (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/unified_workspace (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/zero-config_open_module (0.02s)\r\n    session_test.go:253: fetching env: <nil>\r\n--- FAIL: TestZeroConfigAlgorithm/zero-config_open_modules (0.03s)\r\n    session_test.go:253: fetching env: <nil>\r\nFAIL\r\nFAIL\tgolang.org/x/tools/gopls/internal/cache\t2.264s\r\n```\n\n### What did you expect to see?\n\nAll tests either passing or skipped on the configured builders.\r\n\r\nI suspect that this test just needs a call to `testenv.NeedsGoPackages` or similar.\r\n\r\n(attn @findleyr)",shell\nN/A\n
65264,"cmd/go: list with -export and -covermode=atomic fails to build### Go version\n\ngo version go1.21.6 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n```\r\n$ go list -export -cover -race cmd/nm\r\n# cmd/nm\r\n/usr/local/go/src/cmd/nm/doc.go:41:37: could not import sync/atomic (open : no such file or directory)\r\ncmd/nm\r\n```\n\n### What did you see happen?\n\n```\r\n$ go list -export -cover -race cmd/nm\r\n# cmd/nm\r\n/usr/local/go/src/cmd/nm/doc.go:41:37: could not import sync/atomic (open : no such file or directory)\r\ncmd/nm\r\n```\n\n### What did you expect to see?\n\n`go build -cover -race` works as expected. We would expect the `go list` command to succeed as well.\r\nWhen running `go list ...` with `-work`, we can see `sync/atomic` is correctly added to the `*.cover.go` files, but it is not included in `importcfg`:\r\n```\r\n# import config\r\npackagefile bufio=~/Library/Caches/go-build/b9/b98806a14c72980fa955342a2ffef07b871d95ac024cd8fd668021668be97816-d\r\npackagefile cmd/internal/objfile=~/Library/Caches/go-build/b9/b9262c3ee809db084e17516b1c55810e3f3150e22831e4f4eafbf1a888855364-d\r\npackagefile flag=~/Library/Caches/go-build/13/139eccd9f3144df8ee6480494307f2b06aa9bf19ba2f74cb4c7f9d14115d7819-d\r\npackagefile fmt=~/Library/Caches/go-build/a3/a37fb0a0c11e799c4992ab511760fee037811f5481a1f7c4cf63ce7e08c3a0e6-d\r\npackagefile log=~/Library/Caches/go-build/f1/f18a69602c944d8e4e1364a2d89a5c45cb101025319fb7c4cbe6a196fe249832-d\r\npackagefile os=~/Library/Caches/go-build/d6/d64010892cba9d91f2fd56ee1177c4e1a48b5012f9ae1f58b8825412d853c590-d\r\npackagefile sort=~/Library/Caches/go-build/0d/0daf4569d16ea11206c9465ae9f23f50a11e2ac546adbf32f8dc054a301e08d5-d\r\npackagefile runtime=~/Library/Caches/go-build/e1/e1997716a043c5092d7ab1465a0a8e05c834335e26d446fedf0f9c4ac0c349d7-d\r\npackagefile runtime/coverage=~/Library/Caches/go-build/e3/e30bc0cbef27b51d08c1ea7c44994cc02766dd15dd6435600a5ede665bb052c0-d\r\n```",NeedsInvestigation|GoCommand|compiler/runtime,thanm,"### Go version\n\ngo version go1.21.6 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='~/Library/Caches/go-build'\r\nGOENV='~/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='~/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='~/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/y8/kc0q4v_x1454fr__4l32j26w0000gp/T/go-build2219730342=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n```\r\n$ go list -export -cover -race cmd/nm\r\n# cmd/nm\r\n/usr/local/go/src/cmd/nm/doc.go:41:37: could not import sync/atomic (open : no such file or directory)\r\ncmd/nm\r\n```\n\n### What did you see happen?\n\n```\r\n$ go list -export -cover -race cmd/nm\r\n# cmd/nm\r\n/usr/local/go/src/cmd/nm/doc.go:41:37: could not import sync/atomic (open : no such file or directory)\r\ncmd/nm\r\n```\n\n### What did you expect to see?\n\n`go build -cover -race` works as expected. We would expect the `go list` command to succeed as well.\r\nWhen running `go list ...` with `-work`, we can see `sync/atomic` is correctly added to the `*.cover.go` files, but it is not included in `importcfg`:\r\n```\r\n# import config\r\npackagefile bufio=~/Library/Caches/go-build/b9/b98806a14c72980fa955342a2ffef07b871d95ac024cd8fd668021668be97816-d\r\npackagefile cmd/internal/objfile=~/Library/Caches/go-build/b9/b9262c3ee809db084e17516b1c55810e3f3150e22831e4f4eafbf1a888855364-d\r\npackagefile flag=~/Library/Caches/go-build/13/139eccd9f3144df8ee6480494307f2b06aa9bf19ba2f74cb4c7f9d14115d7819-d\r\npackagefile fmt=~/Library/Caches/go-build/a3/a37fb0a0c11e799c4992ab511760fee037811f5481a1f7c4cf63ce7e08c3a0e6-d\r\npackagefile log=~/Library/Caches/go-build/f1/f18a69602c944d8e4e1364a2d89a5c45cb101025319fb7c4cbe6a196fe249832-d\r\npackagefile os=~/Library/Caches/go-build/d6/d64010892cba9d91f2fd56ee1177c4e1a48b5012f9ae1f58b8825412d853c590-d\r\npackagefile sort=~/Library/Caches/go-build/0d/0daf4569d16ea11206c9465ae9f23f50a11e2ac546adbf32f8dc054a301e08d5-d\r\npackagefile runtime=~/Library/Caches/go-build/e1/e1997716a043c5092d7ab1465a0a8e05c834335e26d446fedf0f9c4ac0c349d7-d\r\npackagefile runtime/coverage=~/Library/Caches/go-build/e3/e30bc0cbef27b51d08c1ea7c44994cc02766dd15dd6435600a5ede665bb052c0-d\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='~/Library/Caches/go-build'\r\nGOENV='~/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='~/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='~/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/y8/kc0q4v_x1454fr__4l32j26w0000gp/T/go-build2219730342=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65255,"    runtime: waitforsingleobject wait_failed### Go version\r\n\r\ngo1.21.6\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI downloaded golang.org/x/telemetry and ran\r\ngo test ./internal/counter/... -run Rotate -count 70\r\n\r\n### What did you see happen?\r\n\r\n```\r\nruntime: waitforsingleobject wait_failed; errno=6\r\nfatal error: runtime.semasleep wait_failed\r\nruntime.preemptM: duplicatehandle failed; errno=6\r\nfatal error: runtime.preemptM: duplicatehandle failed\r\npanic during panic\r\n\r\nruntime stack:\r\nruntime.throw({0xb08f80?, 0xffffffffffffffff?})\r\n        C:/Program Files/Go/src/runtime/panic.go:1077 +0x65 fp=0x6f267ff038 sp=0x6f267ff008 pc=0x9c95e5\r\nruntime.preemptM(0x1?)\r\n        C:/Program Files/Go/src/runtime/os_windows.go:1313 +0x476 fp=0x6f267ff598 sp=0x6f267ff038 pc=0x9c6f36\r\nruntime.preemptone(0x6f267ff5d8?)\r\n        C:/Program Files/Go/src/runtime/proc.go:5790 +0x55 fp=0x6f267ff5b0 sp=0x6f267ff598 pc=0x9d7a75\r\nruntime.preemptall()\r\n        C:/Program Files/Go/src/runtime/proc.go:5752 +0x4f fp=0x6f267ff5e8 sp=0x6f267ff5b0 pc=0x9d79ef\r\nruntime.freezetheworld()\r\n        C:/Program Files/Go/src/runtime/proc.go:961 +0x105 fp=0x6f267ff618 sp=0x6f267ff5e8 pc=0x9cd565\r\nruntime.startpanic_m()\r\n        C:/Program Files/Go/src/runtime/panic.go:1263 +0x13c fp=0x6f267ff640 sp=0x6f267ff618 pc=0x9c9c3c\r\nruntime.fatalthrow.func1()\r\n        C:/Program Files/Go/src/runtime/panic.go:1168 +0x2e fp=0x6f267ff680 sp=0x6f267ff640 pc=0x9c994e\r\nruntime.fatalthrow(0x267ff6c8?)\r\n        C:/Program Files/Go/src/runtime/panic.go:1163 +0x65 fp=0x6f267ff6c0 sp=0x6f267ff680 pc=0x9c98e5\r\nruntime.throw({0xb05c02?, 0x9c61d6?})\r\n        C:/Program Files/Go/src/runtime/panic.go:1077 +0x65 fp=0x6f267ff6f0 sp=0x6f267ff6c0 pc=0x9c95e5\r\nruntime.semasleep.func2()\r\n        C:/Program Files/Go/src/runtime/os_windows.go:822 +0x6a fp=0x6f267ff718 sp=0x6f267ff6f0 pc=0x9f2c8a\r\nruntime.semasleep(0xc0003249c0?)\r\n        C:/Program Files/Go/src/runtime/os_windows.go:820 +0x11c fp=0x6f267ff780 sp=0x6f267ff718 pc=0x9c55bc\r\nruntime.notesleep(0xc0000a1518)\r\n        C:/Program Files/Go/src/runtime/lock_sema.go:181 +0x92 fp=0x6f267ff7b8 sp=0x6f267ff780 pc=0x99c072\r\nruntime.mPark(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:1632\r\nruntime.stopm()\r\n        C:/Program Files/Go/src/runtime/proc.go:2536 +0x8c fp=0x6f267ff7e8 sp=0x6f267ff7b8 pc=0x9d016c\r\nruntime.findRunnable()\r\n        C:/Program Files/Go/src/runtime/proc.go:3229 +0xb9c fp=0x6f267ff8f8 sp=0x6f267ff7e8 pc=0x9d1a9c\r\nruntime.schedule()\r\n        C:/Program Files/Go/src/runtime/proc.go:3582 +0xb1 fp=0x6f267ff930 sp=0x6f267ff8f8 pc=0x9d2891\r\nruntime.park_m(0xc0000949c0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:3745 +0x11f fp=0x6f267ff978 sp=0x6f267ff930 pc=0x9d2d9f\r\ntraceback: unexpected SPWRITE function runtime.mcall\r\nruntime.mcall()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:458 +0x53 fp=0x6f267ff990 sp=0x6f267ff978 pc=0x9f8f33\r\n\r\ngoroutine 1 [chan receive]:\r\nruntime.gopark(0xc0000d19e8?, 0x99da05?, 0x88?, 0xfd?, 0x18?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000587980 sp=0xc000587960 pc=0x9cc26e\r\nruntime.chanrecv(0xc0003abe30, 0xc0000d1a67, 0x1)\r\n        C:/Program Files/Go/src/runtime/chan.go:583 +0x3d0 fp=0xc0005879f8 sp=0xc000587980 pc=0x996b50\r\nruntime.chanrecv1(0xc28640?, 0xad18a0?)\r\n        C:/Program Files/Go/src/runtime/chan.go:442 +0x12 fp=0xc000587a20 sp=0xc0005879f8 pc=0x996772\r\ntesting.(*T).Run(0xc00038f860, {0xb00959?, 0x9ffe0d?}, 0xb0cc10)\r\n        C:/Program Files/Go/src/testing/testing.go:1649 +0x3c8 fp=0xc000587ae0 sp=0xc000587a20 pc=0xa6e388\r\ntesting.runTests.func1(0xc290a0?)\r\n        C:/Program Files/Go/src/testing/testing.go:2054 +0x3e fp=0xc000587b30 sp=0xc000587ae0 pc=0xa7043e\r\ntesting.tRunner(0xc00038f860, 0xc0000d1c48)\r\n        C:/Program Files/Go/src/testing/testing.go:1595 +0xff fp=0xc000587b80 sp=0xc000587b30 pc=0xa6d55f\r\ntesting.runTests(0xc0000b6460?, {0xc24680, 0xb, 0xb}, {0x9a36bf?, 0xc0000d1d08?, 0xc28880?})\r\n        C:/Program Files/Go/src/testing/testing.go:2052 +0x445 fp=0xc000587c78 sp=0xc000587b80 pc=0xa70325\r\ntesting.(*M).Run(0xc0000b6460)\r\n        C:/Program Files/Go/src/testing/testing.go:1925 +0x636 fp=0xc000587ec0 sp=0xc000587c78 pc=0xa6ed16\r\nmain.main()\r\n        _testmain.go:67 +0x19c fp=0xc000587f40 sp=0xc000587ec0 pc=0xac2f7c\r\nruntime.main()\r\n        C:/Program Files/Go/src/runtime/proc.go:267 +0x2b2 fp=0xc000587fe0 sp=0xc000587f40 pc=0x9cbe32\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000587fe8 sp=0xc000587fe0 pc=0x9faf61\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000097fa8 sp=0xc000097f88 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n        C:/Program Files/Go/src/runtime/proc.go:322 +0xb8 fp=0xc000097fe0 sp=0xc000097fa8 pc=0x9cc0d8\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000097fe8 sp=0xc000097fe0 pc=0x9faf61\r\ncreated by runtime.init.6 in goroutine 1\r\n        C:/Program Files/Go/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x1?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000099f78 sp=0xc000099f58 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n        C:/Program Files/Go/src/runtime/mgcsweep.go:321 +0xdf fp=0xc000099fc8 sp=0xc000099f78 pc=0x9b4ebf\r\nruntime.gcenable.func1()\r\n        C:/Program Files/Go/src/runtime/mgc.go:200 +0x25 fp=0xc000099fe0 sp=0xc000099fc8 pc=0x9aa005\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000099fe8 sp=0xc000099fe0 pc=0x9faf61\r\ncreated by runtime.gcenable in goroutine 1\r\n        C:/Program Files/Go/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [runnable]:\r\nruntime.gopark(0xc0000a4000?, 0xb35678?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc0000abf70 sp=0xc0000abf50 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0xc28900)\r\n        C:/Program Files/Go/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc0000abfa0 sp=0xc0000abf70 pc=0x9b2749\r\nruntime.bgscavenge(0xc0000a4000?)\r\n        C:/Program Files/Go/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc0000abfc8 sp=0xc0000abfa0 pc=0x9b2cf9\r\nruntime.gcenable.func2()\r\n        C:/Program Files/Go/src/runtime/mgc.go:201 +0x25 fp=0xc0000abfe0 sp=0xc0000abfc8 pc=0x9a9fa5\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000abfe8 sp=0xc0000abfe0 pc=0x9faf61\r\ncreated by runtime.gcenable in goroutine 1\r\n        C:/Program Files/Go/src/runtime/mgc.go:201 +0xa5\r\n```\r\n\r\netc....\r\n\r\n### What did you expect to see?\r\n\r\nI expected either the test to pass or flaky test failures.\r\n\r\nThis failure is reproducible for me on my Windows virtual machine.",OS-Windows|NeedsInvestigation|compiler/runtime,cherrymui,"### Go version\r\n\r\ngo1.21.6\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\pjw\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\pjw\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\pjw\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\pjw\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.6\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=C:\\Users\\pjw\\telemetry\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\pjw\\AppData\\Local\\Temp\\go-build1353919923=/tmp/go-build -gno-record-gcc-switches\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI downloaded golang.org/x/telemetry and ran\r\ngo test ./internal/counter/... -run Rotate -count 70\r\n\r\n### What did you see happen?\r\n\r\n```\r\nruntime: waitforsingleobject wait_failed; errno=6\r\nfatal error: runtime.semasleep wait_failed\r\nruntime.preemptM: duplicatehandle failed; errno=6\r\nfatal error: runtime.preemptM: duplicatehandle failed\r\npanic during panic\r\n\r\nruntime stack:\r\nruntime.throw({0xb08f80?, 0xffffffffffffffff?})\r\n        C:/Program Files/Go/src/runtime/panic.go:1077 +0x65 fp=0x6f267ff038 sp=0x6f267ff008 pc=0x9c95e5\r\nruntime.preemptM(0x1?)\r\n        C:/Program Files/Go/src/runtime/os_windows.go:1313 +0x476 fp=0x6f267ff598 sp=0x6f267ff038 pc=0x9c6f36\r\nruntime.preemptone(0x6f267ff5d8?)\r\n        C:/Program Files/Go/src/runtime/proc.go:5790 +0x55 fp=0x6f267ff5b0 sp=0x6f267ff598 pc=0x9d7a75\r\nruntime.preemptall()\r\n        C:/Program Files/Go/src/runtime/proc.go:5752 +0x4f fp=0x6f267ff5e8 sp=0x6f267ff5b0 pc=0x9d79ef\r\nruntime.freezetheworld()\r\n        C:/Program Files/Go/src/runtime/proc.go:961 +0x105 fp=0x6f267ff618 sp=0x6f267ff5e8 pc=0x9cd565\r\nruntime.startpanic_m()\r\n        C:/Program Files/Go/src/runtime/panic.go:1263 +0x13c fp=0x6f267ff640 sp=0x6f267ff618 pc=0x9c9c3c\r\nruntime.fatalthrow.func1()\r\n        C:/Program Files/Go/src/runtime/panic.go:1168 +0x2e fp=0x6f267ff680 sp=0x6f267ff640 pc=0x9c994e\r\nruntime.fatalthrow(0x267ff6c8?)\r\n        C:/Program Files/Go/src/runtime/panic.go:1163 +0x65 fp=0x6f267ff6c0 sp=0x6f267ff680 pc=0x9c98e5\r\nruntime.throw({0xb05c02?, 0x9c61d6?})\r\n        C:/Program Files/Go/src/runtime/panic.go:1077 +0x65 fp=0x6f267ff6f0 sp=0x6f267ff6c0 pc=0x9c95e5\r\nruntime.semasleep.func2()\r\n        C:/Program Files/Go/src/runtime/os_windows.go:822 +0x6a fp=0x6f267ff718 sp=0x6f267ff6f0 pc=0x9f2c8a\r\nruntime.semasleep(0xc0003249c0?)\r\n        C:/Program Files/Go/src/runtime/os_windows.go:820 +0x11c fp=0x6f267ff780 sp=0x6f267ff718 pc=0x9c55bc\r\nruntime.notesleep(0xc0000a1518)\r\n        C:/Program Files/Go/src/runtime/lock_sema.go:181 +0x92 fp=0x6f267ff7b8 sp=0x6f267ff780 pc=0x99c072\r\nruntime.mPark(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:1632\r\nruntime.stopm()\r\n        C:/Program Files/Go/src/runtime/proc.go:2536 +0x8c fp=0x6f267ff7e8 sp=0x6f267ff7b8 pc=0x9d016c\r\nruntime.findRunnable()\r\n        C:/Program Files/Go/src/runtime/proc.go:3229 +0xb9c fp=0x6f267ff8f8 sp=0x6f267ff7e8 pc=0x9d1a9c\r\nruntime.schedule()\r\n        C:/Program Files/Go/src/runtime/proc.go:3582 +0xb1 fp=0x6f267ff930 sp=0x6f267ff8f8 pc=0x9d2891\r\nruntime.park_m(0xc0000949c0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:3745 +0x11f fp=0x6f267ff978 sp=0x6f267ff930 pc=0x9d2d9f\r\ntraceback: unexpected SPWRITE function runtime.mcall\r\nruntime.mcall()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:458 +0x53 fp=0x6f267ff990 sp=0x6f267ff978 pc=0x9f8f33\r\n\r\ngoroutine 1 [chan receive]:\r\nruntime.gopark(0xc0000d19e8?, 0x99da05?, 0x88?, 0xfd?, 0x18?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000587980 sp=0xc000587960 pc=0x9cc26e\r\nruntime.chanrecv(0xc0003abe30, 0xc0000d1a67, 0x1)\r\n        C:/Program Files/Go/src/runtime/chan.go:583 +0x3d0 fp=0xc0005879f8 sp=0xc000587980 pc=0x996b50\r\nruntime.chanrecv1(0xc28640?, 0xad18a0?)\r\n        C:/Program Files/Go/src/runtime/chan.go:442 +0x12 fp=0xc000587a20 sp=0xc0005879f8 pc=0x996772\r\ntesting.(*T).Run(0xc00038f860, {0xb00959?, 0x9ffe0d?}, 0xb0cc10)\r\n        C:/Program Files/Go/src/testing/testing.go:1649 +0x3c8 fp=0xc000587ae0 sp=0xc000587a20 pc=0xa6e388\r\ntesting.runTests.func1(0xc290a0?)\r\n        C:/Program Files/Go/src/testing/testing.go:2054 +0x3e fp=0xc000587b30 sp=0xc000587ae0 pc=0xa7043e\r\ntesting.tRunner(0xc00038f860, 0xc0000d1c48)\r\n        C:/Program Files/Go/src/testing/testing.go:1595 +0xff fp=0xc000587b80 sp=0xc000587b30 pc=0xa6d55f\r\ntesting.runTests(0xc0000b6460?, {0xc24680, 0xb, 0xb}, {0x9a36bf?, 0xc0000d1d08?, 0xc28880?})\r\n        C:/Program Files/Go/src/testing/testing.go:2052 +0x445 fp=0xc000587c78 sp=0xc000587b80 pc=0xa70325\r\ntesting.(*M).Run(0xc0000b6460)\r\n        C:/Program Files/Go/src/testing/testing.go:1925 +0x636 fp=0xc000587ec0 sp=0xc000587c78 pc=0xa6ed16\r\nmain.main()\r\n        _testmain.go:67 +0x19c fp=0xc000587f40 sp=0xc000587ec0 pc=0xac2f7c\r\nruntime.main()\r\n        C:/Program Files/Go/src/runtime/proc.go:267 +0x2b2 fp=0xc000587fe0 sp=0xc000587f40 pc=0x9cbe32\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000587fe8 sp=0xc000587fe0 pc=0x9faf61\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000097fa8 sp=0xc000097f88 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n        C:/Program Files/Go/src/runtime/proc.go:322 +0xb8 fp=0xc000097fe0 sp=0xc000097fa8 pc=0x9cc0d8\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000097fe8 sp=0xc000097fe0 pc=0x9faf61\r\ncreated by runtime.init.6 in goroutine 1\r\n        C:/Program Files/Go/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x1?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc000099f78 sp=0xc000099f58 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n        C:/Program Files/Go/src/runtime/mgcsweep.go:321 +0xdf fp=0xc000099fc8 sp=0xc000099f78 pc=0x9b4ebf\r\nruntime.gcenable.func1()\r\n        C:/Program Files/Go/src/runtime/mgc.go:200 +0x25 fp=0xc000099fe0 sp=0xc000099fc8 pc=0x9aa005\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000099fe8 sp=0xc000099fe0 pc=0x9faf61\r\ncreated by runtime.gcenable in goroutine 1\r\n        C:/Program Files/Go/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [runnable]:\r\nruntime.gopark(0xc0000a4000?, 0xb35678?, 0x0?, 0x0?, 0x0?)\r\n        C:/Program Files/Go/src/runtime/proc.go:398 +0xce fp=0xc0000abf70 sp=0xc0000abf50 pc=0x9cc26e\r\nruntime.goparkunlock(...)\r\n        C:/Program Files/Go/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0xc28900)\r\n        C:/Program Files/Go/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc0000abfa0 sp=0xc0000abf70 pc=0x9b2749\r\nruntime.bgscavenge(0xc0000a4000?)\r\n        C:/Program Files/Go/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc0000abfc8 sp=0xc0000abfa0 pc=0x9b2cf9\r\nruntime.gcenable.func2()\r\n        C:/Program Files/Go/src/runtime/mgc.go:201 +0x25 fp=0xc0000abfe0 sp=0xc0000abfc8 pc=0x9a9fa5\r\nruntime.goexit()\r\n        C:/Program Files/Go/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000abfe8 sp=0xc0000abfe0 pc=0x9faf61\r\ncreated by runtime.gcenable in goroutine 1\r\n        C:/Program Files/Go/src/runtime/mgc.go:201 +0xa5\r\n```\r\n\r\netc....\r\n\r\n### What did you expect to see?\r\n\r\nI expected either the test to pass or flaky test failures.\r\n\r\nThis failure is reproducible for me on my Windows virtual machine.","shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\pjw\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\pjw\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\pjw\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\pjw\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.6\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=C:\\Users\\pjw\\telemetry\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\pjw\\AppData\\Local\\Temp\\go-build1353919923=/tmp/go-build -gno-record-gcc-switches\r\n"
65244,"net/http: Empty header names erroneously accepted### Go version\r\n\r\ngo version devel go1.23-b3acaa8230 Tue Jan 23 20:08:07 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nStarted a web server using net/http, and sent a request that contained a header with an empty name. (for example, `GET / HTTP/1.1\\r\\n: ignored\\r\\nHost: whatever\\r\\n\\r\\n`)\r\n\r\n### What did you see happen?\r\n\r\nThe server ignored the offending header (It was not available through the `Request.Header` interface)\r\n\r\n### What did you expect to see?\r\n\r\nA 400 response. This is what Apache, Nginx, H2O, Node (with llhttp built from main), Lighttpd, and most other popular HTTP implementations do.\r\n\r\nThere are two reasons to reject messages with empty headers:\r\n1. The standard says that header names must be nonempty:\r\n> ```\r\n>   field-name     = token\r\n>   token          = 1*tchar\r\n>   tchar          = ""!"" / ""#"" / ""$"" / ""%"" / ""&"" / ""'"" / ""*""\r\n>                  / ""+"" / ""-"" / ""."" / ""^"" / ""_"" / ""`"" / ""|"" / ""~""\r\n>                  / DIGIT / ALPHA\r\n>                  ; any VCHAR, except delimiters\r\n> ```\r\n\r\n2. Some servers treat `\\r\\n:\\r\\n` as equivalent to `\\r\\n\\r\\n`. Those servers will then see the end of the message body where net/http sees (and ignores) an empty header. This is a potential HTTP request smuggling vector.",Security|NeedsFix,panjf2000,"### Go version\r\n\r\ngo version devel go1.23-b3acaa8230 Tue Jan 23 20:08:07 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-b3acaa8230 Tue Jan 23 20:08:07 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build965832195=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nStarted a web server using net/http, and sent a request that contained a header with an empty name. (for example, `GET / HTTP/1.1\\r\\n: ignored\\r\\nHost: whatever\\r\\n\\r\\n`)\r\n\r\n### What did you see happen?\r\n\r\nThe server ignored the offending header (It was not available through the `Request.Header` interface)\r\n\r\n### What did you expect to see?\r\n\r\nA 400 response. This is what Apache, Nginx, H2O, Node (with llhttp built from main), Lighttpd, and most other popular HTTP implementations do.\r\n\r\nThere are two reasons to reject messages with empty headers:\r\n1. The standard says that header names must be nonempty:\r\n> ```\r\n>   field-name     = token\r\n>   token          = 1*tchar\r\n>   tchar          = ""!"" / ""#"" / ""$"" / ""%"" / ""&"" / ""'"" / ""*""\r\n>                  / ""+"" / ""-"" / ""."" / ""^"" / ""_"" / ""`"" / ""|"" / ""~""\r\n>                  / DIGIT / ALPHA\r\n>                  ; any VCHAR, except delimiters\r\n> ```\r\n\r\n2. Some servers treat `\\r\\n:\\r\\n` as equivalent to `\\r\\n\\r\\n`. Those servers will then see the end of the message body where net/http sees (and ignores) an empty header. This is a potential HTTP request smuggling vector.","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-b3acaa8230 Tue Jan 23 20:08:07 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build965832195=/tmp/go-build -gno-record-gcc-switches'\r\n"
65230,x/vuln: How is this tool intended to be used in an air-gapped development environment?### govulncheck version\n\nN/A\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nN/A\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nN/A\n\n### What did you see happen?\n\nN/A\n\n### What did you expect to see?\n\nDocumentation on how to bring the db and tooling into a usb-stick and how to set up and run it as similar for the isolated development environment (with no access to internet). \r\n,vulncheck or vulndb,zpavlinovic|tatianab,### govulncheck version\n\nN/A\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nN/A\n\n### Output of `go env` in your module/workspace:\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nN/A\n\n### What did you see happen?\n\nN/A\n\n### What did you expect to see?\n\nDocumentation on how to bring the db and tooling into a usb-stick and how to set up and run it as similar for the isolated development environment (with no access to internet). \r\n,shell\nN/A\n
65215,"x/pkgsite-metrics: failed to create new OS thread with new gvisor version### Go version\n\n1.21.2\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRun pkgsite-metrics in production.\n\n### What did you see happen?\n\n`'go clean' failed with output runtime: failed to create new OS thread`\r\n\r\nThe number of long-lived processes grows with each served request. After about 500 requests, the number of alive processes is > 32k and that kills the server. This happens with a new version of runsc [20240115.0](https://github.com/google/gvisor/releases/tag/release-20240115.0)\n\n### What did you expect to see?\n\nThe number of processes should remain near constant.",NeedsInvestigation,zpavlinovic,"### Go version\n\n1.21.2\n\n### Output of `go env` in your module/workspace:\n\n```shell\n-\n```\n\n\n### What did you do?\n\nRun pkgsite-metrics in production.\n\n### What did you see happen?\n\n`'go clean' failed with output runtime: failed to create new OS thread`\r\n\r\nThe number of long-lived processes grows with each served request. After about 500 requests, the number of alive processes is > 32k and that kills the server. This happens with a new version of runsc [20240115.0](https://github.com/google/gvisor/releases/tag/release-20240115.0)\n\n### What did you expect to see?\n\nThe number of processes should remain near constant.",shell\n-\n
65202,"go/types, types2: type inference limitation leads to incorrect result for directed channel type constraint### Proposal Details\r\n\r\nThink such code:\r\ncan be found here: https://go.dev/play/p/qNBK9KjxqrW\r\n\r\n\r\nthen `Chan(c)` produce `chan int does not satisfy ~<-chan int (chan int missing in ~<-chan int)`\r\n\r\n\r\nIn my opinion, this is a flaw in generic design that should be supported",NeedsInvestigation|generics|TypeInference,griesemer,"### Proposal Details\r\n\r\nThink such code:\r\ncan be found here: https://go.dev/play/p/qNBK9KjxqrW\r\n```go\r\nfunc Chan[E any, C ~<-chan E](c C) {}\r\n\r\nfunc x() {\r\n    c := make(chan int)\r\n    Chan(c)\r\n}\r\n```\r\n\r\nthen `Chan(c)` produce `chan int does not satisfy ~<-chan int (chan int missing in ~<-chan int)`\r\n\r\n\r\nIn my opinion, this is a flaw in generic design that should be supported","go\r\nfunc Chan[E any, C ~<-chan E](c C) {}\r\n\r\nfunc x() {\r\n    c := make(chan int)\r\n    Chan(c)\r\n}\r\n"
65195,"runtime: gcControllerState.heapLive from mgcpacer.go inconsistent with gc-guide's Live Heap### Go version\r\n\r\ngo version devel go1.22-8db131082d Thu Jan 4 23:31:17 2024 +0000 darwin/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI'm looking at https://tip.golang.org/doc/gc-guide, trying to find the parameter to tune the appropriate memory limit.  One interesting value is ""Live Heap"" from this graph.\r\n<img width=""1231"" alt=""Screenshot 2024-01-22 at 10 14 32"" src=""https://github.com/golang/go/assets/2764799/da55de90-aff6-438c-8f40-854f8c7bc30c"">\r\n\r\nMy understanding is ""Live Heap"" represents the left heap memory after each GC cycle (after sweep phase, and remain the same as time goes), i.e, the marked memory after each GC (provided GCPercent not changed). This is consistent with this issue https://github.com/golang/go/issues/56857, which takes `heapMarked` as `Live Heap` value.\r\n\r\nHowever, there's a specific field `heapLive`, along with `heapMarked`\r\n\r\n```\r\ntype gcControllerState struct {\r\n\t// heapLive is the number of bytes considered live by the GC.\r\n\t// That is: retained by the most recent GC plus allocated\r\n\t// since then. heapLive \u2264 memstats.totalAlloc-memstats.totalFree, since\r\n\t// heapAlloc includes unmarked objects that have not yet been swept (and\r\n\t// hence goes up as we allocate and down as we sweep) while heapLive\r\n\t// excludes these objects (and hence only goes up between GCs).\r\n\t//\r\n\t// To reduce contention, this is updated only when obtaining a span\r\n\t// from an mcentral and at this point it counts all of the unallocated\r\n\t// slots in that span (which will be allocated before that mcache\r\n\t// obtains another span from that mcentral). Hence, it slightly\r\n\t// overestimates the ""true"" live heap size. It's better to overestimate\r\n\t// than to underestimate because 1) this triggers the GC earlier than\r\n\t// necessary rather than potentially too late and 2) this leads to a\r\n\t// conservative GC rate rather than a GC rate that is potentially too\r\n\t// low.\r\n\t//\r\n\t// Whenever this is updated, call traceHeapAlloc() and\r\n\t// this gcControllerState's revise() method.\r\n\theapLive atomic.Uint64\r\n\r\n\t// heapMarked is the number of bytes marked by the previous\r\n\t// GC. After mark termination, heapLive == heapMarked, but\r\n\t// unlike heapLive, heapMarked does not change until the\r\n\t// next mark termination.\r\n\theapMarked uint64\r\n}\r\n```\r\n\r\n`heapLive` from above `gcControllerState` context actually grows as new allocate happens, and in most time `heapLive` > `heapMarked`. After GC Mark phase work done, `heapLive` = `heapMarked` . This is a bit confusing for the two terminologies `heapLive` and `Live Heap`.\r\n\r\n### What did you see happen?\r\n\r\n`heapLive` and `Live Heap` are very closed naming, but mean something quite different across code and documentation.\r\n\r\n### What did you expect to see?\r\n\r\nEither `heapLive` or `Live Heap` gets updated to a better name. At this moment, updating `Live heap` seems more appropriate IMO, maybe `Marked Heap` ^?\r\n\r\n[/gc/heap/live:bytes](https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/metrics.go#L291) could probably be renamed to `/gc/heap/marked:bytes`.",compiler/runtime,mknyszek,"### Go version\r\n\r\ngo version devel go1.22-8db131082d Thu Jan 4 23:31:17 2024 +0000 darwin/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE='auto'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/smiletrl/Library/Caches/go-build'\r\nGOENV='/Users/smiletrl/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/smiletrl/go/src/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/smiletrl/go/src'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/smiletrl/go/src/github.com/smiletrl/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/smiletrl/go/src/github.com/smiletrl/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-8db131082d Thu Jan 4 23:31:17 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/smiletrl/go/src/github.com/smiletrl/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/sq/2123x_0d19s90tx1q2wpgtxr0000gn/T/go-build2832210919=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI'm looking at https://tip.golang.org/doc/gc-guide, trying to find the parameter to tune the appropriate memory limit.  One interesting value is ""Live Heap"" from this graph.\r\n<img width=""1231"" alt=""Screenshot 2024-01-22 at 10 14 32"" src=""https://github.com/golang/go/assets/2764799/da55de90-aff6-438c-8f40-854f8c7bc30c"">\r\n\r\nMy understanding is ""Live Heap"" represents the left heap memory after each GC cycle (after sweep phase, and remain the same as time goes), i.e, the marked memory after each GC (provided GCPercent not changed). This is consistent with this issue https://github.com/golang/go/issues/56857, which takes `heapMarked` as `Live Heap` value.\r\n\r\nHowever, there's a specific field `heapLive`, along with `heapMarked`\r\n\r\n```\r\ntype gcControllerState struct {\r\n\t// heapLive is the number of bytes considered live by the GC.\r\n\t// That is: retained by the most recent GC plus allocated\r\n\t// since then. heapLive \u2264 memstats.totalAlloc-memstats.totalFree, since\r\n\t// heapAlloc includes unmarked objects that have not yet been swept (and\r\n\t// hence goes up as we allocate and down as we sweep) while heapLive\r\n\t// excludes these objects (and hence only goes up between GCs).\r\n\t//\r\n\t// To reduce contention, this is updated only when obtaining a span\r\n\t// from an mcentral and at this point it counts all of the unallocated\r\n\t// slots in that span (which will be allocated before that mcache\r\n\t// obtains another span from that mcentral). Hence, it slightly\r\n\t// overestimates the ""true"" live heap size. It's better to overestimate\r\n\t// than to underestimate because 1) this triggers the GC earlier than\r\n\t// necessary rather than potentially too late and 2) this leads to a\r\n\t// conservative GC rate rather than a GC rate that is potentially too\r\n\t// low.\r\n\t//\r\n\t// Whenever this is updated, call traceHeapAlloc() and\r\n\t// this gcControllerState's revise() method.\r\n\theapLive atomic.Uint64\r\n\r\n\t// heapMarked is the number of bytes marked by the previous\r\n\t// GC. After mark termination, heapLive == heapMarked, but\r\n\t// unlike heapLive, heapMarked does not change until the\r\n\t// next mark termination.\r\n\theapMarked uint64\r\n}\r\n```\r\n\r\n`heapLive` from above `gcControllerState` context actually grows as new allocate happens, and in most time `heapLive` > `heapMarked`. After GC Mark phase work done, `heapLive` = `heapMarked` . This is a bit confusing for the two terminologies `heapLive` and `Live Heap`.\r\n\r\n### What did you see happen?\r\n\r\n`heapLive` and `Live Heap` are very closed naming, but mean something quite different across code and documentation.\r\n\r\n### What did you expect to see?\r\n\r\nEither `heapLive` or `Live Heap` gets updated to a better name. At this moment, updating `Live heap` seems more appropriate IMO, maybe `Marked Heap` ^?\r\n\r\n[/gc/heap/live:bytes](https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/metrics.go#L291) could probably be renamed to `/gc/heap/marked:bytes`.","shell\r\nGO111MODULE='auto'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/smiletrl/Library/Caches/go-build'\r\nGOENV='/Users/smiletrl/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/smiletrl/go/src/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/smiletrl/go/src'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/Users/smiletrl/go/src/github.com/smiletrl/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/smiletrl/go/src/github.com/smiletrl/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-8db131082d Thu Jan 4 23:31:17 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/smiletrl/go/src/github.com/smiletrl/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/sq/2123x_0d19s90tx1q2wpgtxr0000gn/T/go-build2832210919=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
65178,"runtime: scheduler sometimes starves a runnable goroutine on wasm platforms```\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""golang.org/x/net/http2"" && test == ""TestServer_Push_RejectAfterGoAway"" && `timeout`\r\n```\r\n### Go version\r\n\r\ngo version devel go1.23-1653833811 Fri Jan 19 19:23:40 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nAdd the following test to the `time` package:\r\n\r\n\r\nThen run it using:\r\n```\r\nGOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=10000\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n~/go/src$ GOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=10000\r\npanic: test timed out after 10m0s\r\nrunning tests:\r\n        TestAfterFuncStarvation (9m56s)\r\n\r\ngoroutine 13835 [running]:\r\ntesting.(*M).startAlarm.func1()\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2366 +0x44\r\ncreated by time.goFunc\r\n        /usr/local/google/home/bcmills/go/src/time/sleep.go:177 +0x5\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.(*T).Run(0x178b040, {0x6a007, 0x13}, 0xde460)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1750 +0x44\r\ntesting.runTests.func1(0x178b040)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2161 +0x3\r\ntesting.tRunner(0x178b040, 0x1499c80)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1689 +0xd\r\ntesting.runTests(0x140a2a0, {0x37c140, 0x7f, 0x7f}, {0xc162d83908280698, 0x8bb3084da4, 0x37faa0})\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2159 +0x49\r\ntesting.(*M).Run(0x144e140)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2027 +0x6e\r\nmain.main()\r\n        _testmain.go:445 +0x9\r\n\r\ngoroutine 13833 [runnable]:\r\ntime_test.TestAfterFuncStarvation.func2()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:102 +0x4\r\ncreated by time_test.TestAfterFuncStarvation in goroutine 13831\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:101 +0xd\r\n\r\ngoroutine 13831 [semacquire, 9 minutes]:\r\nsync.runtime_Semacquire(0x1790198)\r\n        /usr/local/google/home/bcmills/go/src/runtime/sema.go:62 +0x2\r\nsync.(*WaitGroup).Wait(0x1790190)\r\n        /usr/local/google/home/bcmills/go/src/sync/waitgroup.go:116 +0xf\r\ntime_test.TestAfterFuncStarvation(0x178b1e0)\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:107 +0x12\r\ntesting.tRunner(0x178b1e0, 0xde460)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1689 +0xd\r\ncreated by testing.(*T).Run in goroutine 1\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1742 +0x43\r\n\r\ngoroutine 13832 [chan send]:\r\ntime_test.TestAfterFuncStarvation.func1()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:96 +0x3\r\ncreated by time_test.TestAfterFuncStarvation in goroutine 13831\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:94 +0x9\r\n\r\ngoroutine 13834 [runnable]:\r\ntime_test.TestAfterFuncStarvation.func3()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:106\r\ncreated by time.goFunc\r\n        /usr/local/google/home/bcmills/go/src/time/sleep.go:177 +0x5\r\nFAIL    time    600.293s\r\nFAIL\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe test completes 1000 iterations on `wasip1/wasm` in about 1.2 seconds on my machine, so 10000 iterations should only take ~12 seconds:\r\n```\r\n~/go/src$ GOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=1000\r\nok      time    1.228s\r\n```\r\n\r\nRunning native code on `linux/amd64` is much faster still, but that's to be expected:\r\n```\r\ngo test time -run=TestAfterFuncStarvation -count=10000\r\nok      time    0.587s\r\n```\r\n\r\n(attn @golang/wasm)",NeedsInvestigation|arch-wasm|compiler/runtime,prattmic,"```\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""golang.org/x/net/http2"" && test == ""TestServer_Push_RejectAfterGoAway"" && `timeout`\r\n```\r\n### Go version\r\n\r\ngo version devel go1.23-1653833811 Fri Jan 19 19:23:40 2024 +0000 linux/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-1653833811 Fri Jan 19 19:23:40 2024 +0000'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1312466808=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nAdd the following test to the `time` package:\r\n```go\r\nfunc TestAfterFuncStarvation(t *testing.T) {\r\n\tvar (\r\n\t\twg sync.WaitGroup\r\n\t\tstop atomic.Bool\r\n\t\tc = make(chan bool, 1)\r\n\t)\r\n\r\n\twg.Add(2)\r\n\tgo func() {\r\n\t\tfor !stop.Load() {\r\n\t\t\tc <- true\r\n\t\t}\r\n\t\tclose(c)\r\n\t\twg.Done()\r\n\t}()\r\n\tgo func() {\r\n\t\tfor range c {}\r\n\t\twg.Done()\r\n\t}()\r\n\r\n\tAfterFunc(1 * Microsecond, func() { stop.Store(true) })\r\n\twg.Wait()\r\n}\r\n```\r\n\r\nThen run it using:\r\n```\r\nGOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=10000\r\n```\r\n\r\n### What did you see happen?\r\n\r\n```\r\n~/go/src$ GOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=10000\r\npanic: test timed out after 10m0s\r\nrunning tests:\r\n        TestAfterFuncStarvation (9m56s)\r\n\r\ngoroutine 13835 [running]:\r\ntesting.(*M).startAlarm.func1()\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2366 +0x44\r\ncreated by time.goFunc\r\n        /usr/local/google/home/bcmills/go/src/time/sleep.go:177 +0x5\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.(*T).Run(0x178b040, {0x6a007, 0x13}, 0xde460)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1750 +0x44\r\ntesting.runTests.func1(0x178b040)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2161 +0x3\r\ntesting.tRunner(0x178b040, 0x1499c80)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1689 +0xd\r\ntesting.runTests(0x140a2a0, {0x37c140, 0x7f, 0x7f}, {0xc162d83908280698, 0x8bb3084da4, 0x37faa0})\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2159 +0x49\r\ntesting.(*M).Run(0x144e140)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:2027 +0x6e\r\nmain.main()\r\n        _testmain.go:445 +0x9\r\n\r\ngoroutine 13833 [runnable]:\r\ntime_test.TestAfterFuncStarvation.func2()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:102 +0x4\r\ncreated by time_test.TestAfterFuncStarvation in goroutine 13831\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:101 +0xd\r\n\r\ngoroutine 13831 [semacquire, 9 minutes]:\r\nsync.runtime_Semacquire(0x1790198)\r\n        /usr/local/google/home/bcmills/go/src/runtime/sema.go:62 +0x2\r\nsync.(*WaitGroup).Wait(0x1790190)\r\n        /usr/local/google/home/bcmills/go/src/sync/waitgroup.go:116 +0xf\r\ntime_test.TestAfterFuncStarvation(0x178b1e0)\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:107 +0x12\r\ntesting.tRunner(0x178b1e0, 0xde460)\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1689 +0xd\r\ncreated by testing.(*T).Run in goroutine 1\r\n        /usr/local/google/home/bcmills/go/src/testing/testing.go:1742 +0x43\r\n\r\ngoroutine 13832 [chan send]:\r\ntime_test.TestAfterFuncStarvation.func1()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:96 +0x3\r\ncreated by time_test.TestAfterFuncStarvation in goroutine 13831\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:94 +0x9\r\n\r\ngoroutine 13834 [runnable]:\r\ntime_test.TestAfterFuncStarvation.func3()\r\n        /usr/local/google/home/bcmills/go/src/time/sleep_test.go:106\r\ncreated by time.goFunc\r\n        /usr/local/google/home/bcmills/go/src/time/sleep.go:177 +0x5\r\nFAIL    time    600.293s\r\nFAIL\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe test completes 1000 iterations on `wasip1/wasm` in about 1.2 seconds on my machine, so 10000 iterations should only take ~12 seconds:\r\n```\r\n~/go/src$ GOARCH=wasm GOOS=wasip1 go test time -run=TestAfterFuncStarvation -count=1000\r\nok      time    1.228s\r\n```\r\n\r\nRunning native code on `linux/amd64` is much faster still, but that's to be expected:\r\n```\r\ngo test time -run=TestAfterFuncStarvation -count=10000\r\nok      time    0.587s\r\n```\r\n\r\n(attn @golang/wasm)","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/bcmills/.cache/go-build'\r\nGOENV='/usr/local/google/home/bcmills/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/bcmills/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/bcmills'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/bcmills/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/google/home/bcmills/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.23-1653833811 Fri Jan 19 19:23:40 2024 +0000'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/bcmills/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1312466808=/tmp/go-build -gno-record-gcc-switches'\r\n"
65177,"net/http: timeout in TestIssue4191_InfiniteGetTimeout on wasip1/wasm```\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""net/http"" && test == ""TestIssue4191_InfiniteGetTimeout"" && log ~ `panic: test timed out` && date < ""2024-02-01""\r\n```\r\n\r\n### Go version\r\n\r\ne1c0349a7c607cdfcfa8f7c0c6b70aceff9d3752\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://github.com/golang/go/issues/64321#issuecomment-1901036947\r\n\r\n### What did you see happen?\r\n\r\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestIssue4191_InfiniteGetTimeout/h1 (2m4s)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n(attn @neild @golang/wasm)",NeedsFix|arch-wasm|FixPending,bcmills,"```\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""net/http"" && test == ""TestIssue4191_InfiniteGetTimeout"" && log ~ `panic: test timed out` && date < ""2024-02-01""\r\n```\r\n\r\n### Go version\r\n\r\ne1c0349a7c607cdfcfa8f7c0c6b70aceff9d3752\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://github.com/golang/go/issues/64321#issuecomment-1901036947\r\n\r\n### What did you see happen?\r\n\r\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestIssue4191_InfiniteGetTimeout/h1 (2m4s)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n(attn @neild @golang/wasm)",shell\r\nN/A\r\n
65169,"cmd/link: using -fuzz with test that links with cgo on darwin causes linker failure### Go version\n\ngo1.21.6, go1.22rc1\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nRun the following package with `go test . -fuzz=Fuzz` on Mac OS X and it prints a linker failure with both go1.21.6 and go1.22rc1. Using `go run` or `go test` without fuzzing works fine.\r\n\r\n`cgofuzz.go`\r\n\r\n\r\n`cgofuzz_test.go`\r\n\n\n### What did you see happen?\n\n```\r\n/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64/link: running cc failed: exit status 1\r\n0  0x102882f2c  __assert_rtn + 72\r\n1  0x10283ba20  ___ZN2ld16LayoutExecutable27writeContentWithoutLinkEditENSt3__14spanIhLm18446744073709551615EEEy_block_invoke_2 + 0\r\n2  0x18b088950  _dispatch_client_callout2 + 20\r\n3  0x18b09d1a4  _dispatch_apply_invoke_and_wait + 176\r\n4  0x18b09c464  _dispatch_apply_with_attr_f + 1176\r\n5  0x18b09c650  dispatch_apply + 96\r\n6  0x10283bba4  void mapReduce<ld::Atom const*, mach_o::Error>(std::__1::span<ld::Atom const*, 18446744073709551615ul>, unsigned long, void (unsigned long, mach_o::Error&, std::__1::span<ld::Atom const*, 18446744073709551615ul>) block_pointer, void (std::__1::span<mach_o::Error, 18446744073709551615ul>) block_pointer) + 336\r\n7  0x10283b754  ld::LayoutExecutable::writeContentWithoutLinkEdit(std::__1::span<unsigned char, 18446744073709551615ul>, unsigned long long) + 1180\r\n8  0x102840ebc  ld::LayoutExecutable::writeToFile(char const*) + 14444\r\n9  0x1027f2c80  main + 9628\r\nld: Assertion failed: (addr + content.size() <= sectionEndAddr), function writeContentWithoutLinkEdit_block_invoke, file Layout.cpp, line 5960.\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\n\n### What did you expect to see?\n\nI expected the test to run in fuzzing mode.",NeedsInvestigation|compiler/runtime,cherrymui,"### Go version\n\ngo1.21.6, go1.22rc1\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/evan.jones/Library/Caches/go-build'\r\nGOENV='/Users/evan.jones/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/evan.jones/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/evan.jones/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/evan.jones/cgofuzzstaticlinkbug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build397391104=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nRun the following package with `go test . -fuzz=Fuzz` on Mac OS X and it prints a linker failure with both go1.21.6 and go1.22rc1. Using `go run` or `go test` without fuzzing works fine.\r\n\r\n`cgofuzz.go`\r\n```go\r\npackage main\r\n\r\n// const char* cgoString() { return ""cgo""; }\r\nimport ""C""\r\nimport ""fmt""\r\n\r\nfunc cgoString() string {\r\n\treturn C.GoString(C.cgoString())\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Printf(""cgoString: %s\\n"", cgoString())\r\n}\r\n```\r\n\r\n`cgofuzz_test.go`\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc FuzzSomething(f *testing.F) {\r\n\tf.Add(0)\r\n\tf.Fuzz(func(t *testing.T, x int) {})\r\n}\r\n```\n\n### What did you see happen?\n\n```\r\n/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64/link: running cc failed: exit status 1\r\n0  0x102882f2c  __assert_rtn + 72\r\n1  0x10283ba20  ___ZN2ld16LayoutExecutable27writeContentWithoutLinkEditENSt3__14spanIhLm18446744073709551615EEEy_block_invoke_2 + 0\r\n2  0x18b088950  _dispatch_client_callout2 + 20\r\n3  0x18b09d1a4  _dispatch_apply_invoke_and_wait + 176\r\n4  0x18b09c464  _dispatch_apply_with_attr_f + 1176\r\n5  0x18b09c650  dispatch_apply + 96\r\n6  0x10283bba4  void mapReduce<ld::Atom const*, mach_o::Error>(std::__1::span<ld::Atom const*, 18446744073709551615ul>, unsigned long, void (unsigned long, mach_o::Error&, std::__1::span<ld::Atom const*, 18446744073709551615ul>) block_pointer, void (std::__1::span<mach_o::Error, 18446744073709551615ul>) block_pointer) + 336\r\n7  0x10283b754  ld::LayoutExecutable::writeContentWithoutLinkEdit(std::__1::span<unsigned char, 18446744073709551615ul>, unsigned long long) + 1180\r\n8  0x102840ebc  ld::LayoutExecutable::writeToFile(char const*) + 14444\r\n9  0x1027f2c80  main + 9628\r\nld: Assertion failed: (addr + content.size() <= sectionEndAddr), function writeContentWithoutLinkEdit_block_invoke, file Layout.cpp, line 5960.\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\n\n### What did you expect to see?\n\nI expected the test to run in fuzzing mode.",shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/evan.jones/Library/Caches/go-build'\r\nGOENV='/Users/evan.jones/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/evan.jones/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/evan.jones/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/evan.jones/cgofuzzstaticlinkbug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build397391104=/tmp/go-build -gno-record-gcc-switches -fno-common'\n
65163,x/telemetry: 2024-1-18 An Internal Server Error is obtained### Go version\n\ninapplicability\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n2024-1-19 access https://telemetry.go.dev/charts/2024-01-18\n\n### What did you see happen?\n\nhave Internal Server Error\n\n### What did you expect to see?\n\nnot have Internal Server Error,NeedsInvestigation|telemetry,findleyr,### Go version\n\ninapplicability\n\n### Output of `go env` in your module/workspace:\n\n```shell\ninapplicability\n```\n\n\n### What did you do?\n\n2024-1-19 access https://telemetry.go.dev/charts/2024-01-18\n\n### What did you see happen?\n\nhave Internal Server Error\n\n### What did you expect to see?\n\nnot have Internal Server Error,shell\ninapplicability\n
65158,"cmd/compile: inlined closure remnants (unnecessarily) set Addrtaken in local variables### Go version\n\ngo version devel go1.22-66d34c7d08\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nGo play link: https://go.dev/play/p/9faujPo3akR?v=gotip\r\nI actually compiled this code `GOSSAFUNC=main GOEXPERIMENT=rangefunc go run main.go` and then examined ssa.html in a browser.\n\n### What did you see happen?\n\nThe two interesting places are the genssa column of ssa.html (the rightmost) and the AST column (2nd from left).\r\n\r\nin genssa there are references to `main.#exit1` and `main.i` as a stack variable\r\n```\r\n v76\t00023 (+18) MOVB $0, main.#exit1-137(SP)\r\nv126\t00024 (?) NOP\r\nv157\t00025 (+21) XORL AX, AX\r\n  b4\t00026 (9) JMP 29\r\nv151\t00027 (+22) ADDQ CX, main.i-128(SP)\r\nv155\t00028 (+9) INCQ AX\r\nv165\t00029 (+9) CMPQ AX, $14\r\n  b5\t00030 (9) JGE 42\r\nv138\t00031 (9) MOVQ main..autotmp_13-112(SP)(AX*8), CX\r\nv139\t00032 (+10) XCHGL AX, AX\r\nv119\t00033 (+21) CMPB main.#exit1-137(SP), $0\r\n  b6\t00034 (21) JEQ 27\r\nv136\t00035 (9) MOVQ AX, main..autotmp_26-120(SP)\r\nv116\t00036 (9) MOVQ CX, main.x-136(SP)\r\nv143\t00037 (21) PCDATA $1, $0\r\nv143\t00038 (21) CALL runtime.panicrangeexit(SB)\r\n```\r\nThe cause for this can be seen in the AST column, where both `i` and `#exit1` are marked as Addrtaken, because once-upon-a-time they were locals modified in a closure, but that closure has been inlined and is called nowhere.  I understand it cannot quite be completely dead code eliminated because of mentions of the name in debugging information.\r\n```\r\n. DCL # main.go:20:2\r\n. . NAME-main.i esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used int tc(1) # main.go:20:2\r\n. AS Def tc(1) # main.go:20:4\r\n. . NAME-main.i esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used int tc(1) # main.go:20:2\r\n. . LITERAL-0 int tc(1) # main.go:20:7\r\n. DCL\r\n. . NAME-main.#exit1 esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used bool tc(1) # main.go:21:2\r\n. AS tc(1)\r\n. . NAME-main.#exit1 esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used bool tc(1) # main.go:21:2\r\n```\r\nI poked around the compiler a bit, and believe that the deed is done (`Addrtaken` set) in `flowClosure` in `escape.go`\n\n### What did you expect to see?\n\n`#exit1` and `i` not marked `Addrtaken`, allocated to registers, and (in the case of `#exit1`) completely removed from the code because it is statically evident that it is not needed.\r\n",Performance|NeedsInvestigation,mdempsky,"### Go version\n\ngo version devel go1.22-66d34c7d08\n\n### Output of `go env` in your module/workspace:\n\n```shell\ndoes not depend on platform, only on `GOEXPERIMENT=rangefunc`\n```\n\n\n### What did you do?\n\nGo play link: https://go.dev/play/p/9faujPo3akR?v=gotip\r\nI actually compiled this code `GOSSAFUNC=main GOEXPERIMENT=rangefunc go run main.go` and then examined ssa.html in a browser.\n\n### What did you see happen?\n\nThe two interesting places are the genssa column of ssa.html (the rightmost) and the AST column (2nd from left).\r\n\r\nin genssa there are references to `main.#exit1` and `main.i` as a stack variable\r\n```\r\n v76\t00023 (+18) MOVB $0, main.#exit1-137(SP)\r\nv126\t00024 (?) NOP\r\nv157\t00025 (+21) XORL AX, AX\r\n  b4\t00026 (9) JMP 29\r\nv151\t00027 (+22) ADDQ CX, main.i-128(SP)\r\nv155\t00028 (+9) INCQ AX\r\nv165\t00029 (+9) CMPQ AX, $14\r\n  b5\t00030 (9) JGE 42\r\nv138\t00031 (9) MOVQ main..autotmp_13-112(SP)(AX*8), CX\r\nv139\t00032 (+10) XCHGL AX, AX\r\nv119\t00033 (+21) CMPB main.#exit1-137(SP), $0\r\n  b6\t00034 (21) JEQ 27\r\nv136\t00035 (9) MOVQ AX, main..autotmp_26-120(SP)\r\nv116\t00036 (9) MOVQ CX, main.x-136(SP)\r\nv143\t00037 (21) PCDATA $1, $0\r\nv143\t00038 (21) CALL runtime.panicrangeexit(SB)\r\n```\r\nThe cause for this can be seen in the AST column, where both `i` and `#exit1` are marked as Addrtaken, because once-upon-a-time they were locals modified in a closure, but that closure has been inlined and is called nowhere.  I understand it cannot quite be completely dead code eliminated because of mentions of the name in debugging information.\r\n```\r\n. DCL # main.go:20:2\r\n. . NAME-main.i esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used int tc(1) # main.go:20:2\r\n. AS Def tc(1) # main.go:20:4\r\n. . NAME-main.i esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used int tc(1) # main.go:20:2\r\n. . LITERAL-0 int tc(1) # main.go:20:7\r\n. DCL\r\n. . NAME-main.#exit1 esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used bool tc(1) # main.go:21:2\r\n. AS tc(1)\r\n. . NAME-main.#exit1 esc(no) Class:PAUTO Offset:0 Addrtaken OnStack Used bool tc(1) # main.go:21:2\r\n```\r\nI poked around the compiler a bit, and believe that the deed is done (`Addrtaken` set) in `flowClosure` in `escape.go`\n\n### What did you expect to see?\n\n`#exit1` and `i` not marked `Addrtaken`, allocated to registers, and (in the case of `#exit1`) completely removed from the code because it is statically evident that it is not needed.\r\n","shell\ndoes not depend on platform, only on `GOEXPERIMENT=rangefunc`\n"
65156,"x/tools/gopls: implement code action to split and group args/elements/return values into single/separate lines### gopls version\n\nv0.14.2\n\n### go env\n\n\n\n\n### What did you do?\n\nImplement a code action to easily refactor function arguments, return values, and composite literal elements into separate lines or a single line.\r\n\r\nThis feature would be particularly helpful when working on large business-related features that often require long variable names. The ability to quickly split or group lines would significantly accelerate refactoring efforts to ensure code adheres to specified character limits.\r\n\r\nfor example:\r\n\n\n### What did you see happen?\n\nThe feature is not available yet on gopls.\n\n### What did you expect to see?\n\nTo see the feature in gopls.\n\n### Editor and settings\n\nVSCode\n\n### Logs\n\nN/A",FeatureRequest|gopls|Tools|Refactoring,fatanugraha,"### gopls version\n\nv0.14.2\n\n### go env\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/fatanugraha/Library/Caches/go-build'\r\nGOENV='/Users/fatanugraha/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/fatanugraha/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/fatanugraha/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xw/9_n8jx3101g27v376tld9qbw0000gn/T/go-build3470959707=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nImplement a code action to easily refactor function arguments, return values, and composite literal elements into separate lines or a single line.\r\n\r\nThis feature would be particularly helpful when working on large business-related features that often require long variable names. The ability to quickly split or group lines would significantly accelerate refactoring efforts to ensure code adheres to specified character limits.\r\n\r\nfor example:\r\n```go\r\n// original code\r\nfunc A(a int, b int, c int) (d int, e int) {\r\n   ...\r\n}\r\n\r\n[]int{1,2,3}\r\n\r\n// put args to separate lines\r\nfunc A(\r\n    a int, \r\n    b int, \r\n    c int,\r\n) (d int, e int) {\r\n   ...\r\n}\r\n\r\n// put return values to separate lines\r\nfunc A(a int, b int, c int) (\r\n    d int, \r\n    e int,\r\n) {\r\n   ...\r\n}\r\n\r\n// put composite literal elements to a separate lines\r\n[]int{\r\n    1,\r\n    2, \r\n    3,\r\n}\r\n```\n\n### What did you see happen?\n\nThe feature is not available yet on gopls.\n\n### What did you expect to see?\n\nTo see the feature in gopls.\n\n### Editor and settings\n\nVSCode\n\n### Logs\n\nN/A","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/fatanugraha/Library/Caches/go-build'\r\nGOENV='/Users/fatanugraha/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/fatanugraha/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/fatanugraha/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.6/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.6/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xw/9_n8jx3101g27v376tld9qbw0000gn/T/go-build3470959707=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65155,"x/vuln: go: -mod may only be set to readonly when in workspace mode, but it is set to ""mod"" error starting in 1.0.2\r\nthen:\r\n\r\n\r\nvs\r\n\r\n",vulncheck or vulndb,maceonthompson,"```shell\r\ngit clone https://github.com/fortio/fortiotel.git\r\ncd fortiotel\r\n```\r\nthen:\r\n```shell\r\n$ go install golang.org/x/vuln/cmd/govulncheck@v1.0.1\r\n$ govulncheck ./...\r\nScanning your code and 342 packages across 34 dependent modules for known vulnerabilities...\r\n\r\nNo vulnerabilities found.\r\n\r\nShare feedback at https://go.dev/s/govulncheck-feedback.\r\n```\r\n\r\nvs\r\n\r\n```shell\r\n$  go install golang.org/x/vuln/cmd/govulncheck@latest\r\ngo: downloading golang.org/x/vuln v1.0.2\r\ngo: downloading golang.org/x/tools v0.17.0\r\ngo: downloading golang.org/x/sync v0.6.0\r\n$ govulncheck ./...\r\ngovulncheck: loading modules: /opt/homebrew/bin/go list -m -json -mod=mod all: exit status 1\r\ngo: -mod may only be set to readonly when in workspace mode, but it is set to ""mod""\r\n\tRemove the -mod flag to use the default readonly value,\r\n\tor set GOWORK=off to disable workspace mode.\r\n```",shell\r\ngit clone https://github.com/fortio/fortiotel.git\r\ncd fortiotel\r\n
65152,"spec: add examples (or more explicit prose) regarding the identity/difference of types escaping generic and non-generic functions\r\n### What did you do?\r\n\r\n[Playground Link](https://go.dev/play/p/phJTMuCj-Z0)\r\n\r\n\r\n\r\n### What did you see happen?\r\n\r\n`true true true true`\r\n\r\n### What did you expect to see?\r\n\r\n`true true true true`. The output is clearly intuitively correct and the most sensible behavior of this program. However, I'm having trouble justifying it from the spec.\r\n\r\nFor equality of interfaces, [the spec says](https://tip.golang.org/ref/spec#Comparison_operators):\r\n\r\n> Interface types that are not type parameters are comparable. Two interface values are equal if they have [identical](https://tip.golang.org/ref/spec#Type_identity) dynamic types and equal dynamic values or if both have value `nil`.\r\n\r\nThe program is constructed such that the dynamic types all have exactly one dynamic value, hence we need to check if the dynamic types are identical:\r\n\r\n> A [named type](https://tip.golang.org/ref/spec#Types) is always different from any other type. Otherwise, two types are identical if their [underlying](https://tip.golang.org/ref/spec#Types) type literals are structurally equivalent; that is, they have the same literal structure and corresponding components have identical types. In detail: [\u2026]\r\n\r\nIn this case, all types involved are named types. So, the question is whether those named types are ""other types"" or not. Determining whether that is the case is the contention. [The only relevant answer I can find says](https://tip.golang.org/ref/spec#Type_definitions):\r\n\r\n> A type definition creates a new, distinct type with the same [underlying type](https://tip.golang.org/ref/spec#Underlying_types) and operations as the given type and binds an identifier, the type name, to it. [\u2026] The new type is called a defined type. It is [different](https://tip.golang.org/ref/spec#Type_identity) from any other type, including the type it is created from.\r\n\r\nAs well as later:\r\n\r\n> If the type definition specifies [type parameters](https://tip.golang.org/ref/spec#Type_parameter_declarations), the type name denotes a generic type. Generic types must be [instantiated](https://tip.golang.org/ref/spec#Instantiations) when they are used.\r\n\r\nLastly, [going back to Type identity](https://tip.golang.org/ref/spec#Type_identity), we also note:\r\n\r\n> Two [instantiated](https://tip.golang.org/ref/spec#Instantiations) types are identical if their defined types and all type arguments are identical.\r\n\r\nThat's all the relevant spec pieces I can really find.\r\n\r\nNow my argument:\r\n\r\n`F[int]() == F[int]()` and `G() == G()`, demonstrating that the created type is not tied to a call, but to the type definition AST node.\r\n\r\n`G() != F[int]()` demonstrates that different type definition AST nodes lead to non-identical types. Strengthening the assertion that the actual AST node determines type identity.\r\n\r\nBuf `F[int]() != F[string]()` shows that *the same* type definition can lead to *different* types. Even though 1. the type definition is not generic (it has no type parameters) and 2. it is a named type, so its identity *should* solely be determined by its type definition.\r\n\r\nTo be clear, again: This is obviously the only sensible and expected way for this code to behave, but it seems there is a hole in the spec for this behavior.",Documentation,griesemer,"\r\n### What did you do?\r\n\r\n[Playground Link](https://go.dev/play/p/phJTMuCj-Z0)\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\tfmt.Println(F[int]() == F[int](), F[int]() != G(), G() == G(), F[int]() != F[string]())\r\n}\r\n\r\nfunc F[T comparable]() any {\r\n\ttype x struct{ _ [0]T }\r\n\treturn x{}\r\n}\r\n\r\nfunc G() any {\r\n\ttype x struct{ _ [0]int }\r\n\treturn x{}\r\n}\r\n```\r\n\r\n### What did you see happen?\r\n\r\n`true true true true`\r\n\r\n### What did you expect to see?\r\n\r\n`true true true true`. The output is clearly intuitively correct and the most sensible behavior of this program. However, I'm having trouble justifying it from the spec.\r\n\r\nFor equality of interfaces, [the spec says](https://tip.golang.org/ref/spec#Comparison_operators):\r\n\r\n> Interface types that are not type parameters are comparable. Two interface values are equal if they have [identical](https://tip.golang.org/ref/spec#Type_identity) dynamic types and equal dynamic values or if both have value `nil`.\r\n\r\nThe program is constructed such that the dynamic types all have exactly one dynamic value, hence we need to check if the dynamic types are identical:\r\n\r\n> A [named type](https://tip.golang.org/ref/spec#Types) is always different from any other type. Otherwise, two types are identical if their [underlying](https://tip.golang.org/ref/spec#Types) type literals are structurally equivalent; that is, they have the same literal structure and corresponding components have identical types. In detail: [\u2026]\r\n\r\nIn this case, all types involved are named types. So, the question is whether those named types are ""other types"" or not. Determining whether that is the case is the contention. [The only relevant answer I can find says](https://tip.golang.org/ref/spec#Type_definitions):\r\n\r\n> A type definition creates a new, distinct type with the same [underlying type](https://tip.golang.org/ref/spec#Underlying_types) and operations as the given type and binds an identifier, the type name, to it. [\u2026] The new type is called a defined type. It is [different](https://tip.golang.org/ref/spec#Type_identity) from any other type, including the type it is created from.\r\n\r\nAs well as later:\r\n\r\n> If the type definition specifies [type parameters](https://tip.golang.org/ref/spec#Type_parameter_declarations), the type name denotes a generic type. Generic types must be [instantiated](https://tip.golang.org/ref/spec#Instantiations) when they are used.\r\n\r\nLastly, [going back to Type identity](https://tip.golang.org/ref/spec#Type_identity), we also note:\r\n\r\n> Two [instantiated](https://tip.golang.org/ref/spec#Instantiations) types are identical if their defined types and all type arguments are identical.\r\n\r\nThat's all the relevant spec pieces I can really find.\r\n\r\nNow my argument:\r\n\r\n`F[int]() == F[int]()` and `G() == G()`, demonstrating that the created type is not tied to a call, but to the type definition AST node.\r\n\r\n`G() != F[int]()` demonstrates that different type definition AST nodes lead to non-identical types. Strengthening the assertion that the actual AST node determines type identity.\r\n\r\nBuf `F[int]() != F[string]()` shows that *the same* type definition can lead to *different* types. Even though 1. the type definition is not generic (it has no type parameters) and 2. it is a named type, so its identity *should* solely be determined by its type definition.\r\n\r\nTo be clear, again: This is obviously the only sensible and expected way for this code to behave, but it seems there is a hole in the spec for this behavior.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\tfmt.Println(F[int]() == F[int](), F[int]() != G(), G() == G(), F[int]() != F[string]())\r\n}\r\n\r\nfunc F[T comparable]() any {\r\n\ttype x struct{ _ [0]T }\r\n\treturn x{}\r\n}\r\n\r\nfunc G() any {\r\n\ttype x struct{ _ [0]int }\r\n\treturn x{}\r\n}\r\n"
65137,"spec: range over integer expressions underspecifiedThe following code\r\n\r\nprints the values 0, 1, 2, ... 255, 0, 1; that is the integer ""wraps around"". This seems incorrect, but the spec is silent on the subject.\r\n\r\nI believe the rules need to be extended such that if:\r\na) the iteration variable is already declared (`u` in the example above):\r\n- the iteration expressions must be assignable to the iteration variable (if the expression is a constant, it must fit into the iteration variable)\r\n\r\nb) the iteration variable is being declared (as in `for u := range x`):\r\n- if the iteration expression is typed, the iteration variable has the same type\r\n- if the iteration expression is an untyped constant, it is given the type `int`, the constant must be representable as an `int`, and the iteration variable will be of type `int`\r\n\r\nI believe these rules follow more or less from the existing prose (assignment to the iteration variables happens as in an assignment statement), but the fact that the compiler and type checkers get this wrong is an indication that we need more precise prose or better examples.\r\n\r\nWe need to pin this down before the 1.22 release otherwise we may not be able to make these changes anymore in a backward-compatible way.\r\n\r\ncc: @rsc ",Documentation,griesemer,"The following code\r\n```Go\r\nvar u uint8\r\nfor u = range 258 {\r\n   println(u)\r\n}\r\n```\r\nprints the values 0, 1, 2, ... 255, 0, 1; that is the integer ""wraps around"". This seems incorrect, but the spec is silent on the subject.\r\n\r\nI believe the rules need to be extended such that if:\r\na) the iteration variable is already declared (`u` in the example above):\r\n- the iteration expressions must be assignable to the iteration variable (if the expression is a constant, it must fit into the iteration variable)\r\n\r\nb) the iteration variable is being declared (as in `for u := range x`):\r\n- if the iteration expression is typed, the iteration variable has the same type\r\n- if the iteration expression is an untyped constant, it is given the type `int`, the constant must be representable as an `int`, and the iteration variable will be of type `int`\r\n\r\nI believe these rules follow more or less from the existing prose (assignment to the iteration variables happens as in an assignment statement), but the fact that the compiler and type checkers get this wrong is an indication that we need more precise prose or better examples.\r\n\r\nWe need to pin this down before the 1.22 release otherwise we may not be able to make these changes anymore in a backward-compatible way.\r\n\r\ncc: @rsc ",Go\r\nvar u uint8\r\nfor u = range 258 {\r\n   println(u)\r\n}\r\n
65133,"cmd/compile: out of range integer in range loop crashes the compiler### Go version\r\n\r\ngo version devel go1.22-8e658eee9c Wed Jan 17 03:56:30 2024 +0000 linux/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI ran the following program in Go 1.22 (tip):\r\n\r\n\r\n\r\nOn the Playground: https://go.dev/play/p/MCs2ntWII_I?v=gotip\r\n\r\n### What did you see happen?\r\n\r\nThe compiler crashes with the following stack trace:\r\n\r\n```\r\n# command-line-arguments\r\n./test.go:4:6: internal compiler error: 18446744073709551616 out of range for uint\r\n\r\ngoroutine 21 [running]:\r\nruntime/debug.Stack()\r\n        ./src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0xabbaf8?, 0x0?}, {0x95b435, 0x16}, {0x40004ee6f8, 0x2, 0x2})\r\n        ./src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n        ./src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ir.IntVal(0x400047e480, {0xabbaf8?, 0x40000dea60?})\r\n        ./src/cmd/compile/internal/ir/val.go:33 +0x1a0\r\ncmd/compile/internal/ssagen.(*state).exprCheckPtr(0x4000210300, {0xac4818, 0x40004d0730}, 0x1)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:2826 +0x9fc\r\ncmd/compile/internal/ssagen.(*state).expr(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:2756\r\ncmd/compile/internal/ssagen.(*state).stmt(0x4000210300, {0xac4158, 0x40004d0d70})\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1679 +0x5ce8\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1426\r\ncmd/compile/internal/ssagen.(*state).stmt(0x4000210300, {0xac42d8, 0x40000d50a0})\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1441 +0x210\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1426\r\ncmd/compile/internal/ssagen.buildssa(0x40004c8fc0, 0x3)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:555 +0x1f34\r\ncmd/compile/internal/ssagen.Compile(0x40004c8fc0, 0x3)\r\n        ./src/cmd/compile/internal/ssagen/pgen.go:216 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x40004d2080?)\r\n        ./src/cmd/compile/internal/gc/compile.go:182 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        ./src/cmd/compile/internal/gc/compile.go:164 +0x3c\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 20\r\n        ./src/cmd/compile/internal/gc/compile.go:163 +0x1e0\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThis code should probably show a regular compiler error because the integer is out of range.\r\n\r\nThis is what the specification says:\r\n\r\n>  For an integer value n, the iteration values 0 through n-1 are produced in increasing order, with the same type as n. If n <= 0, the loop does not run any iterations. \r\n\r\nThis doesn't explicitly say which type should be used for untyped integers. My assumption would be that it would be the same as this for example:\r\n\r\n\r\n\r\n...meaning that it would default to `int` (not `uint` as the stack trace suggests). `uint` would also seem reasonable to me for range loops, which would be a bit inconsistent but would make sense for range loops.\r\n\r\nIn fact, [the following code](https://go.dev/play/p/lYP1nArIx4Q?v=gotip) _does_ compile, but I'm not sure it should (it is out of range for `int`):\r\n\r\n",NeedsFix|release-blocker|compiler/runtime,griesemer,"### Go version\r\n\r\ngo version devel go1.22-8e658eee9c Wed Jan 17 03:56:30 2024 +0000 linux/arm64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/ayke/.cache/go-build'\r\nGOENV='/home/ayke/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ayke/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ayke'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/ayke/src/tinygo/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ayke/src/tinygo/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-8e658eee9c Wed Jan 17 03:56:30 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2139171962=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI ran the following program in Go 1.22 (tip):\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\tfor range 1 << 64 {\r\n\t}\r\n}\r\n```\r\n\r\nOn the Playground: https://go.dev/play/p/MCs2ntWII_I?v=gotip\r\n\r\n### What did you see happen?\r\n\r\nThe compiler crashes with the following stack trace:\r\n\r\n```\r\n# command-line-arguments\r\n./test.go:4:6: internal compiler error: 18446744073709551616 out of range for uint\r\n\r\ngoroutine 21 [running]:\r\nruntime/debug.Stack()\r\n        ./src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0xabbaf8?, 0x0?}, {0x95b435, 0x16}, {0x40004ee6f8, 0x2, 0x2})\r\n        ./src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n        ./src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ir.IntVal(0x400047e480, {0xabbaf8?, 0x40000dea60?})\r\n        ./src/cmd/compile/internal/ir/val.go:33 +0x1a0\r\ncmd/compile/internal/ssagen.(*state).exprCheckPtr(0x4000210300, {0xac4818, 0x40004d0730}, 0x1)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:2826 +0x9fc\r\ncmd/compile/internal/ssagen.(*state).expr(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:2756\r\ncmd/compile/internal/ssagen.(*state).stmt(0x4000210300, {0xac4158, 0x40004d0d70})\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1679 +0x5ce8\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1426\r\ncmd/compile/internal/ssagen.(*state).stmt(0x4000210300, {0xac42d8, 0x40000d50a0})\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1441 +0x210\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:1426\r\ncmd/compile/internal/ssagen.buildssa(0x40004c8fc0, 0x3)\r\n        ./src/cmd/compile/internal/ssagen/ssa.go:555 +0x1f34\r\ncmd/compile/internal/ssagen.Compile(0x40004c8fc0, 0x3)\r\n        ./src/cmd/compile/internal/ssagen/pgen.go:216 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x40004d2080?)\r\n        ./src/cmd/compile/internal/gc/compile.go:182 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        ./src/cmd/compile/internal/gc/compile.go:164 +0x3c\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 20\r\n        ./src/cmd/compile/internal/gc/compile.go:163 +0x1e0\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThis code should probably show a regular compiler error because the integer is out of range.\r\n\r\nThis is what the specification says:\r\n\r\n>  For an integer value n, the iteration values 0 through n-1 are produced in increasing order, with the same type as n. If n <= 0, the loop does not run any iterations. \r\n\r\nThis doesn't explicitly say which type should be used for untyped integers. My assumption would be that it would be the same as this for example:\r\n\r\n```go\r\nn := 5\r\n```\r\n\r\n...meaning that it would default to `int` (not `uint` as the stack trace suggests). `uint` would also seem reasonable to me for range loops, which would be a bit inconsistent but would make sense for range loops.\r\n\r\nIn fact, [the following code](https://go.dev/play/p/lYP1nArIx4Q?v=gotip) _does_ compile, but I'm not sure it should (it is out of range for `int`):\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\tfor range 1 << 63 {\r\n\t}\r\n}\r\n```","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/ayke/.cache/go-build'\r\nGOENV='/home/ayke/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ayke/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ayke'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/ayke/src/tinygo/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ayke/src/tinygo/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-8e658eee9c Wed Jan 17 03:56:30 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2139171962=/tmp/go-build -gno-record-gcc-switches'\r\n"
65123,"net/http/httputil: concurrent map writes in ReverseProxy on subsequent RoundTripper usages### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/kxnqMuLCo-2\n\n### What did you see happen?\n\nSometimes getting an error:\r\n```\r\nfatal error: concurrent map writes\r\n\r\ngoroutine 53 [running]:\r\nnet/http/httputil.(*ReverseProxy).ServeHTTP.func2(0xc000222420?, 0xc000214000?)\r\n\t/usr/local/go-faketime/src/net/http/httputil/reverseproxy.go:464 +0x6b\r\nnet/http.(*persistConn).readResponse(0xc000230000, {{}, 0xc000214000, {0xc000142300}, 0xc00021c420, 0x0, 0xc00021c360, 0xc00021c3c0}, 0xc000110180)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2338 +0x1ff\r\nnet/http.(*persistConn).readLoop(0xc000230000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 49\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n\r\ngoroutine 1 [select]:\r\nnet/http.(*persistConn).roundTrip(0xc00019a120, 0xc0001a2000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2652 +0x979\r\nnet/http.(*Transport).roundTrip(0x8e13c0, 0xc00018a000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:604 +0x79a\r\nnet/http.(*Transport).RoundTrip(0xc00007ca08?, 0x740520?)\r\n\t/usr/local/go-faketime/src/net/http/roundtrip.go:17 +0x13\r\nnet/http.send(0xc00018a000, {0x740520, 0x8e13c0}, {0xc00007cc01?, 0x414da8?, 0x0?})\r\n\t/usr/local/go-faketime/src/net/http/client.go:260 +0x606\r\nnet/http.(*Client).send(0x8e6aa0, 0xc00018a000, {0x416328?, 0x42151c?, 0x0?})\r\n\t/usr/local/go-faketime/src/net/http/client.go:181 +0x98\r\nnet/http.(*Client).do(0x8e6aa0, 0xc00018a000)\r\n\t/usr/local/go-faketime/src/net/http/client.go:724 +0x912\r\nnet/http.(*Client).Do(...)\r\n\t/usr/local/go-faketime/src/net/http/client.go:590\r\nmain.main()\r\n\t/tmp/sandbox3108800449/prog.go:65 +0x45f\r\n\r\ngoroutine 6 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ae38, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000110000?, 0x4?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Accept(0xc000110000)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:611 +0x2ac\r\nnet.(*netFD).accept(0xc000110000)\r\n\t/usr/local/go-faketime/src/net/fd_unix.go:172 +0x29\r\nnet.(*TCPListener).accept(0xc000128000)\r\n\t/usr/local/go-faketime/src/net/tcpsock_posix.go:152 +0x1e\r\nnet.(*TCPListener).Accept(0xc000128000)\r\n\t/usr/local/go-faketime/src/net/tcpsock.go:315 +0x30\r\nnet/http.(*Server).Serve(0xc000100000, {0x742080, 0xc000128000})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3056 +0x364\r\nnet/http.(*Server).ListenAndServe(0xc000100000)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2985 +0x71\r\nnet/http.ListenAndServe({0x6c51dd, 0x5}, {0x73fcc0?, 0xc00001c240})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3239 +0x8f\r\ncreated by main.main in goroutine 1\r\n\t/tmp/sandbox3108800449/prog.go:22 +0xb6\r\n\r\ngoroutine 38 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ab50, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc0000ba000?, 0xc000102491?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Read(0xc0000ba000, {0xc000102491, 0x1, 0x1})\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:164 +0x27a\r\nnet.(*netFD).Read(0xc0000ba000, {0xc000102491?, 0xc000040780?, 0x40595b?})\r\n\t/usr/local/go-faketime/src/net/fd_posix.go:55 +0x25\r\nnet.(*conn).Read(0xc000042040, {0xc000102491?, 0xc000180000?, 0xc000076118?})\r\n\t/usr/local/go-faketime/src/net/net.go:179 +0x45\r\nnet/http.(*connReader).backgroundRead(0xc000102480)\r\n\t/usr/local/go-faketime/src/net/http/server.go:683 +0x37\r\ncreated by net/http.(*connReader).startBackgroundRead in goroutine 9\r\n\t/usr/local/go-faketime/src/net/http/server.go:679 +0xba\r\n\r\ngoroutine 18 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ad40, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000110080?, 0x16?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Accept(0xc000110080)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:611 +0x2ac\r\nnet.(*netFD).accept(0xc000110080)\r\n\t/usr/local/go-faketime/src/net/fd_unix.go:172 +0x29\r\nnet.(*TCPListener).accept(0xc000128060)\r\n\t/usr/local/go-faketime/src/net/tcpsock_posix.go:152 +0x1e\r\nnet.(*TCPListener).Accept(0xc000128060)\r\n\t/usr/local/go-faketime/src/net/tcpsock.go:315 +0x30\r\nnet/http.(*Server).Serve(0xc0001000f0, {0x742080, 0xc000128060})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3056 +0x364\r\nnet/http.(*Server).ListenAndServe(0xc0001000f0)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2985 +0x71\r\nnet/http.ListenAndServe({0x6c51e2, 0x5}, {0x0?, 0x0})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3239 +0x8f\r\ncreated by main.main in goroutine 1\r\n\t/tmp/sandbox3108800449/prog.go:56 +0x2de\r\n\r\ngoroutine 19 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ac48, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc0001a4200?, 0xc00012e000?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Read(0xc0001a4200, {0xc00012e000, 0x1000, 0x1000})\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:164 +0x27a\r\nnet.(*netFD).Read(0xc0001a4200, {0xc00012e000?, 0x40cd65?, 0xc0001023c0?})\r\n\t/usr/local/go-faketime/src/net/fd_posix.go:55 +0x25\r\nnet.(*conn).Read(0xc000108030, {0xc00012e000?, 0xc000044800?, 0x10?})\r\n\t/usr/local/go-faketime/src/net/net.go:179 +0x45\r\nnet/http.(*persistConn).Read(0xc00019a120, {0xc00012e000?, 0xc00007cc90?, 0x7ea8f3cc02a8?})\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1954 +0x4a\r\nbufio.(*Reader).fill(0xc0001140c0)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:113 +0x103\r\nbufio.(*Reader).ReadSlice(0xc0001140c0, 0xd5?)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:379 +0x29\r\nbufio.(*Reader).ReadLine(0xc0001140c0)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:408 +0x25\r\nnet/textproto.(*Reader).readLineSlice(0xc00007cc90)\r\n\t/usr/local/go-faketime/src/net/textproto/reader.go:56 +0x99\r\nnet/textproto.(*Reader).ReadLine(...)\r\n\t/usr/local/go-faketime/src/net/textproto/reader.go:39\r\nnet/http.ReadResponse(0xc0001140c0, 0xc00018a100)\r\n\t/usr/local/go-faketime/src/net/http/response.go:161 +0x97\r\nnet/http.(*persistConn).readResponse(0xc00019a120, {{}, 0xc00018a100, {0xc00018a000}, 0xc0001340c0, 0x1, 0xc000134000, 0xc000134060}, 0x0)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2311 +0xce\r\nnet/http.(*persistConn).readLoop(0xc00019a120)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 33\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n\r\ngoroutine 20 [select]:\r\nnet/http.(*persistConn).writeLoop(0xc00019a120)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2421 +0xe5\r\ncreated by net/http.(*Transport).dialConn in goroutine 33\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1777 +0x16f1\r\n\r\ngoroutine 7 [runnable]:\r\nnet/textproto.MIMEHeader.Set(...)\r\n\t/usr/local/go-faketime/src/net/textproto/header.go:22\r\nnet/http.Header.Set(...)\r\n\t/usr/local/go-faketime/src/net/http/header.go:40\r\nmain.main.func4({0x741f00, 0xc000150000}, 0xc000110180?, {0xa?, 0xc00019963a?})\r\n\t/tmp/sandbox3108800449/prog.go:50 +0xc5\r\nnet/http/httputil.(*ReverseProxy).ServeHTTP(0xc00010c140, {0x741f00, 0xc000150000}, 0xc000142100)\r\n\t/usr/local/go-faketime/src/net/http/httputil/reverseproxy.go:475 +0x10c3\r\nmain.main.main.func2.func6({0x741f00, 0xc000150000}, 0x6252d9?)\r\n\t/tmp/sandbox3108800449/prog.go:33 +0xe5\r\nnet/http.HandlerFunc.ServeHTTP(0x10?, {0x741f00?, 0xc000150000?}, 0x7ea93a637b98?)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2136 +0x29\r\nnet/http.(*ServeMux).ServeHTTP(0x40d0e5?, {0x741f00, 0xc000150000}, 0xc000142000)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2514 +0x142\r\nnet/http.serverHandler.ServeHTTP({0x741038?}, {0x741f00?, 0xc000150000?}, 0x1?)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2938 +0x8e\r\nnet/http.(*conn).serve(0xc0000bc000, {0x742490, 0xc000102360})\r\n\t/usr/local/go-faketime/src/net/http/server.go:2009 +0x5f4\r\ncreated by net/http.(*Server).Serve in goroutine 18\r\n\t/usr/local/go-faketime/src/net/http/server.go:3086 +0x5cb\r\n\r\ngoroutine 27 [chan receive]:\r\nmain.main.main.func2.func6.1()\r\n\t/tmp/sandbox3108800449/prog.go:30 +0x19\r\nnet/http.(*persistConn).readResponse(0xc000330000, {{}, 0xc00032c000, {0xc000142300}, 0xc000134720, 0x0, 0xc000134660, 0xc0001346c0}, 0xc000110180)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2319 +0x144\r\nnet/http.(*persistConn).readLoop(0xc000330000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 65\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n```\n\n### What did you expect to see?\n\nExpected no errors.\r\n\r\nThis example has custom implementation of ErrorHandler that writes to response headers a bunch of times to better expose the data race. ReverseProxy [defaultErrorHandler writes to response headers once](https://github.com/golang/go/blob/b44f6378233ada888f0dc79e0ac56def4673d9ed/src/net/http/httputil/reverseproxy.go#L308). And there is also [some header updates happening after](https://github.com/golang/go/blob/b44f6378233ada888f0dc79e0ac56def4673d9ed/src/net/http/httputil/reverseproxy.go#L476-L504). \r\n\r\nThis seems to be an issue when RoundTrip retries requests. The first RoundTrip call does block until trace contexts are run, but not the subsequent RoundTrip calls.",NeedsFix,panjf2000,"### Go version\n\ngo version go1.21.6 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/pivotal/.cache/go-build'\r\nGOENV='/home/pivotal/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/pivotal/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/pivotal/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build743232752=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/kxnqMuLCo-2\n\n### What did you see happen?\n\nSometimes getting an error:\r\n```\r\nfatal error: concurrent map writes\r\n\r\ngoroutine 53 [running]:\r\nnet/http/httputil.(*ReverseProxy).ServeHTTP.func2(0xc000222420?, 0xc000214000?)\r\n\t/usr/local/go-faketime/src/net/http/httputil/reverseproxy.go:464 +0x6b\r\nnet/http.(*persistConn).readResponse(0xc000230000, {{}, 0xc000214000, {0xc000142300}, 0xc00021c420, 0x0, 0xc00021c360, 0xc00021c3c0}, 0xc000110180)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2338 +0x1ff\r\nnet/http.(*persistConn).readLoop(0xc000230000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 49\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n\r\ngoroutine 1 [select]:\r\nnet/http.(*persistConn).roundTrip(0xc00019a120, 0xc0001a2000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2652 +0x979\r\nnet/http.(*Transport).roundTrip(0x8e13c0, 0xc00018a000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:604 +0x79a\r\nnet/http.(*Transport).RoundTrip(0xc00007ca08?, 0x740520?)\r\n\t/usr/local/go-faketime/src/net/http/roundtrip.go:17 +0x13\r\nnet/http.send(0xc00018a000, {0x740520, 0x8e13c0}, {0xc00007cc01?, 0x414da8?, 0x0?})\r\n\t/usr/local/go-faketime/src/net/http/client.go:260 +0x606\r\nnet/http.(*Client).send(0x8e6aa0, 0xc00018a000, {0x416328?, 0x42151c?, 0x0?})\r\n\t/usr/local/go-faketime/src/net/http/client.go:181 +0x98\r\nnet/http.(*Client).do(0x8e6aa0, 0xc00018a000)\r\n\t/usr/local/go-faketime/src/net/http/client.go:724 +0x912\r\nnet/http.(*Client).Do(...)\r\n\t/usr/local/go-faketime/src/net/http/client.go:590\r\nmain.main()\r\n\t/tmp/sandbox3108800449/prog.go:65 +0x45f\r\n\r\ngoroutine 6 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ae38, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000110000?, 0x4?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Accept(0xc000110000)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:611 +0x2ac\r\nnet.(*netFD).accept(0xc000110000)\r\n\t/usr/local/go-faketime/src/net/fd_unix.go:172 +0x29\r\nnet.(*TCPListener).accept(0xc000128000)\r\n\t/usr/local/go-faketime/src/net/tcpsock_posix.go:152 +0x1e\r\nnet.(*TCPListener).Accept(0xc000128000)\r\n\t/usr/local/go-faketime/src/net/tcpsock.go:315 +0x30\r\nnet/http.(*Server).Serve(0xc000100000, {0x742080, 0xc000128000})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3056 +0x364\r\nnet/http.(*Server).ListenAndServe(0xc000100000)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2985 +0x71\r\nnet/http.ListenAndServe({0x6c51dd, 0x5}, {0x73fcc0?, 0xc00001c240})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3239 +0x8f\r\ncreated by main.main in goroutine 1\r\n\t/tmp/sandbox3108800449/prog.go:22 +0xb6\r\n\r\ngoroutine 38 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ab50, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc0000ba000?, 0xc000102491?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Read(0xc0000ba000, {0xc000102491, 0x1, 0x1})\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:164 +0x27a\r\nnet.(*netFD).Read(0xc0000ba000, {0xc000102491?, 0xc000040780?, 0x40595b?})\r\n\t/usr/local/go-faketime/src/net/fd_posix.go:55 +0x25\r\nnet.(*conn).Read(0xc000042040, {0xc000102491?, 0xc000180000?, 0xc000076118?})\r\n\t/usr/local/go-faketime/src/net/net.go:179 +0x45\r\nnet/http.(*connReader).backgroundRead(0xc000102480)\r\n\t/usr/local/go-faketime/src/net/http/server.go:683 +0x37\r\ncreated by net/http.(*connReader).startBackgroundRead in goroutine 9\r\n\t/usr/local/go-faketime/src/net/http/server.go:679 +0xba\r\n\r\ngoroutine 18 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ad40, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000110080?, 0x16?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Accept(0xc000110080)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:611 +0x2ac\r\nnet.(*netFD).accept(0xc000110080)\r\n\t/usr/local/go-faketime/src/net/fd_unix.go:172 +0x29\r\nnet.(*TCPListener).accept(0xc000128060)\r\n\t/usr/local/go-faketime/src/net/tcpsock_posix.go:152 +0x1e\r\nnet.(*TCPListener).Accept(0xc000128060)\r\n\t/usr/local/go-faketime/src/net/tcpsock.go:315 +0x30\r\nnet/http.(*Server).Serve(0xc0001000f0, {0x742080, 0xc000128060})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3056 +0x364\r\nnet/http.(*Server).ListenAndServe(0xc0001000f0)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2985 +0x71\r\nnet/http.ListenAndServe({0x6c51e2, 0x5}, {0x0?, 0x0})\r\n\t/usr/local/go-faketime/src/net/http/server.go:3239 +0x8f\r\ncreated by main.main in goroutine 1\r\n\t/tmp/sandbox3108800449/prog.go:56 +0x2de\r\n\r\ngoroutine 19 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7ea93a63ac48, 0x72)\r\n\t/usr/local/go-faketime/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc0001a4200?, 0xc00012e000?, 0x0)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n\t/usr/local/go-faketime/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.(*FD).Read(0xc0001a4200, {0xc00012e000, 0x1000, 0x1000})\r\n\t/usr/local/go-faketime/src/internal/poll/fd_unix.go:164 +0x27a\r\nnet.(*netFD).Read(0xc0001a4200, {0xc00012e000?, 0x40cd65?, 0xc0001023c0?})\r\n\t/usr/local/go-faketime/src/net/fd_posix.go:55 +0x25\r\nnet.(*conn).Read(0xc000108030, {0xc00012e000?, 0xc000044800?, 0x10?})\r\n\t/usr/local/go-faketime/src/net/net.go:179 +0x45\r\nnet/http.(*persistConn).Read(0xc00019a120, {0xc00012e000?, 0xc00007cc90?, 0x7ea8f3cc02a8?})\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1954 +0x4a\r\nbufio.(*Reader).fill(0xc0001140c0)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:113 +0x103\r\nbufio.(*Reader).ReadSlice(0xc0001140c0, 0xd5?)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:379 +0x29\r\nbufio.(*Reader).ReadLine(0xc0001140c0)\r\n\t/usr/local/go-faketime/src/bufio/bufio.go:408 +0x25\r\nnet/textproto.(*Reader).readLineSlice(0xc00007cc90)\r\n\t/usr/local/go-faketime/src/net/textproto/reader.go:56 +0x99\r\nnet/textproto.(*Reader).ReadLine(...)\r\n\t/usr/local/go-faketime/src/net/textproto/reader.go:39\r\nnet/http.ReadResponse(0xc0001140c0, 0xc00018a100)\r\n\t/usr/local/go-faketime/src/net/http/response.go:161 +0x97\r\nnet/http.(*persistConn).readResponse(0xc00019a120, {{}, 0xc00018a100, {0xc00018a000}, 0xc0001340c0, 0x1, 0xc000134000, 0xc000134060}, 0x0)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2311 +0xce\r\nnet/http.(*persistConn).readLoop(0xc00019a120)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 33\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n\r\ngoroutine 20 [select]:\r\nnet/http.(*persistConn).writeLoop(0xc00019a120)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2421 +0xe5\r\ncreated by net/http.(*Transport).dialConn in goroutine 33\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1777 +0x16f1\r\n\r\ngoroutine 7 [runnable]:\r\nnet/textproto.MIMEHeader.Set(...)\r\n\t/usr/local/go-faketime/src/net/textproto/header.go:22\r\nnet/http.Header.Set(...)\r\n\t/usr/local/go-faketime/src/net/http/header.go:40\r\nmain.main.func4({0x741f00, 0xc000150000}, 0xc000110180?, {0xa?, 0xc00019963a?})\r\n\t/tmp/sandbox3108800449/prog.go:50 +0xc5\r\nnet/http/httputil.(*ReverseProxy).ServeHTTP(0xc00010c140, {0x741f00, 0xc000150000}, 0xc000142100)\r\n\t/usr/local/go-faketime/src/net/http/httputil/reverseproxy.go:475 +0x10c3\r\nmain.main.main.func2.func6({0x741f00, 0xc000150000}, 0x6252d9?)\r\n\t/tmp/sandbox3108800449/prog.go:33 +0xe5\r\nnet/http.HandlerFunc.ServeHTTP(0x10?, {0x741f00?, 0xc000150000?}, 0x7ea93a637b98?)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2136 +0x29\r\nnet/http.(*ServeMux).ServeHTTP(0x40d0e5?, {0x741f00, 0xc000150000}, 0xc000142000)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2514 +0x142\r\nnet/http.serverHandler.ServeHTTP({0x741038?}, {0x741f00?, 0xc000150000?}, 0x1?)\r\n\t/usr/local/go-faketime/src/net/http/server.go:2938 +0x8e\r\nnet/http.(*conn).serve(0xc0000bc000, {0x742490, 0xc000102360})\r\n\t/usr/local/go-faketime/src/net/http/server.go:2009 +0x5f4\r\ncreated by net/http.(*Server).Serve in goroutine 18\r\n\t/usr/local/go-faketime/src/net/http/server.go:3086 +0x5cb\r\n\r\ngoroutine 27 [chan receive]:\r\nmain.main.main.func2.func6.1()\r\n\t/tmp/sandbox3108800449/prog.go:30 +0x19\r\nnet/http.(*persistConn).readResponse(0xc000330000, {{}, 0xc00032c000, {0xc000142300}, 0xc000134720, 0x0, 0xc000134660, 0xc0001346c0}, 0xc000110180)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2319 +0x144\r\nnet/http.(*persistConn).readLoop(0xc000330000)\r\n\t/usr/local/go-faketime/src/net/http/transport.go:2133 +0x3b0\r\ncreated by net/http.(*Transport).dialConn in goroutine 65\r\n\t/usr/local/go-faketime/src/net/http/transport.go:1776 +0x169f\r\n```\n\n### What did you expect to see?\n\nExpected no errors.\r\n\r\nThis example has custom implementation of ErrorHandler that writes to response headers a bunch of times to better expose the data race. ReverseProxy [defaultErrorHandler writes to response headers once](https://github.com/golang/go/blob/b44f6378233ada888f0dc79e0ac56def4673d9ed/src/net/http/httputil/reverseproxy.go#L308). And there is also [some header updates happening after](https://github.com/golang/go/blob/b44f6378233ada888f0dc79e0ac56def4673d9ed/src/net/http/httputil/reverseproxy.go#L476-L504). \r\n\r\nThis seems to be an issue when RoundTrip retries requests. The first RoundTrip call does block until trace contexts are run, but not the subsequent RoundTrip calls.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/pivotal/.cache/go-build'\r\nGOENV='/home/pivotal/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/pivotal/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/pivotal/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build743232752=/tmp/go-build -gno-record-gcc-switches'\n"
65116,cmd/cgo/internal/test: TestCallbackCallersSEH failures### Go version\r\n\r\ngo version devel go1.22-e9b3ff15f4 Wed Jan 10 17:35:49 2024 +0000 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\ngo test --ldflags=-linkmode=internal -run=TestCallbackCallersSEH ./cmd/cgo/internal/test\r\n\r\n### What did you see happen?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\nSome more context:\r\n\r\n- Only reproduces when using the Go internal linker.\r\n- The test fails only with certain gcc versions. I've reproduced the failure with:\r\n\r\n,OS-Windows|NeedsFix|compiler/runtime,qmuntal,"### Go version\r\n\r\ngo version devel go1.22-e9b3ff15f4 Wed Jan 10 17:35:49 2024 +0000 windows/amd64\r\n\r\n### Output of `go env` in your module/workspace:\r\n\r\n```shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\aaa\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\aaa\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\aaa\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\aaa\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\aaa\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\aaa\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.22-e9b3ff15f4 Wed Jan 10 17:35:49 2024 +0000\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\aaa\\code\\golang-go\\src\\cmd\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\aaa\\AppData\\Local\\Temp\\go-build998051253=/tmp/go-build -gno-record-gcc-switches\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\ngo test --ldflags=-linkmode=internal -run=TestCallbackCallersSEH ./cmd/cgo/internal/test\r\n\r\n### What did you see happen?\r\n\r\n```cmd\r\n--- FAIL: TestCallbackCallersSEH (0.00s)\r\n    callback_windows.go:107: incorrect backtrace:\r\n        want:   [test._Cfunc_backtrace test.testCallbackCallersSEH.func1.1 test.testCallbackCallersSEH.func1 test.goCallback test._Cfunc_callback test.nestedCall.func1 test.nestedCall test.testCallbackCallersSEH test.TestCallbackCallersSEH]\r\n        got:    []\r\nFAIL\r\nFAIL    cmd/cgo/internal/test   2.527s\r\nFAIL\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```cmd\r\n=== RUN   TestCallbackCallersSEH\r\n--- PASS: TestCallbackCallersSEH (0.00s)\r\nPASS\r\nok      cmd/cgo/internal/test   2.286s\r\n```\r\n\r\nSome more context:\r\n\r\n- Only reproduces when using the Go internal linker.\r\n- The test fails only with certain gcc versions. I've reproduced the failure with:\r\n\r\n```cmd\r\n>gcc --version\r\ngcc (x86_64-posix-seh-rev2, Built by MinGW-W64 project) 12.2.0\r\nCopyright (C) 2022 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```","shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\aaa\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\aaa\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\aaa\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\aaa\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\aaa\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\aaa\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.22-e9b3ff15f4 Wed Jan 10 17:35:49 2024 +0000\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\aaa\\code\\golang-go\\src\\cmd\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\aaa\\AppData\\Local\\Temp\\go-build998051253=/tmp/go-build -gno-record-gcc-switches\r\n"
65112,"x/exp/apidiff: incorrectly reports incompatible change in type alias### Go version\n\ngo version go1.21.6 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI maintain a tool (https://github.com/joelanford/go-apidiff) that uses `golang.org/x/exp/apidiff` to compare two commits of a git repository to build a report on compatible/incompatible changes (thanks for doing all of the heavy lifting!).\r\n\r\nThis tool is used by the sigs.k8s.io/controller-runtime project to help its maintainers see when PRs making breaking changes.\r\n\r\nI bumped go-apidiff's dependency to https://github.com/golang/exp/tree/db7319d0e0e361ccef5c449b760df8e5f2d5087c\r\n\r\nThen, I used a build of go-apidiff with this dependency on controller-runtime, comparing commits with no code changes whatsoever. See https://github.com/kubernetes-sigs/controller-runtime/pull/2654\n\n### What did you see happen?\n\nI saw the `go-apidiff` run fail:  https://prow.k8s.io/view/gs/kubernetes-jenkins/pr-logs/pull/kubernetes-sigs_controller-runtime/2654/pull-controller-runtime-apidiff/1747021423471235072\r\n\r\nRelevant output:\r\n```\r\nsigs.k8s.io/controller-runtime\r\n  Incompatible changes:\r\n  - SchemeBuilder: changed from sigs.k8s.io/controller-runtime/pkg/scheme.Builder to sigs.k8s.io/controller-runtime/pkg/builder.Builder\r\n```\n\n### What did you expect to see?\n\nI expected to see no diff produced.\r\n\r\nI bisected changes in `golang.org/x/exp/apidiff` and found that commit https://github.com/golang/exp/tree/89c5cff77bcbacf5bc89bd83d69d4fa8c80cf8af is when this unexpected diff report begins.\r\n\r\nIf I downgrade to https://github.com/golang/exp/tree/3b0b5b66b5f19dc18cc54ec01e4b9d7906761f14, I see the expected output.",NeedsInvestigation,jba,"### Go version\n\ngo version go1.21.6 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/joe/Library/Caches/go-build'\r\nGOENV='/Users/joe/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/joe/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/joe/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/joe/.local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/joe/.local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/joe/projects/work/kubernetes-sigs/controller-runtime/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/w4/kts6sn8j2cz4fv_l67fp4cvm0000gn/T/go-build575403176=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI maintain a tool (https://github.com/joelanford/go-apidiff) that uses `golang.org/x/exp/apidiff` to compare two commits of a git repository to build a report on compatible/incompatible changes (thanks for doing all of the heavy lifting!).\r\n\r\nThis tool is used by the sigs.k8s.io/controller-runtime project to help its maintainers see when PRs making breaking changes.\r\n\r\nI bumped go-apidiff's dependency to https://github.com/golang/exp/tree/db7319d0e0e361ccef5c449b760df8e5f2d5087c\r\n\r\nThen, I used a build of go-apidiff with this dependency on controller-runtime, comparing commits with no code changes whatsoever. See https://github.com/kubernetes-sigs/controller-runtime/pull/2654\n\n### What did you see happen?\n\nI saw the `go-apidiff` run fail:  https://prow.k8s.io/view/gs/kubernetes-jenkins/pr-logs/pull/kubernetes-sigs_controller-runtime/2654/pull-controller-runtime-apidiff/1747021423471235072\r\n\r\nRelevant output:\r\n```\r\nsigs.k8s.io/controller-runtime\r\n  Incompatible changes:\r\n  - SchemeBuilder: changed from sigs.k8s.io/controller-runtime/pkg/scheme.Builder to sigs.k8s.io/controller-runtime/pkg/builder.Builder\r\n```\n\n### What did you expect to see?\n\nI expected to see no diff produced.\r\n\r\nI bisected changes in `golang.org/x/exp/apidiff` and found that commit https://github.com/golang/exp/tree/89c5cff77bcbacf5bc89bd83d69d4fa8c80cf8af is when this unexpected diff report begins.\r\n\r\nIf I downgrade to https://github.com/golang/exp/tree/3b0b5b66b5f19dc18cc54ec01e4b9d7906761f14, I see the expected output.","shell\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/joe/Library/Caches/go-build'\r\nGOENV='/Users/joe/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/joe/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/joe/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/joe/.local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/joe/.local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.6'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/joe/projects/work/kubernetes-sigs/controller-runtime/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/w4/kts6sn8j2cz4fv_l67fp4cvm0000gn/T/go-build575403176=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65098,x/tools/gopls: rename doesn't propagate to the implementors### Go version\n\ndevel go1.22-1d45a7ef56 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\n==> ./foo/foo.go <==\r\n\r\n\r\n==> ./bar/bar.go <==\r\n\r\n\r\n==> ./qux/qux.go <==\r\n\r\n\r\nThe renaming of the function `foo/I.F()` to `foo/I.FF()` doesn't propagate to `bar/S.F()`\r\n\r\nChecked with both `gopls@v0.15.0-pre.1` in VSCode and `gorename`\n\n### What did you see happen?\n\n`bar/S.F()` renamed to `bar/S.FF()`\n\n### What did you expect to see?\n\n`bar/s.F()` is not renamed,NeedsInvestigation|gopls|Tools|Refactoring,adonovan,"### Go version\n\ndevel go1.22-1d45a7ef56 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/denpeshkov/Library/Caches/go-build'\r\nGOENV='/Users/denpeshkov/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/denpeshkov/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/denpeshkov/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/denpeshkov/src/go.googlesource.com/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/denpeshkov/src/go.googlesource.com/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-1d45a7ef56 Wed Jan 10 03:29:50 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/denpeshkov/src/github.com/denpeshkov/greenlight/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/nw/fts0xshx033fq3q8rn4rhjhc0000gn/T/go-build755587796=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n==> ./foo/foo.go <==\r\n```go\r\npackage foo\r\n\r\ntype I interface {\r\n\tF()\r\n}\r\n```\r\n\r\n==> ./bar/bar.go <==\r\n```go\r\npackage bar\r\n\r\ntype S struct{}\r\n\r\nfunc (s S) F() {}\r\n```\r\n\r\n==> ./qux/qux.go <==\r\n```go\r\npackage qux\r\n\r\nimport (\r\n\t""github.com/denpeshkov/doodles/bar""\r\n\t""github.com/denpeshkov/doodles/foo""\r\n)\r\n\r\nvar _ foo.I = bar.S{}\r\n```\r\n\r\nThe renaming of the function `foo/I.F()` to `foo/I.FF()` doesn't propagate to `bar/S.F()`\r\n\r\nChecked with both `gopls@v0.15.0-pre.1` in VSCode and `gorename`\n\n### What did you see happen?\n\n`bar/S.F()` renamed to `bar/S.FF()`\n\n### What did you expect to see?\n\n`bar/s.F()` is not renamed","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/denpeshkov/Library/Caches/go-build'\r\nGOENV='/Users/denpeshkov/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/denpeshkov/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/denpeshkov/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/denpeshkov/src/go.googlesource.com/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/denpeshkov/src/go.googlesource.com/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-1d45a7ef56 Wed Jan 10 03:29:50 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/denpeshkov/src/github.com/denpeshkov/greenlight/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/nw/fts0xshx033fq3q8rn4rhjhc0000gn/T/go-build755587796=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65097,"cmd/compile: long build time (45 seconds) for a small package (1500 source lines of code)### Go version\n\ngo version go1.21.5 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nbelow are the steps to reproduce the timing result\r\n\r\non macos\r\n\r\n```\r\nrm -rf thelongbuild\r\ngit clone https://github.com/thomaspeugeot/thelongbuild.git\r\ncd thelongbuild/go/tree\r\ngo clean -cache\r\ntime go build -v\r\nsed -i '' 's/gongtree_buttons/gongtree_buttons_new/g' tree.go\r\ntime go build -v\r\ncd ../../..\r\n```\r\n\r\nthe sed command is to trick the compiler to dirty its cache.\r\n\r\nnote for other plateforms, the sed command is different, it is `sed -i 's/gongtree_buttons/gongtree_buttons_new/g' tree.go`\r\n\n\n### What did you see happen?\n\n`go build -v  46.99s user 2.44s system 371% cpu 13.320 total`\r\n\n\n### What did you expect to see?\n\nless than a few seconds",ToolSpeed|NeedsInvestigation|compiler/runtime,mdempsky,"### Go version\n\ngo version go1.21.5 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/thomaspeugeot/Library/Caches/go-build'\r\nGOENV='/Users/thomaspeugeot/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/thomaspeugeot/go/pkg/mod'\r\nGONOPROXY='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGONOSUMDB='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGOOS='darwin'\r\nGOPATH='/Users/thomaspeugeot/go'\r\nGOPRIVATE='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/thomaspeugeot/go/src/github.com/thomaspeugeot/thelongbuild/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_r/bxjvdzc17mb6p56qc7nms1r80000gn/T/go-build65103854=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nbelow are the steps to reproduce the timing result\r\n\r\non macos\r\n\r\n```\r\nrm -rf thelongbuild\r\ngit clone https://github.com/thomaspeugeot/thelongbuild.git\r\ncd thelongbuild/go/tree\r\ngo clean -cache\r\ntime go build -v\r\nsed -i '' 's/gongtree_buttons/gongtree_buttons_new/g' tree.go\r\ntime go build -v\r\ncd ../../..\r\n```\r\n\r\nthe sed command is to trick the compiler to dirty its cache.\r\n\r\nnote for other plateforms, the sed command is different, it is `sed -i 's/gongtree_buttons/gongtree_buttons_new/g' tree.go`\r\n\n\n### What did you see happen?\n\n`go build -v  46.99s user 2.44s system 371% cpu 13.320 total`\r\n\n\n### What did you expect to see?\n\nless than a few seconds","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/thomaspeugeot/Library/Caches/go-build'\r\nGOENV='/Users/thomaspeugeot/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/thomaspeugeot/go/pkg/mod'\r\nGONOPROXY='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGONOSUMDB='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGOOS='darwin'\r\nGOPATH='/Users/thomaspeugeot/go'\r\nGOPRIVATE='github.com/thomaspeugeot,github.com/fullstack-lang'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/thomaspeugeot/go/src/github.com/thomaspeugeot/thelongbuild/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/_r/bxjvdzc17mb6p56qc7nms1r80000gn/T/go-build65103854=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65085,"crypto/x509: potentially anomalous path building results### Go version\n\ngo1.21.5 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nHi there! I'm opening this to root-cause a [handful](https://x509-limbo.com/anomalous-results/gocryptox509-go1.21.5/) of potentially anomalous path building results with `crypto/x509`, which we found with [x509-limbo](https://x509-limbo.com/).\r\n\r\nFirst, a disclaimer: I suspect that many of the results above are expected or are non-issues from crypto/x509's perspective, since many are ""pedantic"" checks against a strict reading of RFC 5280. For example, [`rfc5280::nc::not-allowed-in-ee-critical`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ncnot-allowed-in-ee-critical) is technically disallowed under RFC 5280, but all other implementations appear to broadly ignore it.\r\n\r\nThere are, however, some discrepancies for which crypto/x509 is the outlier. A sampling of anomalous positives (chains built where other implementations fail):\r\n\r\n* [`rfc5280::aki::critical-aki`](https://x509-limbo.com/testcases/rfc5280/#rfc5280akicritical-aki): all other implementations under test reject critical AKIs; crypto/x509 accepts it\r\n* [`rfc5280::nc::nc-permits-invalid-dns-san`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ncnc-permits-invalid-dns-san): crypto/x509 and OpenSSL both accept a malformed DNS SAN that conflicts with a Name Constraint\r\n* [`rfc5280::ee-critical-aia-invalid`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ee-critical-aia-invalid): all other implementations reject critical AIAs; crypto/x509 accepts them (despite not supporting AIA chasing)\r\n\r\nThere are also some anomalous negatives (chains that fail to build where success is expected), but crypto/x509 is largely in consensus with other implementations around them (the main outlier is OpenSSL).\r\n\n\n### What did you see happen?\n\nThe full rendering of potentially anomalous results is here: <https://x509-limbo.com/anomalous-results/gocryptox509-go1.21.5/>\r\n\r\nAs mentioned above, some of these are almost certainly intended behavior on crypto/x509's part as part of handling real-world chains, especially outside of the Web PKI. However, I could find a document or docstring anywhere that explicitly enumerated these (in absolute fairness, nobody does this \U0001f642), so I figured I would open this up for general review and consideration.\n\n### What did you expect to see?\n\nIn cases involving critical or out-of-policy extensions that crypto/x509 appears to otherwise ignore, I expected to see chain build failures rather than successes. However, see qualifications above \U0001f642 ",Security|NeedsInvestigation,rolandshoemaker,"### Go version\n\ngo1.21.5 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/runner/.cache/go-build'\r\nGOENV='/home/runner/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/runner/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/runner/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/hostedtoolcache/go/1.21.5/x64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/hostedtoolcache/go/1.21.5/x64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1019109943=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nHi there! I'm opening this to root-cause a [handful](https://x509-limbo.com/anomalous-results/gocryptox509-go1.21.5/) of potentially anomalous path building results with `crypto/x509`, which we found with [x509-limbo](https://x509-limbo.com/).\r\n\r\nFirst, a disclaimer: I suspect that many of the results above are expected or are non-issues from crypto/x509's perspective, since many are ""pedantic"" checks against a strict reading of RFC 5280. For example, [`rfc5280::nc::not-allowed-in-ee-critical`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ncnot-allowed-in-ee-critical) is technically disallowed under RFC 5280, but all other implementations appear to broadly ignore it.\r\n\r\nThere are, however, some discrepancies for which crypto/x509 is the outlier. A sampling of anomalous positives (chains built where other implementations fail):\r\n\r\n* [`rfc5280::aki::critical-aki`](https://x509-limbo.com/testcases/rfc5280/#rfc5280akicritical-aki): all other implementations under test reject critical AKIs; crypto/x509 accepts it\r\n* [`rfc5280::nc::nc-permits-invalid-dns-san`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ncnc-permits-invalid-dns-san): crypto/x509 and OpenSSL both accept a malformed DNS SAN that conflicts with a Name Constraint\r\n* [`rfc5280::ee-critical-aia-invalid`](https://x509-limbo.com/testcases/rfc5280/#rfc5280ee-critical-aia-invalid): all other implementations reject critical AIAs; crypto/x509 accepts them (despite not supporting AIA chasing)\r\n\r\nThere are also some anomalous negatives (chains that fail to build where success is expected), but crypto/x509 is largely in consensus with other implementations around them (the main outlier is OpenSSL).\r\n\n\n### What did you see happen?\n\nThe full rendering of potentially anomalous results is here: <https://x509-limbo.com/anomalous-results/gocryptox509-go1.21.5/>\r\n\r\nAs mentioned above, some of these are almost certainly intended behavior on crypto/x509's part as part of handling real-world chains, especially outside of the Web PKI. However, I could find a document or docstring anywhere that explicitly enumerated these (in absolute fairness, nobody does this \U0001f642), so I figured I would open this up for general review and consideration.\n\n### What did you expect to see?\n\nIn cases involving critical or out-of-policy extensions that crypto/x509 appears to otherwise ignore, I expected to see chain build failures rather than successes. However, see qualifications above \U0001f642 ","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/runner/.cache/go-build'\r\nGOENV='/home/runner/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/runner/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/runner/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/hostedtoolcache/go/1.21.5/x64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/hostedtoolcache/go/1.21.5/x64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1019109943=/tmp/go-build -gno-record-gcc-switches'\n"
65075,cmd/compile: misspelling by case-mismatch of field names in literal no longer shown in compiler error messages like it did in Go1.17### Go version\n\ngo version devel go1.22-1ae729e6d3 Fri Jan 5 23:38:32 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI ran this program\r\n\r\n\n\n### What did you see happen?\n\nI got back this error\r\n\n\n### What did you expect to see?\n\n\r\n\r\nwhich was in Go1.17 and a nicer user experience that's prescriptive,NeedsInvestigation|compiler/runtime,griesemer,"### Go version\n\ngo version devel go1.22-1ae729e6d3 Fri Jan 5 23:38:32 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/emmanuelodeke/go/bin'\r\nGOCACHE='/Users/emmanuelodeke/Library/Caches/go-build'\r\nGOENV='/Users/emmanuelodeke/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/emmanuelodeke/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/emmanuelodeke/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/emmanuelodeke/go/src/go.googlesource.com/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/emmanuelodeke/go/src/go.googlesource.com/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-1ae729e6d3 Fri Jan 5 23:38:32 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/emmanuelodeke/go/src/github.com/orijtech/medisa/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-I/Users/emmanuelodeke/Desktop/openSrc/rocksdb/include'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-L/Users/emmanuelodeke/Desktop/openSrc/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/v3/7z434qpx5v3bw0wh8h2myfpw0000gn/T/go-build3071944846=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI ran this program\r\n\r\n```go\r\npackage main\r\n\r\ntype URL struct {\r\n\tURL  string\r\n\tNSFW bool\r\n\tID   string\r\n}\r\n\r\nfunc main() {\r\n\t_ = &URL{\r\n\t\tId: ""foo"",\r\n\t}\r\n}\r\n```\n\n### What did you see happen?\n\nI got back this error\r\n```shell\r\n./main.go:11:3: unknown field 'Id' in struct literal of type URL\r\n```\n\n### What did you expect to see?\n\n```shell\r\n./main.go:11:3: unknown field 'Id' in struct literal of type URL (but does have ID)\r\n```\r\n\r\nwhich was in Go1.17 and a nicer user experience that's prescriptive","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN='/Users/emmanuelodeke/go/bin'\r\nGOCACHE='/Users/emmanuelodeke/Library/Caches/go-build'\r\nGOENV='/Users/emmanuelodeke/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/emmanuelodeke/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/emmanuelodeke/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/emmanuelodeke/go/src/go.googlesource.com/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/emmanuelodeke/go/src/go.googlesource.com/go/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-1ae729e6d3 Fri Jan 5 23:38:32 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/emmanuelodeke/go/src/github.com/orijtech/medisa/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-I/Users/emmanuelodeke/Desktop/openSrc/rocksdb/include'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-L/Users/emmanuelodeke/Desktop/openSrc/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/v3/7z434qpx5v3bw0wh8h2myfpw0000gn/T/go-build3071944846=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65061,"go/version: unclear as to what counts as a valid Go version### Go version\n\ngo version devel go1.22-e9b3ff15 Wed Jan 10 17:35:49 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nI was playing around with the new `go/version` package to see how it works. \r\n\r\nI'm probably missing something, but I'm not entirely sure what a ""valid"" Go version entails - from the documentation of `Compare`:\r\n> Invalid versions, including the empty string, compare less than valid versions\r\n\r\nHowever, it also says:\r\n> Custom toolchain suffixes are ignored during comparison: ""go1.21.0"" and ""go1.21.0-bigcorp"" are equal.\n\n### What did you see happen?\n\nMy assumption going into this was that a ""valid"" version is one that returns a `true` when passed into `IsValid`. However, `IsValid` seems to reject custom toolchain names and names with `+auto` attached, see here: https://go.dev/play/p/OnEbA0bOovs?v=gotip\n\n### What did you expect to see?\n\nMaybe clarifying the docs would help better understand what a valid Go version is for folks other than me who might also make similar assumptions and I'm happy to send in a fix here! And thank you for introducing this package, we are already in the works of getting rid of custom parsing code in the Kubernetes codebase! \u2764\ufe0f ",NeedsFix|release-blocker,rsc,"### Go version\n\ngo version devel go1.22-e9b3ff15 Wed Jan 10 17:35:49 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\n\u276f gotip env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/mjivrajani/Library/Caches/go-build'\r\nGOENV='/Users/mjivrajani/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/mjivrajani/gocode/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/mjivrajani/gocode'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/mjivrajani/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/mjivrajani/sdk/gotip/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-e9b3ff15 Wed Jan 10 17:35:49 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/mjivrajani/gocode/src/github.com/MadhavJivrajani/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/r7/f6kyp7vs0sv90105pjh1t8340000gp/T/go-build3111256134=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI was playing around with the new `go/version` package to see how it works. \r\n\r\nI'm probably missing something, but I'm not entirely sure what a ""valid"" Go version entails - from the documentation of `Compare`:\r\n> Invalid versions, including the empty string, compare less than valid versions\r\n\r\nHowever, it also says:\r\n> Custom toolchain suffixes are ignored during comparison: ""go1.21.0"" and ""go1.21.0-bigcorp"" are equal.\n\n### What did you see happen?\n\nMy assumption going into this was that a ""valid"" version is one that returns a `true` when passed into `IsValid`. However, `IsValid` seems to reject custom toolchain names and names with `+auto` attached, see here: https://go.dev/play/p/OnEbA0bOovs?v=gotip\n\n### What did you expect to see?\n\nMaybe clarifying the docs would help better understand what a valid Go version is for folks other than me who might also make similar assumptions and I'm happy to send in a fix here! And thank you for introducing this package, we are already in the works of getting rid of custom parsing code in the Kubernetes codebase! \u2764\ufe0f ","shell\n\u276f gotip env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/mjivrajani/Library/Caches/go-build'\r\nGOENV='/Users/mjivrajani/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/mjivrajani/gocode/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/mjivrajani/gocode'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/mjivrajani/sdk/gotip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/mjivrajani/sdk/gotip/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-e9b3ff15 Wed Jan 10 17:35:49 2024 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/mjivrajani/gocode/src/github.com/MadhavJivrajani/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/r7/f6kyp7vs0sv90105pjh1t8340000gp/T/go-build3111256134=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65032,govulncheck-action: Support Go 1.22### Go version\n\ngo version go1.22rc1 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nTry to run govulncheck GitHub Action\n\n### What did you see happen?\n\nEncountered error: `Command failed: go env GOPATH go: downloading go1.22 (linux/amd64) go: download go1.22 for linux/amd64: toolchain not available`\n\n### What did you expect to see?\n\ngovulncheck able to run with Go 1.22,WaitingForInfo|NeedsInvestigation|vulncheck or vulndb,zpavlinovic,"### Go version\n\ngo version go1.22rc1 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/aurora/Library/Caches/go-build'\r\nGOENV='/Users/aurora/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aurora/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/aurora/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/tb/zwvbx7v51gz7lbj4x4fhn3wr0000gn/T/go-build2929267714=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nTry to run govulncheck GitHub Action\n\n### What did you see happen?\n\nEncountered error: `Command failed: go env GOPATH go: downloading go1.22 (linux/amd64) go: download go1.22 for linux/amd64: toolchain not available`\n\n### What did you expect to see?\n\ngovulncheck able to run with Go 1.22","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/aurora/Library/Caches/go-build'\r\nGOENV='/Users/aurora/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/aurora/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/aurora/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/tb/zwvbx7v51gz7lbj4x4fhn3wr0000gn/T/go-build2929267714=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65030,"cmd/compile: long function names due to generic instantiation with large struct types### Go version\n\ngo version devel go1.22-b702e0438a Mon Jan 8 20:15:52 2024 +0000 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nBuild this program:\r\n\r\nhttps://go.dev/play/p/6Jsq0rUhQ9K\r\n\r\nSource:\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""os/exec""\r\n\t""slices""\r\n)\r\n\r\nfunc main() {\r\n\tvar s []exec.Cmd\r\n\ts = slices.Insert(s, 0, exec.Cmd{})\r\n}\r\n```\r\n\r\nand examine the assembly (gcflags=-S).\r\n\n\n### What did you see happen?\n\n\r\nAt the call to slices.Insert in main function, here is an assembly fragment (from ""go build -gcflags=-S -trimpath main.go""):\r\n\r\n```\r\n\t0x0054 00084 (./main.go:10)\tMOVD\t$1, R6\r\n\t0x0058 00088 (./main.go:10)\tMOVD\tR6, R7\r\n\t0x005c 00092 (./main.go:10)\tPCDATA\t$1, $0\r\n\t0x005c 00092 (./main.go:10)\tCALL\tslices.Insert[go.shape.[]os/exec.Cmd,go.shape.struct { Path string; Args []string; Env []string; Dir string; Stdin io.Reader; Stdout io.Writer; Stderr io.Writer; ExtraFiles []*os.File; SysProcAttr *syscall.SysProcAttr; Process *os.Process; ProcessState *os.ProcessState; os/exec.ctx context.Context; Err error; Cancel func() error; WaitDelay time.Duration; os/exec.childIOFiles []io.Closer; os/exec.parentIOPipes []io.Closer; os/exec.goroutine []func() error; os/exec.goroutineErr <-chan error; os/exec.ctxResult <-chan os/exec.ctxResult; os/exec.createdByStack []uint8; os/exec.lookPathErr error }](SB)\r\n\t0x0060 00096 (./main.go:11)\tLDP\t-8(RSP), (R29, R30)\r\n\t0x0064 00100 (./main.go:11)\tADD\t$432, RSP\r\n```\r\n\r\nThe program works properly, but note the name for the instantiated version of `slices.Insert`, which is almost 600 characters long. Of particular concern is that although the generic function is instantiated with the type `exec.Cmd`, the function name looks like it refers to an anonymous struct type that has all the fields of `cmd.Exec`, but in which all the field names/types are spelled out (including package paths, etc). \r\n\r\nIn this example, the long function name is not that big a deal, but creates needless binary bloat, and for profilers (ex: pprof) and other tools that capture data files based on function names, the long names can result in much bigger data files. \r\n\r\nMore importantly however if you have a package with very long paths, and you import a large struct type from that package and instantiate a generic based on that, you can get absurdly long function names.\r\n\r\n\r\n\n\n### What did you expect to see?\n\n\r\nIdeally it would be better to have generic functions names that are proportional in size to the length of their qualified type parameters (e.g. ""os/exec.Cmd"") as opposed to O(N * P) where N is the number of struct fields in the type param and P is the length of the import path of the type's package.",NeedsFix|compiler/runtime,thanm,"### Go version\n\ngo version devel go1.22-b702e0438a Mon Jan 8 20:15:52 2024 +0000 darwin/arm64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/thanm/Library/Caches/go-build'\r\nGOENV='/Users/thanm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/thanm/go1/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/thanm/go1'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/thanm/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/thanm/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-b702e0438a Mon Jan 8 20:15:52 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/thanm/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/tf/lh5xw2y1657fwx2q0vxrt_5m008r__/T/go-build1807409156=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nBuild this program:\r\n\r\nhttps://go.dev/play/p/6Jsq0rUhQ9K\r\n\r\nSource:\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""os/exec""\r\n\t""slices""\r\n)\r\n\r\nfunc main() {\r\n\tvar s []exec.Cmd\r\n\ts = slices.Insert(s, 0, exec.Cmd{})\r\n}\r\n```\r\n\r\nand examine the assembly (gcflags=-S).\r\n\n\n### What did you see happen?\n\n\r\nAt the call to slices.Insert in main function, here is an assembly fragment (from ""go build -gcflags=-S -trimpath main.go""):\r\n\r\n```\r\n\t0x0054 00084 (./main.go:10)\tMOVD\t$1, R6\r\n\t0x0058 00088 (./main.go:10)\tMOVD\tR6, R7\r\n\t0x005c 00092 (./main.go:10)\tPCDATA\t$1, $0\r\n\t0x005c 00092 (./main.go:10)\tCALL\tslices.Insert[go.shape.[]os/exec.Cmd,go.shape.struct { Path string; Args []string; Env []string; Dir string; Stdin io.Reader; Stdout io.Writer; Stderr io.Writer; ExtraFiles []*os.File; SysProcAttr *syscall.SysProcAttr; Process *os.Process; ProcessState *os.ProcessState; os/exec.ctx context.Context; Err error; Cancel func() error; WaitDelay time.Duration; os/exec.childIOFiles []io.Closer; os/exec.parentIOPipes []io.Closer; os/exec.goroutine []func() error; os/exec.goroutineErr <-chan error; os/exec.ctxResult <-chan os/exec.ctxResult; os/exec.createdByStack []uint8; os/exec.lookPathErr error }](SB)\r\n\t0x0060 00096 (./main.go:11)\tLDP\t-8(RSP), (R29, R30)\r\n\t0x0064 00100 (./main.go:11)\tADD\t$432, RSP\r\n```\r\n\r\nThe program works properly, but note the name for the instantiated version of `slices.Insert`, which is almost 600 characters long. Of particular concern is that although the generic function is instantiated with the type `exec.Cmd`, the function name looks like it refers to an anonymous struct type that has all the fields of `cmd.Exec`, but in which all the field names/types are spelled out (including package paths, etc). \r\n\r\nIn this example, the long function name is not that big a deal, but creates needless binary bloat, and for profilers (ex: pprof) and other tools that capture data files based on function names, the long names can result in much bigger data files. \r\n\r\nMore importantly however if you have a package with very long paths, and you import a large struct type from that package and instantiate a generic based on that, you can get absurdly long function names.\r\n\r\n\r\n\n\n### What did you expect to see?\n\n\r\nIdeally it would be better to have generic functions names that are proportional in size to the length of their qualified type parameters (e.g. ""os/exec.Cmd"") as opposed to O(N * P) where N is the number of struct fields in the type param and P is the length of the import path of the type's package.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/thanm/Library/Caches/go-build'\r\nGOENV='/Users/thanm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/thanm/go1/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/thanm/go1'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/thanm/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/thanm/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-b702e0438a Mon Jan 8 20:15:52 2024 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/thanm/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/tf/lh5xw2y1657fwx2q0vxrt_5m008r__/T/go-build1807409156=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
65025,"math/big: nat.mulRange produces incorrect results for large input arguments### Go version\n\ngo version devel go1.22-8eaa7935db Mon Jan 8 18:52:56 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nmulRange(math.MaxUint64 - 3, math.MaxUint64) overflows the internal median computation\r\n(reported by jannotti@gmail.com)\n\n### What did you see happen?\n\nincorrect result / stack overflow\n\n### What did you expect to see?\n\ncorrect result",NeedsFix,griesemer,"### Go version\n\ngo version devel go1.22-8eaa7935db Mon Jan 8 18:52:56 2024 +0000 darwin/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nirrelevant\n```\n\n\n### What did you do?\n\nmulRange(math.MaxUint64 - 3, math.MaxUint64) overflows the internal median computation\r\n(reported by jannotti@gmail.com)\n\n### What did you see happen?\n\nincorrect result / stack overflow\n\n### What did you expect to see?\n\ncorrect result",shell\nirrelevant\n
65024,"x/tools/gopls: incorrect package qualification when stubbing method in v2 module### gopls version\n\nv0.14.2\n\n### go env\n\n\n\n\n### What did you do?\n\nThere's a module with major version in its module path, namely `github.com/caddyserver/caddy/v2`. The module declares the interface:\r\n```\r\ntype Module interface {\r\n    CaddyModule() ModuleInfo\r\n}\r\n```\r\nIn a different package within the module, I have a file with the following:\r\n```\r\ntype Something struct{}\r\nvar _ caddy.Module = (*Something)(nil)\r\n```\r\nAs expected, vscode-go tells me it that Something does not implement the interface, and suggests to implement caddy.Module. Click on the suggestion to implement (generate stub for) `caddy.Module` interface.\n\n### What did you see happen?\n\nThe generated stub implementation was:\r\n\r\n```\r\nfunc (*Something) CaddyModule() v2.ModuleInfo {\r\n\tpanic(""unimplemented"")\r\n}\r\n```\n\n### What did you expect to see?\n\n```\r\nfunc (*Something) CaddyModule() caddy.ModuleInfo {\r\n\tpanic(""unimplemented"")\r\n}\r\n```\r\n\r\nThis is because the package name at the root of the module is `caddy`, not `v2`.\n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_",gopls|Tools,adonovan,"### gopls version\n\nv0.14.2\n\n### go env\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/mohammed/Library/Caches/go-build'\r\nGOENV='/Users/mohammed/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/mohammed/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/mohammed/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.5/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.5/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/mohammed/projects/caddyserver/caddy/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/y4/4f2hpy494s5598r584s_8w0h0000gn/T/go-build593698980=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nThere's a module with major version in its module path, namely `github.com/caddyserver/caddy/v2`. The module declares the interface:\r\n```\r\ntype Module interface {\r\n    CaddyModule() ModuleInfo\r\n}\r\n```\r\nIn a different package within the module, I have a file with the following:\r\n```\r\ntype Something struct{}\r\nvar _ caddy.Module = (*Something)(nil)\r\n```\r\nAs expected, vscode-go tells me it that Something does not implement the interface, and suggests to implement caddy.Module. Click on the suggestion to implement (generate stub for) `caddy.Module` interface.\n\n### What did you see happen?\n\nThe generated stub implementation was:\r\n\r\n```\r\nfunc (*Something) CaddyModule() v2.ModuleInfo {\r\n\tpanic(""unimplemented"")\r\n}\r\n```\n\n### What did you expect to see?\n\n```\r\nfunc (*Something) CaddyModule() caddy.ModuleInfo {\r\n\tpanic(""unimplemented"")\r\n}\r\n```\r\n\r\nThis is because the package name at the root of the module is `caddy`, not `v2`.\n\n### Editor and settings\n\n_No response_\n\n### Logs\n\n_No response_","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/mohammed/Library/Caches/go-build'\r\nGOENV='/Users/mohammed/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/mohammed/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/mohammed/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.5/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.5/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/mohammed/projects/caddyserver/caddy/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/y4/4f2hpy494s5598r584s_8w0h0000gn/T/go-build593698980=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
64990,"os: TestUserConfigDir and TestUserCacheDir expect writable $HOME on linux### Go version\n\ngo version go1.22rc1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nBuilding Go 1.22 on Debian build system.\n\n### What did you see happen?\n\nhttps://buildd.debian.org/status/fetch.php?pkg=golang-1.22&arch=arm64&ver=1.22%7Erc1-1&stamp=1704505334&raw=0\r\n\r\n```\r\n--- FAIL: TestUserConfigDir (0.00s)\r\n    os_test.go:2874: could not create UserConfigDir: mkdir /sbuild-nonexistent: permission denied\r\n--- FAIL: TestUserCacheDir (0.00s)\r\n    os_test.go:2851: could not create UserCacheDir: mkdir /sbuild-nonexistent: permission denied\r\n```\n\n### What did you expect to see?\n\nBuild successfully without distro patch.\r\n\r\nWhile reading #57630 and #57638, @bcmills said\r\n\r\n> Perhaps it should return an error if the chosen directory is not writable\r\n\r\nHowever UserConfigDir and UserCacheDir don't report such error, and only the tests expect the returned paths are writable.\r\n\r\nThe Debian build system is intentionally configured to have a non-writable $HOME dir. Previously the Debian package carries a patch to skip TestUserHomeDir which failed if $HOME is not writable. However this is fixed in https://github.com/golang/go/commit/bb4ea80befa5f91aa50ccb170e0abdcbc0d01627. But for the new added TestUserConfigDir and TestUserCacheDir, they fail again.",Testing|NeedsFix|release-blocker|FixPending,bcmills,"### Go version\n\ngo version go1.22rc1 linux/amd64\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/zsj/.cache/go-build'\r\nGOENV='/home/zsj/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/zsj/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/zsj/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/home/zsj/Workspaces/debian/package/pkg-go/build-area/x/usr/lib/go-1.22'\r\nGOSUMDB='sum.golang.google.cn'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/zsj/Workspaces/debian/package/pkg-go/build-area/x/usr/lib/go-1.22/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3035930955=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nBuilding Go 1.22 on Debian build system.\n\n### What did you see happen?\n\nhttps://buildd.debian.org/status/fetch.php?pkg=golang-1.22&arch=arm64&ver=1.22%7Erc1-1&stamp=1704505334&raw=0\r\n\r\n```\r\n--- FAIL: TestUserConfigDir (0.00s)\r\n    os_test.go:2874: could not create UserConfigDir: mkdir /sbuild-nonexistent: permission denied\r\n--- FAIL: TestUserCacheDir (0.00s)\r\n    os_test.go:2851: could not create UserCacheDir: mkdir /sbuild-nonexistent: permission denied\r\n```\n\n### What did you expect to see?\n\nBuild successfully without distro patch.\r\n\r\nWhile reading #57630 and #57638, @bcmills said\r\n\r\n> Perhaps it should return an error if the chosen directory is not writable\r\n\r\nHowever UserConfigDir and UserCacheDir don't report such error, and only the tests expect the returned paths are writable.\r\n\r\nThe Debian build system is intentionally configured to have a non-writable $HOME dir. Previously the Debian package carries a patch to skip TestUserHomeDir which failed if $HOME is not writable. However this is fixed in https://github.com/golang/go/commit/bb4ea80befa5f91aa50ccb170e0abdcbc0d01627. But for the new added TestUserConfigDir and TestUserCacheDir, they fail again.","shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/zsj/.cache/go-build'\r\nGOENV='/home/zsj/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/zsj/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/zsj/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/home/zsj/Workspaces/debian/package/pkg-go/build-area/x/usr/lib/go-1.22'\r\nGOSUMDB='sum.golang.google.cn'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/zsj/Workspaces/debian/package/pkg-go/build-area/x/usr/lib/go-1.22/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3035930955=/tmp/go-build -gno-record-gcc-switches'\n"
64978,"x/tools/go/analysis/unitchecker,slices: `TestVetStdlib` failing due to vet errors in panic tests### Go version\n\n8db131082d08e497fd8e9383d0ff7715e1bef478\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nhttps://build.golang.org/log/2ee364aaab909e8dcc3be5bd1c45c1aa12dc8151\n\n### What did you see happen?\n\n```\r\n--- FAIL: TestVetStdlib (39.88s)\r\n    vet_std_test.go:99: go vet std failed (exit status 1):\r\n        # slices_test\r\n        # [slices_test]\r\n        /tmp/workdir/go/src/slices/slices_test.go:560:29: result of slices.Insert call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:687:29: result of slices.Delete call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:909:49: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:912:49: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:924:7: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:1040:30: result of slices.Replace call not used\r\nFAIL\r\nFAIL\tgolang.org/x/tools/go/analysis/unitchecker\t48.138s\r\n```\n\n### What did you expect to see?\n\nAll tests passing. (I believe this can be fixed by explicitly assigning to `_` in the panic tests in `slices_test.go`.)",NeedsFix|Tools,adonovan,"### Go version\n\n8db131082d08e497fd8e9383d0ff7715e1bef478\n\n### Output of `go env` in your module/workspace:\n\n```shell\nlinux-arm64-longtest at 8db131082d08e497fd8e9383d0ff7715e1bef478 building tools at ba8672b53f4b6840528df6fd534cb16f65278711\r\n\r\n:: Running /tmp/workdir/go/bin/go with args [""/tmp/workdir/go/bin/go"" ""test"" ""-timeout=50m0s"" ""./...""] and env [""HOSTNAME=fc37d78d0c48"" ""HOME=/root"" ""SHLVL=0"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/tmp/workdir"" ""GOROOT_BOOTSTRAP=/tmp/workdir/go1.4"" ""GO_BUILDER_NAME=linux-arm64-longtest"" ""GO_TEST_SHORT=0"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOROOT=/tmp/workdir/go"" ""GOPATH=/tmp/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/tmp/workdir/tmp"" ""GOCACHE=/tmp/workdir/gocache"" ""GOPLSCACHE=/tmp/workdir/goplscache"" ""PATH=/tmp/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""PWD=/tmp/workdir/gopath/src/golang.org/x/tools""] in dir /tmp/workdir/gopath/src/golang.org/x/tools\n```\n\n\n### What did you do?\n\nhttps://build.golang.org/log/2ee364aaab909e8dcc3be5bd1c45c1aa12dc8151\n\n### What did you see happen?\n\n```\r\n--- FAIL: TestVetStdlib (39.88s)\r\n    vet_std_test.go:99: go vet std failed (exit status 1):\r\n        # slices_test\r\n        # [slices_test]\r\n        /tmp/workdir/go/src/slices/slices_test.go:560:29: result of slices.Insert call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:687:29: result of slices.Delete call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:909:49: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:912:49: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:924:7: result of slices.Grow call not used\r\n        /tmp/workdir/go/src/slices/slices_test.go:1040:30: result of slices.Replace call not used\r\nFAIL\r\nFAIL\tgolang.org/x/tools/go/analysis/unitchecker\t48.138s\r\n```\n\n### What did you expect to see?\n\nAll tests passing. (I believe this can be fixed by explicitly assigning to `_` in the panic tests in `slices_test.go`.)","shell\nlinux-arm64-longtest at 8db131082d08e497fd8e9383d0ff7715e1bef478 building tools at ba8672b53f4b6840528df6fd534cb16f65278711\r\n\r\n:: Running /tmp/workdir/go/bin/go with args [""/tmp/workdir/go/bin/go"" ""test"" ""-timeout=50m0s"" ""./...""] and env [""HOSTNAME=fc37d78d0c48"" ""HOME=/root"" ""SHLVL=0"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/tmp/workdir"" ""GOROOT_BOOTSTRAP=/tmp/workdir/go1.4"" ""GO_BUILDER_NAME=linux-arm64-longtest"" ""GO_TEST_SHORT=0"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOROOT=/tmp/workdir/go"" ""GOPATH=/tmp/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/tmp/workdir/tmp"" ""GOCACHE=/tmp/workdir/gocache"" ""GOPLSCACHE=/tmp/workdir/goplscache"" ""PATH=/tmp/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""PWD=/tmp/workdir/gopath/src/golang.org/x/tools""] in dir /tmp/workdir/gopath/src/golang.org/x/tools\n"
64970,"x/vuln: govulncheck support `-hide-unused` in text mode### govulncheck version\n\nGo: go1.21.4\r\nScanner: govulncheck@v1.0.2-0.20231220041129-7335627909c9\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-01-04 18:39:51 +0000 UTC\r\n\r\nNo vulnerabilities found.\r\n\r\nShare feedback at https://go.dev/s/govulncheck-feedback.\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nYes.\n\n### Output of `go env` in your module/workspace:\n\n\n\n\n### What did you do?\n\nHi, when I run `govulncheck ./...` to check the vulnerabilities of my project, It outputs the --- informational --- section\uff0c which means it is only imported or required rather than have been used.\r\n\r\nI want to suppress the output of the --- informational --- part, I think it could be ignored. At least, we could provide an option `-hide-unused` to support this.\r\n\r\nAnd, I read the code to support this:\r\n1. for the TextHandler, it's easy to support this. Just add an flag -hide-unused and make some changes to the `TextHandler.Flush()`. The task will be done.\r\n2. but for the jsonHandler, it's not that easy to support this. Actually jsonHandler will output the CSVs associated with current imported modules in the underlying JSON encoder, and then output the findings. \r\n3. The documentation doesn't describe the goals of textmode and jsonmode, so I don't know if I should make changes to the jsonHandler.\r\n\r\nNow I only fork and make changes to the textmode. \n\n### What did you see happen?\n\nIt outputs the --- informational --- part, which contains the vulnerabilities associated with the only imported or required modules.\n\n### What did you expect to see?\n\nI hope we could support an option -hide-unused.\r\nwhen -hide-unused specified, don't output the --- informational --- part.",vulncheck or vulndb,zpavlinovic,"### govulncheck version\n\nGo: go1.21.4\r\nScanner: govulncheck@v1.0.2-0.20231220041129-7335627909c9\r\nDB: https://vuln.go.dev\r\nDB updated: 2024-01-04 18:39:51 +0000 UTC\r\n\r\nNo vulnerabilities found.\r\n\r\nShare feedback at https://go.dev/s/govulncheck-feedback.\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nYes.\n\n### Output of `go env` in your module/workspace:\n\n```shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='xxxxx/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4126326493=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nHi, when I run `govulncheck ./...` to check the vulnerabilities of my project, It outputs the --- informational --- section\uff0c which means it is only imported or required rather than have been used.\r\n\r\nI want to suppress the output of the --- informational --- part, I think it could be ignored. At least, we could provide an option `-hide-unused` to support this.\r\n\r\nAnd, I read the code to support this:\r\n1. for the TextHandler, it's easy to support this. Just add an flag -hide-unused and make some changes to the `TextHandler.Flush()`. The task will be done.\r\n2. but for the jsonHandler, it's not that easy to support this. Actually jsonHandler will output the CSVs associated with current imported modules in the underlying JSON encoder, and then output the findings. \r\n3. The documentation doesn't describe the goals of textmode and jsonmode, so I don't know if I should make changes to the jsonHandler.\r\n\r\nNow I only fork and make changes to the textmode. \n\n### What did you see happen?\n\nIt outputs the --- informational --- part, which contains the vulnerabilities associated with the only imported or required modules.\n\n### What did you expect to see?\n\nI hope we could support an option -hide-unused.\r\nwhen -hide-unused specified, don't output the --- informational --- part.","shell\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='xxxxx/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4126326493=/tmp/go-build -gno-record-gcc-switches'\n"
64954,"cmd/cover: allow code coverage colour configuration### Go version\n\ngo version go1.21.4 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nRef: Issue 27553.\r\nJust running normal `go tool cover` and viewing output.\n\n### What did you expect to see?\n\nI am slightly red/green colour blind and almost always change the default colours of many programs to improve readability (for me - my colleagues might disagree ;-).  I never find ""grey on black"" easy to read and don't really like either the font or the colour scheme for the code coverage.\r\nI read issue 27553 and the comments about CSS being involved but I'm struggling to see how this can easily be changed since it appears to be hard-wired into the output HTML file.\n\n### What did you see instead?\n\nIt would be nice if the process took a default CSS file that could then be tailored and overridden via a command line parameter so I could use custom colours myself but others can stick with the defaults if they wish.",NeedsInvestigation|FeatureRequest,thanm,"### Go version\n\ngo version go1.21.4 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/developer/.cache/go-build'\r\nGOENV='/home/developer/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/developer/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/developer/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/developer/git/nc-registration-hub/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2837408259=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nRef: Issue 27553.\r\nJust running normal `go tool cover` and viewing output.\n\n### What did you expect to see?\n\nI am slightly red/green colour blind and almost always change the default colours of many programs to improve readability (for me - my colleagues might disagree ;-).  I never find ""grey on black"" easy to read and don't really like either the font or the colour scheme for the code coverage.\r\nI read issue 27553 and the comments about CSS being involved but I'm struggling to see how this can easily be changed since it appears to be hard-wired into the output HTML file.\n\n### What did you see instead?\n\nIt would be nice if the process took a default CSS file that could then be tailored and overridden via a command line parameter so I could use custom colours myself but others can stick with the defaults if they wish.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/developer/.cache/go-build'\r\nGOENV='/home/developer/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/developer/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/developer/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/developer/git/nc-registration-hub/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2837408259=/tmp/go-build -gno-record-gcc-switches'\n"
64942,"x/pkgsite/internal/tests/deps: TestCmdPkgsiteDeps failing on js/wasm due to lack of `exec` support```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/pkgsite/internal/tests/deps"" && test == ""TestCmdPkgsiteDeps"" && `exec: ""go"": executable file not found in $PATH` && date < ""2024-01-04""\r\n```\r\n\r\n### Go version\r\n\r\nc95fe91d0715dc0a8d55ac80a80f383c3635548b\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck build status at https://build.golang.org/?repo=golang.org%2fx%2fpkgsite.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\nhttps://build.golang.org/log/60d543c1c0a966e10b9ccbfa67714f9755dbab21:\r\n```\r\njs-wasm-node18 at c95fe91d0715dc0a8d55ac80a80f383c3635548b building pkgsite at 475d4c57676e9e93276be3b802aaa7e758610ead\r\n\u2026\r\n--- FAIL: TestCmdPkgsiteDeps (0.00s)\r\n    cmd_pkgsite_deps_test.go:36: running go list:  exec: ""go"": executable file not found in $PATH\r\nFAIL\r\nFAIL\tgolang.org/x/pkgsite/internal/tests/deps\t0.336s\r\n```\r\n\r\nThis test should call [`testenv.MustHaveExecPath(t, ""go"")`](https://pkg.go.dev/golang.org/x/pkgsite/internal/testenv#MustHaveExecPath) to skip on platforms that do not support `exec`.\r\n\r\n(attn @matloob)",Testing|NeedsFix|arch-wasm,matloob,"```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/pkgsite/internal/tests/deps"" && test == ""TestCmdPkgsiteDeps"" && `exec: ""go"": executable file not found in $PATH` && date < ""2024-01-04""\r\n```\r\n\r\n### Go version\r\n\r\nc95fe91d0715dc0a8d55ac80a80f383c3635548b\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\n:: Running /workdir/go/bin/go with args [""/workdir/go/bin/go"" ""test"" ""-short"" ""./...""] and env [""HOSTNAME=buildlet-linux-amd64-js-wasm-node18-rn72e0494"" ""DEBIAN_FRONTEND=noninteractive"" ""HOME=/root"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=js-wasm-node18"" ""GOOS=js"" ""GOARCH=wasm"" ""GOHOSTOS=linux"" ""GOHOSTARCH=amd64"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOROOT=/workdir/go"" ""GOPATH=/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PATH=/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/workdir/go/misc/wasm"" ""PWD=/workdir/gopath/src/golang.org/x/pkgsite""] in dir /workdir/gopath/src/golang.org/x/pkgsite\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck build status at https://build.golang.org/?repo=golang.org%2fx%2fpkgsite.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\nhttps://build.golang.org/log/60d543c1c0a966e10b9ccbfa67714f9755dbab21:\r\n```\r\njs-wasm-node18 at c95fe91d0715dc0a8d55ac80a80f383c3635548b building pkgsite at 475d4c57676e9e93276be3b802aaa7e758610ead\r\n\u2026\r\n--- FAIL: TestCmdPkgsiteDeps (0.00s)\r\n    cmd_pkgsite_deps_test.go:36: running go list:  exec: ""go"": executable file not found in $PATH\r\nFAIL\r\nFAIL\tgolang.org/x/pkgsite/internal/tests/deps\t0.336s\r\n```\r\n\r\nThis test should call [`testenv.MustHaveExecPath(t, ""go"")`](https://pkg.go.dev/golang.org/x/pkgsite/internal/testenv#MustHaveExecPath) to skip on platforms that do not support `exec`.\r\n\r\n(attn @matloob)","shell\r\n:: Running /workdir/go/bin/go with args [""/workdir/go/bin/go"" ""test"" ""-short"" ""./...""] and env [""HOSTNAME=buildlet-linux-amd64-js-wasm-node18-rn72e0494"" ""DEBIAN_FRONTEND=noninteractive"" ""HOME=/root"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=js-wasm-node18"" ""GOOS=js"" ""GOARCH=wasm"" ""GOHOSTOS=linux"" ""GOHOSTARCH=amd64"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOROOT=/workdir/go"" ""GOPATH=/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PATH=/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/workdir/go/misc/wasm"" ""PWD=/workdir/gopath/src/golang.org/x/pkgsite""] in dir /workdir/gopath/src/golang.org/x/pkgsite\r\n"
64941,"x/exp/protoveneer/cmd/protoveneer: TestGeneration failing due to spurious update to copyright year### Go version\n\nc95fe91d0715dc0a8d55ac80a80f383c3635548b\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nCheck builder status at https://build.golang.org/.\n\n### What did you expect to see?\n\nAll tests passing (per #11811).\n\n### What did you see instead?\n\n```\r\nwrote testdata/basic/basic_veneer.gen.go\r\n--- FAIL: TestGeneration (0.00s)\r\n    --- FAIL: TestGeneration/basic (0.00s)\r\n        protoveneer_test.go:53: diff (-want, +got):\r\n              strings.Join({\r\n              \t""// Copyright 202"",\r\n            - \t""3"",\r\n            + \t""4"",\r\n              \t"" Google LLC\\n//\\n// Licensed under the Apache License, Version 2.0"",\r\n              \t"" (the \\""License\\"");\\n// you may not use this file except in complia"",\r\n              \t... // 6656 identical bytes\r\n              }, """")\r\nFAIL\r\nFAIL\tgolang.org/x/exp/protoveneer/cmd/protoveneer\t0.006s\r\n```\r\n\r\n(attn @jba @eliben)",NeedsFix|Soon|FixPending,jba,"### Go version\n\nc95fe91d0715dc0a8d55ac80a80f383c3635548b\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\n:: Running /workdir/go/bin/go with args [""/workdir/go/bin/go"" ""test"" ""-short"" ""./...""] and env [""HOSTNAME=buildlet-linux-amd64-bullseye-rn05739ee"" ""HOME=/root"" ""SHLVL=0"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=linux-amd64"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOROOT=/workdir/go"" ""GOPATH=/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PATH=/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""PWD=/workdir/gopath/src/golang.org/x/exp""] in dir /workdir/gopath/src/golang.org/x/exp\n```\n\n\n### What did you do?\n\nCheck builder status at https://build.golang.org/.\n\n### What did you expect to see?\n\nAll tests passing (per #11811).\n\n### What did you see instead?\n\n```\r\nwrote testdata/basic/basic_veneer.gen.go\r\n--- FAIL: TestGeneration (0.00s)\r\n    --- FAIL: TestGeneration/basic (0.00s)\r\n        protoveneer_test.go:53: diff (-want, +got):\r\n              strings.Join({\r\n              \t""// Copyright 202"",\r\n            - \t""3"",\r\n            + \t""4"",\r\n              \t"" Google LLC\\n//\\n// Licensed under the Apache License, Version 2.0"",\r\n              \t"" (the \\""License\\"");\\n// you may not use this file except in complia"",\r\n              \t... // 6656 identical bytes\r\n              }, """")\r\nFAIL\r\nFAIL\tgolang.org/x/exp/protoveneer/cmd/protoveneer\t0.006s\r\n```\r\n\r\n(attn @jba @eliben)","shell\n:: Running /workdir/go/bin/go with args [""/workdir/go/bin/go"" ""test"" ""-short"" ""./...""] and env [""HOSTNAME=buildlet-linux-amd64-bullseye-rn05739ee"" ""HOME=/root"" ""SHLVL=0"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=linux-amd64"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOROOT=/workdir/go"" ""GOPATH=/workdir/gopath"" ""GOPROXY=http://gk3-services-nap-jetxd907-8f582974-hv4r.c.symbolic-datum-552.internal:30157"" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PATH=/workdir/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""PWD=/workdir/gopath/src/golang.org/x/exp""] in dir /workdir/gopath/src/golang.org/x/exp\n"
64938,"runtime: memory corruption on `android-arm-corellium````\r\n#!watchflakes\r\ndefault <- builder == ""android-arm-corellium""\r\n```\r\n\r\n### Go version\r\n\r\nb25f5558c69140deb652337afaab5c1186cd0ff1\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck builder status on https://build.golang.org/.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests consistently passing.\r\n\r\n### What did you see instead?\r\n\r\nThe `android-arm-corellium` builder is failing essentially every run, but not in a consistent place. The failure symptoms are consistent with memory corruption, although it's not obvious to me whether the corruption is a hardware or platform issue or a bug somewhere in the Go runtime or compiler.\r\n\r\n(attn @golang/android)",Builders|OS-Android|NeedsInvestigation|arch-arm|compiler/runtime,mknyszek,"```\r\n#!watchflakes\r\ndefault <- builder == ""android-arm-corellium""\r\n```\r\n\r\n### Go version\r\n\r\nb25f5558c69140deb652337afaab5c1186cd0ff1\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\n:: Running /data/data/com.termux/files/usr/bin/bash with args [""bash"" ""/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src/make.bash"" ""-force""] and env [""SHELL=/data/data/com.termux/files/usr/bin/bash"" ""COLORTERM=truecolor"" ""TERM_PROGRAM_VERSION=next-3.4"" ""TMUX=/data/data/com.termux/files/usr/var/run/tmux-10066/default,2426,0"" ""PREFIX=/data/data/com.termux/files/usr"" ""TERMUX_IS_DEBUGGABLE_BUILD=0"" ""TERMUX_MAIN_PACKAGE_FORMAT=debian"" ""TERMUX_VERSION=0.118.0"" ""EXTERNAL_STORAGE=/sdcard"" ""HOME=/data/data/com.termux/files/home"" ""LANG=en_US.UTF-8"" ""TMUX_TMPDIR=/data/data/com.termux/files/usr/var/run"" ""TERMUX_APK_RELEASE=F_DROID"" ""GO_BUILDER_ENV=host-android-arm64-corellium-android"" ""ANDROID_DATA=/data"" ""TERM=screen-256color"" ""TMUX_PANE=%0"" ""SHLVL=0"" ""ANDROID_ROOT=/system"" ""BOOTCLASSPATH=/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/okhttp.jar:/system/framework/bouncycastle.jar:/system/framework/apache-xml.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/android.hidl.base-V1.0-java.jar:/system/framework/android.hidl.manager-V1.0-java.jar:/system/framework/framework-oahl-backward-compatibility.jar:/system/framework/android.test.base.jar"" ""TERMUX_APP_PID=2377"" ""PATH=/data/data/com.termux/files/home/go/bin:/data/data/com.termux/files/usr/bin"" ""CC=/data/data/com.termux/files/home/clangwrap"" ""TERM_PROGRAM=tmux"" ""_=/data/data/com.termux/files/home/go/bin/buildlet"" ""WORKDIR=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android"" ""GO_BUILDER_NAME=android-arm-corellium"" ""GOROOT_BOOTSTRAP=/data/data/com.termux/files/home/go-android-arm64-bootstrap"" ""GOMAXPROCS=1"" ""CGO_ENABLED=1"" ""GOARCH=arm"" ""GO_TEST_TIMEOUT_SCALE=2"" ""GOBIN="" ""TMPDIR=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/tmp"" ""GOCACHE=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/gocache"" ""GOPLSCACHE=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/goplscache"" ""PWD=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src""] in dir /data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck builder status on https://build.golang.org/.\r\n\r\n### What did you expect to see?\r\n\r\nAll tests consistently passing.\r\n\r\n### What did you see instead?\r\n\r\nThe `android-arm-corellium` builder is failing essentially every run, but not in a consistent place. The failure symptoms are consistent with memory corruption, although it's not obvious to me whether the corruption is a hardware or platform issue or a bug somewhere in the Go runtime or compiler.\r\n\r\n(attn @golang/android)","shell\r\n:: Running /data/data/com.termux/files/usr/bin/bash with args [""bash"" ""/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src/make.bash"" ""-force""] and env [""SHELL=/data/data/com.termux/files/usr/bin/bash"" ""COLORTERM=truecolor"" ""TERM_PROGRAM_VERSION=next-3.4"" ""TMUX=/data/data/com.termux/files/usr/var/run/tmux-10066/default,2426,0"" ""PREFIX=/data/data/com.termux/files/usr"" ""TERMUX_IS_DEBUGGABLE_BUILD=0"" ""TERMUX_MAIN_PACKAGE_FORMAT=debian"" ""TERMUX_VERSION=0.118.0"" ""EXTERNAL_STORAGE=/sdcard"" ""HOME=/data/data/com.termux/files/home"" ""LANG=en_US.UTF-8"" ""TMUX_TMPDIR=/data/data/com.termux/files/usr/var/run"" ""TERMUX_APK_RELEASE=F_DROID"" ""GO_BUILDER_ENV=host-android-arm64-corellium-android"" ""ANDROID_DATA=/data"" ""TERM=screen-256color"" ""TMUX_PANE=%0"" ""SHLVL=0"" ""ANDROID_ROOT=/system"" ""BOOTCLASSPATH=/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/okhttp.jar:/system/framework/bouncycastle.jar:/system/framework/apache-xml.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/android.hidl.base-V1.0-java.jar:/system/framework/android.hidl.manager-V1.0-java.jar:/system/framework/framework-oahl-backward-compatibility.jar:/system/framework/android.test.base.jar"" ""TERMUX_APP_PID=2377"" ""PATH=/data/data/com.termux/files/home/go/bin:/data/data/com.termux/files/usr/bin"" ""CC=/data/data/com.termux/files/home/clangwrap"" ""TERM_PROGRAM=tmux"" ""_=/data/data/com.termux/files/home/go/bin/buildlet"" ""WORKDIR=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android"" ""GO_BUILDER_NAME=android-arm-corellium"" ""GOROOT_BOOTSTRAP=/data/data/com.termux/files/home/go-android-arm64-bootstrap"" ""GOMAXPROCS=1"" ""CGO_ENABLED=1"" ""GOARCH=arm"" ""GO_TEST_TIMEOUT_SCALE=2"" ""GOBIN="" ""TMPDIR=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/tmp"" ""GOCACHE=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/gocache"" ""GOPLSCACHE=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/goplscache"" ""PWD=/data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src""] in dir /data/data/com.termux/files/home/tmpdir/workdir-host-android-arm64-corellium-android/go/src\r\n"
64919,"x/website/_content: modernize faq### Go version\n\n1.22-not-released-yet\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nLooked at the FAQ, saw out of date information.\n\n### What did you expect to see?\n\nFor example, at tip for 1.22 we should see an update to the section about goroutines and loops. It's about to be out of date. There are other moldy bits too.\r\n\r\nI've been meaning to do some cleanup; this should force it to get done.\n\n### What did you see instead?\n\nMoldy bits.",Documentation|NeedsFix|release-blocker|website,robpike,"### Go version\n\n1.22-not-released-yet\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nIrrelevant. This is a documentation bug.\n```\n\n\n### What did you do?\n\nLooked at the FAQ, saw out of date information.\n\n### What did you expect to see?\n\nFor example, at tip for 1.22 we should see an update to the section about goroutines and loops. It's about to be out of date. There are other moldy bits too.\r\n\r\nI've been meaning to do some cleanup; this should force it to get done.\n\n### What did you see instead?\n\nMoldy bits.",shell\nIrrelevant. This is a documentation bug.\n
64833,"strings: (*Builder).Grow should take benefit from sizeclassesThe `Grow` method on `strings.Builder` is documented as:\r\n> Grow grows b's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to b without another allocation. If n is negative, Grow panics. \r\n\r\nCurrently it grows as such:\r\n\r\n\r\nI think that it is backwards compatible to start using sizeclasses in the `strings.Builder`, and not waste memory while growing.",Performance|NeedsFix|FixPending,mateusz834,"The `Grow` method on `strings.Builder` is documented as:\r\n> Grow grows b's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to b without another allocation. If n is negative, Grow panics. \r\n\r\nCurrently it grows as such:\r\n```go\r\n// grow copies the buffer to a new, larger buffer so that there are at least n\r\n// bytes of capacity beyond len(b.buf).\r\nfunc (b *Builder) grow(n int) {\r\n\tbuf := bytealg.MakeNoZero(2*cap(b.buf) + n)[:len(b.buf)]\r\n\tcopy(buf, b.buf)\r\n\tb.buf = buf\r\n}\r\n```\r\n\r\nI think that it is backwards compatible to start using sizeclasses in the `strings.Builder`, and not waste memory while growing.","go\r\n// grow copies the buffer to a new, larger buffer so that there are at least n\r\n// bytes of capacity beyond len(b.buf).\r\nfunc (b *Builder) grow(n int) {\r\n\tbuf := bytealg.MakeNoZero(2*cap(b.buf) + n)[:len(b.buf)]\r\n\tcopy(buf, b.buf)\r\n\tb.buf = buf\r\n}\r\n"
64826,"cmd/compile: panic during sccp while compiling main runtime error: index out of range [-5]### Go version\n\ngo version go1.22rc1 X:nocoverageredesign darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/tuaTn9Ke1VG?v=gotip\n\n### What did you expect to see?\n\nI expect the program to compile\n\n### What did you see instead?\n\n```\r\n./prog.go:123:2: internal compiler error: 'main': panic during sccp while compiling main:\r\n\r\nruntime error: index out of range [-5]\r\n\r\ngoroutine 9 [running]:\r\ncmd/compile/internal/ssa.Compile.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:49 +0x6c\r\npanic({0xdb62e0?, 0xc00002b638?})\r\n\t/usr/local/go/src/runtime/panic.go:770 +0x132\r\ncmd/compile/internal/ssa.(*Block).swapSuccessorsByIdx(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/block.go:334\r\ncmd/compile/internal/ssa.rewireSuccessor(0xc00062aac0, 0xc0006630b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:538 +0x20d\r\ncmd/compile/internal/ssa.(*worklist).replaceConst(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:568\r\ncmd/compile/internal/ssa.sccp(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:118 +0xc95\r\ncmd/compile/internal/ssa.Compile(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa44\r\ncmd/compile/internal/ssagen.buildssa(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2869\r\ncmd/compile/internal/ssagen.Compile(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x45215d?)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 8\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n\r\n\r\n\r\ngoroutine 9 [running]:\r\nruntime/debug.Stack()\r\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x667690?, 0xc0?}, {0xc0004cf680, 0x32}, {0xc0006431d0, 0x5, 0x5})\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x0?, 0x0?}, {0xe155e5, 0x2c}, {0xc000647880, 0x4, 0x4000?})\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:8225 +0x16a\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0xc00048e9c0, {0xe155e5, 0x2c}, {0xc000647880, 0x4, 0x4})\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/func.go:741 +0x279\r\ncmd/compile/internal/ssa.Compile.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:54 +0x1a7\r\npanic({0xdb62e0?, 0xc00002b638?})\r\n\t/usr/local/go/src/runtime/panic.go:770 +0x132\r\ncmd/compile/internal/ssa.(*Block).swapSuccessorsByIdx(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/block.go:334\r\ncmd/compile/internal/ssa.rewireSuccessor(0xc00062aac0, 0xc0006630b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:538 +0x20d\r\ncmd/compile/internal/ssa.(*worklist).replaceConst(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:568\r\ncmd/compile/internal/ssa.sccp(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:118 +0xc95\r\ncmd/compile/internal/ssa.Compile(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa44\r\ncmd/compile/internal/ssagen.buildssa(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2869\r\ncmd/compile/internal/ssagen.Compile(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x45215d?)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 8\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n\r\n\r\nGo build failed.\r\n```",compiler/runtime,randall77,"### Go version\n\ngo version go1.22rc1 X:nocoverageredesign darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/taiwon/Library/Caches/go-build'\r\nGOENV='/Users/taiwon/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='nocoverageredesign'\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/taiwon/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/taiwon/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/taiwon/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/taiwon/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1 X:nocoverageredesign'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/taiwon/go/src/github.com/tchung1118/test-app/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t0/jhcv48q51ydbyzqn85y8rsgm0000gn/T/go-build3057666933=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/tuaTn9Ke1VG?v=gotip\n\n### What did you expect to see?\n\nI expect the program to compile\n\n### What did you see instead?\n\n```\r\n./prog.go:123:2: internal compiler error: 'main': panic during sccp while compiling main:\r\n\r\nruntime error: index out of range [-5]\r\n\r\ngoroutine 9 [running]:\r\ncmd/compile/internal/ssa.Compile.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:49 +0x6c\r\npanic({0xdb62e0?, 0xc00002b638?})\r\n\t/usr/local/go/src/runtime/panic.go:770 +0x132\r\ncmd/compile/internal/ssa.(*Block).swapSuccessorsByIdx(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/block.go:334\r\ncmd/compile/internal/ssa.rewireSuccessor(0xc00062aac0, 0xc0006630b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:538 +0x20d\r\ncmd/compile/internal/ssa.(*worklist).replaceConst(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:568\r\ncmd/compile/internal/ssa.sccp(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:118 +0xc95\r\ncmd/compile/internal/ssa.Compile(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa44\r\ncmd/compile/internal/ssagen.buildssa(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2869\r\ncmd/compile/internal/ssagen.Compile(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x45215d?)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 8\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n\r\n\r\n\r\ngoroutine 9 [running]:\r\nruntime/debug.Stack()\r\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0x667690?, 0xc0?}, {0xc0004cf680, 0x32}, {0xc0006431d0, 0x5, 0x5})\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/usr/local/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x0?, 0x0?}, {0xe155e5, 0x2c}, {0xc000647880, 0x4, 0x4000?})\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:8225 +0x16a\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0xc00048e9c0, {0xe155e5, 0x2c}, {0xc000647880, 0x4, 0x4})\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/func.go:741 +0x279\r\ncmd/compile/internal/ssa.Compile.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:54 +0x1a7\r\npanic({0xdb62e0?, 0xc00002b638?})\r\n\t/usr/local/go/src/runtime/panic.go:770 +0x132\r\ncmd/compile/internal/ssa.(*Block).swapSuccessorsByIdx(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/block.go:334\r\ncmd/compile/internal/ssa.rewireSuccessor(0xc00062aac0, 0xc0006630b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:538 +0x20d\r\ncmd/compile/internal/ssa.(*worklist).replaceConst(...)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:568\r\ncmd/compile/internal/ssa.sccp(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/sccp.go:118 +0xc95\r\ncmd/compile/internal/ssa.Compile(0xc00048e9c0)\r\n\t/usr/local/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa44\r\ncmd/compile/internal/ssagen.buildssa(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2869\r\ncmd/compile/internal/ssagen.Compile(0xc000448480, 0x3)\r\n\t/usr/local/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x3e\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x45215d?)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 8\r\n\t/usr/local/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n\r\n\r\nGo build failed.\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/taiwon/Library/Caches/go-build'\r\nGOENV='/Users/taiwon/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT='nocoverageredesign'\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/taiwon/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/taiwon/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/taiwon/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/taiwon/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.22rc1 X:nocoverageredesign'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/taiwon/go/src/github.com/tchung1118/test-app/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t0/jhcv48q51ydbyzqn85y8rsgm0000gn/T/go-build3057666933=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
64824,"cmd/compile: devirtualization of interface calls with type assertionsConsider:\r\n\r\nhttps://go.dev/play/p/JYPsrebi5Z5\r\n\r\n`h` escapes to heap, because the compiler does not take the opportunity to devirtualize the `UnmarshalBinary` call.\r\n\r\nSame thing happens with even a simpler case (`hash.Hash` always implements `io.Writer`)\r\n",Performance|NeedsInvestigation|FeatureRequest|compiler/runtime,mdempsky,"Consider:\r\n```go\r\nh := sha256.New() // escapes to heap\r\nh.(encoding.BinaryUnmarshaler).UnmarshalBinary(d) // not devirtualized\r\nh.Write(d) // devirtualized\r\n```\r\nhttps://go.dev/play/p/JYPsrebi5Z5\r\n\r\n`h` escapes to heap, because the compiler does not take the opportunity to devirtualize the `UnmarshalBinary` call.\r\n\r\nSame thing happens with even a simpler case (`hash.Hash` always implements `io.Writer`)\r\n```go\r\nh := sha256.New()\r\nh.Write(d) // devirtualized\r\nh.(io.Writer).Write(d) // not devirtualized\r\n```",go\r\nh := sha256.New() // escapes to heap\r\nh.(encoding.BinaryUnmarshaler).UnmarshalBinary(d) // not devirtualized\r\nh.Write(d) // devirtualized\r\n
64804,"net/http: conn not closed if Transport.OnProxyConnectResponse returns non-nil err### Go version\r\n\r\ngo 1.20 and 1.21, no matter what minor version or arch is.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nissue [#54299](https://github.com/golang/go/issues/54299) introduced Transport.OnProxyConnectResponse to find out how a CONNECT request to a proxy failed. (HTTP 403, etc).\r\n\r\nSo i customized my OnProxyConnectResponse to produce a non-nil error and then it returned the error.\r\nHowever, there is no call to `conn.Close` before it returns, which is present at anywhere `conn` is in scope and return happens. And this may cause resource leak.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhen OnProxyConnectResponse returns with a non-nil error, `conn.Close` should be called before return.\r\n\r\n### What did you see instead?\r\n\r\nWhen OnProxyConnectResponse returns with a non-nil error, there is no `conn.Close` before return.",NeedsFix,neild,"### Go version\r\n\r\ngo 1.20 and 1.21, no matter what minor version or arch is.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\11749\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\11749\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=E:\\envs\\go_path\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=E:\\envs\\go_path\r\nset GOPRIVATE=\r\nset GOPROXY=https://goproxy.cn,direct\r\nset GOROOT=E:\\envs\\go120\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=E:\\envs\\go120\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.1\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\11749\\AppData\\Local\\Temp\\go-build881946686=/tmp/go-build -gno-record-gcc-switches\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nissue [#54299](https://github.com/golang/go/issues/54299) introduced Transport.OnProxyConnectResponse to find out how a CONNECT request to a proxy failed. (HTTP 403, etc).\r\n\r\nSo i customized my OnProxyConnectResponse to produce a non-nil error and then it returned the error.\r\nHowever, there is no call to `conn.Close` before it returns, which is present at anywhere `conn` is in scope and return happens. And this may cause resource leak.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhen OnProxyConnectResponse returns with a non-nil error, `conn.Close` should be called before return.\r\n\r\n### What did you see instead?\r\n\r\nWhen OnProxyConnectResponse returns with a non-nil error, there is no `conn.Close` before return.","shell\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\11749\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\11749\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=E:\\envs\\go_path\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=E:\\envs\\go_path\r\nset GOPRIVATE=\r\nset GOPROXY=https://goproxy.cn,direct\r\nset GOROOT=E:\\envs\\go120\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=E:\\envs\\go120\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.1\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\11749\\AppData\\Local\\Temp\\go-build881946686=/tmp/go-build -gno-record-gcc-switches\r\n"
64759,"cmd/compile: //go:build file version ignored when calling generic fn which has related type params (reproduces with 1.21 and 1.20, not at tip)### Go version\n\ngo version go1.21.5 darwin/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n\r\n\n\n### What did you expect to see?\n\nCompilation succeeds. It succeeds with `go version devel go1.22-b60bf8f8e1 Fri Dec 15 19:35:21 2023 +0000 darwin/amd64`.\n\n### What did you see instead?\n\n```\r\nembedding interface element ~[]string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n```",NeedsFix|compiler/runtime,griesemer,"### Go version\n\ngo version go1.21.5 darwin/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/corysnider/Library/Caches/go-build'\r\nGOENV='/Users/corysnider/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Volumes/Workspace/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Volumes/Workspace'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.5/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.5/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/8p/tzn5bkn967vfgttpr2d2kpjm0000gq/T/go-build2320458225=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n```console\r\n$ cat repro.go\r\n//go:build go1.18\r\n\r\npackage repro\r\n\r\nfunc genericfn[S ~[]E, E any](s S) S {\r\n\treturn s\r\n}\r\n\r\nfunc do() []string {\r\n\treturn genericfn([]string{})\r\n}\r\n$ go tool compile -lang=go1.16 repro.go\r\n```\r\n\n\n### What did you expect to see?\n\nCompilation succeeds. It succeeds with `go version devel go1.22-b60bf8f8e1 Fri Dec 15 19:35:21 2023 +0000 darwin/amd64`.\n\n### What did you see instead?\n\n```\r\nembedding interface element ~[]string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/corysnider/Library/Caches/go-build'\r\nGOENV='/Users/corysnider/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Volumes/Workspace/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Volumes/Workspace'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.5/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.5/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.5'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/8p/tzn5bkn967vfgttpr2d2kpjm0000gq/T/go-build2320458225=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
64748,"cmd/gomote: token has been expired or revoked### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n```\r\n\u25b6 gomote create linux-arm\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`gomote create linux-arm` runs ok.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n\u25b6 gomote create linux-arm\r\ndialing the server=build.golang.org:443 failed with: IAP token exchange failed: status 400 Bad Request, body ""{\\n  \\""error\\"": \\""invalid_grant\\"",\\n  \\""error_description\\"": \\""Token has been expired or revoked.\\""\\n}\r\n```",NeedsFix,cagedmantis,"### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n```\r\n\u25b6 gomote create linux-arm\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`gomote create linux-arm` runs ok.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n\u25b6 gomote create linux-arm\r\ndialing the server=build.golang.org:443 failed with: IAP token exchange failed: status 400 Bad Request, body ""{\\n  \\""error\\"": \\""invalid_grant\\"",\\n  \\""error_description\\"": \\""Token has been expired or revoked.\\""\\n}\r\n```",shell\r\nN/A\r\n
64738,"cmd/go: tip breaks program flags in ""go run""### Go version\n\ngo version devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n```\r\n$ go version\r\ngo version devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000 linux/amd64\r\n$ go run cuelang.org/go/cmd/cue@v0.5.0-beta.5 import -p json\r\ngo: -p must be a positive integer: 0\r\n$ /usr/bin/go version\r\ngo version go1.21.5 linux/amd64\r\n$ /usr/bin/go run cuelang.org/go/cmd/cue@v0.5.0-beta.5 import -p json\r\n$\r\n```\n\n### What did you expect to see?\n\nSame behavior between Go tip and 1.21; the flag should be passed to the `cue` program without any error from cmd/go.\n\n### What did you see instead?\n\nIt seems like cmd/go tries to parse the `-p json` flag, perhaps not realizing that `go run` takes an arbitrary number of flags and arguments to pass on to the main package being run:\r\n\r\n```\r\n$ go run -h\r\nusage: go run [build flags] [-exec xprog] package [arguments...]\r\n```\r\n\r\nIn my case, `import -p json` go after the single package argument, so cmd/go should not attempt to parse them.\r\n\r\ncc @bcmills I suspect this might be a very recent regression due to https://go-review.googlesource.com/c/go/+/546635. I haven't bisected, but I've also never run into this error before.",NeedsFix|GoCommand|release-blocker|FixPending,rsc|bcmills,"### Go version\n\ngo version devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mvdan/.cache/go-build'\r\nGOENV='/home/mvdan/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mvdan/go/pkg/mod'\r\nGONOPROXY='github.com/cue-unity'\r\nGONOSUMDB='github.com/cue-unity'\r\nGOOS='linux'\r\nGOPATH='/home/mvdan/go'\r\nGOPRIVATE='github.com/cue-unity'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mvdan/tip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mvdan/tip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2866565515=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n```\r\n$ go version\r\ngo version devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000 linux/amd64\r\n$ go run cuelang.org/go/cmd/cue@v0.5.0-beta.5 import -p json\r\ngo: -p must be a positive integer: 0\r\n$ /usr/bin/go version\r\ngo version go1.21.5 linux/amd64\r\n$ /usr/bin/go run cuelang.org/go/cmd/cue@v0.5.0-beta.5 import -p json\r\n$\r\n```\n\n### What did you expect to see?\n\nSame behavior between Go tip and 1.21; the flag should be passed to the `cue` program without any error from cmd/go.\n\n### What did you see instead?\n\nIt seems like cmd/go tries to parse the `-p json` flag, perhaps not realizing that `go run` takes an arbitrary number of flags and arguments to pass on to the main package being run:\r\n\r\n```\r\n$ go run -h\r\nusage: go run [build flags] [-exec xprog] package [arguments...]\r\n```\r\n\r\nIn my case, `import -p json` go after the single package argument, so cmd/go should not attempt to parse them.\r\n\r\ncc @bcmills I suspect this might be a very recent regression due to https://go-review.googlesource.com/c/go/+/546635. I haven't bisected, but I've also never run into this error before.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mvdan/.cache/go-build'\r\nGOENV='/home/mvdan/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mvdan/go/pkg/mod'\r\nGONOPROXY='github.com/cue-unity'\r\nGONOSUMDB='github.com/cue-unity'\r\nGOOS='linux'\r\nGOPATH='/home/mvdan/go'\r\nGOPRIVATE='github.com/cue-unity'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mvdan/tip'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mvdan/tip/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-d73b4322ed Thu Dec 14 22:24:40 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v3'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2866565515=/tmp/go-build -gno-record-gcc-switches'\n"
64726,"runtime: `found bad pointer in Go heap` on `wasm` ports testing `x/tools/go/ssa.TestTypeparamTest/chans.go````\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""golang.org/x/tools/go/ssa"" && `fatal error: found bad pointer in Go heap`\r\n```\r\n\r\n### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck `x/tools` LUCI builder status:\r\nhttps://ci.chromium.org/p/golang/g/x-tools-gotip/console\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\nA pattern of failures on the `js/wasm` builders involving a `pointer \u2026 to unused region of span` when running a particular `x/tools` test that doesn't fail anywhere else.\r\n\r\n<details>\r\n\r\n```\r\n=== RUN   TestTypeparamTest/chans.go\r\n    builder_test.go:855: Input: /home/swarming/.swarming/w/ir/x/w/goroot/test/typeparam/chans.go\r\nruntime: pointer 0x10ae0000 to unused region of span span.base()=0x2340000 span.limit=0x2342000 span.state=1\r\nfatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\r\nruntime stack:\r\nruntime.throw({0xc0861, 0x3e})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/panic.go:1023 +0x3 fp=0x5150a8 sp=0x515080 pc=0x12750003\r\nruntime.badPointer(0x26d0170, 0x10ae0000, 0x0, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mbitmap.go:286 +0xe fp=0x5150e8 sp=0x5150a8 pc=0x1100000e\r\nruntime.findObject(0x10ae0000, 0x0, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mbitmap.go:329 +0x1d fp=0x515118 sp=0x5150e8 pc=0x1101001d\r\nruntime.wbBufFlush1(0x183a008)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:240 +0x10 fp=0x515188 sp=0x515118 pc=0x124a0010\r\nruntime.wbBufFlush.func1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:181 +0x6 fp=0x515198 sp=0x515188 pc=0x14550006\r\nruntime.systemstack(0x5151a8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:172 +0x3 fp=0x5151a0 sp=0x515198 pc=0x14fb0003\r\nruntime.mstart()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:29 fp=0x5151a8 sp=0x5151a0 pc=0x14f70000\r\n\r\ngoroutine 644 gp=0x1af4000 m=0 mp=0x4bc980 [running]:\r\nruntime.systemstack_switch()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:183 fp=0x1833770 sp=0x1833768 pc=0x14fc0000\r\nruntime.wbBufFlush()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:180 +0xf fp=0x1833780 sp=0x1833770 pc=0x1249000f\r\ngcWriteBarrier()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:482 +0x1 fp=0x1833788 sp=0x1833780 pc=0x14f50001\r\nruntime: g 644: unexpected return pc for gcWriteBarrier called from 0xe8301c0\r\nstack: frame={sp:0x1833780, fp:0x1833788} stack=[0x1830000,0x1834000)\r\n0x0000000001833680:  0x0000000000000080  0x00000000004bc980 \r\n0x0000000001833690:  0x000000000187b480  0x0000000000000000 \r\n0x00000000018336a0:  0x0000000001af4000  0x0000000000000010 \r\n0x00000000018336b0:  0x0000000013660092 <runtime.growslice+0x0000000000000092>  0x000000000187b480 \r\n0x00000000018336c0:  0x0000000000000000  0x0000000000000000 \r\n0x00000000018336d0:  0x000000000187b480  0x0000000000000080 \r\n0x00000000018336e0:  0x0000000019430002 <bytes.growSlice.func1+0x0000000000000002>  0x0000000001833708 \r\n0x00000000018336f0:  0x0000000000000000  0x0000000000000000 \r\n0x0000000001833700:  0x000000001925000c <bytes.growSlice+0x000000000000000c>  0x000000000187b480 \r\n0x0000000001833710:  0x000000000e8301c0  0x0000000000000024 \r\n0x0000000001833720:  0x0000000000000080  0x000000000003ab40 \r\n0x0000000001833730:  0x000000000187b480  0x0000000000000080 \r\n0x0000000001833740:  0x0000000000000080  0x000000000b1cc450 \r\n0x0000000001833750:  0x0000000000000080  0x0000000000000080 \r\n0x0000000001833760:  0x0000000000000080  0x000000001249000f <runtime.wbBufFlush+0x000000000000000f> \r\n0x0000000001833770:  0x00000000000cad80  0x0000000014f50001 <gcWriteBarrier+0x0000000000000001> \r\n0x0000000001833780: <0x000000000e8301c0 >0x0000000000000024 \r\n0x0000000001833790:  0x0000000000000040  0x0000000000000052 \r\n0x00000000018337a0:  0x000000000187b480  0x0000000000000024 \r\n0x00000000018337b0:  0x0000000000000080  0x0000000000000024 \r\n0x00000000018337c0:  0x0000000001ad8c30  0x000000000187b480 \r\n0x00000000018337d0:  0x000000001922000b <bytes.(*Buffer).Write+0x000000000000000b>  0x000000000b1cc420 \r\n0x00000000018337e0:  0x0000000000000052  0x0000000001ad8c30 \r\n0x00000000018337f0:  0x000000000203f880  0x0000000018740008 <fmt.Fprintf+0x0000000000000008> \r\n0x0000000001833800:  0x000000000b1cc420  0x000000000203f880 \r\n0x0000000001833810:  0x0000000000000052  0x0000000000000080 \r\n0x0000000001833820:  0x0000000000000001  0x0000000000000001 \r\n0x0000000001833830:  0x00000000000820e0  0x000000000b1cc450 \r\n0x0000000001833840:  0x0000000001833958  0x0000000001ad8c30 \r\n0x0000000001833850:  0x000000000b1cc450  0x0000000024250022 <golang.org/x/tools/go/ssa.WriteFunction+0x0000000000000022> \r\n0x0000000001833860:  0x000000000012ed28  0x000000000b1cc420 \r\n0x0000000001833870:  0x00000000000ad389  0x000000000000000f \r\n0x0000000001833880:  0x0000000001833a10 \r\ncreated by golang.org/x/tools/go/ssa.(*Program).Build in goroutine 626\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 +0x1b\r\n\r\ngoroutine 1 gp=0x18001c0 m=nil [chan receive]:\r\nruntime.gopark(0xcaa28, 0xf8b66e8, 0xe, 0x7, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x18a79a8 sp=0x18a7980 pc=0x129d0025\r\nruntime.chanrecv(0xf8b6690, 0x18a7a97, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:583 +0x66 fp=0x18a7a28 sp=0x18a79a8 pc=0x107c0066\r\nruntime.chanrecv1(0xf8b6690, 0x18a7a97)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:442 +0x2 fp=0x18a7a50 sp=0x18a7a28 pc=0x107b0002\r\ntesting.(*T).Run(0x188c4e0, {0xae140, 0x11}, 0xca848)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1750 +0x44 fp=0x18a7b20 sp=0x18a7a50 pc=0x1a0f0044\r\ntesting.runTests.func1(0x188c4e0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2161 +0x3 fp=0x18a7b60 sp=0x18a7b20 pc=0x1a1b0003\r\ntesting.tRunner(0x188c4e0, 0x18a7c80)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0x18a7bc8 sp=0x18a7b60 pc=0x1a0a000d\r\ntesting.runTests(0x180a180, {0x4afe60, 0x22, 0x22}, {0xc156aa802e9c5f80, 0x8bb30d4801, 0x4bb9e0})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2159 +0x49 fp=0x18a7ca8 sp=0x18a7bc8 pc=0x1a1a0049\r\ntesting.(*M).Run(0x1866f00)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2027 +0x6e fp=0x18a7ee8 sp=0x18a7ca8 pc=0x1a13006e\r\nmain.main()\r\n\t_testmain.go:115 +0x9 fp=0x18a7f68 sp=0x18a7ee8 pc=0x295a0009\r\nruntime.main()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:271 +0x41 fp=0x18a7fe0 sp=0x18a7f68 pc=0x12970041\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x18a7fe8 sp=0x18a7fe0 pc=0x15260001\r\n\r\ngoroutine 2 gp=0x1800380 m=nil [force gc (idle)]:\r\nruntime.gopark(0xcacf0, 0x4bb2e0, 0x11, 0xa, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184cfb0 sp=0x184cf88 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:326 +0x1b fp=0x184cfe0 sp=0x184cfb0 pc=0x129a001b\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184cfe8 sp=0x184cfe0 pc=0x15260001\r\ncreated by runtime.init.5 in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:314 +0x2\r\n\r\ngoroutine 3 gp=0x1800540 m=nil [GC sweep wait]:\r\nruntime.gopark(0xcacf0, 0x4bb620, 0xc, 0x9, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184d790 sp=0x184d768 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.bgsweep(0x1852000)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcsweep.go:317 +0x1d fp=0x184d7d0 sp=0x184d790 pc=0x11b2001d\r\nruntime.gcenable.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:203 +0x2 fp=0x184d7e0 sp=0x184d7d0 pc=0x11370002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184d7e8 sp=0x184d7e0 pc=0x15260001\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:203 +0x6\r\n\r\ngoroutine 4 gp=0x1800700 m=nil [runnable]:\r\nruntime.gopark(0xcacf0, 0x4bbb00, 0xd, 0xa, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184df80 sp=0x184df58 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x4bbb00)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcscavenge.go:425 +0xc fp=0x184dfa8 sp=0x184df80 pc=0x1190000c\r\nruntime.bgscavenge(0x1852000)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcscavenge.go:658 +0x8 fp=0x184dfd0 sp=0x184dfa8 pc=0x11950008\r\nruntime.gcenable.gowrap2()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:204 +0x2 fp=0x184dfe0 sp=0x184dfd0 pc=0x11360002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184dfe8 sp=0x184dfe0 pc=0x15260001\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:204 +0xa\r\n\r\ngoroutine 5 gp=0x18008c0 m=nil [finalizer wait]:\r\nruntime.gopark(0xcaa58, 0x50cb20, 0x10, 0xa, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184c710 sp=0x184c6e8 pc=0x129d0025\r\nruntime.runfinq()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mfinal.go:194 +0x1c fp=0x184c7e0 sp=0x184c710 pc=0x112d001c\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184c7e8 sp=0x184c7e0 pc=0x15260001\r\ncreated by runtime.createfing in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mfinal.go:164 +0xc\r\n\r\ngoroutine 6 gp=0x1800a80 m=nil [waiting]:\r\nruntime.gopark(0x0, 0x0, 0x0, 0x0, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x5875760 sp=0x5875738 pc=0x129d0025\r\nruntime.handleEvent()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/lock_js.go:296 +0x25 fp=0x58757e0 sp=0x5875760 pc=0x10c10025\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x58757e8 sp=0x58757e0 pc=0x15260001\r\ncreated by runtime.beforeIdle\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/lock_js.go:238 +0x1e\r\n\r\ngoroutine 571 gp=0x1800c40 m=nil [chan receive]:\r\nruntime.gopark(0xcaa28, 0xf8b7e88, 0xe, 0x7, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x1b9cce0 sp=0x1b9ccb8 pc=0x129d0025\r\nruntime.chanrecv(0xf8b7e30, 0x1b9cdcf, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:583 +0x66 fp=0x1b9cd60 sp=0x1b9cce0 pc=0x107c0066\r\nruntime.chanrecv1(0xf8b7e30, 0x1b9cdcf)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:442 +0x2 fp=0x1b9cd88 sp=0x1b9cd60 pc=0x107b0002\r\ntesting.(*T).Run(0x1ab2340, {0x19cab08, 0x8}, 0xab28df8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1750 +0x44 fp=0x1b9ce58 sp=0x1b9cd88 pc=0x1a0f0044\r\ngolang.org/x/tools/go/ssa_test.TestTypeparamTest(0x1ab2340)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder_test.go:845 +0x30 fp=0x1b9cf60 sp=0x1b9ce58 pc=0x29340030\r\ntesting.tRunner(0x1ab2340, 0xca848)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0x1b9cfc8 sp=0x1b9cf60 pc=0x1a0a000d\r\ntesting.(*T).Run.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x2 fp=0x1b9cfe0 sp=0x1b9cfc8 pc=0x1a100002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x1b9cfe8 sp=0x1b9cfe0 pc=0x15260001\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x43\r\n\r\ngoroutine 44 gp=0x1800fc0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0xcaa80, 0x1823f40, 0x1a, 0xa, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184ef48 sp=0x184ef20 pc=0x129d0025\r\nruntime.gcBgMarkWorker()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:1310 +0x1f fp=0x184efe0 sp=0x184ef48 pc=0x114a001f\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184efe8 sp=0x184efe0 pc=0x15260001\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 43\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:1234 +0x3\r\n\r\ngoroutine 645 gp=0x1b1d340 m=nil [runnable]:\r\ngolang.org/x/tools/go/ssa.(*Program).Build.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 fp=0x58747e0 sp=0x58747d8 pc=0x23dc0000\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x58747e8 sp=0x58747e0 pc=0x15260001\r\ncreated by golang.org/x/tools/go/ssa.(*Program).Build in goroutine 626\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 +0x1b\r\n\r\ngoroutine 626 gp=0x1af2fc0 m=nil [semacquire]:\r\nruntime.gopark(0xcacf0, 0x4c5260, 0x12, 0x5, 0x4)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0xbb3fca0 sp=0xbb3fc78 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.semacquire1(0xb101438, 0x0, 0x1, 0x0, 0x12)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/sema.go:160 +0x3a fp=0xbb3fce8 sp=0xbb3fca0 pc=0x135c003a\r\nsync.runtime_Semacquire(0xb101438)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/sema.go:62 +0x2 fp=0xbb3fd18 sp=0xbb3fce8 pc=0x14de0002\r\nsync.(*WaitGroup).Wait(0xb101430)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/sync/waitgroup.go:116 +0xf fp=0xbb3fd40 sp=0xbb3fd18 pc=0x15d6000f\r\ngolang.org/x/tools/go/ssa.(*Program).Build(0xb15e0d0)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2627 +0x1d fp=0xbb3fdf0 sp=0xbb3fd40 pc=0x23db001d\r\ngolang.org/x/tools/go/ssa_test.TestTypeparamTest.func1(0xab4d380)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder_test.go:882 +0x4d fp=0xbb3ff60 sp=0xbb3fdf0 pc=0x2935004d\r\ntesting.tRunner(0xab4d380, 0xab28df8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0xbb3ffc8 sp=0xbb3ff60 pc=0x1a0a000d\r\ntesting.(*T).Run.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x2 fp=0xbb3ffe0 sp=0xbb3ffc8 pc=0x1a100002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0xbb3ffe8 sp=0xbb3ffe0 pc=0x15260001\r\ncreated by testing.(*T).Run in goroutine 571\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x43\r\n```\r\n\r\n</details>\r\n\r\nExamples:\r\n- http://ci.chromium.org/b/8761786466554532129/test-results\r\n- http://ci.chromium.org/b/8761791128052112705/test-results\r\n\r\n(attn @golang/wasm)",NeedsInvestigation|arch-wasm|compiler/runtime,mknyszek,"```\r\n#!watchflakes\r\npost <- goarch == ""wasm"" && pkg == ""golang.org/x/tools/go/ssa"" && `fatal error: found bad pointer in Go heap`\r\n```\r\n\r\n### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck `x/tools` LUCI builder status:\r\nhttps://ci.chromium.org/p/golang/g/x-tools-gotip/console\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\nA pattern of failures on the `js/wasm` builders involving a `pointer \u2026 to unused region of span` when running a particular `x/tools` test that doesn't fail anywhere else.\r\n\r\n<details>\r\n\r\n```\r\n=== RUN   TestTypeparamTest/chans.go\r\n    builder_test.go:855: Input: /home/swarming/.swarming/w/ir/x/w/goroot/test/typeparam/chans.go\r\nruntime: pointer 0x10ae0000 to unused region of span span.base()=0x2340000 span.limit=0x2342000 span.state=1\r\nfatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\r\nruntime stack:\r\nruntime.throw({0xc0861, 0x3e})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/panic.go:1023 +0x3 fp=0x5150a8 sp=0x515080 pc=0x12750003\r\nruntime.badPointer(0x26d0170, 0x10ae0000, 0x0, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mbitmap.go:286 +0xe fp=0x5150e8 sp=0x5150a8 pc=0x1100000e\r\nruntime.findObject(0x10ae0000, 0x0, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mbitmap.go:329 +0x1d fp=0x515118 sp=0x5150e8 pc=0x1101001d\r\nruntime.wbBufFlush1(0x183a008)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:240 +0x10 fp=0x515188 sp=0x515118 pc=0x124a0010\r\nruntime.wbBufFlush.func1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:181 +0x6 fp=0x515198 sp=0x515188 pc=0x14550006\r\nruntime.systemstack(0x5151a8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:172 +0x3 fp=0x5151a0 sp=0x515198 pc=0x14fb0003\r\nruntime.mstart()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:29 fp=0x5151a8 sp=0x5151a0 pc=0x14f70000\r\n\r\ngoroutine 644 gp=0x1af4000 m=0 mp=0x4bc980 [running]:\r\nruntime.systemstack_switch()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:183 fp=0x1833770 sp=0x1833768 pc=0x14fc0000\r\nruntime.wbBufFlush()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mwbbuf.go:180 +0xf fp=0x1833780 sp=0x1833770 pc=0x1249000f\r\ngcWriteBarrier()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:482 +0x1 fp=0x1833788 sp=0x1833780 pc=0x14f50001\r\nruntime: g 644: unexpected return pc for gcWriteBarrier called from 0xe8301c0\r\nstack: frame={sp:0x1833780, fp:0x1833788} stack=[0x1830000,0x1834000)\r\n0x0000000001833680:  0x0000000000000080  0x00000000004bc980 \r\n0x0000000001833690:  0x000000000187b480  0x0000000000000000 \r\n0x00000000018336a0:  0x0000000001af4000  0x0000000000000010 \r\n0x00000000018336b0:  0x0000000013660092 <runtime.growslice+0x0000000000000092>  0x000000000187b480 \r\n0x00000000018336c0:  0x0000000000000000  0x0000000000000000 \r\n0x00000000018336d0:  0x000000000187b480  0x0000000000000080 \r\n0x00000000018336e0:  0x0000000019430002 <bytes.growSlice.func1+0x0000000000000002>  0x0000000001833708 \r\n0x00000000018336f0:  0x0000000000000000  0x0000000000000000 \r\n0x0000000001833700:  0x000000001925000c <bytes.growSlice+0x000000000000000c>  0x000000000187b480 \r\n0x0000000001833710:  0x000000000e8301c0  0x0000000000000024 \r\n0x0000000001833720:  0x0000000000000080  0x000000000003ab40 \r\n0x0000000001833730:  0x000000000187b480  0x0000000000000080 \r\n0x0000000001833740:  0x0000000000000080  0x000000000b1cc450 \r\n0x0000000001833750:  0x0000000000000080  0x0000000000000080 \r\n0x0000000001833760:  0x0000000000000080  0x000000001249000f <runtime.wbBufFlush+0x000000000000000f> \r\n0x0000000001833770:  0x00000000000cad80  0x0000000014f50001 <gcWriteBarrier+0x0000000000000001> \r\n0x0000000001833780: <0x000000000e8301c0 >0x0000000000000024 \r\n0x0000000001833790:  0x0000000000000040  0x0000000000000052 \r\n0x00000000018337a0:  0x000000000187b480  0x0000000000000024 \r\n0x00000000018337b0:  0x0000000000000080  0x0000000000000024 \r\n0x00000000018337c0:  0x0000000001ad8c30  0x000000000187b480 \r\n0x00000000018337d0:  0x000000001922000b <bytes.(*Buffer).Write+0x000000000000000b>  0x000000000b1cc420 \r\n0x00000000018337e0:  0x0000000000000052  0x0000000001ad8c30 \r\n0x00000000018337f0:  0x000000000203f880  0x0000000018740008 <fmt.Fprintf+0x0000000000000008> \r\n0x0000000001833800:  0x000000000b1cc420  0x000000000203f880 \r\n0x0000000001833810:  0x0000000000000052  0x0000000000000080 \r\n0x0000000001833820:  0x0000000000000001  0x0000000000000001 \r\n0x0000000001833830:  0x00000000000820e0  0x000000000b1cc450 \r\n0x0000000001833840:  0x0000000001833958  0x0000000001ad8c30 \r\n0x0000000001833850:  0x000000000b1cc450  0x0000000024250022 <golang.org/x/tools/go/ssa.WriteFunction+0x0000000000000022> \r\n0x0000000001833860:  0x000000000012ed28  0x000000000b1cc420 \r\n0x0000000001833870:  0x00000000000ad389  0x000000000000000f \r\n0x0000000001833880:  0x0000000001833a10 \r\ncreated by golang.org/x/tools/go/ssa.(*Program).Build in goroutine 626\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 +0x1b\r\n\r\ngoroutine 1 gp=0x18001c0 m=nil [chan receive]:\r\nruntime.gopark(0xcaa28, 0xf8b66e8, 0xe, 0x7, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x18a79a8 sp=0x18a7980 pc=0x129d0025\r\nruntime.chanrecv(0xf8b6690, 0x18a7a97, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:583 +0x66 fp=0x18a7a28 sp=0x18a79a8 pc=0x107c0066\r\nruntime.chanrecv1(0xf8b6690, 0x18a7a97)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:442 +0x2 fp=0x18a7a50 sp=0x18a7a28 pc=0x107b0002\r\ntesting.(*T).Run(0x188c4e0, {0xae140, 0x11}, 0xca848)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1750 +0x44 fp=0x18a7b20 sp=0x18a7a50 pc=0x1a0f0044\r\ntesting.runTests.func1(0x188c4e0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2161 +0x3 fp=0x18a7b60 sp=0x18a7b20 pc=0x1a1b0003\r\ntesting.tRunner(0x188c4e0, 0x18a7c80)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0x18a7bc8 sp=0x18a7b60 pc=0x1a0a000d\r\ntesting.runTests(0x180a180, {0x4afe60, 0x22, 0x22}, {0xc156aa802e9c5f80, 0x8bb30d4801, 0x4bb9e0})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2159 +0x49 fp=0x18a7ca8 sp=0x18a7bc8 pc=0x1a1a0049\r\ntesting.(*M).Run(0x1866f00)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:2027 +0x6e fp=0x18a7ee8 sp=0x18a7ca8 pc=0x1a13006e\r\nmain.main()\r\n\t_testmain.go:115 +0x9 fp=0x18a7f68 sp=0x18a7ee8 pc=0x295a0009\r\nruntime.main()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:271 +0x41 fp=0x18a7fe0 sp=0x18a7f68 pc=0x12970041\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x18a7fe8 sp=0x18a7fe0 pc=0x15260001\r\n\r\ngoroutine 2 gp=0x1800380 m=nil [force gc (idle)]:\r\nruntime.gopark(0xcacf0, 0x4bb2e0, 0x11, 0xa, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184cfb0 sp=0x184cf88 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.forcegchelper()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:326 +0x1b fp=0x184cfe0 sp=0x184cfb0 pc=0x129a001b\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184cfe8 sp=0x184cfe0 pc=0x15260001\r\ncreated by runtime.init.5 in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:314 +0x2\r\n\r\ngoroutine 3 gp=0x1800540 m=nil [GC sweep wait]:\r\nruntime.gopark(0xcacf0, 0x4bb620, 0xc, 0x9, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184d790 sp=0x184d768 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.bgsweep(0x1852000)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcsweep.go:317 +0x1d fp=0x184d7d0 sp=0x184d790 pc=0x11b2001d\r\nruntime.gcenable.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:203 +0x2 fp=0x184d7e0 sp=0x184d7d0 pc=0x11370002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184d7e8 sp=0x184d7e0 pc=0x15260001\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:203 +0x6\r\n\r\ngoroutine 4 gp=0x1800700 m=nil [runnable]:\r\nruntime.gopark(0xcacf0, 0x4bbb00, 0xd, 0xa, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184df80 sp=0x184df58 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.(*scavengerState).park(0x4bbb00)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcscavenge.go:425 +0xc fp=0x184dfa8 sp=0x184df80 pc=0x1190000c\r\nruntime.bgscavenge(0x1852000)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgcscavenge.go:658 +0x8 fp=0x184dfd0 sp=0x184dfa8 pc=0x11950008\r\nruntime.gcenable.gowrap2()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:204 +0x2 fp=0x184dfe0 sp=0x184dfd0 pc=0x11360002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184dfe8 sp=0x184dfe0 pc=0x15260001\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:204 +0xa\r\n\r\ngoroutine 5 gp=0x18008c0 m=nil [finalizer wait]:\r\nruntime.gopark(0xcaa58, 0x50cb20, 0x10, 0xa, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184c710 sp=0x184c6e8 pc=0x129d0025\r\nruntime.runfinq()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mfinal.go:194 +0x1c fp=0x184c7e0 sp=0x184c710 pc=0x112d001c\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184c7e8 sp=0x184c7e0 pc=0x15260001\r\ncreated by runtime.createfing in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mfinal.go:164 +0xc\r\n\r\ngoroutine 6 gp=0x1800a80 m=nil [waiting]:\r\nruntime.gopark(0x0, 0x0, 0x0, 0x0, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x5875760 sp=0x5875738 pc=0x129d0025\r\nruntime.handleEvent()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/lock_js.go:296 +0x25 fp=0x58757e0 sp=0x5875760 pc=0x10c10025\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x58757e8 sp=0x58757e0 pc=0x15260001\r\ncreated by runtime.beforeIdle\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/lock_js.go:238 +0x1e\r\n\r\ngoroutine 571 gp=0x1800c40 m=nil [chan receive]:\r\nruntime.gopark(0xcaa28, 0xf8b7e88, 0xe, 0x7, 0x2)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x1b9cce0 sp=0x1b9ccb8 pc=0x129d0025\r\nruntime.chanrecv(0xf8b7e30, 0x1b9cdcf, 0x1)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:583 +0x66 fp=0x1b9cd60 sp=0x1b9cce0 pc=0x107c0066\r\nruntime.chanrecv1(0xf8b7e30, 0x1b9cdcf)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/chan.go:442 +0x2 fp=0x1b9cd88 sp=0x1b9cd60 pc=0x107b0002\r\ntesting.(*T).Run(0x1ab2340, {0x19cab08, 0x8}, 0xab28df8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1750 +0x44 fp=0x1b9ce58 sp=0x1b9cd88 pc=0x1a0f0044\r\ngolang.org/x/tools/go/ssa_test.TestTypeparamTest(0x1ab2340)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder_test.go:845 +0x30 fp=0x1b9cf60 sp=0x1b9ce58 pc=0x29340030\r\ntesting.tRunner(0x1ab2340, 0xca848)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0x1b9cfc8 sp=0x1b9cf60 pc=0x1a0a000d\r\ntesting.(*T).Run.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x2 fp=0x1b9cfe0 sp=0x1b9cfc8 pc=0x1a100002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x1b9cfe8 sp=0x1b9cfe0 pc=0x15260001\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x43\r\n\r\ngoroutine 44 gp=0x1800fc0 m=nil [GC worker (idle)]:\r\nruntime.gopark(0xcaa80, 0x1823f40, 0x1a, 0xa, 0x0)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0x184ef48 sp=0x184ef20 pc=0x129d0025\r\nruntime.gcBgMarkWorker()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:1310 +0x1f fp=0x184efe0 sp=0x184ef48 pc=0x114a001f\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x184efe8 sp=0x184efe0 pc=0x15260001\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 43\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/mgc.go:1234 +0x3\r\n\r\ngoroutine 645 gp=0x1b1d340 m=nil [runnable]:\r\ngolang.org/x/tools/go/ssa.(*Program).Build.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 fp=0x58747e0 sp=0x58747d8 pc=0x23dc0000\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0x58747e8 sp=0x58747e0 pc=0x15260001\r\ncreated by golang.org/x/tools/go/ssa.(*Program).Build in goroutine 626\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2621 +0x1b\r\n\r\ngoroutine 626 gp=0x1af2fc0 m=nil [semacquire]:\r\nruntime.gopark(0xcacf0, 0x4c5260, 0x12, 0x5, 0x4)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:402 +0x25 fp=0xbb3fca0 sp=0xbb3fc78 pc=0x129d0025\r\nruntime.goparkunlock(...)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/proc.go:408\r\nruntime.semacquire1(0xb101438, 0x0, 0x1, 0x0, 0x12)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/sema.go:160 +0x3a fp=0xbb3fce8 sp=0xbb3fca0 pc=0x135c003a\r\nsync.runtime_Semacquire(0xb101438)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/sema.go:62 +0x2 fp=0xbb3fd18 sp=0xbb3fce8 pc=0x14de0002\r\nsync.(*WaitGroup).Wait(0xb101430)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/sync/waitgroup.go:116 +0xf fp=0xbb3fd40 sp=0xbb3fd18 pc=0x15d6000f\r\ngolang.org/x/tools/go/ssa.(*Program).Build(0xb15e0d0)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder.go:2627 +0x1d fp=0xbb3fdf0 sp=0xbb3fd40 pc=0x23db001d\r\ngolang.org/x/tools/go/ssa_test.TestTypeparamTest.func1(0xab4d380)\r\n\t/home/swarming/.swarming/w/ir/x/w/targetrepo177684174/go/ssa/builder_test.go:882 +0x4d fp=0xbb3ff60 sp=0xbb3fdf0 pc=0x2935004d\r\ntesting.tRunner(0xab4d380, 0xab28df8)\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1689 +0xd fp=0xbb3ffc8 sp=0xbb3ff60 pc=0x1a0a000d\r\ntesting.(*T).Run.gowrap1()\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x2 fp=0xbb3ffe0 sp=0xbb3ffc8 pc=0x1a100002\r\nruntime.goexit({})\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/runtime/asm_wasm.s:434 +0x1 fp=0xbb3ffe8 sp=0xbb3ffe0 pc=0x15260001\r\ncreated by testing.(*T).Run in goroutine 571\r\n\t/home/swarming/.swarming/w/ir/x/w/goroot/src/testing/testing.go:1742 +0x43\r\n```\r\n\r\n</details>\r\n\r\nExamples:\r\n- http://ci.chromium.org/b/8761786466554532129/test-results\r\n- http://ci.chromium.org/b/8761791128052112705/test-results\r\n\r\n(attn @golang/wasm)",shell\r\nN/A\r\n
64716,"x/vuln: add fingerprinting for binary mode### govulncheck version\n\ngovulncheck@v0.0.0-53a5385d13db-20231213181115\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nyes\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\ncode organization related\n\n### What did you expect to see?\n\nfingerprinting should ideally be used when choosing how to parse an input to the binary mode. This would make the code cleaner and logic more precise, especially if we add more formats in the future.\n\n### What did you see instead?\n\nWe currently try to parse the input to a Go binary and, if that does not work, we try to parse the blob. If that fails, then we say that we don't recognize the input. This is not exactly clean and it won't cover precisely the (very rare) cases where, say, the input is a blob or a Go binary but parsing fails due to system issues.",vulncheck or vulndb,zpavlinovic,"### govulncheck version\n\ngovulncheck@v0.0.0-53a5385d13db-20231213181115\n\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\n\nyes\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nnot platform specific\n```\n\n\n### What did you do?\n\ncode organization related\n\n### What did you expect to see?\n\nfingerprinting should ideally be used when choosing how to parse an input to the binary mode. This would make the code cleaner and logic more precise, especially if we add more formats in the future.\n\n### What did you see instead?\n\nWe currently try to parse the input to a Go binary and, if that does not work, we try to parse the blob. If that fails, then we say that we don't recognize the input. This is not exactly clean and it won't cover precisely the (very rare) cases where, say, the input is a blob or a Go binary but parsing fails due to system issues.",shell\nnot platform specific\n
64704,cmd/compile: compiler accepts range over int for any language version### Go version\n\ngo version devel go1.22-27f02a1d25 Tue Dec 12 21:19:47 2023 -0800 darwin/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nCompiled the following program (`x.go`) with: `go tool compile -lang=go1.21`.\r\n\r\n\r\n\n\n### What did you expect to see?\n\nAn error: range over integers is only permitted with go1.22 and up.\n\n### What did you see instead?\n\nNo error.,NeedsFix|compiler/runtime,griesemer,### Go version\n\ngo version devel go1.22-27f02a1d25 Tue Dec 12 21:19:47 2023 -0800 darwin/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nNot relevant. This is just a bug in the typechecker.\n```\n\n\n### What did you do?\n\nCompiled the following program (`x.go`) with: `go tool compile -lang=go1.21`.\r\n\r\n```Go\r\npackage main\r\n\r\nfunc main() {\r\n\tfor range 10 {\r\n\t}\r\n}\r\n```\r\n\n\n### What did you expect to see?\n\nAn error: range over integers is only permitted with go1.22 and up.\n\n### What did you see instead?\n\nNo error.,shell\nNot relevant. This is just a bug in the typechecker.\n
64702,"x/tools/cmd/guru: TestIssue17515 failing on x_tools-gotip-wasip1-wasm_wasmtime due to symlink permission error### Go version\n\nN/A\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nCheck LUCI build status at https://ci.chromium.org/p/golang/g/x-tools-gotip/console.\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\nhttps://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wasmtime/b8761809133576738257/test-results:\r\n```\r\n=== RUN   TestIssue17515\r\n    unit_test.go:56: symlink /tmp/home2806657382/go/src /tmp/home2806657382/src: Operation not permitted\r\n--- FAIL: TestIssue17515 (0.00s)\r\n```\r\n\r\nThis test attempts to guard the `os.Symlink` call based on `GOOS`, but it uses a negative list instead of a positive one, so erroneously assumes that new or unrecognized `GOOS` values support symlinks:\r\nhttps://cs.opensource.google/go/x/tools/+/master:cmd/guru/unit_test.go;drc=559c4300daa4efe55422df9bba86d125cdf1d9ef;l=57",Testing|NeedsFix,bcmills,"### Go version\n\nN/A\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nCheck LUCI build status at https://ci.chromium.org/p/golang/g/x-tools-gotip/console.\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\nhttps://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wasmtime/b8761809133576738257/test-results:\r\n```\r\n=== RUN   TestIssue17515\r\n    unit_test.go:56: symlink /tmp/home2806657382/go/src /tmp/home2806657382/src: Operation not permitted\r\n--- FAIL: TestIssue17515 (0.00s)\r\n```\r\n\r\nThis test attempts to guard the `os.Symlink` call based on `GOOS`, but it uses a negative list instead of a positive one, so erroneously assumes that new or unrecognized `GOOS` values support symlinks:\r\nhttps://cs.opensource.google/go/x/tools/+/master:cmd/guru/unit_test.go;drc=559c4300daa4efe55422df9bba86d125cdf1d9ef;l=57",shell\nN/A\n
64701,"x/tools/internal/robustio: TestFileInfo missing feature guards for symlinks and hard-links### Go version\n\nN/A\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nCheck `x/tools` build status on https://ci.chromium.org/p/golang/g/x-tools-gotip/console.\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\nhttps://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wasmtime/b8761809133576738257/test-results:\r\n```\r\n=== RUN   TestFileInfo\r\n    robustio_test.go:57: can't create symbolic link: symlink /tmp/TestFileInfo2274051770/002/real /tmp/TestFileInfo2274051770/004/symlink: Operation not permitted\r\n--- FAIL: TestFileInfo (2.00s)\r\n```\r\n\r\nIn general calls to `os.Symlink` and `os.Link` can fail on certain configurations of Windows, Android, and wasip1. See [`testenv.HasSymlink`](https://pkg.go.dev/internal/testenv@master#HasSymlink) and [`testenv.HasLink`](https://pkg.go.dev/internal/testenv@master#HasLink) in the main repo.\r\n\r\n(attn @findleyr @adonovan)",Testing|NeedsFix|Tools,bcmills,"### Go version\n\nN/A\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nN/A\n```\n\n\n### What did you do?\n\nCheck `x/tools` build status on https://ci.chromium.org/p/golang/g/x-tools-gotip/console.\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\nhttps://ci.chromium.org/ui/p/golang/builders/ci/x_tools-gotip-wasip1-wasm_wasmtime/b8761809133576738257/test-results:\r\n```\r\n=== RUN   TestFileInfo\r\n    robustio_test.go:57: can't create symbolic link: symlink /tmp/TestFileInfo2274051770/002/real /tmp/TestFileInfo2274051770/004/symlink: Operation not permitted\r\n--- FAIL: TestFileInfo (2.00s)\r\n```\r\n\r\nIn general calls to `os.Symlink` and `os.Link` can fail on certain configurations of Windows, Android, and wasip1. See [`testenv.HasSymlink`](https://pkg.go.dev/internal/testenv@master#HasSymlink) and [`testenv.HasLink`](https://pkg.go.dev/internal/testenv@master#HasLink) in the main repo.\r\n\r\n(attn @findleyr @adonovan)",shell\nN/A\n
64697,"x/build: timeouts too short on `windows-amd64-race` LUCI builder```\r\n#!watchflakes\r\npost <- builder ~ `(gotip|go1\\.\\d\\d)-windows-amd64-race` && (`test timed out` || `SIGQUIT` || status == ""ABORT"")  && date < ""2024-02-22""\r\n```\r\n\r\n### Go version\r\n\r\n400e24a8be852e7b20eb4af1999b28c20bb4ea21\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck post-commit build status at https://ci.chromium.org/p/golang/g/go-gotip/console.\r\n\r\n### What did you expect to see?\r\n\r\nTests reliably passing.\r\n\r\n### What did you see instead?\r\n\r\nhttps://ci.chromium.org/ui/p/golang/builders/ci/gotip-windows-amd64-race/b8761869653601911985/test-results:\r\n```\r\n=== RUN   TestSelf\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestSelf (4s)\r\n```\r\n\r\nNote that the timeout for the test is the default 3m0s.\r\n\r\nIn contrast, the legacy `windows-amd64-race` builder uses `GO_TEST_TIMEOUT_SCALE=2`, which would imply a 6m timeout for this test.\r\n(https://cs.opensource.google/go/x/build/+/master:dashboard/builders.go;l=2340;drc=106fb71fb120a066e390426df597efa8e674a6e0)\r\n",Builders|NeedsFix,thanm,"```\r\n#!watchflakes\r\npost <- builder ~ `(gotip|go1\\.\\d\\d)-windows-amd64-race` && (`test timed out` || `SIGQUIT` || status == ""ABORT"")  && date < ""2024-02-22""\r\n```\r\n\r\n### Go version\r\n\r\n400e24a8be852e7b20eb4af1999b28c20bb4ea21\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck post-commit build status at https://ci.chromium.org/p/golang/g/go-gotip/console.\r\n\r\n### What did you expect to see?\r\n\r\nTests reliably passing.\r\n\r\n### What did you see instead?\r\n\r\nhttps://ci.chromium.org/ui/p/golang/builders/ci/gotip-windows-amd64-race/b8761869653601911985/test-results:\r\n```\r\n=== RUN   TestSelf\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestSelf (4s)\r\n```\r\n\r\nNote that the timeout for the test is the default 3m0s.\r\n\r\nIn contrast, the legacy `windows-amd64-race` builder uses `GO_TEST_TIMEOUT_SCALE=2`, which would imply a 6m timeout for this test.\r\n(https://cs.opensource.google/go/x/build/+/master:dashboard/builders.go;l=2340;drc=106fb71fb120a066e390426df597efa8e674a6e0)\r\n",shell\r\nN/A\r\n
64672,"x/website: /security is a redirection loop### Go version\n\nnot relevant\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n```\r\n\u279c  ~ curl https://go.dev/security    \r\n<a href=""/security/"">Moved Permanently</a>.\r\n\r\n\u279c  ~ curl https://go.dev/security/\r\n<a href=""/doc/security/"">Moved Permanently</a>.\r\n\r\n\u279c  ~ curl https://go.dev/doc/security/\r\n<a href=""/security"">Moved Permanently</a>.\r\n```\n\n### What did you expect to see?\n\nnot a redirection loop\n\n### What did you see instead?\n\na redirection loop",NeedsFix|website,rsc,"### Go version\n\nnot relevant\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nnot relevant\n```\n\n\n### What did you do?\n\n```\r\n\u279c  ~ curl https://go.dev/security    \r\n<a href=""/security/"">Moved Permanently</a>.\r\n\r\n\u279c  ~ curl https://go.dev/security/\r\n<a href=""/doc/security/"">Moved Permanently</a>.\r\n\r\n\u279c  ~ curl https://go.dev/doc/security/\r\n<a href=""/security"">Moved Permanently</a>.\r\n```\n\n### What did you expect to see?\n\nnot a redirection loop\n\n### What did you see instead?\n\na redirection loop",shell\nnot relevant\n
64670,"cmd/go/internal/vcweb/vcstest: TestScripts/git/issue47650.txt failing on systems with older git versions### Go version\n\nLatest version on master b18b058\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nJust ran the `all.sh` script to build.\n\n### What did you expect to see?\n\nSuccessful build\n\n### What did you see instead?\n\n--- FAIL: TestScripts (0.40s)\r\n    --- FAIL: TestScripts/git/issue47650.txt (0.89s)\r\n        vcstest_test.go:155: 2023/12/12 02:12:46 issue47650.txt:\r\n            > handle git\r\n            > env GIT_AUTHOR_NAME='Bryan C. Mills'\r\n            > env GIT_AUTHOR_EMAIL='bcmills@google.com'\r\n            > env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\r\n            > env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\r\n            > git init\r\n            [stdout]\r\n            Initialized empty Git repository in /tmp/TestScripts1179865923/001/git/issue47650/.git/\r\n            > at 2021-08-11T13:52:00-04:00\r\n            > git add cmd\r\n            > git commit -m 'add cmd/issue47650'\r\n            [stdout]\r\n            [master (root-commit) 4d237df] add cmd/issue47650\r\n             1 file changed, 7 insertions(+)\r\n             create mode 100644 cmd/issue47650/main.go\r\n            > git tag v0.1.0\r\n            > git add go.mod\r\n            > git commit -m 'add go.mod'\r\n            [stdout]\r\n            [master 21535ef] add go.mod\r\n             1 file changed, 3 insertions(+)\r\n             create mode 100644 go.mod\r\n            > git show-ref --tags --heads\r\n            [stdout]\r\n            21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/master\r\n            4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0\r\n            > cmp stdout .git-refs\r\n            diff stdout .git-refs\r\n            --- stdout\r\n            +++ .git-refs\r\n            @@ -1,2 +1,2 @@\r\n            -21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/master\r\n            +21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/main\r\n             4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0\r\n            \r\n            \r\n            \r\n        vcstest_test.go:161: issue47650.txt:19: cmp stdout .git-refs: stdout and .git-refs differ\r\nFAIL\r\nFAIL    cmd/go/internal/vcweb/vcstest   7.643s\r\n\r\nIt seems like it's caused by [this commit](https://cs.opensource.google/go/go/+/a839ec1e73c25d47cc329e93b9508fb53277bdd2) .",Testing|NeedsFix|GoCommand|release-blocker,bcmills,"### Go version\n\nLatest version on master b18b058\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/root/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/root/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build294179835=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nJust ran the `all.sh` script to build.\n\n### What did you expect to see?\n\nSuccessful build\n\n### What did you see instead?\n\n--- FAIL: TestScripts (0.40s)\r\n    --- FAIL: TestScripts/git/issue47650.txt (0.89s)\r\n        vcstest_test.go:155: 2023/12/12 02:12:46 issue47650.txt:\r\n            > handle git\r\n            > env GIT_AUTHOR_NAME='Bryan C. Mills'\r\n            > env GIT_AUTHOR_EMAIL='bcmills@google.com'\r\n            > env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\r\n            > env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\r\n            > git init\r\n            [stdout]\r\n            Initialized empty Git repository in /tmp/TestScripts1179865923/001/git/issue47650/.git/\r\n            > at 2021-08-11T13:52:00-04:00\r\n            > git add cmd\r\n            > git commit -m 'add cmd/issue47650'\r\n            [stdout]\r\n            [master (root-commit) 4d237df] add cmd/issue47650\r\n             1 file changed, 7 insertions(+)\r\n             create mode 100644 cmd/issue47650/main.go\r\n            > git tag v0.1.0\r\n            > git add go.mod\r\n            > git commit -m 'add go.mod'\r\n            [stdout]\r\n            [master 21535ef] add go.mod\r\n             1 file changed, 3 insertions(+)\r\n             create mode 100644 go.mod\r\n            > git show-ref --tags --heads\r\n            [stdout]\r\n            21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/master\r\n            4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0\r\n            > cmp stdout .git-refs\r\n            diff stdout .git-refs\r\n            --- stdout\r\n            +++ .git-refs\r\n            @@ -1,2 +1,2 @@\r\n            -21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/master\r\n            +21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/main\r\n             4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0\r\n            \r\n            \r\n            \r\n        vcstest_test.go:161: issue47650.txt:19: cmp stdout .git-refs: stdout and .git-refs differ\r\nFAIL\r\nFAIL    cmd/go/internal/vcweb/vcstest   7.643s\r\n\r\nIt seems like it's caused by [this commit](https://cs.opensource.google/go/go/+/a839ec1e73c25d47cc329e93b9508fb53277bdd2) .","shell\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/root/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/root/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build294179835=/tmp/go-build -gno-record-gcc-switches'\n"
64663,"runtime/cgo: support Handle even when CGO_ENABLED=0### Go version\r\n\r\ngo1.21.0\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nRun the program\r\n\r\n\r\n\r\non Windows (`GOOS=windows`).\r\n\r\n### What did you expect to see?\r\n\r\nNo error.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nruntime.cgo_yield: relocation target _cgo_yield not defined\r\n_cgo_init: relocation target x_cgo_init not defined\r\n_cgo_thread_start: relocation target x_cgo_thread_start not defined\r\n_cgo_pthread_key_created: relocation target x_cgo_pthread_key_created not defined\r\n_crosscall2_ptr: relocation target x_crosscall2_ptr not defined\r\n_cgo_bindm: relocation target x_cgo_bindm not defined\r\n_cgo_notify_runtime_init_done: relocation target x_cgo_notify_runtime_init_done not defined\r\n_cgo_getstackbound: relocation target x_cgo_getstackbound not defined\r\n```\r\n\r\nThis issue may be fixed by forcing `CGO_ENABLED=1` when using `cgo.NewHandle`, but I think that's the short-sighted fix. `cgo.Handle` is also useful for storing context when using the `syscall` facility for calling native code.",NeedsInvestigation|compiler/runtime,mdempsky,"### Go version\r\n\r\ngo1.21.0\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nWindows\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nRun the program\r\n\r\n```go\r\npackage main\r\n\r\nimport ""runtime/cgo""\r\n\r\nfunc main() {\r\n\tprintln(cgo.NewHandle(new(int)))\r\n}\r\n```\r\n\r\non Windows (`GOOS=windows`).\r\n\r\n### What did you expect to see?\r\n\r\nNo error.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nruntime.cgo_yield: relocation target _cgo_yield not defined\r\n_cgo_init: relocation target x_cgo_init not defined\r\n_cgo_thread_start: relocation target x_cgo_thread_start not defined\r\n_cgo_pthread_key_created: relocation target x_cgo_pthread_key_created not defined\r\n_crosscall2_ptr: relocation target x_crosscall2_ptr not defined\r\n_cgo_bindm: relocation target x_cgo_bindm not defined\r\n_cgo_notify_runtime_init_done: relocation target x_cgo_notify_runtime_init_done not defined\r\n_cgo_getstackbound: relocation target x_cgo_getstackbound not defined\r\n```\r\n\r\nThis issue may be fixed by forcing `CGO_ENABLED=1` when using `cgo.NewHandle`, but I think that's the short-sighted fix. `cgo.Handle` is also useful for storing context when using the `syscall` facility for calling native code.",shell\r\nWindows\r\n
64661,"cmd/go: test -coverprofile with swig fails### Go version\r\n\r\ngo version go1.21.2 darwin/arm64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nUse a simple project with a swig file in it: [simple-test.zip](https://github.com/golang/go/files/13641721/simple-test.zip)\r\n\r\nRun `go test` works\r\nRun `go test -coverprofile .testCoverage.txt` fails with message:\r\n\r\n```\r\ngo build simple:\r\n# cover simple\r\n2023/12/11 22:43:50 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build368947532/b102/_main_swig.cover.go: no such file or directory\r\nFAIL\tsimple [build failed]\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`go test -coverprofile` works\r\n\r\n### What did you see instead?\r\n\r\n`go test -coverprofile .testCoverage.txt` fails with message:\r\n\r\n```\r\ngo build simple:\r\n# cover simple\r\n2023/12/11 22:43:50 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build368947532/b102/_main_swig.cover.go: no such file or directory\r\nFAIL\tsimple [build failed]\r\n```\r\n\r\nAdditionally the output when with `go test -x -coverprofile .testCoverage.txt `\r\n\r\n<details>\r\n  <summary>go test -x -coverprofile .testCoverage.txt</summary>\r\n\r\n      WORK=/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849\r\n      mkdir -p $WORK/b001/\r\n      mkdir -p $WORK/b020/\r\n      mkdir -p $WORK/b013/\r\n      mkdir -p $WORK/b016/\r\n      mkdir -p $WORK/b014/\r\n      mkdir -p $WORK/b009/\r\n      mkdir -p $WORK/b007/\r\n      mkdir -p $WORK/b035/\r\n      mkdir -p $WORK/b025/\r\n      mkdir -p $WORK/b037/\r\n      mkdir -p $WORK/b015/\r\n      mkdir -p $WORK/b041/\r\n      mkdir -p $WORK/b018/\r\n      mkdir -p $WORK/b045/\r\n      mkdir -p $WORK/b019/\r\n      mkdir -p $WORK/b071/\r\n      mkdir -p $WORK/b089/\r\n      mkdir -p $WORK/b090/\r\n      mkdir -p $WORK/b096/\r\n      mkdir -p $WORK/b027/\r\n      mkdir -p $WORK/b012/\r\n      mkdir -p $WORK/b006/\r\n      mkdir -p $WORK/b017/\r\n      mkdir -p $WORK/b011/\r\n      mkdir -p $WORK/b039/\r\n      mkdir -p $WORK/b010/\r\n      mkdir -p $WORK/b005/\r\n      mkdir -p $WORK/b026/\r\n      mkdir -p $WORK/b032/\r\n      mkdir -p $WORK/b004/\r\n      mkdir -p $WORK/b049/\r\n      mkdir -p $WORK/b036/\r\n      mkdir -p $WORK/b052/\r\n      mkdir -p $WORK/b024/\r\n      mkdir -p $WORK/b030/\r\n      mkdir -p $WORK/b034/\r\n      mkdir -p $WORK/b051/\r\n      mkdir -p $WORK/b028/\r\n      mkdir -p $WORK/b062/\r\n      mkdir -p $WORK/b086/\r\n      mkdir -p $WORK/b043/\r\n      mkdir -p $WORK/b050/\r\n      mkdir -p $WORK/b040/\r\n      mkdir -p $WORK/b048/\r\n      mkdir -p $WORK/b061/\r\n      mkdir -p $WORK/b058/\r\n      mkdir -p $WORK/b038/\r\n      mkdir -p $WORK/b081/\r\n      mkdir -p $WORK/b047/\r\n      mkdir -p $WORK/b023/\r\n      mkdir -p $WORK/b067/\r\n      mkdir -p $WORK/b080/\r\n      mkdir -p $WORK/b031/\r\n      mkdir -p $WORK/b070/\r\n      mkdir -p $WORK/b088/\r\n      mkdir -p $WORK/b029/\r\n      mkdir -p $WORK/b022/\r\n      mkdir -p $WORK/b056/\r\n      mkdir -p $WORK/b033/\r\n      mkdir -p $WORK/b021/\r\n      mkdir -p $WORK/b003/\r\n      mkdir -p $WORK/b053/\r\n      mkdir -p $WORK/b046/\r\n      mkdir -p $WORK/b044/\r\n      mkdir -p $WORK/b055/\r\n      mkdir -p $WORK/b054/\r\n      mkdir -p $WORK/b094/\r\n      mkdir -p $WORK/b092/\r\n      mkdir -p $WORK/b099/\r\n      mkdir -p $WORK/b069/\r\n      mkdir -p $WORK/b095/\r\n      mkdir -p $WORK/b091/\r\n      mkdir -p $WORK/b101/\r\n      mkdir -p $WORK/b093/\r\n      mkdir -p $WORK/b042/\r\n      mkdir -p $WORK/b097/\r\n      mkdir -p $WORK/b098/\r\n      mkdir -p $WORK/b100/\r\n      mkdir -p $WORK/b087/\r\n      mkdir -p $WORK/b103/\r\n      cp /Users/jackieli/Library/Caches/go-build/9b/9b2bb0e3ac1b16efdbc8ca5a95d2ae084340b1f9d5e8300071e4d4f18e9a6227-d $WORK/b103/_cgo_gotypes.go\r\n      cp /Users/jackieli/Library/Caches/go-build/ab/ab115b8041115aec8fccc5362216233eb3640d462533a86dbf27e17740c7cefc-d $WORK/b103/cgo.cgo1.go\r\n      cp /Users/jackieli/Library/Caches/go-build/e7/e7322c53a39b536e027f8264f29ab9c8263c129048e4fd7c0381c646e5998571-d $WORK/b103/_cgo_import.go\r\n      mkdir -p $WORK/b102/\r\n      cd .\r\n      swig -version\r\n      cd /Users/jackieli/Downloads/simple\r\n      /opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64/compile -o $WORK/b102/_go_.o -trimpath ""$WORK/b102=>"" -p main -complete -goversion go1.21.2 -c=4 -shared -nolocalimports $WORK/swig_intsize.go\r\n      swig -go -cgo -intgosize 64 -module main -o $WORK/b102/main_wrap.c -outdir $WORK/b102/ main.swig\r\n      mv $WORK/b102/main.go $WORK/b102/_main_swig.go\r\n      cat >/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/pkgcfg.txt << 'EOF' # internal\r\n      {""OutConfig"":""/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/coveragecfg"",""PkgPath"":""simple"",""PkgName"":""main"",""Granularity"":""perblock"",""ModulePath"":""simple"",""Local"":false}EOF\r\n      cat >/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/coveroutfiles.txt << 'EOF' # internal\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/covervars.go\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/main.cover.go\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/_main_swig.cover.go\r\n      EOF\r\n      cd $WORK/b102/\r\n      /opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64/cover -pkgcfg ./pkgcfg.txt -mode set -var goCover_a7a39b72f297_ -outfilelist ./coveroutfiles.txt /Users/jackieli/Downloads/simple/main.go /Users/jackieli/Downloads/simple$WORK/b102/_main_swig.go\r\n      go build simple:\r\n      # cover simple\r\n      2023/12/11 22:45:14 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/_main_swig.cover.go: no such file or directory\r\n      rm -r $WORK/b001/\r\n      FAIL    simple [build failed]\r\n\r\n  \r\n</details>\r\n\r\nAlso note that last version I used for this project go1.18 works. I also tested go1.21 on Linux/amd64, same error.\r\n\r\n/cc @ianlancetaylor ",NeedsFix|GoCommand,thanm,"### Go version\r\n\r\ngo version go1.21.2 darwin/arm64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jackieli/Library/Caches/go-build'\r\nGOENV='/Users/jackieli/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jackieli/go/pkg/mod'\r\nGONOPROXY='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGONOSUMDB='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGOOS='darwin'\r\nGOPATH='/Users/jackieli/go'\r\nGOPRIVATE='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jackieli/Downloads/simple/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build3418952473=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nUse a simple project with a swig file in it: [simple-test.zip](https://github.com/golang/go/files/13641721/simple-test.zip)\r\n\r\nRun `go test` works\r\nRun `go test -coverprofile .testCoverage.txt` fails with message:\r\n\r\n```\r\ngo build simple:\r\n# cover simple\r\n2023/12/11 22:43:50 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build368947532/b102/_main_swig.cover.go: no such file or directory\r\nFAIL\tsimple [build failed]\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`go test -coverprofile` works\r\n\r\n### What did you see instead?\r\n\r\n`go test -coverprofile .testCoverage.txt` fails with message:\r\n\r\n```\r\ngo build simple:\r\n# cover simple\r\n2023/12/11 22:43:50 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build368947532/b102/_main_swig.cover.go: no such file or directory\r\nFAIL\tsimple [build failed]\r\n```\r\n\r\nAdditionally the output when with `go test -x -coverprofile .testCoverage.txt `\r\n\r\n<details>\r\n  <summary>go test -x -coverprofile .testCoverage.txt</summary>\r\n\r\n      WORK=/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849\r\n      mkdir -p $WORK/b001/\r\n      mkdir -p $WORK/b020/\r\n      mkdir -p $WORK/b013/\r\n      mkdir -p $WORK/b016/\r\n      mkdir -p $WORK/b014/\r\n      mkdir -p $WORK/b009/\r\n      mkdir -p $WORK/b007/\r\n      mkdir -p $WORK/b035/\r\n      mkdir -p $WORK/b025/\r\n      mkdir -p $WORK/b037/\r\n      mkdir -p $WORK/b015/\r\n      mkdir -p $WORK/b041/\r\n      mkdir -p $WORK/b018/\r\n      mkdir -p $WORK/b045/\r\n      mkdir -p $WORK/b019/\r\n      mkdir -p $WORK/b071/\r\n      mkdir -p $WORK/b089/\r\n      mkdir -p $WORK/b090/\r\n      mkdir -p $WORK/b096/\r\n      mkdir -p $WORK/b027/\r\n      mkdir -p $WORK/b012/\r\n      mkdir -p $WORK/b006/\r\n      mkdir -p $WORK/b017/\r\n      mkdir -p $WORK/b011/\r\n      mkdir -p $WORK/b039/\r\n      mkdir -p $WORK/b010/\r\n      mkdir -p $WORK/b005/\r\n      mkdir -p $WORK/b026/\r\n      mkdir -p $WORK/b032/\r\n      mkdir -p $WORK/b004/\r\n      mkdir -p $WORK/b049/\r\n      mkdir -p $WORK/b036/\r\n      mkdir -p $WORK/b052/\r\n      mkdir -p $WORK/b024/\r\n      mkdir -p $WORK/b030/\r\n      mkdir -p $WORK/b034/\r\n      mkdir -p $WORK/b051/\r\n      mkdir -p $WORK/b028/\r\n      mkdir -p $WORK/b062/\r\n      mkdir -p $WORK/b086/\r\n      mkdir -p $WORK/b043/\r\n      mkdir -p $WORK/b050/\r\n      mkdir -p $WORK/b040/\r\n      mkdir -p $WORK/b048/\r\n      mkdir -p $WORK/b061/\r\n      mkdir -p $WORK/b058/\r\n      mkdir -p $WORK/b038/\r\n      mkdir -p $WORK/b081/\r\n      mkdir -p $WORK/b047/\r\n      mkdir -p $WORK/b023/\r\n      mkdir -p $WORK/b067/\r\n      mkdir -p $WORK/b080/\r\n      mkdir -p $WORK/b031/\r\n      mkdir -p $WORK/b070/\r\n      mkdir -p $WORK/b088/\r\n      mkdir -p $WORK/b029/\r\n      mkdir -p $WORK/b022/\r\n      mkdir -p $WORK/b056/\r\n      mkdir -p $WORK/b033/\r\n      mkdir -p $WORK/b021/\r\n      mkdir -p $WORK/b003/\r\n      mkdir -p $WORK/b053/\r\n      mkdir -p $WORK/b046/\r\n      mkdir -p $WORK/b044/\r\n      mkdir -p $WORK/b055/\r\n      mkdir -p $WORK/b054/\r\n      mkdir -p $WORK/b094/\r\n      mkdir -p $WORK/b092/\r\n      mkdir -p $WORK/b099/\r\n      mkdir -p $WORK/b069/\r\n      mkdir -p $WORK/b095/\r\n      mkdir -p $WORK/b091/\r\n      mkdir -p $WORK/b101/\r\n      mkdir -p $WORK/b093/\r\n      mkdir -p $WORK/b042/\r\n      mkdir -p $WORK/b097/\r\n      mkdir -p $WORK/b098/\r\n      mkdir -p $WORK/b100/\r\n      mkdir -p $WORK/b087/\r\n      mkdir -p $WORK/b103/\r\n      cp /Users/jackieli/Library/Caches/go-build/9b/9b2bb0e3ac1b16efdbc8ca5a95d2ae084340b1f9d5e8300071e4d4f18e9a6227-d $WORK/b103/_cgo_gotypes.go\r\n      cp /Users/jackieli/Library/Caches/go-build/ab/ab115b8041115aec8fccc5362216233eb3640d462533a86dbf27e17740c7cefc-d $WORK/b103/cgo.cgo1.go\r\n      cp /Users/jackieli/Library/Caches/go-build/e7/e7322c53a39b536e027f8264f29ab9c8263c129048e4fd7c0381c646e5998571-d $WORK/b103/_cgo_import.go\r\n      mkdir -p $WORK/b102/\r\n      cd .\r\n      swig -version\r\n      cd /Users/jackieli/Downloads/simple\r\n      /opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64/compile -o $WORK/b102/_go_.o -trimpath ""$WORK/b102=>"" -p main -complete -goversion go1.21.2 -c=4 -shared -nolocalimports $WORK/swig_intsize.go\r\n      swig -go -cgo -intgosize 64 -module main -o $WORK/b102/main_wrap.c -outdir $WORK/b102/ main.swig\r\n      mv $WORK/b102/main.go $WORK/b102/_main_swig.go\r\n      cat >/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/pkgcfg.txt << 'EOF' # internal\r\n      {""OutConfig"":""/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/coveragecfg"",""PkgPath"":""simple"",""PkgName"":""main"",""Granularity"":""perblock"",""ModulePath"":""simple"",""Local"":false}EOF\r\n      cat >/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/coveroutfiles.txt << 'EOF' # internal\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/covervars.go\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/main.cover.go\r\n      /var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/_main_swig.cover.go\r\n      EOF\r\n      cd $WORK/b102/\r\n      /opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64/cover -pkgcfg ./pkgcfg.txt -mode set -var goCover_a7a39b72f297_ -outfilelist ./coveroutfiles.txt /Users/jackieli/Downloads/simple/main.go /Users/jackieli/Downloads/simple$WORK/b102/_main_swig.go\r\n      go build simple:\r\n      # cover simple\r\n      2023/12/11 22:45:14 cover: open $WORK/b102//var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build821224849/b102/_main_swig.cover.go: no such file or directory\r\n      rm -r $WORK/b001/\r\n      FAIL    simple [build failed]\r\n\r\n  \r\n</details>\r\n\r\nAlso note that last version I used for this project go1.18 works. I also tested go1.21 on Linux/amd64, same error.\r\n\r\n/cc @ianlancetaylor ","shell\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/jackieli/Library/Caches/go-build'\r\nGOENV='/Users/jackieli/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/jackieli/go/pkg/mod'\r\nGONOPROXY='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGONOSUMDB='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGOOS='darwin'\r\nGOPATH='/Users/jackieli/go'\r\nGOPRIVATE='tespkg.in,github.com/tespkg,gitlab.com/target-digital-transformation'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.2/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.2/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/jackieli/Downloads/simple/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/v7/nkqv5k_906s7gq6l4h30kq_w0000gn/T/go-build3418952473=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n"
64651,"iter: incorrect race instrumentation is causing false positives in `iter.Pull2`### Go version\n\ngo version devel go1.22-46ea4ab Sat Dec 9 21:48:06 2023 +0000 windows/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n\r\n\r\nthe `race_test.go` file content:\r\n\r\n\n\n### What did you expect to see?\n\nThe test run successfully.\n\n### What did you see instead?\n\nA data race error:\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c248 by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0x9b\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c248 by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0x7d\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c258 by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0xb2\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c258 by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0x94\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c26f by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0xc9\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c26f by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0xab\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n--- FAIL: TestPull (0.00s)\r\n    testing.go:1398: race detected during execution of test\r\nFAIL\r\nFAIL    command-line-arguments  0.633s\r\nFAIL\r\n```",RaceDetector|NeedsFix|release-blocker|okay-after-rc1,mauri870,"### Go version\n\ngo version devel go1.22-46ea4ab Sat Dec 9 21:48:06 2023 +0000 windows/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\nigel\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\nigel\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\nigel\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\nigel\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://goproxy.cn,direct\r\nset GOROOT=C:\\Users\\nigel\\sdk\\gotip\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\nigel\\sdk\\gotip\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.22-46ea4ab Sat Dec 9 21:48:06 2023 +0000\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=D:\\Projects\\goland\\it\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\nigel\\AppData\\Local\\Temp\\go-build11578654783032352739=/tmp/go-build -gno-record-gcc-switches\n```\n\n\n### What did you do?\n\n```bash\r\nGOEXPERIMENT=rangefunc gotip test -race ./race_test.go\r\n```\r\n\r\nthe `race_test.go` file content:\r\n\r\n```go\r\npackage issue\r\n\r\nimport (\r\n\t""iter""\r\n\t""testing""\r\n)\r\n\r\nfunc Range(stop int) iter.Seq2[int, int] {\r\n\treturn func(yield func(int, int) bool) {\r\n\t\tfor i := 0; i < stop; i++ {\r\n\t\t\tif !yield(i, i) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc TestPull(t *testing.T) {\r\n\tr := Range(3)\r\n\tnext, _ := iter.Pull2(r)\r\n\ti, v, ok := next()\r\n\tif i != 0 || v != 0 || !ok {\r\n\t\tt.Fail()\r\n\t}\r\n}\r\n\r\n```\n\n### What did you expect to see?\n\nThe test run successfully.\n\n### What did you see instead?\n\nA data race error:\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c248 by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0x9b\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c248 by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0x7d\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c258 by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0xb2\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c258 by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0x94\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c00009c26f by goroutine 7:\r\n  iter.Pull2[go.shape.int,go.shape.int].func2()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:151 +0xc9\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:21 +0x77\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n\r\nPrevious write at 0x00c00009c26f by goroutine 8:\r\n  iter.Pull2[go.shape.int,go.shape.int].func1.1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:135 +0xab\r\n  command-line-arguments.TestPull.Range.func1()\r\n      D:/Projects/goland/it/issue/race_test.go:11 +0x4d\r\n  iter.Pull2[go.shape.int,go.shape.int].func1()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:139 +0x207\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x825\r\n  testing.runTests.func1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2161 +0x85\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.runTests()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2159 +0x8be\r\n  testing.(*M).Run()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:2027 +0xf17\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n\r\nGoroutine 8 (running) created at:\r\n  iter.Pull2[go.shape.int,go.shape.int]()\r\n      C:/Users/nigel/sdk/gotip/src/iter/iter.go:130 +0x264\r\n  command-line-arguments.TestPull()\r\n      D:/Projects/goland/it/issue/race_test.go:20 +0x6f\r\n  testing.tRunner()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1689 +0x21e\r\n  testing.(*T).Run.gowrap1()\r\n      C:/Users/nigel/sdk/gotip/src/testing/testing.go:1742 +0x44\r\n==================\r\n--- FAIL: TestPull (0.00s)\r\n    testing.go:1398: race detected during execution of test\r\nFAIL\r\nFAIL    command-line-arguments  0.633s\r\nFAIL\r\n```","shell\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\nigel\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\nigel\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\nigel\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\nigel\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://goproxy.cn,direct\r\nset GOROOT=C:\\Users\\nigel\\sdk\\gotip\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\nigel\\sdk\\gotip\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.22-46ea4ab Sat Dec 9 21:48:06 2023 +0000\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=D:\\Projects\\goland\\it\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\nigel\\AppData\\Local\\Temp\\go-build11578654783032352739=/tmp/go-build -gno-record-gcc-switches\n"
64649,"runtime: race condition raised with parallel tests, panic(nil) and -race### Go version\r\n\r\ngo version go1.21.5 darwin/arm64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nI have a testsuite for my [github.com/dolmen-go/rendezvous](https://pkg.go.dev/github.com/dolmen-go/rendezvous) package.\r\n\r\n```\r\n$ git clone https://github.com/dolmen-go/rendezvous.git\r\n$ cd rendezvous\r\n$ git checkout 44e68d01a216b3755c9ba5dc75835074c3e5e866\r\n$ go version\r\ngo version go1.21.5 darwin/arm64\r\n$ go test -v -race -run 'Test(One|Two)' ""-gcflags=all=-trimpath=$(go env GOPATH)"" github.com/dolmen-go/rendezvous\r\n=== RUN   TestOne\r\n=== PAUSE TestOne\r\n=== RUN   TestTwo\r\n=== PAUSE TestTwo\r\n=== CONT  TestOne\r\n=== CONT  TestTwo\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000076560 by goroutine 14:\r\n  internal/godebug.(*Setting).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:102 +0x58\r\n  internal/godebug.(*Setting).IncNonDefault-fm()\r\n      <autogenerated>:1 +0x34\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:111 +0xd0\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nPrevious write at 0x00c000076560 by goroutine 12:\r\n  internal/godebug.New()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:74 +0x40\r\n  internal/godebug.newIncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:203 +0x28\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:108 +0x84\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nGoroutine 14 (running) created at:\r\n  github.com/dolmen-go/rendezvous.WaitAll()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:47 +0x210\r\n  github.com/dolmen-go/rendezvous_test.TestTwo()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous_test.go:118 +0xe4\r\n  testing.tRunner()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1595 +0x1b0\r\n  testing.(*T).Run.func1()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1648 +0x40\r\n\r\nGoroutine 12 (running) created at:\r\n  github.com/dolmen-go/rendezvous.WaitAll()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:47 +0x210\r\n  github.com/dolmen-go/rendezvous_test.TestOne()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous_test.go:104 +0x180\r\n  testing.tRunner()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1595 +0x1b0\r\n  testing.(*T).Run.func1()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1648 +0x40\r\n==================\r\n=== NAME  TestOne\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestOne (0.00s)\r\n=== NAME  TestTwo\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestTwo (0.00s)\r\nFAIL\r\nexit status 1\r\nFAIL\tgithub.com/dolmen-go/rendezvous\t0.104s\r\n```\r\n\r\nSome characteristics that might be relevant:\r\n* The `rendezvous` package launches goroutines in its tests.\r\n* The `rendezvous` testsuite uses parallel testing at top testing level:\r\n\r\n\r\n\r\nThis issue is also visible on GitHub Actions: https://github.com/dolmen-go/rendezvous/actions/runs/7147035848/job/19465833264#step:4:32\r\n\r\n### What did you expect to see?\r\n\r\nTest success like with previous Go versions.\r\n\r\n### What did you see instead?\r\n\r\nRace condition in `runtime`:\r\n\r\n```\r\nWARNING: DATA RACE\r\nRead at 0x00c000076560 by goroutine 14:\r\n  internal/godebug.(*Setting).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:102 +0x58\r\n  internal/godebug.(*Setting).IncNonDefault-fm()\r\n      <autogenerated>:1 +0x34\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:111 +0xd0\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nPrevious write at 0x00c000076560 by goroutine 12:\r\n  internal/godebug.New()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:74 +0x40\r\n  internal/godebug.newIncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:203 +0x28\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:108 +0x84\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\n```\r\n\r\nLink to runtime source: https://github.com/golang/go/blob/go1.21.5/src/runtime/runtime.go#L97\r\n\r\nA [comment](https://github.com/golang/go/blob/6018ad99a4a951581b2d846a8ccd6f1d4e74fd11/src/runtime/runtime.go#L104C3-L106C23) says:\r\n\r\n\r\nIf this is related, I think this is ""big deal"" as running `go test -race` in CI is quite common. (Calling `t.Parallel()` from top level tests is not so common, this is unfortunate, and this issue blocks from pushing for it)",RaceDetector|NeedsFix|compiler/runtime,dr2chase,"### Go version\r\n\r\ngo version go1.21.5 darwin/arm64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\n- Local (Apple M2)\r\n- GitHub Actions (x86)\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nI have a testsuite for my [github.com/dolmen-go/rendezvous](https://pkg.go.dev/github.com/dolmen-go/rendezvous) package.\r\n\r\n```\r\n$ git clone https://github.com/dolmen-go/rendezvous.git\r\n$ cd rendezvous\r\n$ git checkout 44e68d01a216b3755c9ba5dc75835074c3e5e866\r\n$ go version\r\ngo version go1.21.5 darwin/arm64\r\n$ go test -v -race -run 'Test(One|Two)' ""-gcflags=all=-trimpath=$(go env GOPATH)"" github.com/dolmen-go/rendezvous\r\n=== RUN   TestOne\r\n=== PAUSE TestOne\r\n=== RUN   TestTwo\r\n=== PAUSE TestTwo\r\n=== CONT  TestOne\r\n=== CONT  TestTwo\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000076560 by goroutine 14:\r\n  internal/godebug.(*Setting).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:102 +0x58\r\n  internal/godebug.(*Setting).IncNonDefault-fm()\r\n      <autogenerated>:1 +0x34\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:111 +0xd0\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nPrevious write at 0x00c000076560 by goroutine 12:\r\n  internal/godebug.New()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:74 +0x40\r\n  internal/godebug.newIncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:203 +0x28\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:108 +0x84\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nGoroutine 14 (running) created at:\r\n  github.com/dolmen-go/rendezvous.WaitAll()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:47 +0x210\r\n  github.com/dolmen-go/rendezvous_test.TestTwo()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous_test.go:118 +0xe4\r\n  testing.tRunner()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1595 +0x1b0\r\n  testing.(*T).Run.func1()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1648 +0x40\r\n\r\nGoroutine 12 (running) created at:\r\n  github.com/dolmen-go/rendezvous.WaitAll()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:47 +0x210\r\n  github.com/dolmen-go/rendezvous_test.TestOne()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous_test.go:104 +0x180\r\n  testing.tRunner()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1595 +0x1b0\r\n  testing.(*T).Run.func1()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/testing/testing.go:1648 +0x40\r\n==================\r\n=== NAME  TestOne\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestOne (0.00s)\r\n=== NAME  TestTwo\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestTwo (0.00s)\r\nFAIL\r\nexit status 1\r\nFAIL\tgithub.com/dolmen-go/rendezvous\t0.104s\r\n```\r\n\r\nSome characteristics that might be relevant:\r\n* The `rendezvous` package launches goroutines in its tests.\r\n* The `rendezvous` testsuite uses parallel testing at top testing level:\r\n\r\n```go\r\nfunc TestOne(t *testing.T) {\r\n        t.Parallel()\r\n        // ...\r\n}\r\n\r\nfunc TestTwo(t *testing.T) {\r\n        t.Parallel()\r\n        // ...\r\n}\r\n```\r\n\r\nThis issue is also visible on GitHub Actions: https://github.com/dolmen-go/rendezvous/actions/runs/7147035848/job/19465833264#step:4:32\r\n\r\n### What did you expect to see?\r\n\r\nTest success like with previous Go versions.\r\n\r\n### What did you see instead?\r\n\r\nRace condition in `runtime`:\r\n\r\n```\r\nWARNING: DATA RACE\r\nRead at 0x00c000076560 by goroutine 14:\r\n  internal/godebug.(*Setting).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:102 +0x58\r\n  internal/godebug.(*Setting).IncNonDefault-fm()\r\n      <autogenerated>:1 +0x34\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:111 +0xd0\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\nPrevious write at 0x00c000076560 by goroutine 12:\r\n  internal/godebug.New()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:74 +0x40\r\n  internal/godebug.newIncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/internal/godebug/godebug.go:203 +0x28\r\n  runtime.(*godebugInc).IncNonDefault()\r\n      /opt/homebrew/Cellar/go/1.21.5/libexec/src/runtime/runtime.go:108 +0x84\r\n  github.com/dolmen-go/rendezvous.WaitAll.func1()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:56 +0xec\r\n  github.com/dolmen-go/rendezvous.WaitAll.func2()\r\n      src/github.com/dolmen-go/rendezvous/rendezvous.go:57 +0x44\r\n\r\n```\r\n\r\nLink to runtime source: https://github.com/golang/go/blob/go1.21.5/src/runtime/runtime.go#L97\r\n\r\nA [comment](https://github.com/golang/go/blob/6018ad99a4a951581b2d846a8ccd6f1d4e74fd11/src/runtime/runtime.go#L104C3-L106C23) says:\r\n```go\r\n\t\t// If other goroutines are racing here, no big deal. One will win,\r\n\t\t// and all the inc functions will be using the same underlying\r\n\t\t// *godebug.Setting.\r\n```\r\n\r\nIf this is related, I think this is ""big deal"" as running `go test -race` in CI is quite common. (Calling `t.Parallel()` from top level tests is not so common, this is unfortunate, and this issue blocks from pushing for it)",shell\r\n- Local (Apple M2)\r\n- GitHub Actions (x86)\r\n
64644,"x/playground: vet produces incorrect results on programs that set `// GOEXPERIMENT=rangefunc`### Go version\n\ngo dev branch\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nhttps://go.dev/play/p/vAn7V6xqpWQ?v=gotip\n\n### What did you expect to see?\n\nThe program compiles.\n\n### What did you see instead?\n\n```\r\npackage play\r\n\timports iter: build constraints exclude all Go files in /usr/local/go-faketime/src/iter\r\n```\r\n<img width=""1023"" alt=""image"" src=""https://github.com/golang/go/assets/10510431/1aec2c0e-0124-4aa7-b783-8bf5e35c4a43"">\r\n",NeedsFix,findleyr,"### Go version\n\ngo dev branch\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nn/a\n```\n\n\n### What did you do?\n\nhttps://go.dev/play/p/vAn7V6xqpWQ?v=gotip\n\n### What did you expect to see?\n\nThe program compiles.\n\n### What did you see instead?\n\n```\r\npackage play\r\n\timports iter: build constraints exclude all Go files in /usr/local/go-faketime/src/iter\r\n```\r\n<img width=""1023"" alt=""image"" src=""https://github.com/golang/go/assets/10510431/1aec2c0e-0124-4aa7-b783-8bf5e35c4a43"">\r\n",shell\nn/a\n
64626,"cmd/cgo/internal/testsanitizers: TestLibFuzzer and TestMSAN fail with CC=clang CGO_ENABLED=0### Go version\n\ngo version go1.21.4 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nOn a clean checkout of `go1.21.4`, run:\r\n\r\n```\r\ncd src\r\nCC=clang CGO_ENABLED=0 ./make.bash\r\n./run.bash\r\n```\r\n\r\nMy clang version is 14.0.6.\n\n### What did you expect to see?\n\nAll tests pass.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestLibFuzzer (0.33s)\r\n    --- FAIL: TestLibFuzzer/libfuzzer1 (0.01s)\r\n        libfuzzer_test.go:49: /usr/local/google/home/gongt/goc/bin/go build -tags=libfuzzer -gcflags=-d=libfuzzer -buildmode=c-archive -o /tmp/TestLibFuzzer3296197254/libfuzzer1.a testdata/libfuzzer1.go exited with exit status 1\r\n            go: no Go source files\r\n    --- FAIL: TestLibFuzzer/libfuzzer2 (0.01s)\r\n        libfuzzer_test.go:49: /usr/local/google/home/gongt/goc/bin/go build -tags=libfuzzer -gcflags=-d=libfuzzer -buildmode=c-archive -o /tmp/TestLibFuzzer850547297/libfuzzer2.a testdata/libfuzzer2.go exited with exit status 1\r\n            go: no Go source files\r\n--- FAIL: TestMSAN (0.27s)\r\n    msan_test.go:38: /usr/local/google/home/gongt/goc/bin/go build -msan std exited with exit status 2\r\n        go: -msan requires cgo; enable cgo by setting CGO_ENABLED=1\r\nFAIL\r\nFAIL\tcmd/cgo/internal/testsanitizers\t0.648s\r\n```",NeedsFix|compiler/runtime,mauri870,"### Go version\n\ngo version go1.21.4 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/gongt/.cache/go-build'\r\nGOENV='/usr/local/google/home/gongt/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/gongt/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/gongt/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/gongt/goc'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/google/home/gongt/goc/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/gongt/goc/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2742143614=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nOn a clean checkout of `go1.21.4`, run:\r\n\r\n```\r\ncd src\r\nCC=clang CGO_ENABLED=0 ./make.bash\r\n./run.bash\r\n```\r\n\r\nMy clang version is 14.0.6.\n\n### What did you expect to see?\n\nAll tests pass.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestLibFuzzer (0.33s)\r\n    --- FAIL: TestLibFuzzer/libfuzzer1 (0.01s)\r\n        libfuzzer_test.go:49: /usr/local/google/home/gongt/goc/bin/go build -tags=libfuzzer -gcflags=-d=libfuzzer -buildmode=c-archive -o /tmp/TestLibFuzzer3296197254/libfuzzer1.a testdata/libfuzzer1.go exited with exit status 1\r\n            go: no Go source files\r\n    --- FAIL: TestLibFuzzer/libfuzzer2 (0.01s)\r\n        libfuzzer_test.go:49: /usr/local/google/home/gongt/goc/bin/go build -tags=libfuzzer -gcflags=-d=libfuzzer -buildmode=c-archive -o /tmp/TestLibFuzzer850547297/libfuzzer2.a testdata/libfuzzer2.go exited with exit status 1\r\n            go: no Go source files\r\n--- FAIL: TestMSAN (0.27s)\r\n    msan_test.go:38: /usr/local/google/home/gongt/goc/bin/go build -msan std exited with exit status 2\r\n        go: -msan requires cgo; enable cgo by setting CGO_ENABLED=1\r\nFAIL\r\nFAIL\tcmd/cgo/internal/testsanitizers\t0.648s\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/usr/local/google/home/gongt/.cache/go-build'\r\nGOENV='/usr/local/google/home/gongt/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/google/home/gongt/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/usr/local/google/home/gongt/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/google/home/gongt/goc'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/google/home/gongt/goc/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/usr/local/google/home/gongt/goc/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2742143614=/tmp/go-build -gno-record-gcc-switches'\n"
64619,"cmd/go: C compiler version parsing fails for versions like `gcc 8.3 [DragonFly]`### Go version\n\nc71eedf90aff3fc73a645b88d2e5166b8a0179fd\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nhttps://build.golang.org/log/3c7d2464881aa6cd4c5bec97b0fd3d3fc1addfa6\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestScript (0.06s)\r\n    --- FAIL: TestScript/cgo_stale_precompiled (0.92s)\r\n        script_test.go:132: 2023-12-07T19:32:46Z\r\n        script_test.go:134: $WORK=/tmp/workdir/tmp/cmd-go-test-6569609340248629423/tmpdir16117836249475985879/cgo_stale_precompiled1804669140117065298\r\n        script_test.go:156: \r\n            # Regression test for https://go.dev/issue/47215 and https://go.dev/issue/50183:\r\n            # A mismatched $GOROOT_FINAL or missing $CC caused the C dependencies of the net\r\n            # package to appear stale, and it could not be rebuilt due to a missing $CC. (0.000s)\r\n            # This test may start with the runtime/cgo package already stale.\r\n            # Explicitly rebuild it to ensure that it is cached.\r\n            # (See https://go.dev/issue/50892.)\r\n            #\r\n            # If running in non-short mode, explicitly vary CGO_CFLAGS\r\n            # as a control case (to ensure that our regexps do catch rebuilds). (0.403s)\r\n            # https://go.dev/issue/50183: a mismatched GOROOT_FINAL caused net to be stale. (0.193s)\r\n            # https://go.dev/issue/47215: a missing $(go env CC) caused the precompiled net\r\n            # to be stale. But as of https://go.dev/cl/452457 the precompiled libraries are\r\n            # no longer installed anyway! Since we're requiring a C compiler in order to\r\n            # build and use cgo libraries in the standard library, we should make sure it\r\n            # matches what's in the cache. (0.311s)\r\n            > [abscc] stop\r\n            [condition not met]\r\n            > env CGO_ENABLED=1\r\n            > env CC=''\r\n            > [!GOOS:plan9] env PATH=''  # Guaranteed not to include $(go env CC)!\r\n            > [GOOS:plan9] env path=''\r\n            [condition not met]\r\n            > ! go build -x runtime/cgo\r\n            [stderr]\r\n            WORK=/tmp/workdir/tmp/cmd-go-test-6569609340248629423/tmpdir16117836249475985879/cgo_stale_precompiled1804669140117065298/tmp/go-build11950041837148003209\r\n        script_test.go:156: FAIL: testdata/script/cgo_stale_precompiled.txt:39: go build -x runtime/cgo: unexpected success\r\nFAIL\r\nFAIL\tcmd/go\t52.660s\r\n```",NeedsFix|GoCommand|release-blocker|FixPending,bcmills,"### Go version\n\nc71eedf90aff3fc73a645b88d2e5166b8a0179fd\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\ndragonfly-amd64-622 at c71eedf90aff3fc73a645b88d2e5166b8a0179fd\r\n\r\n:: Running /tmp/workdir/go/src/make.bash with args [""/tmp/workdir/go/src/make.bash"" ""-force""] and env [""PATH=/bin:/sbin:/usr/bin:/usr/local/bin"" ""HOME=/"" ""RC_PID=2"" ""WORKDIR=/tmp/workdir"" ""GOROOT_BOOTSTRAP=/tmp/workdir/go1.4"" ""GO_BUILDER_NAME=dragonfly-amd64-622"" ""GOBIN="" ""TMPDIR=/tmp/workdir/tmp"" ""GOCACHE=/tmp/workdir/gocache"" ""GOPLSCACHE=/tmp/workdir/goplscache"" ""PWD=/tmp/workdir/go/src""] in dir /tmp/workdir/go/src\n```\n\n\n### What did you do?\n\nhttps://build.golang.org/log/3c7d2464881aa6cd4c5bec97b0fd3d3fc1addfa6\n\n### What did you expect to see?\n\nAll tests passing.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestScript (0.06s)\r\n    --- FAIL: TestScript/cgo_stale_precompiled (0.92s)\r\n        script_test.go:132: 2023-12-07T19:32:46Z\r\n        script_test.go:134: $WORK=/tmp/workdir/tmp/cmd-go-test-6569609340248629423/tmpdir16117836249475985879/cgo_stale_precompiled1804669140117065298\r\n        script_test.go:156: \r\n            # Regression test for https://go.dev/issue/47215 and https://go.dev/issue/50183:\r\n            # A mismatched $GOROOT_FINAL or missing $CC caused the C dependencies of the net\r\n            # package to appear stale, and it could not be rebuilt due to a missing $CC. (0.000s)\r\n            # This test may start with the runtime/cgo package already stale.\r\n            # Explicitly rebuild it to ensure that it is cached.\r\n            # (See https://go.dev/issue/50892.)\r\n            #\r\n            # If running in non-short mode, explicitly vary CGO_CFLAGS\r\n            # as a control case (to ensure that our regexps do catch rebuilds). (0.403s)\r\n            # https://go.dev/issue/50183: a mismatched GOROOT_FINAL caused net to be stale. (0.193s)\r\n            # https://go.dev/issue/47215: a missing $(go env CC) caused the precompiled net\r\n            # to be stale. But as of https://go.dev/cl/452457 the precompiled libraries are\r\n            # no longer installed anyway! Since we're requiring a C compiler in order to\r\n            # build and use cgo libraries in the standard library, we should make sure it\r\n            # matches what's in the cache. (0.311s)\r\n            > [abscc] stop\r\n            [condition not met]\r\n            > env CGO_ENABLED=1\r\n            > env CC=''\r\n            > [!GOOS:plan9] env PATH=''  # Guaranteed not to include $(go env CC)!\r\n            > [GOOS:plan9] env path=''\r\n            [condition not met]\r\n            > ! go build -x runtime/cgo\r\n            [stderr]\r\n            WORK=/tmp/workdir/tmp/cmd-go-test-6569609340248629423/tmpdir16117836249475985879/cgo_stale_precompiled1804669140117065298/tmp/go-build11950041837148003209\r\n        script_test.go:156: FAIL: testdata/script/cgo_stale_precompiled.txt:39: go build -x runtime/cgo: unexpected success\r\nFAIL\r\nFAIL\tcmd/go\t52.660s\r\n```","shell\ndragonfly-amd64-622 at c71eedf90aff3fc73a645b88d2e5166b8a0179fd\r\n\r\n:: Running /tmp/workdir/go/src/make.bash with args [""/tmp/workdir/go/src/make.bash"" ""-force""] and env [""PATH=/bin:/sbin:/usr/bin:/usr/local/bin"" ""HOME=/"" ""RC_PID=2"" ""WORKDIR=/tmp/workdir"" ""GOROOT_BOOTSTRAP=/tmp/workdir/go1.4"" ""GO_BUILDER_NAME=dragonfly-amd64-622"" ""GOBIN="" ""TMPDIR=/tmp/workdir/tmp"" ""GOCACHE=/tmp/workdir/gocache"" ""GOPLSCACHE=/tmp/workdir/goplscache"" ""PWD=/tmp/workdir/go/src""] in dir /tmp/workdir/go/src\n"
64616,cmd/cgo/internal/testsanitizers: TestMSAN/msan8 fails with clang16.0.6### Go version\n\ngo version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nIn wsl2\r\nexport CC=clang\r\nclang --version\r\nDebian clang version 16.0.6 (16)\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n\r\ngo test cmd/cgo/internal/testsanitizers\n\n### What did you expect to see?\n\ntest pass.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestMSAN (9.40s)\r\n    --- FAIL: TestMSAN/msan8 (3.26s)\r\n        msan_test.go:81: /tmp/TestMSAN1734687677996663673/msan8 exited with exit status 1\r\n            ==29491==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n                #0 0x5062b8 in msanGoLoop (/tmp/TestMSAN1734687677996663673/msan8+0x5062b8) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178)\r\n                #1 0x5064c0 in _cgo_a322d3c7e754_Cfunc_msanGoLoop (/tmp/TestMSAN1734687677996663673/msan8+0x5064c0) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178)\r\n                #2 0x501143 in runtime.asmcgocall.abi0 /mnt/d/file/gofile/gogit/go1/src/runtime/asm_amd64.s:918\r\n\r\n            SUMMARY: MemorySanitizer: use-of-uninitialized-value (/tmp/TestMSAN1734687677996663673/msan8+0x5062b8) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178) in msanGoLoop\r\n            Exiting\r\nFAIL\r\nFAIL    cmd/cgo/internal/testsanitizers 32.323s\r\nFAIL\r\n```,NeedsFix|compiler/runtime,mauri870,"### Go version\n\ngo version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/mnt/d/file/gofile/gogit/go1'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/mnt/d/file/gofile/gogit/go1/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/d/file/gofile/gogit/go1/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build9589947017406823330=/tmp/go-build -gno-record-gcc-switches'\r\nGOROOT/bin/go version: go version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000\r\nuname -sr: Linux 5.15.133.1-microsoft-standard-WSL2\r\nDistributor ID: Kali\r\nDescription:    Kali GNU/Linux Rolling\r\nRelease:        2023.4\r\nCodename:       kali-rolling\r\n/lib/x86_64-linux-gnu/libc.so.6: GNU C Library (Debian GLIBC 2.37-12) stable release version 2.37.\n```\n\n\n### What did you do?\n\nIn wsl2\r\nexport CC=clang\r\nclang --version\r\nDebian clang version 16.0.6 (16)\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n\r\ngo test cmd/cgo/internal/testsanitizers\n\n### What did you expect to see?\n\ntest pass.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestMSAN (9.40s)\r\n    --- FAIL: TestMSAN/msan8 (3.26s)\r\n        msan_test.go:81: /tmp/TestMSAN1734687677996663673/msan8 exited with exit status 1\r\n            ==29491==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n                #0 0x5062b8 in msanGoLoop (/tmp/TestMSAN1734687677996663673/msan8+0x5062b8) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178)\r\n                #1 0x5064c0 in _cgo_a322d3c7e754_Cfunc_msanGoLoop (/tmp/TestMSAN1734687677996663673/msan8+0x5064c0) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178)\r\n                #2 0x501143 in runtime.asmcgocall.abi0 /mnt/d/file/gofile/gogit/go1/src/runtime/asm_amd64.s:918\r\n\r\n            SUMMARY: MemorySanitizer: use-of-uninitialized-value (/tmp/TestMSAN1734687677996663673/msan8+0x5062b8) (BuildId: 519103c2e3c209c99d8a9bb8f9d7cf2065339178) in msanGoLoop\r\n            Exiting\r\nFAIL\r\nFAIL    cmd/cgo/internal/testsanitizers 32.323s\r\nFAIL\r\n```","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/mnt/d/file/gofile/gogit/go1'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/mnt/d/file/gofile/gogit/go1/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='clang'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/mnt/d/file/gofile/gogit/go1/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build9589947017406823330=/tmp/go-build -gno-record-gcc-switches'\r\nGOROOT/bin/go version: go version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version devel go1.22-78b42a5338a Fri Dec 8 03:28:17 2023 +0000\r\nuname -sr: Linux 5.15.133.1-microsoft-standard-WSL2\r\nDistributor ID: Kali\r\nDescription:    Kali GNU/Linux Rolling\r\nRelease:        2023.4\r\nCodename:       kali-rolling\r\n/lib/x86_64-linux-gnu/libc.so.6: GNU C Library (Debian GLIBC 2.37-12) stable release version 2.37.\n"
64611,"all: add internal/asan and internal/msan packagesThere are a couple issues where having asan/msan enabled throw off tests for memory allocations, see https://github.com/golang/go/issues/64257 and https://github.com/golang/go/issues/64256.\r\n\r\nMost tests already skip these memory allocation assertions when they detect that `race` is enabled, but such functionality is not exposed for asan and msan.\r\n\r\nHere is one example of such test:\r\n\r\n\r\n\r\nOne alternative is using the `asan` and `msan` build tags to skip certain tests, but that does not work in the middle of a test, only for entire files.\r\n\r\nThere is `runtime.msanenabled`, `runtime.asanenabled`, `syscall.asanenabled` we could use, but they are private to their respective packages.\r\n\r\nIt is worth noting that syscall and runtime duplicate some code related to asan:\r\n- syscall has asanenabled, asanRead, asanWrite that basically call into the runtime.\r\n- runtime has asanenabled as well\r\n\r\nI propose we create `internal/asan` and `internal/msan` packages akin to `internal/race`. Then syscall and runtime would call `internal/asan.Enabled` and syscall could use `ASanRead`, `ASanWrite` as well, without having this logic duplicated.\r\n\r\nThe tests can also use `internal/asan.Enabled` to check if they should skip tests that allocate memory, which most tests already do currently by checking `race.Enabled`. We can also use these inside `testenv.SkipIfOptimizationOff/testenv.OptimizationOff` to make this process more seamless.\r\n\r\nHere is the proposed apis for these new internal packages:\r\n\r\n## internal/asan\r\n\r\n\r\n\r\n> The !asan version would have stubs for these functions.\r\n\r\n## internal/msan\r\n\r\nThe only place that uses msan currently is the runtime, but having access to a msan.Enabled would be useful in tests as well and would make a good trio with `internal/asan` and `internal/race`. Other packages might be able to use the exported functions more easily as well.\r\n\r\nThe proposed api for internal/msan would then be:\r\n\r\n\r\n\r\n> The !msan version would have stubs for these functions.",NeedsFix|compiler/runtime,mauri870,"There are a couple issues where having asan/msan enabled throw off tests for memory allocations, see https://github.com/golang/go/issues/64257 and https://github.com/golang/go/issues/64256.\r\n\r\nMost tests already skip these memory allocation assertions when they detect that `race` is enabled, but such functionality is not exposed for asan and msan.\r\n\r\nHere is one example of such test:\r\n\r\n```go\r\nif n := testing.AllocsPerRun(100, func() { Grow(s2, cap(s2)-len(s2)+1) }); n != 1 {\r\n    errorf := t.Errorf\r\n    if race.Enabled || testenv.OptimizationOff() {\r\n        errorf = t.Logf // this allocates multiple times with race or msan enabled\r\n    }\r\n    errorf(""Grow should allocate once when given insufficient capacity; allocated %v times"", n)\r\n}\r\n```\r\n\r\nOne alternative is using the `asan` and `msan` build tags to skip certain tests, but that does not work in the middle of a test, only for entire files.\r\n\r\nThere is `runtime.msanenabled`, `runtime.asanenabled`, `syscall.asanenabled` we could use, but they are private to their respective packages.\r\n\r\nIt is worth noting that syscall and runtime duplicate some code related to asan:\r\n- syscall has asanenabled, asanRead, asanWrite that basically call into the runtime.\r\n- runtime has asanenabled as well\r\n\r\nI propose we create `internal/asan` and `internal/msan` packages akin to `internal/race`. Then syscall and runtime would call `internal/asan.Enabled` and syscall could use `ASanRead`, `ASanWrite` as well, without having this logic duplicated.\r\n\r\nThe tests can also use `internal/asan.Enabled` to check if they should skip tests that allocate memory, which most tests already do currently by checking `race.Enabled`. We can also use these inside `testenv.SkipIfOptimizationOff/testenv.OptimizationOff` to make this process more seamless.\r\n\r\nHere is the proposed apis for these new internal packages:\r\n\r\n## internal/asan\r\n\r\n```go\r\n//go:build asan\r\n\r\npackage asan\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nconst Enabled = true\r\n\r\nfunc Read(addr unsafe.Pointer, len int)\r\nfunc Write(addr unsafe.Pointer, len int)\r\n```\r\n\r\n> The !asan version would have stubs for these functions.\r\n\r\n## internal/msan\r\n\r\nThe only place that uses msan currently is the runtime, but having access to a msan.Enabled would be useful in tests as well and would make a good trio with `internal/asan` and `internal/race`. Other packages might be able to use the exported functions more easily as well.\r\n\r\nThe proposed api for internal/msan would then be:\r\n\r\n```go\r\n//go:build msan\r\n\r\npackage msan\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nconst Enabled = true\r\n\r\nfunc Read(addr unsafe.Pointer, sz uintptr)\r\nfunc Write(addr unsafe.Pointer, sz uintptr)\r\nfunc Malloc(addr unsafe.Pointer, sz uintptr)\r\nfunc Free(addr unsafe.Pointer, sz uintptr)\r\nfunc Move(dst, src unsafe.Pointer, sz uintptr)\r\n```\r\n\r\n> The !msan version would have stubs for these functions.","go\r\nif n := testing.AllocsPerRun(100, func() { Grow(s2, cap(s2)-len(s2)+1) }); n != 1 {\r\n    errorf := t.Errorf\r\n    if race.Enabled || testenv.OptimizationOff() {\r\n        errorf = t.Logf // this allocates multiple times with race or msan enabled\r\n    }\r\n    errorf(""Grow should allocate once when given insufficient capacity; allocated %v times"", n)\r\n}\r\n"
64608,"x/tools/go/packages: publish DriverRequest, DriverResponse### Proposal Details\r\n\r\nAccording to https://github.com/golang/go/issues/34341#issuecomment-547022802, the lack of public documentation on GOPACKAGESDRIVER is merely an oversight, that I plan to fix in https://go.dev/cl/547977. Internal documentation was added in CL https://go.dev/cl/184943, but the Go types that define the JSON protocol are unexported, meaning users must copy them (e.g. here https://github.com/bazelbuild/rules_go/wiki/Editor-and-tool-integration)\r\n\r\nI propose to export them by capitalizing their names and tidying their documentation:\r\n\r\n\r\n\r\n**Note**: the current internal documentation and behavior support both `os.Getenv(""GOPACKAGESDRIVER"")` and `os.LookPath(""gopackagesdriver"")` as ways of locating the driver. I'm not convinced that the latter mechanism is desirable (though it may be in current use within Google for Blaze; I should check) and I propose that we drop it.\r\n\r\n\r\n",Proposal|Proposal-Accepted|Tools,adonovan,"### Proposal Details\r\n\r\nAccording to https://github.com/golang/go/issues/34341#issuecomment-547022802, the lack of public documentation on GOPACKAGESDRIVER is merely an oversight, that I plan to fix in https://go.dev/cl/547977. Internal documentation was added in CL https://go.dev/cl/184943, but the Go types that define the JSON protocol are unexported, meaning users must copy them (e.g. here https://github.com/bazelbuild/rules_go/wiki/Editor-and-tool-integration)\r\n\r\nI propose to export them by capitalizing their names and tidying their documentation:\r\n\r\n```go\r\n// The Driver Protocol\r\n//\r\n// The driver, given the inputs to a call to Load, returns metadata about the packages specified.\r\n// This allows for different build systems to support go/packages by telling go/packages how the\r\n// packages' source is organized.\r\n// The driver is an executable specified by the GOPACKAGESDRIVER environment variable.\r\n// It's given the inputs to load in its argv. See the package\r\n// documentation in doc.go for the full description of the patterns that need to be supported.\r\n// A driver receives as a JSON-serialized driverRequest struct in standard input and will\r\n// produce a JSON-serialized driverResponse (see definition in packages.go) in its standard output.\r\n\r\n// DriverRequest is used to provide the portion of Load's Config that is needed by a driver.\r\ntype DriverRequest struct {\r\n\tMode LoadMode `json:""mode""`\r\n\t// Env specifies the environment the underlying build system should be run in.\r\n\tEnv []string `json:""env""`\r\n\t// BuildFlags are flags that should be passed to the underlying build system.\r\n\tBuildFlags []string `json:""build_flags""`\r\n\t// Tests specifies whether the patterns should also return test packages.\r\n\tTests bool `json:""tests""`\r\n\t// Overlay maps file paths (relative to the driver's working directory) to the byte contents\r\n\t// of overlay files.\r\n\tOverlay map[string][]byte `json:""overlay""`\r\n}\r\n\r\n// DriverResponse contains the results for a driver query.\r\ntype DriverResponse struct {\r\n\t// NotHandled is returned if the request can't be handled by the current\r\n\t// driver. If an external driver returns a response with NotHandled, the\r\n\t// rest of the driverResponse is ignored, and go/packages will fallback\r\n\t// to the next driver. If go/packages is extended in the future to support\r\n\t// lists of multiple drivers, go/packages will fall back to the next driver.\r\n\tNotHandled bool\r\n\r\n\t// Compiler and Arch are the arguments pass of types.SizesFor\r\n\t// to get a types.Sizes to use when type checking.\r\n\tCompiler string\r\n\tArch     string\r\n\r\n\t// Roots is the set of package IDs that make up the root packages.\r\n\t// We have to encode this separately because when we encode a single package\r\n\t// we cannot know if it is one of the roots as that requires knowledge of the\r\n\t// graph it is part of.\r\n\tRoots []string `json:"",omitempty""`\r\n\r\n\t// Packages is the full set of packages in the graph.\r\n\t// The packages are not connected into a graph.\r\n\t// The Imports if populated will be stubs that only have their ID set.\r\n\t// Imports will be connected and then type and syntax information added in a\r\n\t// later pass (see refine).\r\n\tPackages []*Package\r\n\r\n\t// GoVersion is the minor version number used by the driver\r\n\t// (e.g. the go command on the PATH) when selecting .go files.\r\n\t// Zero means unknown.\r\n\tGoVersion int\r\n}\r\n```\r\n\r\n**Note**: the current internal documentation and behavior support both `os.Getenv(""GOPACKAGESDRIVER"")` and `os.LookPath(""gopackagesdriver"")` as ways of locating the driver. I'm not convinced that the latter mechanism is desirable (though it may be in current use within Google for Blaze; I should check) and I propose that we drop it.\r\n\r\n\r\n","go\r\n// The Driver Protocol\r\n//\r\n// The driver, given the inputs to a call to Load, returns metadata about the packages specified.\r\n// This allows for different build systems to support go/packages by telling go/packages how the\r\n// packages' source is organized.\r\n// The driver is an executable specified by the GOPACKAGESDRIVER environment variable.\r\n// It's given the inputs to load in its argv. See the package\r\n// documentation in doc.go for the full description of the patterns that need to be supported.\r\n// A driver receives as a JSON-serialized driverRequest struct in standard input and will\r\n// produce a JSON-serialized driverResponse (see definition in packages.go) in its standard output.\r\n\r\n// DriverRequest is used to provide the portion of Load's Config that is needed by a driver.\r\ntype DriverRequest struct {\r\n\tMode LoadMode `json:""mode""`\r\n\t// Env specifies the environment the underlying build system should be run in.\r\n\tEnv []string `json:""env""`\r\n\t// BuildFlags are flags that should be passed to the underlying build system.\r\n\tBuildFlags []string `json:""build_flags""`\r\n\t// Tests specifies whether the patterns should also return test packages.\r\n\tTests bool `json:""tests""`\r\n\t// Overlay maps file paths (relative to the driver's working directory) to the byte contents\r\n\t// of overlay files.\r\n\tOverlay map[string][]byte `json:""overlay""`\r\n}\r\n\r\n// DriverResponse contains the results for a driver query.\r\ntype DriverResponse struct {\r\n\t// NotHandled is returned if the request can't be handled by the current\r\n\t// driver. If an external driver returns a response with NotHandled, the\r\n\t// rest of the driverResponse is ignored, and go/packages will fallback\r\n\t// to the next driver. If go/packages is extended in the future to support\r\n\t// lists of multiple drivers, go/packages will fall back to the next driver.\r\n\tNotHandled bool\r\n\r\n\t// Compiler and Arch are the arguments pass of types.SizesFor\r\n\t// to get a types.Sizes to use when type checking.\r\n\tCompiler string\r\n\tArch     string\r\n\r\n\t// Roots is the set of package IDs that make up the root packages.\r\n\t// We have to encode this separately because when we encode a single package\r\n\t// we cannot know if it is one of the roots as that requires knowledge of the\r\n\t// graph it is part of.\r\n\tRoots []string `json:"",omitempty""`\r\n\r\n\t// Packages is the full set of packages in the graph.\r\n\t// The packages are not connected into a graph.\r\n\t// The Imports if populated will be stubs that only have their ID set.\r\n\t// Imports will be connected and then type and syntax information added in a\r\n\t// later pass (see refine).\r\n\tPackages []*Package\r\n\r\n\t// GoVersion is the minor version number used by the driver\r\n\t// (e.g. the go command on the PATH) when selecting .go files.\r\n\t// Zero means unknown.\r\n\tGoVersion int\r\n}\r\n"
64606,"cmd/compile: compiler error when building a binary with race detector enabled### Go version\n\ngo version devel go1.22-bb34112d4d Thu Dec 7 17:27:54 2023 +0000 darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nI have the following code:\r\n`main.go`:\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""errors""\r\n\t""fmt""\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n\r\n// ToFloat64 tries to convert an interface to int64\r\n// it returns 0, error if failed\r\nfunc ToFloat64(o interface{}) (float64, error) {\r\n\tswitch v := o.(type) {\r\n\tcase int:\r\n\t\treturn float64(v), nil\r\n\tcase int8:\r\n\t\treturn float64(v), nil\r\n\tcase int16:\r\n\t\treturn float64(v), nil\r\n\tcase int32:\r\n\t\treturn float64(v), nil\r\n\tcase int64:\r\n\t\treturn float64(v), nil\r\n\tcase float32:\r\n\t\treturn float64(v), nil\r\n\tcase float64:\r\n\t\treturn float64(v), nil\r\n\tdefault:\r\n\t\treturn float64(0), errors.New(""Failed to convert to float64"")\r\n\t}\r\n}\r\n\r\nfunc someFunc() {\r\n\tvalue, err := ToFloat64(int64(5))\r\n\tfmt.Println(value, err)\r\n\r\n\tvalue, err = ToFloat64(uint64(5))\r\n\tfmt.Println(value, err)\r\n}\r\n```\r\n\r\nAnd I tried to build it with the following command:\r\n```\r\n~/go/src/github.com/golang/go/bin/go build -gcflags=-race .\r\n```\n\n### What did you expect to see?\n\nI expect the compilation to succeed. (succeeds in go1.21)\n\n### What did you see instead?\n\nI see an internal compiler error with the following trace:\r\n```\r\n./main.go:36:25: internal compiler error: 'someFunc': inconsistent state, num predecessors: 7, num phi args: 7\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x474ef8?, 0x140?}, {0x140005bf400, 0x40}, {0x14000627980, 0x3, 0x3})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x5fedc0?, 0x140?}, {0x10566599b, 0x3a}, {0x140005fedc0, 0x2, 0x14000474f78?})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/ssa.go:8225 +0x150\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0x140005da340, {0x10566599b, 0x3a}, {0x140005fedc0, 0x2, 0x2})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/func.go:742 +0x25c\r\ncmd/compile/internal/ssa.(*Block).Fatalf(...)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/block.go:405\r\ncmd/compile/internal/ssa.(*Block).removePhiArg(0x1400053bf50, 0x1400050e5b0, 0x4)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/block.go:342 +0xe0\r\ncmd/compile/internal/ssa.(*Block).removeEdge(0x14000622bb0?, 0x6?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/deadcode.go:331 +0x290\r\ncmd/compile/internal/ssa.deadcode(0x140005da340)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/deadcode.go:181 +0x1614\r\ncmd/compile/internal/ssa.Compile(0x140005da340)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/compile.go:97 +0x94c\r\ncmd/compile/internal/ssagen.buildssa(0x14000470c60, 0x0)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2150\r\ncmd/compile/internal/ssagen.Compile(0x14000470c60, 0x0)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x1?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:182 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x4?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:136 +0x28\r\ncmd/compile/internal/gc.compileFunctions.func5({0x140005fe920, 0x3, 0x1058874a0?})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:181 +0x60\r\ncmd/compile/internal/gc.compileFunctions()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:192 +0x1f4\r\ncmd/compile/internal/gc.Main(0x105887330)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/main.go:303 +0x1274\r\nmain.main()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/main.go:57 +0x110\r\n```",compiler/runtime,randall77,"### Go version\n\ngo version devel go1.22-bb34112d4d Thu Dec 7 17:27:54 2023 +0000 darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/taiwon/Library/Caches/go-build'\r\nGOENV='/Users/taiwon/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/taiwon/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/taiwon/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/taiwon/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/taiwon/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-bb34112d4d Thu Dec 7 17:27:54 2023 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/taiwon/go/src/github.com/tchung1118/test-app/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t0/jhcv48q51ydbyzqn85y8rsgm0000gn/T/go-build3626636808373952552=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\nI have the following code:\r\n`main.go`:\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""errors""\r\n\t""fmt""\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n\r\n// ToFloat64 tries to convert an interface to int64\r\n// it returns 0, error if failed\r\nfunc ToFloat64(o interface{}) (float64, error) {\r\n\tswitch v := o.(type) {\r\n\tcase int:\r\n\t\treturn float64(v), nil\r\n\tcase int8:\r\n\t\treturn float64(v), nil\r\n\tcase int16:\r\n\t\treturn float64(v), nil\r\n\tcase int32:\r\n\t\treturn float64(v), nil\r\n\tcase int64:\r\n\t\treturn float64(v), nil\r\n\tcase float32:\r\n\t\treturn float64(v), nil\r\n\tcase float64:\r\n\t\treturn float64(v), nil\r\n\tdefault:\r\n\t\treturn float64(0), errors.New(""Failed to convert to float64"")\r\n\t}\r\n}\r\n\r\nfunc someFunc() {\r\n\tvalue, err := ToFloat64(int64(5))\r\n\tfmt.Println(value, err)\r\n\r\n\tvalue, err = ToFloat64(uint64(5))\r\n\tfmt.Println(value, err)\r\n}\r\n```\r\n\r\nAnd I tried to build it with the following command:\r\n```\r\n~/go/src/github.com/golang/go/bin/go build -gcflags=-race .\r\n```\n\n### What did you expect to see?\n\nI expect the compilation to succeed. (succeeds in go1.21)\n\n### What did you see instead?\n\nI see an internal compiler error with the following trace:\r\n```\r\n./main.go:36:25: internal compiler error: 'someFunc': inconsistent state, num predecessors: 7, num phi args: 7\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x474ef8?, 0x140?}, {0x140005bf400, 0x40}, {0x14000627980, 0x3, 0x3})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/base/print.go:225 +0x1fc\r\ncmd/compile/internal/base.Fatalf(...)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x5fedc0?, 0x140?}, {0x10566599b, 0x3a}, {0x140005fedc0, 0x2, 0x14000474f78?})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/ssa.go:8225 +0x150\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0x140005da340, {0x10566599b, 0x3a}, {0x140005fedc0, 0x2, 0x2})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/func.go:742 +0x25c\r\ncmd/compile/internal/ssa.(*Block).Fatalf(...)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/block.go:405\r\ncmd/compile/internal/ssa.(*Block).removePhiArg(0x1400053bf50, 0x1400050e5b0, 0x4)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/block.go:342 +0xe0\r\ncmd/compile/internal/ssa.(*Block).removeEdge(0x14000622bb0?, 0x6?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/deadcode.go:331 +0x290\r\ncmd/compile/internal/ssa.deadcode(0x140005da340)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/deadcode.go:181 +0x1614\r\ncmd/compile/internal/ssa.Compile(0x140005da340)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssa/compile.go:97 +0x94c\r\ncmd/compile/internal/ssagen.buildssa(0x14000470c60, 0x0)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/ssa.go:575 +0x2150\r\ncmd/compile/internal/ssagen.Compile(0x14000470c60, 0x0)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x1?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:182 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x4?)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:136 +0x28\r\ncmd/compile/internal/gc.compileFunctions.func5({0x140005fe920, 0x3, 0x1058874a0?})\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:181 +0x60\r\ncmd/compile/internal/gc.compileFunctions()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/compile.go:192 +0x1f4\r\ncmd/compile/internal/gc.Main(0x105887330)\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/internal/gc/main.go:303 +0x1274\r\nmain.main()\r\n        /Users/taiwon/go/src/github.com/golang/go/src/cmd/compile/main.go:57 +0x110\r\n```","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/taiwon/Library/Caches/go-build'\r\nGOENV='/Users/taiwon/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/taiwon/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/taiwon/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/taiwon/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/taiwon/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-bb34112d4d Thu Dec 7 17:27:54 2023 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/taiwon/go/src/github.com/tchung1118/test-app/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t0/jhcv48q51ydbyzqn85y8rsgm0000gn/T/go-build3626636808373952552=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
64605,"os,runtime: opening long file paths sometimes fails with `The system cannot find the path specified.` as of CL 516860```\r\n#!watchflakes\r\npost <- goos == ""windows"" &&\r\n\tdate > ""2023-12-04"" && date < ""2023-12-12"" &&\r\n\tlog ~ `The system cannot find the path specified` &&\r\n\t!(builder ~ `(gotip|go1\\.\\d\\d)-` && date < ""2024-01-18"")\r\n```\r\n\r\n### Go version\r\n\r\nc29444ef39a44ad56ddf7b3d2aa8a51df1163e04\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://build.golang.org/log/d77c2ea8c5ed710eb7a76b9d0c6ed83e8b65e5fc\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--- FAIL: TestScript (0.12s)\r\n    --- FAIL: TestScript/test_fuzz_modcache (13.49s)\r\n        script_test.go:132: 2023-12-05T21:04:42Z\r\n        script_test.go:134: $WORK=C:\\Users\\gopher\\AppData\\Local\\Temp\\1\\cmd-go-test-9713788392318907168\\tmpdir12776654638447559520\\test_fuzz_modcache13542576291626009554\r\n        script_test.go:156: \r\n            # This test demonstrates the fuzz corpus behavior for packages outside of the main module.\r\n            # (See https://golang.org/issue/48495.) (0.000s)\r\n            # Set -modcacherw so that the test behaves the same regardless of whether the\r\n            # module cache is writable. (For example, on some platforms it can always be\r\n            # written if the user is running as root.) At one point, a failing fuzz test\r\n            # in a writable module cache would corrupt module checksums in the cache. (0.000s)\r\n            # When the upstream module has no test corpus, running 'go test' should succeed,\r\n            # but 'go test -fuzz=.' should error out before running the test.\r\n            # (It should NOT corrupt the module cache by writing out new fuzz inputs,\r\n            # even if the cache is writable.) (9.233s)\r\n            # If the module does include a test corpus, 'go test' (without '-fuzz') should\r\n            # load that corpus and run the fuzz tests against it, but 'go test -fuzz=.'\r\n            # should continue to be rejected. (3.732s)\r\n            > go get -t example.com/fuzzfail@v0.2.0\r\n            [stderr]\r\n            go: downloading example.com/fuzzfail v0.2.0\r\n            go: upgraded example.com/fuzzfail v0.1.0 => v0.2.0\r\n            > ! go test example.com/fuzzfail\r\n            [stdout]\r\n            --- FAIL: FuzzFail (0.00s)\r\n                fuzzfail_test.go:6: failed to read corpus file: open testdata\\fuzz\\FuzzFail\\bbb0c2d22aa1a24617301566dc7486f8b625d38024603ba62757c1124013b49a: The system cannot find the path specified.\r\n            FAIL\r\n            FAIL\texample.com/fuzzfail\t0.030s\r\n            FAIL\r\n            [exit status 1]\r\n            > stdout '^\\s*fuzzfail_test\\.go:7: oops:'\r\n        script_test.go:156: FAIL: testdata\\script\\test_fuzz_modcache.txt:35: stdout '^\\s*fuzzfail_test\\.go:7: oops:': no match for `(?m)^\\s*fuzzfail_test\\.go:7: oops:` in stdout\r\n```\r\n\r\nThis failure mode is consistent across test runs, and only occurs on Windows.\r\nIt started as of https://go.dev/cl/516860, but I have no idea how that change could be causing that failure mode.\r\n\r\nThe error message comes from here:\r\nhttps://cs.opensource.google/go/go/+/master:src/internal/fuzz/fuzz.go;l=998;drc=14ab998f95b53baa6e336c598b0f34e319cc9717",OS-Windows|NeedsFix|release-blocker|compiler/runtime|FixPending,rsc,"```\r\n#!watchflakes\r\npost <- goos == ""windows"" &&\r\n\tdate > ""2023-12-04"" && date < ""2023-12-12"" &&\r\n\tlog ~ `The system cannot find the path specified` &&\r\n\t!(builder ~ `(gotip|go1\\.\\d\\d)-` && date < ""2024-01-18"")\r\n```\r\n\r\n### Go version\r\n\r\nc29444ef39a44ad56ddf7b3d2aa8a51df1163e04\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nwindows-amd64-longtest at c29444ef39a44ad56ddf7b3d2aa8a51df1163e04\r\n\r\n:: Running C:\\workdir\\go\\src\\make.bat with args [""C:\\\\workdir\\\\go\\\\src\\\\make.bat"" ""-force""] and env [""GOBUILDEXIT=1"" ""=C:=C:\\\\golang"" ""ALLUSERSPROFILE=C:\\\\ProgramData"" ""APPDATA=C:\\\\Users\\\\gopher\\\\AppData\\\\Roaming"" ""CommonProgramFiles=C:\\\\Program Files\\\\Common Files"" ""CommonProgramFiles(x86)=C:\\\\Program Files (x86)\\\\Common Files"" ""CommonProgramW6432=C:\\\\Program Files\\\\Common Files"" ""COMPUTERNAME=GOLANG-BUILDLET"" ""ComSpec=C:\\\\Windows\\\\system32\\\\cmd.exe"" ""GooGetRoot=C:\\\\ProgramData\\\\GooGet"" ""HOMEDRIVE=C:"" ""HOMEPATH=\\\\Users\\\\gopher"" ""LOCALAPPDATA=C:\\\\Users\\\\gopher\\\\AppData\\\\Local"" ""LOGONSERVER=\\\\\\\\GOLANG-BUILDLET"" ""NUMBER_OF_PROCESSORS=16"" ""OS=Windows_NT"" ""PATH=C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\ProgramData\\\\GooGet;C:\\\\Program Files\\\\Google\\\\Compute Engine\\\\metadata_scripts;C:\\\\Program Files (x86)\\\\Google\\\\Cloud SDK\\\\google-cloud-sdk\\\\bin;C:\\\\Program Files\\\\PowerShell\\\\7\\\\;C:\\\\Program Files\\\\Google\\\\Compute Engine\\\\sysprep;C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;;C:\\\\godep\\\\gcc64\\\\bin"" ""PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"" ""POWERSHELL_DISTRIBUTION_CHANNEL=MSI:Windows Server 2016 Datacenter"" ""PROCESSOR_ARCHITECTURE=AMD64"" ""PROCESSOR_IDENTIFIER=AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD"" ""PROCESSOR_LEVEL=23"" ""PROCESSOR_REVISION=3100"" ""ProgramData=C:\\\\ProgramData"" ""ProgramFiles=C:\\\\Program Files"" ""ProgramFiles(x86)=C:\\\\Program Files (x86)"" ""ProgramW6432=C:\\\\Program Files"" ""PROMPT=$P$G"" ""PSModulePath=C:\\\\Program Files (x86)\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules;C:\\\\Program Files (x86)\\\\Google\\\\Cloud SDK\\\\google-cloud-sdk\\\\platform\\\\PowerShell"" ""PUBLIC=C:\\\\Users\\\\Public"" ""SESSIONNAME=Console"" ""SystemDrive=C:"" ""SystemRoot=C:\\\\Windows"" ""TEMP=C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Temp\\\\1"" ""TMP=C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Temp\\\\1"" ""USERDOMAIN=GOLANG-BUILDLET"" ""USERDOMAIN_ROAMINGPROFILE=GOLANG-BUILDLET"" ""USERNAME=gopher"" ""USERPROFILE=C:\\\\Users\\\\gopher"" ""windir=C:\\\\Windows"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=300ms"" ""WORKDIR=C:\\\\workdir"" ""GOROOT_BOOTSTRAP=C:\\\\workdir\\\\go1.4"" ""GO_BUILDER_NAME=windows-amd64-longtest"" ""GO_TEST_SHORT=0"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOBIN="" ""TMPDIR=C:\\\\workdir\\\\tmp"" ""GOCACHE=C:\\\\workdir\\\\gocache"" ""GOPLSCACHE=C:\\\\workdir\\\\goplscache"" ""PWD=C:\\\\workdir\\\\go\\\\src""] in dir C:\\workdir\\go\\src\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://build.golang.org/log/d77c2ea8c5ed710eb7a76b9d0c6ed83e8b65e5fc\r\n\r\n### What did you expect to see?\r\n\r\nAll tests passing.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--- FAIL: TestScript (0.12s)\r\n    --- FAIL: TestScript/test_fuzz_modcache (13.49s)\r\n        script_test.go:132: 2023-12-05T21:04:42Z\r\n        script_test.go:134: $WORK=C:\\Users\\gopher\\AppData\\Local\\Temp\\1\\cmd-go-test-9713788392318907168\\tmpdir12776654638447559520\\test_fuzz_modcache13542576291626009554\r\n        script_test.go:156: \r\n            # This test demonstrates the fuzz corpus behavior for packages outside of the main module.\r\n            # (See https://golang.org/issue/48495.) (0.000s)\r\n            # Set -modcacherw so that the test behaves the same regardless of whether the\r\n            # module cache is writable. (For example, on some platforms it can always be\r\n            # written if the user is running as root.) At one point, a failing fuzz test\r\n            # in a writable module cache would corrupt module checksums in the cache. (0.000s)\r\n            # When the upstream module has no test corpus, running 'go test' should succeed,\r\n            # but 'go test -fuzz=.' should error out before running the test.\r\n            # (It should NOT corrupt the module cache by writing out new fuzz inputs,\r\n            # even if the cache is writable.) (9.233s)\r\n            # If the module does include a test corpus, 'go test' (without '-fuzz') should\r\n            # load that corpus and run the fuzz tests against it, but 'go test -fuzz=.'\r\n            # should continue to be rejected. (3.732s)\r\n            > go get -t example.com/fuzzfail@v0.2.0\r\n            [stderr]\r\n            go: downloading example.com/fuzzfail v0.2.0\r\n            go: upgraded example.com/fuzzfail v0.1.0 => v0.2.0\r\n            > ! go test example.com/fuzzfail\r\n            [stdout]\r\n            --- FAIL: FuzzFail (0.00s)\r\n                fuzzfail_test.go:6: failed to read corpus file: open testdata\\fuzz\\FuzzFail\\bbb0c2d22aa1a24617301566dc7486f8b625d38024603ba62757c1124013b49a: The system cannot find the path specified.\r\n            FAIL\r\n            FAIL\texample.com/fuzzfail\t0.030s\r\n            FAIL\r\n            [exit status 1]\r\n            > stdout '^\\s*fuzzfail_test\\.go:7: oops:'\r\n        script_test.go:156: FAIL: testdata\\script\\test_fuzz_modcache.txt:35: stdout '^\\s*fuzzfail_test\\.go:7: oops:': no match for `(?m)^\\s*fuzzfail_test\\.go:7: oops:` in stdout\r\n```\r\n\r\nThis failure mode is consistent across test runs, and only occurs on Windows.\r\nIt started as of https://go.dev/cl/516860, but I have no idea how that change could be causing that failure mode.\r\n\r\nThe error message comes from here:\r\nhttps://cs.opensource.google/go/go/+/master:src/internal/fuzz/fuzz.go;l=998;drc=14ab998f95b53baa6e336c598b0f34e319cc9717","shell\r\nwindows-amd64-longtest at c29444ef39a44ad56ddf7b3d2aa8a51df1163e04\r\n\r\n:: Running C:\\workdir\\go\\src\\make.bat with args [""C:\\\\workdir\\\\go\\\\src\\\\make.bat"" ""-force""] and env [""GOBUILDEXIT=1"" ""=C:=C:\\\\golang"" ""ALLUSERSPROFILE=C:\\\\ProgramData"" ""APPDATA=C:\\\\Users\\\\gopher\\\\AppData\\\\Roaming"" ""CommonProgramFiles=C:\\\\Program Files\\\\Common Files"" ""CommonProgramFiles(x86)=C:\\\\Program Files (x86)\\\\Common Files"" ""CommonProgramW6432=C:\\\\Program Files\\\\Common Files"" ""COMPUTERNAME=GOLANG-BUILDLET"" ""ComSpec=C:\\\\Windows\\\\system32\\\\cmd.exe"" ""GooGetRoot=C:\\\\ProgramData\\\\GooGet"" ""HOMEDRIVE=C:"" ""HOMEPATH=\\\\Users\\\\gopher"" ""LOCALAPPDATA=C:\\\\Users\\\\gopher\\\\AppData\\\\Local"" ""LOGONSERVER=\\\\\\\\GOLANG-BUILDLET"" ""NUMBER_OF_PROCESSORS=16"" ""OS=Windows_NT"" ""PATH=C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\ProgramData\\\\GooGet;C:\\\\Program Files\\\\Google\\\\Compute Engine\\\\metadata_scripts;C:\\\\Program Files (x86)\\\\Google\\\\Cloud SDK\\\\google-cloud-sdk\\\\bin;C:\\\\Program Files\\\\PowerShell\\\\7\\\\;C:\\\\Program Files\\\\Google\\\\Compute Engine\\\\sysprep;C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;;C:\\\\godep\\\\gcc64\\\\bin"" ""PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"" ""POWERSHELL_DISTRIBUTION_CHANNEL=MSI:Windows Server 2016 Datacenter"" ""PROCESSOR_ARCHITECTURE=AMD64"" ""PROCESSOR_IDENTIFIER=AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD"" ""PROCESSOR_LEVEL=23"" ""PROCESSOR_REVISION=3100"" ""ProgramData=C:\\\\ProgramData"" ""ProgramFiles=C:\\\\Program Files"" ""ProgramFiles(x86)=C:\\\\Program Files (x86)"" ""ProgramW6432=C:\\\\Program Files"" ""PROMPT=$P$G"" ""PSModulePath=C:\\\\Program Files (x86)\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules;C:\\\\Program Files (x86)\\\\Google\\\\Cloud SDK\\\\google-cloud-sdk\\\\platform\\\\PowerShell"" ""PUBLIC=C:\\\\Users\\\\Public"" ""SESSIONNAME=Console"" ""SystemDrive=C:"" ""SystemRoot=C:\\\\Windows"" ""TEMP=C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Temp\\\\1"" ""TMP=C:\\\\Users\\\\gopher\\\\AppData\\\\Local\\\\Temp\\\\1"" ""USERDOMAIN=GOLANG-BUILDLET"" ""USERDOMAIN_ROAMINGPROFILE=GOLANG-BUILDLET"" ""USERNAME=gopher"" ""USERPROFILE=C:\\\\Users\\\\gopher"" ""windir=C:\\\\Windows"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=300ms"" ""WORKDIR=C:\\\\workdir"" ""GOROOT_BOOTSTRAP=C:\\\\workdir\\\\go1.4"" ""GO_BUILDER_NAME=windows-amd64-longtest"" ""GO_TEST_SHORT=0"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOBIN="" ""TMPDIR=C:\\\\workdir\\\\tmp"" ""GOCACHE=C:\\\\workdir\\\\gocache"" ""GOPLSCACHE=C:\\\\workdir\\\\goplscache"" ""PWD=C:\\\\workdir\\\\go\\\\src""] in dir C:\\workdir\\go\\src\r\n"
64603,"cmd/go: TestScript/get_issue53955 failing on builders with git < 2.32.0### Go version\n\n5e724ccb2b092a6bc294b63c4e33ed1da317ca87\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nhttps://build.golang.org/log/e630401a8d4e84078c48ea93d992d990e1f04868\n\n### What did you expect to see?\n\nPassing tests.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestScript (0.06s)\r\n    --- FAIL: TestScript/get_issue53955 (0.00s)\r\n        script_test.go:132: 2023-12-07T01:41:22Z\r\n        script_test.go:134: $WORK=/workdir/tmp/cmd-go-test-4072317620/tmpdir4236981540/get_issue539551246582874\r\n        script_test.go:156: \r\n            # Regression test for https://go.dev/issue/53955.\r\n            # New remote tags were erroneously added to the local clone of a repo\r\n            # only *after* extracting version information for a locally-cached commit,\r\n            # causing the version information to have incomplete Tags and Version fields. (0.002s)\r\n            > [short] skip 'constructs a local git repo'\r\n            [condition not met]\r\n            > [!git] skip\r\n            [condition not met]\r\n            > [!net:github.com] skip 'does not actually use github.com because of insteadOf, but silence network check just in case'\r\n            [condition not met]\r\n            > env GIT_CONFIG_GLOBAL=$WORK/.gitconfig\r\n            > env GIT_ALLOW_PROTOCOL=file\r\n            > env GOPRIVATE=github.com/golang/issue53955\r\n            > [!GOOS:windows] exec git config --global 'url.file://'$WORK'/repo.insteadOf' 'https://github.com/golang/issue53955'\r\n            [stderr]\r\n            error: could not lock config file /no-home/.gitconfig: No such file or directory\r\n        script_test.go:156: FAIL: testdata/script/get_issue53955.txt:14: exec git config --global url.file:///workdir/tmp/cmd-go-test-4072317620/tmpdir4236981540/get_issue539551246582874/repo.insteadOf https://github.com/golang/issue53955: exit status 255\r\nFAIL\r\nFAIL\tcmd/go\t238.095s\r\n```",Testing|NeedsFix|GoCommand|release-blocker|Soon|FixPending,bcmills,"### Go version\n\n5e724ccb2b092a6bc294b63c4e33ed1da317ca87\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nlinux-386-longtest at 5e724ccb2b092a6bc294b63c4e33ed1da317ca87\r\n\r\n:: Running /workdir/go/src/make.bash with args [""/workdir/go/src/make.bash"" ""-force""] and env [""HOSTNAME=buildlet-linux-amd64-bullseye-rnf881bdb"" ""HOME=/root"" ""SHLVL=0"" ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=linux-386-longtest"" ""GO_TEST_SHORT=0"" ""GOARCH=386"" ""GOHOSTARCH=386"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOBIN="" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PWD=/workdir/go/src""] in dir /workdir/go/src\n```\n\n\n### What did you do?\n\nhttps://build.golang.org/log/e630401a8d4e84078c48ea93d992d990e1f04868\n\n### What did you expect to see?\n\nPassing tests.\n\n### What did you see instead?\n\n```\r\n--- FAIL: TestScript (0.06s)\r\n    --- FAIL: TestScript/get_issue53955 (0.00s)\r\n        script_test.go:132: 2023-12-07T01:41:22Z\r\n        script_test.go:134: $WORK=/workdir/tmp/cmd-go-test-4072317620/tmpdir4236981540/get_issue539551246582874\r\n        script_test.go:156: \r\n            # Regression test for https://go.dev/issue/53955.\r\n            # New remote tags were erroneously added to the local clone of a repo\r\n            # only *after* extracting version information for a locally-cached commit,\r\n            # causing the version information to have incomplete Tags and Version fields. (0.002s)\r\n            > [short] skip 'constructs a local git repo'\r\n            [condition not met]\r\n            > [!git] skip\r\n            [condition not met]\r\n            > [!net:github.com] skip 'does not actually use github.com because of insteadOf, but silence network check just in case'\r\n            [condition not met]\r\n            > env GIT_CONFIG_GLOBAL=$WORK/.gitconfig\r\n            > env GIT_ALLOW_PROTOCOL=file\r\n            > env GOPRIVATE=github.com/golang/issue53955\r\n            > [!GOOS:windows] exec git config --global 'url.file://'$WORK'/repo.insteadOf' 'https://github.com/golang/issue53955'\r\n            [stderr]\r\n            error: could not lock config file /no-home/.gitconfig: No such file or directory\r\n        script_test.go:156: FAIL: testdata/script/get_issue53955.txt:14: exec git config --global url.file:///workdir/tmp/cmd-go-test-4072317620/tmpdir4236981540/get_issue539551246582874/repo.insteadOf https://github.com/golang/issue53955: exit status 255\r\nFAIL\r\nFAIL\tcmd/go\t238.095s\r\n```","shell\nlinux-386-longtest at 5e724ccb2b092a6bc294b63c4e33ed1da317ca87\r\n\r\n:: Running /workdir/go/src/make.bash with args [""/workdir/go/src/make.bash"" ""-force""] and env [""HOSTNAME=buildlet-linux-amd64-bullseye-rnf881bdb"" ""HOME=/root"" ""SHLVL=0"" ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" ""DEBIAN_FRONTEND=noninteractive"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=linux-386-longtest"" ""GO_TEST_SHORT=0"" ""GOARCH=386"" ""GOHOSTARCH=386"" ""GO_TEST_TIMEOUT_SCALE=5"" ""GOBIN="" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PWD=/workdir/go/src""] in dir /workdir/go/src\n"
64583,"cmd/go: TestNewReleaseRebuildsStalePackagesInGOPATH failing### Go version\r\n\r\ntip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nRan the long test builders.\r\n\r\n### What did you expect to see?\r\n\r\nPassing tests\r\n\r\n### What did you see instead?\r\n\r\nAfter the submission of [go.dev/cl/516860](https://go.dev/cl/516860), this failure started happening on the long test builders.\r\n\r\n```\r\nvcs-test.golang.org rerouted to http://127.0.0.1:50422\r\nhttps://vcs-test.golang.org rerouted to https://127.0.0.1:50423\r\ngo test proxy running at GOPROXY=http://127.0.0.1:50424/mod\r\n--- FAIL: TestNewReleaseRebuildsStalePackagesInGOPATH (13.54s)\r\n    go_test.go:953: running testgo [install p1]\r\n    go_test.go:953: standard error:\r\n    go_test.go:953: ../../../../tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/goroot/src/runtime/rand.go:10:2: cannot find package ""internal/chacha8rand"" in any of:\r\n        \t/tmp/buildlet/tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/goroot/src/internal/chacha8rand (from $GOROOT)\r\n        \t/tmp/buildlet/tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/d1/src/internal/chacha8rand (from $GOPATH)\r\n        \r\n    go_test.go:953: go [install p1] failed unexpectedly in /tmp/buildlet/go/src/cmd/go: exit status 1\r\nFAIL\r\nFAIL\tcmd/go\t1824.812s\r\n```\r\n\r\n@golang/release @rsc @bcmills ",Testing|NeedsFix|release-blocker|FixPending,bcmills,"### Go version\r\n\r\ntip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nLong test builders\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nRan the long test builders.\r\n\r\n### What did you expect to see?\r\n\r\nPassing tests\r\n\r\n### What did you see instead?\r\n\r\nAfter the submission of [go.dev/cl/516860](https://go.dev/cl/516860), this failure started happening on the long test builders.\r\n\r\n```\r\nvcs-test.golang.org rerouted to http://127.0.0.1:50422\r\nhttps://vcs-test.golang.org rerouted to https://127.0.0.1:50423\r\ngo test proxy running at GOPROXY=http://127.0.0.1:50424/mod\r\n--- FAIL: TestNewReleaseRebuildsStalePackagesInGOPATH (13.54s)\r\n    go_test.go:953: running testgo [install p1]\r\n    go_test.go:953: standard error:\r\n    go_test.go:953: ../../../../tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/goroot/src/runtime/rand.go:10:2: cannot find package ""internal/chacha8rand"" in any of:\r\n        \t/tmp/buildlet/tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/goroot/src/internal/chacha8rand (from $GOROOT)\r\n        \t/tmp/buildlet/tmp/cmd-go-test-5767483697673610539/gotest11850510197277294159/d1/src/internal/chacha8rand (from $GOPATH)\r\n        \r\n    go_test.go:953: go [install p1] failed unexpectedly in /tmp/buildlet/go/src/cmd/go: exit status 1\r\nFAIL\r\nFAIL\tcmd/go\t1824.812s\r\n```\r\n\r\n@golang/release @rsc @bcmills ",shell\r\nLong test builders\r\n
64577,"x/tools/gopls: panic and crash in golang.org/x/telemetry/internal/counter### gopls version\n\nBuild info ---------- golang.org/x/tools/gopls (devel)     golang.org/x/tools/gopls@(devel)     github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=     github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=     github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=     golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=     golang.org/x/mod@v0.14.0 h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=     golang.org/x/sync@v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=     golang.org/x/sys@v0.14.0 h1:Vz7Qs629MkJkGyHxUlRHizWJRG2j8fbQKjELVSNhy7Q=     golang.org/x/telemetry@v0.0.0-20231114163143-69313e640400 h1:brbkEFfGwNGAEkykUOcryE/JiHUMMJouzE0fWWmz/QU=     golang.org/x/text@v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=     golang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd h1:Oku7E+OCrXHyst1dG1z10etCTxewCHXNFLRlyMPbh3w=     golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=     honnef.co/go/tools@v0.4.5 h1:YGD4H+SuIOOqsyoLOpZDWcieM28W47/zRO7f+9V3nvo=     mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=     mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc= go: go1.21.4\n\n### go env\n\n\n\n\n### What did you do?\n\nI don't remember, sorry.\n\n### What did you expect to see?\n\nNo crash at all.\n\n### What did you see instead?\n\nCrash with message that LSP-client has disconnected, needed to restart it.\n\n### Editor and settings\n\nUsing Neovim v0.9.4 and plugin nvim-lspconfig v0.1.7:\r\n\r\n```lua\r\nlocal function organize_imports(client, bufnr)\r\n  local params = vim.lsp.util.make_range_params(nil, vim.lsp.util._get_offset_encoding())\r\n  params.context = { only = { ""source.organizeImports"" } }\r\n\r\n  local resp = client.request_sync(""textDocument/codeAction"", params, 3000, bufnr)\r\n  for _, r in pairs(resp and resp.result or {}) do\r\n    if r.edit then\r\n      vim.lsp.util.apply_workspace_edit(r.edit, vim.lsp.util._get_offset_encoding())\r\n    else\r\n      vim.lsp.buf.execute_command(r.command)\r\n    end\r\n  end\r\nend\r\n\r\nrequire(""lspconfig"").gopls.setup({\r\n  cmd = { ""gopls"", ""-remote=auto"" },\r\n  filetypes = { ""go"", ""gomod"", ""gowork"", ""gotmpl"", ""gohtmltmpl"", ""gotexttmpl"" },\r\n  settings = {\r\n    gopls = {\r\n      [""build.templateExtensions""] = { ""gohtml"", ""html"", ""gotmpl"", ""tmpl"" },\r\n      [""ui.codelenses""] = {\r\n        run_govulncheck = true,\r\n        vendor = false,\r\n        gc_details = true,\r\n      },\r\n      [""ui.navigation.importShortcut""] = ""Definition"",\r\n      [""ui.semanticTokens""] = true,\r\n      [""diagnostic.vulncheck""] = ""Imports"",\r\n    },\r\n  },\r\n  before_init = function(_, config)\r\n    if vim.fn.executable(""go"") ~= 1 then\r\n      return\r\n    end\r\n\r\n    local module = vim.fn.trim(vim.fn.system(""go list -m""))\r\n    if vim.v.shell_error ~= 0 then\r\n      return\r\n    end\r\n    module = module:gsub(""\\n"", "","")\r\n\r\n    config.settings.gopls[""formatting.local""] = module\r\n  end,\r\n  on_attach = function(client, bufnr)\r\n    on_attach(client, bufnr)\r\n\r\n    vim.api.nvim_create_autocmd(""BufWritePre"", {\r\n      buffer = bufnr,\r\n      callback = function()\r\n        organize_imports(client, bufnr)\r\n        vim.lsp.buf.format()\r\n      end,\r\n    })\r\n  end,\r\n  capabilities = capabilities,\r\n})\r\n```\n\n### Logs\n\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""unexpected fault address 0x12cb880fc\\nfatal error: fault\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""[signal SIGSEGV: segmentation violation code=0x2 addr=0x12cb880fc pc=0x104825f1c]\\n\\ngoroutine 14295 [running]:\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime.throw({0x104eff45f?, 0x14000482df8?})\\n\\truntime/panic.go:1077 +0x40 fp=0x14000482da0 sp=0x14000482d70 pc=0x1046a60a0\\nruntime.sigpanic()\\n\\truntime/signal_unix.go:875 +0x22c fp=0x14000482e00 sp=0x14000482da0 pc=0x1046bdd6c\\nsync/atomic.(*Uint32).Load(...)\\n\\tsync/atomic/type.go:121\\ngolang.org/x/telemetry/internal/counter.(*mappedFile).load32(...)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:526\\ngolang.org/x/telemetry/internal/counter.(*mappedFile).lookup(0x104f342c5?, {0x104f2d720?, 0x14000482ef8?})\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:564 +0x8c fp=0x14000482e50 sp=0x14000482e10 pc=0x104825f1c\\ngolang.org/x/telemetry/internal/counter.(*file).rotate1(0x105992fa0)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:301 +0x354 fp=0x14000482f50 sp=0x14000482e50 pc=0x104824b94\\ngolang.org/x/telemetry/internal/counter.(*file).rotate(0x105992fa0)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:246 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x20 fp=0x14000482fb0 sp=0x14000482f50 pc=0x1048246d0\\ngolang.org/x/telemetry/internal/counter.(*file).rotate-fm()\\n\\t<autogenerated>:1 +0x28 fp=0x14000482fd0 sp=0x14000482fb0 pc=0x104828458\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000482fd0 sp=0x14000482fd0 pc=0x1046dcf74\\ncreated by time.goFunc\\n\\ttime/sleep.go:176 +0x38\\n\\ngoroutine 1 [select, 206 minutes]:\\nruntime.gopark(0x140005fd5d0?, 0x2?, 0xb0?, 0xea?, 0x140005fd524?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140003a73c0 sp=0x140003a73a0 pc=0x1046a8e38\\nruntime.selectgo(0x140003a75d0, 0x140005fd520, 0x140001cf230?, 0x0, 0x140001b5508?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x140003a74d0 sp=0x140003a73c0 pc=0x1046ba038\\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.(*Forwarder).ServeStream(0x140001cf590, {0x1053b1948, 0x140001cf230}, {0x1053b35c8, 0x14000406140?})\\n\\tgolang.org/x/tools/gopls/internal/lsp/lsprpc/lsprpc.go:228 +0x640 fp=0x140003a7650 sp=0x140003a74d0 pc=0x104ee2fb0\\ngolang.org/x/tools/gopls/internal/lsp/cmd.(*Serve).Run(0x14000188040, {0x1053b1948, 0x140001cf230}, {0x140000320b0?, 0x0?, 0x0?})\\n\\tgolang.org/x/tools/gopls/internal/lsp/cmd/serve.go:141 +0x724 fp=0x140003a7850 sp=0x140003a7650 pc=0x104ef56d4\\ngolang.org/x/tools/internal/tool.Run({0x1053b1948, 0x140001cf230}, 0x14000378070, {0x1053b29c0?, 0x14000188040}, {0x140000320b0, 0x0, 0x0})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:192 +0x4f0 fp=0x140003a7ac0 sp=0x140003a7850 pc=0x104d75020\\ngolang.org/x/tools/gopls/internal/lsp/cmd.(*Application).Run(0x14000188000, {0x1053b1910, 0x1059c8e80}, {0x140000320b0?, 0x0, 0x0})\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""golang.org/x/tools/gopls/internal/lsp/cmd/cmd.go:253 +0x140 fp=0x140003a7bb0 sp=0x140003a7ac0 pc=0x104ee8ee0\\ngolang.org/x/tools/internal/tool.Run({0x1053b1910, 0x1059c8e80}, 0x14000378000, {0x1053b2400?, 0x14000188000}, {0x140000320b0, 0x1, 0x1})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:192 +0x4f0 fp=0x140003a7e20 sp=0x140003a7bb0 pc=0x104d75020\\ngolang.org/x/tools/internal/tool.Main({0x1053b1910, 0x1059c8e80}, {0x1053b2400?, 0x14000188000?}, {0x140000320b0, 0x1, 0x1})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:93 +0x104 fp=0x140003a7ee0 sp=0x140003a7e20 pc=0x104d74a04\\nmain.main()\\n\\tgolang.org/x/tools/gopls/main.go:29 +0xa0 fp=0x140003a7f30 sp=0x140003a7ee0 pc=0x104efc6a0\\nruntime.main()\\n\\truntime/proc.go:267 +0x2bc fp=0x140003a7fd0 sp=0x140003a7f30 pc=0x1046a89dc\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003a7fd0 sp=0x140003a7fd0 pc=0x1046dcf74\\n\\ngoroutine 2 [force gc (idle), 12 minutes]:\\nruntime.gopark(0x60631fc075b5?, 0x0?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""398 +0xc8 fp=0x14000070f90 sp=0x14000070f70 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\nruntime.forcegchelper()\\n\\truntime/proc.go:322 +0xb8 fp=0x14000070fd0 sp=0x14000070f90 pc=0x1046a8c98\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000070fd0 sp=0x14000070fd0 pc=0x1046dcf74\\ncreated by runtime.init.6 in goroutine 1\\n\\truntime/proc.go:310 +0x24\\n\\ngoroutine 3 [GC sweep wait]:\\nruntime.gopark(0x105991001?, 0x0?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000071760 sp=0x14000071740 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime.bgsweep(0x0?)\\n\\truntime/mgcsweep.go:321 +0x108 fp=0x140000717b0 sp=0x14000071760 pc=0x104693dc8\\nruntime.gcenable.func1()\\n\\truntime/mgc.go:200 +0x28 fp=0x140000717d0 sp=0x140000717b0 pc=0x104688868\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000717d0 sp=0x140000717d0 pc=0x1046dcf74\\ncreated by runtime.gcenable in goroutine 1\\n\\truntime/mgc.go:200 +0x6c\\n\\ngoroutine 4 [GC scavenge wait]:\\nruntime.gopark(0xec244f?""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"", 0xdb6a84?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000071f50 sp=0x14000071f30 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\nruntime.(*scavengerState).park(0x105993020)\\n\\truntime/mgcscavenge.go:425 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x5c fp=0x14000071f80 sp=0x14000071f50 pc=0x10469160c\\nruntime.bgscavenge(0x0?)\\n\\truntime/mgcscavenge.go:658 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0xac fp=0x14000071fb0 sp=0x14000071f80 pc=0x104691bcc\\nruntime.gcenable.func2()\\n\\truntime/mgc.go:201""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" +0x28 fp=0x14000071fd0 sp=0x14000071fb0 pc=0x104688808\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000071fd0 sp=0x14000071fd0 pc=0x1046dcf74\\ncreated by runtime.gcenable in goroutine 1\\n\\truntime/mgc.go:201 +0xac\\n\\ngoroutine 5""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" [finalizer wait, 206 minutes]:\\nruntime.gopark(0x0?, 0x1053a3e20?, 0x0?, 0x20?, 0x2000000020?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000070580 sp=0x14000070560 pc=0x1046a8e38\\nruntime.runfinq()\\n\\truntime/mfinal.go:193 +0x108 fp=0x140000707d0 sp=0x14000070580 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x104687958\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000707d0 sp=0x140000707d0 pc=0x1046dcf74\\ncreated by runtime.createfing in goroutine 1\\n\\truntime/mfinal.go:163 +0x80\\n\\ngoroutine 107 [GC worker (idle)]:\\nruntime.gopark(0x60f625261d46?, 0x3?, 0x6c?, 0x64?, 0x0?)\\n\\truntime/proc.go:398 +0xc8""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000306730 sp=0x14000306710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140003067d0 sp=0x14000306730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003067d0 sp=0x140003067d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ngoroutine 64 [GC worker (idle)]:\\nruntime.gopark(0x60f625259a17?, 0x1?, 0x21?, 0xaf?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000307f30 sp=0x14000307f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000307fd0 sp=0x14000307f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000307fd0 sp=0x14000307fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 115 [select, 202 minutes]:\\nruntime.gopark(0x140000c3dd8?, 0x2?, 0x18?, 0x3c?, 0x140000c3d7c?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140000c3bd0 sp=0x140000c3bb0 pc=0x1046a8e38""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\nruntime.selectgo(0x140000c3dd8, 0x140000c3d78, 0x102?, 0x0, 0x0?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x140000c3ce0 sp=0x140000c3bd0 pc=0x1046ba038\\ngolang.org/x/tools/gopls/internal/lsp/filecache.gc({0x1400013a030, 0x28})\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:546 +0xbc fp=0x140000c3fb0 sp=0x140000c3ce0 pc=0x104d80afc\\ngolang.org/x/tools/gopls/internal/lsp/filecache.getCacheDir.func1.1()\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:351 +0x2c fp=0x140000c3fd0 sp=0x140000c3fb0 pc=0x104d81bac\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000c3fd0 sp=0x140000c3fd0 pc=0x1046dcf74""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ncreated by golang.org/x/tools/gopls/internal/lsp/filecache.getCacheDir.func1 in goroutine 69\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:351 +0x168\\n\\ngoroutine 114 [GC worker (idle)]:\\nruntime.gopark(0x60f62525ab58?, 0x3?, 0x37?, 0xd0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000309730 sp=0x14000309710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140003097d0 sp=0x14000309730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x140003097d0 sp=0x140003097d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 106 [GC worker (idle)]:\\nruntime.gopark(0x1059ca100?, 0x3?, 0x4b?, 0x2c?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000073730 sp=0x14000073710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140000737d0 sp=0x14000073730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000737d0 sp=0x140000737d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ngoroutine 65 [GC worker (idle)]:\\nruntime.gopark(0x60f62523f81f?, 0x3?, 0xb7?, 0xf?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000309f30 sp=0x14000309f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000309fd0 sp=0x14000309f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000309fd0 sp=0x14000309fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 94 [GC worker (idle)]:\\nruntime.gopark(0x1059ca100?, 0x3?, 0x18?, 0xfd?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000302730 sp=0x14000302710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x140003027d0 sp=0x14000302730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003027d0 sp=0x140003027d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 108 [GC worker (idle)]:\\nruntime.gopark(0x60f6252385b3?, 0x1""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""?, 0xad?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006d730 sp=0x1400006d710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x1400006d7d0 sp=0x1400006d730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006d7d0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" sp=0x1400006d7d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 95 [GC worker (idle)]:\\nruntime.gopark(0x60f6252430ed?, 0x3?, 0xe0?, 0xb2?, 0x0?)\\n\\truntime/proc.go:398 +0xc8""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000302f30 sp=0x14000302f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000302fd0 sp=0x14000302f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000302fd0 sp=0x14000302fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 96 [GC worker (idle)]:\\nruntime.gopark(0x60f62524b540?, 0x3?, 0xf8?, 0x2a?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000303730 sp=0x14000303710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime/mgc.go:1293 +0xd8 fp=0x140003037d0 sp=0x14000303730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003037d0 sp=0x140003037d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 109 [GC worker (idle)""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""]:\\nruntime.gopark(0x60f625242ea5?, 0x3?, 0x66?, 0x65?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006df30 sp=0x1400006df10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x1400006dfd0 sp=0x1400006df30 pc=0x10468a4b8\\nruntime.goexit""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006dfd0 sp=0x1400006dfd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 71 [syscall]:\\nsyscall.syscall(0x14000484dd8?, 0x104719c20?, 0x800000?""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"", 0x7ffff800000?)\\n\\truntime/sys_darwin.go:23 +0x58 fp=0x14000484da0 sp=0x14000484d10 pc=0x1046d9188\\nsyscall.read(0x1400009a060?, {0x14000315000?, 0x2?, 0x14000484f34?})\\n\\tsyscall/zsyscall_darwin_arm64.go:1209 +0x48 fp=0x14000484de0 sp=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x14000484da0 pc=0x1046f11a8\\nsyscall.Read(...)\\n\\tsyscall/syscall_unix.go:181\\ninternal/poll.ignoringEINTRIO(...)\\n\\tinternal/poll/fd_unix.go:736\\ninternal/poll.(*FD).Read(0x1400009a060, {0x14000315000, 0x1000, 0x1000})\\n\\tinternal/poll/fd_unix.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""160 +0x224 fp=0x14000484e80 sp=0x14000484de0 pc=0x104719d74\\nos.(*File).read(...)\\n\\tos/file_posix.go:29\\nos.(*File).Read(0x14000074028, {0x14000315000?, 0x2?, 0x2?})\\n\\tos/file.go:118 +0x70""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000484ec0 sp=0x14000484e80 pc=0x104722a00\\nio.ReadCloser.Read-fm({0x14000315000?, 0x14000484f30?, 0x0?})\\n\\t<autogenerated>:1 +0x44 fp=0x14000484ef0 sp=0x14000484ec0 pc=0x104ee5d04\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).run(0x140001cf5c0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"")\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:121 +0x8c fp=0x14000484fb0 sp=0x14000484ef0 pc=0x104ee59bc\\ngolang.org/x/tools/internal/fakenet.NewConn.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:26 +0x28 fp=0x14000484fd0 sp=0x14000484fb0 pc=0x104ee53b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000484fd0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" sp=0x14000484fd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/fakenet.NewConn in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:26 +0x314\\n\\ngoroutine 72 [select]:\\nruntime.gopark(0x1400006e788?, 0x2?, 0x0?, 0x0?, 0x1400006e734?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006e5e0 sp=0x1400006e5c0 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x1046a8e38\\nruntime.selectgo(0x1400006e788, 0x1400006e730, 0x0?, 0x0, 0x1?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x1400006e6f0 sp=0x1400006e5e0 pc=0x1046ba038\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).run(0x140001cf5f0)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:115 +0x6c fp=0x1400006e7b0 sp=0x1400006e6f0 pc=0x104ee599c\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""golang.org/x/tools/internal/fakenet.NewConn.func2()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:27 +0x28 fp=0x1400006e7d0 sp=0x1400006e7b0 pc=0x104ee5358\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006e7d0 sp=0x1400006e7d0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/fakenet.NewConn in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:27 +0x360\\n\\ngoroutine 146 [""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""IO wait]:\\nruntime.gopark(0xffffffffffffffff?, 0xffffffffffffffff?, 0x23?, 0x0?, 0x1046f2ee0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140006a7800 sp=0x140006a77e0 pc=0x1046a8e38\\nruntime.netpollblock(0x0?, 0x0?, 0x0?)\\n\\truntime/netpoll.go:564 +0x158 fp=0x140006a7840 sp=0x140006a7800 pc=0x1046a2588\\ninternal/poll.runtime_pollWait(""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x12c844e38, 0x72)\\n\\truntime/netpoll.go:343 +0xa0 fp=0x140006a7870 sp=0x140006a7840 pc=0x1046d6930\\ninternal/poll.(*pollDesc).wait(0x14000218000?, 0x14000314000?, 0x0)\\n\\tinternal/poll/fd_poll_runtime.go:84 +0x28 fp=0x140006a78a0 sp=0x140006a7870 pc=0x104718a08\\ninternal/poll.(*pollDesc).waitRead(...)\\n\\tinternal/poll/fd_poll_runtime.go:89\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""internal/poll.(*FD).Read(0x14000218000, {0x14000314000, 0x1000, 0x1000})\\n\\tinternal/poll/fd_unix.go:164 +0x200 fp=0x140006a7940 sp=0x140006a78a0 pc=0x104719d50\\nnet.(*netFD).Read(0x14000218000, {0x14000314000?, 0x140006a79c8?, 0x104683f30?})\\n\\tnet/fd_posix.go:55 +0x28 fp=0x140006a7990 sp=0x140006a7940 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x1047e2558\\nnet.(*conn).Read(0x14000392008, {0x14000314000?, 0x10596da80?, 0x0?})\\n\\tnet/net.go:179 +0x34 fp=0x140006a79e0 sp=0x140006a7990 pc=0x1047ee994\\nnet.(*UnixConn).Read(0x0?, {0x14000314000?, 0x0?, 0x0?})\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""<autogenerated>:1 +0x2c fp=0x140006a7a10 sp=0x140006a79e0 pc=0x10480093c\\nbufio.(*Reader).fill(0x140003f1980)\\n\\tbufio/bufio.go:113 +0xf8 fp=0x140006a7a50 sp=0x140006a7a10 pc=0x104802178\\nbufio.(*Reader).ReadSlice(0x140003f1980, 0x60?)\\n\\tbufio/bufio.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""379 +0x30 fp=0x140006a7aa0 sp=0x140006a7a50 pc=0x104802d90\\nbufio.(*Reader).collectFragments(0x14000516180?, 0x20?)\\n\\tbufio/bufio.go:454 +0x64 fp=0x140006a7b70 sp=0x140006a7aa0 pc=0x104803184\\nbufio.(*Reader).ReadString(0x140006a7cc8?, 0xe8?)\\n\\tbufio/bufio.go:501 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x20 fp=0x140006a7c40 sp=0x140006a7b70 pc=0x104803510\\ngolang.org/x/tools/internal/jsonrpc2.(*headerStream).Read(0x1400039e000, {0x1053b1948, 0x140001cf230})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/stream.go:110 +0xa4 fp=0x140006a7cd0 sp=0x140006a7c40 pc=0x10480a844\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).run(0x1400038c140, {0x1053b1948, 0x140001cf230}, 0x1400039e060)\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:196 +0x84 fp=0x140006a7fa0 sp=0x140006a7cd0 pc=0x1048079e4\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).Go.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0x34 fp=0x140006a7fd0 sp=0x140006a7fa0 pc=0x104807924\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140006a7fd0 sp=0x140006a7fd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/jsonrpc2.(*conn).Go in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0xa8\\n\\ngoroutine 147 [select]:\\nruntime.gopark(0x1400040f9c8?, 0x2?, 0x80?, 0x19?, 0x1400040f984?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400040f830 sp=0x1400040f810 pc=0x1046a8e38\\nruntime.selectgo(0x1400040f9c8, 0x1400040f980, 0x0?, 0x0, 0x10596da60?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x1400040f940 sp=0x1400040f830 pc=0x1046ba038\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).do""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""(...)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:103\\ngolang.org/x/tools/internal/fakenet.(*fakeConn).Read(0x0?, {0x14000315000?, 0x0?, 0x0?})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:67 +0xd4 fp=0x1400040fa10 sp=0x1400040f940 pc=0x104ee5554\\nbufio.(*Reader).fill(0x140002774a0)\\n\\tbufio/bufio.go:113 +0xf8 fp=0x1400040fa50 sp=0x1400040fa10 pc=0x104802178\\nbufio.(*Reader).ReadSlice""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""(0x140002774a0, 0x60?)\\n\\tbufio/bufio.go:379 +0x30 fp=0x1400040faa0 sp=0x1400040fa50 pc=0x104802d90\\nbufio.(*Reader).collectFragments(0x14000128840?, 0x10?)\\n\\tbufio/bufio.go:454 +0x64 fp=0x1400040fb70 sp=0x1400040faa0 pc=0x104803184\\nbufio.(*Reader).ReadString(0x1400040fcc8?, 0xe8?)\\n\\tbufio/bufio.go:501 +0x20 fp=0x1400040fc40 sp=0x1400040fb70 pc=0x104803510\\ngolang.org/x/tools/internal/jsonrpc2.(*headerStream).Read(0x140004e0240, ""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""{0x1053b1948, 0x140001cf230})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/stream.go:110 +0xa4 fp=0x1400040fcd0 sp=0x1400040fc40 pc=0x10480a844\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).run(0x14000406140, {0x1053b1948, 0x140001cf230}, 0x1400039eab0)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:196 +0x84 fp=0x1400040ffa0 sp=0x1400040fcd0 pc=0x1048079e4\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).Go.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0x34 fp=0x1400040ffd0 sp=0x1400040ffa0 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x104807924\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400040ffd0 sp=0x1400040ffd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/jsonrpc2.(*conn).Go in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0xa8\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""gopls: remote disconnected: failed reading header line: EOF\\n""\r\n[START][2023-12-05 19:17:14] LSP logging initiated\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""gopls: remote disconnected: failed reading header line: EOF\\n""",NeedsInvestigation|Soon|gopls|Tools|telemetry,pjweinb,"### gopls version\n\nBuild info ---------- golang.org/x/tools/gopls (devel)     golang.org/x/tools/gopls@(devel)     github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=     github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=     github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=     golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=     golang.org/x/mod@v0.14.0 h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=     golang.org/x/sync@v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=     golang.org/x/sys@v0.14.0 h1:Vz7Qs629MkJkGyHxUlRHizWJRG2j8fbQKjELVSNhy7Q=     golang.org/x/telemetry@v0.0.0-20231114163143-69313e640400 h1:brbkEFfGwNGAEkykUOcryE/JiHUMMJouzE0fWWmz/QU=     golang.org/x/text@v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=     golang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd h1:Oku7E+OCrXHyst1dG1z10etCTxewCHXNFLRlyMPbh3w=     golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=     honnef.co/go/tools@v0.4.5 h1:YGD4H+SuIOOqsyoLOpZDWcieM28W47/zRO7f+9V3nvo=     mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=     mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc= go: go1.21.4\n\n### go env\n\n```shell\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/user/Library/Caches/go-build""\r\nGOENV=""/Users/user/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/user/go/pkg/mod""\r\nGONOPROXY=""<private>"" # removed because of privacy.\r\nGONOSUMDB=""<private>"" # removed because of privacy.\r\nGOOS=""darwin""\r\nGOPATH=""/Users/user/go""\r\nGOPRIVATE=""<private>"" # removed because of privacy.\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.12""\r\nGCCGO=""gccgo""\r\nAR=""llvm-ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/f5/tvc95lsd2tgfjkb489878h_40000gq/T/go-build4031533321=/tmp/go-build -gno-record-gcc-switches -fno-common""\n```\n\n\n### What did you do?\n\nI don't remember, sorry.\n\n### What did you expect to see?\n\nNo crash at all.\n\n### What did you see instead?\n\nCrash with message that LSP-client has disconnected, needed to restart it.\n\n### Editor and settings\n\nUsing Neovim v0.9.4 and plugin nvim-lspconfig v0.1.7:\r\n\r\n```lua\r\nlocal function organize_imports(client, bufnr)\r\n  local params = vim.lsp.util.make_range_params(nil, vim.lsp.util._get_offset_encoding())\r\n  params.context = { only = { ""source.organizeImports"" } }\r\n\r\n  local resp = client.request_sync(""textDocument/codeAction"", params, 3000, bufnr)\r\n  for _, r in pairs(resp and resp.result or {}) do\r\n    if r.edit then\r\n      vim.lsp.util.apply_workspace_edit(r.edit, vim.lsp.util._get_offset_encoding())\r\n    else\r\n      vim.lsp.buf.execute_command(r.command)\r\n    end\r\n  end\r\nend\r\n\r\nrequire(""lspconfig"").gopls.setup({\r\n  cmd = { ""gopls"", ""-remote=auto"" },\r\n  filetypes = { ""go"", ""gomod"", ""gowork"", ""gotmpl"", ""gohtmltmpl"", ""gotexttmpl"" },\r\n  settings = {\r\n    gopls = {\r\n      [""build.templateExtensions""] = { ""gohtml"", ""html"", ""gotmpl"", ""tmpl"" },\r\n      [""ui.codelenses""] = {\r\n        run_govulncheck = true,\r\n        vendor = false,\r\n        gc_details = true,\r\n      },\r\n      [""ui.navigation.importShortcut""] = ""Definition"",\r\n      [""ui.semanticTokens""] = true,\r\n      [""diagnostic.vulncheck""] = ""Imports"",\r\n    },\r\n  },\r\n  before_init = function(_, config)\r\n    if vim.fn.executable(""go"") ~= 1 then\r\n      return\r\n    end\r\n\r\n    local module = vim.fn.trim(vim.fn.system(""go list -m""))\r\n    if vim.v.shell_error ~= 0 then\r\n      return\r\n    end\r\n    module = module:gsub(""\\n"", "","")\r\n\r\n    config.settings.gopls[""formatting.local""] = module\r\n  end,\r\n  on_attach = function(client, bufnr)\r\n    on_attach(client, bufnr)\r\n\r\n    vim.api.nvim_create_autocmd(""BufWritePre"", {\r\n      buffer = bufnr,\r\n      callback = function()\r\n        organize_imports(client, bufnr)\r\n        vim.lsp.buf.format()\r\n      end,\r\n    })\r\n  end,\r\n  capabilities = capabilities,\r\n})\r\n```\n\n### Logs\n\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""unexpected fault address 0x12cb880fc\\nfatal error: fault\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""[signal SIGSEGV: segmentation violation code=0x2 addr=0x12cb880fc pc=0x104825f1c]\\n\\ngoroutine 14295 [running]:\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime.throw({0x104eff45f?, 0x14000482df8?})\\n\\truntime/panic.go:1077 +0x40 fp=0x14000482da0 sp=0x14000482d70 pc=0x1046a60a0\\nruntime.sigpanic()\\n\\truntime/signal_unix.go:875 +0x22c fp=0x14000482e00 sp=0x14000482da0 pc=0x1046bdd6c\\nsync/atomic.(*Uint32).Load(...)\\n\\tsync/atomic/type.go:121\\ngolang.org/x/telemetry/internal/counter.(*mappedFile).load32(...)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:526\\ngolang.org/x/telemetry/internal/counter.(*mappedFile).lookup(0x104f342c5?, {0x104f2d720?, 0x14000482ef8?})\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:564 +0x8c fp=0x14000482e50 sp=0x14000482e10 pc=0x104825f1c\\ngolang.org/x/telemetry/internal/counter.(*file).rotate1(0x105992fa0)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:301 +0x354 fp=0x14000482f50 sp=0x14000482e50 pc=0x104824b94\\ngolang.org/x/telemetry/internal/counter.(*file).rotate(0x105992fa0)\\n\\tgolang.org/x/telemetry@v0.0.0-20231114163143-69313e640400/internal/counter/file.go:246 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x20 fp=0x14000482fb0 sp=0x14000482f50 pc=0x1048246d0\\ngolang.org/x/telemetry/internal/counter.(*file).rotate-fm()\\n\\t<autogenerated>:1 +0x28 fp=0x14000482fd0 sp=0x14000482fb0 pc=0x104828458\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000482fd0 sp=0x14000482fd0 pc=0x1046dcf74\\ncreated by time.goFunc\\n\\ttime/sleep.go:176 +0x38\\n\\ngoroutine 1 [select, 206 minutes]:\\nruntime.gopark(0x140005fd5d0?, 0x2?, 0xb0?, 0xea?, 0x140005fd524?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140003a73c0 sp=0x140003a73a0 pc=0x1046a8e38\\nruntime.selectgo(0x140003a75d0, 0x140005fd520, 0x140001cf230?, 0x0, 0x140001b5508?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x140003a74d0 sp=0x140003a73c0 pc=0x1046ba038\\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.(*Forwarder).ServeStream(0x140001cf590, {0x1053b1948, 0x140001cf230}, {0x1053b35c8, 0x14000406140?})\\n\\tgolang.org/x/tools/gopls/internal/lsp/lsprpc/lsprpc.go:228 +0x640 fp=0x140003a7650 sp=0x140003a74d0 pc=0x104ee2fb0\\ngolang.org/x/tools/gopls/internal/lsp/cmd.(*Serve).Run(0x14000188040, {0x1053b1948, 0x140001cf230}, {0x140000320b0?, 0x0?, 0x0?})\\n\\tgolang.org/x/tools/gopls/internal/lsp/cmd/serve.go:141 +0x724 fp=0x140003a7850 sp=0x140003a7650 pc=0x104ef56d4\\ngolang.org/x/tools/internal/tool.Run({0x1053b1948, 0x140001cf230}, 0x14000378070, {0x1053b29c0?, 0x14000188040}, {0x140000320b0, 0x0, 0x0})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:192 +0x4f0 fp=0x140003a7ac0 sp=0x140003a7850 pc=0x104d75020\\ngolang.org/x/tools/gopls/internal/lsp/cmd.(*Application).Run(0x14000188000, {0x1053b1910, 0x1059c8e80}, {0x140000320b0?, 0x0, 0x0})\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""golang.org/x/tools/gopls/internal/lsp/cmd/cmd.go:253 +0x140 fp=0x140003a7bb0 sp=0x140003a7ac0 pc=0x104ee8ee0\\ngolang.org/x/tools/internal/tool.Run({0x1053b1910, 0x1059c8e80}, 0x14000378000, {0x1053b2400?, 0x14000188000}, {0x140000320b0, 0x1, 0x1})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:192 +0x4f0 fp=0x140003a7e20 sp=0x140003a7bb0 pc=0x104d75020\\ngolang.org/x/tools/internal/tool.Main({0x1053b1910, 0x1059c8e80}, {0x1053b2400?, 0x14000188000?}, {0x140000320b0, 0x1, 0x1})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/tool/tool.go:93 +0x104 fp=0x140003a7ee0 sp=0x140003a7e20 pc=0x104d74a04\\nmain.main()\\n\\tgolang.org/x/tools/gopls/main.go:29 +0xa0 fp=0x140003a7f30 sp=0x140003a7ee0 pc=0x104efc6a0\\nruntime.main()\\n\\truntime/proc.go:267 +0x2bc fp=0x140003a7fd0 sp=0x140003a7f30 pc=0x1046a89dc\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003a7fd0 sp=0x140003a7fd0 pc=0x1046dcf74\\n\\ngoroutine 2 [force gc (idle), 12 minutes]:\\nruntime.gopark(0x60631fc075b5?, 0x0?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""398 +0xc8 fp=0x14000070f90 sp=0x14000070f70 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\nruntime.forcegchelper()\\n\\truntime/proc.go:322 +0xb8 fp=0x14000070fd0 sp=0x14000070f90 pc=0x1046a8c98\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000070fd0 sp=0x14000070fd0 pc=0x1046dcf74\\ncreated by runtime.init.6 in goroutine 1\\n\\truntime/proc.go:310 +0x24\\n\\ngoroutine 3 [GC sweep wait]:\\nruntime.gopark(0x105991001?, 0x0?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000071760 sp=0x14000071740 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime.bgsweep(0x0?)\\n\\truntime/mgcsweep.go:321 +0x108 fp=0x140000717b0 sp=0x14000071760 pc=0x104693dc8\\nruntime.gcenable.func1()\\n\\truntime/mgc.go:200 +0x28 fp=0x140000717d0 sp=0x140000717b0 pc=0x104688868\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000717d0 sp=0x140000717d0 pc=0x1046dcf74\\ncreated by runtime.gcenable in goroutine 1\\n\\truntime/mgc.go:200 +0x6c\\n\\ngoroutine 4 [GC scavenge wait]:\\nruntime.gopark(0xec244f?""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"", 0xdb6a84?, 0x0?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000071f50 sp=0x14000071f30 pc=0x1046a8e38\\nruntime.goparkunlock(...)\\n\\truntime/proc.go:404\\nruntime.(*scavengerState).park(0x105993020)\\n\\truntime/mgcscavenge.go:425 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x5c fp=0x14000071f80 sp=0x14000071f50 pc=0x10469160c\\nruntime.bgscavenge(0x0?)\\n\\truntime/mgcscavenge.go:658 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0xac fp=0x14000071fb0 sp=0x14000071f80 pc=0x104691bcc\\nruntime.gcenable.func2()\\n\\truntime/mgc.go:201""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" +0x28 fp=0x14000071fd0 sp=0x14000071fb0 pc=0x104688808\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000071fd0 sp=0x14000071fd0 pc=0x1046dcf74\\ncreated by runtime.gcenable in goroutine 1\\n\\truntime/mgc.go:201 +0xac\\n\\ngoroutine 5""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" [finalizer wait, 206 minutes]:\\nruntime.gopark(0x0?, 0x1053a3e20?, 0x0?, 0x20?, 0x2000000020?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000070580 sp=0x14000070560 pc=0x1046a8e38\\nruntime.runfinq()\\n\\truntime/mfinal.go:193 +0x108 fp=0x140000707d0 sp=0x14000070580 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x104687958\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000707d0 sp=0x140000707d0 pc=0x1046dcf74\\ncreated by runtime.createfing in goroutine 1\\n\\truntime/mfinal.go:163 +0x80\\n\\ngoroutine 107 [GC worker (idle)]:\\nruntime.gopark(0x60f625261d46?, 0x3?, 0x6c?, 0x64?, 0x0?)\\n\\truntime/proc.go:398 +0xc8""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000306730 sp=0x14000306710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140003067d0 sp=0x14000306730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003067d0 sp=0x140003067d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ngoroutine 64 [GC worker (idle)]:\\nruntime.gopark(0x60f625259a17?, 0x1?, 0x21?, 0xaf?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000307f30 sp=0x14000307f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000307fd0 sp=0x14000307f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000307fd0 sp=0x14000307fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 115 [select, 202 minutes]:\\nruntime.gopark(0x140000c3dd8?, 0x2?, 0x18?, 0x3c?, 0x140000c3d7c?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140000c3bd0 sp=0x140000c3bb0 pc=0x1046a8e38""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\nruntime.selectgo(0x140000c3dd8, 0x140000c3d78, 0x102?, 0x0, 0x0?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x140000c3ce0 sp=0x140000c3bd0 pc=0x1046ba038\\ngolang.org/x/tools/gopls/internal/lsp/filecache.gc({0x1400013a030, 0x28})\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:546 +0xbc fp=0x140000c3fb0 sp=0x140000c3ce0 pc=0x104d80afc\\ngolang.org/x/tools/gopls/internal/lsp/filecache.getCacheDir.func1.1()\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:351 +0x2c fp=0x140000c3fd0 sp=0x140000c3fb0 pc=0x104d81bac\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000c3fd0 sp=0x140000c3fd0 pc=0x1046dcf74""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ncreated by golang.org/x/tools/gopls/internal/lsp/filecache.getCacheDir.func1 in goroutine 69\\n\\tgolang.org/x/tools/gopls/internal/lsp/filecache/filecache.go:351 +0x168\\n\\ngoroutine 114 [GC worker (idle)]:\\nruntime.gopark(0x60f62525ab58?, 0x3?, 0x37?, 0xd0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000309730 sp=0x14000309710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140003097d0 sp=0x14000309730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x140003097d0 sp=0x140003097d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 106 [GC worker (idle)]:\\nruntime.gopark(0x1059ca100?, 0x3?, 0x4b?, 0x2c?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000073730 sp=0x14000073710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x140000737d0 sp=0x14000073730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140000737d0 sp=0x140000737d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\ngoroutine 65 [GC worker (idle)]:\\nruntime.gopark(0x60f62523f81f?, 0x3?, 0xb7?, 0xf?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000309f30 sp=0x14000309f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000309fd0 sp=0x14000309f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000309fd0 sp=0x14000309fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 94 [GC worker (idle)]:\\nruntime.gopark(0x1059ca100?, 0x3?, 0x18?, 0xfd?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000302730 sp=0x14000302710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x140003027d0 sp=0x14000302730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003027d0 sp=0x140003027d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 108 [GC worker (idle)]:\\nruntime.gopark(0x60f6252385b3?, 0x1""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""?, 0xad?, 0x0?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006d730 sp=0x1400006d710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x1400006d7d0 sp=0x1400006d730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006d7d0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" sp=0x1400006d7d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 95 [GC worker (idle)]:\\nruntime.gopark(0x60f6252430ed?, 0x3?, 0xe0?, 0xb2?, 0x0?)\\n\\truntime/proc.go:398 +0xc8""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000302f30 sp=0x14000302f10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x14000302fd0 sp=0x14000302f30 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000302fd0 sp=0x14000302fd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 96 [GC worker (idle)]:\\nruntime.gopark(0x60f62524b540?, 0x3?, 0xf8?, 0x2a?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x14000303730 sp=0x14000303710 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""runtime/mgc.go:1293 +0xd8 fp=0x140003037d0 sp=0x14000303730 pc=0x10468a4b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140003037d0 sp=0x140003037d0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 109 [GC worker (idle)""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""]:\\nruntime.gopark(0x60f625242ea5?, 0x3?, 0x66?, 0x65?, 0x0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006df30 sp=0x1400006df10 pc=0x1046a8e38\\nruntime.gcBgMarkWorker()\\n\\truntime/mgc.go:1293 +0xd8 fp=0x1400006dfd0 sp=0x1400006df30 pc=0x10468a4b8\\nruntime.goexit""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006dfd0 sp=0x1400006dfd0 pc=0x1046dcf74\\ncreated by runtime.gcBgMarkStartWorkers in goroutine 1\\n\\truntime/mgc.go:1217 +0x28\\n\\ngoroutine 71 [syscall]:\\nsyscall.syscall(0x14000484dd8?, 0x104719c20?, 0x800000?""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"", 0x7ffff800000?)\\n\\truntime/sys_darwin.go:23 +0x58 fp=0x14000484da0 sp=0x14000484d10 pc=0x1046d9188\\nsyscall.read(0x1400009a060?, {0x14000315000?, 0x2?, 0x14000484f34?})\\n\\tsyscall/zsyscall_darwin_arm64.go:1209 +0x48 fp=0x14000484de0 sp=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x14000484da0 pc=0x1046f11a8\\nsyscall.Read(...)\\n\\tsyscall/syscall_unix.go:181\\ninternal/poll.ignoringEINTRIO(...)\\n\\tinternal/poll/fd_unix.go:736\\ninternal/poll.(*FD).Read(0x1400009a060, {0x14000315000, 0x1000, 0x1000})\\n\\tinternal/poll/fd_unix.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""160 +0x224 fp=0x14000484e80 sp=0x14000484de0 pc=0x104719d74\\nos.(*File).read(...)\\n\\tos/file_posix.go:29\\nos.(*File).Read(0x14000074028, {0x14000315000?, 0x2?, 0x2?})\\n\\tos/file.go:118 +0x70""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" fp=0x14000484ec0 sp=0x14000484e80 pc=0x104722a00\\nio.ReadCloser.Read-fm({0x14000315000?, 0x14000484f30?, 0x0?})\\n\\t<autogenerated>:1 +0x44 fp=0x14000484ef0 sp=0x14000484ec0 pc=0x104ee5d04\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).run(0x140001cf5c0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"")\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:121 +0x8c fp=0x14000484fb0 sp=0x14000484ef0 pc=0x104ee59bc\\ngolang.org/x/tools/internal/fakenet.NewConn.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:26 +0x28 fp=0x14000484fd0 sp=0x14000484fb0 pc=0x104ee53b8\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x14000484fd0""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t"" sp=0x14000484fd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/fakenet.NewConn in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:26 +0x314\\n\\ngoroutine 72 [select]:\\nruntime.gopark(0x1400006e788?, 0x2?, 0x0?, 0x0?, 0x1400006e734?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400006e5e0 sp=0x1400006e5c0 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x1046a8e38\\nruntime.selectgo(0x1400006e788, 0x1400006e730, 0x0?, 0x0, 0x1?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x1400006e6f0 sp=0x1400006e5e0 pc=0x1046ba038\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).run(0x140001cf5f0)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:115 +0x6c fp=0x1400006e7b0 sp=0x1400006e6f0 pc=0x104ee599c\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""golang.org/x/tools/internal/fakenet.NewConn.func2()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:27 +0x28 fp=0x1400006e7d0 sp=0x1400006e7b0 pc=0x104ee5358\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400006e7d0 sp=0x1400006e7d0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/fakenet.NewConn in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:27 +0x360\\n\\ngoroutine 146 [""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""IO wait]:\\nruntime.gopark(0xffffffffffffffff?, 0xffffffffffffffff?, 0x23?, 0x0?, 0x1046f2ee0?)\\n\\truntime/proc.go:398 +0xc8 fp=0x140006a7800 sp=0x140006a77e0 pc=0x1046a8e38\\nruntime.netpollblock(0x0?, 0x0?, 0x0?)\\n\\truntime/netpoll.go:564 +0x158 fp=0x140006a7840 sp=0x140006a7800 pc=0x1046a2588\\ninternal/poll.runtime_pollWait(""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x12c844e38, 0x72)\\n\\truntime/netpoll.go:343 +0xa0 fp=0x140006a7870 sp=0x140006a7840 pc=0x1046d6930\\ninternal/poll.(*pollDesc).wait(0x14000218000?, 0x14000314000?, 0x0)\\n\\tinternal/poll/fd_poll_runtime.go:84 +0x28 fp=0x140006a78a0 sp=0x140006a7870 pc=0x104718a08\\ninternal/poll.(*pollDesc).waitRead(...)\\n\\tinternal/poll/fd_poll_runtime.go:89\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""internal/poll.(*FD).Read(0x14000218000, {0x14000314000, 0x1000, 0x1000})\\n\\tinternal/poll/fd_unix.go:164 +0x200 fp=0x140006a7940 sp=0x140006a78a0 pc=0x104719d50\\nnet.(*netFD).Read(0x14000218000, {0x14000314000?, 0x140006a79c8?, 0x104683f30?})\\n\\tnet/fd_posix.go:55 +0x28 fp=0x140006a7990 sp=0x140006a7940 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x1047e2558\\nnet.(*conn).Read(0x14000392008, {0x14000314000?, 0x10596da80?, 0x0?})\\n\\tnet/net.go:179 +0x34 fp=0x140006a79e0 sp=0x140006a7990 pc=0x1047ee994\\nnet.(*UnixConn).Read(0x0?, {0x14000314000?, 0x0?, 0x0?})\\n\\t""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""<autogenerated>:1 +0x2c fp=0x140006a7a10 sp=0x140006a79e0 pc=0x10480093c\\nbufio.(*Reader).fill(0x140003f1980)\\n\\tbufio/bufio.go:113 +0xf8 fp=0x140006a7a50 sp=0x140006a7a10 pc=0x104802178\\nbufio.(*Reader).ReadSlice(0x140003f1980, 0x60?)\\n\\tbufio/bufio.go:""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""379 +0x30 fp=0x140006a7aa0 sp=0x140006a7a50 pc=0x104802d90\\nbufio.(*Reader).collectFragments(0x14000516180?, 0x20?)\\n\\tbufio/bufio.go:454 +0x64 fp=0x140006a7b70 sp=0x140006a7aa0 pc=0x104803184\\nbufio.(*Reader).ReadString(0x140006a7cc8?, 0xe8?)\\n\\tbufio/bufio.go:501 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x20 fp=0x140006a7c40 sp=0x140006a7b70 pc=0x104803510\\ngolang.org/x/tools/internal/jsonrpc2.(*headerStream).Read(0x1400039e000, {0x1053b1948, 0x140001cf230})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/stream.go:110 +0xa4 fp=0x140006a7cd0 sp=0x140006a7c40 pc=0x10480a844\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).run(0x1400038c140, {0x1053b1948, 0x140001cf230}, 0x1400039e060)\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:196 +0x84 fp=0x140006a7fa0 sp=0x140006a7cd0 pc=0x1048079e4\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).Go.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0x34 fp=0x140006a7fd0 sp=0x140006a7fa0 pc=0x104807924\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x140006a7fd0 sp=0x140006a7fd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/jsonrpc2.(*conn).Go in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0xa8\\n\\ngoroutine 147 [select]:\\nruntime.gopark(0x1400040f9c8?, 0x2?, 0x80?, 0x19?, 0x1400040f984?)\\n\\truntime/proc.go:398 +0xc8 fp=0x1400040f830 sp=0x1400040f810 pc=0x1046a8e38\\nruntime.selectgo(0x1400040f9c8, 0x1400040f980, 0x0?, 0x0, 0x10596da60?, 0x1)\\n\\truntime/select.go:327 +0x608 fp=0x1400040f940 sp=0x1400040f830 pc=0x1046ba038\\ngolang.org/x/tools/internal/fakenet.(*connFeeder).do""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""(...)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:103\\ngolang.org/x/tools/internal/fakenet.(*fakeConn).Read(0x0?, {0x14000315000?, 0x0?, 0x0?})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/fakenet/conn.go:67 +0xd4 fp=0x1400040fa10 sp=0x1400040f940 pc=0x104ee5554\\nbufio.(*Reader).fill(0x140002774a0)\\n\\tbufio/bufio.go:113 +0xf8 fp=0x1400040fa50 sp=0x1400040fa10 pc=0x104802178\\nbufio.(*Reader).ReadSlice""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""(0x140002774a0, 0x60?)\\n\\tbufio/bufio.go:379 +0x30 fp=0x1400040faa0 sp=0x1400040fa50 pc=0x104802d90\\nbufio.(*Reader).collectFragments(0x14000128840?, 0x10?)\\n\\tbufio/bufio.go:454 +0x64 fp=0x1400040fb70 sp=0x1400040faa0 pc=0x104803184\\nbufio.(*Reader).ReadString(0x1400040fcc8?, 0xe8?)\\n\\tbufio/bufio.go:501 +0x20 fp=0x1400040fc40 sp=0x1400040fb70 pc=0x104803510\\ngolang.org/x/tools/internal/jsonrpc2.(*headerStream).Read(0x140004e0240, ""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""{0x1053b1948, 0x140001cf230})\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/stream.go:110 +0xa4 fp=0x1400040fcd0 sp=0x1400040fc40 pc=0x10480a844\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).run(0x14000406140, {0x1053b1948, 0x140001cf230}, 0x1400039eab0)\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:196 +0x84 fp=0x1400040ffa0 sp=0x1400040fcd0 pc=0x1048079e4\\ngolang.org/x/tools/internal/jsonrpc2.(*conn).Go.func1()\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0x34 fp=0x1400040ffd0 sp=0x1400040ffa0 pc=""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""0x104807924\\nruntime.goexit()\\n\\truntime/asm_arm64.s:1197 +0x4 fp=0x1400040ffd0 sp=0x1400040ffd0 pc=0x1046dcf74\\ncreated by golang.org/x/tools/internal/jsonrpc2.(*conn).Go in goroutine 1\\n\\tgolang.org/x/tools@v0.14.1-0.20231114185516-c9d3e7de13fd/internal/jsonrpc2/conn.go:189 +0xa8\\n""\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""gopls: remote disconnected: failed reading header line: EOF\\n""\r\n[START][2023-12-05 19:17:14] LSP logging initiated\r\n[ERROR][2023-12-05 19:17:14] .../vim/lsp/rpc.lua:734\t""rpc""\t""/opt/homebrew/bin/gopls""\t""stderr""\t""gopls: remote disconnected: failed reading header line: EOF\\n""","shell\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/user/Library/Caches/go-build""\r\nGOENV=""/Users/user/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/user/go/pkg/mod""\r\nGONOPROXY=""<private>"" # removed because of privacy.\r\nGONOSUMDB=""<private>"" # removed because of privacy.\r\nGOOS=""darwin""\r\nGOPATH=""/Users/user/go""\r\nGOPRIVATE=""<private>"" # removed because of privacy.\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.12""\r\nGCCGO=""gccgo""\r\nAR=""llvm-ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/f5/tvc95lsd2tgfjkb489878h_40000gq/T/go-build4031533321=/tmp/go-build -gno-record-gcc-switches -fno-common""\n"
64565,cmd/compile: max/min builtin broken when used with string(byte) conversions### Go version\n\ngo1.21.0 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nHere is a proof https://go.dev/play/p/Dr26MV2mvGW from https://www.reddit.com/r/golang/comments/18be9xl/max_and_assign_issue/\r\n\r\nCredit to /u/ar1819 and /u/YamadaAnna\n\n### What did you expect to see?\n\nmax() and slices.Max() should have the same results. 7 is the bigger number.\n\n### What did you see instead?\n\nmax() output numbers lower than 7 as maxes.,NeedsFix|compiler/runtime,mdempsky,### Go version\n\ngo1.21.0 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/eggplant/.cache/go-build'\r\nGOENV='/home/eggplant/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\n```\n\n\n### What did you do?\n\nHere is a proof https://go.dev/play/p/Dr26MV2mvGW from https://www.reddit.com/r/golang/comments/18be9xl/max_and_assign_issue/\r\n\r\nCredit to /u/ar1819 and /u/YamadaAnna\n\n### What did you expect to see?\n\nmax() and slices.Max() should have the same results. 7 is the bigger number.\n\n### What did you see instead?\n\nmax() output numbers lower than 7 as maxes.,shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/eggplant/.cache/go-build'\r\nGOENV='/home/eggplant/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\n
64517,"net/http: Chunked request body incorrectly terminated on `\\r\\n\\r\\n` instead of `0\\r\\n\\r\\n`### Go version\n\ngo version devel go1.22-2e6387cbec Fri Dec 1 18:47:51 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n0. Compile and run the following program:\r\n\r\n1. Send the following payload to the server (for instance, with `nc`):\r\n```\r\nGET / HTTP/1.1\\r\\n\r\nHost: whatever\\r\\n\r\nTransfer-Encoding: chunked\\r\\n\r\n\\r\\n\r\n\\r\\n\r\n\\r\\n\r\n```\n\n### What did you expect to see?\n\nThe server should either respond 400 or time out, because the chunked message body is invalid. A chunked message body must be terminated with `0\\r\\n\\r\\n`. Terminating chunked message bodies on `\\r\\n\\r\\n` alone introduces risk from any gateway that may have interpreted the request framing differently.\n\n### What did you see instead?\n\nThe server responds 200.",Security|NeedsFix,panjf2000,"### Go version\n\ngo version devel go1.22-2e6387cbec Fri Dec 1 18:47:51 2023 +0000 linux/amd64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-2e6387cbec Fri Dec 1 18:47:51 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1615445855=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n0. Compile and run the following program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n    ""fmt""\r\n    ""net/http""\r\n)\r\n\r\nfunc handle_request(w http.ResponseWriter, req *http.Request) {\r\n    fmt.Fprintf(w, ""request received.\\n"")\r\n}\r\n\r\nfunc main() {\r\n    s := &http.Server{\r\n        Addr: ""127.0.0.1:8080"",\r\n        Handler: http.HandlerFunc(handle_request),\r\n        MaxHeaderBytes: 1 << 20,\r\n    }\r\n\r\n    s.ListenAndServe()\r\n}\r\n```\r\n1. Send the following payload to the server (for instance, with `nc`):\r\n```\r\nGET / HTTP/1.1\\r\\n\r\nHost: whatever\\r\\n\r\nTransfer-Encoding: chunked\\r\\n\r\n\\r\\n\r\n\\r\\n\r\n\\r\\n\r\n```\n\n### What did you expect to see?\n\nThe server should either respond 400 or time out, because the chunked message body is invalid. A chunked message body must be terminated with `0\\r\\n\\r\\n`. Terminating chunked message bodies on `\\r\\n\\r\\n` alone introduces risk from any gateway that may have interpreted the request framing differently.\n\n### What did you see instead?\n\nThe server responds 200.","shell\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/app/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/app/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-2e6387cbec Fri Dec 1 18:47:51 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1615445855=/tmp/go-build -gno-record-gcc-switches'\n"
64507,"runtime: internal/trace/v2 tests failing as of CL 546025```\r\n#!watchflakes\r\npost <- pkg == ""internal/trace/v2"" && `writeProcStatusForP`\r\n```\r\n\r\n### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nCheck the dashboard.\r\n\r\n### What did you expect to see?\r\n\r\nNo failures.\r\n\r\n### What did you see instead?\r\n\r\nFailures in various `internal/trace/v2` tests, confirmed on the LUCI dashboard and legacy builder dashboard as starting at https://go.dev/cl/546025.",NeedsFix|release-blocker|Soon|compiler/runtime,mknyszek,"```\r\n#!watchflakes\r\npost <- pkg == ""internal/trace/v2"" && `writeProcStatusForP`\r\n```\r\n\r\n### Go version\r\n\r\nN/A\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nbuild dashboard\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nCheck the dashboard.\r\n\r\n### What did you expect to see?\r\n\r\nNo failures.\r\n\r\n### What did you see instead?\r\n\r\nFailures in various `internal/trace/v2` tests, confirmed on the LUCI dashboard and legacy builder dashboard as starting at https://go.dev/cl/546025.",shell\r\nbuild dashboard\r\n
64495,x/tools/gopls: rename should also handle references in godoc links### Go version\n\ngo version go1.21.4 darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nRenaming the `FuncA` function should also change the godoc link in `FuncB` documentation.\r\n\r\n\n\n### What did you expect to see?\n\ngodoc link replaced with the reference to the new name of FuncA.\n\n### What did you see instead?\n\n`FuncA` is still referenced but the symbol doesn't exist anymore. The documentation is now inconsistent (dangling link).,help wanted|FeatureRequest|gopls|Tools,rogeryk,### Go version\n\ngo version go1.21.4 darwin/arm64\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\ngopls v0.14.2\n```\n\n\n### What did you do?\n\nRenaming the `FuncA` function should also change the godoc link in `FuncB` documentation.\r\n```go\r\nfunc FuncA() {\r\n}\r\n\r\n// FuncB is same as [FuncB].\r\nfunc FuncB() {\r\n}\r\n```\r\n\n\n### What did you expect to see?\n\ngodoc link replaced with the reference to the new name of FuncA.\n\n### What did you see instead?\n\n`FuncA` is still referenced but the symbol doesn't exist anymore. The documentation is now inconsistent (dangling link).,shell\ngopls v0.14.2\n
64474,maps: maps.Clone reference semantics when cloning a map with large value types### Go version\r\n\r\ngo version go1.21.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/vkz2JOzn6zV\r\n\r\n\r\n\r\nPossibly related to https://go-review.googlesource.com/c/go/+/471400\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n2 1\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n2 2\r\n```,NeedsFix|release-blocker|compiler/runtime,randall77,"### Go version\r\n\r\ngo version go1.21.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tdog/.cache/go-build'\r\nGOENV='/home/tdog/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tdog/.asdf/installs/golang/1.21.4/packages/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tdog/.asdf/installs/golang/1.21.4/packages'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tdog/.asdf/installs/golang/1.21.4/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tdog/.asdf/installs/golang/1.21.4/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/tdog/dev/maps-clone/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1194712858=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/vkz2JOzn6zV\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""maps""\r\n)\r\n\r\ntype Value struct {\r\n\tVal     int\r\n\tpadding [100]int\r\n}\r\n\r\nfunc main() {\r\n\tconst key = ""key""\r\n\r\n\tm := make(map[string]Value)\r\n\r\n\tm[key] = Value{Val: 1}\r\n\r\n\tc := maps.Clone(m)\r\n\r\n\tv := m[key]\r\n\tv.Val = 2\r\n\tm[key] = v\r\n\r\n\tfmt.Println(m[key].Val, c[key].Val)\r\n}\r\n```\r\n\r\nPossibly related to https://go-review.googlesource.com/c/go/+/471400\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n2 1\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n2 2\r\n```","shell\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/tdog/.cache/go-build'\r\nGOENV='/home/tdog/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/tdog/.asdf/installs/golang/1.21.4/packages/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/tdog/.asdf/installs/golang/1.21.4/packages'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/tdog/.asdf/installs/golang/1.21.4/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/tdog/.asdf/installs/golang/1.21.4/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/tdog/dev/maps-clone/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1194712858=/tmp/go-build -gno-record-gcc-switches'\r\n"
64471,"cmd/compile: range over rune literal causes internal compiler error ### Go version\r\n\r\ngo version devel go1.22-b4fa5b163d Thu Nov 30 13:03:03 2023 +0000 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n```\r\n$ cat foo.go\r\npackage main\r\n\r\nfunc main() {\r\n\tfor i := range 'a' {\r\n\t\tprintln(i)\r\n\t}\r\n}\r\n\r\n$ go build foo.go\r\n```\r\n### What did you expect to see?\r\n\r\nNo ICE\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# command-line-arguments\r\n<unknown line number>: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../../go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xf5f728?, 0x0?}, {0xdff80b, 0x10}, {0x0, 0x0, 0x0})\r\n\t../../go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../../go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t../../go/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t../../go/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*writer).expr(0xc00047bc30, {0xf63c08?, 0xc000482370?})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1735 +0x278b\r\ncmd/compile/internal/noder.(*writer).forStmt(0xc00047bc30, 0xc0004822d0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1430 +0x1b9\r\ncmd/compile/internal/noder.(*writer).stmt1(0xc00047bc30, {0xf61870?, 0xc0004822d0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1289 +0x24f\r\ncmd/compile/internal/noder.(*writer).stmts(0xc00047bc30, {0xc00004a600, 0x1, 0x0?})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1220 +0x8e\r\ncmd/compile/internal/noder.(*pkgWriter).bodyIdx(0xc000002180, 0xc000481b80, 0xc000481ac0, 0xc0000f60a0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1124 +0x186\r\ncmd/compile/internal/noder.(*writer).funcExt(0xc00047b8c0, 0xc0004861c0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1059 +0x328\r\ncmd/compile/internal/noder.(*writer).doObj(0xc00047b810, 0xc00047b8c0, {0xf679e0, 0xc0004861c0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:819 +0x213\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0xc000002180, {0xf679e0, 0xc0004861c0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:778 +0x579\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0xc000002180, {0xf679e0, 0xc0004861c0}, 0x0, 0x0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:719 +0xf0\r\ncmd/compile/internal/noder.(*writer).obj(...)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:695\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc0000b03e0, 0x1, 0x1})\r\n\t../../go/src/cmd/compile/internal/noder/unified.go:317 +0x645\r\ncmd/compile/internal/noder.unified(...)\r\n\t../../go/src/cmd/compile/internal/noder/unified.go:172\r\ncmd/compile/internal/noder.LoadPackage({0xc0001420f0, 0x1, 0x1})\r\n\t../../go/src/cmd/compile/internal/noder/noder.go:77 +0x4d2\r\ncmd/compile/internal/gc.Main(0xe2f510)\r\n\t../../go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t../../go/src/cmd/compile/main.go:57 +0xf9\r\n```",NeedsFix|release-blocker|compiler/runtime,cuonglm,"### Go version\r\n\r\ngo version devel go1.22-b4fa5b163d Thu Nov 30 13:03:03 2023 +0000 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/dominikh/.cache/go-build'\r\nGOENV='/home/dominikh/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/dominikh/prj/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/dominikh/prj'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/dominikh/prj/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/dominikh/prj/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-b4fa5b163d Thu Nov 30 13:03:03 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/dominikh/prj/src/example.com/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2316299034=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n```\r\n$ cat foo.go\r\npackage main\r\n\r\nfunc main() {\r\n\tfor i := range 'a' {\r\n\t\tprintln(i)\r\n\t}\r\n}\r\n\r\n$ go build foo.go\r\n```\r\n### What did you expect to see?\r\n\r\nNo ICE\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# command-line-arguments\r\n<unknown line number>: internal compiler error: assertion failed\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t../../go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xf5f728?, 0x0?}, {0xdff80b, 0x10}, {0x0, 0x0, 0x0})\r\n\t../../go/src/cmd/compile/internal/base/print.go:225 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t../../go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/base.Assert(...)\r\n\t../../go/src/cmd/compile/internal/base/print.go:237\r\ncmd/compile/internal/noder.assert(...)\r\n\t../../go/src/cmd/compile/internal/noder/stencil.go:15\r\ncmd/compile/internal/noder.(*writer).expr(0xc00047bc30, {0xf63c08?, 0xc000482370?})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1735 +0x278b\r\ncmd/compile/internal/noder.(*writer).forStmt(0xc00047bc30, 0xc0004822d0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1430 +0x1b9\r\ncmd/compile/internal/noder.(*writer).stmt1(0xc00047bc30, {0xf61870?, 0xc0004822d0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1289 +0x24f\r\ncmd/compile/internal/noder.(*writer).stmts(0xc00047bc30, {0xc00004a600, 0x1, 0x0?})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1220 +0x8e\r\ncmd/compile/internal/noder.(*pkgWriter).bodyIdx(0xc000002180, 0xc000481b80, 0xc000481ac0, 0xc0000f60a0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1124 +0x186\r\ncmd/compile/internal/noder.(*writer).funcExt(0xc00047b8c0, 0xc0004861c0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:1059 +0x328\r\ncmd/compile/internal/noder.(*writer).doObj(0xc00047b810, 0xc00047b8c0, {0xf679e0, 0xc0004861c0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:819 +0x213\r\ncmd/compile/internal/noder.(*pkgWriter).objIdx(0xc000002180, {0xf679e0, 0xc0004861c0})\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:778 +0x579\r\ncmd/compile/internal/noder.(*pkgWriter).objInstIdx(0xc000002180, {0xf679e0, 0xc0004861c0}, 0x0, 0x0)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:719 +0xf0\r\ncmd/compile/internal/noder.(*writer).obj(...)\r\n\t../../go/src/cmd/compile/internal/noder/writer.go:695\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc0000b03e0, 0x1, 0x1})\r\n\t../../go/src/cmd/compile/internal/noder/unified.go:317 +0x645\r\ncmd/compile/internal/noder.unified(...)\r\n\t../../go/src/cmd/compile/internal/noder/unified.go:172\r\ncmd/compile/internal/noder.LoadPackage({0xc0001420f0, 0x1, 0x1})\r\n\t../../go/src/cmd/compile/internal/noder/noder.go:77 +0x4d2\r\ncmd/compile/internal/gc.Main(0xe2f510)\r\n\t../../go/src/cmd/compile/internal/gc/main.go:197 +0xbbd\r\nmain.main()\r\n\t../../go/src/cmd/compile/main.go:57 +0xf9\r\n```","shell\r\nODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/dominikh/.cache/go-build'\r\nGOENV='/home/dominikh/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/dominikh/prj/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/dominikh/prj'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/dominikh/prj/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/dominikh/prj/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-b4fa5b163d Thu Nov 30 13:03:03 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/dominikh/prj/src/example.com/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2316299034=/tmp/go-build -gno-record-gcc-switches'\r\n"
64452,spec: document unsafe.Slice/SliceOf when used with type parameter values### Go version\n\ngo 1.22\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nn/a\n\n### What did you expect to see?\n\nDocumentation in the spec re: the subject as needed.\r\nFollow-up on #64406.\n\n### What did you see instead?\n\nDocumentation unclear.,Documentation,griesemer,### Go version\n\ngo 1.22\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nn/a\n```\n\n\n### What did you do?\n\nn/a\n\n### What did you expect to see?\n\nDocumentation in the spec re: the subject as needed.\r\nFollow-up on #64406.\n\n### What did you see instead?\n\nDocumentation unclear.,shell\nn/a\n
64451,"x/tools/gopls: call hierarchy stops at a lambda### gopls version\r\n\r\nv0.14.2\r\n\r\n### go env\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nconsider this code: \r\n\r\n\r\nFrom vscode, I\u2019m asking about the call hierarchy at `bluh`\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI would like to see a call hierarchy that traverse the lambda definition and goes up to `Foo`\r\n\r\n```\r\nbluh\r\n  +-- baz\r\n       +-- bar.func()\r\n          +-- bar\r\n              +-- Foo\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe call hierarchy stops at the first lambda. \r\n```\r\nbluh\r\n  +-- baz\r\n       +-- bar.func()\r\n```\r\n\r\nThis is not very helpful to stop there.  There are many situations where it makes sense to show the caller of the function that generates the lambda.\r\n\r\n### Editor and settings\r\n\r\n```json\r\n{\r\n    ""go.testTimeout"": ""10s"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.formatTool"": ""custom"",\r\n    ""go.alternateTools"": {\r\n        ""customFormatter"": ""gofmt""\r\n    }\r\n}\r\n```\r\n\r\n### Logs\r\n\r\n_No response_",NeedsFix|gopls|Tools,adonovan,"### gopls version\r\n\r\nv0.14.2\r\n\r\n### go env\r\n\r\n```shell\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/fdejaeger/Library/Caches/go-build""\r\nGOENV=""/Users/fdejaeger/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/fdejaeger/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/fdejaeger/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/6_/dn0ctd6j6l56r4d5d6rbj_jw0000gq/T/go-build4268109944=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nconsider this code: \r\n```go\r\npackage foobar\r\n\r\nfunc Foo() {\r\n\tbar()\r\n}\r\n\r\nfunc bar() {\r\n\tgo func() { baz() }()\r\n}\r\n\r\nfunc baz() {\r\n\tbluh()\r\n}\r\n\r\nfunc bluh() {\r\n\r\n}\r\n```\r\n\r\nFrom vscode, I\u2019m asking about the call hierarchy at `bluh`\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI would like to see a call hierarchy that traverse the lambda definition and goes up to `Foo`\r\n\r\n```\r\nbluh\r\n  +-- baz\r\n       +-- bar.func()\r\n          +-- bar\r\n              +-- Foo\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe call hierarchy stops at the first lambda. \r\n```\r\nbluh\r\n  +-- baz\r\n       +-- bar.func()\r\n```\r\n\r\nThis is not very helpful to stop there.  There are many situations where it makes sense to show the caller of the function that generates the lambda.\r\n\r\n### Editor and settings\r\n\r\n```json\r\n{\r\n    ""go.testTimeout"": ""10s"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.formatTool"": ""custom"",\r\n    ""go.alternateTools"": {\r\n        ""customFormatter"": ""gofmt""\r\n    }\r\n}\r\n```\r\n\r\n### Logs\r\n\r\n_No response_","shell\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/fdejaeger/Library/Caches/go-build""\r\nGOENV=""/Users/fdejaeger/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/fdejaeger/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/fdejaeger/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/6_/dn0ctd6j6l56r4d5d6rbj_jw0000gq/T/go-build4268109944=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n"
64447,cmd/cgo/internal/test: consistently failing with `segmentation fault` on `linux-arm-aws` since CL 545277### Go version\r\n\r\nb2efd1de97402ec4b8fb4e9e0ec29c8e49e8e200\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://build.golang.org/log/4023a6ee5a18667fe161b4b917a1a0c4579527d8\r\n\r\n### What did you expect to see?\r\n\r\nPassing tests.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n##### Testing cgo\r\nok  \tcmd/cgo/internal/test\t0.916s\r\nok  \tcmd/cgo/internal/test\t0.880s\r\nok  \tcmd/cgo/internal/testtls\t0.005s\r\nok  \tcmd/cgo/internal/testtls\t0.003s\r\nok  \tcmd/cgo/internal/testnocgo\t0.004s\r\nok  \tcmd/cgo/internal/testnocgo\t0.003s\r\nsignal: segmentation fault\r\nFAIL\tcmd/cgo/internal/test\t0.521s\r\n```,OS-Linux|NeedsInvestigation|arch-arm|compiler/runtime,mknyszek,### Go version\r\n\r\nb2efd1de97402ec4b8fb4e9e0ec29c8e49e8e200\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\nlinux-arm-aws at b2efd1de97402ec4b8fb4e9e0ec29c8e49e8e200\r\n\r\n\r\n##### Test execution environment.\r\n# GOARCH: arm\r\n# CPU: ARMv8 Processor rev 1 (v8l)\r\n# GOOS: linux\r\n# OS Version: Linux 4.19.0-12-arm64 #1 SMP Debian 4.19.152-1 (2020-10-18) armv8l\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nhttps://build.golang.org/log/4023a6ee5a18667fe161b4b917a1a0c4579527d8\r\n\r\n### What did you expect to see?\r\n\r\nPassing tests.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n##### Testing cgo\r\nok  \tcmd/cgo/internal/test\t0.916s\r\nok  \tcmd/cgo/internal/test\t0.880s\r\nok  \tcmd/cgo/internal/testtls\t0.005s\r\nok  \tcmd/cgo/internal/testtls\t0.003s\r\nok  \tcmd/cgo/internal/testnocgo\t0.004s\r\nok  \tcmd/cgo/internal/testnocgo\t0.003s\r\nsignal: segmentation fault\r\nFAIL\tcmd/cgo/internal/test\t0.521s\r\n```,shell\r\nlinux-arm-aws at b2efd1de97402ec4b8fb4e9e0ec29c8e49e8e200\r\n\r\n\r\n##### Test execution environment.\r\n# GOARCH: arm\r\n# CPU: ARMv8 Processor rev 1 (v8l)\r\n# GOOS: linux\r\n# OS Version: Linux 4.19.0-12-arm64 #1 SMP Debian 4.19.152-1 (2020-10-18) armv8l\r\n
64431,"debug/elf: viewcore cannot read s390x z/Linux Go coredump: decoding dwarf section info at offset 0x0: too short### Go version\n\ngo version go1.21.4 linux/s390x\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nA Go program is using excessive memory on z/Linux. We took a core dump with `gcore`, built [`viewcore`](https://github.com/golang/debug) on a z/Linux machine and tried to analyze the core but it failed:\r\n\r\n```sh\r\n$ ./viewcore core.156909 --exe manager\r\nerror reading dwarf: error reading DWARF info from manager: decoding dwarf section info at offset 0x0: too short\r\n```\r\n\r\nThe error is coming from https://github.com/golang/debug/blob/master/internal/core/process.go#L263\r\n\r\n\r\n\r\nTherefore it seems this is an issue with `debug/elf` rather than `viewcore`.\r\n\r\nThe core dump looks fine and it is of the expected size matching the virtual size of the process:\r\n\r\n```sh\r\n$ file core.156909 \r\ncore.156909: ELF 64-bit MSB core file, IBM S/390, version 1 (SYSV), SVR4-style, from '/manager'\r\n$ ls -l core.156909 \r\n-rw-r--r--. 1 root root 754368488 Nov 28 18:28 core.156909\r\n$ readelf -a core.156909 | head\r\nELF Header:\r\n  Magic:   7f 45 4c 46 02 02 01 00 00 00 00 00 00 00 00 00 \r\n  Class:                             ELF64\r\n  Data:                              2's complement, big endian\r\n  Version:                           1 (current)\r\n  OS/ABI:                            UNIX - System V\r\n  ABI Version:                       0\r\n  Type:                              CORE (Core file)\r\n  Machine:                           IBM S/390\r\n  Version:                           0x1\r\n```\n\n### What did you expect to see?\n\n`viewcore` works\n\n### What did you see instead?\n\n```\r\nerror reading dwarf: error reading DWARF info from manager: decoding dwarf section info at offset 0x0: too short\r\n```",OS-Linux|NeedsInvestigation|arch-s390x|compiler/runtime,thanm,"### Go version\n\ngo version go1.21.4 linux/s390x\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='s390x'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='s390x'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='direct'\r\nGOROOT='/usr/lib/golang'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/lib/golang/pkg/tool/linux_s390x'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/debug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -march=z196 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1176343210=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\nA Go program is using excessive memory on z/Linux. We took a core dump with `gcore`, built [`viewcore`](https://github.com/golang/debug) on a z/Linux machine and tried to analyze the core but it failed:\r\n\r\n```sh\r\n$ ./viewcore core.156909 --exe manager\r\nerror reading dwarf: error reading DWARF info from manager: decoding dwarf section info at offset 0x0: too short\r\n```\r\n\r\nThe error is coming from https://github.com/golang/debug/blob/master/internal/core/process.go#L263\r\n\r\n```go\r\n\tdwarf, dwarfErr := exeElf.DWARF()\r\n\tif dwarfErr != nil {\r\n\t\tdwarfErr = fmt.Errorf(""error reading DWARF info from %s: %v"", exeFile.Name(), dwarfErr)\r\n\t}\r\n```\r\n\r\nTherefore it seems this is an issue with `debug/elf` rather than `viewcore`.\r\n\r\nThe core dump looks fine and it is of the expected size matching the virtual size of the process:\r\n\r\n```sh\r\n$ file core.156909 \r\ncore.156909: ELF 64-bit MSB core file, IBM S/390, version 1 (SYSV), SVR4-style, from '/manager'\r\n$ ls -l core.156909 \r\n-rw-r--r--. 1 root root 754368488 Nov 28 18:28 core.156909\r\n$ readelf -a core.156909 | head\r\nELF Header:\r\n  Magic:   7f 45 4c 46 02 02 01 00 00 00 00 00 00 00 00 00 \r\n  Class:                             ELF64\r\n  Data:                              2's complement, big endian\r\n  Version:                           1 (current)\r\n  OS/ABI:                            UNIX - System V\r\n  ABI Version:                       0\r\n  Type:                              CORE (Core file)\r\n  Machine:                           IBM S/390\r\n  Version:                           0x1\r\n```\n\n### What did you expect to see?\n\n`viewcore` works\n\n### What did you see instead?\n\n```\r\nerror reading dwarf: error reading DWARF info from manager: decoding dwarf section info at offset 0x0: too short\r\n```","shell\nGO111MODULE=''\r\nGOARCH='s390x'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='s390x'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/root/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/root/go'\r\nGOPRIVATE=''\r\nGOPROXY='direct'\r\nGOROOT='/usr/lib/golang'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/lib/golang/pkg/tool/linux_s390x'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/tmp/debug/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -march=z196 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1176343210=/tmp/go-build -gno-record-gcc-switches'\n"
64414,"cmd/compile: too many ? in tracebacks### Go version\n\ntip\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n```\r\npackage main\r\n\r\n//go:noinline\r\nfunc f(a []int, i int) int {\r\n\tg()\r\n\treturn a[i]\r\n}\r\n\r\n//go:noinline\r\nfunc g() {\r\n\tpanic(""here"")\r\n}\r\n\r\nfunc main() {\r\n\tvar a [4]int\r\n\tprintln(f(a[:], 3))\r\n}\r\n```\r\nWhen run, it prints\r\n```\r\npanic: here\r\n\r\ngoroutine 1 [running]:\r\nmain.g()\r\n\t/Users/khr/gowork/tmp1.go:13 +0x2c\r\nmain.f({0x14000064710?, 0x4, 0x14000064738?}, 0x3)\r\n\t/Users/khr/gowork/tmp1.go:6 +0x2c\r\nmain.main()\r\n\t/Users/khr/gowork/tmp1.go:18 +0x34\r\n```\r\nNote that the data pointer of the slice arg to `f` has a `?` in it. It shouldn't, that arg is live across the call to `g` and the compiler puts it somewhere known.\r\n\r\n```\r\n\t0x001c 00028 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR1, main.a+8(FP)\r\n\t0x0020 00032 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR0, main..autotmp_3-8(SP)\r\n\t0x0024 00036 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR3, main.i+24(FP)\r\n```\r\nLooks like the compiler is spilling the pointer to an autotmp, not the arg slot.\r\n\r\n(It then *also* spills it to the arg slot at the start of the function, presumably to make tracebacks better? But that copy might be stale, which is probably why the `?` is still there.)\r\n\n\n### What did you expect to see?\n\n\r\nno question mark\r\n\n\n### What did you see instead?\n\na question mark\r\n",compiler/runtime,randall77,"### Go version\n\ntip\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/khr/Library/Caches/go-build'\r\nGOENV='/Users/khr/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/khr/gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/khr/gopath'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/khr/sandbox/ro3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/khr/sandbox/ro3/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-e511c65dd3 Mon Nov 27 15:59:45 2023 -0800'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/khr/sandbox/ro3/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/z9/dty110711l9cr9w3ktv1_2380000gn/T/go-build1902989146=/tmp/go-build -gno-record-gcc-switches -fno-common'\n```\n\n\n### What did you do?\n\n```\r\npackage main\r\n\r\n//go:noinline\r\nfunc f(a []int, i int) int {\r\n\tg()\r\n\treturn a[i]\r\n}\r\n\r\n//go:noinline\r\nfunc g() {\r\n\tpanic(""here"")\r\n}\r\n\r\nfunc main() {\r\n\tvar a [4]int\r\n\tprintln(f(a[:], 3))\r\n}\r\n```\r\nWhen run, it prints\r\n```\r\npanic: here\r\n\r\ngoroutine 1 [running]:\r\nmain.g()\r\n\t/Users/khr/gowork/tmp1.go:13 +0x2c\r\nmain.f({0x14000064710?, 0x4, 0x14000064738?}, 0x3)\r\n\t/Users/khr/gowork/tmp1.go:6 +0x2c\r\nmain.main()\r\n\t/Users/khr/gowork/tmp1.go:18 +0x34\r\n```\r\nNote that the data pointer of the slice arg to `f` has a `?` in it. It shouldn't, that arg is live across the call to `g` and the compiler puts it somewhere known.\r\n\r\n```\r\n\t0x001c 00028 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR1, main.a+8(FP)\r\n\t0x0020 00032 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR0, main..autotmp_3-8(SP)\r\n\t0x0024 00036 (/Users/khr/gowork/tmp1.go:8)\tMOVD\tR3, main.i+24(FP)\r\n```\r\nLooks like the compiler is spilling the pointer to an autotmp, not the arg slot.\r\n\r\n(It then *also* spills it to the arg slot at the start of the function, presumably to make tracebacks better? But that copy might be stale, which is probably why the `?` is still there.)\r\n\n\n### What did you expect to see?\n\n\r\nno question mark\r\n\n\n### What did you see instead?\n\na question mark\r\n","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/khr/Library/Caches/go-build'\r\nGOENV='/Users/khr/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/khr/gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/khr/gopath'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/khr/sandbox/ro3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/khr/sandbox/ro3/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-e511c65dd3 Mon Nov 27 15:59:45 2023 -0800'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/khr/sandbox/ro3/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/z9/dty110711l9cr9w3ktv1_2380000gn/T/go-build1902989146=/tmp/go-build -gno-record-gcc-switches -fno-common'\n"
64404,"testing: on timeout, `running tests:` message includes non-running parent tests### Go version\n\ncommit d1dcffdb4a40f8ea89d9e57744142f9805b64840\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n```\n\n\n### What did you do?\n\nhttps://build.golang.org/log/c8fc86fc4fd4a47a9f825128843b56e2e61db057\n\n### What did you expect to see?\n\nA `running tests` message that indicates the specific tests that are actually running a test or cleanup function, but does not include tests that are blocked in `testing.T.Parallel`, and _also_ does not include parent tests that are blocked on waiting for their own child subtests to complete.\r\n\r\nIn this case, something like:\r\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestTransportExpect100Continue/h1 (2s)\r\n```\n\n### What did you see instead?\n\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestClientRedirectNoLocation (2m49s)\r\n\tTestClientRedirectNoLocation/h1 (2m20s)\r\n\tTestClientRedirectNoLocation/h2 (2m20s)\r\n\tTestConnContextNotModifyingAllContexts (2m48s)\r\n\tTestContentEncodingNoSniffing (2m48s)\r\n\tTestContentTypeWithVariousSources (2m48s)\r\n\tTestDisableContentLength (2m48s)\r\n\tTestDisableKeepAliveUpgrade (2m48s)\r\n\tTestGetBody (2m48s)\r\n\tTestHandlerSetsBodyNil (2m48s)\r\n\tTestHeadBody (2m48s)\r\n\tTestNoContentLengthIfTransferEncoding (2m48s)\r\n\tTestParseFormCleanup (2m48s)\r\n\tTestQuerySemicolon (2m48s)\r\n\tTestRequestBodyCloseDoesntBlock (2m48s)\r\n\tTestReuseRequest (2m48s)\r\n\tTestRoundTripGzip (2m48s)\r\n\tTestSOCKS5Proxy (2m48s)\r\n\tTestServerCancelsReadHeaderTimeoutWhenIdle (2m48s)\r\n\tTestServerCancelsReadTimeoutWhenIdle (2m48s)\r\n\tTestServerConnState (2m48s)\r\n\tTestServerContentTypeSniff (2m48s)\r\n\tTestServerContext_LocalAddrContextKey (2m48s)\r\n\tTestServerContext_ServerContextKey (2m48s)\r\n\tTestServerContexts (2m48s)\r\n\tTestServerDuplicateBackgroundRead (2m48s)\r\n\tTestServerEmptyBodyRace (2m48s)\r\n\tTestServerFlushAndHijack (2m48s)\r\n\tTestServerHandlersCanHandleH2PRI (2m48s)\r\n\tTestServerHijackGetsBackgroundByte (2m48s)\r\n\tTestServerHijackGetsBackgroundByte_big (2m48s)\r\n\tTestServerIdleTimeout (2m48s)\r\n\tTestServerIssue5953 (2m48s)\r\n\tTestServerKeepAliveAfterWriteError (2m48s)\r\n\tTestServerKeepAlivesEnabledResultClose (2m48s)\r\n\tTestServerRequestContextCancel_ConnClose (2m48s)\r\n\tTestServerRequestContextCancel_ServeHTTPDone (2m48s)\r\n\tTestServerSetKeepAlivesEnabledClosesConns (2m48s)\r\n\tTestServerShutdown (2m48s)\r\n\tTestServerShutdownStateNew (2m48s)\r\n\tTestSniffWriteSize (2m48s)\r\n\tTestStressSurpriseServerCloses (2m48s)\r\n\tTestTimeoutHandlerSuperfluousLogs (2m48s)\r\n\tTestTransportConnectionCloseOnRequest (2m48s)\r\n\tTestTransportConnectionCloseOnRequestDisableKeepAlive (2m48s)\r\n\tTestTransportConnectionCloseOnResponse (2m48s)\r\n\tTestTransportExpect100Continue (2m48s)\r\n\tTestTransportExpect100Continue/h1 (2s)\r\n\tTestTransportGzip (2m48s)\r\n\tTestTransportHeadResponses (2m48s)\r\n\tTestTransportIdleCacheKeys (2m48s)\r\n\tTestTransportKeepAlives (2m48s)\r\n\tTestTransportMaxConnsPerHost (2m48s)\r\n\tTestTransportMaxConnsPerHostIncludeDialInProgress (2m48s)\r\n\tTestTransportMaxPerHostIdleConns (2m48s)\r\n\tTestTransportReadToEndReusesConn (2m48s)\r\n\tTestTransportRemovesDeadIdleConnections (2m48s)\r\n\tTestTransportRespectRequestWantsClose (2m48s)\r\n\tTestTransportServerClosingUnexpectedly (2m48s)\r\n\tTestUnsupportedTransferEncodingsReturn501 (2m48s)\r\n\tTestWriteHeaderSwitchingProtocols (2m48s)\r\n```",NeedsFix,bcmills,"### Go version\n\ncommit d1dcffdb4a40f8ea89d9e57744142f9805b64840\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nwasip1-wasm-wazero at d1dcffdb4a40f8ea89d9e57744142f9805b64840\r\n\r\n:: Running /workdir/go/src/make.bash with args [""/workdir/go/src/make.bash""] and env [""HOSTNAME=buildlet-linux-amd64-wasip1-wasm-wazero-rnb6e0d3c"" ""DEBIAN_FRONTEND=noninteractive"" ""HOME=/root"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=wasip1-wasm-wazero"" ""GOOS=wasip1"" ""GOARCH=wasm"" ""GOHOSTOS=linux"" ""GOHOSTARCH=amd64"" ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/workdir/go/misc/wasm"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOWASIRUNTIME=wazero"" ""GOBIN="" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PWD=/workdir/go/src""] in dir /workdir/go/src\r\n\r\n\u2026\r\n\r\n##### Test execution environment.\r\n# GOARCH: wasm\r\n# CPU: \r\n# GOOS: wasip1\r\n# OS Version: UNKNOWN: error determining OS version: unable to determine OS version: unsupported operation\r\n```\n```\n\n\n### What did you do?\n\nhttps://build.golang.org/log/c8fc86fc4fd4a47a9f825128843b56e2e61db057\n\n### What did you expect to see?\n\nA `running tests` message that indicates the specific tests that are actually running a test or cleanup function, but does not include tests that are blocked in `testing.T.Parallel`, and _also_ does not include parent tests that are blocked on waiting for their own child subtests to complete.\r\n\r\nIn this case, something like:\r\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestTransportExpect100Continue/h1 (2s)\r\n```\n\n### What did you see instead?\n\n```\r\npanic: test timed out after 3m0s\r\nrunning tests:\r\n\tTestClientRedirectNoLocation (2m49s)\r\n\tTestClientRedirectNoLocation/h1 (2m20s)\r\n\tTestClientRedirectNoLocation/h2 (2m20s)\r\n\tTestConnContextNotModifyingAllContexts (2m48s)\r\n\tTestContentEncodingNoSniffing (2m48s)\r\n\tTestContentTypeWithVariousSources (2m48s)\r\n\tTestDisableContentLength (2m48s)\r\n\tTestDisableKeepAliveUpgrade (2m48s)\r\n\tTestGetBody (2m48s)\r\n\tTestHandlerSetsBodyNil (2m48s)\r\n\tTestHeadBody (2m48s)\r\n\tTestNoContentLengthIfTransferEncoding (2m48s)\r\n\tTestParseFormCleanup (2m48s)\r\n\tTestQuerySemicolon (2m48s)\r\n\tTestRequestBodyCloseDoesntBlock (2m48s)\r\n\tTestReuseRequest (2m48s)\r\n\tTestRoundTripGzip (2m48s)\r\n\tTestSOCKS5Proxy (2m48s)\r\n\tTestServerCancelsReadHeaderTimeoutWhenIdle (2m48s)\r\n\tTestServerCancelsReadTimeoutWhenIdle (2m48s)\r\n\tTestServerConnState (2m48s)\r\n\tTestServerContentTypeSniff (2m48s)\r\n\tTestServerContext_LocalAddrContextKey (2m48s)\r\n\tTestServerContext_ServerContextKey (2m48s)\r\n\tTestServerContexts (2m48s)\r\n\tTestServerDuplicateBackgroundRead (2m48s)\r\n\tTestServerEmptyBodyRace (2m48s)\r\n\tTestServerFlushAndHijack (2m48s)\r\n\tTestServerHandlersCanHandleH2PRI (2m48s)\r\n\tTestServerHijackGetsBackgroundByte (2m48s)\r\n\tTestServerHijackGetsBackgroundByte_big (2m48s)\r\n\tTestServerIdleTimeout (2m48s)\r\n\tTestServerIssue5953 (2m48s)\r\n\tTestServerKeepAliveAfterWriteError (2m48s)\r\n\tTestServerKeepAlivesEnabledResultClose (2m48s)\r\n\tTestServerRequestContextCancel_ConnClose (2m48s)\r\n\tTestServerRequestContextCancel_ServeHTTPDone (2m48s)\r\n\tTestServerSetKeepAlivesEnabledClosesConns (2m48s)\r\n\tTestServerShutdown (2m48s)\r\n\tTestServerShutdownStateNew (2m48s)\r\n\tTestSniffWriteSize (2m48s)\r\n\tTestStressSurpriseServerCloses (2m48s)\r\n\tTestTimeoutHandlerSuperfluousLogs (2m48s)\r\n\tTestTransportConnectionCloseOnRequest (2m48s)\r\n\tTestTransportConnectionCloseOnRequestDisableKeepAlive (2m48s)\r\n\tTestTransportConnectionCloseOnResponse (2m48s)\r\n\tTestTransportExpect100Continue (2m48s)\r\n\tTestTransportExpect100Continue/h1 (2s)\r\n\tTestTransportGzip (2m48s)\r\n\tTestTransportHeadResponses (2m48s)\r\n\tTestTransportIdleCacheKeys (2m48s)\r\n\tTestTransportKeepAlives (2m48s)\r\n\tTestTransportMaxConnsPerHost (2m48s)\r\n\tTestTransportMaxConnsPerHostIncludeDialInProgress (2m48s)\r\n\tTestTransportMaxPerHostIdleConns (2m48s)\r\n\tTestTransportReadToEndReusesConn (2m48s)\r\n\tTestTransportRemovesDeadIdleConnections (2m48s)\r\n\tTestTransportRespectRequestWantsClose (2m48s)\r\n\tTestTransportServerClosingUnexpectedly (2m48s)\r\n\tTestUnsupportedTransferEncodingsReturn501 (2m48s)\r\n\tTestWriteHeaderSwitchingProtocols (2m48s)\r\n```","shell\nwasip1-wasm-wazero at d1dcffdb4a40f8ea89d9e57744142f9805b64840\r\n\r\n:: Running /workdir/go/src/make.bash with args [""/workdir/go/src/make.bash""] and env [""HOSTNAME=buildlet-linux-amd64-wasip1-wasm-wazero-rnb6e0d3c"" ""DEBIAN_FRONTEND=noninteractive"" ""HOME=/root"" ""USER=root"" ""GO_STAGE0_NET_DELAY=0s"" ""GO_STAGE0_DL_DELAY=200ms"" ""WORKDIR=/workdir"" ""GOROOT_BOOTSTRAP=/workdir/go1.4"" ""GO_BUILDER_NAME=wasip1-wasm-wazero"" ""GOOS=wasip1"" ""GOARCH=wasm"" ""GOHOSTOS=linux"" ""GOHOSTARCH=amd64"" ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/workdir/go/misc/wasm"" ""GO_DISABLE_OUTBOUND_NETWORK=1"" ""GOWASIRUNTIME=wazero"" ""GOBIN="" ""TMPDIR=/workdir/tmp"" ""GOCACHE=/workdir/gocache"" ""GOPLSCACHE=/workdir/goplscache"" ""PWD=/workdir/go/src""] in dir /workdir/go/src\r\n\r\n\u2026\r\n\r\n##### Test execution environment.\r\n# GOARCH: wasm\r\n# CPU: \r\n# GOOS: wasip1\r\n# OS Version: UNKNOWN: error determining OS version: unable to determine OS version: unsupported operation\r\n"
64402,"testing: refactoring leads to deadlocks### Go version\n\ntip\n\n### Reproducibility\n\n- [X] Does this issue reproduce with the latest release?\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\nThe refactoring of the testing package in https://go.dev/cl/506755 leads to deadlocks.\r\n\r\nOne example that triggers this is:\r\n\r\n```\r\nfunc TestTesting(t *testing.T) { // <=== this is the outer t\r\n    t.Run(""outer"", func(*testing.T) {\r\n        t.Run(""inner"", func(t *testing.zT) { // <=== This is using the outer t\r\n            t.Log(""Hello World!"")\r\n        })\r\n    })\r\n}\r\n```\r\n\r\nIn our Google internal testing we discovered other cases but I don't yet know a minimal reproducer that I can share here. I'll follow up separately.\n\n### What did you expect to see?\n\nI expected the test to complete successfully.\n\n### What did you see instead?\n\nThe tests deadlocks.",NeedsInvestigation,bcmills,"### Go version\n\ntip\n\n### Reproducibility\n\n- [X] Does this issue reproduce with the latest release?\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nlinux/amd64\n```\n\n\n### What did you do?\n\nThe refactoring of the testing package in https://go.dev/cl/506755 leads to deadlocks.\r\n\r\nOne example that triggers this is:\r\n\r\n```\r\nfunc TestTesting(t *testing.T) { // <=== this is the outer t\r\n    t.Run(""outer"", func(*testing.T) {\r\n        t.Run(""inner"", func(t *testing.zT) { // <=== This is using the outer t\r\n            t.Log(""Hello World!"")\r\n        })\r\n    })\r\n}\r\n```\r\n\r\nIn our Google internal testing we discovered other cases but I don't yet know a minimal reproducer that I can share here. I'll follow up separately.\n\n### What did you expect to see?\n\nI expected the test to complete successfully.\n\n### What did you see instead?\n\nThe tests deadlocks.",shell\nlinux/amd64\n
64401,"runtime: ReadMemStats fatal error: mappedReady and other memstats are not equal### Go version\r\n\r\ngo version go1.21.4 linux/amd64 (also arm64)\r\n\r\n### Reproducibility\r\n\r\n- [X] Does this issue reproduce with the latest release?\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nWe have a set of processes that periodically calls `expvar.Do`, which calls `runtime.ReadMemStats` to collect Go memory statistics. We are seeing occasional crashes with the message ""mappedReady and other memstats are not equal""  across multiple separate programs, on both amd64 and arm64. This comes from the following line of code in the Go runtime: https://github.com/golang/go/blob/master/src/runtime/mstats.go#L487 .\r\n\r\nThese programs share some common metrics/monitoring type of code, so I suspect there is something that all these processes are doing which triggers this problem. We have been unable to figure out what it may be. It seems to happen only after a process has been running for a few hours. Some of these processes use Cgo code libraries, but some should be only Go code. Any suggestions for how to help track this down would be appreciated.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo crashes.\r\n\r\n### What did you see instead?\r\n\r\n\r\n### Example crash from amd64\r\n\r\n```\r\nruntime: mappedReady=109281560\r\nruntime: totalMapped=127983896\r\nruntime: released=18767872\r\nruntime: totalMapped-released=109216024\r\nfatal error: mappedReady and other memstats are not equal\r\n\r\nruntime stack:\r\nruntime.throw({0x14be1ed?, 0x7fae80a11f88?})\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/panic.go:1077 +0x5c fp=0x7faea7ff9b70 sp=0x7faea7ff9b40 pc=0x4844dc\r\nruntime.readmemstats_m(0xc0017a3d88)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:493 +0x585 fp=0x7faea7ffa718 sp=0x7faea7ff9b70 pc=0x47e7e5\r\nruntime.ReadMemStats.func1()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:364 +0x17 fp=0x7faea7ffa730 sp=0x7faea7ffa718 pc=0x47e237\r\ntraceback: unexpected SPWRITE function runtime.systemstack\r\nruntime.systemstack()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/asm_amd64.s:509 +0x4a fp=0x7faea7ffa740 sp=0x7faea7ffa730 pc=0x4b8d6a\r\n\r\ngoroutine 14991247 [running]:\r\nruntime.systemstack_switch()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/asm_amd64.s:474 +0x8 fp=0xc0017a3d50 sp=0xc0017a3d40 pc=0x4b8d08\r\nruntime.ReadMemStats(0xc0017a3d88)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:363 +0x49 fp=0xc0017a3d78 sp=0xc0017a3d50 pc=0x47e1e9\r\nexpvar.memstats()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/expvar/expvar.go:365 +0x36 fp=0xc0017a5428 sp=0xc0017a3d78 pc=0x967d96\r\nexpvar.Func.String(0xc000078508?)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/expvar/expvar.go:268 +0x16 fp=0xc0017a5450 sp=0xc0017a5428 pc=0x967516\r\nfmt.(*pp).handleMethods(0xc003fee000, 0x14915a5?)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:673 +0x2b2 fp=0xc0017a56a8 sp=0xc0017a5450 pc=0x5404f2\r\nfmt.(*pp).printArg(0xc003fee000, {0x12b5b00?, 0x1556250}, 0x73)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:756 +0x630 fp=0xc0017a5748 sp=0xc0017a56a8 pc=0x540f50\r\nfmt.(*pp).doPrintf(0xc003fee000, {0x148e303, 0x6}, {0xc0017a5928?, 0x2, 0x2})\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:1077 +0x39e fp=0xc0017a5840 sp=0xc0017a5748 pc=0x543a7e\r\nfmt.Fprintf({0x165c6e0, 0xc000ea9500}, {0x148e303, 0x6}, {0xc003f3d928, 0x2, 0x2})\r\n\r\n... our code calling expvar.Do omitted ...\r\n```\r\n\r\n### Example crash from arm64\r\n\r\n```\r\nruntime: mappedReady=323105112\r\nruntime: totalMapped=373518680\r\nruntime: released=50479104\r\nruntime: totalMapped-released=323039576\r\nfatal error: mappedReady and other memstats are not equal\r\n\r\nruntime stack:\r\nruntime.throw({0x1a24762?, 0x40c34?})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/panic.go:1077 +0x40 fp=0xffffcdb4ebe0 sp=0xffffcdb4ebb0 pc=0x4cd10\r\nruntime.readmemstats_m(0x400f193d38)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:493 +0x530 fp=0xffffcdb4f790 sp=0xffffcdb4ebe0 pc=0x46f60\r\nruntime.ReadMemStats.func1()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:364 +0x20 fp=0xffffcdb4f7b0 sp=0xffffcdb4f790 pc=0x46a10\r\ntraceback: unexpected SPWRITE function runtime.systemstack\r\nruntime.systemstack()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/asm_arm64.s:243 +0x6c fp=0xffffcdb4f7c0 sp=0xffffcdb4f7b0 pc=0x81fec\r\n\r\ngoroutine 42133645 [running]:\r\nruntime.systemstack_switch()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/asm_arm64.s:200 +0x8 fp=0x400f193cf0 sp=0x400f193ce0 pc=0x81f68\r\nruntime.ReadMemStats(0x400f193d38)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:363 +0x4c fp=0x400f193d20 sp=0x400f193cf0 pc=0x469cc\r\nexpvar.memstats()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/expvar/expvar.go:365 +0x4c fp=0x400f1953d0 sp=0x400f193d20 pc=0x665adc\r\nexpvar.Func.String(0x4008f9bce0?)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/expvar/expvar.go:268 +0x24 fp=0x400f195400 sp=0x400f1953d0 pc=0x665294\r\nfmt.(*pp).handleMethods(0x400710a000, 0x19ddd30?)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:673 +0x21c fp=0x400f195660 sp=0x400f195400 pc=0x10ce8c\r\nfmt.(*pp).printArg(0x400710a000, {0x16c0600?, 0x1ae4fc8}, 0x73)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:756 +0x5fc fp=0x400f195700 sp=0x400f195660 pc=0x10d8bc\r\nfmt.(*pp).doPrintf(0x400710a000, {0x19d9db8, 0x6}, {0x400f195908?, 0x2, 0x2})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:1077 +0x2dc fp=0x400f195810 sp=0x400f195700 pc=0x1100bc\r\nfmt.Fprintf({0x1ccc2c0, 0x400503c0e0}, {0x19d9db8, 0x6}, {0x4008afd908, 0x2, 0x2})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:224 +0x54 fp=0x400f195870 sp=0x400f195810 pc=0x10a404\r\n\r\n... our code calling expvar.Do omitted ...\r\n```\r\n",NeedsInvestigation|compiler/runtime,mknyszek,"### Go version\r\n\r\ngo version go1.21.4 linux/amd64 (also arm64)\r\n\r\n### Reproducibility\r\n\r\n- [X] Does this issue reproduce with the latest release?\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```shell\r\n(NOTE: This is our build configuration; we also build for arm64 and see this crash there too)\r\n\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/gocache'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/root/.gimme/versions/go1.21.4.linux.amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/root/.gimme/versions/go1.21.4.linux.amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD=''\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2851638515=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\nWe have a set of processes that periodically calls `expvar.Do`, which calls `runtime.ReadMemStats` to collect Go memory statistics. We are seeing occasional crashes with the message ""mappedReady and other memstats are not equal""  across multiple separate programs, on both amd64 and arm64. This comes from the following line of code in the Go runtime: https://github.com/golang/go/blob/master/src/runtime/mstats.go#L487 .\r\n\r\nThese programs share some common metrics/monitoring type of code, so I suspect there is something that all these processes are doing which triggers this problem. We have been unable to figure out what it may be. It seems to happen only after a process has been running for a few hours. Some of these processes use Cgo code libraries, but some should be only Go code. Any suggestions for how to help track this down would be appreciated.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo crashes.\r\n\r\n### What did you see instead?\r\n\r\n\r\n### Example crash from amd64\r\n\r\n```\r\nruntime: mappedReady=109281560\r\nruntime: totalMapped=127983896\r\nruntime: released=18767872\r\nruntime: totalMapped-released=109216024\r\nfatal error: mappedReady and other memstats are not equal\r\n\r\nruntime stack:\r\nruntime.throw({0x14be1ed?, 0x7fae80a11f88?})\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/panic.go:1077 +0x5c fp=0x7faea7ff9b70 sp=0x7faea7ff9b40 pc=0x4844dc\r\nruntime.readmemstats_m(0xc0017a3d88)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:493 +0x585 fp=0x7faea7ffa718 sp=0x7faea7ff9b70 pc=0x47e7e5\r\nruntime.ReadMemStats.func1()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:364 +0x17 fp=0x7faea7ffa730 sp=0x7faea7ffa718 pc=0x47e237\r\ntraceback: unexpected SPWRITE function runtime.systemstack\r\nruntime.systemstack()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/asm_amd64.s:509 +0x4a fp=0x7faea7ffa740 sp=0x7faea7ffa730 pc=0x4b8d6a\r\n\r\ngoroutine 14991247 [running]:\r\nruntime.systemstack_switch()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/asm_amd64.s:474 +0x8 fp=0xc0017a3d50 sp=0xc0017a3d40 pc=0x4b8d08\r\nruntime.ReadMemStats(0xc0017a3d88)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/runtime/mstats.go:363 +0x49 fp=0xc0017a3d78 sp=0xc0017a3d50 pc=0x47e1e9\r\nexpvar.memstats()\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/expvar/expvar.go:365 +0x36 fp=0xc0017a5428 sp=0xc0017a3d78 pc=0x967d96\r\nexpvar.Func.String(0xc000078508?)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/expvar/expvar.go:268 +0x16 fp=0xc0017a5450 sp=0xc0017a5428 pc=0x967516\r\nfmt.(*pp).handleMethods(0xc003fee000, 0x14915a5?)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:673 +0x2b2 fp=0xc0017a56a8 sp=0xc0017a5450 pc=0x5404f2\r\nfmt.(*pp).printArg(0xc003fee000, {0x12b5b00?, 0x1556250}, 0x73)\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:756 +0x630 fp=0xc0017a5748 sp=0xc0017a56a8 pc=0x540f50\r\nfmt.(*pp).doPrintf(0xc003fee000, {0x148e303, 0x6}, {0xc0017a5928?, 0x2, 0x2})\r\n\t/root/.gimme/versions/go1.21.4.linux.amd64/src/fmt/print.go:1077 +0x39e fp=0xc0017a5840 sp=0xc0017a5748 pc=0x543a7e\r\nfmt.Fprintf({0x165c6e0, 0xc000ea9500}, {0x148e303, 0x6}, {0xc003f3d928, 0x2, 0x2})\r\n\r\n... our code calling expvar.Do omitted ...\r\n```\r\n\r\n### Example crash from arm64\r\n\r\n```\r\nruntime: mappedReady=323105112\r\nruntime: totalMapped=373518680\r\nruntime: released=50479104\r\nruntime: totalMapped-released=323039576\r\nfatal error: mappedReady and other memstats are not equal\r\n\r\nruntime stack:\r\nruntime.throw({0x1a24762?, 0x40c34?})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/panic.go:1077 +0x40 fp=0xffffcdb4ebe0 sp=0xffffcdb4ebb0 pc=0x4cd10\r\nruntime.readmemstats_m(0x400f193d38)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:493 +0x530 fp=0xffffcdb4f790 sp=0xffffcdb4ebe0 pc=0x46f60\r\nruntime.ReadMemStats.func1()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:364 +0x20 fp=0xffffcdb4f7b0 sp=0xffffcdb4f790 pc=0x46a10\r\ntraceback: unexpected SPWRITE function runtime.systemstack\r\nruntime.systemstack()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/asm_arm64.s:243 +0x6c fp=0xffffcdb4f7c0 sp=0xffffcdb4f7b0 pc=0x81fec\r\n\r\ngoroutine 42133645 [running]:\r\nruntime.systemstack_switch()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/asm_arm64.s:200 +0x8 fp=0x400f193cf0 sp=0x400f193ce0 pc=0x81f68\r\nruntime.ReadMemStats(0x400f193d38)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/runtime/mstats.go:363 +0x4c fp=0x400f193d20 sp=0x400f193cf0 pc=0x469cc\r\nexpvar.memstats()\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/expvar/expvar.go:365 +0x4c fp=0x400f1953d0 sp=0x400f193d20 pc=0x665adc\r\nexpvar.Func.String(0x4008f9bce0?)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/expvar/expvar.go:268 +0x24 fp=0x400f195400 sp=0x400f1953d0 pc=0x665294\r\nfmt.(*pp).handleMethods(0x400710a000, 0x19ddd30?)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:673 +0x21c fp=0x400f195660 sp=0x400f195400 pc=0x10ce8c\r\nfmt.(*pp).printArg(0x400710a000, {0x16c0600?, 0x1ae4fc8}, 0x73)\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:756 +0x5fc fp=0x400f195700 sp=0x400f195660 pc=0x10d8bc\r\nfmt.(*pp).doPrintf(0x400710a000, {0x19d9db8, 0x6}, {0x400f195908?, 0x2, 0x2})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:1077 +0x2dc fp=0x400f195810 sp=0x400f195700 pc=0x1100bc\r\nfmt.Fprintf({0x1ccc2c0, 0x400503c0e0}, {0x19d9db8, 0x6}, {0x4008afd908, 0x2, 0x2})\r\n  /root/.gimme/versions/go1.21.3.linux.arm64/src/fmt/print.go:224 +0x54 fp=0x400f195870 sp=0x400f195810 pc=0x10a404\r\n\r\n... our code calling expvar.Do omitted ...\r\n```\r\n","shell\r\n(NOTE: This is our build configuration; we also build for arm64 and see this crash there too)\r\n\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/gocache'\r\nGOENV='/home/user/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/root/.gimme/versions/go1.21.4.linux.amd64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/root/.gimme/versions/go1.21.4.linux.amd64/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD=''\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2851638515=/tmp/go-build -gno-record-gcc-switches'\r\n"
64371,"runtime/coverage: covcounters not written in -buildmode=c-shared### Go version\n\ngo version go1.21.4 linux/arm64\n\n### Reproducibility\n\n- [X] Does this issue reproduce with the latest release?\n\n### What operating system and processor architecture are you using (`go env`)?\n\n\n\n\n### What did you do?\n\n1. built Go program into a shared library by using `CGO_ENABLED=1 go build -cover --buildmode=c-shared -o libgolang.so`.\r\n2. Run a process with env variable GOCOVERDIR set, the process will load the `libgolang.so`.\r\n3. The process exited.\r\n4. I checked the GOCOVERDIR, only covmeta file is generated.\n\n### What did you expect to see?\n\nBoth covmeta and covcounters file should be generated.\n\n### What did you see instead?\n\nOnly covmeta file is generated.\r\nLook like when Go code runs as a shared library, the covcounters file is not flushed when the host process exits.\r\n\r\nCurrently, I work around this by calling `coverage.WriteCounters` manually.",NeedsInvestigation|compiler/runtime,thanm,"### Go version\n\ngo version go1.21.4 linux/arm64\n\n### Reproducibility\n\n- [X] Does this issue reproduce with the latest release?\n\n### What operating system and processor architecture are you using (`go env`)?\n\n```shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/go/src/mosn.io/moe/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build681226605=/tmp/go-build -gno-record-gcc-switches'\n```\n\n\n### What did you do?\n\n1. built Go program into a shared library by using `CGO_ENABLED=1 go build -cover --buildmode=c-shared -o libgolang.so`.\r\n2. Run a process with env variable GOCOVERDIR set, the process will load the `libgolang.so`.\r\n3. The process exited.\r\n4. I checked the GOCOVERDIR, only covmeta file is generated.\n\n### What did you expect to see?\n\nBoth covmeta and covcounters file should be generated.\n\n### What did you see instead?\n\nOnly covmeta file is generated.\r\nLook like when Go code runs as a shared library, the covcounters file is not flushed when the host process exits.\r\n\r\nCurrently, I work around this by calling `coverage.WriteCounters` manually.","shell\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://goproxy.cn'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/go/src/mosn.io/moe/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build681226605=/tmp/go-build -gno-record-gcc-switches'\n"
64248,"crypto/x509: gate marshaling of Policies on a GODEBUG [freeze exception]#60665 introduced a new OID type and a new field on the Certificate.\r\n\r\nThis change might cause a slight backwards compatibility breakage, it was not discussed there, so it might be worth discussing it here again.\r\n\r\nConsider https://go.dev/play/p/Z92_1DOZJQi?v=gotip\r\n\r\n\r\nThis does not fail on go 1.21, but on gotip it fails.\r\nI am not sure whether we should be concerned about this. Not sure whether (and why) someone might be using a parsed certificate as a template, but who knows. \r\n\r\nCC @rolandshoemaker ",Proposal|Proposal-Accepted|NeedsFix|release-blocker,rolandshoemaker,"#60665 introduced a new OID type and a new field on the Certificate.\r\n\r\nThis change might cause a slight backwards compatibility breakage, it was not discussed there, so it might be worth discussing it here again.\r\n\r\nConsider https://go.dev/play/p/Z92_1DOZJQi?v=gotip\r\n```go\r\nfunc TestParsedCertificateAsTemplate(t *testing.T) {\r\n\tb, _ := pem.Decode([]byte(largeOIDPEM))\r\n\tif b == nil {\r\n\t\tt.Fatalf(""couldn't decode test certificate"")\r\n\t}\r\n\ttemplate, err := x509.ParseCertificate(b.Bytes)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""ParseCertificate unexpected error: %v"", err)\r\n\t}\r\n\ttemplate.PublicKey = nil\r\n\r\n\t// Clear all PolicyIdentifiers from template.\r\n\ttemplate.PolicyIdentifiers = nil\r\n\r\n\tnewCertDER, err := x509.CreateCertificate(rand.Reader, template, template, rsaPrivateKey.Public(), rsaPrivateKey)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""CreateCertificate unexpected error: %v"", err)\r\n\t}\r\n\r\n\tcert, err := x509.ParseCertificate(newCertDER)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""ParseCertificate unexpected error: %v"", err)\r\n\t}\r\n\r\n\tif len(cert.PolicyIdentifiers) != 0 {\r\n\t\tt.Fatalf(""PolicyIdentifiers field is not empty"") // fails on gotip\r\n\t}\r\n}\r\n\r\n```\r\n\r\nThis does not fail on go 1.21, but on gotip it fails.\r\nI am not sure whether we should be concerned about this. Not sure whether (and why) someone might be using a parsed certificate as a template, but who knows. \r\n\r\nCC @rolandshoemaker ","go\r\nfunc TestParsedCertificateAsTemplate(t *testing.T) {\r\n\tb, _ := pem.Decode([]byte(largeOIDPEM))\r\n\tif b == nil {\r\n\t\tt.Fatalf(""couldn't decode test certificate"")\r\n\t}\r\n\ttemplate, err := x509.ParseCertificate(b.Bytes)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""ParseCertificate unexpected error: %v"", err)\r\n\t}\r\n\ttemplate.PublicKey = nil\r\n\r\n\t// Clear all PolicyIdentifiers from template.\r\n\ttemplate.PolicyIdentifiers = nil\r\n\r\n\tnewCertDER, err := x509.CreateCertificate(rand.Reader, template, template, rsaPrivateKey.Public(), rsaPrivateKey)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""CreateCertificate unexpected error: %v"", err)\r\n\t}\r\n\r\n\tcert, err := x509.ParseCertificate(newCertDER)\r\n\tif err != nil {\r\n\t\tt.Fatalf(""ParseCertificate unexpected error: %v"", err)\r\n\t}\r\n\r\n\tif len(cert.PolicyIdentifiers) != 0 {\r\n\t\tt.Fatalf(""PolicyIdentifiers field is not empty"") // fails on gotip\r\n\t}\r\n}\r\n\r\n"
64246,"cmd/compile: can't override variable with ldflags when initial value is a func_(This might be better categorized under the linker, please edit as appropriate)_\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nGo 1.21.4 is the [latest version](https://go.dev/doc/devel/release#go1.21.0) as of this posting.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/sethvargo/Library/Caches/go-build'\r\nGOENV='/Users/sethvargo/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/sethvargo/Development/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/sethvargo/Development/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.4/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.4/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/sethvargo/Development/project/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build715077767=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to override a package variable (that has a default value) using `ldflags`, all using the same command:\r\n\r\n```sh\r\ngo run \\\r\n  -a \\\r\n  -trimpath \\\r\n  -ldflags=""-s -w -X main.Version=1.2.3. -extldflags=-static""\r\n```\r\n\r\nMy expectation is that the `Version` value is set to ""1.2.3"" and therefore the program prints ""1.2.3"". \r\n\r\n**\u2705 Explicit string type**\r\n\r\n\r\n\r\n**\u2705 Implicit string type**\r\n\r\n\r\n\r\n**\u2705 Explicit string type `func() string`**\r\n\r\n\r\n\r\n**\u2705 Implicit string type `func() string`**\r\n\r\n\r\n\r\n[Run with `-x` output](https://gist.githubusercontent.com/sethvargo/d375e763a65c415ed5cefb6bb76b6ade/raw/b1c474fd89949ac2cf90832da8cd7115829af625/success.txt)\r\n\r\n**\u274c Explicit string type complex `func() string`**\r\n\r\n\r\n\r\n**\u274c String concatenation with runtime variable**\r\n\r\n\r\n\r\n[Run with `-x` output](https://gist.githubusercontent.com/sethvargo/d375e763a65c415ed5cefb6bb76b6ade/raw/b1c474fd89949ac2cf90832da8cd7115829af625/failure.txt)\r\n\r\nAt first I thought this was because the compiler was optimizing away the function call, but surely the compiler should also optimize out the ""always-true"" branch.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expect the `ldflags` to override the variable.\r\n\r\n\r\n### What did you see instead?\r\n\r\n`ldflags` conditionally overrides the variable, depending on other variables I don't fully understand.\r\n\r\n\r\n### What problem am I trying to solve?\r\n\r\nI'd like to inject build information into the compiled binary, with sane fallback values if none are provided. Some of these values will be injected by the build process into the final binary, but if someone builds the binary themselves (or if they `go install` it), then I'd like _some_ reasonable build information. Fortunately modern versions of Go expose this, but it seems to be incompatible with allowing the values to be overridden:\r\n\r\n\r\n\r\nI would _like_ the default version to come from the `debug` package, but still provide a mechanism for builders to inject/override with their own values. With the function definition above, it's impossible for a builder to override `Version`. Since some of these functions could be called hundreds or thousands of times, I don't want to make this a pure function call. The best I could come up with was to move the package into `internal` and leverage a combination of private variables and `once` functions, but it's not pleasing:\r\n\r\n",NeedsInvestigation|compiler/runtime,cherrymui,"_(This might be better categorized under the linker, please edit as appropriate)_\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nGo 1.21.4 is the [latest version](https://go.dev/doc/devel/release#go1.21.0) as of this posting.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/sethvargo/Library/Caches/go-build'\r\nGOENV='/Users/sethvargo/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/sethvargo/Development/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/sethvargo/Development/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.4/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.4/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/sethvargo/Development/project/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build715077767=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to override a package variable (that has a default value) using `ldflags`, all using the same command:\r\n\r\n```sh\r\ngo run \\\r\n  -a \\\r\n  -trimpath \\\r\n  -ldflags=""-s -w -X main.Version=1.2.3. -extldflags=-static""\r\n```\r\n\r\nMy expectation is that the `Version` value is set to ""1.2.3"" and therefore the program prints ""1.2.3"". \r\n\r\n**\u2705 Explicit string type**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version string = ""development""\r\nfunc main() {\r\n  fmt.Println(Version) // correctly prints ""1.2.3""\r\n}\r\n```\r\n\r\n**\u2705 Implicit string type**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version = ""development""\r\nfunc main() {\r\n  fmt.Println(Version) // correctly prints ""1.2.3""\r\n}\r\n```\r\n\r\n**\u2705 Explicit string type `func() string`**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version string = func() string {\r\n  return ""development""\r\n}()\r\nfunc main() {\r\n  fmt.Println(Version) // prints ""1.2.3""\r\n}\r\n```\r\n\r\n**\u2705 Implicit string type `func() string`**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version = func() string {\r\n  return ""development""\r\n}()\r\nfunc main() {\r\n  fmt.Println(Version) // prints ""1.2.3""\r\n}\r\n```\r\n\r\n[Run with `-x` output](https://gist.githubusercontent.com/sethvargo/d375e763a65c415ed5cefb6bb76b6ade/raw/b1c474fd89949ac2cf90832da8cd7115829af625/success.txt)\r\n\r\n**\u274c Explicit string type complex `func() string`**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version string = func() string {\r\n  if true {\r\n    return ""development""\r\n  }\r\n  return ""production""\r\n}()\r\nfunc main() {\r\n  fmt.Println(Version) // \u274c always prints ""development""\r\n}\r\n```\r\n\r\n**\u274c String concatenation with runtime variable**\r\n\r\n```go\r\npackage main\r\nimport ""fmt""\r\nvar Version string = ""devel"" + os.Getenv(""FOO"")\r\nfunc main() {\r\n  fmt.Println(Version) // \u274c always prints ""devel""\r\n}\r\n```\r\n\r\n[Run with `-x` output](https://gist.githubusercontent.com/sethvargo/d375e763a65c415ed5cefb6bb76b6ade/raw/b1c474fd89949ac2cf90832da8cd7115829af625/failure.txt)\r\n\r\nAt first I thought this was because the compiler was optimizing away the function call, but surely the compiler should also optimize out the ""always-true"" branch.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expect the `ldflags` to override the variable.\r\n\r\n\r\n### What did you see instead?\r\n\r\n`ldflags` conditionally overrides the variable, depending on other variables I don't fully understand.\r\n\r\n\r\n### What problem am I trying to solve?\r\n\r\nI'd like to inject build information into the compiled binary, with sane fallback values if none are provided. Some of these values will be injected by the build process into the final binary, but if someone builds the binary themselves (or if they `go install` it), then I'd like _some_ reasonable build information. Fortunately modern versions of Go expose this, but it seems to be incompatible with allowing the values to be overridden:\r\n\r\n```go\r\nvar Version string = func() string {\r\n  if info, ok := debug.ReadBuildInfo(); ok {\r\n    if v := info.Main.Version; v != """" {\r\n      return v // e.g. ""v0.0.1-alpha1.0.20231115...""\r\n    }\r\n  }\r\n\r\n  return ""source""\r\n}()\r\n```\r\n\r\nI would _like_ the default version to come from the `debug` package, but still provide a mechanism for builders to inject/override with their own values. With the function definition above, it's impossible for a builder to override `Version`. Since some of these functions could be called hundreds or thousands of times, I don't want to make this a pure function call. The best I could come up with was to move the package into `internal` and leverage a combination of private variables and `once` functions, but it's not pleasing:\r\n\r\n```go\r\npackage buildinfo\r\n\r\nvar version string\r\nvar Version string = sync.OnceValue(func() string {\r\n  if v := version; v != """" {\r\n    return v\r\n  }\r\n\r\n  if info, ok := debug.ReadBuildInfo(); ok {\r\n    if v := info.Main.Version; v != """" {\r\n      return v // e.g. ""v0.0.1-alpha1.0.20231115...""\r\n    }\r\n  }\r\n\r\n  return ""source""\r\n})()\r\n```","go\r\npackage main\r\nimport ""fmt""\r\nvar Version string = ""development""\r\nfunc main() {\r\n  fmt.Println(Version) // correctly prints ""1.2.3""\r\n}\r\n"
64215,"os: File.Sync() returns ENOTSUP on network mounts that support fsync<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/rob/Library/Caches/go-build'\r\nGOENV='/Users/rob/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/rob/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/rob/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/9x/tzryjjm93zvcvhmn517n9t3h0000gn/T/go-build3328922198=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n1. Mount a SMB share on macOS that supports fsync (`strict sync = yes`, the default since Samba 4.7.0)\r\n2. Open a file on that share\r\n3. Call `file.Sync()`\r\n\r\n### What did you expect to see?\r\nNo error. The fsync instruction is passed down to the network share, which takes action (or not, depending on its configuration)\r\n\r\n\r\n### What did you see instead?\r\nError: `ENOTSUP`\r\n\r\n\r\nIt appears that a change was implemented in go1.12 for #26650 which switched File.Sync() to call `fcntl(fd, F_FULLFSYNC)` rather than `fsync(fd)`. This was due to fsync not being implemented as expected on darwin.\r\n\r\nOn local volumes, this change appears to work correctly. However, `F_FULLFSYNC` appears to be unsupported on SMB volumes--and likely elsewhere too.\r\n\r\nThis means that the change as a result of #26650 leads to `ENOTSUP` being returned where a Sync would have succeeded before.\r\n\r\n(I've verified via samba logging that calling `unix.Fsync()` on the fd results in the correct fsync instruction being sent to the server, so darwin's wonky fsync() behaviour seems to only apply to local volumes)\r\n\r\nI'd bet that most Go developers are not testing file operations in SMB mounts, so are shipping software that would have worked in 1.11, but in 1.12+ will fail.\r\n\r\nI've had to resort to a workaround:\r\n\r\n",OS-Darwin|NeedsFix,mauri870,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/rob/Library/Caches/go-build'\r\nGOENV='/Users/rob/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/rob/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/rob/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/9x/tzryjjm93zvcvhmn517n9t3h0000gn/T/go-build3328922198=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n1. Mount a SMB share on macOS that supports fsync (`strict sync = yes`, the default since Samba 4.7.0)\r\n2. Open a file on that share\r\n3. Call `file.Sync()`\r\n\r\n### What did you expect to see?\r\nNo error. The fsync instruction is passed down to the network share, which takes action (or not, depending on its configuration)\r\n\r\n\r\n### What did you see instead?\r\nError: `ENOTSUP`\r\n\r\n\r\nIt appears that a change was implemented in go1.12 for #26650 which switched File.Sync() to call `fcntl(fd, F_FULLFSYNC)` rather than `fsync(fd)`. This was due to fsync not being implemented as expected on darwin.\r\n\r\nOn local volumes, this change appears to work correctly. However, `F_FULLFSYNC` appears to be unsupported on SMB volumes--and likely elsewhere too.\r\n\r\nThis means that the change as a result of #26650 leads to `ENOTSUP` being returned where a Sync would have succeeded before.\r\n\r\n(I've verified via samba logging that calling `unix.Fsync()` on the fd results in the correct fsync instruction being sent to the server, so darwin's wonky fsync() behaviour seems to only apply to local volumes)\r\n\r\nI'd bet that most Go developers are not testing file operations in SMB mounts, so are shipping software that would have worked in 1.11, but in 1.12+ will fail.\r\n\r\nI've had to resort to a workaround:\r\n\r\n```go\r\nfunc sync(f *os.File) error {\r\n  err := f.Sync()\r\n\r\n  // Ensure fsync is called if Sync is not supported. There are scenarios (SMB mounts, ...?) where fsync will succeed but Sync will fail due\r\n  if (runtime.GOOS == ""darwin"" || runtime.GOOS == ""ios"") && errors.Is(err, syscall.ENOTSUP) {\r\n    err = unix.Fsync(int(file.Fd()))\r\n  }\r\n\r\n  return err\r\n}\r\n```","go\r\nfunc sync(f *os.File) error {\r\n  err := f.Sync()\r\n\r\n  // Ensure fsync is called if Sync is not supported. There are scenarios (SMB mounts, ...?) where fsync will succeed but Sync will fail due\r\n  if (runtime.GOOS == ""darwin"" || runtime.GOOS == ""ios"") && errors.Is(err, syscall.ENOTSUP) {\r\n    err = unix.Fsync(int(file.Fd()))\r\n  }\r\n\r\n  return err\r\n}\r\n"
64153,"Test failure in test/finprofiled.go --- integer divide by zero<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-12051f7d95 Wed Nov 15 04:10:05 2023 +0000 linux/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/ruisun01/.cache/go-build'\r\nGOENV='/home/ruisun01/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ruisun01/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ruisun01/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/ruisun01/work/aarch64/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ruisun01/work/aarch64/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-12051f7d95 Wed Nov 15 04:10:05 2023 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ruisun01/work/aarch64/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3780787530=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nrun `all.bash`, or run `go test cmd/internal/testdir -run Test/finprofiled.go`\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n### What did you expect to see?\r\n\r\nAll tests pass\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n### Some thoughts:\r\n\r\nI'm not very familiar with GC and memory profiler, but in [finprofiled.go:60](https://github.com/golang/go/blob/12051f7d95ef6e97d1be0cab8a3583ad38ec1dcd/test/finprofiled.go#L60), the code truly does not check the  value of `nobj`:\r\n\r\nI try to reproduce it in other machines(x86, darwin/arm64) but it only occurs on my arm64 container. So I have to say I can't make sure whether it's caused by my container or it's just a simple bug. Here are some info I just collected:\r\n\r\n- I git bisect and it points at [CL 538217](https://go-review.googlesource.com/c/go/+/538217/20)\r\n\r\n- Here is the log if I uncomment the `println`:\r\n\r\n\r\n",NeedsInvestigation|release-blocker|compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-12051f7d95 Wed Nov 15 04:10:05 2023 +0000 linux/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/home/ruisun01/.cache/go-build'\r\nGOENV='/home/ruisun01/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ruisun01/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ruisun01/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/ruisun01/work/aarch64/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ruisun01/work/aarch64/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-12051f7d95 Wed Nov 15 04:10:05 2023 +0000'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/ruisun01/work/aarch64/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build3780787530=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nrun `all.bash`, or run `go test cmd/internal/testdir -run Test/finprofiled.go`\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n### What did you expect to see?\r\n\r\nAll tests pass\r\n\r\n### What did you see instead?\r\n\r\n```bash\r\n--- FAIL: Test (0.08s)\r\n    --- FAIL: Test/finprofiled.go (2.13s)\r\n        testdir_test.go:142: exit status 2\r\n            panic: runtime error: integer divide by zero\r\n\r\n            goroutine 1 [running]:\r\n            main.main()\r\n            \t/home/ruisun01/work/aarch64/go/test/finprofiled.go:60 +0x2d4\r\n\r\nFAIL\r\nFAIL\tcmd/internal/testdir\t2.240s\r\nFAIL\r\n```\r\n\r\n### Some thoughts:\r\n\r\nI'm not very familiar with GC and memory profiler, but in [finprofiled.go:60](https://github.com/golang/go/blob/12051f7d95ef6e97d1be0cab8a3583ad38ec1dcd/test/finprofiled.go#L60), the code truly does not check the  value of `nobj`:\r\n```go\r\n// finprofiled.go\r\n...\r\nfor _, p := range prof {\r\n\tbytes := p.AllocBytes - p.FreeBytes\r\n\tnobj := p.AllocObjects - p.FreeObjects\r\n\t// println(""bytes: "", bytes, ""\\t\\tnobj: "", nobj)\r\n\tsize := bytes / nobj // can nobj be zero?\r\n\tif size == tinyBlockSize {\r\n\t\ttotalBytes += bytes\r\n\t}\r\n}\r\n...\r\n```\r\nI try to reproduce it in other machines(x86, darwin/arm64) but it only occurs on my arm64 container. So I have to say I can't make sure whether it's caused by my container or it's just a simple bug. Here are some info I just collected:\r\n\r\n- I git bisect and it points at [CL 538217](https://go-review.googlesource.com/c/go/+/538217/20)\r\n\r\n- Here is the log if I uncomment the `println`:\r\n```bash\r\n--- FAIL: Test (0.05s)\r\n    --- FAIL: Test/finprofiled.go (2.89s)\r\n        testdir_test.go:142: exit status 2\r\n            bytes:  24 \t\tnobj:  3\r\n            bytes:  16 \t\tnobj:  2\r\n            bytes:  80 \t\tnobj:  1\r\n            bytes:  16 \t\tnobj:  1\r\n            bytes:  576 \t\tnobj:  6\r\n            bytes:  416 \t\tnobj:  1\r\n            bytes:  416 \t\tnobj:  1\r\n            bytes:  1400 \t\tnobj:  1\r\n            bytes:  6240 \t\tnobj:  15\r\n            bytes:  6240 \t\tnobj:  15\r\n            bytes:  21000 \t\tnobj:  15\r\n            bytes:  4194320 \t\tnobj:  262145\r\n            bytes:  5824 \t\tnobj:  14\r\n            bytes:  5824 \t\tnobj:  14\r\n            bytes:  19600 \t\tnobj:  14\r\n            bytes:  2296 \t\tnobj:  1\r\n            bytes:  -8 \t\tnobj:  0 # Is that valid?\r\n            panic: runtime error: integer divide by zero\r\n\r\n            goroutine 1 [running]:\r\n            main.main()\r\n            \t/home/ruisun01/work/aarch64/go/test/finprofiled.go:61 +0x340\r\n\r\nFAIL\r\nFAIL\tcmd/internal/testdir\t2.947s\r\nFAIL\r\n```\r\n\r\n",bash\r\n--- FAIL: Test (0.08s)\r\n    --- FAIL: Test/finprofiled.go (2.13s)\r\n        testdir_test.go:142: exit status 2\r\n            panic: runtime error: integer divide by zero\r\n\r\n            goroutine 1 [running]:\r\n            main.main()\r\n            \t/home/ruisun01/work/aarch64/go/test/finprofiled.go:60 +0x2d4\r\n\r\nFAIL\r\nFAIL\tcmd/internal/testdir\t2.240s\r\nFAIL\r\n
64113,"runtime: running with delve on arm64 throws nosplit stack over 792 byte limit  ### What version of Go are you using (`go version`)?\r\n\r\ntip\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nOnly tip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/arm64\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\ndelve starts up\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 80 bytes, calls syscall.ptrace1<1>\r\n        grows 160 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 96 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<22>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<22>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\nexit status 1\r\n```\r\n\r\nThis was introduced by [CL 494187](https://go-review.googlesource.com/c/go/+/494187). Based on the comments there and my short investigation it appears that what is causing this is the new tracer allocated on the stack in exitsyscall.\r\n\r\ncc @mknyszek \r\n",NeedsFix|release-blocker|compiler/runtime,mknyszek,"### What version of Go are you using (`go version`)?\r\n\r\ntip\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nOnly tip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/arm64\r\n\r\n### What did you do?\r\n\r\n```bash\r\ndlv debug cmd/go # any go program if that matters\r\n```\r\n\r\n### What did you expect to see?\r\n\r\ndelve starts up\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 80 bytes, calls syscall.ptrace1<1>\r\n        grows 160 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 96 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<22>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<22>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        8 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    8 bytes over limit\r\nexit status 1\r\n```\r\n\r\nThis was introduced by [CL 494187](https://go-review.googlesource.com/c/go/+/494187). Based on the comments there and my short investigation it appears that what is causing this is the new tracer allocated on the stack in exitsyscall.\r\n\r\ncc @mknyszek \r\n",bash\r\ndlv debug cmd/go # any go program if that matters\r\n
64034,"slog: TextHandler crash with `nil` TextMarshaller### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n1.21 (play.golang.org)\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ntriggers on play.golang.org\r\n\r\n### What did you do?\r\n\r\nThe `slog` package texthandler panics for certain cases of `nil`, specifically if the object being nil  is a `TextMarshaller`. Other types of `nil` values are handled, as far as I can tell, and the json handler handles this case fine, so it seems to be that it's a bug. \r\n\r\nRepro\r\n\r\n\r\nOutput\r\n```\r\n{""time"":""2009-11-10T23:00:00Z"",""level"":""INFO"",""msg"":""hello"",""stringer"":null}\r\n{""time"":""2009-11-10T23:00:00Z"",""level"":""INFO"",""msg"":""hello"",""marshaller"":null}\r\ntime=2009-11-10T23:00:00.000Z level=INFO msg=hello stringer=test\r\npanic: value method time.Time.MarshalText called using nil *Time pointer\r\n\r\ngoroutine 1 [running]:\r\ntime.(*Time).MarshalText(0xc000117888?)\r\n\t<autogenerated>:1 +0x3a\r\nlog/slog.appendTextValue(0xc000117888, {{}, 0x4cdee0?, {0x4cdee0?, 0x0?}})\r\n\t/usr/local/go-faketime/src/log/slog/text_handler.go:106 +0x28e\r\nlog/slog.(*handleState).appendValue(0xc000117888, {{}, 0x4d0fff?, {0x4cdee0?, 0x0?}})\r\n\t/usr/local/go-faketime/src/log/slog/handler.go:519 +0x31\r\n```\r\n\r\nCrashing code\r\n\r\n",NeedsFix,jba,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n1.21 (play.golang.org)\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ntriggers on play.golang.org\r\n\r\n### What did you do?\r\n\r\nThe `slog` package texthandler panics for certain cases of `nil`, specifically if the object being nil  is a `TextMarshaller`. Other types of `nil` values are handled, as far as I can tell, and the json handler handles this case fine, so it seems to be that it's a bug. \r\n\r\nRepro\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""log/slog""\r\n\t""os""\r\n\t""time""\r\n)\r\n\r\ntype custom struct{}\r\n\r\nfunc (c *custom) String() string {\r\n\treturn ""test""\r\n}\r\n\r\nfunc main() {\r\n\tlogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\r\n\tlogger.Info(""hello"", ""stringer"", (*custom)(nil))\r\n\tlogger.Info(""hello"", ""marshaller"", (*time.Time)(nil))\r\n\r\n\tlogger = slog.New(slog.NewTextHandler(os.Stdout, nil))\r\n\tlogger.Info(""hello"", ""stringer"", (*custom)(nil))\r\n\tlogger.Info(""hello"", ""marshaller"", (*time.Time)(nil))\r\n}\r\n```\r\n\r\nOutput\r\n```\r\n{""time"":""2009-11-10T23:00:00Z"",""level"":""INFO"",""msg"":""hello"",""stringer"":null}\r\n{""time"":""2009-11-10T23:00:00Z"",""level"":""INFO"",""msg"":""hello"",""marshaller"":null}\r\ntime=2009-11-10T23:00:00.000Z level=INFO msg=hello stringer=test\r\npanic: value method time.Time.MarshalText called using nil *Time pointer\r\n\r\ngoroutine 1 [running]:\r\ntime.(*Time).MarshalText(0xc000117888?)\r\n\t<autogenerated>:1 +0x3a\r\nlog/slog.appendTextValue(0xc000117888, {{}, 0x4cdee0?, {0x4cdee0?, 0x0?}})\r\n\t/usr/local/go-faketime/src/log/slog/text_handler.go:106 +0x28e\r\nlog/slog.(*handleState).appendValue(0xc000117888, {{}, 0x4d0fff?, {0x4cdee0?, 0x0?}})\r\n\t/usr/local/go-faketime/src/log/slog/handler.go:519 +0x31\r\n```\r\n\r\nCrashing code\r\n```golang\r\nfunc appendTextValue(s *handleState, v Value) error {\r\n\tswitch v.Kind() {\r\n\tcase KindString:\r\n\t\ts.appendString(v.str())\r\n\tcase KindTime:\r\n\t\ts.appendTime(v.time())\r\n\tcase KindAny:\r\n\t\tif tm, ok := v.any.(encoding.TextMarshaler); ok {\r\n\t\t\tdata, err := tm.MarshalText() <-- boom\r\n```\r\n","golang\r\npackage main\r\n\r\nimport (\r\n\t""log/slog""\r\n\t""os""\r\n\t""time""\r\n)\r\n\r\ntype custom struct{}\r\n\r\nfunc (c *custom) String() string {\r\n\treturn ""test""\r\n}\r\n\r\nfunc main() {\r\n\tlogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\r\n\tlogger.Info(""hello"", ""stringer"", (*custom)(nil))\r\n\tlogger.Info(""hello"", ""marshaller"", (*time.Time)(nil))\r\n\r\n\tlogger = slog.New(slog.NewTextHandler(os.Stdout, nil))\r\n\tlogger.Info(""hello"", ""stringer"", (*custom)(nil))\r\n\tlogger.Info(""hello"", ""marshaller"", (*time.Time)(nil))\r\n}\r\n"
64028,"path/filepath: Clean removes ending slash for volume on Windows in Go 1.21.4Go 1.21.4 fixed a problem in filepath.Clean regarding `\\??\\` paths. However, it also removed the ending slash for volumes in `\\\\?\\` paths. Is this expected? The docs still state\r\n\r\n> The returned path ends in a slash only if it represents a root directory, such as ""/"" on Unix or `C:\\` on Windows.\r\n\r\nThe following test passes on Go 1.21.3.\r\n\r\n\r\n\r\nOn Go 1.21.4 this happens:\r\n\r\n```\r\nPS C:\\Users\\jb\\dev\\syncthing\\lib\\fs> go1.21.4 test -run FilepathClean\r\n--- FAIL: TestFilepathClean (0.00s)\r\n    basicfs_windows_test.go:30: filepath.Clean(\\\\?\\C:\\) => \\\\?\\C: expected \\\\?\\C:\\\r\nFAIL\r\nexit status 1\r\nFAIL    github.com/syncthing/syncthing/lib/fs   0.062s\r\n```\r\n\r\n",Security|OS-Windows|NeedsFix|release-blocker,neild,"Go 1.21.4 fixed a problem in filepath.Clean regarding `\\??\\` paths. However, it also removed the ending slash for volumes in `\\\\?\\` paths. Is this expected? The docs still state\r\n\r\n> The returned path ends in a slash only if it represents a root directory, such as ""/"" on Unix or `C:\\` on Windows.\r\n\r\nThe following test passes on Go 1.21.3.\r\n\r\n```go\r\nfunc TestFilepathClean(t *testing.T) {\r\n\tcases := []struct {\r\n\t\tin  string\r\n\t\tout string\r\n\t}{\r\n\t\t{`C:\\`, `C:\\`},\r\n\t\t{`\\\\?\\C:\\`, `\\\\?\\C:\\`},\r\n\t}\r\n\tfor _, c := range cases {\r\n\t\tif out := filepath.Clean(c.in); out != c.out {\r\n\t\t\tt.Errorf(""filepath.Clean(%s) => %s expected %s"", c.in, out, c.out)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nOn Go 1.21.4 this happens:\r\n\r\n```\r\nPS C:\\Users\\jb\\dev\\syncthing\\lib\\fs> go1.21.4 test -run FilepathClean\r\n--- FAIL: TestFilepathClean (0.00s)\r\n    basicfs_windows_test.go:30: filepath.Clean(\\\\?\\C:\\) => \\\\?\\C: expected \\\\?\\C:\\\r\nFAIL\r\nexit status 1\r\nFAIL    github.com/syncthing/syncthing/lib/fs   0.062s\r\n```\r\n\r\n","go\r\nfunc TestFilepathClean(t *testing.T) {\r\n\tcases := []struct {\r\n\t\tin  string\r\n\t\tout string\r\n\t}{\r\n\t\t{`C:\\`, `C:\\`},\r\n\t\t{`\\\\?\\C:\\`, `\\\\?\\C:\\`},\r\n\t}\r\n\tfor _, c := range cases {\r\n\t\tif out := filepath.Clean(c.in); out != c.out {\r\n\t\t\tt.Errorf(""filepath.Clean(%s) => %s expected %s"", c.in, out, c.out)\r\n\t\t}\r\n\t}\r\n}\r\n"
64023,"x/tools/internal/diff: suboptimal line edits for a common prefixNoticed in https://go.dev/cl/539656. The x/tools/internal/diff package produces suboptimal line diffs, in that it generates edits inside of common prefixes.\r\n\r\nHere is a minimal example: https://go.dev/play/p/kS7ykVOJzbm  \r\n\r\n\r\n\r\nWhile the edits are valid, I think it's a bug that an edit is inserted inside a common prefix. Pragmatically, it causes the unified diff to be rather confusing. It may also cause non-nonsensical movement of the cursor in gopls, but I've yet to demonstrate this in practice.\r\n\r\nAt the very least, I think this warrants investigation.\r\n\r\nCC @pjweinb @adonovan ",gopls|Tools,pjweinb|adonovan,"Noticed in https://go.dev/cl/539656. The x/tools/internal/diff package produces suboptimal line diffs, in that it generates edits inside of common prefixes.\r\n\r\nHere is a minimal example: https://go.dev/play/p/kS7ykVOJzbm  \r\n\r\n```go\r\ndiff.Strings(""\\n\\n"", ""\\n\\na\\n"") // [{Start:0,End:0,New:""\\n""} {Start:1,End:1,New:""a""}]\r\n```\r\n\r\nWhile the edits are valid, I think it's a bug that an edit is inserted inside a common prefix. Pragmatically, it causes the unified diff to be rather confusing. It may also cause non-nonsensical movement of the cursor in gopls, but I've yet to demonstrate this in practice.\r\n\r\nAt the very least, I think this warrants investigation.\r\n\r\nCC @pjweinb @adonovan ","go\r\ndiff.Strings(""\\n\\n"", ""\\n\\na\\n"") // [{Start:0,End:0,New:""\\n""} {Start:1,End:1,New:""a""}]\r\n"
64020,"net/http: Segmentation violation when using an IPSec VPN Tunnel (Go 1.19.8/Go 1.20.4/Go 1.21.4)This is continuation of https://github.com/golang/go/issues/61552 since that one is closed. \r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. All versions after go.19, and including, reproduce the issue.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""{HOME}/Library/Caches/go-build""\r\nGOENV=""{HOME}/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""{HOME}/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/nima.yahyazadeh/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/opt/go/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/opt/go/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""{XXX}/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/3dxjlr5n0d910kqqgq_lcp1w0000gp/T/go-build3602641218=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI compiled a client code and server code as following on my M1 Mac and uploaded to a linux Server.\r\n\r\nFor client I compiled using `GOOS=linux GOARCH=amd64 go build -o client`\r\n\r\n\r\n\r\n\r\nFor server I compiled using `GOOS=linux GOARCH=amd64 go build -o server`\r\n\r\n\r\n\r\nI ran the server in 3 different EC2 instances and in docker. \r\n\r\n```Dockerfile\r\nFROM scratch\r\n\r\nCOPY server .\r\n\r\nENTRYPOINT [""./server""]\r\n```\r\n\r\nI used the following command to run it.\r\n\r\n```sh\r\ndocker build . -t test:latest\r\ndocker run --rm --network host test:latest\r\n```\r\n\r\nWhen I ran the server on the three different machines using host networking and then exected the client I see the client panics with the following stacktraces\r\n\r\n```\r\nfatal error: unexpected signal during runtime execution\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x44bb66]\r\n\r\ngoroutine 305 [running]:\r\nruntime.throw({0x6d35fe?, 0xc000217428?})\r\n        /opt/homebrew/opt/go/libexec/src/runtime/panic.go:1047 +0x5d fp=0xc000217368 sp=0xc000217338 pc=0x43439d\r\nruntime.sigpanic()\r\n        /opt/homebrew/opt/go/libexec/src/runtime/signal_unix.go:821 +0x3e9 fp=0xc0002173c8 sp=0xc000217368 pc=0x44a429\r\nruntime.(*waitq).enqueue(...)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/chan.go:766\r\nruntime.selectgo(0xc000217750, 0xc000217558, 0x6c828e?, 0x0, 0xc000217540?, 0x1)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/select.go:316 +0x6c6 fp=0xc000217508 sp=0xc0002173c8 pc=0x4467e6\r\nnet/http.(*persistConn).roundTrip(0xc000a7b9e0, 0xc001027e40)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2638 +0x994 fp=0xc0002177c0 sp=0xc000217508 pc=0x6461b4\r\nnet/http.(*Transport).roundTrip(0x8cdda0, 0xc000223500)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:603 +0x7fa fp=0xc0002179e8 sp=0xc0002177c0 pc=0x63a2da\r\nnet/http.(*Transport).RoundTrip(0x26?, 0x73aea0?)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/roundtrip.go:17 +0x19 fp=0xc000217a08 sp=0xc0002179e8 pc=0x6247d9\r\nnet/http.send(0xc000223500, {0x73aea0, 0x8cdda0}, {0x8?, 0x6bac80?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:252 +0x5f7 fp=0xc000217c00 sp=0xc000217a08 pc=0x5edef7\r\nnet/http.(*Client).send(0x8d3d40, 0xc000223500, {0xc001095520?, 0x6?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:176 +0x9b fp=0xc000217c78 sp=0xc000217c00 pc=0x5ed77b\r\nnet/http.(*Client).do(0x8d3d40, 0xc000223500)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:716 +0x8fb fp=0xc000217e80 sp=0xc000217c78 pc=0x5ef99b\r\nnet/http.(*Client).Do(...)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:582\r\nmain.write(0x73b140?, {0x6ca23e?, 0xc000217f98?}, 0x1?, {0x1?, 0x0?})\r\n....\r\n```\r\n\r\n```\r\nfatal error: runtime: sudog with non-nil next\r\n\r\ngoroutine 140 [running]:\r\nruntime.throw({0x6cf467?, 0x4e636c?})\r\n        /opt/homebrew/opt/go/libexec/src/runtime/panic.go:1047 +0x5d fp=0xc00016f1b8 sp=0xc00016f188 pc=0x43439d\r\nruntime.releaseSudog(0xc00016f2e0?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/proc.go:443 +0x316 fp=0xc00016f228 sp=0xc00016f1b8 pc=0x4377f6\r\nruntime.semacquire1(0xc0011169a8, 0xa0?, 0x1, 0x0, 0x40?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/sema.go:168 +0x2b9 fp=0xc00016f290 sp=0xc00016f228 pc=0x447a79\r\ninternal/poll.runtime_Semacquire(0x7f75faa8b418?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/sema.go:67 +0x27 fp=0xc00016f2c8 sp=0xc00016f290 pc=0x461227\r\ninternal/poll.(*FD).Close(0xc001116980)\r\n        /opt/homebrew/opt/go/libexec/src/internal/poll/fd_unix.go:116 +0x6d fp=0xc00016f2f0 sp=0xc00016f2c8 pc=0x4ad58d\r\nnet.(*netFD).Close(0xc001116980)\r\n        /opt/homebrew/opt/go/libexec/src/net/fd_posix.go:37 +0x38 fp=0xc00016f320 sp=0xc00016f2f0 pc=0x4dde18\r\nnet.(*conn).Close(0xc0005e0340)\r\n        /opt/homebrew/opt/go/libexec/src/net/net.go:207 +0x45 fp=0xc00016f350 sp=0xc00016f320 pc=0x4e8fc5\r\nnet.(*TCPConn).Close(0x445f93?)\r\n        <autogenerated>:1 +0x25 fp=0xc00016f368 sp=0xc00016f350 pc=0x4f47a5\r\nnet/http.(*persistConn).closeLocked(0xc000b9e120, {0x73ac60, 0xc00008ca40})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2732 +0x130 fp=0xc00016f3f0 sp=0xc00016f368 pc=0x646bb0\r\nnet/http.(*persistConn).cancelRequest(0x4112e4?, {0x73ac60?, 0xc00008c170?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:1991 +0xe5 fp=0xc00016f450 sp=0xc00016f3f0 pc=0x642f65\r\nnet/http.(*persistConn).cancelRequest-fm({0x73ac60?, 0xc00008c170?})\r\n        <autogenerated>:1 +0x39 fp=0xc00016f478 sp=0xc00016f450 pc=0x651f19\r\nnet/http.(*Transport).cancelRequest(0x8cdda0, {0xc00016f528?}, {0x73ac60, 0xc00008c170})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:810 +0xee fp=0xc00016f4d8 sp=0xc00016f478 pc=0x63b36e\r\nnet/http.(*persistConn).roundTrip(0xc000b9e120, 0xc000cc2380)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2684 +0xbac fp=0xc00016f790 sp=0xc00016f4d8 pc=0x6463cc\r\nnet/http.(*Transport).roundTrip(0x8cdda0, 0xc0007d1a00)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:603 +0x7fa fp=0xc00016f9b8 sp=0xc00016f790 pc=0x63a2da\r\nnet/http.(*Transport).RoundTrip(0xc00016f9f8?, 0x73aea0?)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/roundtrip.go:17 +0x19 fp=0xc00016f9d8 sp=0xc00016f9b8 pc=0x6247d9\r\nnet/http.send(0xc0007d1a00, {0x73aea0, 0x8cdda0}, {0x8?, 0x6bac80?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:252 +0x5f7 fp=0xc00016fbd0 sp=0xc00016f9d8 pc=0x5edef7\r\nnet/http.(*Client).send(0x8d3d40, 0xc0007d1a00, {0xc000ded2b0?, 0x6?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:176 +0x9b fp=0xc00016fc48 sp=0xc00016fbd0 pc=0x5ed77b\r\nnet/http.(*Client).do(0x8d3d40, 0xc0007d1a00)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:716 +0x8fb fp=0xc00016fe50 sp=0xc00016fc48 pc=0x5ef99b\r\nnet/http.(*Client).Do(...)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:582\r\nmain.writeCancel(0x73b140?, {0x6ca22a, 0x14}, 0x1?, {0x1?, 0x0?})\r\n....\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected not to see a panic.\r\n\r\n\r\n### What did you see instead?\r\n\r\nI saw a panic from within the standard library. This issue occurred when one of the servers was down.\r\n\r\n",NeedsInvestigation|compiler/runtime,mknyszek,"This is continuation of https://github.com/golang/go/issues/61552 since that one is closed. \r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. All versions after go.19, and including, reproduce the issue.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""{HOME}/Library/Caches/go-build""\r\nGOENV=""{HOME}/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""{HOME}/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/nima.yahyazadeh/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/opt/go/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/opt/go/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""{XXX}/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/3dxjlr5n0d910kqqgq_lcp1w0000gp/T/go-build3602641218=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI compiled a client code and server code as following on my M1 Mac and uploaded to a linux Server.\r\n\r\nFor client I compiled using `GOOS=linux GOARCH=amd64 go build -o client`\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""bytes""\r\n\t""context""\r\n\t""flag""\r\n\t""fmt""\r\n\t""io""\r\n\t""io/ioutil""\r\n\t""net/http""\r\n\t""strings""\r\n\t""time""\r\n)\r\n\r\nvar hostsFlag = flag.String(""hosts"", ""localhost"", """")\r\nvar portFlag = flag.Int(""port"", 3000, """")\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\r\n\thosts := strings.Split(*hostsFlag, "","")\r\n\tports := []int{*portFlag}\r\n\r\n\t<-time.After(2 * time.Second)\r\n\r\n\tfor _, h := range hosts {\r\n\t\tfor _, p := range ports {\r\n\t\t\tclient := http.DefaultClient\r\n\t\t\tfor i := 0; i < 100; i++ {\r\n\t\t\t\tgo func(host string, port int) {\r\n\t\t\t\t\tn := 0\r\n\t\t\t\t\tfor {\r\n\t\t\t\t\t\tn++\r\n\t\t\t\t\t\tif n%10 == 0 {\r\n\t\t\t\t\t\t\tprintln(host, n)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twrite(client, host, port)\r\n\t\t\t\t\t\twriteCancel(client, host, port)\r\n\t\t\t\t\t}\r\n\t\t\t\t}(h, p)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tselect {}\r\n}\r\n\r\nfunc write(client *http.Client, host string, port int) {\r\n\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(""http://%s:%d/hello"", host, port), bytes.NewReader([]byte(`{}`)))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tresp, err := client.Do(req)\r\n\tdefer CloseSafe(resp)\r\n\tif err != nil {\r\n\t\tif err != nil {\r\n\t\t\tprintln(err.Error())\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\thandleError(resp)\r\n}\r\n\r\nfunc writeCancel(client *http.Client, host string, port int) {\r\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\r\n\treq, err := http.NewRequestWithContext(ctx, http.MethodPost, fmt.Sprintf(""http://%s:%d/hello"", host, port), bytes.NewReader([]byte(`{}`)))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tgo cancel()\r\n\r\n\tresp, err := client.Do(req)\r\n\tdefer CloseSafe(resp)\r\n}\r\n\r\nfunc handleError(resp *http.Response) {\r\n\tif resp.StatusCode != http.StatusOK {\r\n\t\t_, err := io.ReadAll(resp.Body)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc CloseSafe(resp *http.Response) {\r\n\tif resp == nil || resp.Body == nil {\r\n\t\treturn\r\n\t}\r\n\r\n\t_, _ = io.Copy(ioutil.Discard, resp.Body)\r\n\t_ = resp.Body.Close()\r\n}\r\n\r\n```\r\n\r\n\r\nFor server I compiled using `GOOS=linux GOARCH=amd64 go build -o server`\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""net/http""\r\n)\r\n\r\nfunc main() {\r\n\terr := http.ListenAndServe(""0.0.0.0:3000"", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\r\n\t}))\r\n\r\n\tfmt.Println(err)\r\n}\r\n```\r\n\r\nI ran the server in 3 different EC2 instances and in docker. \r\n\r\n```Dockerfile\r\nFROM scratch\r\n\r\nCOPY server .\r\n\r\nENTRYPOINT [""./server""]\r\n```\r\n\r\nI used the following command to run it.\r\n\r\n```sh\r\ndocker build . -t test:latest\r\ndocker run --rm --network host test:latest\r\n```\r\n\r\nWhen I ran the server on the three different machines using host networking and then exected the client I see the client panics with the following stacktraces\r\n\r\n```\r\nfatal error: unexpected signal during runtime execution\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x44bb66]\r\n\r\ngoroutine 305 [running]:\r\nruntime.throw({0x6d35fe?, 0xc000217428?})\r\n        /opt/homebrew/opt/go/libexec/src/runtime/panic.go:1047 +0x5d fp=0xc000217368 sp=0xc000217338 pc=0x43439d\r\nruntime.sigpanic()\r\n        /opt/homebrew/opt/go/libexec/src/runtime/signal_unix.go:821 +0x3e9 fp=0xc0002173c8 sp=0xc000217368 pc=0x44a429\r\nruntime.(*waitq).enqueue(...)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/chan.go:766\r\nruntime.selectgo(0xc000217750, 0xc000217558, 0x6c828e?, 0x0, 0xc000217540?, 0x1)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/select.go:316 +0x6c6 fp=0xc000217508 sp=0xc0002173c8 pc=0x4467e6\r\nnet/http.(*persistConn).roundTrip(0xc000a7b9e0, 0xc001027e40)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2638 +0x994 fp=0xc0002177c0 sp=0xc000217508 pc=0x6461b4\r\nnet/http.(*Transport).roundTrip(0x8cdda0, 0xc000223500)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:603 +0x7fa fp=0xc0002179e8 sp=0xc0002177c0 pc=0x63a2da\r\nnet/http.(*Transport).RoundTrip(0x26?, 0x73aea0?)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/roundtrip.go:17 +0x19 fp=0xc000217a08 sp=0xc0002179e8 pc=0x6247d9\r\nnet/http.send(0xc000223500, {0x73aea0, 0x8cdda0}, {0x8?, 0x6bac80?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:252 +0x5f7 fp=0xc000217c00 sp=0xc000217a08 pc=0x5edef7\r\nnet/http.(*Client).send(0x8d3d40, 0xc000223500, {0xc001095520?, 0x6?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:176 +0x9b fp=0xc000217c78 sp=0xc000217c00 pc=0x5ed77b\r\nnet/http.(*Client).do(0x8d3d40, 0xc000223500)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:716 +0x8fb fp=0xc000217e80 sp=0xc000217c78 pc=0x5ef99b\r\nnet/http.(*Client).Do(...)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:582\r\nmain.write(0x73b140?, {0x6ca23e?, 0xc000217f98?}, 0x1?, {0x1?, 0x0?})\r\n....\r\n```\r\n\r\n```\r\nfatal error: runtime: sudog with non-nil next\r\n\r\ngoroutine 140 [running]:\r\nruntime.throw({0x6cf467?, 0x4e636c?})\r\n        /opt/homebrew/opt/go/libexec/src/runtime/panic.go:1047 +0x5d fp=0xc00016f1b8 sp=0xc00016f188 pc=0x43439d\r\nruntime.releaseSudog(0xc00016f2e0?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/proc.go:443 +0x316 fp=0xc00016f228 sp=0xc00016f1b8 pc=0x4377f6\r\nruntime.semacquire1(0xc0011169a8, 0xa0?, 0x1, 0x0, 0x40?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/sema.go:168 +0x2b9 fp=0xc00016f290 sp=0xc00016f228 pc=0x447a79\r\ninternal/poll.runtime_Semacquire(0x7f75faa8b418?)\r\n        /opt/homebrew/opt/go/libexec/src/runtime/sema.go:67 +0x27 fp=0xc00016f2c8 sp=0xc00016f290 pc=0x461227\r\ninternal/poll.(*FD).Close(0xc001116980)\r\n        /opt/homebrew/opt/go/libexec/src/internal/poll/fd_unix.go:116 +0x6d fp=0xc00016f2f0 sp=0xc00016f2c8 pc=0x4ad58d\r\nnet.(*netFD).Close(0xc001116980)\r\n        /opt/homebrew/opt/go/libexec/src/net/fd_posix.go:37 +0x38 fp=0xc00016f320 sp=0xc00016f2f0 pc=0x4dde18\r\nnet.(*conn).Close(0xc0005e0340)\r\n        /opt/homebrew/opt/go/libexec/src/net/net.go:207 +0x45 fp=0xc00016f350 sp=0xc00016f320 pc=0x4e8fc5\r\nnet.(*TCPConn).Close(0x445f93?)\r\n        <autogenerated>:1 +0x25 fp=0xc00016f368 sp=0xc00016f350 pc=0x4f47a5\r\nnet/http.(*persistConn).closeLocked(0xc000b9e120, {0x73ac60, 0xc00008ca40})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2732 +0x130 fp=0xc00016f3f0 sp=0xc00016f368 pc=0x646bb0\r\nnet/http.(*persistConn).cancelRequest(0x4112e4?, {0x73ac60?, 0xc00008c170?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:1991 +0xe5 fp=0xc00016f450 sp=0xc00016f3f0 pc=0x642f65\r\nnet/http.(*persistConn).cancelRequest-fm({0x73ac60?, 0xc00008c170?})\r\n        <autogenerated>:1 +0x39 fp=0xc00016f478 sp=0xc00016f450 pc=0x651f19\r\nnet/http.(*Transport).cancelRequest(0x8cdda0, {0xc00016f528?}, {0x73ac60, 0xc00008c170})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:810 +0xee fp=0xc00016f4d8 sp=0xc00016f478 pc=0x63b36e\r\nnet/http.(*persistConn).roundTrip(0xc000b9e120, 0xc000cc2380)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:2684 +0xbac fp=0xc00016f790 sp=0xc00016f4d8 pc=0x6463cc\r\nnet/http.(*Transport).roundTrip(0x8cdda0, 0xc0007d1a00)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/transport.go:603 +0x7fa fp=0xc00016f9b8 sp=0xc00016f790 pc=0x63a2da\r\nnet/http.(*Transport).RoundTrip(0xc00016f9f8?, 0x73aea0?)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/roundtrip.go:17 +0x19 fp=0xc00016f9d8 sp=0xc00016f9b8 pc=0x6247d9\r\nnet/http.send(0xc0007d1a00, {0x73aea0, 0x8cdda0}, {0x8?, 0x6bac80?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:252 +0x5f7 fp=0xc00016fbd0 sp=0xc00016f9d8 pc=0x5edef7\r\nnet/http.(*Client).send(0x8d3d40, 0xc0007d1a00, {0xc000ded2b0?, 0x6?, 0x0?})\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:176 +0x9b fp=0xc00016fc48 sp=0xc00016fbd0 pc=0x5ed77b\r\nnet/http.(*Client).do(0x8d3d40, 0xc0007d1a00)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:716 +0x8fb fp=0xc00016fe50 sp=0xc00016fc48 pc=0x5ef99b\r\nnet/http.(*Client).Do(...)\r\n        /opt/homebrew/opt/go/libexec/src/net/http/client.go:582\r\nmain.writeCancel(0x73b140?, {0x6ca22a, 0x14}, 0x1?, {0x1?, 0x0?})\r\n....\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected not to see a panic.\r\n\r\n\r\n### What did you see instead?\r\n\r\nI saw a panic from within the standard library. This issue occurred when one of the servers was down.\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""bytes""\r\n\t""context""\r\n\t""flag""\r\n\t""fmt""\r\n\t""io""\r\n\t""io/ioutil""\r\n\t""net/http""\r\n\t""strings""\r\n\t""time""\r\n)\r\n\r\nvar hostsFlag = flag.String(""hosts"", ""localhost"", """")\r\nvar portFlag = flag.Int(""port"", 3000, """")\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\r\n\thosts := strings.Split(*hostsFlag, "","")\r\n\tports := []int{*portFlag}\r\n\r\n\t<-time.After(2 * time.Second)\r\n\r\n\tfor _, h := range hosts {\r\n\t\tfor _, p := range ports {\r\n\t\t\tclient := http.DefaultClient\r\n\t\t\tfor i := 0; i < 100; i++ {\r\n\t\t\t\tgo func(host string, port int) {\r\n\t\t\t\t\tn := 0\r\n\t\t\t\t\tfor {\r\n\t\t\t\t\t\tn++\r\n\t\t\t\t\t\tif n%10 == 0 {\r\n\t\t\t\t\t\t\tprintln(host, n)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twrite(client, host, port)\r\n\t\t\t\t\t\twriteCancel(client, host, port)\r\n\t\t\t\t\t}\r\n\t\t\t\t}(h, p)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tselect {}\r\n}\r\n\r\nfunc write(client *http.Client, host string, port int) {\r\n\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(""http://%s:%d/hello"", host, port), bytes.NewReader([]byte(`{}`)))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tresp, err := client.Do(req)\r\n\tdefer CloseSafe(resp)\r\n\tif err != nil {\r\n\t\tif err != nil {\r\n\t\t\tprintln(err.Error())\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\thandleError(resp)\r\n}\r\n\r\nfunc writeCancel(client *http.Client, host string, port int) {\r\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\r\n\treq, err := http.NewRequestWithContext(ctx, http.MethodPost, fmt.Sprintf(""http://%s:%d/hello"", host, port), bytes.NewReader([]byte(`{}`)))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tgo cancel()\r\n\r\n\tresp, err := client.Do(req)\r\n\tdefer CloseSafe(resp)\r\n}\r\n\r\nfunc handleError(resp *http.Response) {\r\n\tif resp.StatusCode != http.StatusOK {\r\n\t\t_, err := io.ReadAll(resp.Body)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc CloseSafe(resp *http.Response) {\r\n\tif resp == nil || resp.Body == nil {\r\n\t\treturn\r\n\t}\r\n\r\n\t_, _ = io.Copy(ioutil.Discard, resp.Body)\r\n\t_ = resp.Body.Close()\r\n}\r\n\r\n"
63945,"cmd/compile: FuncForPC on a generic struct method is different from a non-generic struct### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip. [Also on Go Playground](https://go.dev/play/p/z5UHsd1HZeP).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mitar/.cache/go-build'\r\nGOENV='/home/mitar/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mitar/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mitar/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1231630685=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code to get name of a function passed as a pointer:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nmain.FuncName\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nmain.FuncName\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\nmain.(*Bar[...]).Get.func1\r\n```\r\n",NeedsInvestigation|compiler/runtime,thanm,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip. [Also on Go Playground](https://go.dev/play/p/z5UHsd1HZeP).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mitar/.cache/go-build'\r\nGOENV='/home/mitar/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mitar/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mitar/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='/usr/bin/gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1231630685=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code to get name of a function passed as a pointer:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""reflect""\r\n\t""runtime""\r\n)\r\n\r\nfunc name(f any) string {\r\n\tfn := runtime.FuncForPC(reflect.ValueOf(f).Pointer())\r\n\tif fn == nil {\r\n\t\treturn """"\r\n\t}\r\n\treturn fn.Name()\r\n}\r\n\r\nfunc FuncName() {}\r\n\r\ntype Foo struct{}\r\n\r\nfunc (_ *Foo) FuncName() {}\r\n\r\nfunc (f *Foo) Get() string {\r\n\treturn name(f.FuncName)\r\n}\r\n\r\ntype Bar[T any] struct{}\r\n\r\nfunc (_ *Bar[T]) FuncName() {}\r\n\r\nfunc (b *Bar[T]) Get() string {\r\n\treturn name(b.FuncName)\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(name(FuncName))\r\n\tfmt.Println(name((&Foo{}).FuncName))\r\n\tfmt.Println((&Foo{}).Get())\r\n\tfmt.Println(name((&Bar[int]{}).FuncName))\r\n\tfmt.Println((&Bar[int]{}).Get())\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nmain.FuncName\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nmain.FuncName\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Foo).FuncName-fm\r\nmain.(*Bar[...]).FuncName-fm\r\nmain.(*Bar[...]).Get.func1\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""reflect""\r\n\t""runtime""\r\n)\r\n\r\nfunc name(f any) string {\r\n\tfn := runtime.FuncForPC(reflect.ValueOf(f).Pointer())\r\n\tif fn == nil {\r\n\t\treturn """"\r\n\t}\r\n\treturn fn.Name()\r\n}\r\n\r\nfunc FuncName() {}\r\n\r\ntype Foo struct{}\r\n\r\nfunc (_ *Foo) FuncName() {}\r\n\r\nfunc (f *Foo) Get() string {\r\n\treturn name(f.FuncName)\r\n}\r\n\r\ntype Bar[T any] struct{}\r\n\r\nfunc (_ *Bar[T]) FuncName() {}\r\n\r\nfunc (b *Bar[T]) Get() string {\r\n\treturn name(b.FuncName)\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(name(FuncName))\r\n\tfmt.Println(name((&Foo{}).FuncName))\r\n\tfmt.Println((&Foo{}).Get())\r\n\tfmt.Println(name((&Bar[int]{}).FuncName))\r\n\tfmt.Println((&Bar[int]{}).Get())\r\n}\r\n"
63924,"cmd/pprof:  If the file under the current path contains a colon, go tool pprof will parse it into a url and will not work properly. <!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.22-6dd7462a04 Fri Oct 13 17:10:31 2023 +0000 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/myname/Library/Caches/go-build'\r\nGOENV='/Users/myname/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/myname/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/myname/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/Users/myname/mypath/go'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/myname/mypath/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-6dd7462a04 Fri Oct 13 17:10:31 2023 +0000' # I compiled it myself, it can be ignored and has nothing to do with the version.\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/myname/mypath/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/9t/839s3jmj73bcgyp5x_xh3gw00000gn/T/go-build3891298911=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\nI helped a colleague write a sample code to obtain the pprof file when the memory exceeds the threshold.\r\n\r\n\r\n\r\n\r\nI tested it locally and everything was fine. He made certain modifications and then released it to the production environment. When the memory surge occurred, this program obtained the pprof file as expected, but what was confusing and surprising was that when using go tool pprof thefile, an error was reported:\r\n\r\n\r\n```\r\nFetching profile over HTTP from http://mem_2023-11-01_14:23:16/debug/pprof/profile\r\n\r\nprofile.pprof.2023-11-03_14:23:16: Get ""http://mem_2023-11-01_14:23:16/debug/pprof/profile"": dial tcp: lookup mem_2023-11-01_14:23: no such host\r\n```\r\n\r\nI spent a lot of time trying to research, and one of his modifications was to change the timestamp in the file path to time.Now().Format(""2006-01-02_15:04:05"") in order to be more intuitive.\r\n\r\nThat is   \r\n\r\n `filepath := ""/xxx/yyy/path/mem"" + ""."" + strconv.Itoa(int(time.Now().Unix())) ---> filepath := ""/xxx/yyy/path /mem"" + ""."" + time.Now().Format(""2006-01-02_15:04:05"")`\r\n\r\nAfter adding debug information several times, it was found that it was the adjustURL method in `internal/driver/fetch.go`. Because the file name contained a colon, url.Parse parsed the file path into a url. . .\r\n\r\nThis is confusing and counter-intuitive. After many experiments, I think we can consider determining whether there is a file with the same name in the directory. If so, treat it as a file instead of a URL. \r\n\r\n(We only need to consider the case of executing go tool pprof in the directory where the profile is located. In the case of go tool pprof a/b/mem_pprof_file_2006_01_02_15:04:05, it will not be recognized as a URL now)\r\n\u200b\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI want to be able to use pprof normally without renaming the file\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\nFetching profile over HTTP from http://mem_2023-11-01_14:23:16/debug/pprof/profile\r\n\r\nprofile.pprof.2023-11-03_14:23:16: Get ""http://mem_2023-11-01_14:23:16/debug/pprof/profile"": dial tcp: lookup mem_2023-11-01_14:23: no such host\r\n```\r\n\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,cherrymui,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.22-6dd7462a04 Fri Oct 13 17:10:31 2023 +0000 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/myname/Library/Caches/go-build'\r\nGOENV='/Users/myname/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/myname/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/myname/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/Users/myname/mypath/go'\r\nGOSUMDB='off'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/myname/mypath/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-6dd7462a04 Fri Oct 13 17:10:31 2023 +0000' # I compiled it myself, it can be ignored and has nothing to do with the version.\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/myname/mypath/go/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/9t/839s3jmj73bcgyp5x_xh3gw00000gn/T/go-build3891298911=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n```\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\nI helped a colleague write a sample code to obtain the pprof file when the memory exceeds the threshold.\r\n\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""runtime""\r\n\t""runtime/pprof""\r\n\t""time""\r\n)\r\n\r\nfunc main() {\r\n\r\n\tticker := time.NewTicker(10 * time.Second)\r\n\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\ttime.Sleep(1e9)\r\n\t\t\tvar m runtime.MemStats\r\n\t\t\truntime.ReadMemStats(&m)\r\n\r\n\t\t\tmemUsage := m.Sys / 1024 / 1024 \r\n\r\n\t\t\tif memUsage > 1024 {\r\n\t\t\t\tfmt.Printf(""memory usage more than 1GB\uff1a%dMB\\n"", memUsage)\r\n\r\n\t\t\t\t// save pprof file\r\n\t\t\t\tfilepath := ""/xxx/yyy/path/mem"" + ""."" + strconv.Itoa(int(time.Now().Unix()))\r\n\r\n\t\t\t\tf, err := os.Create(filepath)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tfmt.Println(""err1:"", err)\r\n\t\t\t\t}\r\n\t\t\t\tdefer f.Close()\r\n\r\n\t\t\t\tif err2 := pprof.WriteHeapProfile(f); err2 != nil {\r\n\t\t\t\t\tfmt.Println(""err2:"", err2)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfmt.Println(""pprof data has saved in:"", filepath)\r\n\r\n\t\t\t} else {\r\n\t\t\t\tfmt.Printf(memory usage is\uff1a%dMB\\n"", memUsage)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-ticker.C:\r\n\t\t\r\n\t\t\tvar a = make([]byte, 1073741824)\r\n\t\t\t_ = a\r\n\t\t\tfmt.Println(""ticker\uff1a"", time.Now())\r\n\t\t}\r\n\t}\r\n\r\n\tselect {}\r\n\r\n}\r\n\r\n```\r\n\r\nI tested it locally and everything was fine. He made certain modifications and then released it to the production environment. When the memory surge occurred, this program obtained the pprof file as expected, but what was confusing and surprising was that when using go tool pprof thefile, an error was reported:\r\n\r\n\r\n```\r\nFetching profile over HTTP from http://mem_2023-11-01_14:23:16/debug/pprof/profile\r\n\r\nprofile.pprof.2023-11-03_14:23:16: Get ""http://mem_2023-11-01_14:23:16/debug/pprof/profile"": dial tcp: lookup mem_2023-11-01_14:23: no such host\r\n```\r\n\r\nI spent a lot of time trying to research, and one of his modifications was to change the timestamp in the file path to time.Now().Format(""2006-01-02_15:04:05"") in order to be more intuitive.\r\n\r\nThat is   \r\n\r\n `filepath := ""/xxx/yyy/path/mem"" + ""."" + strconv.Itoa(int(time.Now().Unix())) ---> filepath := ""/xxx/yyy/path /mem"" + ""."" + time.Now().Format(""2006-01-02_15:04:05"")`\r\n\r\nAfter adding debug information several times, it was found that it was the adjustURL method in `internal/driver/fetch.go`. Because the file name contained a colon, url.Parse parsed the file path into a url. . .\r\n\r\nThis is confusing and counter-intuitive. After many experiments, I think we can consider determining whether there is a file with the same name in the directory. If so, treat it as a file instead of a URL. \r\n\r\n(We only need to consider the case of executing go tool pprof in the directory where the profile is located. In the case of go tool pprof a/b/mem_pprof_file_2006_01_02_15:04:05, it will not be recognized as a URL now)\r\n\u200b\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI want to be able to use pprof normally without renaming the file\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\nFetching profile over HTTP from http://mem_2023-11-01_14:23:16/debug/pprof/profile\r\n\r\nprofile.pprof.2023-11-03_14:23:16: Get ""http://mem_2023-11-01_14:23:16/debug/pprof/profile"": dial tcp: lookup mem_2023-11-01_14:23: no such host\r\n```\r\n\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""runtime""\r\n\t""runtime/pprof""\r\n\t""time""\r\n)\r\n\r\nfunc main() {\r\n\r\n\tticker := time.NewTicker(10 * time.Second)\r\n\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\ttime.Sleep(1e9)\r\n\t\t\tvar m runtime.MemStats\r\n\t\t\truntime.ReadMemStats(&m)\r\n\r\n\t\t\tmemUsage := m.Sys / 1024 / 1024 \r\n\r\n\t\t\tif memUsage > 1024 {\r\n\t\t\t\tfmt.Printf(""memory usage more than 1GB\uff1a%dMB\\n"", memUsage)\r\n\r\n\t\t\t\t// save pprof file\r\n\t\t\t\tfilepath := ""/xxx/yyy/path/mem"" + ""."" + strconv.Itoa(int(time.Now().Unix()))\r\n\r\n\t\t\t\tf, err := os.Create(filepath)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tfmt.Println(""err1:"", err)\r\n\t\t\t\t}\r\n\t\t\t\tdefer f.Close()\r\n\r\n\t\t\t\tif err2 := pprof.WriteHeapProfile(f); err2 != nil {\r\n\t\t\t\t\tfmt.Println(""err2:"", err2)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfmt.Println(""pprof data has saved in:"", filepath)\r\n\r\n\t\t\t} else {\r\n\t\t\t\tfmt.Printf(memory usage is\uff1a%dMB\\n"", memUsage)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-ticker.C:\r\n\t\t\r\n\t\t\tvar a = make([]byte, 1073741824)\r\n\t\t\t_ = a\r\n\t\t\tfmt.Println(""ticker\uff1a"", time.Now())\r\n\t\t}\r\n\t}\r\n\r\n\tselect {}\r\n\r\n}\r\n\r\n"
63845,"cmd/go: git VCS qualifier in module path uses git:// scheme<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2460490683=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a clean docker env:\r\n\r\n\r\n\r\nI tried to get a URL containing "".git"":\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nPer https://go.dev/ref/mod#vcs-find\r\n\r\n> If the module path has a VCS qualifier (one of .bzr, .fossil, .git, .hg, .svn) at the end of a path component, the go command will use everything up to that path qualifier as the repository URL\r\n\r\n[...]\r\n\r\n> If the URL does not include a scheme (either because the module path has a VCS qualifier or because the <meta> tag lacks a scheme), the go command will try each protocol supported by the version control system. For example, with Git, the go command will try https:// then git+ssh://. Insecure protocols (like http:// and git://) may only be used if the module path is matched by the GOINSECURE environment variable.\r\n\r\ni.e. I expected that as described it will try the two schemes `https` and `git+ssh` in turn.\r\n\r\n### What did you see instead?\r\n\r\nI've definitely not set `GOINSECURE`, but I see:\r\n\r\n```\r\ngo: module dgl.cx/foo.git: git ls-remote -q origin in /go/pkg/mod/cache/vcs/b982d3896f60780c91477b0905164a9bb9b91a39d383c88b4152672c759055ab: exit status 128:\r\n\tfatal: unable to connect to dgl.cx:\r\n\tdgl.cx[0: [ipv4 address elided]]: errno=Connection refused\r\n\tdgl.cx[1: [ipv6 address elided]]: errno=Cannot assign requested address\r\n```\r\n\r\nIt's definitely trying to connect over plain git protocol (git://):\r\n\r\n```\r\n$ sudo tcpdump -n port git\r\n[...]\r\n12:40:25.143285 IP [ip elided].53232 > [ip elided].9418: Flags [S], seq 3202314552, win 64240, options [mss 1460,sackOK,TS val 1040977568 ecr 0,nop,wscale 7], length 0\r\n```\r\n",Security|NeedsFix|GoCommand|modules,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/src/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2460490683=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a clean docker env:\r\n\r\n```console\r\ndocker run -it golang:1.21.3\r\nmkdir /src\r\ncd /src\r\n```\r\n\r\nI tried to get a URL containing "".git"":\r\n\r\n```console\r\ngo mod init foo\r\ngo get dgl.cx/foo.git\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPer https://go.dev/ref/mod#vcs-find\r\n\r\n> If the module path has a VCS qualifier (one of .bzr, .fossil, .git, .hg, .svn) at the end of a path component, the go command will use everything up to that path qualifier as the repository URL\r\n\r\n[...]\r\n\r\n> If the URL does not include a scheme (either because the module path has a VCS qualifier or because the <meta> tag lacks a scheme), the go command will try each protocol supported by the version control system. For example, with Git, the go command will try https:// then git+ssh://. Insecure protocols (like http:// and git://) may only be used if the module path is matched by the GOINSECURE environment variable.\r\n\r\ni.e. I expected that as described it will try the two schemes `https` and `git+ssh` in turn.\r\n\r\n### What did you see instead?\r\n\r\nI've definitely not set `GOINSECURE`, but I see:\r\n\r\n```\r\ngo: module dgl.cx/foo.git: git ls-remote -q origin in /go/pkg/mod/cache/vcs/b982d3896f60780c91477b0905164a9bb9b91a39d383c88b4152672c759055ab: exit status 128:\r\n\tfatal: unable to connect to dgl.cx:\r\n\tdgl.cx[0: [ipv4 address elided]]: errno=Connection refused\r\n\tdgl.cx[1: [ipv6 address elided]]: errno=Cannot assign requested address\r\n```\r\n\r\nIt's definitely trying to connect over plain git protocol (git://):\r\n\r\n```\r\n$ sudo tcpdump -n port git\r\n[...]\r\n12:40:25.143285 IP [ip elided].53232 > [ip elided].9418: Flags [S], seq 3202314552, win 64240, options [mss 1460,sackOK,TS val 1040977568 ecr 0,nop,wscale 7], length 0\r\n```\r\n",console\r\ndocker run -it golang:1.21.3\r\nmkdir /src\r\ncd /src\r\n
63835,cmd/compile/internal/types2: crash in type checker for program with invalid syntax\r\ncauses the type-checker to crash with a nil panic (missing function name in syntax tree).,NeedsFix,griesemer,```Go\r\npackage p\r\n\r\nfunc (x string) []byte {\r\n        return []byte(x)\r\n}\r\n```\r\ncauses the type-checker to crash with a nil panic (missing function name in syntax tree).,Go\r\npackage p\r\n\r\nfunc (x string) []byte {\r\n        return []byte(x)\r\n}\r\n
63827,"cmd/compile: type sets are not correctly deduced for type conversion on type params### What version of Go are you using (`go version`)?\r\n\r\nGo Playground, 1.21\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nN/A, Go Playground\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/Jhx6YGrz21s\r\n\r\n### What did you expect to see?\r\n\r\nBoth `convert()` and `convert2()` are accepted by the compiler and are semantically equivalent.\r\n\r\n### What did you see instead?\r\n\r\n`convert2()` is rejected by the compiler: `cannot convert x (variable of type srcType constrained by string) to type dstType: cannot convert string (in srcType) to type []elType (in dstType)`\r\n\r\n### Details\r\n\r\n[The spec](https://go.dev/ref/spec#Conversions) says the following about type conversions of type params:\r\n\r\n> Additionally, if T or x's type V are type parameters, x can also be converted to type T if one of the following conditions applies:\r\n>\r\n>  - Both V and T are type parameters and a value of each type in V's type set can be converted to each type in T's type set.\r\n\r\nConsider the following code:\r\n\r\n\r\n\r\nHere `srcType`'s type set should be just `string`, and `dstType`'s type set is `[]rune|[]byte`. As per spec, `string` can be converted to both `[]rune` and `[]byte`:\r\n\r\n> A non-constant value x can be converted to type T in any of these cases:\r\n>\r\n> - ...\r\n> - x is a string and T is a slice of bytes or runes.\r\n\r\nSo, conversion should be allowed, assuming the compiler is able to correctly deduce type set for `dstType`.\r\n\r\nThe simplest example of the issue I was able to find:\r\n\r\n\r\n\r\nThe next step of eliminating elType makes the error disappear:\r\n\r\n\r\n\r\nSo it seems the compiler fails to flatten `dstType`'s type set with indirection from `elType`.\r\n\r\nAlso, @Merovius was able to construct the following two semantically equivalent examples that hint that the issue is somehow specific to the type conversion operation:\r\n\r\n - Rejected: https://go.dev/play/p/WH_JH6Gwim-\r\n - Accepted: https://go.dev/play/p/p2n0fc1QoBj\r\n\r\n",compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\nGo Playground, 1.21\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nN/A, Go Playground\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/Jhx6YGrz21s\r\n\r\n### What did you expect to see?\r\n\r\nBoth `convert()` and `convert2()` are accepted by the compiler and are semantically equivalent.\r\n\r\n### What did you see instead?\r\n\r\n`convert2()` is rejected by the compiler: `cannot convert x (variable of type srcType constrained by string) to type dstType: cannot convert string (in srcType) to type []elType (in dstType)`\r\n\r\n### Details\r\n\r\n[The spec](https://go.dev/ref/spec#Conversions) says the following about type conversions of type params:\r\n\r\n> Additionally, if T or x's type V are type parameters, x can also be converted to type T if one of the following conditions applies:\r\n>\r\n>  - Both V and T are type parameters and a value of each type in V's type set can be converted to each type in T's type set.\r\n\r\nConsider the following code:\r\n\r\n```go\r\ntype charLike interface{ byte | rune }\r\n\r\nfunc convert2[elType charLike, srcType string, dstType []elType](x srcType) dstType {\r\n\treturn dstType(x) // ERROR: cannot convert x (variable of type srcType constrained by string) to type dstType: cannot convert string (in srcType) to type []elType (in dstType)\r\n}\r\n```\r\n\r\nHere `srcType`'s type set should be just `string`, and `dstType`'s type set is `[]rune|[]byte`. As per spec, `string` can be converted to both `[]rune` and `[]byte`:\r\n\r\n> A non-constant value x can be converted to type T in any of these cases:\r\n>\r\n> - ...\r\n> - x is a string and T is a slice of bytes or runes.\r\n\r\nSo, conversion should be allowed, assuming the compiler is able to correctly deduce type set for `dstType`.\r\n\r\nThe simplest example of the issue I was able to find:\r\n\r\n```go\r\nfunc convert2[elType byte, dstType []elType](x string) dstType {\r\n\treturn dstType(x) // ERROR: cannot convert x (variable of type string) to type dstType: cannot convert string to type []elType (in dstType)\r\n}\r\n```\r\n\r\nThe next step of eliminating elType makes the error disappear:\r\n\r\n```go\r\nfunc convert2[dstType []byte](x string) dstType {\r\n\treturn dstType(x)}\r\n```\r\n\r\nSo it seems the compiler fails to flatten `dstType`'s type set with indirection from `elType`.\r\n\r\nAlso, @Merovius was able to construct the following two semantically equivalent examples that hint that the issue is somehow specific to the type conversion operation:\r\n\r\n - Rejected: https://go.dev/play/p/WH_JH6Gwim-\r\n - Accepted: https://go.dev/play/p/p2n0fc1QoBj\r\n\r\n","go\r\ntype charLike interface{ byte | rune }\r\n\r\nfunc convert2[elType charLike, srcType string, dstType []elType](x srcType) dstType {\r\n\treturn dstType(x) // ERROR: cannot convert x (variable of type srcType constrained by string) to type dstType: cannot convert string (in srcType) to type []elType (in dstType)\r\n}\r\n"
63821,"x/tools/gopls: infertypeargs no longer produces diagnostics<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.21.3 windows/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.14.0\r\n    golang.org/x/tools/gopls@v0.14.0 h1:SaFctK7aL3S21p7r/K4+XU+mEyjobk7rIe9B+KiER5s=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.13.0 h1:I/DsJXRlw/8l/0c24sM9yb0T4z9liZTduXvdAWYiysY=\r\n    golang.org/x/sync@v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=\r\n    golang.org/x/sys@v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=\r\n    golang.org/x/telemetry@v0.0.0-20231011160506-788d5629a052 h1:1baVNneD/IRxmu8JQdBuki78zUqBtZxq8smZXQj0X2Y=\r\n    golang.org/x/text@v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=\r\n    golang.org/x/tools@v0.14.1-0.20231024142323-35a647a9c3fc h1:885/39rn2IDn/hUUfUzxMWAowSMB/K+bc3kaOJfc5bo=\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.5 h1:YGD4H+SuIOOqsyoLOpZDWcieM28W47/zRO7f+9V3nvo=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.21.3\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.83.1\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.39.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- Checking configured tools....\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: C:\\Users\\CarstenLeue\\go\r\nGOROOT: c:\\Program Files\\Go\r\nPATH: C:\\Program Files\\ImageMagick-7.1.1-Q16-HDRI;c:\\Program Files\\Eclipse Adoptium\\jre-21.0.0.35-hotspot\\bin;C:\\Python312\\Scripts\\;C:\\Python312\\;;;;c:\\Program Files\\Eclipse Adoptium\\jre-20.0.2.9-hotspot\\bin;C:\\Python311\\Scripts\\;C:\\Python311\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;c:\\Program Files\\Eclipse Adoptium\\jre-19.0.2.7-hotspot\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-18.0.2.101-hotspot\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-18.0.2.9-hotspot\\bin;C:\\Python310\\Scripts\\;C:\\Python310\\;C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-17.0.2.8-hotspot\\bin;C:\\Python37\\Scripts\\;C:\\Python37\\;C:\\Python36\\Scripts\\;C:\\Python36\\;C:\\Python38\\Scripts\\;C:\\Python38\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\nodejs;C:\\Program Files (x86)\\OpenSSL\\bin;C:\\Program Files (x86)\\Microsoft VS Code\\bin;C:\\Program Files (x86)\\Intel\\WiFi\\bin\\;C:\\Program Files (x86)\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Git LFS;C:\\Program Files (x86)\\gnuplot\\bin;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\OpenJDK\\jdk-17.0.1\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Go\\bin;C:\\Program Files\\gnuplot\\bin;C:\\Program Files\\Microsoft VS Code\\bin;C:\\Program Files\\Git LFS;C:\\Program Files\\dotnet\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\gnupg\\bin;C:\\Program Files\\OpenSSH-Win64;C:\\Program Files\\gs\\gs9.56.1\\bin;C:\\tools\\groovy-3.0.14\\bin;c:\\Program Files (x86)\\Yarn\\bin\\;C:\\tools\\groovy-3.0.14\\bin;C:\\Program Files\\gs\\gs10.00.0\\bin;C:\\Program Files\\OpenSSL\\bin;C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\chocolatey\\lib\\maven\\apache-maven-3.9.5\\bin;c:\\Program Files\\Go\\bin;c:\\Program Files\\PowerShell\\7\\;C:\\Program Files\\GitHub CLI\\;C:\\Program Files\\OpenJDK\\jdk-21.0.1\\bin;C:\\Program Files\\nodejs\\;C:\\Users\\CarstenLeue\\.cargo\\bin;C:\\Users\\CarstenLeue\\.cargo\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Microsoft\\WindowsApps;C:\\ProgramData\\chocolatey\\lib\\msys2;C:\\tools\\msys64;C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\CarstenLeue\\Documents\\vcpkg;C:\\Users\\CarstenLeue\\AppData\\Local\\Programs\\Fiddler;C:\\Users\\CarstenLeue\\AppData\\Local\\GitHubDesktop\\bin;C:\\Program Files (x86)\\GitHub CLI\\;C:\\Program Files\\IBM\\Cloud\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Yarn\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Box\\Box Edit\\;C:\\Users\\CarstenLeue\\AppData\\Roaming\\npm;C:\\Program Files\\Git\\cmd;c:\\Program Files\\IBM\\Cloud\\bin;C:\\Program Files\\Docker\\Docker\\resources\\bin\\;C:\\Program Files\\OpenSSL-Win64\\bin;C:\\Program Files\\Tesseract-OCR;C:\\Users\\CarstenLeue\\AppData\\Local\\Yarn\\bin;C:\\Users\\CarstenLeue\\.local\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\ghcup\\bin;c:\\Users\\CarstenLeue\\AppData\\Local\\Box\\Box Edit\\;C:\\Users\\CarstenLeue\\go\\bin;C:\\Users\\CarstenLeue\\AppData\\Roaming\\npm\r\n\r\n\tgo:\tc:\\Program Files\\Go\\bin\\go.exe: go version go1.21.3 windows/amd64\r\n\r\n\tgotests:\tC:\\Users\\CarstenLeue\\go\\bin\\gotests.exe\t(version: v1.6.0 built with go: go1.21.0)\r\n\tgomodifytags:\tC:\\Users\\CarstenLeue\\go\\bin\\gomodifytags.exe\t(version: v1.16.0 built with go: go1.21.0)\r\n\timpl:\tC:\\Users\\CarstenLeue\\go\\bin\\impl.exe\t(version: v1.2.0 built with go: go1.21.0)\r\n\tgoplay:\tC:\\Users\\CarstenLeue\\go\\bin\\goplay.exe\t(version: v1.0.0 built with go: go1.21.0)\r\n\tdlv:\tC:\\Users\\CarstenLeue\\go\\bin\\dlv.exe\t(version: v1.21.1 built with go: go1.21.3)\r\n\tstaticcheck:\tC:\\Users\\CarstenLeue\\go\\bin\\staticcheck.exe\t(version: v0.4.6 built with go: go1.21.3)\r\n\tgopls:\tC:\\Users\\CarstenLeue\\go\\bin\\gopls.exe\t(version: v0.14.0 built with go: go1.21.3)\r\n\r\ngo env\r\nWorkspace Folder (go-test-generics): c:\\Users\\CarstenLeue\\Documents\\go-test-generics\r\n\tset GO111MODULE=\r\n\tset GOARCH=amd64\r\n\tset GOBIN=\r\n\tset GOCACHE=C:\\Users\\CarstenLeue\\AppData\\Local\\go-build\r\n\tset GOENV=C:\\Users\\CarstenLeue\\AppData\\Roaming\\go\\env\r\n\tset GOEXE=.exe\r\n\tset GOEXPERIMENT=\r\n\tset GOFLAGS=\r\n\tset GOHOSTARCH=amd64\r\n\tset GOHOSTOS=windows\r\n\tset GOINSECURE=\r\n\tset GOMODCACHE=C:\\Users\\CarstenLeue\\go\\pkg\\mod\r\n\tset GONOPROXY=github.ibm.com\r\n\tset GONOSUMDB=github.ibm.com\r\n\tset GOOS=windows\r\n\tset GOPATH=C:\\Users\\CarstenLeue\\go\r\n\tset GOPRIVATE=github.ibm.com\r\n\tset GOPROXY=https://eu.artifactory.swg-devops.com/artifactory/api/go/sys-zaas-team-dev-go-virtual/\r\n\tset GOROOT=c:\\Program Files\\Go\r\n\tset GOSUMDB=sum.golang.org\r\n\tset GOTMPDIR=\r\n\tset GOTOOLCHAIN=auto\r\n\tset GOTOOLDIR=c:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\n\tset GOVCS=\r\n\tset GOVERSION=go1.21.3\r\n\tset GCCGO=gccgo\r\n\tset GOAMD64=v1\r\n\tset AR=ar\r\n\tset CC=gcc\r\n\tset CXX=g++\r\n\tset CGO_ENABLED=0\r\n\tset GOMOD=c:\\Users\\CarstenLeue\\Documents\\go-test-generics\\go.mod\r\n\tset GOWORK=\r\n\tset CGO_CFLAGS=-O2 -g\r\n\tset CGO_CPPFLAGS=\r\n\tset CGO_CXXFLAGS=-O2 -g\r\n\tset CGO_FFLAGS=-O2 -g\r\n\tset CGO_LDFLAGS=-O2 -g\r\n\tset PKG_CONFIG=pkg-config\r\n\tset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=c:\\temp\\Local\\Temp\\go-build3166563808=/tmp/go-build -gno-record-gcc-switches\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```\r\n    ""go.testEnvVars"": {\r\n        ""LIBVIRT_URI"": """"\r\n    },\r\n    ""go.diagnostic.vulncheck"": ""Imports"",\r\n    ""gopls"": {\r\n        ""ui.semanticTokens"": true,\r\n    },\r\n    ""go.inlayHints.rangeVariableTypes"": true,\r\n    ""go.formatTool"": ""goimports"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n```\r\n\r\n### Describe the bug\r\n\r\nWith the following file:\r\n\r\n\r\n\r\nI would have expected to see:\r\n\r\na. both type parameters on the invocation of `test` are not needed\r\nb. the second type parameter on the invocation of `test1` is not needed\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. Open the go code above in the editor\r\n2. Make sure `infertypeargs` is enabled (should be enabled by default)\r\n3. unexpected behaviour: no indication of the unneeded types\r\n\r\n### Screenshots or recordings\r\n\r\nThis is what I am seeing in vscode:\r\n\r\n![image](https://github.com/golang/vscode-go/assets/55989662/7b8c3151-3f14-40ce-b6fa-b0b3a38c5e91)\r\n\r\nI would have expected to see the unneeded types greyed out\r\n",gopls|Tools,findleyr,"<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.21.3 windows/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.14.0\r\n    golang.org/x/tools/gopls@v0.14.0 h1:SaFctK7aL3S21p7r/K4+XU+mEyjobk7rIe9B+KiER5s=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.13.0 h1:I/DsJXRlw/8l/0c24sM9yb0T4z9liZTduXvdAWYiysY=\r\n    golang.org/x/sync@v0.4.0 h1:zxkM55ReGkDlKSM+Fu41A+zmbZuaPVbGMzvvdUPznYQ=\r\n    golang.org/x/sys@v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=\r\n    golang.org/x/telemetry@v0.0.0-20231011160506-788d5629a052 h1:1baVNneD/IRxmu8JQdBuki78zUqBtZxq8smZXQj0X2Y=\r\n    golang.org/x/text@v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=\r\n    golang.org/x/tools@v0.14.1-0.20231024142323-35a647a9c3fc h1:885/39rn2IDn/hUUfUzxMWAowSMB/K+bc3kaOJfc5bo=\r\n    golang.org/x/vuln@v1.0.1 h1:KUas02EjQK5LTuIx1OylBQdKKZ9jeugs+HiqO5HormU=\r\n    honnef.co/go/tools@v0.4.5 h1:YGD4H+SuIOOqsyoLOpZDWcieM28W47/zRO7f+9V3nvo=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.21.3\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.83.1\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.39.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- Checking configured tools....\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: C:\\Users\\CarstenLeue\\go\r\nGOROOT: c:\\Program Files\\Go\r\nPATH: C:\\Program Files\\ImageMagick-7.1.1-Q16-HDRI;c:\\Program Files\\Eclipse Adoptium\\jre-21.0.0.35-hotspot\\bin;C:\\Python312\\Scripts\\;C:\\Python312\\;;;;c:\\Program Files\\Eclipse Adoptium\\jre-20.0.2.9-hotspot\\bin;C:\\Python311\\Scripts\\;C:\\Python311\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;c:\\Program Files\\Eclipse Adoptium\\jre-19.0.2.7-hotspot\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-18.0.2.101-hotspot\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-18.0.2.9-hotspot\\bin;C:\\Python310\\Scripts\\;C:\\Python310\\;C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin;c:\\Program Files\\Eclipse Adoptium\\jre-17.0.2.8-hotspot\\bin;C:\\Python37\\Scripts\\;C:\\Python37\\;C:\\Python36\\Scripts\\;C:\\Python36\\;C:\\Python38\\Scripts\\;C:\\Python38\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\nodejs;C:\\Program Files (x86)\\OpenSSL\\bin;C:\\Program Files (x86)\\Microsoft VS Code\\bin;C:\\Program Files (x86)\\Intel\\WiFi\\bin\\;C:\\Program Files (x86)\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Git LFS;C:\\Program Files (x86)\\gnuplot\\bin;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\OpenJDK\\jdk-17.0.1\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Go\\bin;C:\\Program Files\\gnuplot\\bin;C:\\Program Files\\Microsoft VS Code\\bin;C:\\Program Files\\Git LFS;C:\\Program Files\\dotnet\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\gnupg\\bin;C:\\Program Files\\OpenSSH-Win64;C:\\Program Files\\gs\\gs9.56.1\\bin;C:\\tools\\groovy-3.0.14\\bin;c:\\Program Files (x86)\\Yarn\\bin\\;C:\\tools\\groovy-3.0.14\\bin;C:\\Program Files\\gs\\gs10.00.0\\bin;C:\\Program Files\\OpenSSL\\bin;C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\chocolatey\\lib\\maven\\apache-maven-3.9.5\\bin;c:\\Program Files\\Go\\bin;c:\\Program Files\\PowerShell\\7\\;C:\\Program Files\\GitHub CLI\\;C:\\Program Files\\OpenJDK\\jdk-21.0.1\\bin;C:\\Program Files\\nodejs\\;C:\\Users\\CarstenLeue\\.cargo\\bin;C:\\Users\\CarstenLeue\\.cargo\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Microsoft\\WindowsApps;C:\\ProgramData\\chocolatey\\lib\\msys2;C:\\tools\\msys64;C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\CarstenLeue\\Documents\\vcpkg;C:\\Users\\CarstenLeue\\AppData\\Local\\Programs\\Fiddler;C:\\Users\\CarstenLeue\\AppData\\Local\\GitHubDesktop\\bin;C:\\Program Files (x86)\\GitHub CLI\\;C:\\Program Files\\IBM\\Cloud\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Yarn\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Box\\Box Edit\\;C:\\Users\\CarstenLeue\\AppData\\Roaming\\npm;C:\\Program Files\\Git\\cmd;c:\\Program Files\\IBM\\Cloud\\bin;C:\\Program Files\\Docker\\Docker\\resources\\bin\\;C:\\Program Files\\OpenSSL-Win64\\bin;C:\\Program Files\\Tesseract-OCR;C:\\Users\\CarstenLeue\\AppData\\Local\\Yarn\\bin;C:\\Users\\CarstenLeue\\.local\\bin;C:\\Users\\CarstenLeue\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\ghcup\\bin;c:\\Users\\CarstenLeue\\AppData\\Local\\Box\\Box Edit\\;C:\\Users\\CarstenLeue\\go\\bin;C:\\Users\\CarstenLeue\\AppData\\Roaming\\npm\r\n\r\n\tgo:\tc:\\Program Files\\Go\\bin\\go.exe: go version go1.21.3 windows/amd64\r\n\r\n\tgotests:\tC:\\Users\\CarstenLeue\\go\\bin\\gotests.exe\t(version: v1.6.0 built with go: go1.21.0)\r\n\tgomodifytags:\tC:\\Users\\CarstenLeue\\go\\bin\\gomodifytags.exe\t(version: v1.16.0 built with go: go1.21.0)\r\n\timpl:\tC:\\Users\\CarstenLeue\\go\\bin\\impl.exe\t(version: v1.2.0 built with go: go1.21.0)\r\n\tgoplay:\tC:\\Users\\CarstenLeue\\go\\bin\\goplay.exe\t(version: v1.0.0 built with go: go1.21.0)\r\n\tdlv:\tC:\\Users\\CarstenLeue\\go\\bin\\dlv.exe\t(version: v1.21.1 built with go: go1.21.3)\r\n\tstaticcheck:\tC:\\Users\\CarstenLeue\\go\\bin\\staticcheck.exe\t(version: v0.4.6 built with go: go1.21.3)\r\n\tgopls:\tC:\\Users\\CarstenLeue\\go\\bin\\gopls.exe\t(version: v0.14.0 built with go: go1.21.3)\r\n\r\ngo env\r\nWorkspace Folder (go-test-generics): c:\\Users\\CarstenLeue\\Documents\\go-test-generics\r\n\tset GO111MODULE=\r\n\tset GOARCH=amd64\r\n\tset GOBIN=\r\n\tset GOCACHE=C:\\Users\\CarstenLeue\\AppData\\Local\\go-build\r\n\tset GOENV=C:\\Users\\CarstenLeue\\AppData\\Roaming\\go\\env\r\n\tset GOEXE=.exe\r\n\tset GOEXPERIMENT=\r\n\tset GOFLAGS=\r\n\tset GOHOSTARCH=amd64\r\n\tset GOHOSTOS=windows\r\n\tset GOINSECURE=\r\n\tset GOMODCACHE=C:\\Users\\CarstenLeue\\go\\pkg\\mod\r\n\tset GONOPROXY=github.ibm.com\r\n\tset GONOSUMDB=github.ibm.com\r\n\tset GOOS=windows\r\n\tset GOPATH=C:\\Users\\CarstenLeue\\go\r\n\tset GOPRIVATE=github.ibm.com\r\n\tset GOPROXY=https://eu.artifactory.swg-devops.com/artifactory/api/go/sys-zaas-team-dev-go-virtual/\r\n\tset GOROOT=c:\\Program Files\\Go\r\n\tset GOSUMDB=sum.golang.org\r\n\tset GOTMPDIR=\r\n\tset GOTOOLCHAIN=auto\r\n\tset GOTOOLDIR=c:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\n\tset GOVCS=\r\n\tset GOVERSION=go1.21.3\r\n\tset GCCGO=gccgo\r\n\tset GOAMD64=v1\r\n\tset AR=ar\r\n\tset CC=gcc\r\n\tset CXX=g++\r\n\tset CGO_ENABLED=0\r\n\tset GOMOD=c:\\Users\\CarstenLeue\\Documents\\go-test-generics\\go.mod\r\n\tset GOWORK=\r\n\tset CGO_CFLAGS=-O2 -g\r\n\tset CGO_CPPFLAGS=\r\n\tset CGO_CXXFLAGS=-O2 -g\r\n\tset CGO_FFLAGS=-O2 -g\r\n\tset CGO_LDFLAGS=-O2 -g\r\n\tset PKG_CONFIG=pkg-config\r\n\tset GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=c:\\temp\\Local\\Temp\\go-build3166563808=/tmp/go-build -gno-record-gcc-switches\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```\r\n    ""go.testEnvVars"": {\r\n        ""LIBVIRT_URI"": """"\r\n    },\r\n    ""go.diagnostic.vulncheck"": ""Imports"",\r\n    ""gopls"": {\r\n        ""ui.semanticTokens"": true,\r\n    },\r\n    ""go.inlayHints.rangeVariableTypes"": true,\r\n    ""go.formatTool"": ""goimports"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n```\r\n\r\n### Describe the bug\r\n\r\nWith the following file:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\nfunc test[A, B any](a A, b B) {\r\n\tfmt.Printf(""a: %v, b: %v"", a, b)\r\n}\r\n\r\nfunc test1[A, B any](b B) func(a A) {\r\n\treturn func(a A) {\r\n\t\tfmt.Printf(""a: %v, b: %v"", a, b)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\ttest[string, int](""test"", 1)\r\n\ttest1[string, int](1)(""test"")\r\n}\r\n```\r\n\r\nI would have expected to see:\r\n\r\na. both type parameters on the invocation of `test` are not needed\r\nb. the second type parameter on the invocation of `test1` is not needed\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. Open the go code above in the editor\r\n2. Make sure `infertypeargs` is enabled (should be enabled by default)\r\n3. unexpected behaviour: no indication of the unneeded types\r\n\r\n### Screenshots or recordings\r\n\r\nThis is what I am seeing in vscode:\r\n\r\n![image](https://github.com/golang/vscode-go/assets/55989662/7b8c3151-3f14-40ce-b6fa-b0b3a38c5e91)\r\n\r\nI would have expected to see the unneeded types greyed out\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\nfunc test[A, B any](a A, b B) {\r\n\tfmt.Printf(""a: %v, b: %v"", a, b)\r\n}\r\n\r\nfunc test1[A, B any](b B) func(a A) {\r\n\treturn func(a A) {\r\n\t\tfmt.Printf(""a: %v, b: %v"", a, b)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\ttest[string, int](""test"", 1)\r\n\ttest1[string, int](1)(""test"")\r\n}\r\n"
63799,x/tools/go/analysis/passes/testinggoroutine: ignore subtests in goroutines (false positive)Hi!\r\n\r\nLooks like invalid checker behaviour:\r\n\r\n\r\n```\r\n$ go vet -testinggoroutine some_test.go\r\n# command-line-arguments_test\r\n..._test.go:56:4: call to (*T).Fatal from a non-test goroutine\r\n```\r\n,Tools|Analysis,timothy-king,"Hi!\r\n\r\nLooks like invalid checker behaviour:\r\n```go\r\nfunc TestGoSubtest(t *testing.T) {\r\n\tdone := make(chan struct{})\r\n\tgo func() {\r\n\t\tdefer close(done)\r\n\t\tt.Run("""", func(t *testing.T) {\r\n\t\t\tt.Fatal()\r\n\t\t})\r\n\t}()\r\n\t<-done\r\n}\r\n```\r\n\r\n```\r\n$ go vet -testinggoroutine some_test.go\r\n# command-line-arguments_test\r\n..._test.go:56:4: call to (*T).Fatal from a non-test goroutine\r\n```\r\n","go\r\nfunc TestGoSubtest(t *testing.T) {\r\n\tdone := make(chan struct{})\r\n\tgo func() {\r\n\t\tdefer close(done)\r\n\t\tt.Run("""", func(t *testing.T) {\r\n\t\t\tt.Fatal()\r\n\t\t})\r\n\t}()\r\n\t<-done\r\n}\r\n"
63795,"net: TCPConn.ReadFrom hangs when io.Reader is TCPConn or UnixConn, Linux kernel < 5.1<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 1.21.3\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n1. Yes, the issue can be reproduced with go 1.21.3.\r\n1. The issue has been fixed in commit [internal/poll/splice_linux.go](https://github.com/golang/go/commit/40cdf69fc9279ab28f84a6e0f965de8382c578fe). I.e. the same program that fails in 1.21.3 works with go master. The commit has not been back-ported to the 1.21 branch.\r\n\r\nThis is a regression from 1.20.x.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nThe problem can be reproduced when running the program on Linux with amd64 cpu architecture and kernel version < 5.1. We have reproduced the problem on the following systems:\r\n\r\n1. 4.1.21-WR8.0.0.28-standard x86_64 x86_64 x86_64 GNU/Linux\r\n1. CentOS 7 3.10.0-1160.95.1.el7.x86_64\r\n\r\nFor our tests, we did a cross-compilation so there was no go tool chain on the target system. But as a follow-up we should be able to reproduce the test without cross-compilation.\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis is similar of issue #59041, but @panjf2000 asked to file a new issue.\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nWe compiled and executed the following program with `CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build .` \r\nIt's not possible to reproduce the problem in go playground because the playground has Linux kernel > 5.1.\r\n\r\n\r\nThe program does the following:\r\n\r\n1. Starts a goProxy in a goroutine which blocks to accept a connection ([127.0.0.1:9090]).\r\n1. Starts a Downloader connects in another go routine.\r\n3. Downloader connects to the proxy ([127.0.0.1:9090]) and attempts to download a file.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the program to complete the data transfer successfully.\r\nWhen running the program in a Linux environment with kernel 5.1 and above, the program produces the following output:\r\n\r\nThe program completes successfully if it has been compiled with go `master` after October 18th 2023. The fix is https://go-review.googlesource.com/c/go/+/536015.\r\n\r\n```\r\n./proxy\r\nStarting GoProxy\r\nDownload Started\r\nDownloading... 1.1 GB complete\r\nDownload Finished\r\n```\r\n\r\n### What did you see instead?\r\n\r\nWhen the program has been compiled with go version 1.21.x (<= 1.21.3) AND it runs in a Linux environment with kernel < 5.1, the program produces the following output and hangs:\r\n\r\n```\r\nlinux#./proxy\r\nStarting GoProxy\r\nDownload Started\r\nDownloading... 31 MB complete\r\n```\r\n\r\nThe program hangs in `TCPConn.ReadFrom()`, which invokes the `splice()` system call.\r\nWe think it should be possible to create a simpler program that can reproduce the issue.\r\nLooking at the git history of internal/poll/splice_linux.go, the issue also exists in all 1.21.x versions, though we haven't actually tested each patch version. \r\n\r\nWe are consistently running into this issue with golang.org/x/net@v0.0.17 (go 1.21.3) with a proxy server. The application communicates with a remote server through a goproxy. The transfer starts of normally and after a few seconds (and approximately 10MB of download), connection completely stalls. This is the stack trace of the goroutines that have stalled.\r\n```\r\ngoroutine 1643 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7f282aa52678, 0x72)\r\n/go/1.21.3/go/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000684400?, 0xc000a93ce8?, 0x0)\r\n/go/1.21.3/go/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n/go/1.21.3/go/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.spliceDrain(0xc0002be680?, 0xc000684400, 0x112?)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:100 +0x22f\r\ninternal/poll.Splice(0x0?, 0x0?, 0x7fffffffffffffff)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:42 +0x173\r\nnet.splice(0x0?, {0x1ad3d80?, 0xc0006224e0?})\r\n/go/1.21.3/go/src/net/splice_linux.go:39 +0xdf\r\nnet.(*TCPConn).readFrom(0xc00051a0e0, {0x1ad3d80, 0xc0006224e0})\r\n/go/1.21.3/go/src/net/tcpsock_posix.go:48 +0x28\r\nnet.(*TCPConn).ReadFrom(0xc00051a0e0, {0x1ad3d80?, 0xc0006224e0?})\r\n/go/1.21.3/go/src/net/tcpsock.go:130 +0x30\r\nio.copyBuffer({0x1ad3e60, 0xc00051a0e0}, {0x1ad3d80, 0xc0006224e0}, {0x0, 0x0, 0x0})\r\n/go/1.21.3/go/src/io/io.go:416 +0x147\r\nio.Copy(...)\r\n/go/1.21.3/go/src/io/io.go:389\r\ngithub.com/elazarl/goproxy.copyAndClose(0x0?, {0x7f282a9d5258?, 0xc00051a0e0}, {0x7f282a9d5258?, 0xc0006224e0})\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:310 +0x8a\r\ncreated by github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps in goroutine 364\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:116 +0x8cd\r\n\r\ngoroutine 1644 [syscall]:\r\nsyscall.Syscall6(0x7f282aa526a0?, 0xc000439c68?, 0x46b985?, 0xc000439c78?, 0x4f005c?, 0xc000439c90?, 0x4f01c7?)\r\n/go/1.21.3/go/src/syscall/syscall_linux.go:91 +0x30\r\nsyscall.Splice(0xc0002be680?, 0xc000439ce8?, 0x0?, 0x1443500?, 0x1443500?, 0xc000439d00?)\r\n/go/1.21.3/go/src/syscall/zsyscall_linux_amd64.go:1356 +0x45\r\ninternal/poll.splice(...)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:155\r\ninternal/poll.spliceDrain(0xc000684400?, 0xc0002be680, 0xb50?)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:92 +0x185\r\ninternal/poll.Splice(0x40d86f?, 0x1652098?, 0x7fffffffffffffff)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:42 +0x173\r\nnet.splice(0x0?, {0x1ad3d80?, 0xc00051a0e0?})\r\n/go/1.21.3/go/src/net/splice_linux.go:39 +0xdf\r\nnet.(*TCPConn).readFrom(0xc0006224e0, {0x1ad3d80, 0xc00051a0e0})\r\n/go/1.21.3/go/src/net/tcpsock_posix.go:48 +0x28\r\nnet.(*TCPConn).ReadFrom(0xc0006224e0, {0x1ad3d80?, 0xc00051a0e0?})\r\n/go/1.21.3/go/src/net/tcpsock.go:130 +0x30\r\nio.copyBuffer({0x1ad3e60, 0xc0006224e0}, {0x1ad3d80, 0xc00051a0e0}, {0x0, 0x0, 0x0})\r\n/go/1.21.3/go/src/io/io.go:416 +0x147\r\nio.Copy(...)\r\n/go/1.21.3/go/src/io/io.go:389\r\ngithub.com/elazarl/goproxy.copyAndClose(0xc000439fd0?, {0x7f282a9d5258?, 0xc0006224e0}, {0x7f282a9d5258?, 0xc00051a0e0})\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:310 +0x8a\r\ncreated by github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps in goroutine 364\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:117 +0x96f\r\n```",OS-Linux|NeedsFix,panjf2000,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 1.21.3\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n1. Yes, the issue can be reproduced with go 1.21.3.\r\n1. The issue has been fixed in commit [internal/poll/splice_linux.go](https://github.com/golang/go/commit/40cdf69fc9279ab28f84a6e0f965de8382c578fe). I.e. the same program that fails in 1.21.3 works with go master. The commit has not been back-ported to the 1.21 branch.\r\n\r\nThis is a regression from 1.20.x.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nThe problem can be reproduced when running the program on Linux with amd64 cpu architecture and kernel version < 5.1. We have reproduced the problem on the following systems:\r\n\r\n1. 4.1.21-WR8.0.0.28-standard x86_64 x86_64 x86_64 GNU/Linux\r\n1. CentOS 7 3.10.0-1160.95.1.el7.x86_64\r\n\r\nFor our tests, we did a cross-compilation so there was no go tool chain on the target system. But as a follow-up we should be able to reproduce the test without cross-compilation.\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis is similar of issue #59041, but @panjf2000 asked to file a new issue.\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nWe compiled and executed the following program with `CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build .` \r\nIt's not possible to reproduce the problem in go playground because the playground has Linux kernel > 5.1.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n\t""net/http""\r\n\t""net/url""\r\n\t""io""\r\n\t""os""\r\n\t""os/signal""\r\n\t""runtime""\r\n\t""time""\r\n\t""fmt""\r\n\t""strings""\r\n\t""sync""\r\n\r\n\t""github.com/elazarl/goproxy""\r\n\t""golang.org/x/sys/unix""\r\n\t""github.com/dustin/go-humanize""\r\n\t""golang.org/x/net/proxy""\r\n\r\n)\r\n\r\nvar wg sync.WaitGroup\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tsigs := make(chan os.Signal, 1)\r\n\tsignal.Notify(sigs, unix.SIGUSR1, unix.SIGTERM, unix.SIGINT, unix.SIGABRT)\r\n\tgo func() {\r\n\t\t// Wait for signal\r\n\t\tfor sig := range sigs {\r\n\t\t\tswitch sig {\r\n\t\t\tcase unix.SIGUSR1:\r\n\t\t\t\tbt := make([]byte, 250*1024)\r\n\t\t\t\tsize := runtime.Stack(bt, true)\r\n\r\n\t\t\t\tfmt.Printf(""Stack dump requested\\n%s"", bt[:size])\r\n\t\t\tcase unix.SIGTERM:\r\n\t\t\t\tos.Exit(0)\r\n\t\t\tcase unix.SIGINT:\r\n\t\t\t\tos.Exit(0)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\tgo startGoProxy(`127.0.0.1:9090`)\r\n\ttime.Sleep(2 * time.Second)\r\n\tgo DownloadFile(""/tmp/tmp.x"",""https://testfileorg.netwet.net/testfile.org-1GB- Corrupt.zip"")\r\n\twg.Add(1)\r\n\twg.Wait()\r\n\r\n}\r\n\r\nfunc startGoProxy(aInAddr string) {\r\n\taddr := aInAddr\r\n\r\n\tproxy := goproxy.NewProxyHttpServer()\r\n\tproxyServ := &http.Server{\r\n\t\tAddr:           addr,\r\n\t\tHandler:        proxy,\r\n\t\tMaxHeaderBytes: 1 << 20,\r\n\t}\r\n\tfor retryCount := 0; retryCount < 10; retryCount++ {\r\n\t\tfmt.Println(""Starting GoProxy "")\r\n\t\terr := proxyServ.ListenAndServe()\r\n\t\tif err != nil {\r\n\t\t\tif err == http.ErrServerClosed {\r\n\t\t\t\tfmt.Println(""Proxy has closed connections"")\r\n\t\t\t\tbreak\r\n\t\t\t} else if retryCount == 10-1 {\r\n\t\t\t\tfmt.Println(""Proxy has quit "" + err.Error())\r\n\t\t\t}\r\n\t\t\ttime.Sleep(1 * time.Minute)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// WriteCounter counts the number of bytes written to it. It implements to the io.Writer interface\r\n// and we can pass this into io.TeeReader() which will report progress on each write cycle.\r\ntype WriteCounter struct {\r\n\tTotal uint64\r\n}\r\n\r\nfunc (wc *WriteCounter) Write(p []byte) (int, error) {\r\n\tn := len(p)\r\n\twc.Total += uint64(n)\r\n\twc.PrintProgress()\r\n\treturn n, nil\r\n}\r\n\r\nfunc (wc WriteCounter) PrintProgress() {\r\n\t// Clear the line by using a character return to go back to the start and remove\r\n\t// the remaining characters by filling it with spaces\r\n\tfmt.Printf(""\\r%s"", strings.Repeat("" "", 35))\r\n\r\n\t// Return again and print current status of download\r\n\t// We use the humanize package to print the bytes in a meaningful way (e.g. 10 MB)\r\n\tfmt.Printf(""\\rDownloading... %s complete"", humanize.Bytes(wc.Total))\r\n}\r\n\r\nfunc proxyAwareHttpClient() *http.Client {\r\n\tvar dialer proxy.Dialer\r\n\tdialer = proxy.Direct\r\n\tproxyUrl, err := url.Parse(""http://127.0.0.1:9090"")\r\n\tif err != nil {\r\n\t\tfmt.Println(""Unable to parse URL"")\r\n\t\treturn nil\r\n\t}\r\n\tfmt.Printf(""Proxy URL %v, %v"", proxyUrl, proxy.Direct)\r\n\r\n\t// setup a http client\r\n\thttpTransport := &http.Transport{Proxy:http.ProxyURL(proxyUrl)}\r\n\thttpClient := &http.Client{Transport: httpTransport}\r\n\thttpTransport.Dial = dialer.Dial\r\n\treturn httpClient\r\n}\r\n\r\n// DownloadFile will download a url to a local file. It's efficient because it will\r\n// write as it downloads and not load the whole file into memory. We pass an io.TeeReader\r\n// into Copy() to report progress on the download.\r\nfunc DownloadFile(filepath string, url string) error {\r\n\r\n\tdefer wg.Done()\r\n\t// Create the file, but give it a tmp file extension, this means we won't overwrite a\r\n\t// file until it's downloaded, but we'll remove the tmp extension once downloaded.\r\n\tout, err := os.CreateTemp("""", ""test"")\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tdefer os.Remove(out.Name())\r\n\tfmt.Println(""Download Started"")\r\n\treq, err := http.NewRequest(""GET"", url, nil)\r\n\tclient := proxyAwareHttpClient()\r\n\tif client == nil {\r\n\t\treturn nil\t\r\n\t}\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tout.Close()\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Create our progress reporter and pass it to be used alongside our writer\r\n\tcounter := &WriteCounter{}\r\n\tif _, err = io.Copy(out, io.TeeReader(resp.Body, counter)); err != nil {\r\n\t\tout.Close()\r\n\t\treturn err\r\n\t}\r\n\r\n\t// The progress uses the same line so print a new line once it's finished downloading\r\n\tfmt.Print(""\\n"")\r\n\r\n\t// Close the file without defer so it can happen before Rename()\r\n\tout.Close()\r\n\r\n\tfmt.Println(""Download Finished"")\r\n\treturn nil\r\n}\r\n```\r\nThe program does the following:\r\n\r\n1. Starts a goProxy in a goroutine which blocks to accept a connection ([127.0.0.1:9090]).\r\n1. Starts a Downloader connects in another go routine.\r\n3. Downloader connects to the proxy ([127.0.0.1:9090]) and attempts to download a file.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the program to complete the data transfer successfully.\r\nWhen running the program in a Linux environment with kernel 5.1 and above, the program produces the following output:\r\n\r\nThe program completes successfully if it has been compiled with go `master` after October 18th 2023. The fix is https://go-review.googlesource.com/c/go/+/536015.\r\n\r\n```\r\n./proxy\r\nStarting GoProxy\r\nDownload Started\r\nDownloading... 1.1 GB complete\r\nDownload Finished\r\n```\r\n\r\n### What did you see instead?\r\n\r\nWhen the program has been compiled with go version 1.21.x (<= 1.21.3) AND it runs in a Linux environment with kernel < 5.1, the program produces the following output and hangs:\r\n\r\n```\r\nlinux#./proxy\r\nStarting GoProxy\r\nDownload Started\r\nDownloading... 31 MB complete\r\n```\r\n\r\nThe program hangs in `TCPConn.ReadFrom()`, which invokes the `splice()` system call.\r\nWe think it should be possible to create a simpler program that can reproduce the issue.\r\nLooking at the git history of internal/poll/splice_linux.go, the issue also exists in all 1.21.x versions, though we haven't actually tested each patch version. \r\n\r\nWe are consistently running into this issue with golang.org/x/net@v0.0.17 (go 1.21.3) with a proxy server. The application communicates with a remote server through a goproxy. The transfer starts of normally and after a few seconds (and approximately 10MB of download), connection completely stalls. This is the stack trace of the goroutines that have stalled.\r\n```\r\ngoroutine 1643 [IO wait]:\r\ninternal/poll.runtime_pollWait(0x7f282aa52678, 0x72)\r\n/go/1.21.3/go/src/runtime/netpoll.go:343 +0x85\r\ninternal/poll.(*pollDesc).wait(0xc000684400?, 0xc000a93ce8?, 0x0)\r\n/go/1.21.3/go/src/internal/poll/fd_poll_runtime.go:84 +0x27\r\ninternal/poll.(*pollDesc).waitRead(...)\r\n/go/1.21.3/go/src/internal/poll/fd_poll_runtime.go:89\r\ninternal/poll.spliceDrain(0xc0002be680?, 0xc000684400, 0x112?)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:100 +0x22f\r\ninternal/poll.Splice(0x0?, 0x0?, 0x7fffffffffffffff)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:42 +0x173\r\nnet.splice(0x0?, {0x1ad3d80?, 0xc0006224e0?})\r\n/go/1.21.3/go/src/net/splice_linux.go:39 +0xdf\r\nnet.(*TCPConn).readFrom(0xc00051a0e0, {0x1ad3d80, 0xc0006224e0})\r\n/go/1.21.3/go/src/net/tcpsock_posix.go:48 +0x28\r\nnet.(*TCPConn).ReadFrom(0xc00051a0e0, {0x1ad3d80?, 0xc0006224e0?})\r\n/go/1.21.3/go/src/net/tcpsock.go:130 +0x30\r\nio.copyBuffer({0x1ad3e60, 0xc00051a0e0}, {0x1ad3d80, 0xc0006224e0}, {0x0, 0x0, 0x0})\r\n/go/1.21.3/go/src/io/io.go:416 +0x147\r\nio.Copy(...)\r\n/go/1.21.3/go/src/io/io.go:389\r\ngithub.com/elazarl/goproxy.copyAndClose(0x0?, {0x7f282a9d5258?, 0xc00051a0e0}, {0x7f282a9d5258?, 0xc0006224e0})\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:310 +0x8a\r\ncreated by github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps in goroutine 364\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:116 +0x8cd\r\n\r\ngoroutine 1644 [syscall]:\r\nsyscall.Syscall6(0x7f282aa526a0?, 0xc000439c68?, 0x46b985?, 0xc000439c78?, 0x4f005c?, 0xc000439c90?, 0x4f01c7?)\r\n/go/1.21.3/go/src/syscall/syscall_linux.go:91 +0x30\r\nsyscall.Splice(0xc0002be680?, 0xc000439ce8?, 0x0?, 0x1443500?, 0x1443500?, 0xc000439d00?)\r\n/go/1.21.3/go/src/syscall/zsyscall_linux_amd64.go:1356 +0x45\r\ninternal/poll.splice(...)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:155\r\ninternal/poll.spliceDrain(0xc000684400?, 0xc0002be680, 0xb50?)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:92 +0x185\r\ninternal/poll.Splice(0x40d86f?, 0x1652098?, 0x7fffffffffffffff)\r\n/go/1.21.3/go/src/internal/poll/splice_linux.go:42 +0x173\r\nnet.splice(0x0?, {0x1ad3d80?, 0xc00051a0e0?})\r\n/go/1.21.3/go/src/net/splice_linux.go:39 +0xdf\r\nnet.(*TCPConn).readFrom(0xc0006224e0, {0x1ad3d80, 0xc00051a0e0})\r\n/go/1.21.3/go/src/net/tcpsock_posix.go:48 +0x28\r\nnet.(*TCPConn).ReadFrom(0xc0006224e0, {0x1ad3d80?, 0xc00051a0e0?})\r\n/go/1.21.3/go/src/net/tcpsock.go:130 +0x30\r\nio.copyBuffer({0x1ad3e60, 0xc0006224e0}, {0x1ad3d80, 0xc00051a0e0}, {0x0, 0x0, 0x0})\r\n/go/1.21.3/go/src/io/io.go:416 +0x147\r\nio.Copy(...)\r\n/go/1.21.3/go/src/io/io.go:389\r\ngithub.com/elazarl/goproxy.copyAndClose(0xc000439fd0?, {0x7f282a9d5258?, 0xc0006224e0}, {0x7f282a9d5258?, 0xc00051a0e0})\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:310 +0x8a\r\ncreated by github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps in goroutine 364\r\ngo/pkg/mod/github.com/elazarl/[goproxy@v0.0.0-20200310082302-296d8939dc5a](mailto:goproxy@v0.0.0-20200310082302-296d8939dc5a)/https.go:117 +0x96f\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n\t""net/http""\r\n\t""net/url""\r\n\t""io""\r\n\t""os""\r\n\t""os/signal""\r\n\t""runtime""\r\n\t""time""\r\n\t""fmt""\r\n\t""strings""\r\n\t""sync""\r\n\r\n\t""github.com/elazarl/goproxy""\r\n\t""golang.org/x/sys/unix""\r\n\t""github.com/dustin/go-humanize""\r\n\t""golang.org/x/net/proxy""\r\n\r\n)\r\n\r\nvar wg sync.WaitGroup\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tsigs := make(chan os.Signal, 1)\r\n\tsignal.Notify(sigs, unix.SIGUSR1, unix.SIGTERM, unix.SIGINT, unix.SIGABRT)\r\n\tgo func() {\r\n\t\t// Wait for signal\r\n\t\tfor sig := range sigs {\r\n\t\t\tswitch sig {\r\n\t\t\tcase unix.SIGUSR1:\r\n\t\t\t\tbt := make([]byte, 250*1024)\r\n\t\t\t\tsize := runtime.Stack(bt, true)\r\n\r\n\t\t\t\tfmt.Printf(""Stack dump requested\\n%s"", bt[:size])\r\n\t\t\tcase unix.SIGTERM:\r\n\t\t\t\tos.Exit(0)\r\n\t\t\tcase unix.SIGINT:\r\n\t\t\t\tos.Exit(0)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\tgo startGoProxy(`127.0.0.1:9090`)\r\n\ttime.Sleep(2 * time.Second)\r\n\tgo DownloadFile(""/tmp/tmp.x"",""https://testfileorg.netwet.net/testfile.org-1GB- Corrupt.zip"")\r\n\twg.Add(1)\r\n\twg.Wait()\r\n\r\n}\r\n\r\nfunc startGoProxy(aInAddr string) {\r\n\taddr := aInAddr\r\n\r\n\tproxy := goproxy.NewProxyHttpServer()\r\n\tproxyServ := &http.Server{\r\n\t\tAddr:           addr,\r\n\t\tHandler:        proxy,\r\n\t\tMaxHeaderBytes: 1 << 20,\r\n\t}\r\n\tfor retryCount := 0; retryCount < 10; retryCount++ {\r\n\t\tfmt.Println(""Starting GoProxy "")\r\n\t\terr := proxyServ.ListenAndServe()\r\n\t\tif err != nil {\r\n\t\t\tif err == http.ErrServerClosed {\r\n\t\t\t\tfmt.Println(""Proxy has closed connections"")\r\n\t\t\t\tbreak\r\n\t\t\t} else if retryCount == 10-1 {\r\n\t\t\t\tfmt.Println(""Proxy has quit "" + err.Error())\r\n\t\t\t}\r\n\t\t\ttime.Sleep(1 * time.Minute)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// WriteCounter counts the number of bytes written to it. It implements to the io.Writer interface\r\n// and we can pass this into io.TeeReader() which will report progress on each write cycle.\r\ntype WriteCounter struct {\r\n\tTotal uint64\r\n}\r\n\r\nfunc (wc *WriteCounter) Write(p []byte) (int, error) {\r\n\tn := len(p)\r\n\twc.Total += uint64(n)\r\n\twc.PrintProgress()\r\n\treturn n, nil\r\n}\r\n\r\nfunc (wc WriteCounter) PrintProgress() {\r\n\t// Clear the line by using a character return to go back to the start and remove\r\n\t// the remaining characters by filling it with spaces\r\n\tfmt.Printf(""\\r%s"", strings.Repeat("" "", 35))\r\n\r\n\t// Return again and print current status of download\r\n\t// We use the humanize package to print the bytes in a meaningful way (e.g. 10 MB)\r\n\tfmt.Printf(""\\rDownloading... %s complete"", humanize.Bytes(wc.Total))\r\n}\r\n\r\nfunc proxyAwareHttpClient() *http.Client {\r\n\tvar dialer proxy.Dialer\r\n\tdialer = proxy.Direct\r\n\tproxyUrl, err := url.Parse(""http://127.0.0.1:9090"")\r\n\tif err != nil {\r\n\t\tfmt.Println(""Unable to parse URL"")\r\n\t\treturn nil\r\n\t}\r\n\tfmt.Printf(""Proxy URL %v, %v"", proxyUrl, proxy.Direct)\r\n\r\n\t// setup a http client\r\n\thttpTransport := &http.Transport{Proxy:http.ProxyURL(proxyUrl)}\r\n\thttpClient := &http.Client{Transport: httpTransport}\r\n\thttpTransport.Dial = dialer.Dial\r\n\treturn httpClient\r\n}\r\n\r\n// DownloadFile will download a url to a local file. It's efficient because it will\r\n// write as it downloads and not load the whole file into memory. We pass an io.TeeReader\r\n// into Copy() to report progress on the download.\r\nfunc DownloadFile(filepath string, url string) error {\r\n\r\n\tdefer wg.Done()\r\n\t// Create the file, but give it a tmp file extension, this means we won't overwrite a\r\n\t// file until it's downloaded, but we'll remove the tmp extension once downloaded.\r\n\tout, err := os.CreateTemp("""", ""test"")\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tdefer os.Remove(out.Name())\r\n\tfmt.Println(""Download Started"")\r\n\treq, err := http.NewRequest(""GET"", url, nil)\r\n\tclient := proxyAwareHttpClient()\r\n\tif client == nil {\r\n\t\treturn nil\t\r\n\t}\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tout.Close()\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Create our progress reporter and pass it to be used alongside our writer\r\n\tcounter := &WriteCounter{}\r\n\tif _, err = io.Copy(out, io.TeeReader(resp.Body, counter)); err != nil {\r\n\t\tout.Close()\r\n\t\treturn err\r\n\t}\r\n\r\n\t// The progress uses the same line so print a new line once it's finished downloading\r\n\tfmt.Print(""\\n"")\r\n\r\n\t// Close the file without defer so it can happen before Rename()\r\n\tout.Close()\r\n\r\n\tfmt.Println(""Download Finished"")\r\n\treturn nil\r\n}\r\n"
63768,"runtime: pinner.Pin doesn't panic when it says it will [1.21 backport]The documentation for [`runtime.Pinner.Pin`](https://pkg.go.dev/runtime@go1.21.3#Pinner.Pin) currently says:\r\n> The argument must be a pointer of any type or an `unsafe.Pointer`. It must be the result of calling `new`, taking the address of a composite literal, or taking the address of a local variable. If one of these conditions is not met, `Pin` will panic.\r\n\r\nHowever, it does not always do so today.\r\n\r\nA channel, map, or slice value can be constructed by calling `make`, which does not involve a call to `new`, nor a composite literal, nor the address of a local variable. Empirically, `Pin` does not panic when called on such an object (https://go.dev/play/p/q_iyNHJduRf).\r\n\r\n\r\n\r\nIt isn't clear to me whether this is a mistake in the documentation (a valid case that was omitted from the doc comment), or a bug in the implementation (`Pin` failing to panic for an unsupported address).\r\n\r\nAt a higher level, it seems to me that it is basically always a mistake for a doc comment to state that something _will_ panic for an unsupported input, since that makes it an incompatible change to ever _add_ support for such an input. (It would be better for `Pin` not to promise anything about what happens for such an input, but to panic anyway as a debugging aid to the user.)\r\n",CherryPickApproved|compiler/runtime,mknyszek,"The documentation for [`runtime.Pinner.Pin`](https://pkg.go.dev/runtime@go1.21.3#Pinner.Pin) currently says:\r\n> The argument must be a pointer of any type or an `unsafe.Pointer`. It must be the result of calling `new`, taking the address of a composite literal, or taking the address of a local variable. If one of these conditions is not met, `Pin` will panic.\r\n\r\nHowever, it does not always do so today.\r\n\r\nA channel, map, or slice value can be constructed by calling `make`, which does not involve a call to `new`, nor a composite literal, nor the address of a local variable. Empirically, `Pin` does not panic when called on such an object (https://go.dev/play/p/q_iyNHJduRf).\r\n\r\n```go\r\n\tp := new(runtime.Pinner)\r\n\tc := make(chan struct{}, 1)\r\n\tp.Pin(reflect.ValueOf(c).UnsafePointer())\r\n```\r\n\r\nIt isn't clear to me whether this is a mistake in the documentation (a valid case that was omitted from the doc comment), or a bug in the implementation (`Pin` failing to panic for an unsupported address).\r\n\r\nAt a higher level, it seems to me that it is basically always a mistake for a doc comment to state that something _will_ panic for an unsupported input, since that makes it an incompatible change to ever _add_ support for such an input. (It would be better for `Pin` not to promise anything about what happens for such an input, but to panic anyway as a debugging aid to the user.)\r\n","go\r\n\tp := new(runtime.Pinner)\r\n\tc := make(chan struct{}, 1)\r\n\tp.Pin(reflect.ValueOf(c).UnsafePointer())\r\n"
63750,"cmd/compile: type inference fails on a case which looks simple<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCompiles.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\n",compiler/runtime,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```go\r\npackage main\r\n\r\nfunc foo[C ~*T | ~[]T, T any](v C) {} // compiles\r\n\r\nfunc main() {\r\n\tfoo(new(int))       // cannot infer T\r\n\tfoo(make([]int, 3)) // cannot infer T\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCompiles.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\n","go\r\npackage main\r\n\r\nfunc foo[C ~*T | ~[]T, T any](v C) {} // compiles\r\n\r\nfunc main() {\r\n\tfoo(new(int))       // cannot infer T\r\n\tfoo(make([]int, 3)) // cannot infer T\r\n}\r\n"
63592,"x/tools/gopls: incorrect rewrite import for ""error""<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n```\r\n\u279c  ~ gopls version\r\ngolang.org/x/tools/gopls v0.13.2\r\n    golang.org/x/tools/gopls@v0.13.2 h1:Pyvx6MKvatbX3zzZmdGiFRfQZl0ohPlt2sFxO/5j6Ro=\r\n```\r\n\r\n\r\n### go env\r\n```\r\ngo env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/pierre/.cache/go-build'\r\nGOENV='/home/pierre/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/pierre/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/pierre/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/pierre/.gimme/versions/go1.21.3.src'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/pierre/.gimme/versions/go1.21.3.src/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/pierre/Git/pierrre/assert/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1722284209=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n### What did you do?\r\n\r\nMy code contains this global variable:\r\n```\r\nvar ErrorStringer = error.Error\r\n```\r\n`error` refers to the pre-declared error interface.\r\nSo `error.Error` is the function implemented by this interface that returns a string.\r\n\r\n### What did you expect to see?\r\n\r\nWhen I save my code in my editor, it should save it without changing my imports.\r\n\r\n\r\n### What did you see instead?\r\n\r\nWhen I save the file, gopls rewrites my imports and adds `github.com/coreos/etcd/error`, which breaks my code.\r\n\r\n\r\n### Editor and settings\r\n\r\n\r\n\r\n\r\n\r\n### Logs\r\n\r\n```\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 fixImports(filename=""/home/pierre/Git/pierrre/assert/error.go""), abs=""/home/pierre/Git/pierrre/assert/error.go"", srcDir=""/home/pierre/Git/pierrre/assert"" ...\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 loading package names for 48 packages\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 done loading package names for 48 packages\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 error candidate 1/1: github.com/coreos/etcd/error in /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 loading exports in dir /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error (seeking package error)\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 fixImports(filename=""/home/pierre/Git/pierrre/assert/error.go""), abs=""/home/pierre/Git/pierrre/assert/error.go"", srcDir=""/home/pierre/Git/pierrre/assert"" ...\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 loading package names for 48 packages\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 done loading package names for 48 packages\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 loading exports in dir /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error (seeking package error)\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 error candidate 1/1: github.com/coreos/etcd/error in /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error\r\n```\r\n\r\n\r\n",NeedsInvestigation|gopls|Tools|gopls/imports,adonovan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n```\r\n\u279c  ~ gopls version\r\ngolang.org/x/tools/gopls v0.13.2\r\n    golang.org/x/tools/gopls@v0.13.2 h1:Pyvx6MKvatbX3zzZmdGiFRfQZl0ohPlt2sFxO/5j6Ro=\r\n```\r\n\r\n\r\n### go env\r\n```\r\ngo env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/pierre/.cache/go-build'\r\nGOENV='/home/pierre/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/pierre/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/pierre/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/pierre/.gimme/versions/go1.21.3.src'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/pierre/.gimme/versions/go1.21.3.src/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/pierre/Git/pierrre/assert/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1722284209=/tmp/go-build -gno-record-gcc-switches'\r\n```\r\n\r\n### What did you do?\r\n\r\nMy code contains this global variable:\r\n```\r\nvar ErrorStringer = error.Error\r\n```\r\n`error` refers to the pre-declared error interface.\r\nSo `error.Error` is the function implemented by this interface that returns a string.\r\n\r\n### What did you expect to see?\r\n\r\nWhen I save my code in my editor, it should save it without changing my imports.\r\n\r\n\r\n### What did you see instead?\r\n\r\nWhen I save the file, gopls rewrites my imports and adds `github.com/coreos/etcd/error`, which breaks my code.\r\n\r\n\r\n### Editor and settings\r\n\r\n```javascript\r\n{\r\n\t""window.titleBarStyle"": ""custom"",\r\n\r\n\t""workbench.startupEditor"": ""none"",\r\n\t""workbench.settings.editor"": ""json"",\r\n\t""workbench.settings.useSplitJSON"": true,\r\n\t""workbench.list.horizontalScrolling"": true,\r\n\t""workbench.colorTheme"": ""Deepdark Material Theme | Full Black Version"",\r\n\r\n\t""editor.fontFamily"": ""Monospace"",\r\n\t""editor.fontSize"": 12,\r\n\t""editor.lineHeight"": 14,\r\n\t""editor.fontLigatures"": ""'ccmp' off"", // Fix for https://github.com/microsoft/vscode/issues/106583\r\n\t""editor.renderWhitespace"": ""all"",\r\n\t""editor.wordWrap"": ""on"",\r\n\t""editor.insertSpaces"": false,\r\n\t""editor.smoothScrolling"": true,\r\n\t""editor.minimap.enabled"": false,\r\n\t""editor.minimap.autohide"": true,\r\n\t""editor.minimap.renderCharacters"": false,\r\n\t""editor.inlineSuggest.enabled"": true,\r\n\t""editor.stickyScroll.enabled"": true,\r\n\r\n\t""files.enableTrash"": false,\r\n\t""files.autoSave"": ""onFocusChange"",\r\n\t""files.trimTrailingWhitespace"": true,\r\n\t""files.insertFinalNewline"": true,\r\n\t""files.trimFinalNewlines"": true,\r\n\t""files.associations"": {\r\n\t\t""Dockerfile*"": ""dockerfile""\r\n\t},\r\n\r\n\t""terminal.integrated.fontSize"": 12,\r\n\t""terminal.integrated.scrollback"": 100000,\r\n\r\n\t""search.showLineNumbers"": true,\r\n\r\n\t""git.autofetch"": true,\r\n\t""git.allowForcePush"": true,\r\n\t""git.confirmForcePush"": false,\r\n\t""git.enableSmartCommit"": true,\r\n\t""git.pruneOnFetch"": true,\r\n\r\n\t""redhat.telemetry.enabled"": false,\r\n\r\n\t""github.copilot.enable"": {\r\n\t\t""*"": true,\r\n\t\t""yaml"": true,\r\n\t\t""plaintext"": true,\r\n\t\t""markdown"": true\r\n\t},\r\n\r\n\t""go.buildFlags"": [\r\n\t\t""-gcflags=-e""\r\n\t],\r\n\t""go.testOnSave"": true,\r\n\t""go.testExplorer.showOutput"": false,\r\n\t""go.testFlags"": [\r\n\t\t""-v"",\r\n\t\t""-fullpath"",\r\n\t\t""-short""\r\n\t],\r\n\t""go.testEnvVars"": {\r\n\t\t""ASSERTAUTO_UPDATE"": ""true"",\r\n\t\t""UPDATE_GOLDENS"": ""true"",\r\n\t},\r\n\t""go.coverOnSave"": true,\r\n\t""go.coverageDecorator"": {\r\n\t\t""type"": ""gutter"",\r\n\t\t""coveredGutterStyle"": ""blockgreen"",\r\n\t\t""uncoveredGutterStyle"": ""blockred"",\r\n\t\t""coveredHighlightColor"": ""rgba(0,255,0,0.08)"",\r\n\t\t""uncoveredHighlightColor"": ""rgba(255,0,0,0.08)""\r\n\t},\r\n\t""go.lintOnSave"": ""package"",\r\n\t""go.lintTool"": ""golangci-lint"",\r\n\t""go.lintFlags"": [\r\n\t\t""--fix""\r\n\t],\r\n\t""gopls"": {\r\n\t\t""verboseOutput"": true,\r\n\t\t""ui.completion.usePlaceholders"": true,\r\n\t\t""ui.codelenses"": {\r\n\t\t\t""gc_details"": true\r\n\t\t},\r\n\t\t""ui.semanticTokens"": true,\r\n\t},\r\n\t""go.toolsManagement.autoUpdate"": true,\r\n\t""go.toolsEnvVars"": {\r\n\t\t""GOPRIVATE"": """",\r\n\t\t""GOGC"":""10"",\r\n\t},\r\n\t/*\r\n\t""go.inlayHints.assignVariableTypes"": true,\r\n\t""go.inlayHints.compositeLiteralFields"": true,\r\n\t""go.inlayHints.compositeLiteralTypes"": true,\r\n\t""go.inlayHints.constantValues"": true,\r\n\t""go.inlayHints.functionTypeParameters"": true,\r\n\t""go.inlayHints.parameterNames"": true,\r\n\t""go.inlayHints.rangeVariableTypes"": true,\r\n\t*/\r\n\t""[python]"": {\r\n\t\t""editor.formatOnType"": true\r\n\t},\r\n}\r\n```\r\n\r\n\r\n\r\n### Logs\r\n\r\n```\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 fixImports(filename=""/home/pierre/Git/pierrre/assert/error.go""), abs=""/home/pierre/Git/pierrre/assert/error.go"", srcDir=""/home/pierre/Git/pierrre/assert"" ...\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 loading package names for 48 packages\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 done loading package names for 48 packages\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 error candidate 1/1: github.com/coreos/etcd/error in /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error\r\n\r\n[Info  - 15:34:21] 2023/10/17 15:34:21 loading exports in dir /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error (seeking package error)\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 fixImports(filename=""/home/pierre/Git/pierrre/assert/error.go""), abs=""/home/pierre/Git/pierrre/assert/error.go"", srcDir=""/home/pierre/Git/pierrre/assert"" ...\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 loading package names for 48 packages\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 done loading package names for 48 packages\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 loading exports in dir /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error (seeking package error)\r\n\r\n[Info  - 15:34:23] 2023/10/17 15:34:23 error candidate 1/1: github.com/coreos/etcd/error in /home/pierre/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/error\r\n```\r\n\r\n\r\n","javascript\r\n{\r\n\t""window.titleBarStyle"": ""custom"",\r\n\r\n\t""workbench.startupEditor"": ""none"",\r\n\t""workbench.settings.editor"": ""json"",\r\n\t""workbench.settings.useSplitJSON"": true,\r\n\t""workbench.list.horizontalScrolling"": true,\r\n\t""workbench.colorTheme"": ""Deepdark Material Theme | Full Black Version"",\r\n\r\n\t""editor.fontFamily"": ""Monospace"",\r\n\t""editor.fontSize"": 12,\r\n\t""editor.lineHeight"": 14,\r\n\t""editor.fontLigatures"": ""'ccmp' off"", // Fix for https://github.com/microsoft/vscode/issues/106583\r\n\t""editor.renderWhitespace"": ""all"",\r\n\t""editor.wordWrap"": ""on"",\r\n\t""editor.insertSpaces"": false,\r\n\t""editor.smoothScrolling"": true,\r\n\t""editor.minimap.enabled"": false,\r\n\t""editor.minimap.autohide"": true,\r\n\t""editor.minimap.renderCharacters"": false,\r\n\t""editor.inlineSuggest.enabled"": true,\r\n\t""editor.stickyScroll.enabled"": true,\r\n\r\n\t""files.enableTrash"": false,\r\n\t""files.autoSave"": ""onFocusChange"",\r\n\t""files.trimTrailingWhitespace"": true,\r\n\t""files.insertFinalNewline"": true,\r\n\t""files.trimFinalNewlines"": true,\r\n\t""files.associations"": {\r\n\t\t""Dockerfile*"": ""dockerfile""\r\n\t},\r\n\r\n\t""terminal.integrated.fontSize"": 12,\r\n\t""terminal.integrated.scrollback"": 100000,\r\n\r\n\t""search.showLineNumbers"": true,\r\n\r\n\t""git.autofetch"": true,\r\n\t""git.allowForcePush"": true,\r\n\t""git.confirmForcePush"": false,\r\n\t""git.enableSmartCommit"": true,\r\n\t""git.pruneOnFetch"": true,\r\n\r\n\t""redhat.telemetry.enabled"": false,\r\n\r\n\t""github.copilot.enable"": {\r\n\t\t""*"": true,\r\n\t\t""yaml"": true,\r\n\t\t""plaintext"": true,\r\n\t\t""markdown"": true\r\n\t},\r\n\r\n\t""go.buildFlags"": [\r\n\t\t""-gcflags=-e""\r\n\t],\r\n\t""go.testOnSave"": true,\r\n\t""go.testExplorer.showOutput"": false,\r\n\t""go.testFlags"": [\r\n\t\t""-v"",\r\n\t\t""-fullpath"",\r\n\t\t""-short""\r\n\t],\r\n\t""go.testEnvVars"": {\r\n\t\t""ASSERTAUTO_UPDATE"": ""true"",\r\n\t\t""UPDATE_GOLDENS"": ""true"",\r\n\t},\r\n\t""go.coverOnSave"": true,\r\n\t""go.coverageDecorator"": {\r\n\t\t""type"": ""gutter"",\r\n\t\t""coveredGutterStyle"": ""blockgreen"",\r\n\t\t""uncoveredGutterStyle"": ""blockred"",\r\n\t\t""coveredHighlightColor"": ""rgba(0,255,0,0.08)"",\r\n\t\t""uncoveredHighlightColor"": ""rgba(255,0,0,0.08)""\r\n\t},\r\n\t""go.lintOnSave"": ""package"",\r\n\t""go.lintTool"": ""golangci-lint"",\r\n\t""go.lintFlags"": [\r\n\t\t""--fix""\r\n\t],\r\n\t""gopls"": {\r\n\t\t""verboseOutput"": true,\r\n\t\t""ui.completion.usePlaceholders"": true,\r\n\t\t""ui.codelenses"": {\r\n\t\t\t""gc_details"": true\r\n\t\t},\r\n\t\t""ui.semanticTokens"": true,\r\n\t},\r\n\t""go.toolsManagement.autoUpdate"": true,\r\n\t""go.toolsEnvVars"": {\r\n\t\t""GOPRIVATE"": """",\r\n\t\t""GOGC"":""10"",\r\n\t},\r\n\t/*\r\n\t""go.inlayHints.assignVariableTypes"": true,\r\n\t""go.inlayHints.compositeLiteralFields"": true,\r\n\t""go.inlayHints.compositeLiteralTypes"": true,\r\n\t""go.inlayHints.constantValues"": true,\r\n\t""go.inlayHints.functionTypeParameters"": true,\r\n\t""go.inlayHints.parameterNames"": true,\r\n\t""go.inlayHints.rangeVariableTypes"": true,\r\n\t*/\r\n\t""[python]"": {\r\n\t\t""editor.formatOnType"": true\r\n\t},\r\n}\r\n"
63567,"os: Setenv leads to SIGSEGV with GODEBUG=netdns=cgo, and other uses of cgo<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nLinux: Reproduced with Ubuntu 20.04.6, Debian 12.\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ej/.cache/go-build'\r\nGOENV='/home/ej/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ej/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ej/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/home/ej/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ej/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1987860609=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nA program that uses the `netdns=cgo` resolver with glibc and calls `os.Setenv` in other goroutines can crash with `SIGSEGV`. The problem is that `getaddrinfo` in glibc calls `getenv`, because it can be configured with a number of environment variables (see [man resolv.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html)). The C `setenv` function is [documented as not being thread-safe (""MT-Unsafe const:env"")](https://man7.org/linux/man-pages/man3/setenv.3.html). Currently, `os.Setenv` calls C `setenv`, so it is violating the specification. When this happens, C calls to `getenv`, either explicitly or in the C library itself (e.g. `getaddrinfo`, `mktime`, others), can crash.\r\n\r\nmusl libc does not have the specific problem with `netdns=cgo` because in general it is much less configurable, so the resolver does not call getenv ([see list of musl environment variables]). However, Go programs using musl that explicitly use Cgo and then directly or indirectly call `getenv` can still crash.\r\n\r\n\r\n#### Discussion of possible solutions\r\n\r\nSince C `getenv` returns a `char*`, it can't be made thread-safe. Unfortunately, glibc does not want to provide a thread-safe alternative for accessing environment variables. Different versions of this bug have caught many people over the past few decades. I think this means Go does not have that many options. Here are some ideas:\r\n\r\n* Document `os.Setenv` as being unsafe. It seems to me we should do this immediately. I'm happy to submit a documentation patch. Rust's [standard library std::env::set_var function has a nice warning we could borrow from](https://doc.rust-lang.org/std/env/fn.set_var.html).\r\n* Create a new `os.SetenvGoOnly` function, then mark `os.Setenv` as deprecated. We would probably want to provide a new way to set C environment variables (e.g. `cgo.SynchronizeGoEnvVars`? `cgo.Setenv`?).  This would allow programs to decide if they have a ""safe"" use of Setenv or not. Programs will sometimes get this wrong (e.g. goroutines can be created from `init()` functions), but at least the functions could be documented appropriately.\r\n* Don't call C's `setenv` from `os.Setenv`. This would almost certainly break some existing Cgo programs. We would also need to provide some way for Go to set C environment variables. This is similar to the previous choice, but would redefine `os.Setenv`, rather than creating a new function.\r\n\r\n\r\n#### Example reproduction\r\n\r\nThis example program crashes for me when run inside a Docker container. I do not know why I can't get seem to get it to crash outside the container.\r\n\r\n\r\n\r\nTo build and run in a docker container:\r\n\r\n\r\n\r\nIn case it is helpful, see https://github.com/evanj/cgogetenvcrash for a Git repository with a complete example, as well as a different example that explicitly calls `getenv` using Cgo, and *does* crash reliabily for me without Docker.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA successful program exit.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe following segmentation fault:\r\n\r\n```\r\ngo package net: confVal.netCgo = true  netGo = false\r\ngo package net: using cgo DNS resolver\r\ngo package net: hostLookupOrder(localhost) = cgo\r\nSIGSEGV: segmentation violation\r\nPC=0x7f5740e450cd m=0 sigcode=1\r\nsignal arrived during cgo execution\r\n\r\ngoroutine 20 [syscall]:\r\nruntime.cgocall(0x401000, 0xc00003ed88)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/cgocall.go:157 +0x4b fp=0xc00003ed60 sp=0xc00003ed28 pc=0x40568b\r\nnet._C2func_getaddrinfo(0xc0000a6700, 0x0, 0xc00009e420, 0xc00009a040)\r\n\t_cgo_gotypes.go:100 +0x55 fp=0xc00003ed88 sp=0xc00003ed60 pc=0x4c6175\r\nnet._C_getaddrinfo.func1(0x40e3e5?, 0x8?, 0x4d4120?, 0x1?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix_cgo.go:78 +0x7a fp=0xc00003edf0 sp=0xc00003ed88 pc=0x4c653a\r\nnet._C_getaddrinfo(0x4faaeb?, 0x9?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix_cgo.go:78 +0x13 fp=0xc00003ee20 sp=0xc00003edf0 pc=0x4c6473\r\nnet.cgoLookupHostIP({0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:166 +0x24f fp=0xc00003ef60 sp=0xc00003ee20 pc=0x4a9def\r\nnet.cgoLookupIP.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:215 +0x25 fp=0xc00003ef90 sp=0xc00003ef60 pc=0x4aa505\r\nnet.doBlockingWithCtx[...].func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:56 +0x35 fp=0xc00003efe0 sp=0xc00003ef90 pc=0x4c67f5\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003efe8 sp=0xc00003efe0 pc=0x465ca1\r\ncreated by net.doBlockingWithCtx[...] in goroutine 5\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:54 +0xd8\r\n\r\ngoroutine 1 [runnable]:\r\nruntime.evacuate_faststr(0x4ddc20, 0xc00009e390, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:402 +0x3da fp=0xc000052d18 sp=0xc000052d10 pc=0x413eda\r\nruntime.growWork_faststr(0xc000052da8?, 0xc00009e390, 0x5be830?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:398 +0x5f fp=0xc000052d48 sp=0xc000052d18 pc=0x413abf\r\nruntime.mapassign_faststr(0x4ddc20, 0xc00009e390, {0xc000016110, 0xb})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:227 +0x125 fp=0xc000052db8 sp=0xc000052d48 pc=0x413405\r\nsyscall.Setenv({0xc000016110, 0xb}, {0x4fa2ad, 0x3})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/syscall/env_unix.go:121 +0x325 fp=0xc000052e58 sp=0xc000052db8 pc=0x47d365\r\nos.Setenv({0xc000016110?, 0xc?}, {0x4fa2ad?, 0x1?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/os/env.go:120 +0x25 fp=0xc000052e98 sp=0xc000052e58 pc=0x48e9a5\r\nmain.main()\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:44 +0x1fa fp=0xc000052f40 sp=0xc000052e98 pc=0x4cba9a\r\nruntime.main()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:267 +0x2bb fp=0xc000052fe0 sp=0xc000052f40 pc=0x43895b\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000052fe8 sp=0xc000052fe0 pc=0x465ca1\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000042fa8 sp=0xc000042f88 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:322 +0xb3 fp=0xc000042fe0 sp=0xc000042fa8 pc=0x438c33\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000042fe8 sp=0xc000042fe0 pc=0x465ca1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000043778 sp=0xc000043758 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcsweep.go:280 +0x94 fp=0xc0000437c8 sp=0xc000043778 pc=0x4250d4\r\nruntime.gcenable.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:200 +0x25 fp=0xc0000437e0 sp=0xc0000437c8 pc=0x41a465\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000437e8 sp=0xc0000437e0 pc=0x465ca1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00006c000?, 0x521cb0?, 0x1?, 0x0?, 0xc0000091e0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000043f70 sp=0xc000043f50 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x5c73e0)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc000043fa0 sp=0xc000043f70 pc=0x422969\r\nruntime.bgscavenge(0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc000043fc8 sp=0xc000043fa0 pc=0x422efc\r\nruntime.gcenable.func2()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:201 +0x25 fp=0xc000043fe0 sp=0xc000043fc8 pc=0x41a405\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000043fe8 sp=0xc000043fe0 pc=0x465ca1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:201 +0xa5\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x4f8960?, 0x100439f01?, 0x0?, 0x0?, 0x440f65?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000042628 sp=0xc000042608 pc=0x438dae\r\nruntime.runfinq()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mfinal.go:193 +0x107 fp=0xc0000427e0 sp=0xc000042628 pc=0x4194e7\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000427e8 sp=0xc0000427e0 pc=0x465ca1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mfinal.go:163 +0x3d\r\n\r\ngoroutine 19 [select]:\r\nruntime.gopark(0xc000057e90?, 0x2?, 0x8?, 0x31?, 0xc000057dec?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000057c38 sp=0xc000057c18 pc=0x438dae\r\nruntime.selectgo(0xc000057e90, 0xc000057de8, 0xc?, 0x0, 0x0?, 0x1)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/select.go:327 +0x725 fp=0xc000057d58 sp=0xc000057c38 pc=0x4487e5\r\nnet.(*Resolver).lookupIPAddr(0x5c7100, {0x523710?, 0x5f4c80}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:332 +0x3fe fp=0xc000057f38 sp=0xc000057d58 pc=0x4bcf7e\r\nnet.(*Resolver).LookupIPAddr(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:210\r\nnet.LookupIP({0x4faaeb?, 0x0?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:196 +0x49 fp=0xc000057fb8 sp=0xc000057f38 pc=0x4bca09\r\nmain.main.func1()\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:32 +0x28 fp=0xc000057fe0 sp=0xc000057fb8 pc=0x4cbb08\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x465ca1\r\ncreated by main.main in goroutine 1\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:31 +0x1a6\r\n\r\ngoroutine 5 [select]:\r\nruntime.gopark(0xc000058b50?, 0x2?, 0xa0?, 0x81?, 0xc000058b34?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc0000589e0 sp=0xc0000589c0 pc=0x438dae\r\nruntime.selectgo(0xc000058b50, 0xc000058b30, 0x27?, 0x0, 0x437ad5?, 0x1)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/select.go:327 +0x725 fp=0xc000058b00 sp=0xc0000589e0 pc=0x4487e5\r\nnet.doBlockingWithCtx[...]({0x523780, 0xc000078050}, 0xc00009e3c0)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:60 +0x14f fp=0xc000058bd0 sp=0xc000058b00 pc=0x4c7def\r\nnet.cgoLookupIP({0x523780, 0xc000078050}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:214 +0xb4 fp=0xc000058c00 sp=0xc000058bd0 pc=0x4aa474\r\nnet.(*Resolver).lookupIP(0x5c7100, {0x523780, 0xc000078050}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup_unix.go:70 +0x11a fp=0xc000058e58 sp=0xc000058c00 pc=0x4be3ba\r\nnet.(*Resolver).lookupIP-fm({0x523780?, 0xc000078050?}, {0x4fa26d?, 0x0?}, {0x4faaeb?, 0x0?})\r\n\t<autogenerated>:1 +0x49 fp=0xc000058ea0 sp=0xc000058e58 pc=0x4c9049\r\nnet.glob..func1({0x523780?, 0xc000078050?}, 0x0?, {0x4fa26d?, 0x0?}, {0x4faaeb?, 0x0?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/hook.go:23 +0x37 fp=0xc000058ee0 sp=0xc000058ea0 pc=0x4b6db7\r\nnet.(*Resolver).lookupIPAddr.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:324 +0x3a fp=0xc000058f38 sp=0xc000058ee0 pc=0x4bd99a\r\ninternal/singleflight.(*Group).doCall(0x5c7110, 0xc0000780a0, {0xc000016060, 0xc}, 0xc00008e0c0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:93 +0x35 fp=0xc000058fa8 sp=0xc000058f38 pc=0x4a7975\r\ninternal/singleflight.(*Group).DoChan.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:86 +0x30 fp=0xc000058fe0 sp=0xc000058fa8 pc=0x4a7910\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000058fe8 sp=0xc000058fe0 pc=0x465ca1\r\ncreated by internal/singleflight.(*Group).DoChan in goroutine 19\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:86 +0x2e9\r\n\r\nrax    0xb\r\nrbx    0x19ac\r\nrcx    0x0\r\nrdx    0x7f5740e0371c\r\nrdi    0x7f5740f9f87b\r\nrsi    0x7ffe40eea560\r\nrbp    0x19ac090\r\nrsp    0x7ffe40eea3a0\r\nr8     0x0\r\nr9     0x7ffe40eea430\r\nr10    0xc0000a6700\r\nr11    0xb\r\nr12    0x4f4c\r\nr13    0x7f5740f9f87d\r\nr14    0xb\r\nr15    0x9\r\nrip    0x7f5740e450cd\r\nrflags 0x10206\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n\r\nThe gdb backtrace is the following:\r\n\r\n```\r\n#0  runtime.usleep () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:135\r\n135\tin /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s\r\n(gdb) bt\r\n#0  runtime.usleep () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:135\r\n#1  0x000000000044b9aa in runtime.sighandler (sig=11, info=<optimized out>, ctxt=<optimized out>, gp=<optimized out>)\r\n    at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/signal_unix.go:769\r\n#2  0x000000000044b02e in runtime.sigtrampgo (sig=11, info=0xc0000114b0, ctx=0xc000011380)\r\n    at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/signal_unix.go:490\r\n#3  0x00000000004677c6 in runtime.sigtramp () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:352\r\n#4  <signal handler called>\r\n#5  __GI_getenv (name=0x7f5740f9f87d ""CALDOMAIN"", name@entry=0x7f5740f9f87b ""LOCALDOMAIN"") at ./stdlib/getenv.c:84\r\n#6  0x00007f5740f5016c in __nscd_getai (key=key@entry=0xc0000a6700 ""localhost"", result=result@entry=0x7ffe40eea560, h_errnop=0x7f5740e0371c) at ./nscd/nscd_getai.c:47\r\n#7  0x00007f5740ef7312 in get_nscd_addresses (res=0x7ffe40eea540, req=0xc00009e420, name=0xc0000a6700 ""localhost"") at ../sysdeps/posix/getaddrinfo.c:495\r\n#8  gaih_inet (tmpbuf=0x7ffe40eea690, naddrs=<synthetic pointer>, pai=0x7ffe40eea510, req=0xc00009e420, service=<optimized out>, name=0xc0000a6700 ""localhost"")\r\n    at ../sysdeps/posix/getaddrinfo.c:1173\r\n#9  __GI_getaddrinfo (name=<optimized out>, service=<optimized out>, hints=0xc00009e420, pai=0xc00009a040) at ../sysdeps/posix/getaddrinfo.c:2398\r\n#10 0x0000000000401034 in net(.text) ()\r\n#11 0x000000c00003ed88 in ?? ()\r\n#12 0x000000c000082b60 in ?? ()\r\n#13 0x0000000000000008 in ?? ()\r\n#14 0x000000c00003ed18 in ?? ()\r\n#15 0x0000000000465928 in runtime.asmcgocall () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:872\r\n#16 0x000000c0000081a0 in ?? ()\r\n#17 0x00007ffe40eeac58 in ?? ()\r\n#18 0x0000000000441128 in runtime.newproc.func1 () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:4487\r\n#19 0x000000c0000096c0 in ?? ()\r\n#20 0x000000000046835f in runtime.newproc (fn=0x0) at <autogenerated>:1\r\n#21 0x00000000005c7480 in runtime[scavenger] ()\r\n#22 0x0000000000000000 in ?? ()\r\n```\r\n",NeedsInvestigation|compiler/runtime,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nLinux: Reproduced with Ubuntu 20.04.6, Debian 12.\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/ej/.cache/go-build'\r\nGOENV='/home/ej/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/ej/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/ej/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/home/ej/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/ej/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1987860609=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nA program that uses the `netdns=cgo` resolver with glibc and calls `os.Setenv` in other goroutines can crash with `SIGSEGV`. The problem is that `getaddrinfo` in glibc calls `getenv`, because it can be configured with a number of environment variables (see [man resolv.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html)). The C `setenv` function is [documented as not being thread-safe (""MT-Unsafe const:env"")](https://man7.org/linux/man-pages/man3/setenv.3.html). Currently, `os.Setenv` calls C `setenv`, so it is violating the specification. When this happens, C calls to `getenv`, either explicitly or in the C library itself (e.g. `getaddrinfo`, `mktime`, others), can crash.\r\n\r\nmusl libc does not have the specific problem with `netdns=cgo` because in general it is much less configurable, so the resolver does not call getenv ([see list of musl environment variables]). However, Go programs using musl that explicitly use Cgo and then directly or indirectly call `getenv` can still crash.\r\n\r\n\r\n#### Discussion of possible solutions\r\n\r\nSince C `getenv` returns a `char*`, it can't be made thread-safe. Unfortunately, glibc does not want to provide a thread-safe alternative for accessing environment variables. Different versions of this bug have caught many people over the past few decades. I think this means Go does not have that many options. Here are some ideas:\r\n\r\n* Document `os.Setenv` as being unsafe. It seems to me we should do this immediately. I'm happy to submit a documentation patch. Rust's [standard library std::env::set_var function has a nice warning we could borrow from](https://doc.rust-lang.org/std/env/fn.set_var.html).\r\n* Create a new `os.SetenvGoOnly` function, then mark `os.Setenv` as deprecated. We would probably want to provide a new way to set C environment variables (e.g. `cgo.SynchronizeGoEnvVars`? `cgo.Setenv`?).  This would allow programs to decide if they have a ""safe"" use of Setenv or not. Programs will sometimes get this wrong (e.g. goroutines can be created from `init()` functions), but at least the functions could be documented appropriately.\r\n* Don't call C's `setenv` from `os.Setenv`. This would almost certainly break some existing Cgo programs. We would also need to provide some way for Go to set C environment variables. This is similar to the previous choice, but would redefine `os.Setenv`, rather than creating a new function.\r\n\r\n\r\n#### Example reproduction\r\n\r\nThis example program crashes for me when run inside a Docker container. I do not know why I can't get seem to get it to crash outside the container.\r\n\r\n```go\r\nfunc main() {\r\n  addrsDone := make(chan struct{})\r\n  go func() {\r\n    addrs, err := net.LookupIP(""localhost"")\r\n    if err != nil {\r\n      panic(err)\r\n    }\r\n    if len(addrs) == 0 {\r\n      panic(""no addrs for localhost"")\r\n    }\r\n    close(addrsDone)\r\n  }()\r\n\r\n  // setting many environment variables makes the bug much more likely\r\n  // but it happens sometimes with even just one call\r\n  for i := 0; i < 100; i++ {\r\n    os.Setenv(fmt.Sprintf(""ENV_VAR_%03d"", i), ""foo"")\r\n  }\r\n\r\n  <-addrsDone\r\n}\r\n```\r\n\r\nTo build and run in a docker container:\r\n\r\n```bash\r\n# Outside docker: build then start a container\r\nCGO_ENABLED=1 go build -o cgogetenvcrash .\r\ndocker run --rm -ti --mount type=bind,source=$(pwd),destination=/cgogetenvcrash debian:latest\r\n\r\n# Inside the docker container: run the program and cause it to crash\r\nfor i in $(seq 10000); do GOTRACEBACK=crash GODEBUG=netdns=2+cgo /cgogetenvcrash/cgogetenvcrash || break; done\r\n```\r\n\r\nIn case it is helpful, see https://github.com/evanj/cgogetenvcrash for a Git repository with a complete example, as well as a different example that explicitly calls `getenv` using Cgo, and *does* crash reliabily for me without Docker.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA successful program exit.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe following segmentation fault:\r\n\r\n```\r\ngo package net: confVal.netCgo = true  netGo = false\r\ngo package net: using cgo DNS resolver\r\ngo package net: hostLookupOrder(localhost) = cgo\r\nSIGSEGV: segmentation violation\r\nPC=0x7f5740e450cd m=0 sigcode=1\r\nsignal arrived during cgo execution\r\n\r\ngoroutine 20 [syscall]:\r\nruntime.cgocall(0x401000, 0xc00003ed88)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/cgocall.go:157 +0x4b fp=0xc00003ed60 sp=0xc00003ed28 pc=0x40568b\r\nnet._C2func_getaddrinfo(0xc0000a6700, 0x0, 0xc00009e420, 0xc00009a040)\r\n\t_cgo_gotypes.go:100 +0x55 fp=0xc00003ed88 sp=0xc00003ed60 pc=0x4c6175\r\nnet._C_getaddrinfo.func1(0x40e3e5?, 0x8?, 0x4d4120?, 0x1?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix_cgo.go:78 +0x7a fp=0xc00003edf0 sp=0xc00003ed88 pc=0x4c653a\r\nnet._C_getaddrinfo(0x4faaeb?, 0x9?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix_cgo.go:78 +0x13 fp=0xc00003ee20 sp=0xc00003edf0 pc=0x4c6473\r\nnet.cgoLookupHostIP({0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:166 +0x24f fp=0xc00003ef60 sp=0xc00003ee20 pc=0x4a9def\r\nnet.cgoLookupIP.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:215 +0x25 fp=0xc00003ef90 sp=0xc00003ef60 pc=0x4aa505\r\nnet.doBlockingWithCtx[...].func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:56 +0x35 fp=0xc00003efe0 sp=0xc00003ef90 pc=0x4c67f5\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003efe8 sp=0xc00003efe0 pc=0x465ca1\r\ncreated by net.doBlockingWithCtx[...] in goroutine 5\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:54 +0xd8\r\n\r\ngoroutine 1 [runnable]:\r\nruntime.evacuate_faststr(0x4ddc20, 0xc00009e390, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:402 +0x3da fp=0xc000052d18 sp=0xc000052d10 pc=0x413eda\r\nruntime.growWork_faststr(0xc000052da8?, 0xc00009e390, 0x5be830?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:398 +0x5f fp=0xc000052d48 sp=0xc000052d18 pc=0x413abf\r\nruntime.mapassign_faststr(0x4ddc20, 0xc00009e390, {0xc000016110, 0xb})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/map_faststr.go:227 +0x125 fp=0xc000052db8 sp=0xc000052d48 pc=0x413405\r\nsyscall.Setenv({0xc000016110, 0xb}, {0x4fa2ad, 0x3})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/syscall/env_unix.go:121 +0x325 fp=0xc000052e58 sp=0xc000052db8 pc=0x47d365\r\nos.Setenv({0xc000016110?, 0xc?}, {0x4fa2ad?, 0x1?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/os/env.go:120 +0x25 fp=0xc000052e98 sp=0xc000052e58 pc=0x48e9a5\r\nmain.main()\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:44 +0x1fa fp=0xc000052f40 sp=0xc000052e98 pc=0x4cba9a\r\nruntime.main()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:267 +0x2bb fp=0xc000052fe0 sp=0xc000052f40 pc=0x43895b\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000052fe8 sp=0xc000052fe0 pc=0x465ca1\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000042fa8 sp=0xc000042f88 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:322 +0xb3 fp=0xc000042fe0 sp=0xc000042fa8 pc=0x438c33\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000042fe8 sp=0xc000042fe0 pc=0x465ca1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000043778 sp=0xc000043758 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcsweep.go:280 +0x94 fp=0xc0000437c8 sp=0xc000043778 pc=0x4250d4\r\nruntime.gcenable.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:200 +0x25 fp=0xc0000437e0 sp=0xc0000437c8 pc=0x41a465\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000437e8 sp=0xc0000437e0 pc=0x465ca1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00006c000?, 0x521cb0?, 0x1?, 0x0?, 0xc0000091e0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000043f70 sp=0xc000043f50 pc=0x438dae\r\nruntime.goparkunlock(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x5c73e0)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc000043fa0 sp=0xc000043f70 pc=0x422969\r\nruntime.bgscavenge(0x0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc000043fc8 sp=0xc000043fa0 pc=0x422efc\r\nruntime.gcenable.func2()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:201 +0x25 fp=0xc000043fe0 sp=0xc000043fc8 pc=0x41a405\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000043fe8 sp=0xc000043fe0 pc=0x465ca1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mgc.go:201 +0xa5\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x4f8960?, 0x100439f01?, 0x0?, 0x0?, 0x440f65?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000042628 sp=0xc000042608 pc=0x438dae\r\nruntime.runfinq()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mfinal.go:193 +0x107 fp=0xc0000427e0 sp=0xc000042628 pc=0x4194e7\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000427e8 sp=0xc0000427e0 pc=0x465ca1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/mfinal.go:163 +0x3d\r\n\r\ngoroutine 19 [select]:\r\nruntime.gopark(0xc000057e90?, 0x2?, 0x8?, 0x31?, 0xc000057dec?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc000057c38 sp=0xc000057c18 pc=0x438dae\r\nruntime.selectgo(0xc000057e90, 0xc000057de8, 0xc?, 0x0, 0x0?, 0x1)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/select.go:327 +0x725 fp=0xc000057d58 sp=0xc000057c38 pc=0x4487e5\r\nnet.(*Resolver).lookupIPAddr(0x5c7100, {0x523710?, 0x5f4c80}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:332 +0x3fe fp=0xc000057f38 sp=0xc000057d58 pc=0x4bcf7e\r\nnet.(*Resolver).LookupIPAddr(...)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:210\r\nnet.LookupIP({0x4faaeb?, 0x0?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:196 +0x49 fp=0xc000057fb8 sp=0xc000057f38 pc=0x4bca09\r\nmain.main.func1()\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:32 +0x28 fp=0xc000057fe0 sp=0xc000057fb8 pc=0x4cbb08\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x465ca1\r\ncreated by main.main in goroutine 1\r\n\t/home/ej/cgogetenvcrash/cgogetenvcrash.go:31 +0x1a6\r\n\r\ngoroutine 5 [select]:\r\nruntime.gopark(0xc000058b50?, 0x2?, 0xa0?, 0x81?, 0xc000058b34?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:398 +0xce fp=0xc0000589e0 sp=0xc0000589c0 pc=0x438dae\r\nruntime.selectgo(0xc000058b50, 0xc000058b30, 0x27?, 0x0, 0x437ad5?, 0x1)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/select.go:327 +0x725 fp=0xc000058b00 sp=0xc0000589e0 pc=0x4487e5\r\nnet.doBlockingWithCtx[...]({0x523780, 0xc000078050}, 0xc00009e3c0)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:60 +0x14f fp=0xc000058bd0 sp=0xc000058b00 pc=0x4c7def\r\nnet.cgoLookupIP({0x523780, 0xc000078050}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/cgo_unix.go:214 +0xb4 fp=0xc000058c00 sp=0xc000058bd0 pc=0x4aa474\r\nnet.(*Resolver).lookupIP(0x5c7100, {0x523780, 0xc000078050}, {0x4fa26d, 0x2}, {0x4faaeb, 0x9})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup_unix.go:70 +0x11a fp=0xc000058e58 sp=0xc000058c00 pc=0x4be3ba\r\nnet.(*Resolver).lookupIP-fm({0x523780?, 0xc000078050?}, {0x4fa26d?, 0x0?}, {0x4faaeb?, 0x0?})\r\n\t<autogenerated>:1 +0x49 fp=0xc000058ea0 sp=0xc000058e58 pc=0x4c9049\r\nnet.glob..func1({0x523780?, 0xc000078050?}, 0x0?, {0x4fa26d?, 0x0?}, {0x4faaeb?, 0x0?})\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/hook.go:23 +0x37 fp=0xc000058ee0 sp=0xc000058ea0 pc=0x4b6db7\r\nnet.(*Resolver).lookupIPAddr.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/net/lookup.go:324 +0x3a fp=0xc000058f38 sp=0xc000058ee0 pc=0x4bd99a\r\ninternal/singleflight.(*Group).doCall(0x5c7110, 0xc0000780a0, {0xc000016060, 0xc}, 0xc00008e0c0?)\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:93 +0x35 fp=0xc000058fa8 sp=0xc000058f38 pc=0x4a7975\r\ninternal/singleflight.(*Group).DoChan.func1()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:86 +0x30 fp=0xc000058fe0 sp=0xc000058fa8 pc=0x4a7910\r\nruntime.goexit()\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000058fe8 sp=0xc000058fe0 pc=0x465ca1\r\ncreated by internal/singleflight.(*Group).DoChan in goroutine 19\r\n\t/home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/internal/singleflight/singleflight.go:86 +0x2e9\r\n\r\nrax    0xb\r\nrbx    0x19ac\r\nrcx    0x0\r\nrdx    0x7f5740e0371c\r\nrdi    0x7f5740f9f87b\r\nrsi    0x7ffe40eea560\r\nrbp    0x19ac090\r\nrsp    0x7ffe40eea3a0\r\nr8     0x0\r\nr9     0x7ffe40eea430\r\nr10    0xc0000a6700\r\nr11    0xb\r\nr12    0x4f4c\r\nr13    0x7f5740f9f87d\r\nr14    0xb\r\nr15    0x9\r\nrip    0x7f5740e450cd\r\nrflags 0x10206\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n\r\nThe gdb backtrace is the following:\r\n\r\n```\r\n#0  runtime.usleep () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:135\r\n135\tin /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s\r\n(gdb) bt\r\n#0  runtime.usleep () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:135\r\n#1  0x000000000044b9aa in runtime.sighandler (sig=11, info=<optimized out>, ctxt=<optimized out>, gp=<optimized out>)\r\n    at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/signal_unix.go:769\r\n#2  0x000000000044b02e in runtime.sigtrampgo (sig=11, info=0xc0000114b0, ctx=0xc000011380)\r\n    at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/signal_unix.go:490\r\n#3  0x00000000004677c6 in runtime.sigtramp () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/sys_linux_amd64.s:352\r\n#4  <signal handler called>\r\n#5  __GI_getenv (name=0x7f5740f9f87d ""CALDOMAIN"", name@entry=0x7f5740f9f87b ""LOCALDOMAIN"") at ./stdlib/getenv.c:84\r\n#6  0x00007f5740f5016c in __nscd_getai (key=key@entry=0xc0000a6700 ""localhost"", result=result@entry=0x7ffe40eea560, h_errnop=0x7f5740e0371c) at ./nscd/nscd_getai.c:47\r\n#7  0x00007f5740ef7312 in get_nscd_addresses (res=0x7ffe40eea540, req=0xc00009e420, name=0xc0000a6700 ""localhost"") at ../sysdeps/posix/getaddrinfo.c:495\r\n#8  gaih_inet (tmpbuf=0x7ffe40eea690, naddrs=<synthetic pointer>, pai=0x7ffe40eea510, req=0xc00009e420, service=<optimized out>, name=0xc0000a6700 ""localhost"")\r\n    at ../sysdeps/posix/getaddrinfo.c:1173\r\n#9  __GI_getaddrinfo (name=<optimized out>, service=<optimized out>, hints=0xc00009e420, pai=0xc00009a040) at ../sysdeps/posix/getaddrinfo.c:2398\r\n#10 0x0000000000401034 in net(.text) ()\r\n#11 0x000000c00003ed88 in ?? ()\r\n#12 0x000000c000082b60 in ?? ()\r\n#13 0x0000000000000008 in ?? ()\r\n#14 0x000000c00003ed18 in ?? ()\r\n#15 0x0000000000465928 in runtime.asmcgocall () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/asm_amd64.s:872\r\n#16 0x000000c0000081a0 in ?? ()\r\n#17 0x00007ffe40eeac58 in ?? ()\r\n#18 0x0000000000441128 in runtime.newproc.func1 () at /home/ej/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.21.3.linux-amd64/src/runtime/proc.go:4487\r\n#19 0x000000c0000096c0 in ?? ()\r\n#20 0x000000000046835f in runtime.newproc (fn=0x0) at <autogenerated>:1\r\n#21 0x00000000005c7480 in runtime[scavenger] ()\r\n#22 0x0000000000000000 in ?? ()\r\n```\r\n","go\r\nfunc main() {\r\n  addrsDone := make(chan struct{})\r\n  go func() {\r\n    addrs, err := net.LookupIP(""localhost"")\r\n    if err != nil {\r\n      panic(err)\r\n    }\r\n    if len(addrs) == 0 {\r\n      panic(""no addrs for localhost"")\r\n    }\r\n    close(addrsDone)\r\n  }()\r\n\r\n  // setting many environment variables makes the bug much more likely\r\n  // but it happens sometimes with even just one call\r\n  for i := 0; i < 100; i++ {\r\n    os.Setenv(fmt.Sprintf(""ENV_VAR_%03d"", i), ""foo"")\r\n  }\r\n\r\n  <-addrsDone\r\n}\r\n"
63563,"cmd/compile: ""constant V overflows T"" now reported as ""cannot convert V to type T""<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\nGo1.21\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What did you do?\r\nI ran this program\r\n\r\n\r\nwhich prints out\r\n\r\n#### Go1.21.1\r\n\r\n\r\n#### Go 1.17\r\n\r\n\r\n\r\n### What did you expect to see?\r\nThe old message until Go1.17 was much clearer\r\n\r\n\r\n### What did you see instead?\r\n\r\nA clear message about an overflow \r\n",NeedsDecision|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\nGo1.21\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What did you do?\r\nI ran this program\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nconst maxInt = 18446744073709551614\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%d => %d\\n"", int64(maxInt), int64(maxInt*2))\r\n}\r\n```\r\n\r\nwhich prints out\r\n\r\n#### Go1.21.1\r\n```shell\r\n./main.go:8:33: cannot convert maxInt (untyped int constant 18446744073709551614) to type int64\r\n./main.go:8:48: cannot convert maxInt * 2 (untyped int constant 36893488147419103228) to type int64\r\n```\r\n\r\n#### Go 1.17\r\n```shell\r\n./main.go:8:32: constant 18446744073709551614 overflows int64\r\n./main.go:8:47: constant 36893488147419103228 overflows int64\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nThe old message until Go1.17 was much clearer\r\n\r\n\r\n### What did you see instead?\r\n\r\nA clear message about an overflow \r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nconst maxInt = 18446744073709551614\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%d => %d\\n"", int64(maxInt), int64(maxInt*2))\r\n}\r\n"
63433,"cmd/compile: internal compiler error: not lowered: v7, StructMake0 STRUCT<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-6e8caefc19 Fri Oct 6 22:31:47 2023 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nno\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mitsuoheijo/.cache/go-build'\r\nGOENV='/home/mitsuoheijo/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mitsuoheijo/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mitsuoheijo/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mitsuoheijo/repos/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mitsuoheijo/repos/github.com/golang/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-6e8caefc19 Fri Oct 6 22:31:47 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mitsuoheijo/repos/github.com/johejo/sandbox/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2619123746=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/YE9SPKldInU?v=gotip\r\n\r\n\r\n\r\nThis reproduction was extracted from github.com/juju/utils/v3/shell.\r\nhttps://github.com/juju/utils/tree/v3.0.2/shell\r\n\r\n\r\n### What did you expect to see?\r\n\r\nbuild succeeds\r\n\r\n### What did you see instead?\r\n\r\n```\r\n<autogenerated>:1: internal compiler error: 'windowsRenderer.Join': not lowered: v7, StructMake0 STRUCT\r\n\r\ngoroutine 6 [running]:\r\nruntime/debug.Stack()\r\n        ../../golang/go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xbbb48?, 0xc0?}, {0xc0000bbb00, 0x8}, {0xc00007c220?, 0x2, 0x2})\r\n        ../../golang/go/src/cmd/compile/internal/base/print.go:225 +0x1d8\r\ncmd/compile/internal/base.Fatalf(...)\r\n        ../../golang/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x7f8979004898?, {0x10?, 0x0?}, {0xda932b, 0x2}, {0xc000036220?, 0x1, 0x0?})\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/ssa.go:8241 +0x171\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0xc000007520, {0xda932b, 0x2}, {0xc000036220?, 0x1, 0x1})\r\n        ../../golang/go/src/cmd/compile/internal/ssa/func.go:742 +0x27b\r\ncmd/compile/internal/ssa.checkLower(0xc000007520)\r\n        ../../golang/go/src/cmd/compile/internal/ssa/lower.go:49 +0x405\r\ncmd/compile/internal/ssa.Compile(0xc000007520)\r\n        ../../golang/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa15\r\ncmd/compile/internal/ssagen.buildssa(0xc000463c20, 0x1)\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/ssa.go:599 +0x2336\r\ncmd/compile/internal/ssagen.Compile(0xc000463c20, 0x1)\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x45\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x0?)\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 20\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n```\r\n\r\nbisected\r\nb72bbaebf9035c59806fd8073f2582e2d07764d5\r\n\r\n",NeedsInvestigation|compiler/runtime,dr2chase,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-6e8caefc19 Fri Oct 6 22:31:47 2023 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nno\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/mitsuoheijo/.cache/go-build'\r\nGOENV='/home/mitsuoheijo/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/mitsuoheijo/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/mitsuoheijo/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/mitsuoheijo/repos/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/mitsuoheijo/repos/github.com/golang/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-6e8caefc19 Fri Oct 6 22:31:47 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/mitsuoheijo/repos/github.com/johejo/sandbox/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build2619123746=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/YE9SPKldInU?v=gotip\r\n\r\n```go\r\npackage main\r\n\r\nimport ""strings""\r\n\r\ntype windowsRenderer struct {\r\n\tWindowsRenderer\r\n}\r\n\r\ntype WindowsRenderer struct{}\r\n\r\nconst (\r\n\tWindowsSeparator = '\\\\'\r\n)\r\n\r\nfunc (ur WindowsRenderer) Join(path ...string) string {\r\n\treturn Join(WindowsSeparator, ur.VolumeName, path...)\r\n}\r\n\r\nfunc (WindowsRenderer) VolumeName(path string) string {\r\n\treturn """"\r\n}\r\n\r\nfunc Join(sep uint8, volumeName func(string) string, elem ...string) string {\r\n\tfor i, e := range elem {\r\n\t\tif e != """" {\r\n\t\t\treturn Clean(sep, volumeName, strings.Join(elem[i:], string(sep)))\r\n\t\t}\r\n\t}\r\n\treturn """"\r\n}\r\n\r\nfunc Clean(sep uint8, volumeName func(string) string, path string) string {\r\n\treturn """"\r\n}\r\n\r\nfunc main() {}\r\n```\r\n\r\nThis reproduction was extracted from github.com/juju/utils/v3/shell.\r\nhttps://github.com/juju/utils/tree/v3.0.2/shell\r\n\r\n\r\n### What did you expect to see?\r\n\r\nbuild succeeds\r\n\r\n### What did you see instead?\r\n\r\n```\r\n<autogenerated>:1: internal compiler error: 'windowsRenderer.Join': not lowered: v7, StructMake0 STRUCT\r\n\r\ngoroutine 6 [running]:\r\nruntime/debug.Stack()\r\n        ../../golang/go/src/runtime/debug/stack.go:24 +0x5e\r\ncmd/compile/internal/base.FatalfAt({0xbbb48?, 0xc0?}, {0xc0000bbb00, 0x8}, {0xc00007c220?, 0x2, 0x2})\r\n        ../../golang/go/src/cmd/compile/internal/base/print.go:225 +0x1d8\r\ncmd/compile/internal/base.Fatalf(...)\r\n        ../../golang/go/src/cmd/compile/internal/base/print.go:194\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x7f8979004898?, {0x10?, 0x0?}, {0xda932b, 0x2}, {0xc000036220?, 0x1, 0x0?})\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/ssa.go:8241 +0x171\r\ncmd/compile/internal/ssa.(*Func).Fatalf(0xc000007520, {0xda932b, 0x2}, {0xc000036220?, 0x1, 0x1})\r\n        ../../golang/go/src/cmd/compile/internal/ssa/func.go:742 +0x27b\r\ncmd/compile/internal/ssa.checkLower(0xc000007520)\r\n        ../../golang/go/src/cmd/compile/internal/ssa/lower.go:49 +0x405\r\ncmd/compile/internal/ssa.Compile(0xc000007520)\r\n        ../../golang/go/src/cmd/compile/internal/ssa/compile.go:97 +0xa15\r\ncmd/compile/internal/ssagen.buildssa(0xc000463c20, 0x1)\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/ssa.go:599 +0x2336\r\ncmd/compile/internal/ssagen.Compile(0xc000463c20, 0x1)\r\n        ../../golang/go/src/cmd/compile/internal/ssagen/pgen.go:216 +0x45\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x0?)\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:182 +0x34\r\ncmd/compile/internal/gc.compileFunctions.func3.1()\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:164 +0x30\r\ncreated by cmd/compile/internal/gc.compileFunctions.func3 in goroutine 20\r\n        ../../golang/go/src/cmd/compile/internal/gc/compile.go:163 +0x247\r\n```\r\n\r\nbisected\r\nb72bbaebf9035c59806fd8073f2582e2d07764d5\r\n\r\n","go\r\npackage main\r\n\r\nimport ""strings""\r\n\r\ntype windowsRenderer struct {\r\n\tWindowsRenderer\r\n}\r\n\r\ntype WindowsRenderer struct{}\r\n\r\nconst (\r\n\tWindowsSeparator = '\\\\'\r\n)\r\n\r\nfunc (ur WindowsRenderer) Join(path ...string) string {\r\n\treturn Join(WindowsSeparator, ur.VolumeName, path...)\r\n}\r\n\r\nfunc (WindowsRenderer) VolumeName(path string) string {\r\n\treturn """"\r\n}\r\n\r\nfunc Join(sep uint8, volumeName func(string) string, elem ...string) string {\r\n\tfor i, e := range elem {\r\n\t\tif e != """" {\r\n\t\t\treturn Clean(sep, volumeName, strings.Join(elem[i:], string(sep)))\r\n\t\t}\r\n\t}\r\n\treturn """"\r\n}\r\n\r\nfunc Clean(sep uint8, volumeName func(string) string, path string) string {\r\n\treturn """"\r\n}\r\n\r\nfunc main() {}\r\n"
63357,"cmd/go: toolchain selection interacts unexpectedly with non-standard toolchainsConsider a non-standard toolchain with a Go version like ""go1.21.1 X:loopvar"" or ""go1.21.1-issue63357"", and a toolchain directive with the value ""go1.21.1"" exactly. When I first ran into this, it wasn't immediately clear to me if it would be better for that to cause the released Go toolchain ""go1.21.1"" to be downloaded and used, or for the non-standard toolchain to be deemed equal. Both options have some upsides. But whichever it is, it should be possible to figure out from the docs.\r\n\r\nConsider that https://go.dev/doc/toolchain#version and https://go.dev/doc/toolchain#name include:\r\n\r\n> Any two Go versions can be compared to decide whether one is less than, greater than, or equal to the other.\r\n\r\n> Toolchains are compared by comparing the version V embedded in the name (dropping the initial go and discarding off any suffix beginning with -). For example, go1.21.0 and go1.21.0-custom compare equal for ordering purposes.\r\n\r\nAnd https://go.dev/doc/toolchain#select includes:\r\n\r\n> If the go.work or go.mod file has a toolchain \\<tname\\> line and \\<tname\\> is newer than the default Go toolchain, then the go command runs \\<tname\\> instead.\r\n\r\nSo the documentation suggests the answer is they should be considered equal, at least for ""go1.21.1-issue63357"", and from briefly asking @rsc about this he expected that a non-standard toolchain built with a non-default GOEXPERIMENT isn't different enough to trigger toolchain downloads either.\r\n\r\n### What did you do?\r\n\r\n<details><summary>Details about two types of non-standard toolchain</summary><br>\r\n\r\nUsing go1.21.1 as base:\r\n\r\n```sh\r\n$ cd $(mktemp -d)\r\n$ git clone https://go.googlesource.com/go && cd go\r\n$ git checkout go1.21.1\r\n```\r\n\r\nAnd becoming non-standard by either simplify giving its version a suffix:\r\n\r\n```sh\r\n# edit first line of VERSION file to say ""go1.21.1-issue63357""\r\n# (presumably there may be code changes along with the suffix, but they're not needed for repro)\r\n$ cd src && ./make.bash\r\n$ ../bin/go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n```\r\n\r\nOr building the toolchain with some GOEXPERIMENT:\r\n\r\n```sh\r\n$ cd src\r\n$ GOEXPERIMENT=loopvar ./make.bash\r\n$ ../bin/go version\r\ngo version go1.21.1 X:loopvar darwin/arm64\r\n```\r\n\r\nIn both cases you get a toolchain that's very similar to the standard go1.21.1, but both `go version` and `runtime.Version()` report strings that are not equal to the string ""go1.21.1"".\r\n\r\n---\r\n\r\n</details>\r\n\r\nTo reproduce this issue, I built a non-standard toolchain ""go1.21.1-issue63357"" (that said, the same behavior can be reproduced with a non-standard toolchain like ""go1.21.1 X:loopvar""):\r\n\r\n```sh\r\n$ GOTOOLCHAIN=local go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n\r\n$ cd $(mktemp -d)\r\n$ go mod init example.com/m\r\ngo: creating new go.mod: module example.com/m\r\n\r\n$ go get go@1.21.0\r\ngo: downgraded go 1.21.1 => 1.21.0\r\ngo: added toolchain go1.21.1\r\n```\r\n\r\nWhich results in the go.mod file:\r\n\r\n\r\n\r\nThen I ran `go version` to see what toolchain would be selected.\r\n\r\n### What did you expect to see?\r\n\r\nExpected the local non-standard toolchain to be used, Go version ""go1.21.1-issue63357"", and no toolchain download to be triggered:\r\n\r\n```sh\r\n$ go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n```\r\n\r\n### What did you see instead?\r\n\r\nIt triggered a toolchain download of ""go1.21.1"" and selected that one instead:\r\n\r\n```sh\r\n$ go version\r\ngo: downloading go1.21.1 (darwin/arm64)\r\ngo version go1.21.1 darwin/arm64\r\n```\r\n\r\nCC @rsc, @bcmills, @matloob.",NeedsFix|GoCommand|modules,bcmills,"Consider a non-standard toolchain with a Go version like ""go1.21.1 X:loopvar"" or ""go1.21.1-issue63357"", and a toolchain directive with the value ""go1.21.1"" exactly. When I first ran into this, it wasn't immediately clear to me if it would be better for that to cause the released Go toolchain ""go1.21.1"" to be downloaded and used, or for the non-standard toolchain to be deemed equal. Both options have some upsides. But whichever it is, it should be possible to figure out from the docs.\r\n\r\nConsider that https://go.dev/doc/toolchain#version and https://go.dev/doc/toolchain#name include:\r\n\r\n> Any two Go versions can be compared to decide whether one is less than, greater than, or equal to the other.\r\n\r\n> Toolchains are compared by comparing the version V embedded in the name (dropping the initial go and discarding off any suffix beginning with -). For example, go1.21.0 and go1.21.0-custom compare equal for ordering purposes.\r\n\r\nAnd https://go.dev/doc/toolchain#select includes:\r\n\r\n> If the go.work or go.mod file has a toolchain \\<tname\\> line and \\<tname\\> is newer than the default Go toolchain, then the go command runs \\<tname\\> instead.\r\n\r\nSo the documentation suggests the answer is they should be considered equal, at least for ""go1.21.1-issue63357"", and from briefly asking @rsc about this he expected that a non-standard toolchain built with a non-default GOEXPERIMENT isn't different enough to trigger toolchain downloads either.\r\n\r\n### What did you do?\r\n\r\n<details><summary>Details about two types of non-standard toolchain</summary><br>\r\n\r\nUsing go1.21.1 as base:\r\n\r\n```sh\r\n$ cd $(mktemp -d)\r\n$ git clone https://go.googlesource.com/go && cd go\r\n$ git checkout go1.21.1\r\n```\r\n\r\nAnd becoming non-standard by either simplify giving its version a suffix:\r\n\r\n```sh\r\n# edit first line of VERSION file to say ""go1.21.1-issue63357""\r\n# (presumably there may be code changes along with the suffix, but they're not needed for repro)\r\n$ cd src && ./make.bash\r\n$ ../bin/go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n```\r\n\r\nOr building the toolchain with some GOEXPERIMENT:\r\n\r\n```sh\r\n$ cd src\r\n$ GOEXPERIMENT=loopvar ./make.bash\r\n$ ../bin/go version\r\ngo version go1.21.1 X:loopvar darwin/arm64\r\n```\r\n\r\nIn both cases you get a toolchain that's very similar to the standard go1.21.1, but both `go version` and `runtime.Version()` report strings that are not equal to the string ""go1.21.1"".\r\n\r\n---\r\n\r\n</details>\r\n\r\nTo reproduce this issue, I built a non-standard toolchain ""go1.21.1-issue63357"" (that said, the same behavior can be reproduced with a non-standard toolchain like ""go1.21.1 X:loopvar""):\r\n\r\n```sh\r\n$ GOTOOLCHAIN=local go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n\r\n$ cd $(mktemp -d)\r\n$ go mod init example.com/m\r\ngo: creating new go.mod: module example.com/m\r\n\r\n$ go get go@1.21.0\r\ngo: downgraded go 1.21.1 => 1.21.0\r\ngo: added toolchain go1.21.1\r\n```\r\n\r\nWhich results in the go.mod file:\r\n\r\n```go.mod\r\nmodule example.com/m\r\n\r\ngo 1.21.0\r\n\r\ntoolchain go1.21.1\r\n```\r\n\r\nThen I ran `go version` to see what toolchain would be selected.\r\n\r\n### What did you expect to see?\r\n\r\nExpected the local non-standard toolchain to be used, Go version ""go1.21.1-issue63357"", and no toolchain download to be triggered:\r\n\r\n```sh\r\n$ go version\r\ngo version go1.21.1-issue63357 darwin/arm64\r\n```\r\n\r\n### What did you see instead?\r\n\r\nIt triggered a toolchain download of ""go1.21.1"" and selected that one instead:\r\n\r\n```sh\r\n$ go version\r\ngo: downloading go1.21.1 (darwin/arm64)\r\ngo version go1.21.1 darwin/arm64\r\n```\r\n\r\nCC @rsc, @bcmills, @matloob.",go.mod\r\nmodule example.com/m\r\n\r\ngo 1.21.0\r\n\r\ntoolchain go1.21.1\r\n
63332,"cmd/compile: function's interface (send on channel vs normal return) should not affect quality of compilation of function's logic<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/amanvm/Library/Caches/go-build'\r\nGOENV='/Users/amanvm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/amanvm/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/amanvm/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.1/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.1/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/4v/hg2cqzyx3rd9hv7kx2_7b8w40000gn/T/go-build72951666=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\nBackground: This quest started with an observed anomaly that a simple ""add 1.0 billion times"" program performed slower when work was distributed among 2 parallel goroutines (each doing half the work) compared to a single one doing billion additions. There isn't any interaction between the independent goroutines while they do the computations, so this isn't about synchronization penalties. Nor are new memory pages being touched in the loop, so it isn't about memory either.\r\n\r\nLoop in ``sumpar1`` is 4 times slower than ``sumseq``, even though there isn't any difference in loop's logic. The only way they vary is that ``sumpar1`` returns value computed in the function on a channel instead of a normal function return. This observation isn't about delay added by writing to channel itself, it's about the quality of loop compiled in both the functions.  \r\n\r\nThis behavior can be bypassed for now with an ugly hack. For a function like ``sumpar1`` that sends result of a tight loop on a channel, break it into two parts: a function that does the tight loop and returns the value normally like ``sumseq``, and create a wrapper function ``sumpar2`` that just instantiates ``sumseq`` and returns it's value on channel. You can see the performance results in the listing below entire code (``sumpar2`` is 4 times faster than ``sumpar1``). Update: using an anonymous function or a useless variable like mentioned in comments: https://github.com/golang/go/issues/63332#issuecomment-1745565902, https://github.com/golang/go/issues/63332#issuecomment-1748585137 also achieves 4x speedup, and would be more maintainable till compiler addresses the issue.\r\n\r\nWhy is fixing this might be worthwhile? a) the hack of wrapping mentioned in previous para is quite ugly, b) it makes it difficult to reason about go if such optimizations are to be manually done, c) this might be a low-hanging fruit that could help existing codebases. Seems like this could be an easy fix in go's compiler if the optimization is first run on ""business logic"" and then the interface (channel vs normal function return) is glued to it later. Though I am not a compiler expert.\r\n\r\n\r\n\r\nComplete code (count.go):\r\n\r\n\r\nOutput:\r\n```\r\nsumpar1 result: 1000000000.000000 took: 1.780064625s\r\nsumpar2 result: 1000000000.000000 took: 484.627042ms\r\n sumseq result: 1000000000.000000 took: 940.366166ms\r\n```\r\n\r\n### What did you expect to see?\r\nThe compilation quality of a function's ""business logic"" should not be affected if output is returned on channel vs returned normally.\r\n\r\n### What did you see instead?\r\nReturning on channel affects compilation quality of logic in function.\r\n\r\nCheck the assembly of the loop for ``sumseq`` and ``sumpar1`` on an ARM64 machine below. Similar degradation in assembly is seen on other architectures (though I don't have a way to benchmark them):\r\n\r\nsumseq:\r\n```\r\n\t0x000c 00012 (count.go:15)\tADD\t$1, R1, R1\r\n\t0x0010 00016 (count.go:16)\tFMOVD\t$(1.0), F1\r\n\t0x0014 00020 (count.go:16)\tFADDD\tF1, F0, F0\r\n\t0x0018 00024 (count.go:15)\tCMP\tR1, R0\r\n\t0x001c 00028 (count.go:15)\tBGT\t12\r\n```\r\n\r\nsumpar1:\r\n```\r\n\t0x0028 00040 (count.go:24)\tFMOVD\tmain.sum-8(SP), F0\r\n\t0x002c 00044 (count.go:24)\tFMOVD\t$(1.0), F1\r\n\t0x0030 00048 (count.go:24)\tFADDD\tF1, F0, F0\r\n\t0x0034 00052 (count.go:24)\tFMOVD\tF0, main.sum-8(SP)\r\n\t0x0038 00056 (count.go:23)\tADD\t$1, R2, R2\r\n\t0x003c 00060 (count.go:23)\tCMP\tR2, R0\r\n\t0x0040 00064 (count.go:23)\tBGT\t40\r\n```",Performance|NeedsInvestigation|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/amanvm/Library/Caches/go-build'\r\nGOENV='/Users/amanvm/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/amanvm/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/amanvm/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.1/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.1/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/4v/hg2cqzyx3rd9hv7kx2_7b8w40000gn/T/go-build72951666=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\nBackground: This quest started with an observed anomaly that a simple ""add 1.0 billion times"" program performed slower when work was distributed among 2 parallel goroutines (each doing half the work) compared to a single one doing billion additions. There isn't any interaction between the independent goroutines while they do the computations, so this isn't about synchronization penalties. Nor are new memory pages being touched in the loop, so it isn't about memory either.\r\n\r\nLoop in ``sumpar1`` is 4 times slower than ``sumseq``, even though there isn't any difference in loop's logic. The only way they vary is that ``sumpar1`` returns value computed in the function on a channel instead of a normal function return. This observation isn't about delay added by writing to channel itself, it's about the quality of loop compiled in both the functions.  \r\n\r\nThis behavior can be bypassed for now with an ugly hack. For a function like ``sumpar1`` that sends result of a tight loop on a channel, break it into two parts: a function that does the tight loop and returns the value normally like ``sumseq``, and create a wrapper function ``sumpar2`` that just instantiates ``sumseq`` and returns it's value on channel. You can see the performance results in the listing below entire code (``sumpar2`` is 4 times faster than ``sumpar1``). Update: using an anonymous function or a useless variable like mentioned in comments: https://github.com/golang/go/issues/63332#issuecomment-1745565902, https://github.com/golang/go/issues/63332#issuecomment-1748585137 also achieves 4x speedup, and would be more maintainable till compiler addresses the issue.\r\n\r\nWhy is fixing this might be worthwhile? a) the hack of wrapping mentioned in previous para is quite ugly, b) it makes it difficult to reason about go if such optimizations are to be manually done, c) this might be a low-hanging fruit that could help existing codebases. Seems like this could be an easy fix in go's compiler if the optimization is first run on ""business logic"" and then the interface (channel vs normal function return) is glued to it later. Though I am not a compiler expert.\r\n\r\n```go\r\nfunc sumseq(numiter int) float64 {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\treturn sum\r\n}\r\n\r\nfunc sumpar1(numiter int, c chan<- float64) {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\tc <- sum\r\n}\r\n\r\nfunc sumpar2(numiter int, c chan<- float64) {\r\n\tc <- sumseq(numiter)\r\n}\r\n```\r\n\r\nComplete code (count.go):\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""time""\r\n)\r\n\r\nconst (\r\n\tnumiterations = 1_000_000_000\r\n\tnumworkers    = 2\r\n)\r\n\r\nfunc sumseq(numiter int) float64 {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\treturn sum\r\n}\r\n\r\nfunc sumpar1(numiter int, c chan<- float64) {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\tc <- sum\r\n}\r\n\r\nfunc sumpar2(numiter int, c chan<- float64) {\r\n\tc <- sumseq(numiter)\r\n}\r\n\r\nfunc main() {\r\n\tc := make(chan float64, numworkers)\r\n\r\n\t// distribute counting among #numworkers parallel routines\r\n\t// using sumpar1\r\n\tstart := time.Now()\r\n\tresult := 0.0\r\n\tfor i := 0; i < numworkers; i++ {\r\n\t\tgo sumpar1(numiterations/numworkers, c)\r\n\t}\r\n\tfor i := 0; i < numworkers; i++ {\r\n\t\tresult += <-c\r\n\t}\r\n\tdelta := time.Since(start)\r\n\tfmt.Printf(""sumpar1 result: %f took: %v\\n"", result, delta)\r\n\r\n\t// distribute counting among #numworkers parallel routines\r\n\t// using sumpar2\r\n\tstart = time.Now()\r\n\tresult = 0.0\r\n\tfor i := 0; i < numworkers; i++ {\r\n\t\tgo sumpar2(numiterations/numworkers, c)\r\n\t}\r\n\tfor i := 0; i < numworkers; i++ {\r\n\t\tresult += <-c\r\n\t}\r\n\tdelta = time.Since(start)\r\n\tfmt.Printf(""sumpar2 result: %f took: %v\\n"", result, delta)\r\n\r\n\t// do all counting in single routine\r\n\t// using sumseq\r\n\tstart = time.Now()\r\n\tresult = sumseq(numiterations)\r\n\tdelta = time.Since(start)\r\n\tfmt.Printf("" sumseq result: %f took: %v\\n"", result, delta)\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\nsumpar1 result: 1000000000.000000 took: 1.780064625s\r\nsumpar2 result: 1000000000.000000 took: 484.627042ms\r\n sumseq result: 1000000000.000000 took: 940.366166ms\r\n```\r\n\r\n### What did you expect to see?\r\nThe compilation quality of a function's ""business logic"" should not be affected if output is returned on channel vs returned normally.\r\n\r\n### What did you see instead?\r\nReturning on channel affects compilation quality of logic in function.\r\n\r\nCheck the assembly of the loop for ``sumseq`` and ``sumpar1`` on an ARM64 machine below. Similar degradation in assembly is seen on other architectures (though I don't have a way to benchmark them):\r\n\r\nsumseq:\r\n```\r\n\t0x000c 00012 (count.go:15)\tADD\t$1, R1, R1\r\n\t0x0010 00016 (count.go:16)\tFMOVD\t$(1.0), F1\r\n\t0x0014 00020 (count.go:16)\tFADDD\tF1, F0, F0\r\n\t0x0018 00024 (count.go:15)\tCMP\tR1, R0\r\n\t0x001c 00028 (count.go:15)\tBGT\t12\r\n```\r\n\r\nsumpar1:\r\n```\r\n\t0x0028 00040 (count.go:24)\tFMOVD\tmain.sum-8(SP), F0\r\n\t0x002c 00044 (count.go:24)\tFMOVD\t$(1.0), F1\r\n\t0x0030 00048 (count.go:24)\tFADDD\tF1, F0, F0\r\n\t0x0034 00052 (count.go:24)\tFMOVD\tF0, main.sum-8(SP)\r\n\t0x0038 00056 (count.go:23)\tADD\t$1, R2, R2\r\n\t0x003c 00060 (count.go:23)\tCMP\tR2, R0\r\n\t0x0040 00064 (count.go:23)\tBGT\t40\r\n```","go\r\nfunc sumseq(numiter int) float64 {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\treturn sum\r\n}\r\n\r\nfunc sumpar1(numiter int, c chan<- float64) {\r\n\tsum := 0.0\r\n\tfor i := 0; i < numiter; i++ {\r\n\t\tsum += 1.0\r\n\t}\r\n\tc <- sum\r\n}\r\n\r\nfunc sumpar2(numiter int, c chan<- float64) {\r\n\tc <- sumseq(numiter)\r\n}\r\n"
63285,"cmd/compile/internal/importer: deadlock in recursion through type parameterAs mentioned in https://github.com/golang/go/issues/60817#issuecomment-1728279951_:\r\n>  I'm coming here from Stack Overflow, where someone [has just reported](https://stackoverflow.com/questions/77144910/golang-deadlock-occurs-maybe-at-compiler-time) what seems like a very similar compiler bug. I haven't had time to investigate/reduce the problem, but compilation (with Go 1.21.1, at the very least) of the following invalid program fails with a deadlock:\r\n\r\n\r\n\r\nOutput:\r\n\r\n```text\r\nfatal error: all goroutines are asleep - deadlock!\r\n\r\ngoroutine 1 [sync.Mutex.Lock]:\r\nsync.runtime_SemacquireMutex(0xced180?, 0xd0?, 0xc0000bd3e5?)\r\n\truntime/sema.go:77 +0x25\r\nsync.(*Mutex).lockSlow(0xc00039e338)\r\n\tsync/mutex.go:171 +0x15d\r\nsync.(*Mutex).Lock(...)\r\n\tsync/mutex.go:90\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e310)\r\n\tcmd/compile/internal/types2/named.go:164 +0x6c\r\ncmd/compile/internal/types2.(*Named).TypeParams(...)\r\n\tcmd/compile/internal/types2/named.go:310\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec6108?, 0xc00039e5b0?})\r\n\tcmd/compile/internal/types2/subst.go:223 +0xd72\r\ncmd/compile/internal/types2.(*subster).var_(0x0?, 0xc00039e620)\r\n\tcmd/compile/internal/types2/subst.go:285 +0x2c\r\ncmd/compile/internal/types2.(*subster).varList(0x2?, {0xc000044620, 0x1, 0x0?})\r\n\tcmd/compile/internal/types2/subst.go:311 +0x85\r\ncmd/compile/internal/types2.(*subster).tuple(0xc0000bd908?, 0xc00036bc38)\r\n\tcmd/compile/internal/types2/subst.go:301 +0x2f\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec60e0?, 0xc00039ca00?})\r\n\tcmd/compile/internal/types2/subst.go:143 +0x50c\r\ncmd/compile/internal/types2.(*subster).func_(0x4075ee?, 0xc00039e690)\r\n\tcmd/compile/internal/types2/subst.go:328 +0x2c\r\ncmd/compile/internal/types2.(*subster).funcList(0x462ccb?, {0xc00036bbd8, 0x3, 0xd34c80?})\r\n\tcmd/compile/internal/types2/subst.go:345 +0x85\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec6270?, 0xc000394cd0?})\r\n\tcmd/compile/internal/types2/subst.go:167 +0x70f\r\ncmd/compile/internal/types2.(*Checker).subst(0x0, {0x0?, 0x63780?, 0xc0?}, {0xec6270?, 0xc000394cd0}, 0xc000397020, 0xc00039e3f0, 0x0)\r\n\tcmd/compile/internal/types2/subst.go:78 +0x1ab\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc00039e3f0)\r\n\tcmd/compile/internal/types2/named.go:623 +0x4e5\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e3f0)\r\n\tcmd/compile/internal/types2/named.go:177 +0x172\r\ncmd/compile/internal/types2.(*Named).Underlying(...)\r\n\tcmd/compile/internal/types2/named.go:456\r\ncmd/compile/internal/types2.(*Named).under(...)\r\n\tcmd/compile/internal/types2/named.go:484\r\ncmd/compile/internal/types2.under({0xec6108?, 0xc00039e3f0?})\r\n\tcmd/compile/internal/types2/under.go:13 +0x5a\r\ncmd/compile/internal/types2.(*TypeParam).iface(0xc000396d20)\r\n\tcmd/compile/internal/types2/typeparam.go:109 +0x31\r\ncmd/compile/internal/types2.(*TypeParam).SetConstraint(...)\r\n\tcmd/compile/internal/types2/typeparam.go:86\r\ncmd/compile/internal/importer.(*reader).typeParamNames(0xc000393260)\r\n\tcmd/compile/internal/importer/ureader.go:510 +0x214\r\ncmd/compile/internal/importer.(*pkgReader).objIdx.func1.1(0x0?)\r\n\tcmd/compile/internal/importer/ureader.go:430 +0x25\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e310)\r\n\tcmd/compile/internal/types2/named.go:203 +0x10e\r\ncmd/compile/internal/types2.(*Named).TypeParams(...)\r\n\tcmd/compile/internal/types2/named.go:310\r\ncmd/compile/internal/types2.isGeneric({0xec6108?, 0xc00039e310?})\r\n\tcmd/compile/internal/types2/predicates.go:128 +0x46\r\ncmd/compile/internal/types2.(*Checker).genericType(0xc0001241e0, {0xec84e0, 0xc000394640}, 0xc0000be438)\r\n\tcmd/compile/internal/types2/typexpr.go:196 +0xb1\r\ncmd/compile/internal/types2.(*Checker).instantiatedType(0xc0001241e0, {0xec84e0?, 0xc000394640}, {0xc000063480?, 0x2, 0x2}, 0x0)\r\n\tcmd/compile/internal/types2/typexpr.go:415 +0x20a\r\ncmd/compile/internal/types2.(*Checker).typInternal(0xc0001241e0, {0xec84a0?, 0xc000392660?}, 0x0)\r\n\tcmd/compile/internal/types2/typexpr.go:275 +0x1212\r\ncmd/compile/internal/types2.(*Checker).definedType(0xc0001241e0, {0xec84a0?, 0xc000392660}, 0x1?)\r\n\tcmd/compile/internal/types2/typexpr.go:180 +0x3f\r\ncmd/compile/internal/types2.(*Checker).varType(0xc0001241e0, {0xec84a0?, 0xc000392660})\r\n\tcmd/compile/internal/types2/typexpr.go:144 +0x33\r\ncmd/compile/internal/types2.(*Checker).collectParams(0xc0001241e0, 0xc00039e1c0, {0xc0000444c0?, 0x1, 0xd40fc0?}, 0x0)\r\n\tcmd/compile/internal/types2/signature.go:284 +0x2ea\r\ncmd/compile/internal/types2.(*Checker).funcType(0xc0001241e0, 0xc00039c5c0, 0xc00007bef0, {0x0?, 0x0, 0x0}, 0xc0000ab420)\r\n\tcmd/compile/internal/types2/signature.go:179 +0xaf1\r\ncmd/compile/internal/types2.(*Checker).funcDecl(...)\r\n\tcmd/compile/internal/types2/decl.go:730\r\ncmd/compile/internal/types2.(*Checker).objDecl(0xc0001241e0, {0xecca80, 0xc0000ab810}, 0x4f6edc?)\r\n\tcmd/compile/internal/types2/decl.go:203 +0xa1a\r\ncmd/compile/internal/types2.(*Checker).packageObjects(0xc0001241e0)\r\n\tcmd/compile/internal/types2/resolver.go:705 +0x465\r\ncmd/compile/internal/types2.(*Checker).checkFiles(0xc0001241e0, {0xc0000444d0, 0x1, 0x1})\r\n\tcmd/compile/internal/types2/check.go:371 +0x21e\r\ncmd/compile/internal/types2.(*Checker).Files(...)\r\n\tcmd/compile/internal/types2/check.go:332\r\ncmd/compile/internal/types2.(*Config).Check(0xc000392840, {0x7fff3cb4fc93?, 0x139f2e0?}, {0xc0000444d0, 0x1, 0x1}, 0xc0003928a0)\r\n\tcmd/compile/internal/types2/api.go:437 +0x14f\r\ncmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0xc000044450, 0x1, 0x18?})\r\n\tcmd/compile/internal/noder/irgen.go:70 +0x486\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc000044450, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/unified.go:210 +0x6a\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc000044450?, 0xcb9f20?, 0xc0000bf8f8?})\r\n\tcmd/compile/internal/noder/unified.go:75 +0x85\r\ncmd/compile/internal/noder.LoadPackage({0xc000022260, 0x1, 0x2})\r\n\tcmd/compile/internal/noder/noder.go:77 +0x450\r\ncmd/compile/internal/gc.Main(0xda33e8)\r\n\tcmd/compile/internal/gc/main.go:198 +0xc17\r\nmain.main()\r\n\tcmd/compile/main.go:57 +0xf9\r\n\r\nGo build failed.\r\n```\r\n\r\n Here is a [Playground](https://go.dev/play/p/FAZZJ5cOARt) where you can reproduce the problem.\r\n\r\n_Originally posted by @jub0bs in https://github.com/golang/go/issues/60817#issuecomment-1728279951_\r\n            ",NeedsFix,mdempsky|findleyr,"As mentioned in https://github.com/golang/go/issues/60817#issuecomment-1728279951_:\r\n>  I'm coming here from Stack Overflow, where someone [has just reported](https://stackoverflow.com/questions/77144910/golang-deadlock-occurs-maybe-at-compiler-time) what seems like a very similar compiler bug. I haven't had time to investigate/reduce the problem, but compilation (with Go 1.21.1, at the very least) of the following invalid program fails with a deadlock:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""whatever/vector""\r\n\r\nfunc main() {\r\n\ts := vector.New[int]()\r\n\tprintln(s)\r\n}\r\n-- go.mod --\r\nmodule whatever\r\n-- iterator/iterator.go --\r\npackage iterator\r\n\r\ntype Iter[I any, T Iterator[I]] struct {\r\n\tIter T\r\n}\r\n\r\nfunc New[I any, T Iterator[I]](iter T) Iter[I, T] {\r\n\treturn Iter[I, T]{\r\n\t\tIter: iter,\r\n\t}\r\n}\r\n\r\ntype Iterator[Item any] interface {\r\n\tHasNext() bool\r\n\tNext() Item\r\n\tIter() Iter[Item, Iterator[Item]]\r\n}\r\n-- vector/vector.go --\r\npackage vector\r\n\r\nimport ""whatever/iterator""\r\n\r\ntype Vector[Item any] struct {\r\n\tdata []Item\r\n\r\n\t// used by iterator.\r\n\tidx int\r\n}\r\n\r\nfunc (v *Vector[Item]) Get(pos int) Item {\r\n\tif pos < 0 || pos >= v.Size() {\r\n\t\tpanic(""ouf off range"")\r\n\t}\r\n\r\n\treturn v.data[pos]\r\n}\r\n\r\nfunc (v *Vector[Item]) HasNext() bool {\r\n\treturn v.idx < v.Size()\r\n}\r\n\r\nfunc (v *Vector[Item]) Next() Item {\r\n\tv.idx = v.idx + 1\r\n\r\n\treturn v.Get(v.idx - 1)\r\n}\r\n\r\nfunc (v *Vector[Item]) Iter() iterator.Iter[Item, iterator.Iterator[Item]] {\r\n\treturn iterator.Iter[Item, iterator.Iterator[Item]]{\r\n\t\tIter: v,\r\n\t}\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\nfatal error: all goroutines are asleep - deadlock!\r\n\r\ngoroutine 1 [sync.Mutex.Lock]:\r\nsync.runtime_SemacquireMutex(0xced180?, 0xd0?, 0xc0000bd3e5?)\r\n\truntime/sema.go:77 +0x25\r\nsync.(*Mutex).lockSlow(0xc00039e338)\r\n\tsync/mutex.go:171 +0x15d\r\nsync.(*Mutex).Lock(...)\r\n\tsync/mutex.go:90\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e310)\r\n\tcmd/compile/internal/types2/named.go:164 +0x6c\r\ncmd/compile/internal/types2.(*Named).TypeParams(...)\r\n\tcmd/compile/internal/types2/named.go:310\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec6108?, 0xc00039e5b0?})\r\n\tcmd/compile/internal/types2/subst.go:223 +0xd72\r\ncmd/compile/internal/types2.(*subster).var_(0x0?, 0xc00039e620)\r\n\tcmd/compile/internal/types2/subst.go:285 +0x2c\r\ncmd/compile/internal/types2.(*subster).varList(0x2?, {0xc000044620, 0x1, 0x0?})\r\n\tcmd/compile/internal/types2/subst.go:311 +0x85\r\ncmd/compile/internal/types2.(*subster).tuple(0xc0000bd908?, 0xc00036bc38)\r\n\tcmd/compile/internal/types2/subst.go:301 +0x2f\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec60e0?, 0xc00039ca00?})\r\n\tcmd/compile/internal/types2/subst.go:143 +0x50c\r\ncmd/compile/internal/types2.(*subster).func_(0x4075ee?, 0xc00039e690)\r\n\tcmd/compile/internal/types2/subst.go:328 +0x2c\r\ncmd/compile/internal/types2.(*subster).funcList(0x462ccb?, {0xc00036bbd8, 0x3, 0xd34c80?})\r\n\tcmd/compile/internal/types2/subst.go:345 +0x85\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000bdd10, {0xec6270?, 0xc000394cd0?})\r\n\tcmd/compile/internal/types2/subst.go:167 +0x70f\r\ncmd/compile/internal/types2.(*Checker).subst(0x0, {0x0?, 0x63780?, 0xc0?}, {0xec6270?, 0xc000394cd0}, 0xc000397020, 0xc00039e3f0, 0x0)\r\n\tcmd/compile/internal/types2/subst.go:78 +0x1ab\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc00039e3f0)\r\n\tcmd/compile/internal/types2/named.go:623 +0x4e5\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e3f0)\r\n\tcmd/compile/internal/types2/named.go:177 +0x172\r\ncmd/compile/internal/types2.(*Named).Underlying(...)\r\n\tcmd/compile/internal/types2/named.go:456\r\ncmd/compile/internal/types2.(*Named).under(...)\r\n\tcmd/compile/internal/types2/named.go:484\r\ncmd/compile/internal/types2.under({0xec6108?, 0xc00039e3f0?})\r\n\tcmd/compile/internal/types2/under.go:13 +0x5a\r\ncmd/compile/internal/types2.(*TypeParam).iface(0xc000396d20)\r\n\tcmd/compile/internal/types2/typeparam.go:109 +0x31\r\ncmd/compile/internal/types2.(*TypeParam).SetConstraint(...)\r\n\tcmd/compile/internal/types2/typeparam.go:86\r\ncmd/compile/internal/importer.(*reader).typeParamNames(0xc000393260)\r\n\tcmd/compile/internal/importer/ureader.go:510 +0x214\r\ncmd/compile/internal/importer.(*pkgReader).objIdx.func1.1(0x0?)\r\n\tcmd/compile/internal/importer/ureader.go:430 +0x25\r\ncmd/compile/internal/types2.(*Named).resolve(0xc00039e310)\r\n\tcmd/compile/internal/types2/named.go:203 +0x10e\r\ncmd/compile/internal/types2.(*Named).TypeParams(...)\r\n\tcmd/compile/internal/types2/named.go:310\r\ncmd/compile/internal/types2.isGeneric({0xec6108?, 0xc00039e310?})\r\n\tcmd/compile/internal/types2/predicates.go:128 +0x46\r\ncmd/compile/internal/types2.(*Checker).genericType(0xc0001241e0, {0xec84e0, 0xc000394640}, 0xc0000be438)\r\n\tcmd/compile/internal/types2/typexpr.go:196 +0xb1\r\ncmd/compile/internal/types2.(*Checker).instantiatedType(0xc0001241e0, {0xec84e0?, 0xc000394640}, {0xc000063480?, 0x2, 0x2}, 0x0)\r\n\tcmd/compile/internal/types2/typexpr.go:415 +0x20a\r\ncmd/compile/internal/types2.(*Checker).typInternal(0xc0001241e0, {0xec84a0?, 0xc000392660?}, 0x0)\r\n\tcmd/compile/internal/types2/typexpr.go:275 +0x1212\r\ncmd/compile/internal/types2.(*Checker).definedType(0xc0001241e0, {0xec84a0?, 0xc000392660}, 0x1?)\r\n\tcmd/compile/internal/types2/typexpr.go:180 +0x3f\r\ncmd/compile/internal/types2.(*Checker).varType(0xc0001241e0, {0xec84a0?, 0xc000392660})\r\n\tcmd/compile/internal/types2/typexpr.go:144 +0x33\r\ncmd/compile/internal/types2.(*Checker).collectParams(0xc0001241e0, 0xc00039e1c0, {0xc0000444c0?, 0x1, 0xd40fc0?}, 0x0)\r\n\tcmd/compile/internal/types2/signature.go:284 +0x2ea\r\ncmd/compile/internal/types2.(*Checker).funcType(0xc0001241e0, 0xc00039c5c0, 0xc00007bef0, {0x0?, 0x0, 0x0}, 0xc0000ab420)\r\n\tcmd/compile/internal/types2/signature.go:179 +0xaf1\r\ncmd/compile/internal/types2.(*Checker).funcDecl(...)\r\n\tcmd/compile/internal/types2/decl.go:730\r\ncmd/compile/internal/types2.(*Checker).objDecl(0xc0001241e0, {0xecca80, 0xc0000ab810}, 0x4f6edc?)\r\n\tcmd/compile/internal/types2/decl.go:203 +0xa1a\r\ncmd/compile/internal/types2.(*Checker).packageObjects(0xc0001241e0)\r\n\tcmd/compile/internal/types2/resolver.go:705 +0x465\r\ncmd/compile/internal/types2.(*Checker).checkFiles(0xc0001241e0, {0xc0000444d0, 0x1, 0x1})\r\n\tcmd/compile/internal/types2/check.go:371 +0x21e\r\ncmd/compile/internal/types2.(*Checker).Files(...)\r\n\tcmd/compile/internal/types2/check.go:332\r\ncmd/compile/internal/types2.(*Config).Check(0xc000392840, {0x7fff3cb4fc93?, 0x139f2e0?}, {0xc0000444d0, 0x1, 0x1}, 0xc0003928a0)\r\n\tcmd/compile/internal/types2/api.go:437 +0x14f\r\ncmd/compile/internal/noder.checkFiles({0x0, {0x0, 0x0}}, {0xc000044450, 0x1, 0x18?})\r\n\tcmd/compile/internal/noder/irgen.go:70 +0x486\r\ncmd/compile/internal/noder.writePkgStub({0x0?, {0x0?, 0x0?}}, {0xc000044450, 0x1, 0x1})\r\n\tcmd/compile/internal/noder/unified.go:210 +0x6a\r\ncmd/compile/internal/noder.unified({0x0?, {0x0?, 0x0?}}, {0xc000044450?, 0xcb9f20?, 0xc0000bf8f8?})\r\n\tcmd/compile/internal/noder/unified.go:75 +0x85\r\ncmd/compile/internal/noder.LoadPackage({0xc000022260, 0x1, 0x2})\r\n\tcmd/compile/internal/noder/noder.go:77 +0x450\r\ncmd/compile/internal/gc.Main(0xda33e8)\r\n\tcmd/compile/internal/gc/main.go:198 +0xc17\r\nmain.main()\r\n\tcmd/compile/main.go:57 +0xf9\r\n\r\nGo build failed.\r\n```\r\n\r\n Here is a [Playground](https://go.dev/play/p/FAZZJ5cOARt) where you can reproduce the problem.\r\n\r\n_Originally posted by @jub0bs in https://github.com/golang/go/issues/60817#issuecomment-1728279951_\r\n            ","go\r\npackage main\r\n\r\nimport ""whatever/vector""\r\n\r\nfunc main() {\r\n\ts := vector.New[int]()\r\n\tprintln(s)\r\n}\r\n-- go.mod --\r\nmodule whatever\r\n-- iterator/iterator.go --\r\npackage iterator\r\n\r\ntype Iter[I any, T Iterator[I]] struct {\r\n\tIter T\r\n}\r\n\r\nfunc New[I any, T Iterator[I]](iter T) Iter[I, T] {\r\n\treturn Iter[I, T]{\r\n\t\tIter: iter,\r\n\t}\r\n}\r\n\r\ntype Iterator[Item any] interface {\r\n\tHasNext() bool\r\n\tNext() Item\r\n\tIter() Iter[Item, Iterator[Item]]\r\n}\r\n-- vector/vector.go --\r\npackage vector\r\n\r\nimport ""whatever/iterator""\r\n\r\ntype Vector[Item any] struct {\r\n\tdata []Item\r\n\r\n\t// used by iterator.\r\n\tidx int\r\n}\r\n\r\nfunc (v *Vector[Item]) Get(pos int) Item {\r\n\tif pos < 0 || pos >= v.Size() {\r\n\t\tpanic(""ouf off range"")\r\n\t}\r\n\r\n\treturn v.data[pos]\r\n}\r\n\r\nfunc (v *Vector[Item]) HasNext() bool {\r\n\treturn v.idx < v.Size()\r\n}\r\n\r\nfunc (v *Vector[Item]) Next() Item {\r\n\tv.idx = v.idx + 1\r\n\r\n\treturn v.Get(v.idx - 1)\r\n}\r\n\r\nfunc (v *Vector[Item]) Iter() iterator.Iter[Item, iterator.Iterator[Item]] {\r\n\treturn iterator.Iter[Item, iterator.Iterator[Item]]{\r\n\t\tIter: v,\r\n\t}\r\n}\r\n"
63276,"runtime: `-race` leaks memory on Go >= 1.19<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n```\r\nroot@4fa353104d14:/go# go version\r\ngo version go1.21.1 linux/arm64\r\nroot@4fa353104d14:/go#\r\n```\r\n\r\nInside of `docker run -it --rm golang:1.21`.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nroot@4fa353104d14:/go# go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1393083128=/tmp/go-build -gno-record-gcc-switches'\r\nroot@4fa353104d14:/go#\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Save this program as `main.go`.\r\n* With Go 1.19 or later (1.18 does not leak, or at least a lot less)...\r\n* `go run -race main.go` (without `-race` there is no leak)\r\n\r\nAlso, just having the HTTP server part is enough to leak, but I wanted a repro that is standalone so the client code and the memory reporting code are there for that.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nStable memory usage\r\n\r\n### What did you see instead?\r\n\r\n```\r\n2023/09/27 12:54:27 RssAnon:\t   14172 kB\r\n2023/09/27 12:54:27 Starting service http://localhost:5019/\r\n2023/09/27 12:54:29 Now flooding the server with requests...\r\n2023/09/27 12:54:29 RssAnon:\t   15724 kB\r\n2023/09/27 12:54:34 RssAnon:\t   54000 kB\r\n2023/09/27 12:54:39 RssAnon:\t   63400 kB\r\n2023/09/27 12:54:44 RssAnon:\t   72044 kB\r\n2023/09/27 12:54:49 RssAnon:\t   80796 kB\r\n2023/09/27 12:54:54 RssAnon:\t   89384 kB\r\n2023/09/27 12:54:59 RssAnon:\t   99744 kB\r\n2023/09/27 12:55:04 RssAnon:\t  108400 kB\r\n2023/09/27 12:55:09 RssAnon:\t  116744 kB\r\n2023/09/27 12:55:14 RssAnon:\t  124632 kB\r\n2023/09/27 12:55:19 RssAnon:\t  132332 kB\r\n[...]\r\n```\r\n\r\n### Notes\r\n\r\n* Go 1.19 got a new Thread Sanitizer version, this might be related: https://tip.golang.org/doc/go1.19#runtime/race\r\n* Unsure whether this is the same as #26813.\r\n  * This one is only Go 1.19 and above but the other issue was reported for Go 1.10.\r\n  * There's [a comment saying that the repro case in the other ticket doesn't work any more with Go 1.21](https://github.com/golang/go/issues/26813#issuecomment-1670125273), but this repro does work with Go 1.21.",RaceDetector|NeedsInvestigation|compiler/runtime,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n```\r\nroot@4fa353104d14:/go# go version\r\ngo version go1.21.1 linux/arm64\r\nroot@4fa353104d14:/go#\r\n```\r\n\r\nInside of `docker run -it --rm golang:1.21`.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nroot@4fa353104d14:/go# go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='local'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.1'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1393083128=/tmp/go-build -gno-record-gcc-switches'\r\nroot@4fa353104d14:/go#\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Save this program as `main.go`.\r\n* With Go 1.19 or later (1.18 does not leak, or at least a lot less)...\r\n* `go run -race main.go` (without `-race` there is no leak)\r\n\r\nAlso, just having the HTTP server part is enough to leak, but I wanted a repro that is standalone so the client code and the memory reporting code are there for that.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""os""\r\n\t""os/exec""\r\n\t""strconv""\r\n\t""strings""\r\n\t""time""\r\n\r\n\t""net/http""\r\n\r\n\t_ ""net/http/pprof""\r\n)\r\n\r\nfunc main() {\r\n\tprintMemUsage()\r\n\r\n\thttp.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\tserver := http.Server{\r\n\t\tAddr:        "":5019"",\r\n\t\tReadTimeout: 5 * time.Second,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tlog.Println(""Starting service"", ""http://localhost:5019/"")\r\n\t\tif err := server.ListenAndServe(); err != nil { // blocks\r\n\t\t\tlog.Fatalln(""Error while running service:"", err)\r\n\t\t}\r\n\t}()\r\n\r\n\t// Give the server time to start\r\n\ttime.Sleep(2 * time.Second)\r\n\r\n\tlog.Println(""Now flooding the server with requests..."")\r\n\tnextMemLog := time.Now()\r\n\tfor {\r\n\t\t// Trigger the handler function\r\n\t\tresponse, err := http.Get(""http://localhost:5019/"")\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatalln(""Error while making request:"", err)\r\n\t\t}\r\n\t\tif response.StatusCode != http.StatusOK {\r\n\t\t\tlog.Fatalln(""Unexpected status code:"", response.StatusCode)\r\n\t\t}\r\n\t\tif response.Body != nil {\r\n\t\t\tresponse.Body.Close()\r\n\t\t}\r\n\r\n\t\tif time.Now().After(nextMemLog) {\r\n\t\t\tnextMemLog = time.Now().Add(5 * time.Second)\r\n\t\t\tprintMemUsage()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc printMemUsage() {\r\n\tout, err := exec.Command(""ps"", ""-o"", ""rss"", ""-p"", strconv.Itoa(os.Getpid())).Output()\r\n\tif err != nil {\r\n\t\tlog.Fatalln(""Error while running ps command, is it installed?"", err)\r\n\t}\r\n\r\n\t// Split output into ""RSS"" and ""1234""\r\n\trss := strings.Fields(string(out))\r\n\r\n\tlog.Println(""Memory usage:"", rss[1], ""kB"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nStable memory usage\r\n\r\n### What did you see instead?\r\n\r\n```\r\n2023/09/27 12:54:27 RssAnon:\t   14172 kB\r\n2023/09/27 12:54:27 Starting service http://localhost:5019/\r\n2023/09/27 12:54:29 Now flooding the server with requests...\r\n2023/09/27 12:54:29 RssAnon:\t   15724 kB\r\n2023/09/27 12:54:34 RssAnon:\t   54000 kB\r\n2023/09/27 12:54:39 RssAnon:\t   63400 kB\r\n2023/09/27 12:54:44 RssAnon:\t   72044 kB\r\n2023/09/27 12:54:49 RssAnon:\t   80796 kB\r\n2023/09/27 12:54:54 RssAnon:\t   89384 kB\r\n2023/09/27 12:54:59 RssAnon:\t   99744 kB\r\n2023/09/27 12:55:04 RssAnon:\t  108400 kB\r\n2023/09/27 12:55:09 RssAnon:\t  116744 kB\r\n2023/09/27 12:55:14 RssAnon:\t  124632 kB\r\n2023/09/27 12:55:19 RssAnon:\t  132332 kB\r\n[...]\r\n```\r\n\r\n### Notes\r\n\r\n* Go 1.19 got a new Thread Sanitizer version, this might be related: https://tip.golang.org/doc/go1.19#runtime/race\r\n* Unsure whether this is the same as #26813.\r\n  * This one is only Go 1.19 and above but the other issue was reported for Go 1.10.\r\n  * There's [a comment saying that the repro case in the other ticket doesn't work any more with Go 1.21](https://github.com/golang/go/issues/26813#issuecomment-1670125273), but this repro does work with Go 1.21.","go\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""os""\r\n\t""os/exec""\r\n\t""strconv""\r\n\t""strings""\r\n\t""time""\r\n\r\n\t""net/http""\r\n\r\n\t_ ""net/http/pprof""\r\n)\r\n\r\nfunc main() {\r\n\tprintMemUsage()\r\n\r\n\thttp.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\tserver := http.Server{\r\n\t\tAddr:        "":5019"",\r\n\t\tReadTimeout: 5 * time.Second,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tlog.Println(""Starting service"", ""http://localhost:5019/"")\r\n\t\tif err := server.ListenAndServe(); err != nil { // blocks\r\n\t\t\tlog.Fatalln(""Error while running service:"", err)\r\n\t\t}\r\n\t}()\r\n\r\n\t// Give the server time to start\r\n\ttime.Sleep(2 * time.Second)\r\n\r\n\tlog.Println(""Now flooding the server with requests..."")\r\n\tnextMemLog := time.Now()\r\n\tfor {\r\n\t\t// Trigger the handler function\r\n\t\tresponse, err := http.Get(""http://localhost:5019/"")\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatalln(""Error while making request:"", err)\r\n\t\t}\r\n\t\tif response.StatusCode != http.StatusOK {\r\n\t\t\tlog.Fatalln(""Unexpected status code:"", response.StatusCode)\r\n\t\t}\r\n\t\tif response.Body != nil {\r\n\t\t\tresponse.Body.Close()\r\n\t\t}\r\n\r\n\t\tif time.Now().After(nextMemLog) {\r\n\t\t\tnextMemLog = time.Now().Add(5 * time.Second)\r\n\t\t\tprintMemUsage()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc printMemUsage() {\r\n\tout, err := exec.Command(""ps"", ""-o"", ""rss"", ""-p"", strconv.Itoa(os.Getpid())).Output()\r\n\tif err != nil {\r\n\t\tlog.Fatalln(""Error while running ps command, is it installed?"", err)\r\n\t}\r\n\r\n\t// Split output into ""RSS"" and ""1234""\r\n\trss := strings.Fields(string(out))\r\n\r\n\tlog.Println(""Memory usage:"", rss[1], ""kB"")\r\n}\r\n"
63223,"go/types: API changes to support explicit Alias nodes### Background\r\n\r\nCurrently, when a type alias declaration\r\n\r\n\r\n\r\nis type-checked, `go/types` creates a `TypeName` `Object` for the type alias `A` but the type of the `TypeName` is the type of `some_type`. When `A` is used as identifier in source code, the denoted type is `some_type`, which if it's a defined type will have a different name than `A`; and if it's not a defined type, it will be a type literal, which is also not called `A`. As a consequence, an error message related to the type `A` will not report `A` but `some_type` or whatever type `A` is a alias for. This is a long-standing issue that we'd like to fix.\r\n\r\nFurthermore, with proposal #46477 accepted (parameterized type aliases), currently `go/types` doesn't have a way to represent a parameterized alias type.\r\n\r\nBoth these problems can be addressed with an explicit `Alias` type node. This proposal is about introducing such a new type node.\r\n\r\n### Proposal\r\n\r\nWe introduce a new `go/types` node called `Alias`:\r\n\r\n\r\n\r\nAn `Alias` node stands for a type alias. An `Alias` node is created with a factory function:\r\n\r\n\r\n\r\nWhen an `Alias` node is encountered, `go/types` and related tool clients may need to indirect to the actual type the `Alias` node is a type alias for. This can be done through a new function\r\n\r\n\r\n\r\nTools that care about the actual un-aliased type will need to call `Unalias` everywhere in the tools code where there is a type assertion or type switch and the type may be an alias type.\r\n\r\nThis is a non-backward compatible change to `go/types` and it may require pervasive changes to tools, with a potentially long bug tail. For that reason we also propose to introduce a new `types.Config` flag:\r\n\r\n\r\n\r\nUnless `EnableAlias` is set, go/types behaves exactly as before. If `EnableAlias` is set, `Alias` nodes appear for type alias declarations, and clients of `go/types` will need to be aware of that.\r\n\r\n### Discussion\r\n\r\nThis proposal only introduces the `Alias` node functionality, without support for type parameters. We believe this is a significant change which should be done separately from support for parameterized alias types, ideally for Go 1.22. Once the new API is settled and clients have adjusted, we would then extend the `Alias` node with support for type parameters and instantiation, presumably for Go 1.23. As that step doesn't introduce a new type node, we expect it to be easier to adjust clients.\r\n\r\nUnfortunately we don't see a way around introducing an explicit `Alias` node if we want to support parameterization, and therefore we don't see a way to support parameterized alias types in a backward-compatible way. The `EnableAlias` configuration flag should help ease the transition: tools will continue to work as before if this proposal is accepted. Only when they set the configuration flag will they need to be aware of the new type node.\r\n\r\n### Implementation\r\n\r\nAn initial implementation can be found here: [CL 521956](https://go.dev/cl/521956) with unexported API changes.\r\nThe compiler doesn't set `EnableAlias` yet. Also, changes to the compiler (calls to `Unalias`) and exporters/importers are missing.\r\n\r\n",Proposal|Proposal-Accepted,griesemer,"### Background\r\n\r\nCurrently, when a type alias declaration\r\n\r\n```Go\r\ntype A = some_type\r\n```\r\n\r\nis type-checked, `go/types` creates a `TypeName` `Object` for the type alias `A` but the type of the `TypeName` is the type of `some_type`. When `A` is used as identifier in source code, the denoted type is `some_type`, which if it's a defined type will have a different name than `A`; and if it's not a defined type, it will be a type literal, which is also not called `A`. As a consequence, an error message related to the type `A` will not report `A` but `some_type` or whatever type `A` is a alias for. This is a long-standing issue that we'd like to fix.\r\n\r\nFurthermore, with proposal #46477 accepted (parameterized type aliases), currently `go/types` doesn't have a way to represent a parameterized alias type.\r\n\r\nBoth these problems can be addressed with an explicit `Alias` type node. This proposal is about introducing such a new type node.\r\n\r\n### Proposal\r\n\r\nWe introduce a new `go/types` node called `Alias`:\r\n\r\n```Go\r\n// An Alias represents an alias type.\r\ntype Alias struct {\r\n\tobj     *TypeName // corresponding declared alias object\r\n\tfromRHS Type      // RHS of type alias declaration; may be an alias\r\n\tactual  Type      // actual (aliased) type; never an alias\r\n\r\n\t// additional fields for type parameters\r\n}\r\n\r\n// Obj returns the type name for the declaration defining the alias a.\r\nfunc (a *Alias) Obj() *TypeName { return a.obj }\r\n\r\n// Methods supported by all types\r\nfunc (*Alias) Underlying() Type\r\nfunc (*Alias) String() string \r\n```\r\n\r\nAn `Alias` node stands for a type alias. An `Alias` node is created with a factory function:\r\n\r\n```Go\r\nfunc NewAlias(obj *TypeName, rhs Type) *Alias\r\n```\r\n\r\nWhen an `Alias` node is encountered, `go/types` and related tool clients may need to indirect to the actual type the `Alias` node is a type alias for. This can be done through a new function\r\n\r\n```Go\r\n// Unalias returns t if it is not an alias type;\r\n// otherwise it follows t's alias chain until it\r\n// reaches a non-alias type which is then returned.\r\n// Consequently, the result is never an alias type.\r\nfunc Unalias(t Type) Type\r\n```\r\n\r\nTools that care about the actual un-aliased type will need to call `Unalias` everywhere in the tools code where there is a type assertion or type switch and the type may be an alias type.\r\n\r\nThis is a non-backward compatible change to `go/types` and it may require pervasive changes to tools, with a potentially long bug tail. For that reason we also propose to introduce a new `types.Config` flag:\r\n\r\n```Go\r\n// If EnableAlias is set, alias declarations produce an Alias type.\r\n// Otherwise the alias information is only in the type name, which\r\n// points directly to the actual (aliased) type.\r\nEnableAlias bool\r\n```\r\n\r\nUnless `EnableAlias` is set, go/types behaves exactly as before. If `EnableAlias` is set, `Alias` nodes appear for type alias declarations, and clients of `go/types` will need to be aware of that.\r\n\r\n### Discussion\r\n\r\nThis proposal only introduces the `Alias` node functionality, without support for type parameters. We believe this is a significant change which should be done separately from support for parameterized alias types, ideally for Go 1.22. Once the new API is settled and clients have adjusted, we would then extend the `Alias` node with support for type parameters and instantiation, presumably for Go 1.23. As that step doesn't introduce a new type node, we expect it to be easier to adjust clients.\r\n\r\nUnfortunately we don't see a way around introducing an explicit `Alias` node if we want to support parameterization, and therefore we don't see a way to support parameterized alias types in a backward-compatible way. The `EnableAlias` configuration flag should help ease the transition: tools will continue to work as before if this proposal is accepted. Only when they set the configuration flag will they need to be aware of the new type node.\r\n\r\n### Implementation\r\n\r\nAn initial implementation can be found here: [CL 521956](https://go.dev/cl/521956) with unexported API changes.\r\nThe compiler doesn't set `EnableAlias` yet. Also, changes to the compiler (calls to `Unalias`) and exporters/importers are missing.\r\n\r\n",Go\r\ntype A = some_type\r\n
63183,html/template: comment handling introduced in 1.21.1 breaks valid scripts### What version of Go are you using (`go version`)?\r\n1.21.1\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nPlayground\r\n\r\n### What did you do?\r\n[Run this code on the playground](https://go.dev/play/p/3X8AWSrCHtp):\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n,Security|NeedsInvestigation,rolandshoemaker,"### What version of Go are you using (`go version`)?\r\n1.21.1\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nPlayground\r\n\r\n### What did you do?\r\n[Run this code on the playground](https://go.dev/play/p/3X8AWSrCHtp):\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""html/template""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tt, _ := template.New(""T"").Parse(`\r\n\t\t<script>\r\n\t\t\tif (a-->b) {\r\n\t\t\t\t// do stuff\r\n\t\t\t}\r\n\t\t</script>\r\n\t`)\r\n\tt.ExecuteTemplate(os.Stdout, ""T"", """")\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```HTML\r\n\t\t<script>\r\n\t\t\tif (a-->b) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t</script>\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```HTML\r\n\t\t<script>\r\n\t\t\tif (a\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t</script>\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""html/template""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tt, _ := template.New(""T"").Parse(`\r\n\t\t<script>\r\n\t\t\tif (a-->b) {\r\n\t\t\t\t// do stuff\r\n\t\t\t}\r\n\t\t</script>\r\n\t`)\r\n\tt.ExecuteTemplate(os.Stdout, ""T"", """")\r\n}\r\n\r\n"
63116,"net: add UnwrapErr field and Unwrap method to *DNSErrorEdit: current proposal: https://github.com/golang/go/issues/63116#issuecomment-1727801738\r\n\r\n***\r\n\r\nThis is a proposal to fix the #63109 issue.\r\n\r\nI propose adding a `causeErr` field to `DNSError` and an `Unwrap` method that returns the `causeErr`.\r\n\r\n\r\n\r\nThis way we keep backwards compatibility for the `Error` method, we always construct the error from \r\nthe `Err string` field (we keep the current implementation). In the net pacakge we will then make `Err` field to be the result of the first call to `causeErr.Error()`.\r\n",Proposal|Proposal-Accepted,mateusz834,"Edit: current proposal: https://github.com/golang/go/issues/63116#issuecomment-1727801738\r\n\r\n***\r\n\r\nThis is a proposal to fix the #63109 issue.\r\n\r\nI propose adding a `causeErr` field to `DNSError` and an `Unwrap` method that returns the `causeErr`.\r\n\r\n```go\r\n// DNSError represents a DNS lookup error.\r\ntype DNSError struct {\r\n    causeErr error // returned by the Unwrap method.\r\n    // (....)     \r\n}\r\n\r\nfunc (e *DNSError) Unwrap() error { return e.causeErr }\r\n```\r\n\r\nThis way we keep backwards compatibility for the `Error` method, we always construct the error from \r\nthe `Err string` field (we keep the current implementation). In the net pacakge we will then make `Err` field to be the result of the first call to `causeErr.Error()`.\r\n",go\r\n// DNSError represents a DNS lookup error.\r\ntype DNSError struct {\r\n    causeErr error // returned by the Unwrap method.\r\n    // (....)     \r\n}\r\n\r\nfunc (e *DNSError) Unwrap() error { return e.causeErr }\r\n
62653,"cmd/compile: avoid always escaping the receivers in interface method calls### Background\r\n\r\nCurrently, interface arguments to functions frequently escape due to subsequent use of the interface in an interface method call. \r\n\r\nThis affects many APIs, including things like marshalling/unmarshalling APIs, logging APIs, things like fmt.Sprintf, and many other flavors of APIs that take interfaces.\r\n\r\nFor example, in Go 1.21, the `val` here escapes and is heap allocated for this reason (and other for reasons as well):\r\n\r\n\r\n\r\nIf we consider an extremely simplified implementation of Sprintf:\r\n\r\n\r\n\r\nWhen `v.String` is called as an interface method in that example, `v` might contain a type like `Leaking`:\r\n\r\n\r\n\r\nThe current compiler knows this is possible, and as a result, the `input` interface argument to our simple Print function is conservatively marked as escaping. This is part of the reason the real fmt.Sprintf causes `val` to be allocated above.\r\n\r\nFrequently, though, `v` contains a type like `Nice`:\r\n\r\n\r\n### Suggestion\r\n\r\nThe suggestion is for escape analysis to propagate what it knows about the use of interfaces in method calls to then prove (when it can) whether it is dealing with a type like Leaking or Nice to then avoid allocating the `n` in ` n := Nice{}; Print(n)`.\r\n\r\nIn particular, escape analysis has had the concept of pseudo locations for things like the heap, and the escape analysis data-flow graph in the current compiler contains an edge leading to a heap pseudo location for each interface method call observed. \r\n\r\nWe could instead track the interface method use flows separately from other flows to the heap, including propagating across function call boundaries by tagging the associated function & method parameters. When a concrete value is later converted to an interface type (e.g., `Print(n)` in our simple example above), we look at what we know about the type and its methods to see if we can prove that it is incapable of leaking if used as a method receiver in an interface method call.\r\n\r\nI sent [CL 524945](https://go.dev/cl/524945) with implementation of the idea, along with some related CLs like [524937](https://go.dev/cl/524937) and [524944](https://go.dev/cl/524944).\r\n\r\nThose are a part of a larger stack targeting the fmt print functions. By the end of my stack (as of [CL 528538](https://go.dev/cl/528538)), this no longer allocates the Point struct on the heap:\r\n\r\n\r\n\r\nThe primary CL 524945 is still WIP, but at least passes all.bash and the TryBots, including passing the more specific interface receiver tests I added. (It passes the older TryBots, but currently fails the new LUCI TryBots for LUCI-specific reasons). The first cut does not differentiate between a type that only has some methods with leaking receivers vs. the specific method in question, but [CL 528539](https://go.dev/cl/528539) is also a small refinement I had also been thinking about that attempts to address that. (That is not needed for many cases, and that CL is currently in much rougher shape & more exploratory).\r\n\r\nIn the initial discussion in Gerrit on CL 524945, Matthew Dempsky said he liked the idea. He also suggested opening an issue to help discussion, which is now this issue. \r\n\r\nMatthew also later sent [CL 526520](https://go.dev/cl/526520) with an alternative implementation of the core idea.\r\n\r\nCC @mdempsky, @ianlancetaylor ",NeedsFix|compiler/runtime,mdempsky|thepudds,"### Background\r\n\r\nCurrently, interface arguments to functions frequently escape due to subsequent use of the interface in an interface method call. \r\n\r\nThis affects many APIs, including things like marshalling/unmarshalling APIs, logging APIs, things like fmt.Sprintf, and many other flavors of APIs that take interfaces.\r\n\r\nFor example, in Go 1.21, the `val` here escapes and is heap allocated for this reason (and other for reasons as well):\r\n\r\n```go\r\n val := 1000\r\n fmt.Sprintf(""%d"", val)\r\n```\r\n\r\nIf we consider an extremely simplified implementation of Sprintf:\r\n\r\n```go\r\n  func Print(input any) {\r\n    if v, ok := input.(Stringer); ok {\r\n       println(v.String())\r\n    }\r\n  }\r\n```\r\n\r\nWhen `v.String` is called as an interface method in that example, `v` might contain a type like `Leaking`:\r\n\r\n```go\r\nvar global any\r\ntype Leaking struct {a, b int}\r\n\r\n // The receiver l cannot be stack allocated because String leaks l to a global variable.\r\nfunc (l *Leaking) String() string { global = l; return """" } \r\n```\r\n\r\nThe current compiler knows this is possible, and as a result, the `input` interface argument to our simple Print function is conservatively marked as escaping. This is part of the reason the real fmt.Sprintf causes `val` to be allocated above.\r\n\r\nFrequently, though, `v` contains a type like `Nice`:\r\n```go\r\ntype Nice struct {a, b int}\r\n\r\n// The receiver n could in theory be stack allocated in n := Nice{}; Print(n)\r\nfunc (n Nice) String() string { return ""something"" } \r\n```\r\n\r\n### Suggestion\r\n\r\nThe suggestion is for escape analysis to propagate what it knows about the use of interfaces in method calls to then prove (when it can) whether it is dealing with a type like Leaking or Nice to then avoid allocating the `n` in ` n := Nice{}; Print(n)`.\r\n\r\nIn particular, escape analysis has had the concept of pseudo locations for things like the heap, and the escape analysis data-flow graph in the current compiler contains an edge leading to a heap pseudo location for each interface method call observed. \r\n\r\nWe could instead track the interface method use flows separately from other flows to the heap, including propagating across function call boundaries by tagging the associated function & method parameters. When a concrete value is later converted to an interface type (e.g., `Print(n)` in our simple example above), we look at what we know about the type and its methods to see if we can prove that it is incapable of leaking if used as a method receiver in an interface method call.\r\n\r\nI sent [CL 524945](https://go.dev/cl/524945) with implementation of the idea, along with some related CLs like [524937](https://go.dev/cl/524937) and [524944](https://go.dev/cl/524944).\r\n\r\nThose are a part of a larger stack targeting the fmt print functions. By the end of my stack (as of [CL 528538](https://go.dev/cl/528538)), this no longer allocates the Point struct on the heap:\r\n\r\n```go\r\n  type Point struct {x, y int}\r\n  p := Point{1, 2}\r\n  fmt.Sprintf(""%v"", p)\r\n```\r\n\r\nThe primary CL 524945 is still WIP, but at least passes all.bash and the TryBots, including passing the more specific interface receiver tests I added. (It passes the older TryBots, but currently fails the new LUCI TryBots for LUCI-specific reasons). The first cut does not differentiate between a type that only has some methods with leaking receivers vs. the specific method in question, but [CL 528539](https://go.dev/cl/528539) is also a small refinement I had also been thinking about that attempts to address that. (That is not needed for many cases, and that CL is currently in much rougher shape & more exploratory).\r\n\r\nIn the initial discussion in Gerrit on CL 524945, Matthew Dempsky said he liked the idea. He also suggested opening an issue to help discussion, which is now this issue. \r\n\r\nMatthew also later sent [CL 526520](https://go.dev/cl/526520) with an alternative implementation of the core idea.\r\n\r\nCC @mdempsky, @ianlancetaylor ","go\r\n val := 1000\r\n fmt.Sprintf(""%d"", val)\r\n"
62605,"go/types: Export Info.FileVersions for access to file-specific version informationThis proposal has been updated. See this [comment](https://github.com/golang/go/issues/62605#issuecomment-1760088940) for the most recent proposed changes.\r\n\r\n---\r\n\r\n### Background\r\n\r\nTools (such as the compiler) need access to per-file version information as provided in the processed Go source such that they (the tools) can do correct semantic analysis. For instance, this information is needed for correct scoping rules for the loop variable scoping change (#60078). The type checker (`go/types`) can collect this information during type-checking and provide it to clients.\r\n\r\n### Proposal\r\n\r\nWe propose to export the following additional data structures from `go/types`:\r\n\r\nWe add a new map to the `go/types.Info` struct which will be populated if present:\r\n\r\n\r\nThe `Version` type will be defined as follows:\r\n\r\n\r\nThe `Version` type may also define/export the following methods for convenience:\r\n\r\n\r\nThese methods are not necessary (they are trivial to implement if needed), but unexported versions of them exist in the type checker and there are no strong reasons to withhold them from being exported.\r\n\r\n### Implementation\r\n\r\nThis proposal has been implemented in `types2` for use by the compiler and the code is present in unexported form in `go/types`, see [CL 515135](https://go.dev/cl/515135). If there are no objections to the proposed API we can simply export the functionality. If there are viable alternative proposals, we can adjust the existing implementation as needed.\r\n",Proposal|Proposal-Accepted,griesemer,"This proposal has been updated. See this [comment](https://github.com/golang/go/issues/62605#issuecomment-1760088940) for the most recent proposed changes.\r\n\r\n---\r\n\r\n### Background\r\n\r\nTools (such as the compiler) need access to per-file version information as provided in the processed Go source such that they (the tools) can do correct semantic analysis. For instance, this information is needed for correct scoping rules for the loop variable scoping change (#60078). The type checker (`go/types`) can collect this information during type-checking and provide it to clients.\r\n\r\n### Proposal\r\n\r\nWe propose to export the following additional data structures from `go/types`:\r\n\r\nWe add a new map to the `go/types.Info` struct which will be populated if present:\r\n```Go\r\n// FileVersions maps a file to the file's Go version.\r\n// If the file doesn't specify a version and Config.GoVersion is not\r\n// given, the reported version is the zero version (Major, Minor = 0, 0).\r\nFileVersions map[*token.File]Version\r\n```\r\n\r\nThe `Version` type will be defined as follows:\r\n```Go\r\n// A Version represents a released Go version.\r\ntype Version struct {\r\n\tMajor int\r\n\tMinor int\r\n}\r\n```\r\n\r\nThe `Version` type may also define/export the following methods for convenience:\r\n```Go\r\n// String returns a string representation of v in the form ""goMajor.Minor"".\r\nfunc (v Version) String() string\r\n\r\n// Equal reports whether v and u are the same version.\r\nfunc (v Version) Equal(u Version) bool\r\n\r\n// Before reports whether version v is before version u.\r\nfunc (v Version) Before(u Version) bool\r\n\r\n// After reports whether version v is after version u.\r\nfunc (v Version) After(u Version) bool\r\n```\r\n\r\nThese methods are not necessary (they are trivial to implement if needed), but unexported versions of them exist in the type checker and there are no strong reasons to withhold them from being exported.\r\n\r\n### Implementation\r\n\r\nThis proposal has been implemented in `types2` for use by the compiler and the code is present in unexported form in `go/types`, see [CL 515135](https://go.dev/cl/515135). If there are no objections to the proposed API we can simply export the functionality. If there are viable alternative proposals, we can adjust the existing implementation as needed.\r\n","Go\r\n// FileVersions maps a file to the file's Go version.\r\n// If the file doesn't specify a version and Config.GoVersion is not\r\n// given, the reported version is the zero version (Major, Minor = 0, 0).\r\nFileVersions map[*token.File]Version\r\n"
62443,"cmd/trace: the ""GC pause"" column in the user-defined regions table doesn't make sense<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/admin/Library/Caches/go-build'\r\nGOENV='/Users/admin/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/admin/code/gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/admin/code/gopath'\r\nGOPRIVATE='*.poizon.com'\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/usr/local/opt/go/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/opt/go/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/yq/ybt11j913mq3ppqx5tdl2phm0000gn/T/go-build920501220=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nUse go tool trace's custom region to track function execution time.\r\n\r\nTest Code: https://go.dev/play/p/idO-4ycK41K\r\n\r\n```sh\r\n$ GODEBUG='gctrace=1' go test -bench=BenchmarkGoTrace -benchtime=1000x -run=NONE -trace=trace.out\r\n\r\ncpu: Intel(R) Core(TM) i5-1038NG7 CPU @ 2.00GHz\r\nBenchmarkGoTrace-8          1000      22500692 ns/op\r\n\r\ngc 2259 @26.566s 5%: 0.24+3.9+0.44 ms clock, 1.9+0.35/1.3/0+3.5 ms cpu, 128->156->47 MB, 145 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\ngc 2260 @26.574s 5%: 0.21+8.1+0.088 ms clock, 1.6+4.3/6.7/0+0.71 ms cpu, 85->100->85 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\ngc 2261 @26.595s 5%: 0.19+2.5+0.094 ms clock, 1.5+0.032/0.85/0+0.75 ms cpu, 149->163->47 MB, 171 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\n\r\n\r\n$ go tool trace trace.out\r\n```\r\n![image](https://github.com/golang/go/assets/22112659/8b7953de-60a1-45f5-89c7-944158e1417c)\r\n![image](https://github.com/golang/go/assets/22112659/5cfafe58-fc18-413f-8c67-729ef6a32ce3)\r\n![image](https://github.com/golang/go/assets/22112659/ffe96a3a-9d5c-43fd-810c-181f195d83ee)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe actual pause time of goroutine due to GC.\r\n\r\n### What did you see instead?\r\nThe GC pause time is extremely large and does not match the time output by GODEBUG='gctrace=1'.\r\n\r\n""GC pasue"" uses the GCTime field, which corresponds to the GCDone event. It seems that this is the total GC time, and it is calculated for each goroutine.\r\n\r\n[cmd/trace/goroutines.go#L298][1]\r\n\r\n\r\n\r\n[internal/trace/goroutines.go#L275][2]\r\n\r\n\r\n  [1]: https://github.com/golang/go/blob/go1.21.0/src/cmd/trace/goroutines.go#L298\r\n  [2]: https://github.com/golang/go/blob/go1.21.0/src/internal/trace/goroutines.go#L275\r\n",compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/admin/Library/Caches/go-build'\r\nGOENV='/Users/admin/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/admin/code/gopath/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/admin/code/gopath'\r\nGOPRIVATE='*.poizon.com'\r\nGOPROXY='https://goproxy.cn,direct'\r\nGOROOT='/usr/local/opt/go/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/opt/go/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/yq/ybt11j913mq3ppqx5tdl2phm0000gn/T/go-build920501220=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nUse go tool trace's custom region to track function execution time.\r\n\r\nTest Code: https://go.dev/play/p/idO-4ycK41K\r\n\r\n```sh\r\n$ GODEBUG='gctrace=1' go test -bench=BenchmarkGoTrace -benchtime=1000x -run=NONE -trace=trace.out\r\n\r\ncpu: Intel(R) Core(TM) i5-1038NG7 CPU @ 2.00GHz\r\nBenchmarkGoTrace-8          1000      22500692 ns/op\r\n\r\ngc 2259 @26.566s 5%: 0.24+3.9+0.44 ms clock, 1.9+0.35/1.3/0+3.5 ms cpu, 128->156->47 MB, 145 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\ngc 2260 @26.574s 5%: 0.21+8.1+0.088 ms clock, 1.6+4.3/6.7/0+0.71 ms cpu, 85->100->85 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\ngc 2261 @26.595s 5%: 0.19+2.5+0.094 ms clock, 1.5+0.032/0.85/0+0.75 ms cpu, 149->163->47 MB, 171 MB goal, 0 MB stacks, 0 MB globals, 8 P\r\n\r\n\r\n$ go tool trace trace.out\r\n```\r\n![image](https://github.com/golang/go/assets/22112659/8b7953de-60a1-45f5-89c7-944158e1417c)\r\n![image](https://github.com/golang/go/assets/22112659/5cfafe58-fc18-413f-8c67-729ef6a32ce3)\r\n![image](https://github.com/golang/go/assets/22112659/ffe96a3a-9d5c-43fd-810c-181f195d83ee)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe actual pause time of goroutine due to GC.\r\n\r\n### What did you see instead?\r\nThe GC pause time is extremely large and does not match the time output by GODEBUG='gctrace=1'.\r\n\r\n""GC pasue"" uses the GCTime field, which corresponds to the GCDone event. It seems that this is the total GC time, and it is calculated for each goroutine.\r\n\r\n[cmd/trace/goroutines.go#L298][1]\r\n\r\n```html\r\n<table class=""details"">\r\n<tr>\r\n<th onclick=""reloadTable('sortby', 'SweepTime')"" class=""sweep-time""> GC sweeping</th>\r\n<th onclick=""reloadTable('sortby', 'GCTime')"" class=""pause-time""> GC pause</th>\r\n</tr>\r\n{{range .GList}}\r\n  <tr>\r\n    <td> {{prettyDuration .SweepTime}} {{percent .SweepTime .TotalTime}}</td>\r\n    <td> {{prettyDuration .GCTime}} {{percent .GCTime .TotalTime}}</td>\r\n  </tr>\r\n{{end}}\r\n</table>\r\n```\r\n\r\n[internal/trace/goroutines.go#L275][2]\r\n\r\n```go\r\nconst (\r\n\tEvGCStart           = 7  // GC start [timestamp, seq, stack id]\r\n\tEvGCDone            = 8  // GC done [timestamp]\r\n\tEvSTWStart          = 9  // GC mark termination start [timestamp, kind]\r\n\tEvSTWDone           = 10 // GC mark termination done [timestamp]\r\n\tEvGCSweepStart      = 11 // GC sweep start [timestamp, stack id]\r\n\tEvGCSweepDone       = 12 // GC sweep done [timestamp, swept, reclaimed]\r\n)\r\n\r\nfunc GoroutineStats() {\r\n\t// ...\r\n\r\n\tcase EvGCStart:\r\n\t\tgcStartTime = ev.Ts\r\n\tcase EvGCDone:\r\n\t\tfor _, g := range gs {\r\n\t\t\tif g.EndTime != 0 {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif gcStartTime < g.CreationTime {\r\n\t\t\t\tg.GCTime += ev.Ts - g.CreationTime\r\n\t\t\t} else {\r\n\t\t\t\tg.GCTime += ev.Ts - gcStartTime\r\n\t\t\t}\r\n\t\t}\r\n\t\tgcStartTime = 0 // indicates gc is inactive.\r\n}\r\n```\r\n  [1]: https://github.com/golang/go/blob/go1.21.0/src/cmd/trace/goroutines.go#L298\r\n  [2]: https://github.com/golang/go/blob/go1.21.0/src/internal/trace/goroutines.go#L275\r\n","html\r\n<table class=""details"">\r\n<tr>\r\n<th onclick=""reloadTable('sortby', 'SweepTime')"" class=""sweep-time""> GC sweeping</th>\r\n<th onclick=""reloadTable('sortby', 'GCTime')"" class=""pause-time""> GC pause</th>\r\n</tr>\r\n{{range .GList}}\r\n  <tr>\r\n    <td> {{prettyDuration .SweepTime}} {{percent .SweepTime .TotalTime}}</td>\r\n    <td> {{prettyDuration .GCTime}} {{percent .GCTime .TotalTime}}</td>\r\n  </tr>\r\n{{end}}\r\n</table>\r\n"
62418,"log/slog: enable setting level on default log.Logger<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\nEdit: Official proposal in [this comment](https://github.com/golang/go/issues/62418#issuecomment-1713699384)\r\n\r\nWhen `slog.SetDefault()` is run, it sets the log package's default Logger's output as well, configured to log at `LevelInfo`. While this is probably a good default behavior, having a way to configure the level would be useful (such as `LevelError`), especially considering that `log.Printf()` by default logs to stderr, not stdout.\r\n\r\nWhile `slog.NewLogLogger()` exists, it returns a `*log.Logger`, which cannot be used to update the default logger of the log package, as far as I can tell. (`log.SetOuput(w io.Writer)` exists, but `log.SetDefault(*log.Logger)` does not).\r\n\r\nI propose exporting `handleWriter` to make this use case easier:\r\n\r\n\r\n\r\nCurrently I can accomplish this by copying the handleWriter code, but it's a bit verbose in my opinion:\r\n\r\n\r\nA couple more alternatives I've thought of:\r\n\r\n- `slog.SetDefaultLogLogger(l, slog.LevelError)`, possibly confusing naming, but more concise than using `HandlerWriter`, not requiring computation of `capturePC`.\r\n- Using `slog.NewLogLogger()`, explained above.\r\n- `slog.SetDefault()` updated to use `l.Handler().Level()` rather `LevelInfo`. Would be a breaking change.\r\n- `slog.SetDefaultLogLoggerLevel(slog.LevelError)`, noop if `slog.SetDefault()` has not been called yet?",Proposal|Proposal-Accepted,panjf2000,"<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\nEdit: Official proposal in [this comment](https://github.com/golang/go/issues/62418#issuecomment-1713699384)\r\n\r\nWhen `slog.SetDefault()` is run, it sets the log package's default Logger's output as well, configured to log at `LevelInfo`. While this is probably a good default behavior, having a way to configure the level would be useful (such as `LevelError`), especially considering that `log.Printf()` by default logs to stderr, not stdout.\r\n\r\nWhile `slog.NewLogLogger()` exists, it returns a `*log.Logger`, which cannot be used to update the default logger of the log package, as far as I can tell. (`log.SetOuput(w io.Writer)` exists, but `log.SetDefault(*log.Logger)` does not).\r\n\r\nI propose exporting `handleWriter` to make this use case easier:\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""log/slog""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tl := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{\r\n\t\tLevel: slog.LevelInfo,\r\n\t}))\r\n\r\n\tslog.SetDefault(l) // configures log package to print with LevelInfo\r\n\t\r\n\tcapturePC := log.Flags()&(log.Lshortfile|log.Llongfile) != 0\r\n\tlog.SetOutput(&slog.HandlerWriter{l.Handler(), slog.LevelError, capturePC}) // configures log package to print with LevelError\r\n}\r\n```\r\n\r\nCurrently I can accomplish this by copying the handleWriter code, but it's a bit verbose in my opinion:\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""log""\r\n\t""log/slog""\r\n\t""os""\r\n\t""runtime""\r\n\t""time""\r\n)\r\n\r\n// handlerWriter is an io.Writer that calls an  slog.Handler.\r\n// It is used to link the default log.Logger to the default slog.Logger.\r\ntype handlerWriter struct {\r\n\th         slog.Handler\r\n\tlevel     slog.Level\r\n\tcapturePC bool\r\n}\r\n\r\nfunc (w *handlerWriter) Write(buf []byte) (int, error) {\r\n\tif !w.h.Enabled(context.Background(), w.level) {\r\n\t\treturn 0, nil\r\n\t}\r\n\tvar pc uintptr\r\n\tif w.capturePC {\r\n\t\t// skip [runtime.Callers, w.Write, Logger.Output, log.Print]\r\n\t\tvar pcs [1]uintptr\r\n\t\truntime.Callers(4, pcs[:])\r\n\t\tpc = pcs[0]\r\n\t}\r\n\r\n\t// Remove final newline.\r\n\torigLen := len(buf) // Report that the entire buf was written.\r\n\tif len(buf) > 0 && buf[len(buf)-1] == '\\n' {\r\n\t\tbuf = buf[:len(buf)-1]\r\n\t}\r\n\tr := slog.NewRecord(time.Now(), w.level, string(buf), pc)\r\n\treturn origLen, w.h.Handle(context.Background(), r)\r\n}\r\n\r\nfunc main() {\r\n\tl := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{\r\n\t\tLevel: slog.LevelInfo,\r\n\t}))\r\n\r\n\tslog.SetDefault(l) // configures log package to print with LevelInfo\r\n\r\n\tcapturePC := log.Flags()&(log.Lshortfile|log.Llongfile) != 0\r\n\tlog.SetOutput(&handlerWriter{l.Handler(), slog.LevelError, capturePC}) // configures log package to print with LevelError\r\n}\r\n```\r\nA couple more alternatives I've thought of:\r\n\r\n- `slog.SetDefaultLogLogger(l, slog.LevelError)`, possibly confusing naming, but more concise than using `HandlerWriter`, not requiring computation of `capturePC`.\r\n- Using `slog.NewLogLogger()`, explained above.\r\n- `slog.SetDefault()` updated to use `l.Handler().Level()` rather `LevelInfo`. Would be a breaking change.\r\n- `slog.SetDefaultLogLoggerLevel(slog.LevelError)`, noop if `slog.SetDefault()` has not been called yet?","golang\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""log/slog""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tl := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{\r\n\t\tLevel: slog.LevelInfo,\r\n\t}))\r\n\r\n\tslog.SetDefault(l) // configures log package to print with LevelInfo\r\n\t\r\n\tcapturePC := log.Flags()&(log.Lshortfile|log.Llongfile) != 0\r\n\tlog.SetOutput(&slog.HandlerWriter{l.Handler(), slog.LevelError, capturePC}) // configures log package to print with LevelError\r\n}\r\n"
62379,"runtime/coverage: Eliminate dominator Coverage Units <!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nThe current building for coverage implementation works by rewriting the source files adding some instrumentation statements that later are used to determine the code lines that were executed during runtime, in the following code snippets we can see an example of this workflow.\r\n\r\n\r\n\r\n\r\n\r\nThere are 3 coverable units in the example above, but only two of them are needed to cover the whole main function in our sample program. By knowing the state of `x_0[4]` and `x_0[5]` one can infer the state of `x_0[3]`:\r\n- If `x_0[4]` has a value of 1, then x_0[3] must also have it, because it\u2019s impossible to get to the block of code that x_0[4] covers without passing first through the code lines that `x_0[3]` covers.\r\n- The same logic applies to `x_0[5]`. \r\n\r\nFollowing this assumption, one can see that some of the cover statements can be inferred from the value of others. One can know if a unit is inferable by generating the dominator tree out of the flow graph of the function (there\u2019s going to be a one to one relationship between the coverable units and the nodes of the graph), if its corresponding node isn\u2019t a leaf then the unit is inferable. In the figure below there\u2019s the corresponding flow graph (first image) for the sample code and its dominator tree (second image).\r\n\r\n![Flow graph](https://github.com/golang/go/assets/43709368/5dbb8554-02d6-4cab-ad62-2da16573ddd9)\r\n\r\n![Dominator Tree](https://github.com/golang/go/assets/43709368/4f3fdf7f-e49c-446a-a99b-ff9259edb430)\r\n\r\n## Limitations\r\nWith this proposal a new issue arise when we have a noninstrumented package which calls `os.Exit()` as we\u2019re erasing some of the cover statements based in the flow of execution of the instrumented function, there might be cases when the information dumped is incomplete and there\u2019s no way to recover it. In the following code snippets there\u2019s an example of this behavior, after building the main package erasing inferable units and executing the program, we\u2019ll get as result that any unit was hit, when that\u2019s not the case.\r\n\r\n\r\n\r\n```\r\npackage main\r\n\r\nimport \u201cnoninstrumented\u201d\r\n\r\nfunc main() { x_0[0] = 3 ; x_0[1] = x_P ; x_0[2] = 0;\r\n    a := 0\r\n    if noninstrumented.DoSomething(10) { x_0[5] = 1;\r\n         a += 20\r\n    }\r\n    x_0[4] = 1;a++\r\n}\r\n```\r\n## Motivation\r\nOne of the purposes of this proposal is to reduce the overhead of runtime instrumentation to detect dead code across codebases by running instrumented binaries during a certain amount of time and then gathering a report of the executed code lines.\r\n\r\n",NeedsInvestigation,thanm,"<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nThe current building for coverage implementation works by rewriting the source files adding some instrumentation statements that later are used to determine the code lines that were executed during runtime, in the following code snippets we can see an example of this workflow.\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\ta := 10\r\n\tif a >= 10 {\r\n\t\ta -= 10\r\n\t}\r\n\tfmt.Println(a)\r\n}\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {x_0[0] = 3 ; x_0[1] = x_P ; x_0[2] = 0; x_0[3] = 1; // Counters and metadata\r\n\ta := 10\r\n\tif a >= 10 {x_0[5]=1;\r\n\t\ta -= 10\r\n\t}\r\n\tx_0[4]=1;fmt.Println(a)\r\n}\r\n```\r\n\r\nThere are 3 coverable units in the example above, but only two of them are needed to cover the whole main function in our sample program. By knowing the state of `x_0[4]` and `x_0[5]` one can infer the state of `x_0[3]`:\r\n- If `x_0[4]` has a value of 1, then x_0[3] must also have it, because it\u2019s impossible to get to the block of code that x_0[4] covers without passing first through the code lines that `x_0[3]` covers.\r\n- The same logic applies to `x_0[5]`. \r\n\r\nFollowing this assumption, one can see that some of the cover statements can be inferred from the value of others. One can know if a unit is inferable by generating the dominator tree out of the flow graph of the function (there\u2019s going to be a one to one relationship between the coverable units and the nodes of the graph), if its corresponding node isn\u2019t a leaf then the unit is inferable. In the figure below there\u2019s the corresponding flow graph (first image) for the sample code and its dominator tree (second image).\r\n\r\n![Flow graph](https://github.com/golang/go/assets/43709368/5dbb8554-02d6-4cab-ad62-2da16573ddd9)\r\n\r\n![Dominator Tree](https://github.com/golang/go/assets/43709368/4f3fdf7f-e49c-446a-a99b-ff9259edb430)\r\n\r\n## Limitations\r\nWith this proposal a new issue arise when we have a noninstrumented package which calls `os.Exit()` as we\u2019re erasing some of the cover statements based in the flow of execution of the instrumented function, there might be cases when the information dumped is incomplete and there\u2019s no way to recover it. In the following code snippets there\u2019s an example of this behavior, after building the main package erasing inferable units and executing the program, we\u2019ll get as result that any unit was hit, when that\u2019s not the case.\r\n\r\n```go\r\npackage noninstrumented\r\n\r\nimport \u201cos\u201d\r\n\r\nfunc DoSomething(x int) bool{\r\n    if x == 10 {\r\n        os.Exit(0)\r\n    }\r\n    return true\r\n}\r\n```\r\n\r\n```\r\npackage main\r\n\r\nimport \u201cnoninstrumented\u201d\r\n\r\nfunc main() { x_0[0] = 3 ; x_0[1] = x_P ; x_0[2] = 0;\r\n    a := 0\r\n    if noninstrumented.DoSomething(10) { x_0[5] = 1;\r\n         a += 20\r\n    }\r\n    x_0[4] = 1;a++\r\n}\r\n```\r\n## Motivation\r\nOne of the purposes of this proposal is to reduce the overhead of runtime instrumentation to detect dead code across codebases by running instrumented binaries during a certain amount of time and then gathering a report of the executed code lines.\r\n\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\ta := 10\r\n\tif a >= 10 {\r\n\t\ta -= 10\r\n\t}\r\n\tfmt.Println(a)\r\n}\r\n"
62335,"go/types, types2: type inference fails to infer type argument even though correct type is present in argument list\r\nfails to infer the type argument `struct{}` even though it appears in the function argument list ([playground](https://go.dev/play/p/-1a5WQ9XfK0)).\r\n\r\nThis bug existed since Go 1.18.\r\nIt partly interferes with a fix for #62157 (we can't fully fix #62157 without addressing this issue as well).\r\n\r\ncc: @findleyr ",TypeInference,griesemer,"```Go\r\npackage main\r\n\r\ntype A struct{}\r\ntype B struct{}\r\n\r\nvar a A\r\nvar b B\r\nvar c struct{}\r\n\r\nfunc main() {\r\n\tf(a, b, c) // ERROR ""type B of b does not match inferred type A for P""\r\n\tf[struct{}](a, b, c)\r\n}\r\n\r\nfunc f[P any](...P) {}\r\n```\r\nfails to infer the type argument `struct{}` even though it appears in the function argument list ([playground](https://go.dev/play/p/-1a5WQ9XfK0)).\r\n\r\nThis bug existed since Go 1.18.\r\nIt partly interferes with a fix for #62157 (we can't fully fix #62157 without addressing this issue as well).\r\n\r\ncc: @findleyr ","Go\r\npackage main\r\n\r\ntype A struct{}\r\ntype B struct{}\r\n\r\nvar a A\r\nvar b B\r\nvar c struct{}\r\n\r\nfunc main() {\r\n\tf(a, b, c) // ERROR ""type B of b does not match inferred type A for P""\r\n\tf[struct{}](a, b, c)\r\n}\r\n\r\nfunc f[P any](...P) {}\r\n"
62278,"cmd/go: mod tidy reports toolchain not available with 'go 1.21'<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nNote:  I think this is a question of: is ""`go 1.21`"" a valid go directive? since there was no `1.21` release, only `1.21.0`, perhaps not\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, reproduced on Go 1.21.0\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/proj/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build435086183=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a basic `go.mod`\r\n\r\n\r\n\r\nThen run:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`go mod tidy` runs successfully. I guess I expect it would pick `go1.21.0` as the toolchain if no toolchain is available as `1.21`\r\n\r\n### What did you see instead?\r\n\r\nThe error output above with a non-zero exit code\r\n\r\n### More details\r\n\r\nThe issue was seen when running `dependabot` on a repo with a `go 1.21` directive in `go.mod`, the `GOTOOLCHAIN` above was taken from their usage https://github.com/dependabot/dependabot-core/blob/08ac25ebd773cede0c00be9a98e5bb03b680870b/go_modules/Dockerfile#L34\r\n\r\nRunning the above command with `GODEBUG=http2debug=1` I see it:\r\n\r\n* requests `go.dev/dl/mod/golang.org/toolchain/@v/v0.0.1-go1.21.linux-amd64.zip` which returns `Location: https://go.dev/dl/mod/golang.org/toolchain/@v/v0.0.1-go1.21.linux-amd64.zip`\r\n* requesting that URL then returns `location: https://dl.google.com/go/v0.0.1-go1.21.linux-amd64.zip`\r\n* requesting that URL gives a 404\r\n\r\nUpdating the directive to: `go 1.21.0` will permit things to run fine.",GoCommand|FixPending,samthanawalla,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nNote:  I think this is a question of: is ""`go 1.21`"" a valid go directive? since there was no `1.21` release, only `1.21.0`, perhaps not\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, reproduced on Go 1.21.0\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/root/.cache/go-build'\r\nGOENV='/root/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='0'\r\nGOMOD='/proj/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build435086183=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a basic `go.mod`\r\n\r\n```console\r\n$ cat go.mod \r\nmodule example.com/foo\r\n\r\ngo 1.21\r\n```\r\n\r\nThen run:\r\n\r\n```console\r\n$ GOTOOLCHAIN=""go1.20+auto"" go mod tidy\r\ngo: downloading go1.21 (linux/amd64)\r\ngo: download go1.21 for linux/amd64: toolchain not available\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`go mod tidy` runs successfully. I guess I expect it would pick `go1.21.0` as the toolchain if no toolchain is available as `1.21`\r\n\r\n### What did you see instead?\r\n\r\nThe error output above with a non-zero exit code\r\n\r\n### More details\r\n\r\nThe issue was seen when running `dependabot` on a repo with a `go 1.21` directive in `go.mod`, the `GOTOOLCHAIN` above was taken from their usage https://github.com/dependabot/dependabot-core/blob/08ac25ebd773cede0c00be9a98e5bb03b680870b/go_modules/Dockerfile#L34\r\n\r\nRunning the above command with `GODEBUG=http2debug=1` I see it:\r\n\r\n* requests `go.dev/dl/mod/golang.org/toolchain/@v/v0.0.1-go1.21.linux-amd64.zip` which returns `Location: https://go.dev/dl/mod/golang.org/toolchain/@v/v0.0.1-go1.21.linux-amd64.zip`\r\n* requesting that URL then returns `location: https://dl.google.com/go/v0.0.1-go1.21.linux-amd64.zip`\r\n* requesting that URL gives a 404\r\n\r\nUpdating the directive to: `go 1.21.0` will permit things to run fine.",console\r\n$ cat go.mod \r\nmodule example.com/foo\r\n\r\ngo 1.21\r\n
62245,"cmd/compile/internal/devirtualize: PGO devirtualization lost when inlining function containing devirtualized call<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-081d27a2e5 Wed Aug 23 15:49:39 2023 +0000 linux/amd64\r\ngo version go1.21.0 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/korniltsev/.cache/go-build'\r\nGOENV='/home/korniltsev/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/korniltsev/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/korniltsev/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/korniltsev/github/go-linux-amd64-bootstrap'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/korniltsev/github/go-linux-amd64-bootstrap/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-081d27a2e5 Wed Aug 23 15:49:39 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/korniltsev/pyro/pgo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build943153879=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n\r\n\r\n<details><summary>debug compiler output</summary>\r\n\r\n```\r\n\r\n\r\n# command-line-arguments\r\n./main.go:25:24: PGO devirtualize considering call d.checker.check(d.data)\r\n./main.go:25:24: edge main.(*data).checkVirtual:1 -> main.(*c1).check (weight 20): hottest so far\r\n./main.go:25:24: edge main.(*data).checkVirtual:1 -> runtime.asyncPreempt (weight 1): too cold (hottest 20)\r\n./main.go:25:24 call main.(*data).checkVirtual:1: hottest callee main.(*c1).check (weight 20)\r\n./main.go:25:24: PGO devirtualizing d.checker.check to (*c1).check\r\nPGO devirtualizing call to PTR-*c1. After: \r\n.   INLCALL int tc(1) # main.go:25:24\r\n.   INLCALL-Body\r\n.   .   IF-init\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_3 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used main.checker tc(1) # main.go:50:5\r\n.   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   DOTPTR main.checker main.checker tc(1) # main.go:25:10\r\n.   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   .   DOTPTR main.data SLICE-[]byte tc(1) # main.go:25:26\r\n.   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   AS2DOTTYPE tc(1) # main.go:25:24\r\n.   .   .   AS2DOTTYPE-Lhs\r\n.   .   .   .   NAME-main..autotmp_5 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used PTR-*c1 tc(1) # main.go:50:5\r\n.   .   .   .   NAME-main..autotmp_6 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used bool tc(1) # main.go:50:5\r\n.   .   .   AS2DOTTYPE-Rhs\r\n.   .   .   .   DOTTYPE2 PTR-*c1 tc(1) # main.go:25:24\r\n.   .   .   .   .   NAME-main..autotmp_3 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used main.checker tc(1) # main.go:50:5\r\n.   .   IF Likely tc(1) # main.go:25:24\r\n.   .   IF-Cond\r\n.   .   .   NAME-main..autotmp_6 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used bool tc(1) # main.go:50:5\r\n.   .   IF-Body\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   CALLFUNC int tc(1) # main.go:25:24\r\n.   .   .   .   .   METHEXPR main.check FUNC-func(*c1, []byte) int tc(1) # main.go:25:24\r\n.   .   .   .   .   .   TYPE <S> type PTR-*c1 tc(1)\r\n.   .   .   .   CALLFUNC-Args\r\n.   .   .   .   .   NAME-main..autotmp_5 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used PTR-*c1 tc(1) # main.go:50:5\r\n.   .   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   .   IF-Else\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   CALLINTER int tc(1) # main.go:25:24\r\n.   .   .   .   .   DOTINTER main.check FUNC-method(*struct {}) func([]byte) int tc(1) # main.go:25:18\r\n.   .   .   .   .   .   DOTPTR main.checker main.checker tc(1) # main.go:25:10\r\n.   .   .   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   .   CALLINTER-Args\r\n.   .   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   INLCALL-ReturnVars\r\n.   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:25:24"",""Caller"":""main.(*data).checkVirtual"",""Direct"":false,""Interface"":true,""Weight"":21,""Hottest"":""main.(*c1).check"",""HottestWeight"":20,""Devirtualized"":""main.(*c1).check"",""DevirtualizedWeight"":20}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:31:18"",""Caller"":""main.(*data).checkManualVirtual"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c1).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n./main.go:33:24: PGO devirtualize considering call d.checker.check(d.data)\r\n./main.go:33:24: call main.(*data).checkManualVirtual:5: no hot callee\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:33:24"",""Caller"":""main.(*data).checkManualVirtual"",""Direct"":false,""Interface"":true,""Weight"":0,""Hottest"":"""",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:60:29"",""Caller"":""main.loopStatic"",""Direct"":true,""Interface"":false,""Weight"":19,""Hottest"":""main.(*data).checkStatic"",""HottestWeight"":19,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:67:30"",""Caller"":""main.loopVirtual"",""Direct"":true,""Interface"":false,""Weight"":90,""Hottest"":""main.(*data).checkVirtual"",""HottestWeight"":90,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:74:36"",""Caller"":""main.loopManualVirtual"",""Direct"":true,""Interface"":false,""Weight"":83,""Hottest"":""main.(*data).checkManualVirtual"",""HottestWeight"":83,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:79:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Parse"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:81:21"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""os.Create"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:82:24"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""runtime/pprof.StartCPUProfile"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:83:29"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""runtime/pprof.StopCPUProfile"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:92:28"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c1).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:93:28"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c2).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:95:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:96:13"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":111,""Hottest"":""main.loopVirtual"",""HottestWeight"":111,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:97:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:98:19"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":30,""Hottest"":""main.loopManualVirtual"",""HottestWeight"":30,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:99:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:100:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":28,""Hottest"":""main.loopStatic"",""HottestWeight"":28,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:101:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:102:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:102:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:103:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:103:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:104:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:104:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:105:13"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Println"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:50:18"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Int"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:51:17"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Int"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:52:20"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Bool"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:53:26"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.String"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\nhot-callsite-thres-from-CDF=4.973821989528796\r\nhot-cg before inline in dot format:\r\ndigraph G {\r\nforcelabels=true;\r\n""main.(*c1).check"" [color=black, style=solid, label=""main.(*c1).check""];\r\n""main.loopVirtual"" [color=black, style=solid, label=""main.loopVirtual""];\r\n""flag.Parse"" [color=black, style=solid, label=""flag.Parse,inl_cost=62""];\r\n""flag.Bool"" [color=black, style=solid, label=""flag.Bool,inl_cost=63""];\r\n""main.(*data).checkVirtual"" [color=black, style=solid, label=""main.(*data).checkVirtual""];\r\n""main.(*data).checkStatic"" [color=black, style=solid, label=""main.(*data).checkStatic""];\r\n""main.(*c2).check"" [color=black, style=solid, label=""main.(*c2).check""];\r\n""main.main"" [color=black, style=solid, label=""main.main""];\r\n""time.Time.Sub"" [color=black, style=solid, label=""time.Time.Sub""];\r\n""fmt.Printf"" [color=black, style=solid, label=""fmt.Printf,inl_cost=73""];\r\n""os.Create"" [color=black, style=solid, label=""os.Create,inl_cost=72""];\r\n""flag.String"" [color=black, style=solid, label=""flag.String,inl_cost=63""];\r\n""runtime.asyncPreempt"" [color=black, style=dashed, label=""runtime.asyncPreempt""];\r\n""main.loopManualVirtual"" [color=black, style=solid, label=""main.loopManualVirtual""];\r\n""main.(*data).checkManualVirtual"" [color=black, style=solid, label=""main.(*data).checkManualVirtual""];\r\n""runtime/pprof.StartCPUProfile"" [color=black, style=solid, label=""runtime/pprof.StartCPUProfile""];\r\n""flag.Int"" [color=black, style=solid, label=""flag.Int,inl_cost=63""];\r\n""main.loopStatic"" [color=black, style=solid, label=""main.loopStatic""];\r\n""time.Now"" [color=black, style=solid, label=""time.Now""];\r\n""fmt.Println"" [color=black, style=solid, label=""fmt.Println,inl_cost=72""];\r\n""runtime/pprof.StopCPUProfile"" [color=black, style=solid, label=""runtime/pprof.StopCPUProfile""];\r\n""main.init"" [color=black, style=solid, label=""main.init""];\r\nedge [color=black, style=dashed];\r\n""main.(*data).checkVirtual"" -> ""runtime.asyncPreempt"" [label=""0.26""];\r\nedge [color=red, style=solid];\r\n""main.(*data).checkVirtual"" -> ""main.(*c1).check"" [label=""5.24""];\r\nedge [color=black, style=solid];\r\n""main.(*data).checkManualVirtual"" -> ""main.(*c1).check"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.loopStatic"" -> ""main.(*data).checkStatic"" [label=""4.97""];\r\nedge [color=red, style=solid];\r\n""main.loopVirtual"" -> ""main.(*data).checkVirtual"" [label=""23.56""];\r\nedge [color=red, style=solid];\r\n""main.loopManualVirtual"" -> ""main.(*data).checkManualVirtual"" [label=""21.73""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""main.(*c2).check"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""flag.Parse"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""os.Create"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""main.(*c1).check"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopManualVirtual"" [label=""7.85""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Println"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""runtime/pprof.StartCPUProfile"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopVirtual"" [label=""29.06""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""runtime/pprof.StopCPUProfile"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopStatic"" [label=""7.33""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Int"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Int"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Bool"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.String"" [label=""0.00""];\r\n}\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkStatic\r\n./main.go:20:6: can inline (*data).checkStatic with cost 4 as: method(*data) func() int { return len(d.data) }\r\nhot-node enabled increased budget=2000 for func=main.(*c1).check\r\n./main.go:39:6: can inline (*c1).check with cost 3 as: method(*c1) func([]byte) int { return len(bytes) }\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkVirtual\r\n./main.go:24:6: can inline (*data).checkVirtual with cost 89 as: method(*data) func() int { return .autotmp_2 }\r\n./main.go:25:24: inlining call to (*c1).check\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkManualVirtual\r\n./main.go:28:6: can inline (*data).checkManualVirtual with cost 88 as: method(*data) func() int { c1, ok := (*c1)(.autotmp_4), .autotmp_5; if ok { return (*c1).check(c1, d.data) }; return d.checker.check(d.data) }\r\n./main.go:31:18: inlining call to (*c1).check\r\n./main.go:46:6: can inline (*c2).check with cost 3 as: method(*c2) func([]byte) int { return len(bytes) }\r\n./main.go:58:6: cannot inline loopStatic: marked go:noinline\r\n./main.go:60:29: inlining call to (*data).checkStatic\r\n./main.go:65:6: cannot inline loopVirtual: marked go:noinline\r\nhot-budget check allows inlining for call main.(*data).checkVirtual (cost 89) at ./main.go:67:30 in function main.loopVirtual\r\n./main.go:67:30: inlining call to (*data).checkVirtual\r\n./main.go:72:6: cannot inline loopManualVirtual: marked go:noinline\r\nhot-budget check allows inlining for call main.(*data).checkManualVirtual (cost 88) at ./main.go:74:36 in function main.loopManualVirtual\r\n./main.go:74:36: inlining call to (*data).checkManualVirtual\r\n./main.go:74:36: inlining call to (*c1).check\r\n./main.go:78:6: cannot inline main: unhandled op DEFER\r\n./main.go:79:12: inlining call to flag.Parse\r\n./main.go:81:21: inlining call to os.Create\r\n./main.go:92:28: inlining call to (*c1).check\r\n./main.go:93:28: inlining call to (*c2).check\r\n./main.go:102:12: inlining call to fmt.Printf\r\n./main.go:103:12: inlining call to fmt.Printf\r\n./main.go:104:12: inlining call to fmt.Printf\r\n./main.go:105:13: inlining call to fmt.Println\r\n./main.go:50:18: inlining call to flag.Int\r\n./main.go:51:17: inlining call to flag.Int\r\n./main.go:52:20: inlining call to flag.Bool\r\n./main.go:53:26: inlining call to flag.String\r\n./main.go:20:7: d does not escape\r\n./main.go:24:7: parameter d leaks to {heap} with derefs=1:\r\n./main.go:24:7:   flow: {heap} = *d:\r\n./main.go:24:7:     from d.checker (dot of pointer) at ./main.go:25:10\r\n./main.go:24:7:     from d.checker.check(.autotmp_4) (call parameter) at ./main.go:25:24\r\n./main.go:24:7: leaking param content: d\r\n./main.go:28:7: parameter d leaks to {heap} with derefs=1:\r\n./main.go:28:7:   flow: {heap} = *d:\r\n./main.go:28:7:     from d.checker (dot of pointer) at ./main.go:33:10\r\n./main.go:28:7:     from d.checker.check(d.data) (call parameter) at ./main.go:33:24\r\n./main.go:28:7: leaking param content: d\r\n./main.go:39:7: c does not escape\r\n./main.go:39:20: bytes does not escape\r\n./main.go:46:7: c does not escape\r\n./main.go:46:20: bytes does not escape\r\n./main.go:58:17: d does not escape\r\n./main.go:65:18: parameter d leaks to {heap} with derefs=1:\r\n./main.go:65:18:   flow: d = d:\r\n./main.go:65:18:     from d := d (assign-pair) at ./main.go:67:30\r\n./main.go:65:18:   flow: {heap} = *d:\r\n./main.go:65:18:     from d.checker (dot of pointer) at ./main.go:67:30\r\n./main.go:65:18:     from d.checker.check(d.data) (call parameter) at ./main.go:67:30\r\n./main.go:65:18: leaking param content: d\r\n./main.go:72:24: parameter d leaks to {heap} with derefs=1:\r\n./main.go:72:24:   flow: d = d:\r\n./main.go:72:24:     from d := d (assign-pair) at ./main.go:74:36\r\n./main.go:72:24:   flow: {heap} = *d:\r\n./main.go:72:24:     from d.checker (dot of pointer) at ./main.go:74:36\r\n./main.go:72:24:     from d.checker.check(d.data) (call parameter) at ./main.go:74:36\r\n./main.go:72:24: leaking param content: d\r\n./main.go:86:15: make([]byte, *sz) escapes to heap:\r\n./main.go:86:15:   flow: {heap} = &{storage for make([]byte, *sz)}:\r\n./main.go:86:15:     from make([]byte, *sz) (spill) at ./main.go:86:15\r\n./main.go:86:15:     from d.data = make([]byte, *sz) (assign) at ./main.go:86:9\r\n./main.go:88:18: new(c1) escapes to heap:\r\n./main.go:88:18:   flow: {heap} = &{storage for new(c1)}:\r\n./main.go:88:18:     from new(c1) (spill) at ./main.go:88:18\r\n./main.go:88:18:     from new(c1) (interface-converted) at ./main.go:88:18\r\n./main.go:88:18:     from d.checker = new(c1) (assign) at ./main.go:88:13\r\n./main.go:90:18: new(c2) escapes to heap:\r\n./main.go:90:18:   flow: {heap} = &{storage for new(c2)}:\r\n./main.go:90:18:     from new(c2) (spill) at ./main.go:90:18\r\n./main.go:90:18:     from new(c2) (interface-converted) at ./main.go:90:18\r\n./main.go:90:18:     from d.checker = new(c2) (assign) at ./main.go:90:13\r\n./main.go:86:15: make([]byte, *sz) escapes to heap:\r\n./main.go:86:15:   flow: {heap} = &{storage for make([]byte, *sz)}:\r\n./main.go:86:15:     from make([]byte, *sz) (non-constant size) at ./main.go:86:15\r\n./main.go:105:14: blackHole escapes to heap:\r\n./main.go:105:14:   flow: {storage for ... argument} = &{storage for blackHole}:\r\n./main.go:105:14:     from blackHole (spill) at ./main.go:105:14\r\n./main.go:105:14:     from ... argument (slice-literal-element) at ./main.go:105:13\r\n./main.go:105:14:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:105:14:     from ... argument (spill) at ./main.go:105:13\r\n./main.go:105:14:     from fmt.a := ... argument (assign-pair) at ./main.go:105:13\r\n./main.go:105:14:   flow: {heap} = *fmt.a:\r\n./main.go:105:14:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at ./main.go:105:13\r\n./main.go:104:43: time.Time.Sub(t4, t3) escapes to heap:\r\n./main.go:104:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t4, t3)}:\r\n./main.go:104:43:     from time.Time.Sub(t4, t3) (spill) at ./main.go:104:43\r\n./main.go:104:43:     from ... argument (slice-literal-element) at ./main.go:104:12\r\n./main.go:104:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:104:43:     from ... argument (spill) at ./main.go:104:12\r\n./main.go:104:43:     from fmt.format, fmt.a := ""static         %+v\\n"", ... argument (assign-pair) at ./main.go:104:12\r\n./main.go:104:43:   flow: {heap} = *fmt.a:\r\n./main.go:104:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:104:12\r\n./main.go:103:43: time.Time.Sub(t3, t2) escapes to heap:\r\n./main.go:103:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t3, t2)}:\r\n./main.go:103:43:     from time.Time.Sub(t3, t2) (spill) at ./main.go:103:43\r\n./main.go:103:43:     from ... argument (slice-literal-element) at ./main.go:103:12\r\n./main.go:103:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:103:43:     from ... argument (spill) at ./main.go:103:12\r\n./main.go:103:43:     from fmt.format, fmt.a := ""manualVirtual  %+v\\n"", ... argument (assign-pair) at ./main.go:103:12\r\n./main.go:103:43:   flow: {heap} = *fmt.a:\r\n./main.go:103:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:103:12\r\n./main.go:102:43: time.Time.Sub(t2, t1) escapes to heap:\r\n./main.go:102:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t2, t1)}:\r\n./main.go:102:43:     from time.Time.Sub(t2, t1) (spill) at ./main.go:102:43\r\n./main.go:102:43:     from ... argument (slice-literal-element) at ./main.go:102:12\r\n./main.go:102:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:102:43:     from ... argument (spill) at ./main.go:102:12\r\n./main.go:102:43:     from fmt.format, fmt.a := ""virtual        %+v\\n"", ... argument (assign-pair) at ./main.go:102:12\r\n./main.go:102:43:   flow: {heap} = *fmt.a:\r\n./main.go:102:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:102:12\r\n./main.go:85:13: new(data) does not escape\r\n./main.go:86:15: make([]byte, *sz) escapes to heap\r\n./main.go:88:18: new(c1) escapes to heap\r\n./main.go:90:18: new(c2) escapes to heap\r\n./main.go:92:18: new(c1) does not escape\r\n./main.go:93:18: new(c2) does not escape\r\n./main.go:102:12: ... argument does not escape\r\n./main.go:102:43: time.Time.Sub(t2, t1) escapes to heap\r\n./main.go:103:12: ... argument does not escape\r\n./main.go:103:43: time.Time.Sub(t3, t2) escapes to heap\r\n./main.go:104:12: ... argument does not escape\r\n./main.go:104:43: time.Time.Sub(t4, t3) escapes to heap\r\n./main.go:105:13: ... argument does not escape\r\n./main.go:105:14: blackHole escapes to heap\r\n./main.go:12:8: parameter .anon0 leaks to {heap} with derefs=0:\r\n./main.go:12:8:   flow: {heap} = .anon0:\r\n./main.go:12:8:     from .this.check(.anon0) (call parameter) at <autogenerated>:1\r\n<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:\r\n<autogenerated>:1:   flow: {heap} = .this:\r\n<autogenerated>:1:     from .this.check(.anon0) (call parameter) at <autogenerated>:1\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details><summary><code>go tool objdump -s '^main' pgo</code></summary>\r\n\r\n```\r\ngo tool objdump -s '^main' pgo\r\nTEXT main.(*c1).check(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:39            0x4ab940                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:40            0x4ab945                4889c8                  MOVQ CX, AX\r\n  main.go:40            0x4ab948                c3                      RET\r\n\r\nTEXT main.(*c2).check(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:46            0x4ab960                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:47            0x4ab965                4889c8                  MOVQ CX, AX\r\n  main.go:47            0x4ab968                c3                      RET\r\n\r\nTEXT main.loopStatic(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:59            0x4ab980                eb15                    JMP 0x4ab997\r\n  main.go:60            0x4ab982                488b0dffff0f00          MOVQ main.blackHole(SB), CX\r\n  main.go:21            0x4ab989                48034808                ADDQ 0x8(AX), CX\r\n  main.go:59            0x4ab98d                48ffcb                  DECQ BX\r\n  main.go:60            0x4ab990                48890df1ff0f00          MOVQ CX, main.blackHole(SB)\r\n  main.go:59            0x4ab997                4885db                  TESTQ BX, BX\r\n  main.go:59            0x4ab99a                7fe6                    JG 0x4ab982\r\n  main.go:62            0x4ab99c                c3                      RET\r\n\r\nTEXT main.loopVirtual(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:65            0x4ab9a0                493b6610                CMPQ SP, 0x10(R14)\r\n  main.go:65            0x4ab9a4                7653                    JBE 0x4ab9f9\r\n  main.go:65            0x4ab9a6                55                      PUSHQ BP\r\n  main.go:65            0x4ab9a7                4889e5                  MOVQ SP, BP\r\n  main.go:65            0x4ab9aa                4883ec28                SUBQ $0x28, SP\r\n  main.go:65            0x4ab9ae                4889442438              MOVQ AX, 0x38(SP)\r\n  main.go:66            0x4ab9b3                eb39                    JMP 0x4ab9ee\r\n  main.go:25            0x4ab9b5                488b5018                MOVQ 0x18(AX), DX\r\n  main.go:25            0x4ab9b9                488b7020                MOVQ 0x20(AX), SI\r\n  main.go:25            0x4ab9bd                488b5218                MOVQ 0x18(DX), DX\r\n  main.go:25            0x4ab9c1                4c8b00                  MOVQ 0(AX), R8\r\n  main.go:25            0x4ab9c4                488b4808                MOVQ 0x8(AX), CX\r\n  main.go:25            0x4ab9c8                488b7810                MOVQ 0x10(AX), DI\r\n  main.go:66            0x4ab9cc                4c8d4bff                LEAQ -0x1(BX), R9\r\n  main.go:66            0x4ab9d0                4c894c2420              MOVQ R9, 0x20(SP)\r\n  main.go:25            0x4ab9d5                4c89c3                  MOVQ R8, BX\r\n  main.go:25            0x4ab9d8                4889f0                  MOVQ SI, AX\r\n  main.go:25            0x4ab9db                ffd2                    CALL DX\r\n  main.go:67            0x4ab9dd                480105a4ff0f00          ADDQ AX, main.blackHole(SB)\r\n  main.go:25            0x4ab9e4                488b442438              MOVQ 0x38(SP), AX\r\n  main.go:66            0x4ab9e9                488b5c2420              MOVQ 0x20(SP), BX\r\n  main.go:66            0x4ab9ee                4885db                  TESTQ BX, BX\r\n  main.go:66            0x4ab9f1                7fc2                    JG 0x4ab9b5\r\n  main.go:69            0x4ab9f3                4883c428                ADDQ $0x28, SP\r\n  main.go:69            0x4ab9f7                5d                      POPQ BP\r\n  main.go:69            0x4ab9f8                c3                      RET\r\n  main.go:65            0x4ab9f9                4889442408              MOVQ AX, 0x8(SP)\r\n  main.go:65            0x4ab9fe                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:65            0x4aba03                e87824fbff              CALL runtime.morestack_noctxt.abi0(SB)\r\n  main.go:65            0x4aba08                488b442408              MOVQ 0x8(SP), AX\r\n  main.go:65            0x4aba0d                488b5c2410              MOVQ 0x10(SP), BX\r\n  main.go:65            0x4aba12                eb8c                    JMP main.loopVirtual(SB)\r\n\r\nTEXT main.loopManualVirtual(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:72            0x4aba20                493b6610                CMPQ SP, 0x10(R14)\r\n  main.go:72            0x4aba24                766e                    JBE 0x4aba94\r\n  main.go:72            0x4aba26                55                      PUSHQ BP\r\n  main.go:72            0x4aba27                4889e5                  MOVQ SP, BP\r\n  main.go:72            0x4aba2a                4883ec28                SUBQ $0x28, SP\r\n  main.go:72            0x4aba2e                4889442438              MOVQ AX, 0x38(SP)\r\n  main.go:73            0x4aba33                eb0b                    JMP 0x4aba40\r\n  main.go:74            0x4aba35                4801154cff0f00          ADDQ DX, main.blackHole(SB)\r\n  main.go:73            0x4aba3c                48ffcb                  DECQ BX\r\n  main.go:73            0x4aba3f                90                      NOPL\r\n  main.go:73            0x4aba40                4885db                  TESTQ BX, BX\r\n  main.go:73            0x4aba43                7e49                    JLE 0x4aba8e\r\n  main.go:29            0x4aba45                488b5018                MOVQ 0x18(AX), DX\r\n  main.go:29            0x4aba49                488d35587d0400          LEAQ go:itab.*main.c1,main.checker(SB), SI\r\n  main.go:29            0x4aba50                4839f2                  CMPQ DX, SI\r\n  main.go:29            0x4aba53                7506                    JNE 0x4aba5b\r\n  main.go:31            0x4aba55                488b5008                MOVQ 0x8(AX), DX\r\n  main.go:74            0x4aba59                ebda                    JMP 0x4aba35\r\n  main.go:73            0x4aba5b                48895c2420              MOVQ BX, 0x20(SP)\r\n  main.go:29            0x4aba60                488b7020                MOVQ 0x20(AX), SI\r\n  main.go:33            0x4aba64                488b5218                MOVQ 0x18(DX), DX\r\n  main.go:33            0x4aba68                488b18                  MOVQ 0(AX), BX\r\n  main.go:33            0x4aba6b                488b4808                MOVQ 0x8(AX), CX\r\n  main.go:33            0x4aba6f                488b7810                MOVQ 0x10(AX), DI\r\n  main.go:33            0x4aba73                4889f0                  MOVQ SI, AX\r\n  main.go:33            0x4aba76                ffd2                    CALL DX\r\n  main.go:73            0x4aba78                488b5c2420              MOVQ 0x20(SP), BX\r\n  main.go:73            0x4aba7d                488d35247d0400          LEAQ go:itab.*main.c1,main.checker(SB), SI\r\n  main.go:74            0x4aba84                4889c2                  MOVQ AX, DX\r\n  main.go:29            0x4aba87                488b442438              MOVQ 0x38(SP), AX\r\n  main.go:74            0x4aba8c                eba7                    JMP 0x4aba35\r\n  main.go:76            0x4aba8e                4883c428                ADDQ $0x28, SP\r\n  main.go:76            0x4aba92                5d                      POPQ BP\r\n  main.go:76            0x4aba93                c3                      RET\r\n  main.go:72            0x4aba94                4889442408              MOVQ AX, 0x8(SP)\r\n  main.go:72            0x4aba99                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:72            0x4aba9e                6690                    NOPW\r\n  main.go:72            0x4abaa0                e8db23fbff              CALL runtime.morestack_noctxt.abi0(SB)\r\n  main.go:72            0x4abaa5                488b442408              MOVQ 0x8(SP), AX\r\n  main.go:72            0x4abaaa                488b5c2410              MOVQ 0x10(SP), BX\r\n  main.go:72            0x4abaaf                e96cffffff              JMP main.loopManualVirtual(SB)\r\n\r\n```\r\n\r\n</details>\r\n\r\n### What did you expect to see?\r\nDebug compiler output says\r\n```\r\n./main.go:25:24: PGO devirtualizing d.checker.check to (*c1).check\r\n```\r\nIn the objdump of `main.loopVirtual` I expected to see an itab check and conditional direct call (and maybe inlined function body instead of direct method call).\r\n\r\n### What did you see instead?\r\n\r\nIn the objdump of `main.loopVirtual` I  see an unconditional indirect call via DX register\r\n",NeedsInvestigation|compiler/runtime,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.22-081d27a2e5 Wed Aug 23 15:49:39 2023 +0000 linux/amd64\r\ngo version go1.21.0 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/korniltsev/.cache/go-build'\r\nGOENV='/home/korniltsev/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/korniltsev/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/korniltsev/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/korniltsev/github/go-linux-amd64-bootstrap'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/korniltsev/github/go-linux-amd64-bootstrap/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.22-081d27a2e5 Wed Aug 23 15:49:39 2023 +0000'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/home/korniltsev/pyro/pgo/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build943153879=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n\t""fmt""\r\n\t""os""\r\n\t""runtime/pprof""\r\n\t""time""\r\n)\r\n\r\ntype checker interface {\r\n\tcheck([]byte) int\r\n}\r\n\r\ntype data struct {\r\n\tdata    []byte\r\n\tchecker checker\r\n}\r\n\r\nfunc (d *data) checkStatic() int {\r\n\treturn len(d.data)\r\n}\r\n\r\nfunc (d *data) checkVirtual() int {\r\n\treturn d.checker.check(d.data)\r\n}\r\n\r\nfunc (d *data) checkManualVirtual() int {\r\n\tc1, ok := d.checker.(*c1)\r\n\tif ok {\r\n\t\treturn c1.check(d.data)\r\n\t}\r\n\treturn d.checker.check(d.data)\r\n}\r\n\r\ntype c1 struct {\r\n}\r\n\r\nfunc (c *c1) check(bytes []byte) int {\r\n\treturn len(bytes)\r\n}\r\n\r\ntype c2 struct {\r\n}\r\n\r\nfunc (c *c2) check(bytes []byte) int {\r\n\treturn len(bytes)\r\n}\r\n\r\nvar sz = flag.Int(""sz"", 0x100, """")\r\nvar n = flag.Int(""n"", 1000000000, """")\r\nvar typ = flag.Bool(""typ"", true, """")\r\nvar profile = flag.String(""profile"", """", """")\r\n\r\nvar blackHole = 0\r\n\r\n//go:noinline\r\nfunc loopStatic(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkStatic()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc loopVirtual(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkVirtual()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc loopManualVirtual(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkManualVirtual()\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tif *profile != """" {\r\n\t\tfd, _ := os.Create(*profile)\r\n\t\tpprof.StartCPUProfile(fd)\r\n\t\tdefer pprof.StopCPUProfile()\r\n\t}\r\n\tvar d = new(data)\r\n\td.data = make([]byte, *sz)\r\n\tif *typ {\r\n\t\td.checker = new(c1)\r\n\t} else {\r\n\t\td.checker = new(c2)\r\n\t}\r\n\tblackHole += new(c1).check(d.data)\r\n\tblackHole += new(c2).check(d.data)\r\n\tn := *n\r\n\tt1 := time.Now()\r\n\tloopVirtual(d, n)\r\n\tt2 := time.Now()\r\n\tloopManualVirtual(d, n)\r\n\tt3 := time.Now()\r\n\tloopStatic(d, n)\r\n\tt4 := time.Now()\r\n\tfmt.Printf(""virtual        %+v\\n"", t2.Sub(t1))\r\n\tfmt.Printf(""manualVirtual  %+v\\n"", t3.Sub(t2))\r\n\tfmt.Printf(""static         %+v\\n"", t4.Sub(t3))\r\n\tfmt.Println(blackHole)\r\n}\r\n\r\n```\r\n\r\n```bash\r\n# collect profile\r\n/home/korniltsev/github/go-linux-amd64-bootstrap/bin/go build -o nopgo main.go\r\n./nopgo -profile=profile.pgo\r\n# recompile with pgo\r\n/home/korniltsev/github/go-linux-amd64-bootstrap/bin/go build -pgo=profile.pgo -gcflags '-m=2 -d=pgodebug=3' -o pgo main.go\r\n./pgo\r\n```\r\n\r\n<details><summary>debug compiler output</summary>\r\n\r\n```\r\n\r\n\r\n# command-line-arguments\r\n./main.go:25:24: PGO devirtualize considering call d.checker.check(d.data)\r\n./main.go:25:24: edge main.(*data).checkVirtual:1 -> main.(*c1).check (weight 20): hottest so far\r\n./main.go:25:24: edge main.(*data).checkVirtual:1 -> runtime.asyncPreempt (weight 1): too cold (hottest 20)\r\n./main.go:25:24 call main.(*data).checkVirtual:1: hottest callee main.(*c1).check (weight 20)\r\n./main.go:25:24: PGO devirtualizing d.checker.check to (*c1).check\r\nPGO devirtualizing call to PTR-*c1. After: \r\n.   INLCALL int tc(1) # main.go:25:24\r\n.   INLCALL-Body\r\n.   .   IF-init\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_3 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used main.checker tc(1) # main.go:50:5\r\n.   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   DOTPTR main.checker main.checker tc(1) # main.go:25:10\r\n.   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   .   DOTPTR main.data SLICE-[]byte tc(1) # main.go:25:26\r\n.   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   AS2DOTTYPE tc(1) # main.go:25:24\r\n.   .   .   AS2DOTTYPE-Lhs\r\n.   .   .   .   NAME-main..autotmp_5 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used PTR-*c1 tc(1) # main.go:50:5\r\n.   .   .   .   NAME-main..autotmp_6 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used bool tc(1) # main.go:50:5\r\n.   .   .   AS2DOTTYPE-Rhs\r\n.   .   .   .   DOTTYPE2 PTR-*c1 tc(1) # main.go:25:24\r\n.   .   .   .   .   NAME-main..autotmp_3 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used main.checker tc(1) # main.go:50:5\r\n.   .   IF Likely tc(1) # main.go:25:24\r\n.   .   IF-Cond\r\n.   .   .   NAME-main..autotmp_6 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used bool tc(1) # main.go:50:5\r\n.   .   IF-Body\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   CALLFUNC int tc(1) # main.go:25:24\r\n.   .   .   .   .   METHEXPR main.check FUNC-func(*c1, []byte) int tc(1) # main.go:25:24\r\n.   .   .   .   .   .   TYPE <S> type PTR-*c1 tc(1)\r\n.   .   .   .   CALLFUNC-Args\r\n.   .   .   .   .   NAME-main..autotmp_5 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used PTR-*c1 tc(1) # main.go:50:5\r\n.   .   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   .   IF-Else\r\n.   .   .   AS2 tc(1) # main.go:25:24\r\n.   .   .   AS2-Lhs\r\n.   .   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n.   .   .   AS2-Rhs\r\n.   .   .   .   CALLINTER int tc(1) # main.go:25:24\r\n.   .   .   .   .   DOTINTER main.check FUNC-method(*struct {}) func([]byte) int tc(1) # main.go:25:18\r\n.   .   .   .   .   .   DOTPTR main.checker main.checker tc(1) # main.go:25:10\r\n.   .   .   .   .   .   .   NAME-main.d Class:PPARAM Offset:0 OnStack Used PTR-*data tc(1) # main.go:24:7\r\n.   .   .   .   CALLINTER-Args\r\n.   .   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used SLICE-[]byte tc(1) # main.go:50:5\r\n.   INLCALL-ReturnVars\r\n.   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:50:5\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:25:24"",""Caller"":""main.(*data).checkVirtual"",""Direct"":false,""Interface"":true,""Weight"":21,""Hottest"":""main.(*c1).check"",""HottestWeight"":20,""Devirtualized"":""main.(*c1).check"",""DevirtualizedWeight"":20}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:31:18"",""Caller"":""main.(*data).checkManualVirtual"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c1).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n./main.go:33:24: PGO devirtualize considering call d.checker.check(d.data)\r\n./main.go:33:24: call main.(*data).checkManualVirtual:5: no hot callee\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:33:24"",""Caller"":""main.(*data).checkManualVirtual"",""Direct"":false,""Interface"":true,""Weight"":0,""Hottest"":"""",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:60:29"",""Caller"":""main.loopStatic"",""Direct"":true,""Interface"":false,""Weight"":19,""Hottest"":""main.(*data).checkStatic"",""HottestWeight"":19,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:67:30"",""Caller"":""main.loopVirtual"",""Direct"":true,""Interface"":false,""Weight"":90,""Hottest"":""main.(*data).checkVirtual"",""HottestWeight"":90,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:74:36"",""Caller"":""main.loopManualVirtual"",""Direct"":true,""Interface"":false,""Weight"":83,""Hottest"":""main.(*data).checkManualVirtual"",""HottestWeight"":83,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:79:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Parse"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:81:21"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""os.Create"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:82:24"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""runtime/pprof.StartCPUProfile"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:83:29"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""runtime/pprof.StopCPUProfile"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:92:28"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c1).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:93:28"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""main.(*c2).check"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:95:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:96:13"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":111,""Hottest"":""main.loopVirtual"",""HottestWeight"":111,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:97:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:98:19"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":30,""Hottest"":""main.loopManualVirtual"",""HottestWeight"":30,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:99:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:100:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":28,""Hottest"":""main.loopStatic"",""HottestWeight"":28,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:101:16"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Now"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:102:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:102:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:103:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:103:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:104:43"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""time.Time.Sub"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:104:12"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Printf"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:105:13"",""Caller"":""main.main"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""fmt.Println"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:50:18"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Int"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:51:17"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Int"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:52:20"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.Bool"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\n{""Pkg"":""main"",""Pos"":""/home/korniltsev/pyro/pgo/main.go:53:26"",""Caller"":""main.init"",""Direct"":true,""Interface"":false,""Weight"":0,""Hottest"":""flag.String"",""HottestWeight"":0,""Devirtualized"":"""",""DevirtualizedWeight"":0}\r\nhot-callsite-thres-from-CDF=4.973821989528796\r\nhot-cg before inline in dot format:\r\ndigraph G {\r\nforcelabels=true;\r\n""main.(*c1).check"" [color=black, style=solid, label=""main.(*c1).check""];\r\n""main.loopVirtual"" [color=black, style=solid, label=""main.loopVirtual""];\r\n""flag.Parse"" [color=black, style=solid, label=""flag.Parse,inl_cost=62""];\r\n""flag.Bool"" [color=black, style=solid, label=""flag.Bool,inl_cost=63""];\r\n""main.(*data).checkVirtual"" [color=black, style=solid, label=""main.(*data).checkVirtual""];\r\n""main.(*data).checkStatic"" [color=black, style=solid, label=""main.(*data).checkStatic""];\r\n""main.(*c2).check"" [color=black, style=solid, label=""main.(*c2).check""];\r\n""main.main"" [color=black, style=solid, label=""main.main""];\r\n""time.Time.Sub"" [color=black, style=solid, label=""time.Time.Sub""];\r\n""fmt.Printf"" [color=black, style=solid, label=""fmt.Printf,inl_cost=73""];\r\n""os.Create"" [color=black, style=solid, label=""os.Create,inl_cost=72""];\r\n""flag.String"" [color=black, style=solid, label=""flag.String,inl_cost=63""];\r\n""runtime.asyncPreempt"" [color=black, style=dashed, label=""runtime.asyncPreempt""];\r\n""main.loopManualVirtual"" [color=black, style=solid, label=""main.loopManualVirtual""];\r\n""main.(*data).checkManualVirtual"" [color=black, style=solid, label=""main.(*data).checkManualVirtual""];\r\n""runtime/pprof.StartCPUProfile"" [color=black, style=solid, label=""runtime/pprof.StartCPUProfile""];\r\n""flag.Int"" [color=black, style=solid, label=""flag.Int,inl_cost=63""];\r\n""main.loopStatic"" [color=black, style=solid, label=""main.loopStatic""];\r\n""time.Now"" [color=black, style=solid, label=""time.Now""];\r\n""fmt.Println"" [color=black, style=solid, label=""fmt.Println,inl_cost=72""];\r\n""runtime/pprof.StopCPUProfile"" [color=black, style=solid, label=""runtime/pprof.StopCPUProfile""];\r\n""main.init"" [color=black, style=solid, label=""main.init""];\r\nedge [color=black, style=dashed];\r\n""main.(*data).checkVirtual"" -> ""runtime.asyncPreempt"" [label=""0.26""];\r\nedge [color=red, style=solid];\r\n""main.(*data).checkVirtual"" -> ""main.(*c1).check"" [label=""5.24""];\r\nedge [color=black, style=solid];\r\n""main.(*data).checkManualVirtual"" -> ""main.(*c1).check"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.loopStatic"" -> ""main.(*data).checkStatic"" [label=""4.97""];\r\nedge [color=red, style=solid];\r\n""main.loopVirtual"" -> ""main.(*data).checkVirtual"" [label=""23.56""];\r\nedge [color=red, style=solid];\r\n""main.loopManualVirtual"" -> ""main.(*data).checkManualVirtual"" [label=""21.73""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""main.(*c2).check"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Printf"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""flag.Parse"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""os.Create"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""main.(*c1).check"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopManualVirtual"" [label=""7.85""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""fmt.Println"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""runtime/pprof.StartCPUProfile"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Now"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopVirtual"" [label=""29.06""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""runtime/pprof.StopCPUProfile"" [label=""0.00""];\r\nedge [color=red, style=solid];\r\n""main.main"" -> ""main.loopStatic"" [label=""7.33""];\r\nedge [color=black, style=solid];\r\n""main.main"" -> ""time.Time.Sub"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Int"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Int"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.Bool"" [label=""0.00""];\r\nedge [color=black, style=solid];\r\n""main.init"" -> ""flag.String"" [label=""0.00""];\r\n}\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkStatic\r\n./main.go:20:6: can inline (*data).checkStatic with cost 4 as: method(*data) func() int { return len(d.data) }\r\nhot-node enabled increased budget=2000 for func=main.(*c1).check\r\n./main.go:39:6: can inline (*c1).check with cost 3 as: method(*c1) func([]byte) int { return len(bytes) }\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkVirtual\r\n./main.go:24:6: can inline (*data).checkVirtual with cost 89 as: method(*data) func() int { return .autotmp_2 }\r\n./main.go:25:24: inlining call to (*c1).check\r\nhot-node enabled increased budget=2000 for func=main.(*data).checkManualVirtual\r\n./main.go:28:6: can inline (*data).checkManualVirtual with cost 88 as: method(*data) func() int { c1, ok := (*c1)(.autotmp_4), .autotmp_5; if ok { return (*c1).check(c1, d.data) }; return d.checker.check(d.data) }\r\n./main.go:31:18: inlining call to (*c1).check\r\n./main.go:46:6: can inline (*c2).check with cost 3 as: method(*c2) func([]byte) int { return len(bytes) }\r\n./main.go:58:6: cannot inline loopStatic: marked go:noinline\r\n./main.go:60:29: inlining call to (*data).checkStatic\r\n./main.go:65:6: cannot inline loopVirtual: marked go:noinline\r\nhot-budget check allows inlining for call main.(*data).checkVirtual (cost 89) at ./main.go:67:30 in function main.loopVirtual\r\n./main.go:67:30: inlining call to (*data).checkVirtual\r\n./main.go:72:6: cannot inline loopManualVirtual: marked go:noinline\r\nhot-budget check allows inlining for call main.(*data).checkManualVirtual (cost 88) at ./main.go:74:36 in function main.loopManualVirtual\r\n./main.go:74:36: inlining call to (*data).checkManualVirtual\r\n./main.go:74:36: inlining call to (*c1).check\r\n./main.go:78:6: cannot inline main: unhandled op DEFER\r\n./main.go:79:12: inlining call to flag.Parse\r\n./main.go:81:21: inlining call to os.Create\r\n./main.go:92:28: inlining call to (*c1).check\r\n./main.go:93:28: inlining call to (*c2).check\r\n./main.go:102:12: inlining call to fmt.Printf\r\n./main.go:103:12: inlining call to fmt.Printf\r\n./main.go:104:12: inlining call to fmt.Printf\r\n./main.go:105:13: inlining call to fmt.Println\r\n./main.go:50:18: inlining call to flag.Int\r\n./main.go:51:17: inlining call to flag.Int\r\n./main.go:52:20: inlining call to flag.Bool\r\n./main.go:53:26: inlining call to flag.String\r\n./main.go:20:7: d does not escape\r\n./main.go:24:7: parameter d leaks to {heap} with derefs=1:\r\n./main.go:24:7:   flow: {heap} = *d:\r\n./main.go:24:7:     from d.checker (dot of pointer) at ./main.go:25:10\r\n./main.go:24:7:     from d.checker.check(.autotmp_4) (call parameter) at ./main.go:25:24\r\n./main.go:24:7: leaking param content: d\r\n./main.go:28:7: parameter d leaks to {heap} with derefs=1:\r\n./main.go:28:7:   flow: {heap} = *d:\r\n./main.go:28:7:     from d.checker (dot of pointer) at ./main.go:33:10\r\n./main.go:28:7:     from d.checker.check(d.data) (call parameter) at ./main.go:33:24\r\n./main.go:28:7: leaking param content: d\r\n./main.go:39:7: c does not escape\r\n./main.go:39:20: bytes does not escape\r\n./main.go:46:7: c does not escape\r\n./main.go:46:20: bytes does not escape\r\n./main.go:58:17: d does not escape\r\n./main.go:65:18: parameter d leaks to {heap} with derefs=1:\r\n./main.go:65:18:   flow: d = d:\r\n./main.go:65:18:     from d := d (assign-pair) at ./main.go:67:30\r\n./main.go:65:18:   flow: {heap} = *d:\r\n./main.go:65:18:     from d.checker (dot of pointer) at ./main.go:67:30\r\n./main.go:65:18:     from d.checker.check(d.data) (call parameter) at ./main.go:67:30\r\n./main.go:65:18: leaking param content: d\r\n./main.go:72:24: parameter d leaks to {heap} with derefs=1:\r\n./main.go:72:24:   flow: d = d:\r\n./main.go:72:24:     from d := d (assign-pair) at ./main.go:74:36\r\n./main.go:72:24:   flow: {heap} = *d:\r\n./main.go:72:24:     from d.checker (dot of pointer) at ./main.go:74:36\r\n./main.go:72:24:     from d.checker.check(d.data) (call parameter) at ./main.go:74:36\r\n./main.go:72:24: leaking param content: d\r\n./main.go:86:15: make([]byte, *sz) escapes to heap:\r\n./main.go:86:15:   flow: {heap} = &{storage for make([]byte, *sz)}:\r\n./main.go:86:15:     from make([]byte, *sz) (spill) at ./main.go:86:15\r\n./main.go:86:15:     from d.data = make([]byte, *sz) (assign) at ./main.go:86:9\r\n./main.go:88:18: new(c1) escapes to heap:\r\n./main.go:88:18:   flow: {heap} = &{storage for new(c1)}:\r\n./main.go:88:18:     from new(c1) (spill) at ./main.go:88:18\r\n./main.go:88:18:     from new(c1) (interface-converted) at ./main.go:88:18\r\n./main.go:88:18:     from d.checker = new(c1) (assign) at ./main.go:88:13\r\n./main.go:90:18: new(c2) escapes to heap:\r\n./main.go:90:18:   flow: {heap} = &{storage for new(c2)}:\r\n./main.go:90:18:     from new(c2) (spill) at ./main.go:90:18\r\n./main.go:90:18:     from new(c2) (interface-converted) at ./main.go:90:18\r\n./main.go:90:18:     from d.checker = new(c2) (assign) at ./main.go:90:13\r\n./main.go:86:15: make([]byte, *sz) escapes to heap:\r\n./main.go:86:15:   flow: {heap} = &{storage for make([]byte, *sz)}:\r\n./main.go:86:15:     from make([]byte, *sz) (non-constant size) at ./main.go:86:15\r\n./main.go:105:14: blackHole escapes to heap:\r\n./main.go:105:14:   flow: {storage for ... argument} = &{storage for blackHole}:\r\n./main.go:105:14:     from blackHole (spill) at ./main.go:105:14\r\n./main.go:105:14:     from ... argument (slice-literal-element) at ./main.go:105:13\r\n./main.go:105:14:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:105:14:     from ... argument (spill) at ./main.go:105:13\r\n./main.go:105:14:     from fmt.a := ... argument (assign-pair) at ./main.go:105:13\r\n./main.go:105:14:   flow: {heap} = *fmt.a:\r\n./main.go:105:14:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at ./main.go:105:13\r\n./main.go:104:43: time.Time.Sub(t4, t3) escapes to heap:\r\n./main.go:104:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t4, t3)}:\r\n./main.go:104:43:     from time.Time.Sub(t4, t3) (spill) at ./main.go:104:43\r\n./main.go:104:43:     from ... argument (slice-literal-element) at ./main.go:104:12\r\n./main.go:104:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:104:43:     from ... argument (spill) at ./main.go:104:12\r\n./main.go:104:43:     from fmt.format, fmt.a := ""static         %+v\\n"", ... argument (assign-pair) at ./main.go:104:12\r\n./main.go:104:43:   flow: {heap} = *fmt.a:\r\n./main.go:104:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:104:12\r\n./main.go:103:43: time.Time.Sub(t3, t2) escapes to heap:\r\n./main.go:103:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t3, t2)}:\r\n./main.go:103:43:     from time.Time.Sub(t3, t2) (spill) at ./main.go:103:43\r\n./main.go:103:43:     from ... argument (slice-literal-element) at ./main.go:103:12\r\n./main.go:103:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:103:43:     from ... argument (spill) at ./main.go:103:12\r\n./main.go:103:43:     from fmt.format, fmt.a := ""manualVirtual  %+v\\n"", ... argument (assign-pair) at ./main.go:103:12\r\n./main.go:103:43:   flow: {heap} = *fmt.a:\r\n./main.go:103:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:103:12\r\n./main.go:102:43: time.Time.Sub(t2, t1) escapes to heap:\r\n./main.go:102:43:   flow: {storage for ... argument} = &{storage for time.Time.Sub(t2, t1)}:\r\n./main.go:102:43:     from time.Time.Sub(t2, t1) (spill) at ./main.go:102:43\r\n./main.go:102:43:     from ... argument (slice-literal-element) at ./main.go:102:12\r\n./main.go:102:43:   flow: fmt.a = &{storage for ... argument}:\r\n./main.go:102:43:     from ... argument (spill) at ./main.go:102:12\r\n./main.go:102:43:     from fmt.format, fmt.a := ""virtual        %+v\\n"", ... argument (assign-pair) at ./main.go:102:12\r\n./main.go:102:43:   flow: {heap} = *fmt.a:\r\n./main.go:102:43:     from fmt.Fprintf(os.Stdout, fmt.format, fmt.a...) (call parameter) at ./main.go:102:12\r\n./main.go:85:13: new(data) does not escape\r\n./main.go:86:15: make([]byte, *sz) escapes to heap\r\n./main.go:88:18: new(c1) escapes to heap\r\n./main.go:90:18: new(c2) escapes to heap\r\n./main.go:92:18: new(c1) does not escape\r\n./main.go:93:18: new(c2) does not escape\r\n./main.go:102:12: ... argument does not escape\r\n./main.go:102:43: time.Time.Sub(t2, t1) escapes to heap\r\n./main.go:103:12: ... argument does not escape\r\n./main.go:103:43: time.Time.Sub(t3, t2) escapes to heap\r\n./main.go:104:12: ... argument does not escape\r\n./main.go:104:43: time.Time.Sub(t4, t3) escapes to heap\r\n./main.go:105:13: ... argument does not escape\r\n./main.go:105:14: blackHole escapes to heap\r\n./main.go:12:8: parameter .anon0 leaks to {heap} with derefs=0:\r\n./main.go:12:8:   flow: {heap} = .anon0:\r\n./main.go:12:8:     from .this.check(.anon0) (call parameter) at <autogenerated>:1\r\n<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:\r\n<autogenerated>:1:   flow: {heap} = .this:\r\n<autogenerated>:1:     from .this.check(.anon0) (call parameter) at <autogenerated>:1\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details><summary><code>go tool objdump -s '^main' pgo</code></summary>\r\n\r\n```\r\ngo tool objdump -s '^main' pgo\r\nTEXT main.(*c1).check(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:39            0x4ab940                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:40            0x4ab945                4889c8                  MOVQ CX, AX\r\n  main.go:40            0x4ab948                c3                      RET\r\n\r\nTEXT main.(*c2).check(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:46            0x4ab960                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:47            0x4ab965                4889c8                  MOVQ CX, AX\r\n  main.go:47            0x4ab968                c3                      RET\r\n\r\nTEXT main.loopStatic(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:59            0x4ab980                eb15                    JMP 0x4ab997\r\n  main.go:60            0x4ab982                488b0dffff0f00          MOVQ main.blackHole(SB), CX\r\n  main.go:21            0x4ab989                48034808                ADDQ 0x8(AX), CX\r\n  main.go:59            0x4ab98d                48ffcb                  DECQ BX\r\n  main.go:60            0x4ab990                48890df1ff0f00          MOVQ CX, main.blackHole(SB)\r\n  main.go:59            0x4ab997                4885db                  TESTQ BX, BX\r\n  main.go:59            0x4ab99a                7fe6                    JG 0x4ab982\r\n  main.go:62            0x4ab99c                c3                      RET\r\n\r\nTEXT main.loopVirtual(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:65            0x4ab9a0                493b6610                CMPQ SP, 0x10(R14)\r\n  main.go:65            0x4ab9a4                7653                    JBE 0x4ab9f9\r\n  main.go:65            0x4ab9a6                55                      PUSHQ BP\r\n  main.go:65            0x4ab9a7                4889e5                  MOVQ SP, BP\r\n  main.go:65            0x4ab9aa                4883ec28                SUBQ $0x28, SP\r\n  main.go:65            0x4ab9ae                4889442438              MOVQ AX, 0x38(SP)\r\n  main.go:66            0x4ab9b3                eb39                    JMP 0x4ab9ee\r\n  main.go:25            0x4ab9b5                488b5018                MOVQ 0x18(AX), DX\r\n  main.go:25            0x4ab9b9                488b7020                MOVQ 0x20(AX), SI\r\n  main.go:25            0x4ab9bd                488b5218                MOVQ 0x18(DX), DX\r\n  main.go:25            0x4ab9c1                4c8b00                  MOVQ 0(AX), R8\r\n  main.go:25            0x4ab9c4                488b4808                MOVQ 0x8(AX), CX\r\n  main.go:25            0x4ab9c8                488b7810                MOVQ 0x10(AX), DI\r\n  main.go:66            0x4ab9cc                4c8d4bff                LEAQ -0x1(BX), R9\r\n  main.go:66            0x4ab9d0                4c894c2420              MOVQ R9, 0x20(SP)\r\n  main.go:25            0x4ab9d5                4c89c3                  MOVQ R8, BX\r\n  main.go:25            0x4ab9d8                4889f0                  MOVQ SI, AX\r\n  main.go:25            0x4ab9db                ffd2                    CALL DX\r\n  main.go:67            0x4ab9dd                480105a4ff0f00          ADDQ AX, main.blackHole(SB)\r\n  main.go:25            0x4ab9e4                488b442438              MOVQ 0x38(SP), AX\r\n  main.go:66            0x4ab9e9                488b5c2420              MOVQ 0x20(SP), BX\r\n  main.go:66            0x4ab9ee                4885db                  TESTQ BX, BX\r\n  main.go:66            0x4ab9f1                7fc2                    JG 0x4ab9b5\r\n  main.go:69            0x4ab9f3                4883c428                ADDQ $0x28, SP\r\n  main.go:69            0x4ab9f7                5d                      POPQ BP\r\n  main.go:69            0x4ab9f8                c3                      RET\r\n  main.go:65            0x4ab9f9                4889442408              MOVQ AX, 0x8(SP)\r\n  main.go:65            0x4ab9fe                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:65            0x4aba03                e87824fbff              CALL runtime.morestack_noctxt.abi0(SB)\r\n  main.go:65            0x4aba08                488b442408              MOVQ 0x8(SP), AX\r\n  main.go:65            0x4aba0d                488b5c2410              MOVQ 0x10(SP), BX\r\n  main.go:65            0x4aba12                eb8c                    JMP main.loopVirtual(SB)\r\n\r\nTEXT main.loopManualVirtual(SB) /home/korniltsev/pyro/pgo/main.go\r\n  main.go:72            0x4aba20                493b6610                CMPQ SP, 0x10(R14)\r\n  main.go:72            0x4aba24                766e                    JBE 0x4aba94\r\n  main.go:72            0x4aba26                55                      PUSHQ BP\r\n  main.go:72            0x4aba27                4889e5                  MOVQ SP, BP\r\n  main.go:72            0x4aba2a                4883ec28                SUBQ $0x28, SP\r\n  main.go:72            0x4aba2e                4889442438              MOVQ AX, 0x38(SP)\r\n  main.go:73            0x4aba33                eb0b                    JMP 0x4aba40\r\n  main.go:74            0x4aba35                4801154cff0f00          ADDQ DX, main.blackHole(SB)\r\n  main.go:73            0x4aba3c                48ffcb                  DECQ BX\r\n  main.go:73            0x4aba3f                90                      NOPL\r\n  main.go:73            0x4aba40                4885db                  TESTQ BX, BX\r\n  main.go:73            0x4aba43                7e49                    JLE 0x4aba8e\r\n  main.go:29            0x4aba45                488b5018                MOVQ 0x18(AX), DX\r\n  main.go:29            0x4aba49                488d35587d0400          LEAQ go:itab.*main.c1,main.checker(SB), SI\r\n  main.go:29            0x4aba50                4839f2                  CMPQ DX, SI\r\n  main.go:29            0x4aba53                7506                    JNE 0x4aba5b\r\n  main.go:31            0x4aba55                488b5008                MOVQ 0x8(AX), DX\r\n  main.go:74            0x4aba59                ebda                    JMP 0x4aba35\r\n  main.go:73            0x4aba5b                48895c2420              MOVQ BX, 0x20(SP)\r\n  main.go:29            0x4aba60                488b7020                MOVQ 0x20(AX), SI\r\n  main.go:33            0x4aba64                488b5218                MOVQ 0x18(DX), DX\r\n  main.go:33            0x4aba68                488b18                  MOVQ 0(AX), BX\r\n  main.go:33            0x4aba6b                488b4808                MOVQ 0x8(AX), CX\r\n  main.go:33            0x4aba6f                488b7810                MOVQ 0x10(AX), DI\r\n  main.go:33            0x4aba73                4889f0                  MOVQ SI, AX\r\n  main.go:33            0x4aba76                ffd2                    CALL DX\r\n  main.go:73            0x4aba78                488b5c2420              MOVQ 0x20(SP), BX\r\n  main.go:73            0x4aba7d                488d35247d0400          LEAQ go:itab.*main.c1,main.checker(SB), SI\r\n  main.go:74            0x4aba84                4889c2                  MOVQ AX, DX\r\n  main.go:29            0x4aba87                488b442438              MOVQ 0x38(SP), AX\r\n  main.go:74            0x4aba8c                eba7                    JMP 0x4aba35\r\n  main.go:76            0x4aba8e                4883c428                ADDQ $0x28, SP\r\n  main.go:76            0x4aba92                5d                      POPQ BP\r\n  main.go:76            0x4aba93                c3                      RET\r\n  main.go:72            0x4aba94                4889442408              MOVQ AX, 0x8(SP)\r\n  main.go:72            0x4aba99                48895c2410              MOVQ BX, 0x10(SP)\r\n  main.go:72            0x4aba9e                6690                    NOPW\r\n  main.go:72            0x4abaa0                e8db23fbff              CALL runtime.morestack_noctxt.abi0(SB)\r\n  main.go:72            0x4abaa5                488b442408              MOVQ 0x8(SP), AX\r\n  main.go:72            0x4abaaa                488b5c2410              MOVQ 0x10(SP), BX\r\n  main.go:72            0x4abaaf                e96cffffff              JMP main.loopManualVirtual(SB)\r\n\r\n```\r\n\r\n</details>\r\n\r\n### What did you expect to see?\r\nDebug compiler output says\r\n```\r\n./main.go:25:24: PGO devirtualizing d.checker.check to (*c1).check\r\n```\r\nIn the objdump of `main.loopVirtual` I expected to see an itab check and conditional direct call (and maybe inlined function body instead of direct method call).\r\n\r\n### What did you see instead?\r\n\r\nIn the objdump of `main.loopVirtual` I  see an unconditional indirect call via DX register\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n\t""fmt""\r\n\t""os""\r\n\t""runtime/pprof""\r\n\t""time""\r\n)\r\n\r\ntype checker interface {\r\n\tcheck([]byte) int\r\n}\r\n\r\ntype data struct {\r\n\tdata    []byte\r\n\tchecker checker\r\n}\r\n\r\nfunc (d *data) checkStatic() int {\r\n\treturn len(d.data)\r\n}\r\n\r\nfunc (d *data) checkVirtual() int {\r\n\treturn d.checker.check(d.data)\r\n}\r\n\r\nfunc (d *data) checkManualVirtual() int {\r\n\tc1, ok := d.checker.(*c1)\r\n\tif ok {\r\n\t\treturn c1.check(d.data)\r\n\t}\r\n\treturn d.checker.check(d.data)\r\n}\r\n\r\ntype c1 struct {\r\n}\r\n\r\nfunc (c *c1) check(bytes []byte) int {\r\n\treturn len(bytes)\r\n}\r\n\r\ntype c2 struct {\r\n}\r\n\r\nfunc (c *c2) check(bytes []byte) int {\r\n\treturn len(bytes)\r\n}\r\n\r\nvar sz = flag.Int(""sz"", 0x100, """")\r\nvar n = flag.Int(""n"", 1000000000, """")\r\nvar typ = flag.Bool(""typ"", true, """")\r\nvar profile = flag.String(""profile"", """", """")\r\n\r\nvar blackHole = 0\r\n\r\n//go:noinline\r\nfunc loopStatic(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkStatic()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc loopVirtual(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkVirtual()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc loopManualVirtual(d *data, n int) {\r\n\tfor i := 0; i < n; i++ {\r\n\t\tblackHole += d.checkManualVirtual()\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tif *profile != """" {\r\n\t\tfd, _ := os.Create(*profile)\r\n\t\tpprof.StartCPUProfile(fd)\r\n\t\tdefer pprof.StopCPUProfile()\r\n\t}\r\n\tvar d = new(data)\r\n\td.data = make([]byte, *sz)\r\n\tif *typ {\r\n\t\td.checker = new(c1)\r\n\t} else {\r\n\t\td.checker = new(c2)\r\n\t}\r\n\tblackHole += new(c1).check(d.data)\r\n\tblackHole += new(c2).check(d.data)\r\n\tn := *n\r\n\tt1 := time.Now()\r\n\tloopVirtual(d, n)\r\n\tt2 := time.Now()\r\n\tloopManualVirtual(d, n)\r\n\tt3 := time.Now()\r\n\tloopStatic(d, n)\r\n\tt4 := time.Now()\r\n\tfmt.Printf(""virtual        %+v\\n"", t2.Sub(t1))\r\n\tfmt.Printf(""manualVirtual  %+v\\n"", t3.Sub(t2))\r\n\tfmt.Printf(""static         %+v\\n"", t4.Sub(t3))\r\n\tfmt.Println(blackHole)\r\n}\r\n\r\n"
62203,"maps: segfault in Clone## What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/tmp/go'\r\nGOENV='/home/chris/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/lib/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/usr/local/lib/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/chris/go-1.21'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/chris/go-1.21/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v4'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1170293352=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following program:\r\n\r\n\r\n\r\nNote: the contents of the strings doesn't seem to affect the crash. The number of strings appears to be significant however.\r\n\r\n### What did you expect to see?\r\n\r\nThe program exit normally.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nunexpected fault address 0x0\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x40cd1b]\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw({0x4666c9?, 0x40c894?})\r\n\t/home/chris/go-1.21/src/runtime/panic.go:1077 +0x5c fp=0xc00011aac8 sp=0xc00011aa98 pc=0x42cedc\r\nruntime.sigpanic()\r\n\t/home/chris/go-1.21/src/runtime/signal_unix.go:875 +0x285 fp=0xc00011ab28 sp=0xc00011aac8 pc=0x4412a5\r\nruntime.(*bmap).overflow(...)\r\n\t/home/chris/go-1.21/src/runtime/map.go:210\r\nruntime.mapclone2(0x45e320, 0xc00011e000)\r\n\t/home/chris/go-1.21/src/runtime/map.go:1557 +0x3bb fp=0xc00011abc8 sp=0xc00011ab28 pc=0x40cd1b\r\nmaps.clone({0x45e320, 0xc00011e000})\r\n\t/home/chris/go-1.21/src/runtime/map.go:1454 +0x25 fp=0xc00011abe8 sp=0xc00011abc8 pc=0x453885\r\nmaps.Clone[...](...)\r\n\t/home/chris/go-1.21/src/maps/maps.go:46\r\nmain.main()\r\n\t/tmp/crash.go:20 +0xfc fp=0xc00011af40 sp=0xc00011abe8 pc=0x457efc\r\nruntime.main()\r\n\t/home/chris/go-1.21/src/runtime/proc.go:267 +0x2bb fp=0xc00011afe0 sp=0xc00011af40 pc=0x42f8bb\r\nruntime.goexit()\r\n\t/home/chris/go-1.21/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00011afe8 sp=0xc00011afe0 pc=0x4550c1\r\n```",NeedsFix|release-blocker|compiler/runtime,cuonglm,"## What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/tmp/go'\r\nGOENV='/home/chris/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/usr/local/lib/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/usr/local/lib/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/chris/go-1.21'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/chris/go-1.21/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v4'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1170293352=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following program:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""maps""\r\n\r\nfunc main() {\r\n\tm := map[string]struct{}{}\r\n\r\n\tss := []string{\r\n\t\t""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"",\r\n\t\t""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"",\r\n\t\t""hmm"",\r\n\t}\r\n\tfor _, s := range ss {\r\n\t\tm[s] = struct{}{}\r\n\t}\r\n\t_ = maps.Clone(m)\r\n\r\n\tdelete(m, ""hmm"")\r\n\r\n\t_ = maps.Clone(m)\r\n}\r\n```\r\n\r\nNote: the contents of the strings doesn't seem to affect the crash. The number of strings appears to be significant however.\r\n\r\n### What did you expect to see?\r\n\r\nThe program exit normally.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nunexpected fault address 0x0\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x40cd1b]\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw({0x4666c9?, 0x40c894?})\r\n\t/home/chris/go-1.21/src/runtime/panic.go:1077 +0x5c fp=0xc00011aac8 sp=0xc00011aa98 pc=0x42cedc\r\nruntime.sigpanic()\r\n\t/home/chris/go-1.21/src/runtime/signal_unix.go:875 +0x285 fp=0xc00011ab28 sp=0xc00011aac8 pc=0x4412a5\r\nruntime.(*bmap).overflow(...)\r\n\t/home/chris/go-1.21/src/runtime/map.go:210\r\nruntime.mapclone2(0x45e320, 0xc00011e000)\r\n\t/home/chris/go-1.21/src/runtime/map.go:1557 +0x3bb fp=0xc00011abc8 sp=0xc00011ab28 pc=0x40cd1b\r\nmaps.clone({0x45e320, 0xc00011e000})\r\n\t/home/chris/go-1.21/src/runtime/map.go:1454 +0x25 fp=0xc00011abe8 sp=0xc00011abc8 pc=0x453885\r\nmaps.Clone[...](...)\r\n\t/home/chris/go-1.21/src/maps/maps.go:46\r\nmain.main()\r\n\t/tmp/crash.go:20 +0xfc fp=0xc00011af40 sp=0xc00011abe8 pc=0x457efc\r\nruntime.main()\r\n\t/home/chris/go-1.21/src/runtime/proc.go:267 +0x2bb fp=0xc00011afe0 sp=0xc00011af40 pc=0x42f8bb\r\nruntime.goexit()\r\n\t/home/chris/go-1.21/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00011afe8 sp=0xc00011afe0 pc=0x4550c1\r\n```","go\r\npackage main\r\n\r\nimport ""maps""\r\n\r\nfunc main() {\r\n\tm := map[string]struct{}{}\r\n\r\n\tss := []string{\r\n\t\t""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"",\r\n\t\t""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"",\r\n\t\t""hmm"",\r\n\t}\r\n\tfor _, s := range ss {\r\n\t\tm[s] = struct{}{}\r\n\t}\r\n\t_ = maps.Clone(m)\r\n\r\n\tdelete(m, ""hmm"")\r\n\r\n\t_ = maps.Clone(m)\r\n}\r\n"
62192,"x/telemetry: `TestCounter` fails if the current date does not match the UTC date```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/telemetry/internal/counter"" && test == ""TestRotate"" && `us = .*, want .*`\r\n```\r\n\r\nhttps://build.golang.org/log/f9adf22ae18f3c790952f2f3efe33e81cdaf4329:\r\n```\r\n--- FAIL: TestRotate (0.00s)\r\n    counter_test.go:383: GOOS linux GOARCH amd64\r\n    counter_test.go:410: us = 2023-08-27 00:00:00 +0000 UTC, want 2023-08-28 00:00:00 +0000 UTC\r\n    counter_test.go:410: us = 2023-08-27 00:00:00 +0000 UTC, want 2023-08-28 00:00:00 +0000 UTC\r\nFAIL\r\nFAIL\tgolang.org/x/telemetry/internal/counter\t0.106s\r\n```\r\n\r\nThe test was added in https://go.dev/cl/499920, with the comment:\r\n\r\n\r\nI think there are two problems in the test:\r\n1. It calls `time.Date(year, month, day, 0, 0, 0, 0, time.UTC)` with arguments derived from `time.Now().Date()` (without an explicit time zone). It should either convert `time.Now()` to `time.UTC` before extracting the date, or construct `now` in the local time zone instead of UTC.\r\n2. If the test run happens to cross midnight (as may be the case on CI builders), I suspect that the date could have changed after the call to `time.Now()`.\r\n\r\nThis test was added in https://go.dev/cl/499920 (attn @pjweinb, @hyangah, @jamalc).",Testing|NeedsFix|telemetry,hyangah,"```\r\n#!watchflakes\r\npost <- pkg == ""golang.org/x/telemetry/internal/counter"" && test == ""TestRotate"" && `us = .*, want .*`\r\n```\r\n\r\nhttps://build.golang.org/log/f9adf22ae18f3c790952f2f3efe33e81cdaf4329:\r\n```\r\n--- FAIL: TestRotate (0.00s)\r\n    counter_test.go:383: GOOS linux GOARCH amd64\r\n    counter_test.go:410: us = 2023-08-27 00:00:00 +0000 UTC, want 2023-08-28 00:00:00 +0000 UTC\r\n    counter_test.go:410: us = 2023-08-27 00:00:00 +0000 UTC, want 2023-08-28 00:00:00 +0000 UTC\r\nFAIL\r\nFAIL\tgolang.org/x/telemetry/internal/counter\t0.106s\r\n```\r\n\r\nThe test was added in https://go.dev/cl/499920, with the comment:\r\n```go\r\n\t\t// we expect today's date?\r\n\t\tif us != now {\r\n\t\t\tt.Errorf(""us = %v, want %v"", us, now)\r\n\t\t}\r\n```\r\n\r\nI think there are two problems in the test:\r\n1. It calls `time.Date(year, month, day, 0, 0, 0, 0, time.UTC)` with arguments derived from `time.Now().Date()` (without an explicit time zone). It should either convert `time.Now()` to `time.UTC` before extracting the date, or construct `now` in the local time zone instead of UTC.\r\n2. If the test run happens to cross midnight (as may be the case on CI builders), I suspect that the date could have changed after the call to `time.Now()`.\r\n\r\nThis test was added in https://go.dev/cl/499920 (attn @pjweinb, @hyangah, @jamalc).","go\r\n\t\t// we expect today's date?\r\n\t\tif us != now {\r\n\t\t\tt.Errorf(""us = %v, want %v"", us, now)\r\n\t\t}\r\n"
62157,"cmd/compile: backward incompatible change in Go 1.21 type inference with channels### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/momchil/Library/Caches/go-build'\r\nGOENV='/Users/momchil/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/momchil/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/momchil/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.0/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/momchil/Workspace/Tools/gotest/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/w4/dj2vrtkn7x57h4fc45382jyw0000gn/T/go-build4050054595=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile my project (that used to compile successfully with Go 1.20) but I get an error.\r\n\r\nThe project (with commit ref) is the following:\r\n[https://github.com/mokiat/gotest](https://github.com/mokiat/gotest/tree/b9e5ada3f1738f05e73f78ccd4d5ef783f9d8cc8)\r\n\r\nThe following command should run:\r\n\r\n\r\n**NOTE:** While the project is just a playground at this point in time to see if generic matchers for testing and mocking might be possible in Go and the tests don't pass at the moment, the project does compile with Go 1.20 and does not with Go 1.21.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nok      github.com/mokiat/gotest/match  1.317s\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# github.com/mokiat/gotest/match_test [github.com/mokiat/gotest/match.test]\r\nmatch/eventually_test.go:46:16: type match.Matcher[<-chan string] of Eventually(Produces(Eq(""hello""))) does not match inferred type match.Matcher[chan string] for match.Matcher[T]\r\nFAIL    github.com/mokiat/gotest/match [build failed]\r\nFAIL\r\n```\r\n\r\nThis can be fixed by casting the channel to a read-only channel.\r\n\r\n\r\n\r\nneeds to become\r\n\r\n\r\n\r\nNevertheless, this feels like a breaking change.\r\n\r\n",NeedsFix|TypeInference|compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/Users/momchil/Library/Caches/go-build'\r\nGOENV='/Users/momchil/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/momchil/.go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/momchil/.go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/local/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/local/Cellar/go/1.21.0/libexec/pkg/tool/darwin_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/momchil/Workspace/Tools/gotest/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/w4/dj2vrtkn7x57h4fc45382jyw0000gn/T/go-build4050054595=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile my project (that used to compile successfully with Go 1.20) but I get an error.\r\n\r\nThe project (with commit ref) is the following:\r\n[https://github.com/mokiat/gotest](https://github.com/mokiat/gotest/tree/b9e5ada3f1738f05e73f78ccd4d5ef783f9d8cc8)\r\n\r\nThe following command should run:\r\n```go\r\ngo test ./match\r\n```\r\n\r\n**NOTE:** While the project is just a playground at this point in time to see if generic matchers for testing and mocking might be possible in Go and the tests don't pass at the moment, the project does compile with Go 1.20 and does not with Go 1.21.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nok      github.com/mokiat/gotest/match  1.317s\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# github.com/mokiat/gotest/match_test [github.com/mokiat/gotest/match.test]\r\nmatch/eventually_test.go:46:16: type match.Matcher[<-chan string] of Eventually(Produces(Eq(""hello""))) does not match inferred type match.Matcher[chan string] for match.Matcher[T]\r\nFAIL    github.com/mokiat/gotest/match [build failed]\r\nFAIL\r\n```\r\n\r\nThis can be fixed by casting the channel to a read-only channel.\r\n\r\n```go\r\nAssert(c, ch, Eventually(Produces(Eq(""hello""))))\r\n```\r\n\r\nneeds to become\r\n\r\n```go\r\nAssert(c, (<-chan string)(ch), Eventually(Produces(Eq(""hello""))))\r\n```\r\n\r\nNevertheless, this feels like a breaking change.\r\n\r\n",go\r\ngo test ./match\r\n
62141,x/tools/gopls: completion to invalid untyped conversionFrom gopls slack (credit @dominikh and @danp):\r\n\r\n\r\n\r\nAccepting the completion at `<>` yields \r\n\r\n```\r\nfunc _() {\r\n\tabcdef := 32\r\n\tx := 1.0 / untyped float(abcdef)\r\n}\r\n```\r\n\r\nOops!,gopls|Tools,findleyr,From gopls slack (credit @dominikh and @danp):\r\n\r\n```go\r\nfunc _() {\r\n\tabcdef := 32\r\n\tx := 1.0 / abcd<>\r\n```\r\n\r\nAccepting the completion at `<>` yields \r\n\r\n```\r\nfunc _() {\r\n\tabcdef := 32\r\n\tx := 1.0 / untyped float(abcdef)\r\n}\r\n```\r\n\r\nOops!,go\r\nfunc _() {\r\n\tabcdef := 32\r\n\tx := 1.0 / abcd<>\r\n
62131,"hash/crc32: panic on arm64 with go1.21.0 when indexing slice<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/edward/Library/Caches/go-build'\r\nGOENV='/Users/edward/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/edward/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/edward/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/ld/l69fjx9x3gl6qfx056xt89hr0000gp/T/go-build4293017448=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis code panics on go 1.21 on arm64 but runs fine on other platforms or go 1.20 arm64:\r\n\r\n> It doesn't occur if I add a `fmt.Println(index)` or debug the application, before calling `colors[index]`\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA string printed\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\npanic: runtime error: index out of range [-4294967295]\r\n\r\ngoroutine 1 [running]:\r\nmain.pickColor({0x10494b15b?, 0x0?})\r\n        /Users/edward/Desktop/go_bug.go:20 +0x118\r\nmain.main()\r\n        /Users/edward/Desktop/go_bug.go:24 +0x28\r\nexit status 2\r\n```\r\n",NeedsFix|arch-arm64|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/edward/Library/Caches/go-build'\r\nGOENV='/Users/edward/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/edward/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/edward/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/opt/homebrew/Cellar/go/1.21.0/libexec'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/opt/homebrew/Cellar/go/1.21.0/libexec/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='cc'\r\nCXX='c++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/ld/l69fjx9x3gl6qfx056xt89hr0000gp/T/go-build4293017448=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis code panics on go 1.21 on arm64 but runs fine on other platforms or go 1.20 arm64:\r\n\r\n> It doesn't occur if I add a `fmt.Println(index)` or debug the application, before calling `colors[index]`\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""hash/crc32""\r\n)\r\n\r\nfunc pickColor(userID string) string {\r\n\tcolors := []string{\r\n\t\t""ffd179"",\r\n\t\t""f388a8"",\r\n\t\t""b786d2"",\r\n\t\t""bed3f4"",\r\n\t\t""88a0f3"",\r\n\t\t""6fe8d9"",\r\n\t\t""e86f85"",\r\n\t}\r\n\thash := crc32.ChecksumIEEE([]byte(userID))\r\n\tindex := hash % uint32(len(colors))\r\n\treturn colors[index]\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(pickColor(""jHjDiYOWTOS53K9t3XbOU7QXAwD3""))\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA string printed\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\npanic: runtime error: index out of range [-4294967295]\r\n\r\ngoroutine 1 [running]:\r\nmain.pickColor({0x10494b15b?, 0x0?})\r\n        /Users/edward/Desktop/go_bug.go:20 +0x118\r\nmain.main()\r\n        /Users/edward/Desktop/go_bug.go:24 +0x28\r\nexit status 2\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""hash/crc32""\r\n)\r\n\r\nfunc pickColor(userID string) string {\r\n\tcolors := []string{\r\n\t\t""ffd179"",\r\n\t\t""f388a8"",\r\n\t\t""b786d2"",\r\n\t\t""bed3f4"",\r\n\t\t""88a0f3"",\r\n\t\t""6fe8d9"",\r\n\t\t""e86f85"",\r\n\t}\r\n\thash := crc32.ChecksumIEEE([]byte(userID))\r\n\tindex := hash % uint32(len(colors))\r\n\treturn colors[index]\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(pickColor(""jHjDiYOWTOS53K9t3XbOU7QXAwD3""))\r\n}\r\n"
62190,"x/tools/gopls: hover doc doesn't show the receiver variable name\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.21.0 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.13.2\r\n    golang.org/x/tools/gopls@v0.13.2 h1:Pyvx6MKvatbX3zzZmdGiFRfQZl0ohPlt2sFxO/5j6Ro=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20220722155223-a9213eeb770e h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\r\n    golang.org/x/sync@v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\r\n    golang.org/x/sys@v0.10.0 h1:SqMFp9UcQJZa+pmYuAKjd9xq1f0j5rLcDIk0mj4qAsA=\r\n    golang.org/x/text@v0.11.0 h1:LAntKIrcmeSKERyiOh0XMV39LXS8IE9UL2yP7+f5ij4=\r\n    golang.org/x/tools@v0.11.2-0.20230810185051-cc6b5804b8cf h1:Oush7UwPamr2/iNeNFBuNFj89YyHn0YY69EKDdvANnk=\r\n    golang.org/x/vuln@v0.0.0-20230110180137-6ad3e3d07815 h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n    honnef.co/go/tools@v0.4.2 h1:6qXr+R5w+ktL5UkwEbPp+fEvfyoMPche6GkOpGHZcLc=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.21.0\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.81.1\r\n6c3e3dba23e8fadc360aed75ce363ba185c49794\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.39.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- Checking configured tools....\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: /Users/Will/Library/Application Support/go\r\nGOROOT: /usr/local/Cellar/go/1.21.0/libexec\r\nPATH: /usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin\r\n\r\n\tgo:\t/usr/local/bin/go: go version go1.21.0 darwin/amd64\r\n\r\n\tgotests:\t/Users/Will/Library/Application Support/go/bin/gotests\t(version: v1.6.0 built with go: go1.21.0)\r\n\tgomodifytags:\t/Users/Will/Library/Application Support/go/bin/gomodifytags\t(version: v1.16.0 built with go: go1.21.0)\r\n\timpl:\t/Users/Will/Library/Application Support/go/bin/impl\t(version: v1.1.0 built with go: go1.21.0)\r\n\tgoplay:\t/Users/Will/Library/Application Support/go/bin/goplay\t(version: v1.0.0 built with go: go1.21.0)\r\n\tdlv:\t/Users/Will/Library/Application Support/go/bin/dlv\t(version: v1.21.0 built with go: go1.21.0)\r\n\tstaticcheck:\t/Users/Will/Library/Application Support/go/bin/staticcheck\t(version: v0.4.5 built with go: go1.21.0)\r\n\tgopls:\t/Users/Will/Library/Application Support/go/bin/gopls\t(version: v0.13.2 built with go: go1.21.0)\r\n\r\ngo env\r\nWorkspace Folder (backend): /Users/Will/Developer/work/backend\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/Users/Will/Library/Caches/go-build'\r\n\tGOENV='/Users/Will/Library/Application Support/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='darwin'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/Users/Will/Library/Application Support/go/pkg/mod'\r\n\tGONOPROXY='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGONOSUMDB='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGOOS='darwin'\r\n\tGOPATH='/Users/Will/Library/Application Support/go'\r\n\tGOPRIVATE='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/Cellar/go/1.21.0/libexec'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/Cellar/go/1.21.0/libexec/pkg/tool/darwin_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.21.0'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='cc'\r\n\tCXX='c++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/Users/Will/Developer/work/backend/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/bx/qk0phsxd265fqj512dnnpg080000gn/T/go-build225606814=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\n```\r\n    ""go.buildTags"": ""integration"",\r\n    ""go.editorContextMenuCommands"": {\r\n        ""testAtCursor"": true,\r\n        ""testFile"": true,\r\n        ""testPackage"": true\r\n    },\r\n    ""go.enableCodeLens"": {\r\n        ""runtest"": false\r\n    },\r\n    ""go.formatTool"": ""goimports"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""gopls"": {\r\n        ""ui.semanticTokens"": true\r\n    },\r\n```\r\n\r\n### Describe the bug\r\n\r\nHover documentation doesn't show the receiver variable name, which is confusing if the documentation refers to it by name.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\nWrite something like:\r\n\r\n\r\n\r\nHover over ""Quo"".\r\n\r\n### Screenshots or recordings\r\n\r\n<img width=""749"" alt=""Screenshot 2023-08-17 at 10 57 00 PM"" src=""https://github.com/golang/vscode-go/assets/63830/993fd004-ddb3-454e-89d5-aa593071d0a2"">",gopls|Tools,adonovan,"\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.21.0 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.13.2\r\n    golang.org/x/tools/gopls@v0.13.2 h1:Pyvx6MKvatbX3zzZmdGiFRfQZl0ohPlt2sFxO/5j6Ro=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20220722155223-a9213eeb770e h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\r\n    golang.org/x/sync@v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\r\n    golang.org/x/sys@v0.10.0 h1:SqMFp9UcQJZa+pmYuAKjd9xq1f0j5rLcDIk0mj4qAsA=\r\n    golang.org/x/text@v0.11.0 h1:LAntKIrcmeSKERyiOh0XMV39LXS8IE9UL2yP7+f5ij4=\r\n    golang.org/x/tools@v0.11.2-0.20230810185051-cc6b5804b8cf h1:Oush7UwPamr2/iNeNFBuNFj89YyHn0YY69EKDdvANnk=\r\n    golang.org/x/vuln@v0.0.0-20230110180137-6ad3e3d07815 h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n    honnef.co/go/tools@v0.4.2 h1:6qXr+R5w+ktL5UkwEbPp+fEvfyoMPche6GkOpGHZcLc=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.21.0\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.81.1\r\n6c3e3dba23e8fadc360aed75ce363ba185c49794\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.39.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- Checking configured tools....\r\nGOBIN: undefined\r\ntoolsGopath: \r\ngopath: /Users/Will/Library/Application Support/go\r\nGOROOT: /usr/local/Cellar/go/1.21.0/libexec\r\nPATH: /usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin:/Users/Will/Library/Application Support/go/bin\r\n\r\n\tgo:\t/usr/local/bin/go: go version go1.21.0 darwin/amd64\r\n\r\n\tgotests:\t/Users/Will/Library/Application Support/go/bin/gotests\t(version: v1.6.0 built with go: go1.21.0)\r\n\tgomodifytags:\t/Users/Will/Library/Application Support/go/bin/gomodifytags\t(version: v1.16.0 built with go: go1.21.0)\r\n\timpl:\t/Users/Will/Library/Application Support/go/bin/impl\t(version: v1.1.0 built with go: go1.21.0)\r\n\tgoplay:\t/Users/Will/Library/Application Support/go/bin/goplay\t(version: v1.0.0 built with go: go1.21.0)\r\n\tdlv:\t/Users/Will/Library/Application Support/go/bin/dlv\t(version: v1.21.0 built with go: go1.21.0)\r\n\tstaticcheck:\t/Users/Will/Library/Application Support/go/bin/staticcheck\t(version: v0.4.5 built with go: go1.21.0)\r\n\tgopls:\t/Users/Will/Library/Application Support/go/bin/gopls\t(version: v0.13.2 built with go: go1.21.0)\r\n\r\ngo env\r\nWorkspace Folder (backend): /Users/Will/Developer/work/backend\r\n\tGO111MODULE=''\r\n\tGOARCH='amd64'\r\n\tGOBIN=''\r\n\tGOCACHE='/Users/Will/Library/Caches/go-build'\r\n\tGOENV='/Users/Will/Library/Application Support/go/env'\r\n\tGOEXE=''\r\n\tGOEXPERIMENT=''\r\n\tGOFLAGS=''\r\n\tGOHOSTARCH='amd64'\r\n\tGOHOSTOS='darwin'\r\n\tGOINSECURE=''\r\n\tGOMODCACHE='/Users/Will/Library/Application Support/go/pkg/mod'\r\n\tGONOPROXY='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGONOSUMDB='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGOOS='darwin'\r\n\tGOPATH='/Users/Will/Library/Application Support/go'\r\n\tGOPRIVATE='github.com/FrontRowXP,github.com/frontrowxp'\r\n\tGOPROXY='https://proxy.golang.org,direct'\r\n\tGOROOT='/usr/local/Cellar/go/1.21.0/libexec'\r\n\tGOSUMDB='sum.golang.org'\r\n\tGOTMPDIR=''\r\n\tGOTOOLCHAIN='auto'\r\n\tGOTOOLDIR='/usr/local/Cellar/go/1.21.0/libexec/pkg/tool/darwin_amd64'\r\n\tGOVCS=''\r\n\tGOVERSION='go1.21.0'\r\n\tGCCGO='gccgo'\r\n\tGOAMD64='v1'\r\n\tAR='ar'\r\n\tCC='cc'\r\n\tCXX='c++'\r\n\tCGO_ENABLED='1'\r\n\tGOMOD='/Users/Will/Developer/work/backend/go.mod'\r\n\tGOWORK=''\r\n\tCGO_CFLAGS='-O2 -g'\r\n\tCGO_CPPFLAGS=''\r\n\tCGO_CXXFLAGS='-O2 -g'\r\n\tCGO_FFLAGS='-O2 -g'\r\n\tCGO_LDFLAGS='-O2 -g'\r\n\tPKG_CONFIG='pkg-config'\r\n\tGOGCCFLAGS='-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/bx/qk0phsxd265fqj512dnnpg080000gn/T/go-build225606814=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\n```\r\n    ""go.buildTags"": ""integration"",\r\n    ""go.editorContextMenuCommands"": {\r\n        ""testAtCursor"": true,\r\n        ""testFile"": true,\r\n        ""testPackage"": true\r\n    },\r\n    ""go.enableCodeLens"": {\r\n        ""runtest"": false\r\n    },\r\n    ""go.formatTool"": ""goimports"",\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""gopls"": {\r\n        ""ui.semanticTokens"": true\r\n    },\r\n```\r\n\r\n### Describe the bug\r\n\r\nHover documentation doesn't show the receiver variable name, which is confusing if the documentation refers to it by name.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\nWrite something like:\r\n\r\n```go\r\ndurationFloat := big.NewFloat(float64(duration))\r\ndurationFloat.Quo(durationFloat, big.NewFloat(60))\r\n```\r\n\r\nHover over ""Quo"".\r\n\r\n### Screenshots or recordings\r\n\r\n<img width=""749"" alt=""Screenshot 2023-08-17 at 10 57 00 PM"" src=""https://github.com/golang/vscode-go/assets/63830/993fd004-ddb3-454e-89d5-aa593071d0a2"">","go\r\ndurationFloat := big.NewFloat(float64(duration))\r\ndurationFloat.Quo(durationFloat, big.NewFloat(60))\r\n"
62124,"proposal: go/types: Export `UntypedZero` and `Value`### Proposal\r\n\r\nThe `go/types` package shall export the following new declarations:\r\n\r\n\r\nand\r\n\r\nsuch that `go/types` clients have easy access to the type and object for the new predeclared value `zero` (approved in #61372).\r\n\r\n### Discussion\r\n\r\nThe `zero` object can be found via `Universe.Lookup(""zero"")` and thus it's type is `Universe.Lookup(""zero"").Type()`. But we provide `BasicKind` values for all other predeclared types, so `Typ[UntypedZero]` will provide direct access to the type for `zero`. Importers may need access to the actual kind value.\r\n\r\nUntil Go 1.21, Go defined only a single predeclared value, `nil`. `go/types` used a special object, `Nil` to represent this value. Now that we have both `nil` and `zero`, rather than introduce a new object kind (say `Zero`), it makes sense to use a `Value` object to represent both. The distinguishing feature between `nil` and `zero` is their type, so no extra information needs to be stored with `Value`. We could simply use the `Nil` object for both, but it seems cleaner to rename it to `Value` and make `Nil` an alias for `Value` for backward-compatibility.\r\n\r\nNone of these changes are strictly necessary (`Universe.Lookup(""zero"")` will provide the `zero` object and type), but it makes sense to make these changes to keep the`go/types` API directly in sync with the language.\r\n",Proposal,griesemer,"### Proposal\r\n\r\nThe `go/types` package shall export the following new declarations:\r\n\r\n```Go\r\nconst UntypedZero BasicKind = 26\r\n```\r\nand\r\n```Go\r\n// A Value represents the predeclared value nil or zero.\r\n// The specific value is identified by its type.\r\ntype Value struct {\r\n    object\r\n}\r\n\r\n// For backward-compatibility.\r\n// Deprecated.\r\ntype Nil = Value\r\n```\r\nsuch that `go/types` clients have easy access to the type and object for the new predeclared value `zero` (approved in #61372).\r\n\r\n### Discussion\r\n\r\nThe `zero` object can be found via `Universe.Lookup(""zero"")` and thus it's type is `Universe.Lookup(""zero"").Type()`. But we provide `BasicKind` values for all other predeclared types, so `Typ[UntypedZero]` will provide direct access to the type for `zero`. Importers may need access to the actual kind value.\r\n\r\nUntil Go 1.21, Go defined only a single predeclared value, `nil`. `go/types` used a special object, `Nil` to represent this value. Now that we have both `nil` and `zero`, rather than introduce a new object kind (say `Zero`), it makes sense to use a `Value` object to represent both. The distinguishing feature between `nil` and `zero` is their type, so no extra information needs to be stored with `Value`. We could simply use the `Nil` object for both, but it seems cleaner to rename it to `Value` and make `Nil` an alias for `Value` for backward-compatibility.\r\n\r\nNone of these changes are strictly necessary (`Universe.Lookup(""zero"")` will provide the `zero` object and type), but it makes sense to make these changes to keep the`go/types` API directly in sync with the language.\r\n",Go\r\nconst UntypedZero BasicKind = 26\r\n
62067,"cmd/go: go build -json(Edited 2024-01-18: Changed `PackageID` to `ImportPath`.)\r\n\r\nI propose we add structured JSON output to `go build`, similar to and compatible with the structured JSON output of `go test -json`. This JSON output will be enabled by a new `go build -json` flag, and also implicitly enabled for all builds done on behalf of `go test -json`. This proposal aims to address #23037 and #35169, as well as improve structured all.bash output (#37486).\r\n\r\nThe main motivation for this proposal is to enable build output that is consistent and compatible with `go test -json` output. Currently, if a test or imported package fails to build during `go test -json`, the build error text will be interleaved with the JSON output of tests. Furthermore, there\u2019s currently no way to reliably associate a build error with the test package or packages it affected. This creates unnecessary friction and complexity in tools that consume the `go test -json` output.\r\n\r\nFor reference, the `go test -json` format is as follow:\r\n\r\n\r\n\r\nA detailed description can be found in [`go doc test2json`](https://pkg.go.dev/cmd/test2json).\r\n\r\n## Proposal\r\n\r\nThere are two related parts to this proposal.\r\n\r\n1. I propose we add a `-json` flag to `go build` that suppresses the text build errors written to stderr and instead writes a JSON-encoded stream to stdout described by the following type:\r\n\r\n\r\n\r\nThe `ImportPath` field gives the package ID of the package being built. This matches the somewhat misnamed [`Package.ImportPath`](https://pkg.go.dev/go/build#Package) field of `go list -json` and what [golang.org/x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages) calls the \u201cID\u201d. This differs from the `TestEvent.Package` field, which is a plain import path, but using the full package ID is important for disambiguating errors from different builds and for consistency with the rest of the build process.\r\n\r\nThe `Action` field is one of the following:\r\n\r\n- build-output - The toolchain printed output\r\n- build-fail - The build failed\r\n\r\nThe `Output` field is set for `Action == ""build-output""` and is defined exactly the same way as the `TestEvent.Output` field. A single event may contain one or more lines of output and there may be more than one output event for a given package ID.\r\n\r\nThis struct is designed so that parsers can distinguish interleaved TestEvents and BuildEvents by inspecting the `Action` field. Furthermore, as with TestEvent, parsers can simply concatenate the `Output` fields of all events to reconstruct the text format output, as it would have appeared from `go build` without the `-json` flag. (As a consequence, this means the output includes all post-processing done by the go tool, including path rewriting and adding the \u201c# package\u201d header before each package.)\r\n\r\nEnvironmental errors (e.g., bad GOOS values, file system errors) and module-level errors (e.g., syntax errors in go.mod) will still be printed in plain text to stderr by the go command. These errors cause an immediate exit and happen very early, so they should never appear with JSON output.\r\n\r\n2. I propose we add an optional `FailedBuild` field to `TestEvent` to connect tests that fail because of build errors back to the build error. When a test fails due to a build error, the go command would emit the usual ""start"" event for the test package, then an ""output"" event giving the ""FAIL _package name_ [build failed]"" or equivalent message, followed by a ""fail"" event with the new `FailedBuild` field set to the package ID of the package that failed to build.\r\n\r\nThis same approach can be used for setup failures as well, which print a ""FAIL _package name_ [setup failed]"" message. Setup failures reflect errors that prevent the go command from even invoking the compiler, such as errors in imports, but they are still logically build failures.\r\n\r\nThis approach to reporting build failures that affect tests tries to balance several considerations:\r\n1. A test may fail because of a build failure in an imported package. Thus, we can\u2019t assume that the build failure is in the test package itself.\r\n1. A view that narrows down a large test log to ""why did this particular test fail?"" (a common feature of CI systems) should be able to report the text of the build failure, even if it wasn't in the test package itself. Thus, we need some way to connect each failing test package back to the root build failure.\r\n1. Multiple test packages may fail because of a build failure in one common imported package. Preferably, the details of the build failure would appear only once in the log, regardless of how many tests fail because of it.\r\n1. Consumers must be able to concatenate the Output fields to recover the original text output. Hence, the current ""FAIL"" line has to appear in some output event. This also forces us to report the details of each build failure only once, since that\u2019s how it appears in the text output.\r\n1. CI systems should be able to correlate the same test package across test logs from different commits, even if the test package runs in some logs and doesn\u2019t run because of build failures in others. Since TestEvents use package paths and BuildEvents use package IDs, that means the CI system needs some way to get the package path of the failing test. Preferably this can be done without parsing the package ID.\r\n1. Sequential test order should still be recoverable from the log with build failures. Hence, the ""start"" TestEvents should still appear and be in order.\r\n\r\n\r\n## Example\r\n\r\nGiven [a test package](https://go.dev/play/p/wbqPTeaSljd) with a simple build error, currently `go test -json` emits the following:\r\n\r\n```\r\n# github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]\r\n./main_test.go:6:2: undefined: x\r\nFAIL\tgithub.com/aclements/gotest/testdata/builderror [build failed]\r\n```\r\n\r\nThis is, in fact, identical to the output without the `-json` flag.\r\n\r\nWith the proposal, `go test -json` would instead print:\r\n\r\n```\r\n{""ImportPath"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]"",""Action"":""build-output"",""Output"":""./main_test.go:6:2: undefined: x\\n""}\r\n{""ImportPath"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]"",""Action"":""build-fail""}\r\n{""Time"":""..."",""Action"":""start"",""Package"":""github.com/aclements/gotest/testdata/builderror""}\r\n{""Time"":""..."",""Action"":""output"",""Package"":""github.com/aclements/gotest/testdata/builderror"",""Output"":""FAIL\\tgithub.com/aclements/gotest/testdata/builderror [build failed]\\n""}\r\n{""Time"":""..."",""Action"":""fail"",""Package"":""github.com/aclements/gotest/testdata/builderror"",""FailedBuild"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]""}\r\n```\r\n\r\n## Open issues and questions\r\n\r\nShould we emit BuildEvents for successful package builds, like we emit TestEvents for passing tests? Those could include useful information like timing. If we think of this as akin to verbose output, do we emit start events, too? I did not include these in the proposal because they aren\u2019t necessary to solve the immediate problems of processing `go test -json` output, but we could add these events in the future.\r\n\r\nWe could emit environmental and module-level errors in JSON. Above I proposed that these continue to be printed in text to stderr because they are fatal and happen before any build errors that would be printed in JSON, making them easy for tooling to process as text. From an implementation standpoint, there are also simply a huge number of possible causes for early, fatal errors, not all of which are even under the control of the go command, making it difficult to capture all of them. If we wanted to capture more errors, we would have to complicate `BuildEvent` to specify their sources, probably by making the `Package` field optional and adding an optional `Module` field. Module-level errors would populate the `Module` field and environmental errors would omit both fields. This all seems like unnecessary complexity.\r\n\r\n`BuildEvent.ImportPath` and `TestEvent.Package` are defined slightly differently. There are good reasons for this (given above), and I chose different field names to help make this clear, but it may be confusing for consumers.\r\n\r\nFinally, we could make the JSON build output much *more* structured, for example by encoding path and line information of errors as JSON fields. We chose to simply wrap the text output of the compiler because of the degree of variation in compiler output, including sub-errors and optional debug output.\r\n",Proposal|Proposal-Accepted|GoCommand,aclements,"(Edited 2024-01-18: Changed `PackageID` to `ImportPath`.)\r\n\r\nI propose we add structured JSON output to `go build`, similar to and compatible with the structured JSON output of `go test -json`. This JSON output will be enabled by a new `go build -json` flag, and also implicitly enabled for all builds done on behalf of `go test -json`. This proposal aims to address #23037 and #35169, as well as improve structured all.bash output (#37486).\r\n\r\nThe main motivation for this proposal is to enable build output that is consistent and compatible with `go test -json` output. Currently, if a test or imported package fails to build during `go test -json`, the build error text will be interleaved with the JSON output of tests. Furthermore, there\u2019s currently no way to reliably associate a build error with the test package or packages it affected. This creates unnecessary friction and complexity in tools that consume the `go test -json` output.\r\n\r\nFor reference, the `go test -json` format is as follow:\r\n\r\n```go\r\ntype TestEvent struct {\r\n\tTime    time.Time // encodes as an RFC3339-format string\r\n\tAction  string\r\n\tPackage string\r\n\tTest    string\r\n\tElapsed float64 // seconds\r\n\tOutput  string\r\n}\r\n```\r\n\r\nA detailed description can be found in [`go doc test2json`](https://pkg.go.dev/cmd/test2json).\r\n\r\n## Proposal\r\n\r\nThere are two related parts to this proposal.\r\n\r\n1. I propose we add a `-json` flag to `go build` that suppresses the text build errors written to stderr and instead writes a JSON-encoded stream to stdout described by the following type:\r\n\r\n```go\r\ntype BuildEvent struct {\r\n\tImportPath string\r\n\tAction     string\r\n\tOutput     string `json:"",omitempty""` // Non-empty if Action == \u201cbuild-output\u201d\r\n}\r\n```\r\n\r\nThe `ImportPath` field gives the package ID of the package being built. This matches the somewhat misnamed [`Package.ImportPath`](https://pkg.go.dev/go/build#Package) field of `go list -json` and what [golang.org/x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages) calls the \u201cID\u201d. This differs from the `TestEvent.Package` field, which is a plain import path, but using the full package ID is important for disambiguating errors from different builds and for consistency with the rest of the build process.\r\n\r\nThe `Action` field is one of the following:\r\n\r\n- build-output - The toolchain printed output\r\n- build-fail - The build failed\r\n\r\nThe `Output` field is set for `Action == ""build-output""` and is defined exactly the same way as the `TestEvent.Output` field. A single event may contain one or more lines of output and there may be more than one output event for a given package ID.\r\n\r\nThis struct is designed so that parsers can distinguish interleaved TestEvents and BuildEvents by inspecting the `Action` field. Furthermore, as with TestEvent, parsers can simply concatenate the `Output` fields of all events to reconstruct the text format output, as it would have appeared from `go build` without the `-json` flag. (As a consequence, this means the output includes all post-processing done by the go tool, including path rewriting and adding the \u201c# package\u201d header before each package.)\r\n\r\nEnvironmental errors (e.g., bad GOOS values, file system errors) and module-level errors (e.g., syntax errors in go.mod) will still be printed in plain text to stderr by the go command. These errors cause an immediate exit and happen very early, so they should never appear with JSON output.\r\n\r\n2. I propose we add an optional `FailedBuild` field to `TestEvent` to connect tests that fail because of build errors back to the build error. When a test fails due to a build error, the go command would emit the usual ""start"" event for the test package, then an ""output"" event giving the ""FAIL _package name_ [build failed]"" or equivalent message, followed by a ""fail"" event with the new `FailedBuild` field set to the package ID of the package that failed to build.\r\n\r\nThis same approach can be used for setup failures as well, which print a ""FAIL _package name_ [setup failed]"" message. Setup failures reflect errors that prevent the go command from even invoking the compiler, such as errors in imports, but they are still logically build failures.\r\n\r\nThis approach to reporting build failures that affect tests tries to balance several considerations:\r\n1. A test may fail because of a build failure in an imported package. Thus, we can\u2019t assume that the build failure is in the test package itself.\r\n1. A view that narrows down a large test log to ""why did this particular test fail?"" (a common feature of CI systems) should be able to report the text of the build failure, even if it wasn't in the test package itself. Thus, we need some way to connect each failing test package back to the root build failure.\r\n1. Multiple test packages may fail because of a build failure in one common imported package. Preferably, the details of the build failure would appear only once in the log, regardless of how many tests fail because of it.\r\n1. Consumers must be able to concatenate the Output fields to recover the original text output. Hence, the current ""FAIL"" line has to appear in some output event. This also forces us to report the details of each build failure only once, since that\u2019s how it appears in the text output.\r\n1. CI systems should be able to correlate the same test package across test logs from different commits, even if the test package runs in some logs and doesn\u2019t run because of build failures in others. Since TestEvents use package paths and BuildEvents use package IDs, that means the CI system needs some way to get the package path of the failing test. Preferably this can be done without parsing the package ID.\r\n1. Sequential test order should still be recoverable from the log with build failures. Hence, the ""start"" TestEvents should still appear and be in order.\r\n\r\n\r\n## Example\r\n\r\nGiven [a test package](https://go.dev/play/p/wbqPTeaSljd) with a simple build error, currently `go test -json` emits the following:\r\n\r\n```\r\n# github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]\r\n./main_test.go:6:2: undefined: x\r\nFAIL\tgithub.com/aclements/gotest/testdata/builderror [build failed]\r\n```\r\n\r\nThis is, in fact, identical to the output without the `-json` flag.\r\n\r\nWith the proposal, `go test -json` would instead print:\r\n\r\n```\r\n{""ImportPath"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]"",""Action"":""build-output"",""Output"":""./main_test.go:6:2: undefined: x\\n""}\r\n{""ImportPath"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]"",""Action"":""build-fail""}\r\n{""Time"":""..."",""Action"":""start"",""Package"":""github.com/aclements/gotest/testdata/builderror""}\r\n{""Time"":""..."",""Action"":""output"",""Package"":""github.com/aclements/gotest/testdata/builderror"",""Output"":""FAIL\\tgithub.com/aclements/gotest/testdata/builderror [build failed]\\n""}\r\n{""Time"":""..."",""Action"":""fail"",""Package"":""github.com/aclements/gotest/testdata/builderror"",""FailedBuild"":""github.com/aclements/gotest/testdata/builderror [github.com/aclements/gotest/testdata/builderror.test]""}\r\n```\r\n\r\n## Open issues and questions\r\n\r\nShould we emit BuildEvents for successful package builds, like we emit TestEvents for passing tests? Those could include useful information like timing. If we think of this as akin to verbose output, do we emit start events, too? I did not include these in the proposal because they aren\u2019t necessary to solve the immediate problems of processing `go test -json` output, but we could add these events in the future.\r\n\r\nWe could emit environmental and module-level errors in JSON. Above I proposed that these continue to be printed in text to stderr because they are fatal and happen before any build errors that would be printed in JSON, making them easy for tooling to process as text. From an implementation standpoint, there are also simply a huge number of possible causes for early, fatal errors, not all of which are even under the control of the go command, making it difficult to capture all of them. If we wanted to capture more errors, we would have to complicate `BuildEvent` to specify their sources, probably by making the `Package` field optional and adding an optional `Module` field. Module-level errors would populate the `Module` field and environmental errors would omit both fields. This all seems like unnecessary complexity.\r\n\r\n`BuildEvent.ImportPath` and `TestEvent.Package` are defined slightly differently. There are good reasons for this (given above), and I chose different field names to help make this clear, but it may be confusing for consumers.\r\n\r\nFinally, we could make the JSON build output much *more* structured, for example by encoding path and line information of errors as JSON fields. We chose to simply wrap the text output of the compiler because of the degree of variation in compiler output, including sub-errors and optional debug output.\r\n",go\r\ntype TestEvent struct {\r\n\tTime    time.Time // encodes as an RFC3339-format string\r\n\tAction  string\r\n\tPackage string\r\n\tTest    string\r\n\tElapsed float64 // seconds\r\n\tOutput  string\r\n}\r\n
62037,"go/types: add Info.PkgName methodAny time a client of [go/types](https://pkg.go.dev/go/types) needs to find the `types.PkgName` (or just the name) defined by an import, they must write logic equivalent to this:\r\n\r\n\r\n\r\nI propose that we add this method to `types.Info`.",Proposal|Proposal-Accepted,griesemer|findleyr,"Any time a client of [go/types](https://pkg.go.dev/go/types) needs to find the `types.PkgName` (or just the name) defined by an import, they must write logic equivalent to this:\r\n\r\n```go\r\n// PkgName returns the local package name defined by the specified import.\r\nfunc (info *types.Info) PkgName(imp *ast.ImportSpec) (*types.PkgName, bool) {\r\n\tvar obj types.Object\r\n\tif imp.Name != nil {\r\n\t\tobj = info.Defs[imp.Name]\r\n\t} else {\r\n\t\tobj = info.Implicits[imp]\r\n\t}\r\n\tpkgname, ok := obj.(*types.PkgName)\r\n\treturn pkgname, ok\r\n}\r\n```\r\n\r\nI propose that we add this method to `types.Info`.","go\r\n// PkgName returns the local package name defined by the specified import.\r\nfunc (info *types.Info) PkgName(imp *ast.ImportSpec) (*types.PkgName, bool) {\r\n\tvar obj types.Object\r\n\tif imp.Name != nil {\r\n\t\tobj = info.Defs[imp.Name]\r\n\t} else {\r\n\t\tobj = info.Implicits[imp]\r\n\t}\r\n\tpkgname, ok := obj.(*types.PkgName)\r\n\treturn pkgname, ok\r\n}\r\n"
61973,"cmd/link: -buildmode=shared fails to initialize some global dataRunning these commands with tip fails:\r\n\r\n```\r\n> go install -buildmode=shared std\r\n> go build -linkshared hello.go\r\n> ./hello\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x7fad99183f93]\r\n\r\ngoroutine 1 [running]:\r\nos.(*File).write(...)\r\n\t/home/iant/go/src/os/file_posix.go:46\r\nos.(*File).Write(0x0, {0xc000014120?, 0xd, 0x7fad9908a565?})\r\n\t/home/iant/go/src/os/file.go:183 +0x53\r\nfmt.Fprintln({0x565428daeb48, 0x0}, {0xc000366720, 0x1, 0x1})\r\n\t/home/iant/go/src/fmt/print.go:305 +0x6f\r\nfmt.Println(...)\r\n\t/home/iant/go/src/fmt/print.go:314\r\n```\r\n\r\nA similar failure occurs if I add\r\n\r\n\r\n\r\nto cmd/cgo/internal/testshared/testdata/depBase/dep.go. With that addition, the panic occurs running `go test cmd/cgo/internal/testshared`.\r\n\r\nIt appears that at least in some cases global variables are not being initialized when using `-buildmode=shared`.",NeedsInvestigation|release-blocker|compiler/runtime,cherrymui,"Running these commands with tip fails:\r\n\r\n```\r\n> go install -buildmode=shared std\r\n> go build -linkshared hello.go\r\n> ./hello\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x7fad99183f93]\r\n\r\ngoroutine 1 [running]:\r\nos.(*File).write(...)\r\n\t/home/iant/go/src/os/file_posix.go:46\r\nos.(*File).Write(0x0, {0xc000014120?, 0xd, 0x7fad9908a565?})\r\n\t/home/iant/go/src/os/file.go:183 +0x53\r\nfmt.Fprintln({0x565428daeb48, 0x0}, {0xc000366720, 0x1, 0x1})\r\n\t/home/iant/go/src/fmt/print.go:305 +0x6f\r\nfmt.Println(...)\r\n\t/home/iant/go/src/fmt/print.go:314\r\n```\r\n\r\nA similar failure occurs if I add\r\n\r\n```Go\r\nfunc init() {\r\n\tif os.Stdout == nil {\r\n\t\tpanic(""os.Stdout is nil"")\r\n\t}\r\n}\r\n```\r\n\r\nto cmd/cgo/internal/testshared/testdata/depBase/dep.go. With that addition, the panic occurs running `go test cmd/cgo/internal/testshared`.\r\n\r\nIt appears that at least in some cases global variables are not being initialized when using `-buildmode=shared`.","Go\r\nfunc init() {\r\n\tif os.Stdout == nil {\r\n\t\tpanic(""os.Stdout is nil"")\r\n\t}\r\n}\r\n"
61962,"x/tools/go/analysis/passes/copylock: inconsistent treatment for assignments from parenthesized expressions<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSame treatments.\r\n\r\n### What did you see instead?\r\n\r\nDifferent treatments.\r\n",NeedsFix|Tools,timothy-king,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\npackage main\r\n\r\nimport ""sync""\r\n\r\nfunc main() {\r\n\t{\r\n\t\tvar mu = sync.Mutex{} // okay\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tmu := sync.Mutex{} // okay\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tvar mu = (sync.Mutex{}) // assignment copies lock value to mu: sync.Mutex\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tmu := (sync.Mutex{}) // assignment copies lock value to mu: sync.Mutex\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSame treatments.\r\n\r\n### What did you see instead?\r\n\r\nDifferent treatments.\r\n","Go\r\npackage main\r\n\r\nimport ""sync""\r\n\r\nfunc main() {\r\n\t{\r\n\t\tvar mu = sync.Mutex{} // okay\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tmu := sync.Mutex{} // okay\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tvar mu = (sync.Mutex{}) // assignment copies lock value to mu: sync.Mutex\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n\t{\r\n\t\tmu := (sync.Mutex{}) // assignment copies lock value to mu: sync.Mutex\r\n\t\tmu.Lock()\r\n\t\tmu.Unlock()\r\n\t}\r\n}\r\n"
61931,"go/types, types2: index out of range panic in Checker.argumentsgopls version: (devel) (go1.21.0) _(built from 47c5305d201d9d9d835b5d6a50ef5c1ec3f7b121)_\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.21.0\r\nenvironment: Visual Studio Code linux\r\ninitialization error: undefined\r\nissue timestamp: Thu, 10 Aug 2023 15:53:47 GMT\r\nrestart history:\r\nThu, 10 Aug 2023 15:33:15 GMT: activation (enabled: true)\r\nThu, 10 Aug 2023 15:52:58 GMT: manual (enabled: true)\r\nThu, 10 Aug 2023 15:53:29 GMT: manual (enabled: true)\r\n\r\n```\r\npanic: runtime error: index out of range [2] with length 2 [recovered]\r\n\tpanic: runtime error: index out of range [2] with length 2\r\n\r\ngoroutine 227 [running]:\r\ngo/types.(*Checker).handleBailout(0xc0002c05a0, 0xc0004a7578)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:336 +0x88\r\npanic({0xe748e0?, 0xc00003c7e0?})\r\n\t/home/joe/sdk/go1.21.0/src/runtime/panic.go:914 +0x21f\r\ngo/types.(*Checker).arguments(0xc0002c05a0, 0xc0000fc300, 0xc000381a80, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0xc0008204f8, ...}, ...)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/call.go:648 +0x17a5\r\ngo/types.(*Checker).callExpr(0xc0002c05a0, 0xc000381800, 0xc0000fc300)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/call.go:302 +0x86d\r\ngo/types.(*Checker).exprInternal(0xc0002c05a0, {0x0, 0x0}, 0xc000381800, {0x116bf60, 0xc0000fc300?}, {0x0?, 0x0?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/expr.go:1359 +0x1809\r\ngo/types.(*Checker).rawExpr(0xc0002c05a0, {0x0, 0x0}, 0xc000381800, {0x116bf60?, 0xc0000fc300?}, {0x0?, 0x0?}, 0x0)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/expr.go:965 +0x1a5\r\ngo/types.(*Checker).stmt(0xc0002c05a0, 0x0, {0x116c3b0?, 0xc000692070?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:397 +0x19a\r\ngo/types.(*Checker).stmtList(0xc0002c05a0?, 0x0, {0xc000692080?, 0x0?, 0x6d4cfb?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:124 +0x85\r\ngo/types.(*Checker).funcBody(0xc0002c05a0, 0xc00052c720, {0xc00061e014?, 0xc000116b90?}, 0xc000381540, 0xc000620180, {0x0, 0x0})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:44 +0x345\r\ngo/types.(*Checker).funcDecl.func1()\r\n\t/home/joe/sdk/go1.21.0/src/go/types/decl.go:826 +0x39\r\ngo/types.(*Checker).processDelayed(0xc0002c05a0, 0x0)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:439 +0x15c\r\ngo/types.(*Checker).checkFiles(0xc0002c05a0, {0xc0000b6418, 0x1, 0x1})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:383 +0x245\r\ngo/types.(*Checker).Files(...)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:341\r\ngolang.org/x/tools/gopls/internal/lsp/cache.doTypeCheck({0x116d688, 0xc00058ef30}, 0xc00052c240, {{0xc0008826f6, 0xa}, {0xc0008826f6, 0xa}, {0xc000882710, 0x4}, {0xc0001a21f0, ...}, ...})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:1561 +0x8a5\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x116d688, 0xc00058edb0}, 0x2?, {{0xc0008826f6, 0xa}, {0xc0008826f6, 0xa}, {0xc000882710, 0x4}, {0xc0001a21f0, ...}, ...})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:1420 +0x205\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).checkPackage(0xc0000c3ed8?, {0x116d688, 0xc00058e480}, 0xc000592240)\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:674 +0x245\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).handleSyntaxPackage(0xc00052c240, {0x116d688, 0xc00058e480}, 0xc0006c5860?, {0xc0008826f6, 0xa})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:532 +0x42a\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).forEachPackageInternal.func2()\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:394 +0x2b\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t/home/joe/go/pkg/mod/golang.org/x/sync@v0.3.0/errgroup/errgroup.go:75 +0x56\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go in goroutine 158\r\n\t/home/joe/go/pkg/mod/golang.org/x/sync@v0.3.0/errgroup/errgroup.go:72 +0x96\r\n```\r\nHere is a minimal program that can reproduce the bug. Deleting the last ')' on line 8 will cause gopls to crash.\r\n\r\n\r\n",NeedsInvestigation|release-blocker,griesemer,"gopls version: (devel) (go1.21.0) _(built from 47c5305d201d9d9d835b5d6a50ef5c1ec3f7b121)_\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.21.0\r\nenvironment: Visual Studio Code linux\r\ninitialization error: undefined\r\nissue timestamp: Thu, 10 Aug 2023 15:53:47 GMT\r\nrestart history:\r\nThu, 10 Aug 2023 15:33:15 GMT: activation (enabled: true)\r\nThu, 10 Aug 2023 15:52:58 GMT: manual (enabled: true)\r\nThu, 10 Aug 2023 15:53:29 GMT: manual (enabled: true)\r\n\r\n```\r\npanic: runtime error: index out of range [2] with length 2 [recovered]\r\n\tpanic: runtime error: index out of range [2] with length 2\r\n\r\ngoroutine 227 [running]:\r\ngo/types.(*Checker).handleBailout(0xc0002c05a0, 0xc0004a7578)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:336 +0x88\r\npanic({0xe748e0?, 0xc00003c7e0?})\r\n\t/home/joe/sdk/go1.21.0/src/runtime/panic.go:914 +0x21f\r\ngo/types.(*Checker).arguments(0xc0002c05a0, 0xc0000fc300, 0xc000381a80, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0xc0008204f8, ...}, ...)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/call.go:648 +0x17a5\r\ngo/types.(*Checker).callExpr(0xc0002c05a0, 0xc000381800, 0xc0000fc300)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/call.go:302 +0x86d\r\ngo/types.(*Checker).exprInternal(0xc0002c05a0, {0x0, 0x0}, 0xc000381800, {0x116bf60, 0xc0000fc300?}, {0x0?, 0x0?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/expr.go:1359 +0x1809\r\ngo/types.(*Checker).rawExpr(0xc0002c05a0, {0x0, 0x0}, 0xc000381800, {0x116bf60?, 0xc0000fc300?}, {0x0?, 0x0?}, 0x0)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/expr.go:965 +0x1a5\r\ngo/types.(*Checker).stmt(0xc0002c05a0, 0x0, {0x116c3b0?, 0xc000692070?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:397 +0x19a\r\ngo/types.(*Checker).stmtList(0xc0002c05a0?, 0x0, {0xc000692080?, 0x0?, 0x6d4cfb?})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:124 +0x85\r\ngo/types.(*Checker).funcBody(0xc0002c05a0, 0xc00052c720, {0xc00061e014?, 0xc000116b90?}, 0xc000381540, 0xc000620180, {0x0, 0x0})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/stmt.go:44 +0x345\r\ngo/types.(*Checker).funcDecl.func1()\r\n\t/home/joe/sdk/go1.21.0/src/go/types/decl.go:826 +0x39\r\ngo/types.(*Checker).processDelayed(0xc0002c05a0, 0x0)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:439 +0x15c\r\ngo/types.(*Checker).checkFiles(0xc0002c05a0, {0xc0000b6418, 0x1, 0x1})\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:383 +0x245\r\ngo/types.(*Checker).Files(...)\r\n\t/home/joe/sdk/go1.21.0/src/go/types/check.go:341\r\ngolang.org/x/tools/gopls/internal/lsp/cache.doTypeCheck({0x116d688, 0xc00058ef30}, 0xc00052c240, {{0xc0008826f6, 0xa}, {0xc0008826f6, 0xa}, {0xc000882710, 0x4}, {0xc0001a21f0, ...}, ...})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:1561 +0x8a5\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x116d688, 0xc00058edb0}, 0x2?, {{0xc0008826f6, 0xa}, {0xc0008826f6, 0xa}, {0xc000882710, 0x4}, {0xc0001a21f0, ...}, ...})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:1420 +0x205\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).checkPackage(0xc0000c3ed8?, {0x116d688, 0xc00058e480}, 0xc000592240)\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:674 +0x245\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).handleSyntaxPackage(0xc00052c240, {0x116d688, 0xc00058e480}, 0xc0006c5860?, {0xc0008826f6, 0xa})\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:532 +0x42a\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).forEachPackageInternal.func2()\r\n\t/home/joe/tools/gopls/internal/lsp/cache/check.go:394 +0x2b\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t/home/joe/go/pkg/mod/golang.org/x/sync@v0.3.0/errgroup/errgroup.go:75 +0x56\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go in goroutine 158\r\n\t/home/joe/go/pkg/mod/golang.org/x/sync@v0.3.0/errgroup/errgroup.go:72 +0x96\r\n```\r\nHere is a minimal program that can reproduce the bug. Deleting the last ')' on line 8 will cause gopls to crash.\r\n\r\n```go\r\npackage main\r\n\r\nfunc A[T any](func(T) T, ...any) {}\r\nfunc B[T any](t T) T { return t }\r\nfunc C(args ...func(any)) any { return nil }\r\n\r\nfunc main() {\r\n\tA[any](B, C(func(any) {})) // Delete the last ) on this line\r\n}\r\n```\r\n","go\r\npackage main\r\n\r\nfunc A[T any](func(T) T, ...any) {}\r\nfunc B[T any](t T) T { return t }\r\nfunc C(args ...func(any)) any { return nil }\r\n\r\nfunc main() {\r\n\tA[any](B, C(func(any) {})) // Delete the last ) on this line\r\n}\r\n"
61921,"cmd/dist: tools built with `GOROOT_FINAL` cannot locate it when copied to another location### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ /usr/lib/go/bin/go env\r\n\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/g4s8/.cache/go-build'\r\nGOENV='/home/g4s8/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/g4s8/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/home/g4s8/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4273986275=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI'm trying to build go 1.21.0 from sources for Void Linux `go` package: https://github.com/void-linux/void-packages\r\n\r\nThe steps to build it (inside `go` repo directory):\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhen running `/usr/bin/go version` (or any other `go` command, like `go build`, etc) to see \r\n```\r\ngo version go1.21.0 linux/amd64\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nWhen running `go` command or `/usr/bin/go`:\r\n\r\n```\r\n$ go version\r\ngo: cannot find GOROOT directory: 'go' binary is trimmed and GOROOT is not set\r\n\r\n$ go build\r\ngo: cannot find GOROOT directory: 'go' binary is trimmed and GOROOT is not set\r\n```\r\n\r\nIf I run `/usr/lib/go/bin/go`, then all commands works fine:\r\n```\r\n$ /usr/lib/go/bin/go version\r\ngo version go1.21.0 linux/amd64\r\n```\r\n\r\nIf I run exactly the same build commands for go version 1.20.7, it's working fine:\r\n\r\nor\r\n",Unfortunate|NeedsDecision,bcmills,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ /usr/lib/go/bin/go env\r\n\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/g4s8/.cache/go-build'\r\nGOENV='/home/g4s8/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/g4s8/go/pkg/mod'\r\nGOOS='linux'\r\nGOPATH='/home/g4s8/go'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/usr/lib/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/usr/lib/go/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21.0'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -fmessage-length=0 -ffile-prefix-map=/tmp/go-build4273986275=/tmp/go-build -gno-record-gcc-switches'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI'm trying to build go 1.21.0 from sources for Void Linux `go` package: https://github.com/void-linux/void-packages\r\n\r\nThe steps to build it (inside `go` repo directory):\r\n```bash\r\nunset GCC CC CXX LD CFLAGS\r\nunset CGO_CXXFLAGS CGO_ENABLED\r\n\r\nexport GOROOT_FINAL=/usr/lib/go\r\nexport GOROOT=$PWD\r\nexport GOARCH=amd64\r\n\r\ncd src\r\nbash make.bash -v\r\n\r\nsudo rm -f /usr/bin/go\r\nsudo rm -fr /usr/lib/go/\r\nsudo cp  ../bin/* -t /usr/bin\r\nsudo cp -r .. /usr/lib/go\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhen running `/usr/bin/go version` (or any other `go` command, like `go build`, etc) to see \r\n```\r\ngo version go1.21.0 linux/amd64\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nWhen running `go` command or `/usr/bin/go`:\r\n\r\n```\r\n$ go version\r\ngo: cannot find GOROOT directory: 'go' binary is trimmed and GOROOT is not set\r\n\r\n$ go build\r\ngo: cannot find GOROOT directory: 'go' binary is trimmed and GOROOT is not set\r\n```\r\n\r\nIf I run `/usr/lib/go/bin/go`, then all commands works fine:\r\n```\r\n$ /usr/lib/go/bin/go version\r\ngo version go1.21.0 linux/amd64\r\n```\r\n\r\nIf I run exactly the same build commands for go version 1.20.7, it's working fine:\r\n```bash\r\n$ go version\r\ngo version go1.20.7 linux/amd64\r\n```\r\nor\r\n```bash\r\n$ /usr/bin/go version\r\ngo version go1.20.7 linux/amd64\r\n```",bash\r\nunset GCC CC CXX LD CFLAGS\r\nunset CGO_CXXFLAGS CGO_ENABLED\r\n\r\nexport GOROOT_FINAL=/usr/lib/go\r\nexport GOROOT=$PWD\r\nexport GOARCH=amd64\r\n\r\ncd src\r\nbash make.bash -v\r\n\r\nsudo rm -f /usr/bin/go\r\nsudo rm -fr /usr/lib/go/\r\nsudo cp  ../bin/* -t /usr/bin\r\nsudo cp -r .. /usr/lib/go\r\n
61918,"os: ReadDir(`\\\\.\\pipe\\`) fails with go1.21 on Windows<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\***\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\***\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\***\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\***\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\***\\sdk\\go1.21.0\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\***\\sdk\\go1.21.0\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\***\\code\\gotest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\***\\AppData\\Local\\Temp\\go-build3463100184=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`succeeded`\r\n\r\n### What did you see instead?\r\n\r\n`failed:  readdir \\\\.\\pipe\\: The system cannot find the path specified.`\r\n\r\nIt is important to note that this doesn't reproduce with go1.20.\r\nProbably related to #61907.\r\n",OS-Windows|NeedsFix,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\***\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\***\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\***\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\***\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\***\\sdk\\go1.21.0\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Users\\***\\sdk\\go1.21.0\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\***\\code\\gotest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\***\\AppData\\Local\\Temp\\go-build3463100184=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\t_, err := os.ReadDir(`\\\\.\\pipe\\`)\r\n\tif err != nil {\r\n\t\tfmt.Println(""failed: "", err)\r\n\t} else {\r\n\t\tfmt.Println(""succeeded"")\r\n\t}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`succeeded`\r\n\r\n### What did you see instead?\r\n\r\n`failed:  readdir \\\\.\\pipe\\: The system cannot find the path specified.`\r\n\r\nIt is important to note that this doesn't reproduce with go1.20.\r\nProbably related to #61907.\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\t_, err := os.ReadDir(`\\\\.\\pipe\\`)\r\n\tif err != nil {\r\n\t\tfmt.Println(""failed: "", err)\r\n\t} else {\r\n\t\tfmt.Println(""succeeded"")\r\n\t}\r\n}\r\n"
61907,"os: `ReadDir` fails on file systems without File ID support on Windows<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\hajimehoshi\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\hajimehoshi\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\hajimehoshi\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\hajimehoshi\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\\\\Mac\\Home\\unctest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\HAJIME~1\\AppData\\Local\\Temp\\go-build3663691949=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nPrepare these files in a UNC directory starting with `\\\\` like `\\\\Mac\\Home\\unctest`. Here, I assume the current directory is `\\\\Mac\\Home\\unctest`:\r\n\r\n`\\\\Mac\\Home\\unctest\\go.mod`:\r\n\r\n```\r\nmodule foo\r\n\r\ngo 1.21\r\n```\r\n\r\n`\\\\Mac\\Home\\unctest\\main.go`\r\n\r\n\r\n\r\n`\\\\Mac\\Home\\unctest\\bar\\hello.go`\r\n\r\n\r\n\r\nAnd run `go run .` at `\\\\Mac\\Home\\unctest`.\r\n\r\n### What did you expect to see?\r\n\r\n`bar` is printed\r\n\r\n### What did you see instead?\r\n\r\nRunning the program fails:\r\n\r\n```\r\nPS Microsoft.PowerShell.Core\\FileSystem::\\\\Mac\\Home\\unctest> go run .\r\nGetFileInformationByHandleEx \\\\Mac\\Home\\unctest: The parameter is incorrect.\r\n```\r\n",OS-Windows|NeedsFix,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21.0 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\hajimehoshi\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\hajimehoshi\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\hajimehoshi\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\hajimehoshi\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLCHAIN=auto\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.21.0\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\\\\Mac\\Home\\unctest\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=C:\\Users\\HAJIME~1\\AppData\\Local\\Temp\\go-build3663691949=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nPrepare these files in a UNC directory starting with `\\\\` like `\\\\Mac\\Home\\unctest`. Here, I assume the current directory is `\\\\Mac\\Home\\unctest`:\r\n\r\n`\\\\Mac\\Home\\unctest\\go.mod`:\r\n\r\n```\r\nmodule foo\r\n\r\ngo 1.21\r\n```\r\n\r\n`\\\\Mac\\Home\\unctest\\main.go`\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""foo/bar""\r\n)\r\n\r\nfunc main() {\r\n        bar.Hello()\r\n}\r\n```\r\n\r\n`\\\\Mac\\Home\\unctest\\bar\\hello.go`\r\n\r\n```go\r\npackage bar                                                                                                                                                                                                                                                                           \r\n                                                                                                                                                                                                                                                                                      \r\nfunc Hello() {                                                                                                                                                                                                                                                                        \r\n        println(""bar"")                                                                                                                                                                                                                                                                \r\n} \r\n```\r\n\r\nAnd run `go run .` at `\\\\Mac\\Home\\unctest`.\r\n\r\n### What did you expect to see?\r\n\r\n`bar` is printed\r\n\r\n### What did you see instead?\r\n\r\nRunning the program fails:\r\n\r\n```\r\nPS Microsoft.PowerShell.Core\\FileSystem::\\\\Mac\\Home\\unctest> go run .\r\nGetFileInformationByHandleEx \\\\Mac\\Home\\unctest: The parameter is incorrect.\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n        ""foo/bar""\r\n)\r\n\r\nfunc main() {\r\n        bar.Hello()\r\n}\r\n"
61903,"spec, go/types, types2: restore Go 1.20 unification when compiling for Go 1.20<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n1.21.0\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nI can reproduce this issue using playground only\r\n\r\n### What did you do?\r\n\r\nuse code \r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nno error as it is with go 1.20 https://go.dev/play/p/CEVB_qbwsPu?v=goprev\r\n\r\n### What did you see instead?\r\n\r\nerror `./prog.go:13:5: cannot infer T (prog.go:7:10)`  https://go.dev/play/p/CEVB_qbwsPu\r\n",NeedsFix|release-blocker,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n1.21.0\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nI can reproduce this issue using playground only\r\n\r\n### What did you do?\r\n\r\nuse code \r\n```go\r\n// You can edit this code!\r\n// Click here and start typing.\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype GenericType[T any] interface{}\r\n\r\nfunc get[T any](v GenericType[T]) {\r\n\r\n}\r\n\r\nfunc use() {\r\n\tvar f GenericType[int]\r\n\tget(f)\r\n}\r\n\r\nfunc main() {}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nno error as it is with go 1.20 https://go.dev/play/p/CEVB_qbwsPu?v=goprev\r\n\r\n### What did you see instead?\r\n\r\nerror `./prog.go:13:5: cannot infer T (prog.go:7:10)`  https://go.dev/play/p/CEVB_qbwsPu\r\n","go\r\n// You can edit this code!\r\n// Click here and start typing.\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype GenericType[T any] interface{}\r\n\r\nfunc get[T any](v GenericType[T]) {\r\n\r\n}\r\n\r\nfunc use() {\r\n\tvar f GenericType[int]\r\n\tget(f)\r\n}\r\n\r\nfunc main() {}\r\n\r\n"
61881,"encoding/xml: incompatible changes in the Go 1.21.0### What version of Go are you using (`go version`)?\r\n\r\nGo1.21.0\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/amd64\r\n\r\n### What did you do?\r\n\r\nThere are some incompatible changes in the Go 1.21.0 encoding/xml library. Please take a look at following example:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nOutput by Go 1.20.7 and previous Go released version\r\n\r\n```text\r\ninput:  <a xmlns=""http://example.com""><b><c>true</c></b></a>\r\noutput: <a xmlns=""http://example.com""><b><c>true</c></b></a>\r\n```\r\n\r\n### What did you see instead?\r\n\r\nOutput by Go 1.21.0\r\n\r\n```text\r\ninput:  <a xmlns=""http://example.com""><b>true</b></a>\r\noutput: <a xmlns=""http://example.com""><b xmlns=""""><c>true</c></b></a>\r\n```\r\n\r\nThere are new empty XML namespace `xmlns` attributes in the serialized output, which made the input and output XML content inconsistent without any modify. \r\n\r\nI created a patch for it and still waiting for a reply, follow up to https://go.dev/cl/466295. Relates to #58401, and external Excelize project issues [#1465](https://github.com/xuri/excelize/issues/1465), [#1595](https://github.com/xuri/excelize/issues/1595) and [#1603](https://github.com/xuri/excelize/issues/1603).\r\n\r\nThanks.",NeedsFix,ianlancetaylor,"### What version of Go are you using (`go version`)?\r\n\r\nGo1.21.0\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/amd64\r\n\r\n### What did you do?\r\n\r\nThere are some incompatible changes in the Go 1.21.0 encoding/xml library. Please take a look at following example:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    ""encoding/xml""\r\n    ""fmt""\r\n)\r\n\r\nfunc main() {\r\n    type B struct {\r\n        XMLName xml.Name `xml:""b""`\r\n        C       bool     `xml:""c""`\r\n    }\r\n\r\n    type A struct {\r\n        XMLName xml.Name `xml:""http://example.com a""`\r\n        B       B\r\n    }\r\n\r\n    var a A\r\n\r\n    input := `<a xmlns=""http://example.com""><b><c>true</c></b></a>`\r\n\r\n    if err := xml.Unmarshal([]byte(input), &a); err != nil {\r\n        fmt.Print(err)\r\n    }\r\n\r\n    output, err := xml.Marshal(&a)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n    }\r\n\r\n    fmt.Printf(""input:  %s\\r\\noutput: %s"", input, string(output))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nOutput by Go 1.20.7 and previous Go released version\r\n\r\n```text\r\ninput:  <a xmlns=""http://example.com""><b><c>true</c></b></a>\r\noutput: <a xmlns=""http://example.com""><b><c>true</c></b></a>\r\n```\r\n\r\n### What did you see instead?\r\n\r\nOutput by Go 1.21.0\r\n\r\n```text\r\ninput:  <a xmlns=""http://example.com""><b>true</b></a>\r\noutput: <a xmlns=""http://example.com""><b xmlns=""""><c>true</c></b></a>\r\n```\r\n\r\nThere are new empty XML namespace `xmlns` attributes in the serialized output, which made the input and output XML content inconsistent without any modify. \r\n\r\nI created a patch for it and still waiting for a reply, follow up to https://go.dev/cl/466295. Relates to #58401, and external Excelize project issues [#1465](https://github.com/xuri/excelize/issues/1465), [#1595](https://github.com/xuri/excelize/issues/1595) and [#1603](https://github.com/xuri/excelize/issues/1603).\r\n\r\nThanks.","go\r\npackage main\r\n\r\nimport (\r\n    ""encoding/xml""\r\n    ""fmt""\r\n)\r\n\r\nfunc main() {\r\n    type B struct {\r\n        XMLName xml.Name `xml:""b""`\r\n        C       bool     `xml:""c""`\r\n    }\r\n\r\n    type A struct {\r\n        XMLName xml.Name `xml:""http://example.com a""`\r\n        B       B\r\n    }\r\n\r\n    var a A\r\n\r\n    input := `<a xmlns=""http://example.com""><b><c>true</c></b></a>`\r\n\r\n    if err := xml.Unmarshal([]byte(input), &a); err != nil {\r\n        fmt.Print(err)\r\n    }\r\n\r\n    output, err := xml.Marshal(&a)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n    }\r\n\r\n    fmt.Printf(""input:  %s\\r\\noutput: %s"", input, string(output))\r\n}\r\n"
61835,"runtime: data race on stack object when using arena on darwin arm64<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/r/Library/Caches/go-build'\r\nGOENV='/Users/r/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE='catdb.io'\r\nGOMODCACHE='/Users/r/go/pkg/mod'\r\nGONOPROXY='catdb.io'\r\nGONOSUMDB='catdb.io'\r\nGOOS='darwin'\r\nGOPATH='/Users/r/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/r/sdk/go1.21rc4'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/r/sdk/go1.21rc4/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build3636825793=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\nGOROOT/bin/go version: go version go1.21rc4 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.21rc4\r\nuname -v: Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.3.1\r\nProductVersionExtra:\t(a)\r\nBuildVersion:\t\t22E772610a\r\nlldb --version: lldb-1403.0.17.67\r\nApple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ntest7.go:\r\n\r\n\r\n\r\nrun with race:\r\n\r\n\r\n### What did you expect to see?\r\nNo race.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00e400013918 by goroutine 146912:\r\n  main.fill()\r\n      /Users/r/workspace/testcode/testarena/test7.go:36 +0x40\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:42 +0x44\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.run.func1()\r\n      /Users/r/workspace/testcode/testarena/test7.go:19 +0x5c\r\n  main.run.func2()\r\n      /Users/r/workspace/testcode/testarena/test7.go:20 +0x44\r\n\r\nPrevious write at 0x00e400013918 by goroutine 146908:\r\n  main.fill()\r\n      /Users/r/workspace/testcode/testarena/test7.go:36 +0x40\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:42 +0x44\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.run.func1()\r\n      /Users/r/workspace/testcode/testarena/test7.go:19 +0x5c\r\n  main.run.func2()\r\n      /Users/r/workspace/testcode/testarena/test7.go:20 +0x44\r\n\r\nGoroutine 146912 (running) created at:\r\n  main.run()\r\n      /Users/r/workspace/testcode/testarena/test7.go:17 +0x1a8\r\n\r\nGoroutine 146908 (finished) created at:\r\n  main.run()\r\n      /Users/r/workspace/testcode/testarena/test7.go:17 +0x1a8\r\n==================\r\n```\r\n\r\n",RaceDetector|NeedsInvestigation|arch-arm64|compiler/runtime,mknyszek,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/r/Library/Caches/go-build'\r\nGOENV='/Users/r/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE='catdb.io'\r\nGOMODCACHE='/Users/r/go/pkg/mod'\r\nGONOPROXY='catdb.io'\r\nGONOSUMDB='catdb.io'\r\nGOOS='darwin'\r\nGOPATH='/Users/r/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/r/sdk/go1.21rc4'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/r/sdk/go1.21rc4/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc4'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build3636825793=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\nGOROOT/bin/go version: go version go1.21rc4 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.21rc4\r\nuname -v: Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.3.1\r\nProductVersionExtra:\t(a)\r\nBuildVersion:\t\t22E772610a\r\nlldb --version: lldb-1403.0.17.67\r\nApple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ntest7.go:\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""arena""\r\n\t""sync""\r\n)\r\n\r\nconst N = 200\r\nconst M = 2000000\r\n\r\nfunc run() {\r\n\tfor {\r\n\t\tarn := arena.NewArena()\r\n\t\tvar wg sync.WaitGroup\r\n\t\tfor i := 0; i < 2000; i++ {\r\n\t\t\twg.Add(1)\r\n\t\t\tgo func(i int) {\r\n\t\t\t\tdefer wg.Done()\r\n\t\t\t\tprocess(0)\r\n\t\t\t}(i % 15)\r\n\t\t\tif i%2 == 0 {\r\n\t\t\t\tarena.MakeSlice[*int](arn, M/8, M/8)\r\n\t\t\t} else {\r\n\t\t\t\ts := make([]*int, i)\r\n\t\t\t\t_ = s\r\n\t\t\t}\r\n\t\t}\r\n\t\twg.Wait()\r\n\t\tarn.Free()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc fill(a *[N]int) {\r\n\tfor i := range a {\r\n\t\ta[i] = i\r\n\t}\r\n}\r\n\r\nfunc process(k int) int {\r\n\tvar a [N]int\r\n\tfill(&a)\r\n\tif k > 10 {\r\n\t\treturn 0\r\n\t}\r\n\treturn process(k + 1)\r\n}\r\n\r\nfunc main() {\r\n\tfor i := 0; i < 10; i++ {\r\n\t\tgo run()\r\n\t}\r\n\trun()\r\n}\r\n```\r\n\r\nrun with race:\r\n```bash\r\nGOEXPERIMENT=arenas  go1.21rc4 run -race test7.go\r\n```\r\n\r\n### What did you expect to see?\r\nNo race.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00e400013918 by goroutine 146912:\r\n  main.fill()\r\n      /Users/r/workspace/testcode/testarena/test7.go:36 +0x40\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:42 +0x44\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.run.func1()\r\n      /Users/r/workspace/testcode/testarena/test7.go:19 +0x5c\r\n  main.run.func2()\r\n      /Users/r/workspace/testcode/testarena/test7.go:20 +0x44\r\n\r\nPrevious write at 0x00e400013918 by goroutine 146908:\r\n  main.fill()\r\n      /Users/r/workspace/testcode/testarena/test7.go:36 +0x40\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:42 +0x44\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.process()\r\n      /Users/r/workspace/testcode/testarena/test7.go:46 +0x6c\r\n  main.run.func1()\r\n      /Users/r/workspace/testcode/testarena/test7.go:19 +0x5c\r\n  main.run.func2()\r\n      /Users/r/workspace/testcode/testarena/test7.go:20 +0x44\r\n\r\nGoroutine 146912 (running) created at:\r\n  main.run()\r\n      /Users/r/workspace/testcode/testarena/test7.go:17 +0x1a8\r\n\r\nGoroutine 146908 (finished) created at:\r\n  main.run()\r\n      /Users/r/workspace/testcode/testarena/test7.go:17 +0x1a8\r\n==================\r\n```\r\n\r\n","golang\r\npackage main\r\n\r\nimport (\r\n\t""arena""\r\n\t""sync""\r\n)\r\n\r\nconst N = 200\r\nconst M = 2000000\r\n\r\nfunc run() {\r\n\tfor {\r\n\t\tarn := arena.NewArena()\r\n\t\tvar wg sync.WaitGroup\r\n\t\tfor i := 0; i < 2000; i++ {\r\n\t\t\twg.Add(1)\r\n\t\t\tgo func(i int) {\r\n\t\t\t\tdefer wg.Done()\r\n\t\t\t\tprocess(0)\r\n\t\t\t}(i % 15)\r\n\t\t\tif i%2 == 0 {\r\n\t\t\t\tarena.MakeSlice[*int](arn, M/8, M/8)\r\n\t\t\t} else {\r\n\t\t\t\ts := make([]*int, i)\r\n\t\t\t\t_ = s\r\n\t\t\t}\r\n\t\t}\r\n\t\twg.Wait()\r\n\t\tarn.Free()\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc fill(a *[N]int) {\r\n\tfor i := range a {\r\n\t\ta[i] = i\r\n\t}\r\n}\r\n\r\nfunc process(k int) int {\r\n\tvar a [N]int\r\n\tfill(&a)\r\n\tif k > 10 {\r\n\t\treturn 0\r\n\t}\r\n\treturn process(k + 1)\r\n}\r\n\r\nfunc main() {\r\n\tfor i := 0; i < 10; i++ {\r\n\t\tgo run()\r\n\t}\r\n\trun()\r\n}\r\n"
61774,"log/slog:  one allocation in TextHandler with ReplaceAttrDisclaimer: I was messing around with slog mostly for my own amusement and none of this comes from an actual need.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version go1.21rc4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes, with go1.21rc4\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nnot relevant\r\n\r\n### What did you do?\r\nWhen using TextHandler with slog and setting ReplaceAttr, there's one allocation per log rather than zero.\r\nNote that with JSONHandler, there are 4 allocations reported by this test and I haven't tracked them down.\r\n\r\n\r\n\r\n### What did you expect to see?\r\nTest passing\r\n\r\n\r\n### What did you see instead?\r\n`allocs without ReplaceAttr 0 != allocs with ReplaceAttr 1`\r\n\r\n### More context\r\nThe difference is that without ReplaceAttr, Level is [directly converted to string](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/handler.go#L282-L287) and with it, it's kept as the Level type so that ReplaceAttr can act on the Level type.\r\n\r\nWhen it comes time to print Level's value, [its implementation of MarshalText](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/level.go#L103) returns a byte slice, but the conversion from string to byte slice causes an allocation. This is basically a limitation of the TextMarshaler interface. Not that everything we are seeing here applies to any marshaling of slog.Any wrapped values.\r\n\r\nI don't think there's a more efficient way to implement MarshalText for Level. I considered two bad alternatives:\r\n* Level.MarshalText can use the unsafe package to create a byte slice from a string without the allocation. The weird thing about this is that it exposes the memory in such a way that if the caller of MarshalText assigns to any of the returned bytes, it causes a segfault. It would be weird for the caller to do that, but risking a segfault is not something we'd want to expose anyone to.\r\n* Level.MarshalText can return pre-allocated global slices for the standard levels. This is also less safe that what happens now, but instead of a segfault, assigning to the returned slice results in log levels being printed incorrectly for future logs.\r\n\r\n### Proposed solution\r\nPrioritizing `Stringer` over `TextMarshaler` would solve this issue. We can put this:\r\n```\r\n\t\tif st, ok := v.Any().(fmt.Stringer); ok {\r\n\t\t\ts.appendString(st.String())\r\n\t\t\treturn nil\r\n\t\t}\r\n```\r\nright [here](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/text_handler.go#L105) above the TextMarshaler check.\r\n\r\nRight now `String()` is effectively what's called if `TextMarshaler` is not implemented, but it's called indirectly through `fmt.Sprintf(""%+v"", v.Any())`, which causes an allocation. By putting the stringer option first and doing it explicitly, we give all ""Any"" values an opportunity to marshal themselves efficiently as strings.\r\n\r\nA similar trick can be done in appendJSONMarshal for the json case to remove all 4 allocations. I think it wouldn't be completely crazy for slog to prefer to format values as strings regardless of the encoding of the logs. It can be argued that the encoding of the logs shouldn't affect the content of the logs and the preference for using Stringer would make the two implementations more consistent with each other.",Performance|NeedsInvestigation,jba,"Disclaimer: I was messing around with slog mostly for my own amusement and none of this comes from an actual need.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version go1.21rc4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes, with go1.21rc4\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nnot relevant\r\n\r\n### What did you do?\r\nWhen using TextHandler with slog and setting ReplaceAttr, there's one allocation per log rather than zero.\r\nNote that with JSONHandler, there are 4 allocations reported by this test and I haven't tracked them down.\r\n```go\r\npackage alloc_test\r\n\r\nimport (\r\n\t""io""\r\n\t""log/slog""\r\n\t""testing""\r\n)\r\n\r\nfunc TestAlloc(t *testing.T) {\r\n\tpureLogger := slog.New(slog.NewTextHandler(io.Discard, nil))\r\n\treplaceLogger := slog.New(slog.NewTextHandler(io.Discard, &slog.HandlerOptions{\r\n\t\tReplaceAttr: func(groups []string, a slog.Attr) slog.Attr { return a },\r\n\t}))\r\n\tpureAllocs := testing.AllocsPerRun(1, func() {\r\n\t\tpureLogger.Info(""hello"")\r\n\t})\r\n\treplaceAllocs := testing.AllocsPerRun(1, func() {\r\n\t\treplaceLogger.Info(""hello"")\r\n\t})\r\n\tif pureAllocs != replaceAllocs {\r\n\t\tt.Fatalf(""allocs without ReplaceAttr %.0f != allocs with ReplaceAttr %.0f"", pureAllocs, replaceAllocs)\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nTest passing\r\n\r\n\r\n### What did you see instead?\r\n`allocs without ReplaceAttr 0 != allocs with ReplaceAttr 1`\r\n\r\n### More context\r\nThe difference is that without ReplaceAttr, Level is [directly converted to string](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/handler.go#L282-L287) and with it, it's kept as the Level type so that ReplaceAttr can act on the Level type.\r\n\r\nWhen it comes time to print Level's value, [its implementation of MarshalText](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/level.go#L103) returns a byte slice, but the conversion from string to byte slice causes an allocation. This is basically a limitation of the TextMarshaler interface. Not that everything we are seeing here applies to any marshaling of slog.Any wrapped values.\r\n\r\nI don't think there's a more efficient way to implement MarshalText for Level. I considered two bad alternatives:\r\n* Level.MarshalText can use the unsafe package to create a byte slice from a string without the allocation. The weird thing about this is that it exposes the memory in such a way that if the caller of MarshalText assigns to any of the returned bytes, it causes a segfault. It would be weird for the caller to do that, but risking a segfault is not something we'd want to expose anyone to.\r\n* Level.MarshalText can return pre-allocated global slices for the standard levels. This is also less safe that what happens now, but instead of a segfault, assigning to the returned slice results in log levels being printed incorrectly for future logs.\r\n\r\n### Proposed solution\r\nPrioritizing `Stringer` over `TextMarshaler` would solve this issue. We can put this:\r\n```\r\n\t\tif st, ok := v.Any().(fmt.Stringer); ok {\r\n\t\t\ts.appendString(st.String())\r\n\t\t\treturn nil\r\n\t\t}\r\n```\r\nright [here](https://github.com/golang/go/blob/release-branch.go1.21/src/log/slog/text_handler.go#L105) above the TextMarshaler check.\r\n\r\nRight now `String()` is effectively what's called if `TextMarshaler` is not implemented, but it's called indirectly through `fmt.Sprintf(""%+v"", v.Any())`, which causes an allocation. By putting the stringer option first and doing it explicitly, we give all ""Any"" values an opportunity to marshal themselves efficiently as strings.\r\n\r\nA similar trick can be done in appendJSONMarshal for the json case to remove all 4 allocations. I think it wouldn't be completely crazy for slog to prefer to format values as strings regardless of the encoding of the logs. It can be argued that the encoding of the logs shouldn't affect the content of the logs and the preference for using Stringer would make the two implementations more consistent with each other.","go\r\npackage alloc_test\r\n\r\nimport (\r\n\t""io""\r\n\t""log/slog""\r\n\t""testing""\r\n)\r\n\r\nfunc TestAlloc(t *testing.T) {\r\n\tpureLogger := slog.New(slog.NewTextHandler(io.Discard, nil))\r\n\treplaceLogger := slog.New(slog.NewTextHandler(io.Discard, &slog.HandlerOptions{\r\n\t\tReplaceAttr: func(groups []string, a slog.Attr) slog.Attr { return a },\r\n\t}))\r\n\tpureAllocs := testing.AllocsPerRun(1, func() {\r\n\t\tpureLogger.Info(""hello"")\r\n\t})\r\n\treplaceAllocs := testing.AllocsPerRun(1, func() {\r\n\t\treplaceLogger.Info(""hello"")\r\n\t})\r\n\tif pureAllocs != replaceAllocs {\r\n\t\tt.Fatalf(""allocs without ReplaceAttr %.0f != allocs with ReplaceAttr %.0f"", pureAllocs, replaceAllocs)\r\n\t}\r\n}\r\n"
61751,"syscall: nextfd handling for attr.Files shuffle will clobber files### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/cyphar/.cache/go-build""\r\nGOENV=""/home/cyphar/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/cyphar/.local/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/cyphar/.local""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib64/go/1.20""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib64/go/1.20/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.6""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/cyphar/.local/src/github.com/opencontainers/runc/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3122356899=/tmp/go-build -gno-record-gcc-switches""\r\ncyphar@senku\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nFor a bit of background, I am working on [a runc patch](https://github.com/opencontainers/runc/pull/3953) to move some code we currently do in C to Go. The particular issue I ran into is related to some slightly awful stuff we do in runc in order to protect against certain container attacks (such as ) where we create a copy of the running executable (from `/proc/self/exe`) and actually execute a copy of the binary (usually a memfd) when running code inside the container.\r\n\r\nI am giving this background to preempt questions about ""why on earth do you need to do this"" when I give you the example program. :sweat_smile: \r\n\r\n<details><summary><a href=""https://go.dev/play/p/EN7Bf-OThar"">https://go.dev/play/p/EN7Bf-OThar</a></summary>\r\n\r\n\r\n\r\n</details>\r\n\r\nIf you adjust binTrueFd to be any other value, you'll see the program runs without issues.\r\n\r\nThe workaround for this problem is to pass the intended executable file as an `attr.Files`, even though we don't use it, but this results in a non-`O_CLOEXEC` descriptor being passed to the child which I consider a security risk (at least in the context of runc). We have many other protections against leaking file descriptors to containers, so this isn't a problem for us -- but it seems that this is an actual bug in the stdlib that should be fixed.\r\n\r\n### What did you expect to see?\r\n\r\nThe `syscall.StartProcess` call should execute the file descriptor specified by `/proc/self/fd/$n` without the Go stdlib overwriting said file descriptor.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nrun /bin/true: fork/exec /proc/self/fd/9001: permission denied\r\n```\r\n\r\nThe execve will attempt to exec a completely incorrect file descriptor, which in the best case will fail, and in the worst case will execute a completely unexpected program (in runc's case, as root).\r\n\r\nIn the case of the runc PR I mentioned above, this issue is only triggered by a single test because there is an apparent file descriptor leak which causes the file descriptor to be large enough that it gets overwritten -- meaning that the possible security issue (`runc` runs as root and has no restrictions in this context) is non-deterministic in our testing.\r\n\r\n### Analysis\r\n\r\nThe bug is caused by an assumption in `forkAndExecInChild1` that the largest file descriptor relevant to the process is always included in `attr.Files` and that thus any larger file descriptors can be used as scratch space.\r\n\r\nUnfortunately there isn't a particularly pretty solution to figuring out the largest file descriptor present in a process other that doing a readdir of `/proc/self/fd`. I suspect that one of the following solutions would be more workable:\r\n\r\n * Open the execve program path as `O_PATH` and make sure `nextfd` is larger than it (or special-case it like `pipe` is today), and then do `execveat(AT_EMPTY_PATH)` to exec the program through a file descriptor (as an aside, the ability to do this as a user would be really nice!). This would plug this particular hole, and I suspect that the `execve` path is the only case where this bug could be hit.\r\n * Rather than using this whole `nextfd` logic for file descriptor shuffling (which appears to be used purely because `dup3()` requires a target descriptor and we want the cloned descriptors to be `O_CLOEXEC`), use `F_DUPFD_CLOEXEC` to avoid having to manage the new file descriptor number.\r\n\r\nI think the second option would clean up the existing code the most, but as a user it would be nice to be able to use `execveat(2)` with the Go stdlib.",NeedsFix|compiler/runtime,cyphar,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/cyphar/.cache/go-build""\r\nGOENV=""/home/cyphar/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/cyphar/.local/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/cyphar/.local""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib64/go/1.20""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib64/go/1.20/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.6""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/cyphar/.local/src/github.com/opencontainers/runc/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3122356899=/tmp/go-build -gno-record-gcc-switches""\r\ncyphar@senku\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nFor a bit of background, I am working on [a runc patch](https://github.com/opencontainers/runc/pull/3953) to move some code we currently do in C to Go. The particular issue I ran into is related to some slightly awful stuff we do in runc in order to protect against certain container attacks (such as ) where we create a copy of the running executable (from `/proc/self/exe`) and actually execute a copy of the binary (usually a memfd) when running code inside the container.\r\n\r\nI am giving this background to preempt questions about ""why on earth do you need to do this"" when I give you the example program. :sweat_smile: \r\n\r\n<details><summary><a href=""https://go.dev/play/p/EN7Bf-OThar"">https://go.dev/play/p/EN7Bf-OThar</a></summary>\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/exec""\r\n\t""runtime""\r\n\t""syscall""\r\n)\r\n\r\nfunc mustOpen(path string) *os.File {\r\n\tf, err := os.Open(path)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn f\r\n}\r\n\r\nfunc main() {\r\n\t// A file we want to execute.\r\n\tbinTrueOriginal := mustOpen(""/bin/true"")\r\n\t// A random other file we cannot execute.\r\n\tdevNullOriginal := mustOpen(""/dev/null"")\r\n\r\n\t// Change the file descriptors such that devNull is a large descriptor and\r\n\t// binTrue is one higher. This will cause binTrue to become nextfd and thus\r\n\t// be clobbered by the devNull copy made for the shuffling.\r\n\tdevNullFd := 9000\r\n\tbinTrueFd := devNullFd + 1\r\n\tif err := syscall.Dup2(int(devNullOriginal.Fd()), devNullFd); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdevNull := os.NewFile(uintptr(devNullFd), ""/dev/null (dup'd)"")\r\n\tif err := syscall.Dup2(int(binTrueOriginal.Fd()), binTrueFd); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tbinTrue := os.NewFile(uintptr(binTrueFd), ""/dev/null (dup'd)"")\r\n\r\n\t// Try to run binTrue through /proc/self/fd/$n.\r\n\tpath := fmt.Sprintf(""/proc/self/fd/%d"", binTrue.Fd())\r\n\tcmd := exec.Command(path)\r\n\tcmd.ExtraFiles = []*os.File{devNull}\r\n\terr := cmd.Run()\r\n\tfmt.Printf(""run /bin/true: %v\\n"", err)\r\n\r\n\truntime.KeepAlive(binTrue)\r\n}\r\n```\r\n\r\n</details>\r\n\r\nIf you adjust binTrueFd to be any other value, you'll see the program runs without issues.\r\n\r\nThe workaround for this problem is to pass the intended executable file as an `attr.Files`, even though we don't use it, but this results in a non-`O_CLOEXEC` descriptor being passed to the child which I consider a security risk (at least in the context of runc). We have many other protections against leaking file descriptors to containers, so this isn't a problem for us -- but it seems that this is an actual bug in the stdlib that should be fixed.\r\n\r\n### What did you expect to see?\r\n\r\nThe `syscall.StartProcess` call should execute the file descriptor specified by `/proc/self/fd/$n` without the Go stdlib overwriting said file descriptor.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nrun /bin/true: fork/exec /proc/self/fd/9001: permission denied\r\n```\r\n\r\nThe execve will attempt to exec a completely incorrect file descriptor, which in the best case will fail, and in the worst case will execute a completely unexpected program (in runc's case, as root).\r\n\r\nIn the case of the runc PR I mentioned above, this issue is only triggered by a single test because there is an apparent file descriptor leak which causes the file descriptor to be large enough that it gets overwritten -- meaning that the possible security issue (`runc` runs as root and has no restrictions in this context) is non-deterministic in our testing.\r\n\r\n### Analysis\r\n\r\nThe bug is caused by an assumption in `forkAndExecInChild1` that the largest file descriptor relevant to the process is always included in `attr.Files` and that thus any larger file descriptors can be used as scratch space.\r\n\r\nUnfortunately there isn't a particularly pretty solution to figuring out the largest file descriptor present in a process other that doing a readdir of `/proc/self/fd`. I suspect that one of the following solutions would be more workable:\r\n\r\n * Open the execve program path as `O_PATH` and make sure `nextfd` is larger than it (or special-case it like `pipe` is today), and then do `execveat(AT_EMPTY_PATH)` to exec the program through a file descriptor (as an aside, the ability to do this as a user would be really nice!). This would plug this particular hole, and I suspect that the `execve` path is the only case where this bug could be hit.\r\n * Rather than using this whole `nextfd` logic for file descriptor shuffling (which appears to be used purely because `dup3()` requires a target descriptor and we want the cloned descriptors to be `O_CLOEXEC`), use `F_DUPFD_CLOEXEC` to avoid having to manage the new file descriptor number.\r\n\r\nI think the second option would clean up the existing code the most, but as a user it would be nice to be able to use `execveat(2)` with the Go stdlib.","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/exec""\r\n\t""runtime""\r\n\t""syscall""\r\n)\r\n\r\nfunc mustOpen(path string) *os.File {\r\n\tf, err := os.Open(path)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn f\r\n}\r\n\r\nfunc main() {\r\n\t// A file we want to execute.\r\n\tbinTrueOriginal := mustOpen(""/bin/true"")\r\n\t// A random other file we cannot execute.\r\n\tdevNullOriginal := mustOpen(""/dev/null"")\r\n\r\n\t// Change the file descriptors such that devNull is a large descriptor and\r\n\t// binTrue is one higher. This will cause binTrue to become nextfd and thus\r\n\t// be clobbered by the devNull copy made for the shuffling.\r\n\tdevNullFd := 9000\r\n\tbinTrueFd := devNullFd + 1\r\n\tif err := syscall.Dup2(int(devNullOriginal.Fd()), devNullFd); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdevNull := os.NewFile(uintptr(devNullFd), ""/dev/null (dup'd)"")\r\n\tif err := syscall.Dup2(int(binTrueOriginal.Fd()), binTrueFd); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tbinTrue := os.NewFile(uintptr(binTrueFd), ""/dev/null (dup'd)"")\r\n\r\n\t// Try to run binTrue through /proc/self/fd/$n.\r\n\tpath := fmt.Sprintf(""/proc/self/fd/%d"", binTrue.Fd())\r\n\tcmd := exec.Command(path)\r\n\tcmd.ExtraFiles = []*os.File{devNull}\r\n\terr := cmd.Run()\r\n\tfmt.Printf(""run /bin/true: %v\\n"", err)\r\n\r\n\truntime.KeepAlive(binTrue)\r\n}\r\n"
61741,"cmd/compile: different results between inferred generic type argument and explicit generic type argument<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt is currently reproducing on the latest gotipplay\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/kyle.lemons/Library/Caches/go-build'\r\nGOENV='/Users/kyle.lemons/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/kyle.lemons/go/pkg/mod'\r\nGONOPROXY='<snip>'\r\nGONOSUMDB='<snip>'\r\nGOOS='darwin'\r\nGOPATH='/Users/kyle.lemons/go'\r\nGOPRIVATE='<snip>'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/kyle.lemons/sdk/go1.21rc3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/kyle.lemons/sdk/go1.21rc3/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc3'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/kyle.lemons/dev/<snip>/infrared-generator/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t8/cjh0whg91cz4xv7fqwhx374r0000gp/T/go-build2237738850=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\nGOROOT/bin/go version: go version go1.21rc3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.21rc3\r\nuname -v: Darwin Kernel Version 22.5.0: Thu Jun  8 22:22:20 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.4.1\r\nBuildVersion:\t\t22F82\r\nlldb --version: lldb-1403.0.17.67\r\nApple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://gotipplay.golang.org/p/sUrlIpN1rLa\r\n\r\nGiven a generic interface+function pair:\r\n\r\n\r\nand a valid implementation of the above interface:\r\n\r\n\r\nand the two calls below:\r\n\r\n\r\nThe generic type inference can correctly infer the type for WriteFile in the second case, and it matches the explicit type argument from the first call, but it still gives an error.\r\n\r\n### What did you expect to see?\r\n\r\nI expect both of these lines to work:\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\ntype Object of Object{} does not match inferred type RuntimeObject for T\r\n```",Thinking|TypeInference|compiler/runtime,griesemer,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt is currently reproducing on the latest gotipplay\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE='on'\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/kyle.lemons/Library/Caches/go-build'\r\nGOENV='/Users/kyle.lemons/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/kyle.lemons/go/pkg/mod'\r\nGONOPROXY='<snip>'\r\nGONOSUMDB='<snip>'\r\nGOOS='darwin'\r\nGOPATH='/Users/kyle.lemons/go'\r\nGOPRIVATE='<snip>'\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/kyle.lemons/sdk/go1.21rc3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/kyle.lemons/sdk/go1.21rc3/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc3'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/kyle.lemons/dev/<snip>/infrared-generator/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/t8/cjh0whg91cz4xv7fqwhx374r0000gp/T/go-build2237738850=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\nGOROOT/bin/go version: go version go1.21rc3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.21rc3\r\nuname -v: Darwin Kernel Version 22.5.0: Thu Jun  8 22:22:20 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.4.1\r\nBuildVersion:\t\t22F82\r\nlldb --version: lldb-1403.0.17.67\r\nApple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://gotipplay.golang.org/p/sUrlIpN1rLa\r\n\r\nGiven a generic interface+function pair:\r\n```go\r\ntype FileCodec[T any] interface {\r\n\tEncode(w io.Writer, data T) error\r\n}\r\n\r\nfunc WriteFile[T any](path string, codec FileCodec[T], data T) error\r\n```\r\n\r\nand a valid implementation of the above interface:\r\n```go\r\ntype RuntimeObject interface {\r\n\tGroupVersionKind() string\r\n}\r\n\r\ntype KubeCodec struct{}\r\n\r\nfunc (KubeCodec) Encode(w io.Writer, data RuntimeObject) error\r\n```\r\n\r\nand the two calls below:\r\n```go\r\ntype Object struct{}\r\n\r\nfunc (Object) GroupVersionKind() string { return ""object"" }\r\n\r\nfunc main() {\r\n\tWriteFile[RuntimeObject](""works"", KubeCodec{}, Object{})\r\n\tWriteFile(""fails"", KubeCodec{}, Object{}) // type Object of Object{} does not match inferred type RuntimeObject for T\r\n}\r\n```\r\n\r\nThe generic type inference can correctly infer the type for WriteFile in the second case, and it matches the explicit type argument from the first call, but it still gives an error.\r\n\r\n### What did you expect to see?\r\n\r\nI expect both of these lines to work:\r\n```go\r\n\tWriteFile[RuntimeObject](""works"", KubeCodec{}, Object{})\r\n\tWriteFile(""fails"", KubeCodec{}, Object{})\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\ntype Object of Object{} does not match inferred type RuntimeObject for T\r\n```","go\r\ntype FileCodec[T any] interface {\r\n\tEncode(w io.Writer, data T) error\r\n}\r\n\r\nfunc WriteFile[T any](path string, codec FileCodec[T], data T) error\r\n"
61730,"cmd/compile: compiler stores a stack pointer into a global object<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, I can reproduce in go1.20.7 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""xxx/.cache/go-build""\r\nGOENV=""xxx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""xxx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""xxx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""xxx/golang/go1.20.5""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""xxx/golang/go1.20.5/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2743047067=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI use go1.20.5 to compile the following code:\r\n\r\nIn the generated SSA and assembly code, I notice that the Go compiler generates some instructions that store a stack pointer(point to the stack-allocated array) into a global slice header.\r\n\r\nJust like the assembly code below, the MOV instruction at 0x4585bf stores a stack pointer into a global object: \r\n```asm\r\n  0x458589\t\t48c744240800000000       MOVQ $0x0, 0x8(SP)\t\r\n  0x458592\t\t48c74424082a000000\tMOVQ $0x2a, 0x8(SP)\t\r\n\ttestCases := [...][][]int{\r\n  0x45859b\t\t48c705c28e060001000000\tMOVQ $0x1, 0x68ec2(IP)\t\t\t\r\n  0x4585a6\t\t48c705bf8e060001000000\tMOVQ $0x1, 0x68ebf(IP)\t\t\t\r\n  0x4585b1\t\t833d988d090000\t\tCMPL $0x0, runtime.writeBarrier(SB)\t\r\n  0x4585b8\t\t750e\t\t\tJNE 0x4585c8\t\t\t\t\r\n  0x4585ba\t\t488d442408\t\tLEAQ 0x8(SP), AX\t\t\t\r\n  0x4585bf\t\t4889059a8e0600\t\tMOVQ AX, 0x68e9a(IP)\t\t\t\r\n  0x4585c6\t\teb11\t\t\tJMP 0x4585d9\t\t\t\t\r\n  0x4585c8\t\t488d3d918e0600\t\tLEAQ 0x68e91(IP), DI\t\t\t\r\n  0x4585cf\t\t488d442408\t\tLEAQ 0x8(SP), AX\t\t\t\r\n  0x4585d4\t\te8e7cfffff\t\tCALL runtime.gcWriteBarrier(SB)\r\n```\r\nI have read the comments in [slicelit](https://github.com/golang/go/blob/fb6f38dda15d4155b500f6b3e1a311a951a22b69/src/cmd/compile/internal/walk/complit.go#L288),  but I didn't find any operations that can generate such stores. As far as I know, pointers to stack objects cannot be stored in global objects. So is this a compiler bug? Or the Go compiler does this on purpose to achieve some optimization I don't know yet?\r\n\r\nnote: this is originally posted on [golang-nuts](https://groups.google.com/g/golang-nuts/c/YZVFzwnPixM)\r\n\r\nThanks\r\n\r\n### What did you expect to see?\r\n\r\nThe stack pointer is not stored into any global object.\r\n\r\n### What did you see instead?\r\n\r\nThe stack pointer is stored into a global object.\r\n\r\n",NeedsInvestigation|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, I can reproduce in go1.20.7 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""xxx/.cache/go-build""\r\nGOENV=""xxx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""xxx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""xxx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""xxx/golang/go1.20.5""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""xxx/golang/go1.20.5/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2743047067=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI use go1.20.5 to compile the following code:\r\n```go\r\npackage main\r\n\r\nfunc use(...interface{}) {\r\n   \r\n}\r\n\r\nfunc main() {\r\n    testCases := [...][][]int{\r\n        {{42}},\r\n        {{1, 2}},\r\n        {{3, 4, 5}},\r\n        {{}},\r\n        {{1, 2}, {3, 4, 5}, {}, {7}},\r\n    }\r\n    for _, testCase := range testCases {\r\n        use(testCase)\r\n    }\r\n}\r\n```\r\nIn the generated SSA and assembly code, I notice that the Go compiler generates some instructions that store a stack pointer(point to the stack-allocated array) into a global slice header.\r\n\r\nJust like the assembly code below, the MOV instruction at 0x4585bf stores a stack pointer into a global object: \r\n```asm\r\n  0x458589\t\t48c744240800000000       MOVQ $0x0, 0x8(SP)\t\r\n  0x458592\t\t48c74424082a000000\tMOVQ $0x2a, 0x8(SP)\t\r\n\ttestCases := [...][][]int{\r\n  0x45859b\t\t48c705c28e060001000000\tMOVQ $0x1, 0x68ec2(IP)\t\t\t\r\n  0x4585a6\t\t48c705bf8e060001000000\tMOVQ $0x1, 0x68ebf(IP)\t\t\t\r\n  0x4585b1\t\t833d988d090000\t\tCMPL $0x0, runtime.writeBarrier(SB)\t\r\n  0x4585b8\t\t750e\t\t\tJNE 0x4585c8\t\t\t\t\r\n  0x4585ba\t\t488d442408\t\tLEAQ 0x8(SP), AX\t\t\t\r\n  0x4585bf\t\t4889059a8e0600\t\tMOVQ AX, 0x68e9a(IP)\t\t\t\r\n  0x4585c6\t\teb11\t\t\tJMP 0x4585d9\t\t\t\t\r\n  0x4585c8\t\t488d3d918e0600\t\tLEAQ 0x68e91(IP), DI\t\t\t\r\n  0x4585cf\t\t488d442408\t\tLEAQ 0x8(SP), AX\t\t\t\r\n  0x4585d4\t\te8e7cfffff\t\tCALL runtime.gcWriteBarrier(SB)\r\n```\r\nI have read the comments in [slicelit](https://github.com/golang/go/blob/fb6f38dda15d4155b500f6b3e1a311a951a22b69/src/cmd/compile/internal/walk/complit.go#L288),  but I didn't find any operations that can generate such stores. As far as I know, pointers to stack objects cannot be stored in global objects. So is this a compiler bug? Or the Go compiler does this on purpose to achieve some optimization I don't know yet?\r\n\r\nnote: this is originally posted on [golang-nuts](https://groups.google.com/g/golang-nuts/c/YZVFzwnPixM)\r\n\r\nThanks\r\n\r\n### What did you expect to see?\r\n\r\nThe stack pointer is not stored into any global object.\r\n\r\n### What did you see instead?\r\n\r\nThe stack pointer is stored into a global object.\r\n\r\n","go\r\npackage main\r\n\r\nfunc use(...interface{}) {\r\n   \r\n}\r\n\r\nfunc main() {\r\n    testCases := [...][][]int{\r\n        {{42}},\r\n        {{1, 2}},\r\n        {{3, 4, 5}},\r\n        {{}},\r\n        {{1, 2}, {3, 4, 5}, {}, {7}},\r\n    }\r\n    for _, testCase := range testCases {\r\n        use(testCase)\r\n    }\r\n}\r\n"
61703,"cmd/compile: missing DWARF location list for function arg; stack spill not used for loclist### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\nIt also reproduces with 1.20, 1.19, and maybe older versions too.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/andrei/.cache/go-build'\r\nGOENV='/home/andrei/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/andrei/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/andrei/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/andrei/sdk/go1.21rc3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/andrei/sdk/go1.21rc3/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1118470848=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nMeta-comment: I understand that the production of DWARF location lists for optimized code is not perfect. I'd like to generally form an understanding about which problems are hard and which are tractable. I have found one case where I'm hoping the debug info can be improved, stemming from a real case where a variable that I've tried to read is unavailable where I think it should be available.\r\n\r\nWith the (optimized) CockroachDB binary, I'm frequently trying to read `context.Context` function arguments with a debugger, and more often than not they are not available. I have failed to create a small repro (my experimentation is also hindered by #61700), but the problems seem widespread in the CockroachDB binary. For this report, I have selected a Cockroach case that seems the simplest, out of multiple that I've investigated by hand. \r\n\r\nIn this example, what seems to happen is that a function argument that starts off in registers becomes unavailable once the registers are clobbered by a function call, even though the argument was spilled to the stack (and not just spilled anywhere, but spilled in its designated regabi spill slot, FWIW). In other cases, I see the compiler able to use the spill locations and switch the location lists from registers to the stack; I'd like to understand if there's a good reason why this doesn't happen in this example.\r\n\r\nConsider the following method ([Github link](https://github.com/cockroachdb/cockroach/blob/d5f0481e90a546f389e629b306b9c8c27518379e/pkg/sql/colflow/stats.go#L97)):\r\n\r\n\r\nThe location lists for the `ctx` argument are quite incomplete:\r\n```\r\n0x02be341f:   DW_TAG_formal_parameter\r\n                DW_AT_name      (""ctx"")\r\n                DW_AT_variable_parameter        (0x00)\r\n                DW_AT_decl_line (98)\r\n                DW_AT_type      (0x00000000000ac025 ""context.Context"")\r\n                DW_AT_location  (0x03ea7218: \r\n                   [0x0000000002fb8f80, 0x0000000002fb8fc9): DW_OP_reg3 RBX, DW_OP_piece 0x8, DW_OP_reg2 RCX, DW_OP_piece 0x8\r\n                   [0x0000000002fb8fc9, 0x0000000002fb8fd1): DW_OP_reg3 RBX, DW_OP_piece 0x8, DW_OP_piece 0x8)\r\n```\r\n\r\nThe 128-bit argument starts off in `RBX, RCX`. Then, the PC location `2fb8fd1` corresponds to the first function call -> `bic.stopwatch.Start()`. That's where the location lists stop, so, for the majority of the function's code, `ctx` is not available.\r\nThe 2nd location list (`2fb8fc9 - 2fb8fd1`) corresponds to only two instructions where `RBX` continues to be available after `RCX` was just clobbered; I believe this is not very interesting.\r\n\r\nNow, I claim that the compiler should be able to give me a location list for all of this function, based on the fact that `ctx` is spilled to the stack in the beginning of the function. Again, in other random instances I've looked at, the compiler does sometimes seem to be able to make use of the stack spill.\r\n\r\nHere is the function's disassembly with minor commentary: https://gist.github.com/andreimatei/fa1575dbfa8e04fb0271d02587a0bdf6\r\nI'll paste the beginning here:\r\n\r\n```asm\r\n0000000002fb8f80 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init>:\r\n; github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init():\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:98\r\n 2fb8f80: 49 3b 66 10                  \tcmpq\t0x10(%r14), %rsp\r\n 2fb8f84: 0f 86 38 01 00 00            \tjbe\t0x2fb90c2 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init+0x142>\r\n 2fb8f8a: 55                           \tpushq\t%rbp\r\n 2fb8f8b: 48 89 e5                     \tmovq\t%rsp, %rbp\r\n 2fb8f8e: 48 83 ec 38                  \tsubq\t$0x38, %rsp\r\n\r\n============== ctx is spilled to the stack over the next two instructions ==============\r\n\r\n 2fb8f92: 48 89 5c 24 50               \tmovq\t%rbx, 0x50(%rsp)\r\n 2fb8f97: 48 89 4c 24 58               \tmovq\t%rcx, 0x58(%rsp)\r\n\r\n\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:99\r\n 2fb8f9c: 48 89 58 60                  \tmovq\t%rbx, 0x60(%rax)\r\n 2fb8fa0: 83 3d 59 41 b8 08 00         \tcmpl\t$0x0, 0x8b84159(%rip)   # 0xbb3d100 <runtime.writeBarrier>\r\n 2fb8fa7: 74 10                        \tje\t0x2fb8fb9 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init+0x39>\r\n 2fb8fa9: e8 12 ee 4c fd               \tcallq\t0x487dc0 <runtime.gcWriteBarrier2>\r\n 2fb8fae: 49 89 0b                     \tmovq\t%rcx, (%r11)\r\n 2fb8fb1: 48 8b 50 68                  \tmovq\t0x68(%rax), %rdx\r\n 2fb8fb5: 49 89 53 08                  \tmovq\t%rdx, 0x8(%r11)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:98\r\n 2fb8fb9: 48 89 44 24 48               \tmovq\t%rax, 0x48(%rsp)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:99\r\n 2fb8fbe: 48 89 48 68                  \tmovq\t%rcx, 0x68(%rax)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:100\r\n 2fb8fc2: 48 8b 88 80 00 00 00         \tmovq\t0x80(%rax), %rcx\r\n\r\n======= beginning of the second location list; RCX became unavailable just above ==========================\r\n\r\n 2fb8fc9: 48 89 c8                     \tmovq\t%rcx, %rax\r\n 2fb8fcc: e8 8f 2d 93 fd               \tcallq\t0x8ebd60 <github.com/cockroachdb/cockroach/pkg/util/timeutil.(*StopWatch).Start>\r\n\r\n======= end of the 2nd location list; RBX also became unavailable here =====================\r\n 2fb8fd1: 44 0f 11 7c 24 28            \tmovups\t%xmm15, 0x28(%rsp)\r\n...\r\n\r\n```\r\n\r\nNotice that `RBX` and `RCX` are spilled in the beginning. And note how the call `StopWatch.Start` marks the end of the 2nd location list, and there's no further location list.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected a location list pointing to the `ctx` value on the stack.\r\n\r\nIf this proves to be a tractable problem, myself or one of my colleagues might be interested in putting some effort in improving it.\r\n\r\ncc @dr2chase @randall77 @thanm ",NeedsInvestigation|compiler/runtime,thanm,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\nIt also reproduces with 1.20, 1.19, and maybe older versions too.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/andrei/.cache/go-build'\r\nGOENV='/home/andrei/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/andrei/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/andrei/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/andrei/sdk/go1.21rc3'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/andrei/sdk/go1.21rc3/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc3'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build1118470848=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nMeta-comment: I understand that the production of DWARF location lists for optimized code is not perfect. I'd like to generally form an understanding about which problems are hard and which are tractable. I have found one case where I'm hoping the debug info can be improved, stemming from a real case where a variable that I've tried to read is unavailable where I think it should be available.\r\n\r\nWith the (optimized) CockroachDB binary, I'm frequently trying to read `context.Context` function arguments with a debugger, and more often than not they are not available. I have failed to create a small repro (my experimentation is also hindered by #61700), but the problems seem widespread in the CockroachDB binary. For this report, I have selected a Cockroach case that seems the simplest, out of multiple that I've investigated by hand. \r\n\r\nIn this example, what seems to happen is that a function argument that starts off in registers becomes unavailable once the registers are clobbered by a function call, even though the argument was spilled to the stack (and not just spilled anywhere, but spilled in its designated regabi spill slot, FWIW). In other cases, I see the compiler able to use the spill locations and switch the location lists from registers to the stack; I'd like to understand if there's a good reason why this doesn't happen in this example.\r\n\r\nConsider the following method ([Github link](https://github.com/cockroachdb/cockroach/blob/d5f0481e90a546f389e629b306b9c8c27518379e/pkg/sql/colflow/stats.go#L97)):\r\n```go\r\n// Init is part of the colexecop.Operator interface.\r\nfunc (bic *batchInfoCollector) Init(ctx context.Context) {\r\n\tbic.ctx = ctx\r\n\tbic.stopwatch.Start()\r\n\t// Wrap the call to Init() with a panic catcher in order to get the correct\r\n\t// execution time (e.g. in the statement bundle).\r\n\terr := colexecerror.CatchVectorizedRuntimeError(bic.init)\r\n\tbic.stopwatch.Stop()\r\n\tif err != nil {\r\n\t\tcolexecerror.InternalError(err)\r\n\t}\r\n\t// Unset the context so that it's not used outside of the init() function.\r\n\tbic.ctx = nil\r\n\tbic.mu.Lock()\r\n\t// If we got here, then Init above succeeded, so the wrapped operator has\r\n\t// been properly initialized.\r\n\tbic.mu.initialized = true\r\n\tbic.mu.Unlock()\r\n}\r\n```\r\n\r\nThe location lists for the `ctx` argument are quite incomplete:\r\n```\r\n0x02be341f:   DW_TAG_formal_parameter\r\n                DW_AT_name      (""ctx"")\r\n                DW_AT_variable_parameter        (0x00)\r\n                DW_AT_decl_line (98)\r\n                DW_AT_type      (0x00000000000ac025 ""context.Context"")\r\n                DW_AT_location  (0x03ea7218: \r\n                   [0x0000000002fb8f80, 0x0000000002fb8fc9): DW_OP_reg3 RBX, DW_OP_piece 0x8, DW_OP_reg2 RCX, DW_OP_piece 0x8\r\n                   [0x0000000002fb8fc9, 0x0000000002fb8fd1): DW_OP_reg3 RBX, DW_OP_piece 0x8, DW_OP_piece 0x8)\r\n```\r\n\r\nThe 128-bit argument starts off in `RBX, RCX`. Then, the PC location `2fb8fd1` corresponds to the first function call -> `bic.stopwatch.Start()`. That's where the location lists stop, so, for the majority of the function's code, `ctx` is not available.\r\nThe 2nd location list (`2fb8fc9 - 2fb8fd1`) corresponds to only two instructions where `RBX` continues to be available after `RCX` was just clobbered; I believe this is not very interesting.\r\n\r\nNow, I claim that the compiler should be able to give me a location list for all of this function, based on the fact that `ctx` is spilled to the stack in the beginning of the function. Again, in other random instances I've looked at, the compiler does sometimes seem to be able to make use of the stack spill.\r\n\r\nHere is the function's disassembly with minor commentary: https://gist.github.com/andreimatei/fa1575dbfa8e04fb0271d02587a0bdf6\r\nI'll paste the beginning here:\r\n\r\n```asm\r\n0000000002fb8f80 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init>:\r\n; github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init():\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:98\r\n 2fb8f80: 49 3b 66 10                  \tcmpq\t0x10(%r14), %rsp\r\n 2fb8f84: 0f 86 38 01 00 00            \tjbe\t0x2fb90c2 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init+0x142>\r\n 2fb8f8a: 55                           \tpushq\t%rbp\r\n 2fb8f8b: 48 89 e5                     \tmovq\t%rsp, %rbp\r\n 2fb8f8e: 48 83 ec 38                  \tsubq\t$0x38, %rsp\r\n\r\n============== ctx is spilled to the stack over the next two instructions ==============\r\n\r\n 2fb8f92: 48 89 5c 24 50               \tmovq\t%rbx, 0x50(%rsp)\r\n 2fb8f97: 48 89 4c 24 58               \tmovq\t%rcx, 0x58(%rsp)\r\n\r\n\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:99\r\n 2fb8f9c: 48 89 58 60                  \tmovq\t%rbx, 0x60(%rax)\r\n 2fb8fa0: 83 3d 59 41 b8 08 00         \tcmpl\t$0x0, 0x8b84159(%rip)   # 0xbb3d100 <runtime.writeBarrier>\r\n 2fb8fa7: 74 10                        \tje\t0x2fb8fb9 <github.com/cockroachdb/cockroach/pkg/sql/colflow.(*batchInfoCollector).Init+0x39>\r\n 2fb8fa9: e8 12 ee 4c fd               \tcallq\t0x487dc0 <runtime.gcWriteBarrier2>\r\n 2fb8fae: 49 89 0b                     \tmovq\t%rcx, (%r11)\r\n 2fb8fb1: 48 8b 50 68                  \tmovq\t0x68(%rax), %rdx\r\n 2fb8fb5: 49 89 53 08                  \tmovq\t%rdx, 0x8(%r11)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:98\r\n 2fb8fb9: 48 89 44 24 48               \tmovq\t%rax, 0x48(%rsp)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:99\r\n 2fb8fbe: 48 89 48 68                  \tmovq\t%rcx, 0x68(%rax)\r\n; /home/andrei/src/github.com/cockroachdb/cockroach/pkg/sql/colflow/stats.go:100\r\n 2fb8fc2: 48 8b 88 80 00 00 00         \tmovq\t0x80(%rax), %rcx\r\n\r\n======= beginning of the second location list; RCX became unavailable just above ==========================\r\n\r\n 2fb8fc9: 48 89 c8                     \tmovq\t%rcx, %rax\r\n 2fb8fcc: e8 8f 2d 93 fd               \tcallq\t0x8ebd60 <github.com/cockroachdb/cockroach/pkg/util/timeutil.(*StopWatch).Start>\r\n\r\n======= end of the 2nd location list; RBX also became unavailable here =====================\r\n 2fb8fd1: 44 0f 11 7c 24 28            \tmovups\t%xmm15, 0x28(%rsp)\r\n...\r\n\r\n```\r\n\r\nNotice that `RBX` and `RCX` are spilled in the beginning. And note how the call `StopWatch.Start` marks the end of the 2nd location list, and there's no further location list.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected a location list pointing to the `ctx` value on the stack.\r\n\r\nIf this proves to be a tractable problem, myself or one of my colleagues might be interested in putting some effort in improving it.\r\n\r\ncc @dr2chase @randall77 @thanm ","go\r\n// Init is part of the colexecop.Operator interface.\r\nfunc (bic *batchInfoCollector) Init(ctx context.Context) {\r\n\tbic.ctx = ctx\r\n\tbic.stopwatch.Start()\r\n\t// Wrap the call to Init() with a panic catcher in order to get the correct\r\n\t// execution time (e.g. in the statement bundle).\r\n\terr := colexecerror.CatchVectorizedRuntimeError(bic.init)\r\n\tbic.stopwatch.Stop()\r\n\tif err != nil {\r\n\t\tcolexecerror.InternalError(err)\r\n\t}\r\n\t// Unset the context so that it's not used outside of the init() function.\r\n\tbic.ctx = nil\r\n\tbic.mu.Lock()\r\n\t// If we got here, then Init above succeeded, so the wrapped operator has\r\n\t// been properly initialized.\r\n\tbic.mu.initialized = true\r\n\tbic.mu.Unlock()\r\n}\r\n"
61694,"cmd/compile: OR into memory is cheaper than MOV/BTSL/MOV on x86### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.21-dev +fe5af1532a\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=amd64\r\n```\r\n\r\n### What did you do?\r\n\r\nWe have a code generator that generates a struct with setters. To track whether set has been called for a given field, we flip the bit in a bitmap. The code looks like this:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected similar instructions (with different operands) being generated for both setters.\r\n\r\n### What did you see instead?\r\n\r\n`SetU` is ~30% slower than `SetV`, as measured in local benchmarks (on a zen4 machine). The relevant difference is ([godbolt](https://godbolt.org/z/vE4GesEdP)):\r\n\r\n```asm\r\nTEXT    main.(*x).SetV(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16\r\n        MOVL    BX, 20(AX)\r\n        NOP\r\n        ORL     $32, 4(AX)\r\n        RET\r\n\r\nTEXT    main.(*x).SetU(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16\r\n        MOVL    BX, 16(AX)\r\n        MOVL    (AX), CX\r\n        BTSL    $7, CX\r\n        NOP\r\n        MOVL    CX, (AX)\r\n        RET\r\n```\r\n\r\nIt seems like `OR` into memory does better than `MOV/BTS/MOV`.\r\n\r\nAccording to https://www.uops.info/table.html, for skylake-x and zen4, it seems the OR family is pound-for-pound (slightly) better than the BTS family:\r\n\r\nInstruction   | Lat      | TP          | Uops  | Ports                     | Lat     | TP   | Uops | Ports\r\n------------- | -------- | ----------- | ----- | ------------------------- | ------- | ---- | ---- | -----\r\nBTS (M32, I8) | [\u22643;\u226410] | 1.00 / 1.00 | 3 / 4 | 1*p06+1*p23+1*p237+1*p4   | [5;12]  | 2.00 | 4    |\r\nOR (M32, I32) | [\u22643;\u226410] | 1.00 / 1.00 | 2 / 4 | 1*p0156+1*p23+1*p237+1*p4 | [\u22641;\u22648] | 0.56 | 2    |\r\nBTS (R32, I8) | 1        | 0.50 / 0.50 | 1 / 1 | 1*p06                     | [1;2]   | 1.00 | 2    |\r\nOR (R32, I8)  | 1        | 0.25 / 0.25 | 1 / 1 | 1*p0156                   | 1       | 0.25 | 1    |\r\n\r\nI didn't look up what those `MOV` instructions cost, but it's difficult to predict costs from individual operations in the complex processors of today. Things I didn't test (because the Go compiler doesn't generate/inline them:\r\n\r\n- MOV/OR/MOV\r\n- BTS memory,immediate\r\n\r\nSome of the speedup may be due to the shorter instruction sequence, too.",Performance|NeedsInvestigation|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.21-dev +fe5af1532a\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=amd64\r\n```\r\n\r\n### What did you do?\r\n\r\nWe have a code generator that generates a struct with setters. To track whether set has been called for a given field, we flip the bit in a bitmap. The code looks like this:\r\n\r\n```go\r\nfunc setBit(part *uint32, num uint32) {\r\n\t*part |= 1 << (num % 32)\r\n}\r\n\r\ntype x struct {\r\n\tbitmap [4]uint32 // A bitmap containing whether ""Set"" was called on a given field.\r\n\tu      int32     // Imagine this is field number 8.\r\n\tv      int32     // Imagine this is field number 38.\r\n\r\n}\r\n\r\nfunc (m *x) SetV(val int32) {\r\n\tm.v = val\r\n\tsetBit(&(m.bitmap[1]), 37)\r\n}\r\n\r\nfunc (m *x) SetU(val int32) {\r\n\tm.u = val\r\n\tsetBit(&(m.bitmap[0]), 7)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected similar instructions (with different operands) being generated for both setters.\r\n\r\n### What did you see instead?\r\n\r\n`SetU` is ~30% slower than `SetV`, as measured in local benchmarks (on a zen4 machine). The relevant difference is ([godbolt](https://godbolt.org/z/vE4GesEdP)):\r\n\r\n```asm\r\nTEXT    main.(*x).SetV(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16\r\n        MOVL    BX, 20(AX)\r\n        NOP\r\n        ORL     $32, 4(AX)\r\n        RET\r\n\r\nTEXT    main.(*x).SetU(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16\r\n        MOVL    BX, 16(AX)\r\n        MOVL    (AX), CX\r\n        BTSL    $7, CX\r\n        NOP\r\n        MOVL    CX, (AX)\r\n        RET\r\n```\r\n\r\nIt seems like `OR` into memory does better than `MOV/BTS/MOV`.\r\n\r\nAccording to https://www.uops.info/table.html, for skylake-x and zen4, it seems the OR family is pound-for-pound (slightly) better than the BTS family:\r\n\r\nInstruction   | Lat      | TP          | Uops  | Ports                     | Lat     | TP   | Uops | Ports\r\n------------- | -------- | ----------- | ----- | ------------------------- | ------- | ---- | ---- | -----\r\nBTS (M32, I8) | [\u22643;\u226410] | 1.00 / 1.00 | 3 / 4 | 1*p06+1*p23+1*p237+1*p4   | [5;12]  | 2.00 | 4    |\r\nOR (M32, I32) | [\u22643;\u226410] | 1.00 / 1.00 | 2 / 4 | 1*p0156+1*p23+1*p237+1*p4 | [\u22641;\u22648] | 0.56 | 2    |\r\nBTS (R32, I8) | 1        | 0.50 / 0.50 | 1 / 1 | 1*p06                     | [1;2]   | 1.00 | 2    |\r\nOR (R32, I8)  | 1        | 0.25 / 0.25 | 1 / 1 | 1*p0156                   | 1       | 0.25 | 1    |\r\n\r\nI didn't look up what those `MOV` instructions cost, but it's difficult to predict costs from individual operations in the complex processors of today. Things I didn't test (because the Go compiler doesn't generate/inline them:\r\n\r\n- MOV/OR/MOV\r\n- BTS memory,immediate\r\n\r\nSome of the speedup may be due to the shorter instruction sequence, too.","go\r\nfunc setBit(part *uint32, num uint32) {\r\n\t*part |= 1 << (num % 32)\r\n}\r\n\r\ntype x struct {\r\n\tbitmap [4]uint32 // A bitmap containing whether ""Set"" was called on a given field.\r\n\tu      int32     // Imagine this is field number 8.\r\n\tv      int32     // Imagine this is field number 38.\r\n\r\n}\r\n\r\nfunc (m *x) SetV(val int32) {\r\n\tm.v = val\r\n\tsetBit(&(m.bitmap[1]), 37)\r\n}\r\n\r\nfunc (m *x) SetU(val int32) {\r\n\tm.u = val\r\n\tsetBit(&(m.bitmap[0]), 7)\r\n}\r\n"
61618,"x/tools/gopls: unable to find references for struct fields that use type param composite litsgopls version: v0.12.4 (go1.20.3)\r\ngopls flags:\r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.20.3\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Thu, 27 Jul 2023 03:27:43 GMT\r\nrestart history:\r\nTue, 25 Jul 2023 20:01:41 GMT: activation (enabled: true)\r\nTue, 25 Jul 2023 20:08:52 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:30 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:41 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:11:07 GMT: config change (enabled: true)\r\n\r\nThis is a followup or additional issue related to #61614 using the same minimal example I am unable to find references (cmd/ctrl+click in VSCode and other editors) for the generic fields.\r\n\r\n### What did you do?\r\n\r\n If I cmd+click on a usage of the field, like 'element', then it correctly takes to the definition, but if I then cmd+click on the definition of the field, it does not show it's references. Instead it shows the message ""No type definition found for 'elements'"", (which is correct I guess) since I have that configured as the fallback action in vscode. For non generic fields, like 'name', it shows the other references as expected.\r\n\r\n\r\n\r\n\r\n\r\n### Editor and settings\r\n\r\n```\r\n  ""editor.gotoLocation.alternativeReferenceCommand"": ""editor.action.goToTypeDefinition""\r\n  ""editor.gotoLocation.alternativeImplementationCommand"": ""editor.action.revealDefinition"",\r\n  ""editor.gotoLocation.alternativeTypeDefinitionCommand"": ""editor.action.goToImplementation"",\r\n  ""editor.gotoLocation.alternativeDefinitionCommand"": ""editor.action.goToReferences"",\r\n  ""editor.gotoLocation.alternativeDeclarationCommand"": ""editor.action.referenceSearch.trigger"",\r\n  ""editor.gotoLocation.multipleTypeDefinitions"": ""peek"",\r\n  ""editor.gotoLocation.multipleReferences"": ""peek"",\r\n  ""editor.gotoLocation.multipleDefinitions"": ""peek"",\r\n  ""editor.gotoLocation.multipleDeclarations"": ""peek"",\r\n  ""editor.gotoLocation.multipleImplementations"": ""peek"",\r\n// gopls settings, but nothing relevant to this issue\r\n  ""gopls"": {\r\n    ""ui.semanticTokens"": true,\r\n    ""ui.noSemanticString"": false,\r\n    ""ui.completion.usePlaceholders"": false,\r\n    ""ui.diagnostic.analyses"": {\r\n      ""infertypeargs"": false\r\n    },\r\n    ""ui.documentation.linksInHover"": false,\r\n    ""ui.navigation.importShortcut"": ""Definition""\r\n  },\r\n```\r\n\r\n\r\n### Logs\r\n\r\nThis is the only relevant log message I'm getting\r\n```\r\n[Error - 3:02:13 PM] Request textDocument/typeDefinition failed.\r\n  Message: no type definition for elements\r\n  Code: 0 \r\n```",gopls|Tools|gopls/generics,findleyr,"gopls version: v0.12.4 (go1.20.3)\r\ngopls flags:\r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.20.3\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Thu, 27 Jul 2023 03:27:43 GMT\r\nrestart history:\r\nTue, 25 Jul 2023 20:01:41 GMT: activation (enabled: true)\r\nTue, 25 Jul 2023 20:08:52 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:30 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:41 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:11:07 GMT: config change (enabled: true)\r\n\r\nThis is a followup or additional issue related to #61614 using the same minimal example I am unable to find references (cmd/ctrl+click in VSCode and other editors) for the generic fields.\r\n\r\n### What did you do?\r\n\r\n If I cmd+click on a usage of the field, like 'element', then it correctly takes to the definition, but if I then cmd+click on the definition of the field, it does not show it's references. Instead it shows the message ""No type definition found for 'elements'"", (which is correct I guess) since I have that configured as the fallback action in vscode. For non generic fields, like 'name', it shows the other references as expected.\r\n\r\n```go\r\ntype builder[S ~[]F, F ~string] struct {\r\n\tname string  // <-- cmd+click here correctly shows references\r\n\telements S // <-- [Definition] - cmd+click here does not show references and runs alternate gotoLocation command\r\n\telemData map[F][]ElemData[F]\r\n\t// other fields...\r\n}\r\ntype ElemData struct {\r\n  Name F\r\n  // other fields...\r\n}\r\ntype BuilderImpl[S ~[]F, F ~string] struct{ builder[S, F] }\r\n```\r\n```go\r\nfunc NewBuilderImpl[S ~[]F, F ~string](name string)  *BuilderImpl[S, F] {\r\n  return &BuilderImpl[S,F]{\r\n\tbuilder[S, F]{\r\n\t  name: name,\r\n\t  elements: S{}, // <-- [Usage] - cmd+click here takes me to [Definition]\r\n\t  elemData: map[F][]ElemData[F]{},\r\n\t}\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Editor and settings\r\n\r\n```\r\n  ""editor.gotoLocation.alternativeReferenceCommand"": ""editor.action.goToTypeDefinition""\r\n  ""editor.gotoLocation.alternativeImplementationCommand"": ""editor.action.revealDefinition"",\r\n  ""editor.gotoLocation.alternativeTypeDefinitionCommand"": ""editor.action.goToImplementation"",\r\n  ""editor.gotoLocation.alternativeDefinitionCommand"": ""editor.action.goToReferences"",\r\n  ""editor.gotoLocation.alternativeDeclarationCommand"": ""editor.action.referenceSearch.trigger"",\r\n  ""editor.gotoLocation.multipleTypeDefinitions"": ""peek"",\r\n  ""editor.gotoLocation.multipleReferences"": ""peek"",\r\n  ""editor.gotoLocation.multipleDefinitions"": ""peek"",\r\n  ""editor.gotoLocation.multipleDeclarations"": ""peek"",\r\n  ""editor.gotoLocation.multipleImplementations"": ""peek"",\r\n// gopls settings, but nothing relevant to this issue\r\n  ""gopls"": {\r\n    ""ui.semanticTokens"": true,\r\n    ""ui.noSemanticString"": false,\r\n    ""ui.completion.usePlaceholders"": false,\r\n    ""ui.diagnostic.analyses"": {\r\n      ""infertypeargs"": false\r\n    },\r\n    ""ui.documentation.linksInHover"": false,\r\n    ""ui.navigation.importShortcut"": ""Definition""\r\n  },\r\n```\r\n\r\n\r\n### Logs\r\n\r\nThis is the only relevant log message I'm getting\r\n```\r\n[Error - 3:02:13 PM] Request textDocument/typeDefinition failed.\r\n  Message: no type definition for elements\r\n  Code: 0 \r\n```","go\r\ntype builder[S ~[]F, F ~string] struct {\r\n\tname string  // <-- cmd+click here correctly shows references\r\n\telements S // <-- [Definition] - cmd+click here does not show references and runs alternate gotoLocation command\r\n\telemData map[F][]ElemData[F]\r\n\t// other fields...\r\n}\r\ntype ElemData struct {\r\n  Name F\r\n  // other fields...\r\n}\r\ntype BuilderImpl[S ~[]F, F ~string] struct{ builder[S, F] }\r\n"
61609,"x/tools/gopls: type constraint discrepancy between go compiler and goplsWorking on Go project In VSCode, I noticed gopls reports a problem which is ok for the compiler. \r\n\r\nI extracted a minimal example as follows:\r\n\r\nSuppose we have a project with packages `foo` (file `foo.go`) and `bar` (file `bar.go`). \r\n\r\nThe package `foo` exports type constraint `A`:\r\n\r\nThe package `bar` consumes the constraint `A` as\r\n\r\n\r\nSince the constraint `A` ""inherits"" from `comparable`, the expression `a == b` is well defined: `T` is constrained by `A` which _is_ comparable, hence `==` is available for values of type `T`. The compiler is happy with the code.\r\n\r\nBut VSCode reports `a == b` as the problem:\r\n\r\n> invalid operation: a == b (incomparable types in type set)\r\n\r\nIn editor,\r\n![image](https://github.com/golang/go/assets/38156408/028fbb99-c7da-4645-9e4d-3b14214321bd)\r\n\r\nTwo observations:\r\n\r\n* if the constraint `type A comparable` is defined in the package `bar`, it's ok for gopls \u2013 it's an cross-package problem\r\n* if the constraint is defined as `type A = comparable` ie. as typedef (not ""newtype"") in package `foo`, it's also ok \r\n\r\n\r\n",NeedsFix|gopls|Tools,findleyr,"Working on Go project In VSCode, I noticed gopls reports a problem which is ok for the compiler. \r\n\r\nI extracted a minimal example as follows:\r\n\r\nSuppose we have a project with packages `foo` (file `foo.go`) and `bar` (file `bar.go`). \r\n\r\nThe package `foo` exports type constraint `A`:\r\n```go\r\n// foo.go\r\npackage foo\r\n\r\ntype A comparable\r\n```\r\nThe package `bar` consumes the constraint `A` as\r\n```go\r\n// bar.go\r\npackage bar\r\n\r\n// import ""foo""\r\n\r\nfunc F[T foo.A](a T, b T) bool {\r\n\treturn a == b\r\n}\r\n```\r\n\r\nSince the constraint `A` ""inherits"" from `comparable`, the expression `a == b` is well defined: `T` is constrained by `A` which _is_ comparable, hence `==` is available for values of type `T`. The compiler is happy with the code.\r\n\r\nBut VSCode reports `a == b` as the problem:\r\n\r\n> invalid operation: a == b (incomparable types in type set)\r\n\r\nIn editor,\r\n![image](https://github.com/golang/go/assets/38156408/028fbb99-c7da-4645-9e4d-3b14214321bd)\r\n\r\nTwo observations:\r\n\r\n* if the constraint `type A comparable` is defined in the package `bar`, it's ok for gopls \u2013 it's an cross-package problem\r\n* if the constraint is defined as `type A = comparable` ie. as typedef (not ""newtype"") in package `foo`, it's also ok \r\n\r\n\r\n",go\r\n// foo.go\r\npackage foo\r\n\r\ntype A comparable\r\n
61614,"x/tools/gopls: crash in renaming inside packages that use type param composite litsgopls version: v0.12.4 (go1.20.3)\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.20.3\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Thu, 27 Jul 2023 03:27:43 GMT\r\nrestart history:\r\nTue, 25 Jul 2023 20:01:41 GMT: activation (enabled: true)\r\nTue, 25 Jul 2023 20:08:52 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:30 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:41 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:11:07 GMT: config change (enabled: true)\r\n\r\ngopls crashed after trying to refactor/rename a struct field with a generic type. \r\n\r\nI don't want to post the exact code that caused this as it's part of a private codebase, but I believe the following is a close enough approximation as far as this issue is concerned: \r\n\r\n\r\n\r\n\r\nI tried renaming all of the fields of builder, but only the non generic-typed fields (i.e. name and the other fields) succeeded. Before it crashed, whenever I attempted to rename 'elements' or 'elemData', I just got a notification popup that said ""No Result"". After a couple times of trying this, gopls eventually just crashed (actually, the logs are showing other identical panics, so it may have crashed the other times too, but it was being restarted until it hit a limit of number of restarts in a certain time period)\r\n\r\n*edit:* I just restarted the language server and tried it again, and while it doesn't crash or panic when trying to rename a generic field, the rename only succeeds in the local scope. So if I try renaming it from the struct's type definition, that's the only place it changes (as if I had just selected it and typed a new name). If I rename it from where it's being used, every use of it in the local scope will change, but everything outside of that scope remains the same. \r\n\r\n\r\n<pre>panic: unexpected composite literal type: S\r\n\r\ngoroutine 4547 [running]:\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd1c0})\r\n\t  find.go:390  0xdda\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd300})\r\n\t  find.go:363  0xfe5\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd340})\r\n\t  find.go:365  0x103a\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5eb50, 0xc00203a680})\r\n\t  find.go:470  0x7dd\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).stmt(0xc003d90000, {0x100d5e940%3F, 0xc00203a6a0%3F})\r\n\t  find.go:574  0xfa5\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).stmt(0xc003d90000, {0x100d5e3a0%3F, 0xc002038660%3F})\r\n\t  find.go:589  0xe45\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).Find(0xc003d90000, 0xc002f051d0%3F, {0xc0018d1ad0, 0x1, 0x0%3F})\r\n\t  find.go:106  0x1e5\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).satisfy(0xc0020c6600)\r\n\t  rename_check.go:836  0xcc\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).checkMethod(0xc0020c6600, 0xc002d1bc80)\r\n\t  rename_check.go:753  0x3d3\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).check(0xc0020c6600, {0x100d688b8, 0xc002d1bc80})\r\n\t  rename_check.go:105  0x167\r\ngolang.org/x/tools/gopls/internal/lsp/source.renameObjects({0xc00719a690%3F, 0x100a86cc0%3F}, {0x660b%3F, 0x1%3F}, {0xc0006b6500, 0x9}, {0x100d65ea8, 0xc00225b9c0}, {0xc00719a710, 0x1, ...})\r\n\t  rename.go:1010  0x26e\r\ngolang.org/x/tools/gopls/internal/lsp/source.renameOrdinary({0x100d5fb58, 0xc0020b3d10}, {0x100d6ced0, 0xc000002780}, {0x100d609e0, 0xc00007f0e0}, {0x9d0e20%3F, 0x1%3F}, {0xc0006b6500, 0x9})\r\n\t  rename.go:372  0xb05\r\ngolang.org/x/tools/gopls/internal/lsp/source.Rename({0x100d5fb58%3F, 0xc0020b3b90%3F}, {0x100d6ced0, 0xc000002780}, {0x100d609e0, 0xc00007f0e0}, {0xa0a7e0%3F, 0xc0%3F}, {0xc0006b6500, 0x9})\r\n\t  rename.go:234  0x1d7\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).rename(0x1009635a0%3F, {0x100d5fab0, 0xc004d081e0}, 0xc001a0f4c0)\r\n\t  rename.go:29  0x24b\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).Rename(0xc007306640%3F, {0x100d5fab0%3F, 0xc004d081e0%3F}, 0x1009635a0%3F)\r\n\t  server_gen.go:208  0x25\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.serverDispatch({0x100d5fab0, 0xc004d081e0}, {0x100d70810, 0xc00048e410}, 0xc0020b39e0, {0x100d5fd88, 0xc0011cdc40})\r\n\t  tsserver.go:515  0xe05\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.ServerHandler.func1({0x100d5fab0, 0xc004d081e0}, 0xc0020b39e0, {0x100d5fd88, 0xc0011cdc40})\r\n\t  protocol.go:157  0x90\r\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.handshaker.func1({0x100d5fab0, 0xc004d081e0}, 0xc0020b39e0, {0x100d5fd88%3F, 0xc0011cdc40%3F})\r\n\t  lsprpc.go:519  0x9f9\r\ngolang.org/x/tools/internal/jsonrpc2.MustReplyHandler.func1({0x100d5fab0, 0xc004d081e0}, 0xc00347e8b8, {0x100d5fd88%3F, 0xc0011cdc40%3F})\r\n\t  handler.go:35  0xf6\r\ngolang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1.2()\r\n\t  handler.go:103  0xa3\r\ncreated by golang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1\r\n\t  handler.go:100  0x20a\r\n[Error - 11:26:52 PM] </pre>\r\n\r\n",NeedsFix|gopls|Tools,findleyr,"gopls version: v0.12.4 (go1.20.3)\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.39.1\r\ngo version: 1.20.3\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Thu, 27 Jul 2023 03:27:43 GMT\r\nrestart history:\r\nTue, 25 Jul 2023 20:01:41 GMT: activation (enabled: true)\r\nTue, 25 Jul 2023 20:08:52 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:30 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:09:41 GMT: config change (enabled: true)\r\nTue, 25 Jul 2023 20:11:07 GMT: config change (enabled: true)\r\n\r\ngopls crashed after trying to refactor/rename a struct field with a generic type. \r\n\r\nI don't want to post the exact code that caused this as it's part of a private codebase, but I believe the following is a close enough approximation as far as this issue is concerned: \r\n\r\n```go\r\ntype builder[S ~[]F, F ~string] struct {\r\n\tname string\r\n\telements S\r\n\telemData map[F][]ElemData[F]\r\n\t// other fields...\r\n}\r\ntype ElemData struct {\r\n  Name F\r\n  // other fields...\r\n}\r\ntype BuilderImpl[S ~[]F, F ~string] struct{ builder[S, F] }\r\n```\r\n```go\r\nfunc NewBuilderImpl[S ~[]F, F ~string](name string)  *BuilderImpl[S, F] {\r\n  return &BuilderImpl[S,F]{\r\n\tbuilder[S, F]{\r\n\t  name: name,\r\n\t  elements: S{},  // <-- This seems to be causing the panic\r\n\t  elemData: map[F][]ElemData[F]{},\r\n\t}\r\n  }\r\n}\r\n```\r\n\r\nI tried renaming all of the fields of builder, but only the non generic-typed fields (i.e. name and the other fields) succeeded. Before it crashed, whenever I attempted to rename 'elements' or 'elemData', I just got a notification popup that said ""No Result"". After a couple times of trying this, gopls eventually just crashed (actually, the logs are showing other identical panics, so it may have crashed the other times too, but it was being restarted until it hit a limit of number of restarts in a certain time period)\r\n\r\n*edit:* I just restarted the language server and tried it again, and while it doesn't crash or panic when trying to rename a generic field, the rename only succeeds in the local scope. So if I try renaming it from the struct's type definition, that's the only place it changes (as if I had just selected it and typed a new name). If I rename it from where it's being used, every use of it in the local scope will change, but everything outside of that scope remains the same. \r\n\r\n\r\n<pre>panic: unexpected composite literal type: S\r\n\r\ngoroutine 4547 [running]:\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd1c0})\r\n\t  find.go:390  0xdda\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd300})\r\n\t  find.go:363  0xfe5\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5e4c0, 0xc001bfd340})\r\n\t  find.go:365  0x103a\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).expr(0xc003d90000, {0x100d5eb50, 0xc00203a680})\r\n\t  find.go:470  0x7dd\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).stmt(0xc003d90000, {0x100d5e940%3F, 0xc00203a6a0%3F})\r\n\t  find.go:574  0xfa5\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).stmt(0xc003d90000, {0x100d5e3a0%3F, 0xc002038660%3F})\r\n\t  find.go:589  0xe45\r\ngolang.org/x/tools/refactor/satisfy.(*Finder).Find(0xc003d90000, 0xc002f051d0%3F, {0xc0018d1ad0, 0x1, 0x0%3F})\r\n\t  find.go:106  0x1e5\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).satisfy(0xc0020c6600)\r\n\t  rename_check.go:836  0xcc\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).checkMethod(0xc0020c6600, 0xc002d1bc80)\r\n\t  rename_check.go:753  0x3d3\r\ngolang.org/x/tools/gopls/internal/lsp/source.(*renamer).check(0xc0020c6600, {0x100d688b8, 0xc002d1bc80})\r\n\t  rename_check.go:105  0x167\r\ngolang.org/x/tools/gopls/internal/lsp/source.renameObjects({0xc00719a690%3F, 0x100a86cc0%3F}, {0x660b%3F, 0x1%3F}, {0xc0006b6500, 0x9}, {0x100d65ea8, 0xc00225b9c0}, {0xc00719a710, 0x1, ...})\r\n\t  rename.go:1010  0x26e\r\ngolang.org/x/tools/gopls/internal/lsp/source.renameOrdinary({0x100d5fb58, 0xc0020b3d10}, {0x100d6ced0, 0xc000002780}, {0x100d609e0, 0xc00007f0e0}, {0x9d0e20%3F, 0x1%3F}, {0xc0006b6500, 0x9})\r\n\t  rename.go:372  0xb05\r\ngolang.org/x/tools/gopls/internal/lsp/source.Rename({0x100d5fb58%3F, 0xc0020b3b90%3F}, {0x100d6ced0, 0xc000002780}, {0x100d609e0, 0xc00007f0e0}, {0xa0a7e0%3F, 0xc0%3F}, {0xc0006b6500, 0x9})\r\n\t  rename.go:234  0x1d7\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).rename(0x1009635a0%3F, {0x100d5fab0, 0xc004d081e0}, 0xc001a0f4c0)\r\n\t  rename.go:29  0x24b\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).Rename(0xc007306640%3F, {0x100d5fab0%3F, 0xc004d081e0%3F}, 0x1009635a0%3F)\r\n\t  server_gen.go:208  0x25\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.serverDispatch({0x100d5fab0, 0xc004d081e0}, {0x100d70810, 0xc00048e410}, 0xc0020b39e0, {0x100d5fd88, 0xc0011cdc40})\r\n\t  tsserver.go:515  0xe05\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.ServerHandler.func1({0x100d5fab0, 0xc004d081e0}, 0xc0020b39e0, {0x100d5fd88, 0xc0011cdc40})\r\n\t  protocol.go:157  0x90\r\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.handshaker.func1({0x100d5fab0, 0xc004d081e0}, 0xc0020b39e0, {0x100d5fd88%3F, 0xc0011cdc40%3F})\r\n\t  lsprpc.go:519  0x9f9\r\ngolang.org/x/tools/internal/jsonrpc2.MustReplyHandler.func1({0x100d5fab0, 0xc004d081e0}, 0xc00347e8b8, {0x100d5fd88%3F, 0xc0011cdc40%3F})\r\n\t  handler.go:35  0xf6\r\ngolang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1.2()\r\n\t  handler.go:103  0xa3\r\ncreated by golang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1\r\n\t  handler.go:100  0x20a\r\n[Error - 11:26:52 PM] </pre>\r\n\r\n","go\r\ntype builder[S ~[]F, F ~string] struct {\r\n\tname string\r\n\telements S\r\n\telemData map[F][]ElemData[F]\r\n\t// other fields...\r\n}\r\ntype ElemData struct {\r\n  Name F\r\n  // other fields...\r\n}\r\ntype BuilderImpl[S ~[]F, F ~string] struct{ builder[S, F] }\r\n"
61508,"x/tools/gopls: duplicated analysis workThe following log events were observed in a single run of ""gopls check"" (with staticcheck and nilness enabled) that was instrumented to report start/end calls to Analyze:\r\n\r\n\r\n\r\nObserve that two concurrent Analyze calls request that the same package be analyzed with two different sets of analyzers.\r\n```\r\nec2$ (cd ~/w/xtools && go build -o x ./gopls ) && time ~/w/xtools/x --profile.cpu=prof check ./internal/customizations/unit_test.go\r\n\r\n2023/07/21 11:38:11 Analyze start [structtag stdmethods lostcancel unusedresult unusedparams copylocks unusedwrite timeformat buildtag bools embed shift sortslice loopclosure simplifyslice useany cgocall errorsas simplifyrange printf fieldalignment atomicalign unsafeptr assign testinggoroutine nilness ifaceassert composites nilfunc unmarshal directive stringintconv atomic simplifycompositelit deepequalerrors httpresponse unreachable asmdecl shadow tests QF1012 SA9002 S1007 ST1019 ST1021 ST1003 SA9005 SA1015 QF1010 SA9004 SA1029 SA4006 ST1000 QF1005 SA1019 SA1021 ST1013 SA1026 QF1002 ST1005 SA4030 SA9007 S1034 SA4016 SA1014 SA5002 SA1007 SA4021 SA4005 SA5001 SA1025 S1035 S1010 SA5000 SA1024 S1011 SA4014 SA6005 SA6001 S1018 SA2001 SA4009 SA5008 ST1016 S1028 S1006 QF1007 SA9003 SA4010 ST1012 QF1003 SA1000 S1005 ST1022 SA5004 S1000 S1023 QF1011 S1029 SA4024 SA1020 S1009 SA2002 SA4011 SA1030 SA4022 QF1006 S1038 SA4000 SA5007 S1020 S1031 S1021 S1032 SA1010 QF1004 ST1001 SA4029 SA1001 SA1012 S1016 SA1013 SA4012 SA4025 ST1023 S1003 SA1008 SA4013 S1017 SA4019 SA1023 SA4026 QF1008 SA9008 S1037 SA6003 SA1016 SA4008 ST1011 ST1018 SA1003 SA4001 QF1001 ST1017 S1002 S1040 SA1028 SA4018 SA1027 SA1004 SA3001 SA5003 S1039 SA1017 S1036 S1024 QF1009 ST1020 S1008 SA4015 SA2003 S1001 SA4003 SA4028 SA1006 SA4023 SA1011 SA5005 SA5010 S1030 SA6000 S1004 SA4017 SA9006 SA4004 SA2000 SA1002 SA6002 SA5012 SA1005 SA9001 SA3000 ST1008 SA1018 S1033 ST1006 SA4031 SA4020 ST1015 S1019 S1012 SA4027 S1025 nonewvars noresultvalues undeclaredname unusedvariable fillreturns] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:11.38853 -0400 EDT m=+0.728676834\r\n\r\n2023/07/21 11:38:12 Analyze start [bools embed shift sortslice loopclosure simplifyslice unsafeptr useany cgocall errorsas simplifyrange printf fieldalignment atomicalign assign testinggoroutine nilness ifaceassert composites nilfunc unmarshal directive stringintconv atomic simplifycompositelit deepequalerrors httpresponse unreachable asmdecl shadow tests structtag stdmethods lostcancel unusedresult unusedparams copylocks unusedwrite timeformat buildtag SA4000 SA5007 S1020 S1031 S1021 S1032 SA1010 QF1004 ST1001 SA4029 SA1001 SA1012 S1016 SA1013 SA4012 SA4025 ST1023 S1003 SA1008 SA4013 S1017 SA4019 SA1023 SA4026 QF1008 SA9008 S1037 SA6003 SA1016 SA4008 ST1011 ST1018 SA1003 SA4001 QF1001 ST1017 S1002 S1040 SA1028 SA4018 SA1027 SA1004 SA3001 SA5003 S1039 SA1017 S1036 S1024 QF1009 ST1020 S1008 SA4015 SA2003 S1001 SA4003 SA4028 SA1006 SA4023 SA1011 S1030 SA6000 S1004 SA4017 SA9006 SA4004 SA5005 SA5010 SA2000 SA1002 SA6002 SA5012 SA1005 SA9001 SA3000 S1033 ST1006 SA4031 SA4020 ST1015 S1019 ST1008 SA1018 S1012 SA4027 S1025 SA9002 S1007 ST1019 ST1021 ST1003 SA9005 QF1012 SA1015 QF1010 SA9004 SA1029 SA4006 ST1000 QF1005 SA1019 SA1021 ST1013 SA1026 QF1002 ST1005 S1034 SA4016 SA1014 SA5002 SA1007 SA4021 SA4030 SA9007 SA4005 SA5001 SA1025 SA5000 SA1024 S1011 SA4014 SA6005 SA6001 S1035 S1010 SA4009 SA5008 ST1016 S1028 S1006 QF1007 S1018 SA2001 ST1012 QF1003 SA1000 S1005 ST1022 SA5004 SA9003 SA4010 S1000 S1023 SA4024 SA1020 S1009 SA2002 SA4011 SA1030 QF1011 S1029 SA4022 QF1006 S1038 noresultvalues undeclaredname unusedvariable fillreturns nonewvars] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:12.39064 -0400 EDT m=+1.730787501\r\n\r\n\r\n2023/07/21 11:38:14 Analyze end [] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:11.38853 -0400 EDT m=+0.728676834 3.175811292s\r\n\r\n2023/07/21 11:38:14 Analyze end [] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:12.39064 -0400 EDT m=+1.730787501 2.341551917s\r\n```\r\n\r\nThe different sets arise from the two calls to source.Analyze, from diagnosePkg and codeAction, providing different values of the ""includeConvenience"" boolean, which varies the set. However, the facty subset of both sets is the same, so in principle they should be able to work synergistically.\r\n\r\nEven if the flag is always true, the concurrent calls both create a DAG of analysisNodes for a batch of work, and execute it in parallel, and both encounter the slow ec2 package (1s, see #61506), so both make cache misses, even though they want the same computation. The only sharing is of completed analysis summaries via the file cache; there is no de-duplication of inflight requests (i.e. the first thread doesn't ""lick the cookie""). This is problematic for large packages like ec2 because they are expensive to recompute, and more likely to be recomputed because their inflight duration is longer, increasing the odds of a concurrent request.\r\n\r\nOne solution would be to dedup using singleflight or a promise cache, but the logic could be tricky. Another would to somehow stagger the requests (codeAction and diagnosePkg) during initial indexing to make concurrent requests for large packages less likely; once the cache is populated subsequent operation is fast.\r\n\r\nIt's worth noting that this causes at worst a factor of 2x slowdown, which is a lot, but still much less than the current difference between actual and ideal performance of buildssa (see #61506).",gopls|Tools|gopls/performance,findleyr,"The following log events were observed in a single run of ""gopls check"" (with staticcheck and nilness enabled) that was instrumented to report start/end calls to Analyze:\r\n\r\n```go\r\n\tt0 := time.Now()\r\n\tlog.Println(""Analyze start"", analyzers, pkgs, t0)\r\n\tdefer func() {\r\n\t\tlog.Println(""Analyze end"", analyzers, pkgs, t0, time.Since(t0)) // repeat t0 so we can tie start/end together\r\n\t}()\r\n```\r\n\r\nObserve that two concurrent Analyze calls request that the same package be analyzed with two different sets of analyzers.\r\n```\r\nec2$ (cd ~/w/xtools && go build -o x ./gopls ) && time ~/w/xtools/x --profile.cpu=prof check ./internal/customizations/unit_test.go\r\n\r\n2023/07/21 11:38:11 Analyze start [structtag stdmethods lostcancel unusedresult unusedparams copylocks unusedwrite timeformat buildtag bools embed shift sortslice loopclosure simplifyslice useany cgocall errorsas simplifyrange printf fieldalignment atomicalign unsafeptr assign testinggoroutine nilness ifaceassert composites nilfunc unmarshal directive stringintconv atomic simplifycompositelit deepequalerrors httpresponse unreachable asmdecl shadow tests QF1012 SA9002 S1007 ST1019 ST1021 ST1003 SA9005 SA1015 QF1010 SA9004 SA1029 SA4006 ST1000 QF1005 SA1019 SA1021 ST1013 SA1026 QF1002 ST1005 SA4030 SA9007 S1034 SA4016 SA1014 SA5002 SA1007 SA4021 SA4005 SA5001 SA1025 S1035 S1010 SA5000 SA1024 S1011 SA4014 SA6005 SA6001 S1018 SA2001 SA4009 SA5008 ST1016 S1028 S1006 QF1007 SA9003 SA4010 ST1012 QF1003 SA1000 S1005 ST1022 SA5004 S1000 S1023 QF1011 S1029 SA4024 SA1020 S1009 SA2002 SA4011 SA1030 SA4022 QF1006 S1038 SA4000 SA5007 S1020 S1031 S1021 S1032 SA1010 QF1004 ST1001 SA4029 SA1001 SA1012 S1016 SA1013 SA4012 SA4025 ST1023 S1003 SA1008 SA4013 S1017 SA4019 SA1023 SA4026 QF1008 SA9008 S1037 SA6003 SA1016 SA4008 ST1011 ST1018 SA1003 SA4001 QF1001 ST1017 S1002 S1040 SA1028 SA4018 SA1027 SA1004 SA3001 SA5003 S1039 SA1017 S1036 S1024 QF1009 ST1020 S1008 SA4015 SA2003 S1001 SA4003 SA4028 SA1006 SA4023 SA1011 SA5005 SA5010 S1030 SA6000 S1004 SA4017 SA9006 SA4004 SA2000 SA1002 SA6002 SA5012 SA1005 SA9001 SA3000 ST1008 SA1018 S1033 ST1006 SA4031 SA4020 ST1015 S1019 S1012 SA4027 S1025 nonewvars noresultvalues undeclaredname unusedvariable fillreturns] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:11.38853 -0400 EDT m=+0.728676834\r\n\r\n2023/07/21 11:38:12 Analyze start [bools embed shift sortslice loopclosure simplifyslice unsafeptr useany cgocall errorsas simplifyrange printf fieldalignment atomicalign assign testinggoroutine nilness ifaceassert composites nilfunc unmarshal directive stringintconv atomic simplifycompositelit deepequalerrors httpresponse unreachable asmdecl shadow tests structtag stdmethods lostcancel unusedresult unusedparams copylocks unusedwrite timeformat buildtag SA4000 SA5007 S1020 S1031 S1021 S1032 SA1010 QF1004 ST1001 SA4029 SA1001 SA1012 S1016 SA1013 SA4012 SA4025 ST1023 S1003 SA1008 SA4013 S1017 SA4019 SA1023 SA4026 QF1008 SA9008 S1037 SA6003 SA1016 SA4008 ST1011 ST1018 SA1003 SA4001 QF1001 ST1017 S1002 S1040 SA1028 SA4018 SA1027 SA1004 SA3001 SA5003 S1039 SA1017 S1036 S1024 QF1009 ST1020 S1008 SA4015 SA2003 S1001 SA4003 SA4028 SA1006 SA4023 SA1011 S1030 SA6000 S1004 SA4017 SA9006 SA4004 SA5005 SA5010 SA2000 SA1002 SA6002 SA5012 SA1005 SA9001 SA3000 S1033 ST1006 SA4031 SA4020 ST1015 S1019 ST1008 SA1018 S1012 SA4027 S1025 SA9002 S1007 ST1019 ST1021 ST1003 SA9005 QF1012 SA1015 QF1010 SA9004 SA1029 SA4006 ST1000 QF1005 SA1019 SA1021 ST1013 SA1026 QF1002 ST1005 S1034 SA4016 SA1014 SA5002 SA1007 SA4021 SA4030 SA9007 SA4005 SA5001 SA1025 SA5000 SA1024 S1011 SA4014 SA6005 SA6001 S1035 S1010 SA4009 SA5008 ST1016 S1028 S1006 QF1007 S1018 SA2001 ST1012 QF1003 SA1000 S1005 ST1022 SA5004 SA9003 SA4010 S1000 S1023 SA4024 SA1020 S1009 SA2002 SA4011 SA1030 QF1011 S1029 SA4022 QF1006 S1038 noresultvalues undeclaredname unusedvariable fillreturns nonewvars] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:12.39064 -0400 EDT m=+1.730787501\r\n\r\n\r\n2023/07/21 11:38:14 Analyze end [] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:11.38853 -0400 EDT m=+0.728676834 3.175811292s\r\n\r\n2023/07/21 11:38:14 Analyze end [] map[github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations_test [github.com/aws/aws-sdk-go-v2/service/ec2/internal/customizations.test]:{}] 2023-07-21 11:38:12.39064 -0400 EDT m=+1.730787501 2.341551917s\r\n```\r\n\r\nThe different sets arise from the two calls to source.Analyze, from diagnosePkg and codeAction, providing different values of the ""includeConvenience"" boolean, which varies the set. However, the facty subset of both sets is the same, so in principle they should be able to work synergistically.\r\n\r\nEven if the flag is always true, the concurrent calls both create a DAG of analysisNodes for a batch of work, and execute it in parallel, and both encounter the slow ec2 package (1s, see #61506), so both make cache misses, even though they want the same computation. The only sharing is of completed analysis summaries via the file cache; there is no de-duplication of inflight requests (i.e. the first thread doesn't ""lick the cookie""). This is problematic for large packages like ec2 because they are expensive to recompute, and more likely to be recomputed because their inflight duration is longer, increasing the odds of a concurrent request.\r\n\r\nOne solution would be to dedup using singleflight or a promise cache, but the logic could be tricky. Another would to somehow stagger the requests (codeAction and diagnosePkg) during initial indexing to make concurrent requests for large packages less likely; once the cache is populated subsequent operation is fast.\r\n\r\nIt's worth noting that this causes at worst a factor of 2x slowdown, which is a lot, but still much less than the current difference between actual and ideal performance of buildssa (see #61506).","go\r\n\tt0 := time.Now()\r\n\tlog.Println(""Analyze start"", analyzers, pkgs, t0)\r\n\tdefer func() {\r\n\t\tlog.Println(""Analyze end"", analyzers, pkgs, t0, time.Since(t0)) // repeat t0 so we can tie start/end together\r\n\t}()\r\n"
61395,"sync/atomic: add OR/AND operators for unsigned types**Update**, Aug 16 2023: Current proposal at https://github.com/golang/go/issues/61395#issuecomment-1671759854. \r\n\r\n- - - \r\n\r\nOriginal related proposal: https://github.com/golang/go/issues/31748\r\n\r\nUse case: we have types with methods that set a value. These methods manipulate a bitset indicating that the value was set, which is used (e.g.) for data serialization. Users of this API know to use a lock to manage concurrently reading/writing the same field, but they are allowed to concurrently write to different fields. Given that the bitsets are logically shared between different fields, we must manipulate them atomically. Currently that takes the form of a CAS loop:\r\n\r\n\r\n\r\nBut, on x86-64, there are atomic versions of AND/OR that do this in one go, as mentioned in https://github.com/golang/go/issues/31748. Using this would not only make the setters faster, it would likely also allow inlining them: `setPresent` is too complex to inline.\r\n\r\ncc @aclements @ianlancetaylor @randall77\r\n\r\n",Proposal|Proposal-Accepted,mauri870,"**Update**, Aug 16 2023: Current proposal at https://github.com/golang/go/issues/61395#issuecomment-1671759854. \r\n\r\n- - - \r\n\r\nOriginal related proposal: https://github.com/golang/go/issues/31748\r\n\r\nUse case: we have types with methods that set a value. These methods manipulate a bitset indicating that the value was set, which is used (e.g.) for data serialization. Users of this API know to use a lock to manage concurrently reading/writing the same field, but they are allowed to concurrently write to different fields. Given that the bitsets are logically shared between different fields, we must manipulate them atomically. Currently that takes the form of a CAS loop:\r\n\r\n```go\r\ntype MyStruct struct{\r\n  x int32\r\n  y int32\r\n  // ...\r\n\r\n  present uint32 // Contains ""present"" bits for 32 fields.\r\n}\r\n\r\nfunc (m *MyStruct) SetX(v int32) {\r\n  m.x = v\r\n  setPresent(&m.present[0], 1)\r\n}\r\n\r\nfunc (m *MyStruct) SetY(v int32) {\r\n  m.y = v\r\n  setPresent(&m.present[0], 2)\r\n}\r\n\r\nfunc setPresent(part *uint32, num uint32) {\r\n\tfor {\r\n\t\told := atomic.LoadUint32(part)\r\n\t\tswapped := atomic.CompareAndSwapUint32(part, old, old|(1<<(num%32)))\r\n\t\tif swapped {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Yield and then try the swap again.\r\n\t\truntime.Gosched()\r\n\t}\r\n}\r\n\r\n// similar for clearPresent, but with AND.\r\n```\r\n\r\nBut, on x86-64, there are atomic versions of AND/OR that do this in one go, as mentioned in https://github.com/golang/go/issues/31748. Using this would not only make the setters faster, it would likely also allow inlining them: `setPresent` is too complex to inline.\r\n\r\ncc @aclements @ianlancetaylor @randall77\r\n\r\n","go\r\ntype MyStruct struct{\r\n  x int32\r\n  y int32\r\n  // ...\r\n\r\n  present uint32 // Contains ""present"" bits for 32 fields.\r\n}\r\n\r\nfunc (m *MyStruct) SetX(v int32) {\r\n  m.x = v\r\n  setPresent(&m.present[0], 1)\r\n}\r\n\r\nfunc (m *MyStruct) SetY(v int32) {\r\n  m.y = v\r\n  setPresent(&m.present[0], 2)\r\n}\r\n\r\nfunc setPresent(part *uint32, num uint32) {\r\n\tfor {\r\n\t\told := atomic.LoadUint32(part)\r\n\t\tswapped := atomic.CompareAndSwapUint32(part, old, old|(1<<(num%32)))\r\n\t\tif swapped {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Yield and then try the swap again.\r\n\t\truntime.Gosched()\r\n\t}\r\n}\r\n\r\n// similar for clearPresent, but with AND.\r\n"
61336,"proposal: x/tools/go/analysis/analysistest: improved, module-aware API[Status: rough draft]\r\n[Split out from preceding proposal #61324]\r\n\r\nThe analysistest package is too monolithic: if you don't like the Run function, you're on your own. Now that (assuming #61324 is accepted), it is possible to call checker.Analyze programmatically, it should be possible to break the task of testing down into three steps--load, analyze, assert--and allow clients to replace the first and/or third steps with their own logic if they prefer.\r\n\r\nAlso, the existing API requires GOPATH layout, and cannot use modules. (It is tempting to honor a go.mod file within testdata, but this causes the testdata tree to belong to its own separate module, leading to tests that don't work when run from the module cache, which is bad practice.)\r\n\r\nWe propose to add a new analysistest API--alongside its existing (""legacy"") API--as follows:\r\n\r\n\r\n\r\nI have shown the body of the Test function to indicate that it is largely a helper function, a recipe of four steps: (1) expand the file string to a directory tree; (2) load packages from it; (3) analyze; (4) apply assertions based on the source file tree. Users who decide that this function isn't sufficient for their needs can easily inline or fork it; steps 2-4 are all now public functions.\r\n\r\nThe LegacyResult declaration warrants some explanation. Previously, Result was an alias for `internal/checker.TestAnalyzerResult`, and the creation of the public alias accidentally published the internal type, which has several public fields. Unfortunately we can't retract it, so this proposal merely changes its name to LegacyResult, to emphasize its status. The Result alias is kept for compatibility, but we would prefer not to refer to it by this name as it may be easily confused with the new `checker.Result` type.\r\n\r\nhttps://go.dev/cl/509395 contains a prototype of the new API. A few analyzers' tests have been updated to use the new API.\r\n\r\nQuestions still to resolve:\r\n- compatibility: will old testdata inputs continue to work? How can we automate the transition?\r\n- the load/analyze/check model wants the load step to result in a tree of files, either because it was already there in testdata, or because it was expanded from a txtar file. But the existing checkSuggestedFixes uses txtar files, and they don't nest. what to do?",Proposal|Proposal-Hold,adonovan,"[Status: rough draft]\r\n[Split out from preceding proposal #61324]\r\n\r\nThe analysistest package is too monolithic: if you don't like the Run function, you're on your own. Now that (assuming #61324 is accepted), it is possible to call checker.Analyze programmatically, it should be possible to break the task of testing down into three steps--load, analyze, assert--and allow clients to replace the first and/or third steps with their own logic if they prefer.\r\n\r\nAlso, the existing API requires GOPATH layout, and cannot use modules. (It is tempting to honor a go.mod file within testdata, but this causes the testdata tree to belong to its own separate module, leading to tests that don't work when run from the module cache, which is bad practice.)\r\n\r\nWe propose to add a new analysistest API--alongside its existing (""legacy"") API--as follows:\r\n\r\n```go\r\npackage analysistest // golang.org/x/tools/go/analysis/analysistest\r\n\r\n// Test loads packages from the directory tree specified by file using\r\n// [Load], analyzes them using [checker.Analyze], then checks\r\n// expectations of diagnostics and facts in comments using [Check].\r\n// Finally it returns the result of [checker.Analyze]. Errors are\r\n// reported through t.Fatal.\r\n//\r\n// The file may be:\r\n//   - a directory,\r\n//   - a .txtar archive file, which is unpacked somewhere beneath t.TempDir(), or\r\n//   - a relative path to a .go file, which is loaded as an ad hoc package.\r\n//\r\n// This function is provided for convenience. Callers with more\r\n// complicated requirements should call [Load], [checker.Analyze], and\r\n// [Check] directly.\r\nfunc Test(t *testing.T, file string, a *analysis.Analyzer) *checker.Result {\r\n\t// Create test data tree from file argument\r\n\tdir, pattern := expandFile(t, file)\r\n\r\n\tpkgs := Load(t, dir, pattern)\r\n\r\n\tresult, err := checker.Analyze([]*analysis.Analyzer{a}, pkgs, &checker.Options{})\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\r\n\t// Check facts, diagnostics, and suggested fixes.\r\n\tfor _, act := range result.Roots {\r\n\t\tif act.Err != nil {\r\n\t\t\tt.Errorf(""error analyzing %s: %v"", act, act.Err)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tCheck(t, act, &CheckOptions{RootDir: dir})\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n// Check inspects a single completed checker action and\r\n// verifies that all reported diagnostics and facts match those\r\n// specified by the contents of ""// want ..."" comments in the\r\n// package's source files, which must have been parsed with comments\r\n// enabled, and that all suggested fixes match the contents\r\n// of any .golden files adjacent to the source files.\r\nfunc Check(t *testing.T, act *checker.Action, opts *CheckOptions)\r\ntype CheckOptions struct{\r\n\t// RootDir is the root directory of the test source tree.\r\n\t// It is stripped as a prefix of each filename before\r\n\t// they are compared for equality or presented in error messages.\r\n\tRootDir string\r\n}\r\n\r\n// Load loads packages, their tests, and dependencies\r\n// from syntax using packages.Load with an appropriate mode.\r\n// On success, it writes list/parse/type errors to t.Log\r\n// as they may be helpful when debugging a failing test,\r\n// but may be expected in test cases of error scenarios.\r\n//\r\n// Failures are reported through t.Fatal.\r\nfunc Load(t *testing.T, rootdir string, patterns ...string) []*packages.Package\r\n\r\ntype LegacyResult struct{ ... } // same declaration as previous internal/checker.TestAnalyzerResult.\r\ntype Result = LegacyResult\r\n```\r\n\r\nI have shown the body of the Test function to indicate that it is largely a helper function, a recipe of four steps: (1) expand the file string to a directory tree; (2) load packages from it; (3) analyze; (4) apply assertions based on the source file tree. Users who decide that this function isn't sufficient for their needs can easily inline or fork it; steps 2-4 are all now public functions.\r\n\r\nThe LegacyResult declaration warrants some explanation. Previously, Result was an alias for `internal/checker.TestAnalyzerResult`, and the creation of the public alias accidentally published the internal type, which has several public fields. Unfortunately we can't retract it, so this proposal merely changes its name to LegacyResult, to emphasize its status. The Result alias is kept for compatibility, but we would prefer not to refer to it by this name as it may be easily confused with the new `checker.Result` type.\r\n\r\nhttps://go.dev/cl/509395 contains a prototype of the new API. A few analyzers' tests have been updated to use the new API.\r\n\r\nQuestions still to resolve:\r\n- compatibility: will old testdata inputs continue to work? How can we automate the transition?\r\n- the load/analyze/check model wants the load step to result in a tree of files, either because it was already there in testdata, or because it was expanded from a txtar file. But the existing checkSuggestedFixes uses txtar files, and they don't nest. what to do?","go\r\npackage analysistest // golang.org/x/tools/go/analysis/analysistest\r\n\r\n// Test loads packages from the directory tree specified by file using\r\n// [Load], analyzes them using [checker.Analyze], then checks\r\n// expectations of diagnostics and facts in comments using [Check].\r\n// Finally it returns the result of [checker.Analyze]. Errors are\r\n// reported through t.Fatal.\r\n//\r\n// The file may be:\r\n//   - a directory,\r\n//   - a .txtar archive file, which is unpacked somewhere beneath t.TempDir(), or\r\n//   - a relative path to a .go file, which is loaded as an ad hoc package.\r\n//\r\n// This function is provided for convenience. Callers with more\r\n// complicated requirements should call [Load], [checker.Analyze], and\r\n// [Check] directly.\r\nfunc Test(t *testing.T, file string, a *analysis.Analyzer) *checker.Result {\r\n\t// Create test data tree from file argument\r\n\tdir, pattern := expandFile(t, file)\r\n\r\n\tpkgs := Load(t, dir, pattern)\r\n\r\n\tresult, err := checker.Analyze([]*analysis.Analyzer{a}, pkgs, &checker.Options{})\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\r\n\t// Check facts, diagnostics, and suggested fixes.\r\n\tfor _, act := range result.Roots {\r\n\t\tif act.Err != nil {\r\n\t\t\tt.Errorf(""error analyzing %s: %v"", act, act.Err)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tCheck(t, act, &CheckOptions{RootDir: dir})\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n// Check inspects a single completed checker action and\r\n// verifies that all reported diagnostics and facts match those\r\n// specified by the contents of ""// want ..."" comments in the\r\n// package's source files, which must have been parsed with comments\r\n// enabled, and that all suggested fixes match the contents\r\n// of any .golden files adjacent to the source files.\r\nfunc Check(t *testing.T, act *checker.Action, opts *CheckOptions)\r\ntype CheckOptions struct{\r\n\t// RootDir is the root directory of the test source tree.\r\n\t// It is stripped as a prefix of each filename before\r\n\t// they are compared for equality or presented in error messages.\r\n\tRootDir string\r\n}\r\n\r\n// Load loads packages, their tests, and dependencies\r\n// from syntax using packages.Load with an appropriate mode.\r\n// On success, it writes list/parse/type errors to t.Log\r\n// as they may be helpful when debugging a failing test,\r\n// but may be expected in test cases of error scenarios.\r\n//\r\n// Failures are reported through t.Fatal.\r\nfunc Load(t *testing.T, rootdir string, patterns ...string) []*packages.Package\r\n\r\ntype LegacyResult struct{ ... } // same declaration as previous internal/checker.TestAnalyzerResult.\r\ntype Result = LegacyResult\r\n"
61324,"x/tools/go/analysis/checker: an importable analysis driver based on go/packagesWe propose to create a new package, golang.org/x/tools/go/analysis/checker, to provide a function, Analyze, that applies a set of [analyzers](https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Analyzer) to a set of [packages](https://pkg.go.dev/golang.org/x/tools/go/packages#Package) and returns a data structure providing access to the complete results of the operation.\r\n\r\nBackground: the go/analysis framework defines an interface for static checkers that inspect a parsed, type-checked Go package and report mistakes or suggest fixes. The interface allows checkers (e.g. printf, nilness) to be written independent of the driver, and drivers (e.g. [go vet](https://pkg.go.dev/cmd/vet)) to be written independent of the checkers. The x/tools repo provides two drivers. The first, [unitchecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/unitchecker), used by go vet, performs ""separate analysis"", of one package at a time, using serialized types and facts for dependencies.  The second, [internal/checker](https://pkg.go.dev/golang.org/x/tools/go/analysis/internal/checker), uses go/packages to load packages and all their dependencies from source. Currently it has two public interfaces, [singlechecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/singlechecker) and [multichecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/multichecker), that differ only trivially: a singlechecker has only one analyzer, whereas a multichecker contains many and has a slightly more complicated command-line interface. However, both of these public interfaces consist only of a Main function that does the entire job and then calls os.Exit.\r\n\r\nUsers reported that this was not a very useful building block, and that they wanted to incorporate analysis into larger applications, or add some extra steps after package loading but before analysis, or some extra postprocessing of the analysis results. See:\r\n- #53215\r\n- #31897\r\n- #50265\r\n- #53336\r\n- #30231\r\n- #30219\r\n- #31007\r\n\r\nWe propose to create a new package with the following public API.\r\n\r\n\r\n\r\nThe primary entry point is Analyze; it accepts a set of packages and analyzers and runs a unit of analysis (an ""Action"") for each element of their cross product, plus all necessary horizontal and vertical dependencies. The result is exposed as a graph, only the roots of which are provided in the Result struct; this approach is similar to the one used in `go/packages.Load`.\r\n\r\nTo reduce churn and skew, the above API code is just the declarations but not all of the comments. You can see the complete API and implementation in https://go.dev/cl/411907.\r\n\r\n## Questions:\r\n\r\n- should the package name be something other than `checker`, so as not to suggest commonality with unitchecker? ""srcchecker"", perhaps? (If we could start over, I would use ""driver"" for {single,multi,unit}checker and this package, and use ""checker"" for analysis.Analyzer.)\r\n- see also the [rough, evolving] analysistest proposal #61336. Does this proposal have implications for analysistest?\r\n",Proposal|Proposal-Accepted,adonovan,"We propose to create a new package, golang.org/x/tools/go/analysis/checker, to provide a function, Analyze, that applies a set of [analyzers](https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Analyzer) to a set of [packages](https://pkg.go.dev/golang.org/x/tools/go/packages#Package) and returns a data structure providing access to the complete results of the operation.\r\n\r\nBackground: the go/analysis framework defines an interface for static checkers that inspect a parsed, type-checked Go package and report mistakes or suggest fixes. The interface allows checkers (e.g. printf, nilness) to be written independent of the driver, and drivers (e.g. [go vet](https://pkg.go.dev/cmd/vet)) to be written independent of the checkers. The x/tools repo provides two drivers. The first, [unitchecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/unitchecker), used by go vet, performs ""separate analysis"", of one package at a time, using serialized types and facts for dependencies.  The second, [internal/checker](https://pkg.go.dev/golang.org/x/tools/go/analysis/internal/checker), uses go/packages to load packages and all their dependencies from source. Currently it has two public interfaces, [singlechecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/singlechecker) and [multichecker](https://pkg.go.dev/golang.org/x/tools/go/analysis/multichecker), that differ only trivially: a singlechecker has only one analyzer, whereas a multichecker contains many and has a slightly more complicated command-line interface. However, both of these public interfaces consist only of a Main function that does the entire job and then calls os.Exit.\r\n\r\nUsers reported that this was not a very useful building block, and that they wanted to incorporate analysis into larger applications, or add some extra steps after package loading but before analysis, or some extra postprocessing of the analysis results. See:\r\n- #53215\r\n- #31897\r\n- #50265\r\n- #53336\r\n- #30231\r\n- #30219\r\n- #31007\r\n\r\nWe propose to create a new package with the following public API.\r\n\r\n```go\r\npackage checker // golang.org/x/tools/go/analysis/checker\r\n\r\n// Analyze runs the specified analyzers on the initial packages.\r\n//\r\n// For each analyzer that uses facts, Analyze also runs it on all the\r\n// dependencies of the initial packages. (In this case the program\r\n// must have been loaded using the packages.LoadAllSyntax flag.)\r\n//\r\n// On success, it returns a Result whose Roots holds one item per (a,\r\n// p) in the cross-product of analyzers and pkgs.\r\nfunc Analyze(analyzers []*analysis.Analyzer, pkgs []*packages.Package, opts *Options) (*Graph, error)\r\n\r\ntype Options struct {\r\n\t// Verbose     bool // -v: log each step  // NOTE: removed from earlier draft.\r\n\tSequential  bool // -p: disable parallelism\r\n\tSanityCheck bool // -s: perform additional sanity checks\r\n\tShowFacts   bool // -f: log each exported fact\r\n\r\n\t/* more fields in future */\r\n}\r\n\r\n// Graph holds the results of a batch of analysis, including\r\n// information about the requested actions (analyzers applied to\r\n// packages) plus any dependent actions that it was necessary to\r\n// compute.\r\ntype Graph struct { // NOTE: was Result in earlier draft\r\n\t// Roots contains the roots of the action graph.\r\n\t// Each node (a, p) in the action graph represents the\r\n\t// application of one analyzer a to one package p. (A node\r\n\t// thus corresponds to one analysis.Pass instance.)\r\n\t// The root actions are the product Input.Packages \xd7\r\n\t// Input.Analyzers.\r\n\t//\r\n\t// Each element of Action.Deps represents an edge in the\r\n\t// action graph: a dependency from one action to another.\r\n\t// An edge of the form (a, p) -> (a, p2) indicates that the\r\n\t// analysis of package p requires information (""facts"") from\r\n\t// the same analyzer applied to one of p's dependencies, p2.\r\n\t// An edge of the form (a, p) -> (a2, p) indicates that the\r\n\t// analysis of package p requires information (""results"")\r\n\t// from a different analyzer applied to the same package.\r\n\t// Such edges are sometimes termed ""vertical"" and ""horizontal"",\r\n\t// respectively.\r\n\tRoots []*Action\r\n\r\n\t/* more fields in future */\r\n}\r\n\r\n// An Action represents one unit of analysis work by the driver: the\r\n// application of one analysis to one package. It provides the inputs\r\n// to and records the outputs of a single analysis.Pass.\r\n//\r\n// Actions form a DAG, both within a package (as different analyzers\r\n// are applied, either in sequence or parallel), and across packages\r\n// (as dependencies are analyzed).\r\ntype Action struct {\r\n\tAnalyzer    *analysis.Analyzer\r\n\tPackage         *packages.Package // NOTE: was Pkg in earlier draft.\r\n\tIsRoot      bool // whether this is a root node of the graph\r\n\tDeps        []*Action\r\n\tResult      interface{} // computed result of Analyzer.run, if any (and if IsRoot)\r\n\tErr         error       // error result of Analyzer.run\r\n\tDiagnostics []analysis.Diagnostic\r\n\tDuration    time.Duration // execution time of this step\r\n\r\n\t/* more fields in future */\r\n}\r\nfunc (act *Action) AllObjectFacts() []analysis.ObjectFact\r\nfunc (act *Action) AllPackageFacts() []analysis.PackageFact\r\nfunc (act *Action) ObjectFact(obj types.Object, ptr analysis.Fact) bool\r\nfunc (act *Action) PackageFact(pkg *types.Package, ptr analysis.Fact) bool\r\n\r\n// -- utilities (all pure functions) --\r\n\r\nfunc (*Graph) Visit(f func(*Action) error) error) \r\n// NOTE: was ForEach in earlier draft:\r\n// func ForEach(roots []*Action, f func(*Action) error) error \r\n\r\nfunc (*Graph) JSONDiagnostics(w.io.Writer) \r\nfunc (*Graph) TextDiagnostics(w.io.Writer, contextLines int) \r\n// NOTE: in earlier draft, these were:\r\n// func PrintDiagnostics(out io.Writer, roots []*Action, context int) (exitcode int)\r\n// func PrintJSON(out io.Writer, roots []*Action)\r\n\r\n// NOTE: removed from earlier draft\r\n// func PrintTiming(out io.Writer, roots []*Action)\r\n\r\n// NOTE: Removed from earlier draft; will be dealt with later:\r\n// type FixFilterFunc = func(*Action, analysis.Diagnostic, analysis.SuggestedFix) bool\r\n// func ApplyFixes(actions []*Action, filter FixFilterFunc) error\r\n```\r\n\r\nThe primary entry point is Analyze; it accepts a set of packages and analyzers and runs a unit of analysis (an ""Action"") for each element of their cross product, plus all necessary horizontal and vertical dependencies. The result is exposed as a graph, only the roots of which are provided in the Result struct; this approach is similar to the one used in `go/packages.Load`.\r\n\r\nTo reduce churn and skew, the above API code is just the declarations but not all of the comments. You can see the complete API and implementation in https://go.dev/cl/411907.\r\n\r\n## Questions:\r\n\r\n- should the package name be something other than `checker`, so as not to suggest commonality with unitchecker? ""srcchecker"", perhaps? (If we could start over, I would use ""driver"" for {single,multi,unit}checker and this package, and use ""checker"" for analysis.Analyzer.)\r\n- see also the [rough, evolving] analysistest proposal #61336. Does this proposal have implications for analysistest?\r\n","go\r\npackage checker // golang.org/x/tools/go/analysis/checker\r\n\r\n// Analyze runs the specified analyzers on the initial packages.\r\n//\r\n// For each analyzer that uses facts, Analyze also runs it on all the\r\n// dependencies of the initial packages. (In this case the program\r\n// must have been loaded using the packages.LoadAllSyntax flag.)\r\n//\r\n// On success, it returns a Result whose Roots holds one item per (a,\r\n// p) in the cross-product of analyzers and pkgs.\r\nfunc Analyze(analyzers []*analysis.Analyzer, pkgs []*packages.Package, opts *Options) (*Graph, error)\r\n\r\ntype Options struct {\r\n\t// Verbose     bool // -v: log each step  // NOTE: removed from earlier draft.\r\n\tSequential  bool // -p: disable parallelism\r\n\tSanityCheck bool // -s: perform additional sanity checks\r\n\tShowFacts   bool // -f: log each exported fact\r\n\r\n\t/* more fields in future */\r\n}\r\n\r\n// Graph holds the results of a batch of analysis, including\r\n// information about the requested actions (analyzers applied to\r\n// packages) plus any dependent actions that it was necessary to\r\n// compute.\r\ntype Graph struct { // NOTE: was Result in earlier draft\r\n\t// Roots contains the roots of the action graph.\r\n\t// Each node (a, p) in the action graph represents the\r\n\t// application of one analyzer a to one package p. (A node\r\n\t// thus corresponds to one analysis.Pass instance.)\r\n\t// The root actions are the product Input.Packages \xd7\r\n\t// Input.Analyzers.\r\n\t//\r\n\t// Each element of Action.Deps represents an edge in the\r\n\t// action graph: a dependency from one action to another.\r\n\t// An edge of the form (a, p) -> (a, p2) indicates that the\r\n\t// analysis of package p requires information (""facts"") from\r\n\t// the same analyzer applied to one of p's dependencies, p2.\r\n\t// An edge of the form (a, p) -> (a2, p) indicates that the\r\n\t// analysis of package p requires information (""results"")\r\n\t// from a different analyzer applied to the same package.\r\n\t// Such edges are sometimes termed ""vertical"" and ""horizontal"",\r\n\t// respectively.\r\n\tRoots []*Action\r\n\r\n\t/* more fields in future */\r\n}\r\n\r\n// An Action represents one unit of analysis work by the driver: the\r\n// application of one analysis to one package. It provides the inputs\r\n// to and records the outputs of a single analysis.Pass.\r\n//\r\n// Actions form a DAG, both within a package (as different analyzers\r\n// are applied, either in sequence or parallel), and across packages\r\n// (as dependencies are analyzed).\r\ntype Action struct {\r\n\tAnalyzer    *analysis.Analyzer\r\n\tPackage         *packages.Package // NOTE: was Pkg in earlier draft.\r\n\tIsRoot      bool // whether this is a root node of the graph\r\n\tDeps        []*Action\r\n\tResult      interface{} // computed result of Analyzer.run, if any (and if IsRoot)\r\n\tErr         error       // error result of Analyzer.run\r\n\tDiagnostics []analysis.Diagnostic\r\n\tDuration    time.Duration // execution time of this step\r\n\r\n\t/* more fields in future */\r\n}\r\nfunc (act *Action) AllObjectFacts() []analysis.ObjectFact\r\nfunc (act *Action) AllPackageFacts() []analysis.PackageFact\r\nfunc (act *Action) ObjectFact(obj types.Object, ptr analysis.Fact) bool\r\nfunc (act *Action) PackageFact(pkg *types.Package, ptr analysis.Fact) bool\r\n\r\n// -- utilities (all pure functions) --\r\n\r\nfunc (*Graph) Visit(f func(*Action) error) error) \r\n// NOTE: was ForEach in earlier draft:\r\n// func ForEach(roots []*Action, f func(*Action) error) error \r\n\r\nfunc (*Graph) JSONDiagnostics(w.io.Writer) \r\nfunc (*Graph) TextDiagnostics(w.io.Writer, contextLines int) \r\n// NOTE: in earlier draft, these were:\r\n// func PrintDiagnostics(out io.Writer, roots []*Action, context int) (exitcode int)\r\n// func PrintJSON(out io.Writer, roots []*Action)\r\n\r\n// NOTE: removed from earlier draft\r\n// func PrintTiming(out io.Writer, roots []*Action)\r\n\r\n// NOTE: Removed from earlier draft; will be dealt with later:\r\n// type FixFilterFunc = func(*Action, analysis.Diagnostic, analysis.SuggestedFix) bool\r\n// func ApplyFixes(actions []*Action, filter FixFilterFunc) error\r\n"
61294,"x/tools/gopls: rename reports spurious conflict between parameter and package-level decl (""unexpected var object"")### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.20.5 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\u276f go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/jan.steinke/Library/Caches/go-build""\r\nGOENV=""/Users/jan.steinke/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/jan.steinke/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/jan.steinke/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.5/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/jan.steinke/code/github.com/<private module>/go.mod""\r\nGOWORK=""/Users/jan.steinke/code/github.com/<private module>/go.work""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/gc/v8gpyn8x0vgfqjzzqcw1g5w40000gp/T/go-build2228193324=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTrying to run `rename` command on the `Decode` parameter with gopls:\r\n\r\n\r\n\r\nI cannot reproduce it when I isolate that code so it seems it has something to do with the module in general. I cannot share it because it's a private code base.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBeing able to rename the parameter\r\n\r\n\r\n### What did you see instead?\r\n\r\nAn error by `gopls`:\r\n```\r\ngopls: 0: handler/handler.go:18:2: unexpected var object ""var Decode func(github.com/aws/aws-lambda-go/events.APIGatewayProxyRequest) (TIn, error)"" (please report a bug)\r\n```",NeedsFix|gopls,adonovan,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.20.5 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\u276f go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/jan.steinke/Library/Caches/go-build""\r\nGOENV=""/Users/jan.steinke/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/jan.steinke/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/jan.steinke/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.5/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/jan.steinke/code/github.com/<private module>/go.mod""\r\nGOWORK=""/Users/jan.steinke/code/github.com/<private module>/go.work""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/gc/v8gpyn8x0vgfqjzzqcw1g5w40000gp/T/go-build2228193324=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTrying to run `rename` command on the `Decode` parameter with gopls:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""encoding/base64""\r\n\t""fmt""\r\n\r\n\t""github.com/aws/aws-lambda-go/events""\r\n\t""google.golang.org/protobuf/proto""\r\n)\r\n\r\n// APIGatewayEventHandler is a function type that expresses how a APIGatewayEvent is handled.\r\n// This can be used for convenience to build Middlewares for this handler.\r\ntype APIGatewayEventHandler func(ctx context.Context, e events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error)\r\n\r\n// New returns a new DynamoDBEvent handler.\r\nfunc New[TIn any](\r\n\tDecode func(events.APIGatewayProxyRequest) (TIn, error),\r\n\tendpoint func(context.Context, TIn) (proto.Message, error),\r\n) APIGatewayEventHandler {\r\n\treturn func(ctx context.Context, apiGatewayEvent events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error) {\r\n\t\ttripID, err := Decode(apiGatewayEvent)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\tdto, err := endpoint(ctx, tripID)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\r\n\t\t// this might work better in an encode function\r\n\t\tprotoMessage, err := proto.Marshal(dto)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\r\n\t\tbody := base64.StdEncoding.EncodeToString(protoMessage)\r\n\r\n\t\treturn &events.APIGatewayProxyResponse{\r\n\t\t\tStatusCode:        200,\r\n\t\t\tHeaders:           map[string]string{},\r\n\t\t\tMultiValueHeaders: map[string][]string{},\r\n\t\t\tBody:              body,\r\n\t\t\tIsBase64Encoded:   true,\r\n\t\t}, nil\r\n\t}\r\n}\r\n```\r\n\r\nI cannot reproduce it when I isolate that code so it seems it has something to do with the module in general. I cannot share it because it's a private code base.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBeing able to rename the parameter\r\n\r\n\r\n### What did you see instead?\r\n\r\nAn error by `gopls`:\r\n```\r\ngopls: 0: handler/handler.go:18:2: unexpected var object ""var Decode func(github.com/aws/aws-lambda-go/events.APIGatewayProxyRequest) (TIn, error)"" (please report a bug)\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""encoding/base64""\r\n\t""fmt""\r\n\r\n\t""github.com/aws/aws-lambda-go/events""\r\n\t""google.golang.org/protobuf/proto""\r\n)\r\n\r\n// APIGatewayEventHandler is a function type that expresses how a APIGatewayEvent is handled.\r\n// This can be used for convenience to build Middlewares for this handler.\r\ntype APIGatewayEventHandler func(ctx context.Context, e events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error)\r\n\r\n// New returns a new DynamoDBEvent handler.\r\nfunc New[TIn any](\r\n\tDecode func(events.APIGatewayProxyRequest) (TIn, error),\r\n\tendpoint func(context.Context, TIn) (proto.Message, error),\r\n) APIGatewayEventHandler {\r\n\treturn func(ctx context.Context, apiGatewayEvent events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error) {\r\n\t\ttripID, err := Decode(apiGatewayEvent)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\tdto, err := endpoint(ctx, tripID)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\r\n\t\t// this might work better in an encode function\r\n\t\tprotoMessage, err := proto.Marshal(dto)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\r\n\t\tbody := base64.StdEncoding.EncodeToString(protoMessage)\r\n\r\n\t\treturn &events.APIGatewayProxyResponse{\r\n\t\t\tStatusCode:        200,\r\n\t\t\tHeaders:           map[string]string{},\r\n\t\t\tMultiValueHeaders: map[string][]string{},\r\n\t\t\tBody:              body,\r\n\t\t\tIsBase64Encoded:   true,\r\n\t\t}, nil\r\n\t}\r\n}\r\n"
61189,"x/tools/gopls: completion gives wrong lambda suggestion for pointer receivers of a generic type<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.12.4\r\n    golang.org/x/tools/gopls@v0.12.4 h1:nce5etAamR46d9oNGxop1aRK5rDQ0NqcY/SHIcyfEKY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20220722155223-a9213eeb770e h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.11.0 h1:bUO06HqtnRcc/7l71XBe4WcqTZ+3AH1J59zWDDwLKgU=\r\n    golang.org/x/sync@v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\r\n    golang.org/x/sys@v0.9.0 h1:KS/R3tvhPqvJvwcKfnBHJwwthS11LRhmM5D59eEXa0s=\r\n    golang.org/x/text@v0.10.0 h1:UpjohKhiEgNc0CSauXmwYftY1+LlaC75SJwh0SgCX58=\r\n    golang.org/x/tools@v0.10.1-0.20230622221742-0622ad2359a7 h1:5PWemM67wMSPpO0Y3lOPlyvgO3z56YkZRxPFcdd300g=\r\n    golang.org/x/vuln@v0.0.0-20230110180137-6ad3e3d07815 h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n    honnef.co/go/tools@v0.4.2 h1:6qXr+R5w+ktL5UkwEbPp+fEvfyoMPche6GkOpGHZcLc=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.20.4\r\n```\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n```\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/reducted/Library/Caches/go-build""\r\nGOENV=""/Users/reducted/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/reducted/go/pkg/mod""\r\nGONOPROXY=""reducted""\r\nGONOSUMDB=""reducted""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/reducted/go""\r\nGOPRIVATE=""reducted""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.4/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""reducted""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/6_/msm1_r211ds7gwg7dv3zw8j40000gn/T/go-build420238562=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\nA bugged snippet:\r\n\r\n\r\nA working version:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSee the comment on the snippet code above.\r\n\r\n### What did you see instead?\r\n\r\nSee the comment on the snippet code above.\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n\r\nVSCode\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\nNothing useful...\r\n\r\n",gopls|Tools|gopls/completion|gopls/generics,findleyr,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.12.4\r\n    golang.org/x/tools/gopls@v0.12.4 h1:nce5etAamR46d9oNGxop1aRK5rDQ0NqcY/SHIcyfEKY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20220722155223-a9213eeb770e h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221212164502-fae10dda9338 h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n    golang.org/x/mod@v0.11.0 h1:bUO06HqtnRcc/7l71XBe4WcqTZ+3AH1J59zWDDwLKgU=\r\n    golang.org/x/sync@v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\r\n    golang.org/x/sys@v0.9.0 h1:KS/R3tvhPqvJvwcKfnBHJwwthS11LRhmM5D59eEXa0s=\r\n    golang.org/x/text@v0.10.0 h1:UpjohKhiEgNc0CSauXmwYftY1+LlaC75SJwh0SgCX58=\r\n    golang.org/x/tools@v0.10.1-0.20230622221742-0622ad2359a7 h1:5PWemM67wMSPpO0Y3lOPlyvgO3z56YkZRxPFcdd300g=\r\n    golang.org/x/vuln@v0.0.0-20230110180137-6ad3e3d07815 h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n    honnef.co/go/tools@v0.4.2 h1:6qXr+R5w+ktL5UkwEbPp+fEvfyoMPche6GkOpGHZcLc=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.20.4\r\n```\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n```\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/reducted/Library/Caches/go-build""\r\nGOENV=""/Users/reducted/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/reducted/go/pkg/mod""\r\nGONOPROXY=""reducted""\r\nGONOSUMDB=""reducted""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/reducted/go""\r\nGOPRIVATE=""reducted""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.4/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""reducted""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/6_/msm1_r211ds7gwg7dv3zw8j40000gn/T/go-build420238562=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\nA bugged snippet:\r\n```go\r\npackage main\r\n\r\ntype Helloer interface {\r\n\tHello() string\r\n}\r\n\r\ntype Bob struct{}\r\nfunc (b *Bob) Hello() string {\r\n\treturn ""Hello, I'm Bob""\r\n}\r\n\r\ntype GreetingMachine[T Helloer] struct {\r\n\tGreeter T\r\n}\r\nfunc (gm *GreetingMachine[T]) GreetFunc(f func(T)) { // pointer receiver here\r\n\tf(gm.Greeter)\r\n}\r\n\r\n\r\nfunc main() {\r\n\tgm := &GreetingMachine[*Bob]{\r\n\t\tGreeter: &Bob{},\r\n\t}\r\n\t// try autocomplete on `gm.GreetFunc(f)`\r\n\tgm.GreetFunc(func(t T) {})  // autocomplete here gives `func(t T) {}`\r\n}\r\n\r\n```\r\n\r\nA working version:\r\n```go\r\npackage main\r\n\r\ntype Helloer interface {\r\n\tHello() string\r\n}\r\n\r\ntype Bob struct{}\r\nfunc (b *Bob) Hello() string {\r\n\treturn ""Hello, I'm Bob""\r\n}\r\n\r\ntype GreetingMachine[T Helloer] struct {\r\n\tGreeter T\r\n}\r\nfunc (gm GreetingMachine[T]) GreetFunc(f func(T)) {  // change to a value receiver\r\n\tf(gm.Greeter)\r\n}\r\n\r\n\r\nfunc main() {\r\n\tgm := &GreetingMachine[*Bob]{\r\n\t\tGreeter: &Bob{},\r\n\t}\r\n\t// try autocomplete on `gm.GreetFunc(f)`\r\n\tgm.GreetFunc(func(b *Bob) {})  // autocomplete here gives `func(b *Bob) {}`\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSee the comment on the snippet code above.\r\n\r\n### What did you see instead?\r\n\r\nSee the comment on the snippet code above.\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n\r\nVSCode\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\nNothing useful...\r\n\r\n","go\r\npackage main\r\n\r\ntype Helloer interface {\r\n\tHello() string\r\n}\r\n\r\ntype Bob struct{}\r\nfunc (b *Bob) Hello() string {\r\n\treturn ""Hello, I'm Bob""\r\n}\r\n\r\ntype GreetingMachine[T Helloer] struct {\r\n\tGreeter T\r\n}\r\nfunc (gm *GreetingMachine[T]) GreetFunc(f func(T)) { // pointer receiver here\r\n\tf(gm.Greeter)\r\n}\r\n\r\n\r\nfunc main() {\r\n\tgm := &GreetingMachine[*Bob]{\r\n\t\tGreeter: &Bob{},\r\n\t}\r\n\t// try autocomplete on `gm.GreetFunc(f)`\r\n\tgm.GreetFunc(func(t T) {})  // autocomplete here gives `func(t T) {}`\r\n}\r\n\r\n"
61158,"runtime: ReadMemStats crashes with segmentation violation<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.21-6260049fa2\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nReproduces on the most recent developer release branch, can see the later go-playground link\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/.cache/go-build'\r\nGOENV='/home/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.21-6260049fa2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build531354456=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nusing `runtime.ReadMemStats` with nil pointer leads to segmentation fault without nice crash message \r\n\r\n\r\n[go.dev](https://go.dev/play/p/1KSQke2Jqc9?v=gotip) link to reproduce.\r\n\r\n### What did you expect to see?\r\n\r\nA runtime panic message (i.e. `panic: runtime error: invalid memory address or nil pointer dereference`)\r\n\r\n### What did you see instead?\r\n\r\n```\r\nSIGSEGV: segmentation violation\r\nPC=0x428424 m=0 sigcode=1\r\n\r\ngoroutine 0 [idle]:\r\nruntime.readmemstats_m(0x0)\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:487 +0x2c4 fp=0x7fe24f106da0 sp=0x7fe24f1061f8 pc=0x428424\r\nruntime.ReadMemStats.func1()\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:353 +0x17 fp=0x7fe24f106db8 sp=0x7fe24f106da0 pc=0x428137\r\nruntime.systemstack()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:509 +0x4a fp=0x7fe24f106dc8 sp=0x7fe24f106db8 pc=0x454eea\r\n\r\ngoroutine 1 [running]:\r\nruntime.systemstack_switch()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:474 +0x8 fp=0xc00003e700 sp=0xc00003e6f0 pc=0x454e88\r\nruntime.ReadMemStats(0x0)\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:352 +0x47 fp=0xc00003e728 sp=0xc00003e700 pc=0x4280e7\r\nmain.main()\r\n\t/tmp/sandbox1424825241/prog.go:8 +0x15 fp=0xc00003e740 sp=0xc00003e728 pc=0x457ef5\r\nruntime.main()\r\n\t/usr/local/go-faketime/src/runtime/proc.go:267 +0x2b2 fp=0xc00003e7e0 sp=0xc00003e740 pc=0x42f9d2\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003e7e8 sp=0xc00003e7e0 pc=0x455281\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003efa8 sp=0xc00003ef88 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/usr/local/go-faketime/src/runtime/proc.go:322 +0xa5 fp=0xc00003efe0 sp=0xc00003efa8 pc=0x42fca5\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003efe8 sp=0xc00003efe0 pc=0x455281\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003f778 sp=0xc00003f758 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/usr/local/go-faketime/src/runtime/mgcsweep.go:280 +0x94 fp=0xc00003f7c8 sp=0xc00003f778 pc=0x41c954\r\nruntime.gcenable.func1()\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:200 +0x25 fp=0xc00003f7e0 sp=0xc00003f7c8 pc=0x411d85\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003f7e8 sp=0xc00003f7e0 pc=0x455281\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00005e000?, 0x47d860?, 0x1?, 0x0?, 0xc000006d00?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003ff70 sp=0xc00003ff50 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x4cae20)\r\n\t/usr/local/go-faketime/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc00003ffa0 sp=0xc00003ff70 pc=0x41a1c9\r\nruntime.bgscavenge(0x0?)\r\n\t/usr/local/go-faketime/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc00003ffc8 sp=0xc00003ffa0 pc=0x41a71c\r\nruntime.gcenable.func2()\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:201 +0x25 fp=0xc00003ffe0 sp=0xc00003ffc8 pc=0x411d25\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003ffe8 sp=0xc00003ffe0 pc=0x455281\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:201 +0xa5\r\n\r\nrax    0x400000\r\nrbx    0x0\r\nrcx    0x44000\r\nrdx    0x15588\r\nrdi    0x0\r\nrsi    0x0\r\nrbp    0x7fe24f106d90\r\nrsp    0x7fe24f1061f8\r\nr8     0x15588\r\nr9     0x0\r\nr10    0x37c000\r\nr11    0x39dc10\r\nr12    0x719c10\r\nr13    0x4cb2a0\r\nr14    0x4caec0\r\nr15    0xa\r\nrip    0x428424\r\nrflags 0x10206\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n\r\n",compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.21-6260049fa2\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nReproduces on the most recent developer release branch, can see the later go-playground link\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='amd64'\r\nGOBIN=''\r\nGOCACHE='/home/.cache/go-build'\r\nGOENV='/home/.config/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='amd64'\r\nGOHOSTOS='linux'\r\nGOINSECURE=''\r\nGOMODCACHE='/home/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='linux'\r\nGOPATH='/home/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/home/goroot'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/home/goroot/pkg/tool/linux_amd64'\r\nGOVCS=''\r\nGOVERSION='devel go1.21-6260049fa2'\r\nGCCGO='gccgo'\r\nGOAMD64='v1'\r\nAR='ar'\r\nCC='gcc'\r\nCXX='g++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build531354456=/tmp/go-build -gno-record-gcc-switches'\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nusing `runtime.ReadMemStats` with nil pointer leads to segmentation fault without nice crash message \r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""runtime""\r\n)\r\n\r\nfunc main() {\r\n\truntime.ReadMemStats(nil)\r\n}\r\n```\r\n[go.dev](https://go.dev/play/p/1KSQke2Jqc9?v=gotip) link to reproduce.\r\n\r\n### What did you expect to see?\r\n\r\nA runtime panic message (i.e. `panic: runtime error: invalid memory address or nil pointer dereference`)\r\n\r\n### What did you see instead?\r\n\r\n```\r\nSIGSEGV: segmentation violation\r\nPC=0x428424 m=0 sigcode=1\r\n\r\ngoroutine 0 [idle]:\r\nruntime.readmemstats_m(0x0)\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:487 +0x2c4 fp=0x7fe24f106da0 sp=0x7fe24f1061f8 pc=0x428424\r\nruntime.ReadMemStats.func1()\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:353 +0x17 fp=0x7fe24f106db8 sp=0x7fe24f106da0 pc=0x428137\r\nruntime.systemstack()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:509 +0x4a fp=0x7fe24f106dc8 sp=0x7fe24f106db8 pc=0x454eea\r\n\r\ngoroutine 1 [running]:\r\nruntime.systemstack_switch()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:474 +0x8 fp=0xc00003e700 sp=0xc00003e6f0 pc=0x454e88\r\nruntime.ReadMemStats(0x0)\r\n\t/usr/local/go-faketime/src/runtime/mstats.go:352 +0x47 fp=0xc00003e728 sp=0xc00003e700 pc=0x4280e7\r\nmain.main()\r\n\t/tmp/sandbox1424825241/prog.go:8 +0x15 fp=0xc00003e740 sp=0xc00003e728 pc=0x457ef5\r\nruntime.main()\r\n\t/usr/local/go-faketime/src/runtime/proc.go:267 +0x2b2 fp=0xc00003e7e0 sp=0xc00003e740 pc=0x42f9d2\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003e7e8 sp=0xc00003e7e0 pc=0x455281\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003efa8 sp=0xc00003ef88 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/usr/local/go-faketime/src/runtime/proc.go:322 +0xa5 fp=0xc00003efe0 sp=0xc00003efa8 pc=0x42fca5\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003efe8 sp=0xc00003efe0 pc=0x455281\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003f778 sp=0xc00003f758 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/usr/local/go-faketime/src/runtime/mgcsweep.go:280 +0x94 fp=0xc00003f7c8 sp=0xc00003f778 pc=0x41c954\r\nruntime.gcenable.func1()\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:200 +0x25 fp=0xc00003f7e0 sp=0xc00003f7c8 pc=0x411d85\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003f7e8 sp=0xc00003f7e0 pc=0x455281\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00005e000?, 0x47d860?, 0x1?, 0x0?, 0xc000006d00?)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:398 +0xce fp=0xc00003ff70 sp=0xc00003ff50 pc=0x42fe0e\r\nruntime.goparkunlock(...)\r\n\t/usr/local/go-faketime/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x4cae20)\r\n\t/usr/local/go-faketime/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc00003ffa0 sp=0xc00003ff70 pc=0x41a1c9\r\nruntime.bgscavenge(0x0?)\r\n\t/usr/local/go-faketime/src/runtime/mgcscavenge.go:653 +0x3c fp=0xc00003ffc8 sp=0xc00003ffa0 pc=0x41a71c\r\nruntime.gcenable.func2()\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:201 +0x25 fp=0xc00003ffe0 sp=0xc00003ffc8 pc=0x411d25\r\nruntime.goexit()\r\n\t/usr/local/go-faketime/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00003ffe8 sp=0xc00003ffe0 pc=0x455281\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/usr/local/go-faketime/src/runtime/mgc.go:201 +0xa5\r\n\r\nrax    0x400000\r\nrbx    0x0\r\nrcx    0x44000\r\nrdx    0x15588\r\nrdi    0x0\r\nrsi    0x0\r\nrbp    0x7fe24f106d90\r\nrsp    0x7fe24f1061f8\r\nr8     0x15588\r\nr9     0x0\r\nr10    0x37c000\r\nr11    0x39dc10\r\nr12    0x719c10\r\nr13    0x4cb2a0\r\nr14    0x4caec0\r\nr15    0xa\r\nrip    0x428424\r\nrflags 0x10206\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n```\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""runtime""\r\n)\r\n\r\nfunc main() {\r\n\truntime.ReadMemStats(nil)\r\n}\r\n"
61130,math: portable FMA implementation incorrectly returns -0 in some situations### What version of Go are you using (`go version`)?\r\n\r\n8b5fe59\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nlinux-amd64\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/KGZMg3ATQtx\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n0\r\n0\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n0\r\n-0\r\n```\r\n\r\nFMA calculates `x*y+z`. In the portable implementation of FMA if `|x*y|` is equal to `|z|` the sign bit of the result is set to the sign bit of `x*y`. If `x*y` is negative and `z` is positive this results in the incorrect result `-0`.\r\n\r\nFMA is an intrinsic on some platforms. This issue only affects the portable implementation (hence the different results when calling FMA directly vs. indirectly).,NeedsFix,mundaym,"### What version of Go are you using (`go version`)?\r\n\r\n8b5fe59\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nlinux-amd64\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/KGZMg3ATQtx\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""math""\r\n)\r\n\r\nvar portableFMA = math.FMA\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%g\\n"", math.FMA(-1, 1, 1))\r\n\tfmt.Printf(""%g\\n"", portableFMA(-1, 1, 1))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n0\r\n0\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n0\r\n-0\r\n```\r\n\r\nFMA calculates `x*y+z`. In the portable implementation of FMA if `|x*y|` is equal to `|z|` the sign bit of the result is set to the sign bit of `x*y`. If `x*y` is negative and `z` is positive this results in the incorrect result `-0`.\r\n\r\nFMA is an intrinsic on some platforms. This issue only affects the portable implementation (hence the different results when calling FMA directly vs. indirectly).","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""math""\r\n)\r\n\r\nvar portableFMA = math.FMA\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%g\\n"", math.FMA(-1, 1, 1))\r\n\tfmt.Printf(""%g\\n"", portableFMA(-1, 1, 1))\r\n}\r\n"
61080,"os/exec: syscall.forkExec hang when spawning multiple processes concurrently on `darwin`### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, it reproduces since [this change](https://go-review.googlesource.com/c/go/+/421441).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/joaks/Library/Caches/go-build'\r\nGOENV='/Users/joaks/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/joaks/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/joaks/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/joaks/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/joaks/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xj/2wbc4_xn293gkz7_6rzxsz5w0000gn/T/go-build3971151895=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWe have a code generator that we use at Uber that spawns up many concurrent child processes that communicate via stdin & stdout. While doing internal testing with Go1.21rc2, we noticed the code generator hanging. A very minimal runnable repro can be found in this repository: https://github.com/JacobOaks/Go1.21rc2-syscall.forkExec-hanging-repro.\r\n\r\nEssentially, we are spinning up a bunch of external processes with stdin & stdout pipes concurrently. Something like (see link above for full repro):\r\n\r\n\r\n\r\nAttaching delve to the hanging process, we notice the issue occurs in `cmd.Start`, where `syscall.forkExec` seems to hang:\r\n\r\n```\r\n(dlv) grs\r\n  Goroutine 1 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/sema.go:62 sync.runtime_Semacquire (0x1026bf57c) [semacquire]\r\n  Goroutine 2 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [force gc (idle)]\r\n  Goroutine 3 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [GC sweep wait]\r\n  Goroutine 4 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [GC scavenge wait]\r\n  Goroutine 5 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [finalizer wait]\r\n  Goroutine 12 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_darwin.go:24 syscall.syscall (0x1026bfaf8) (thread 18311682) [timer goroutine (idle)]\r\n[6 goroutines]\r\n(dlv) gr 12\r\nSwitched from 0 to 12 (thread 18311682)\r\n(dlv) stack\r\n 0  0x000000018f884acc in ???\r\n    at ?:-1\r\n 1  0x00000001026c0b58 in runtime.systemstack_switch\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/asm_arm64.s:200\r\n 2  0x00000001026b19dc in runtime.libcCall\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_libc.go:49\r\n 3  0x00000001026bfaf8 in syscall.syscall\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_darwin.go:24\r\n 4  0x00000001026daa5c in syscall.readlen\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/syscall_darwin.go:242\r\n 5  0x00000001026d9c30 in syscall.forkExec\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/exec_unix.go:217\r\n 6  0x00000001026e9628 in syscall.StartProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/exec_unix.go:334\r\n 7  0x00000001026e9628 in os.startProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec_posix.go:54\r\n 8  0x00000001026e9340 in os.StartProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec.go:111\r\n 9  0x00000001026fc534 in os/exec.(*Cmd).Start\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec/exec.go:693\r\n10  0x00000001026ff368 in main.(*client).start\r\n    at ./server/main.go:105\r\n11  0x00000001026fefa8 in main.spawn.func1\r\n    at ./server/main.go:46\r\n12  0x00000001026c3024 in runtime.goexit\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/asm_arm64.s:1197\r\n```\r\n\r\nThis behavior is flaky and in our investigation, only appears on Go1.21rc2 on darwin-arm64.\r\n\r\n`git bisect` indicated [this change](https://go-review.googlesource.com/c/go/+/421441) to be the culprit.\r\n\r\n### What did you expect to see?\r\n\r\nI would expect the program in the linked repro to not hang, as in Go 1.20.\r\n\r\n### What did you see instead?\r\n\r\nIt occasionally hangs, see above.\r\n\r\n\r\n",OS-Darwin|NeedsFix|release-blocker,bcmills,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, it reproduces since [this change](https://go-review.googlesource.com/c/go/+/421441).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/joaks/Library/Caches/go-build'\r\nGOENV='/Users/joaks/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/joaks/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/joaks/go'\r\nGOPRIVATE=''\r\nGOPROXY='https://proxy.golang.org,direct'\r\nGOROOT='/Users/joaks/go/src/github.com/golang/go'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/joaks/go/src/github.com/golang/go/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/dev/null'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/xj/2wbc4_xn293gkz7_6rzxsz5w0000gn/T/go-build3971151895=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWe have a code generator that we use at Uber that spawns up many concurrent child processes that communicate via stdin & stdout. While doing internal testing with Go1.21rc2, we noticed the code generator hanging. A very minimal runnable repro can be found in this repository: https://github.com/JacobOaks/Go1.21rc2-syscall.forkExec-hanging-repro.\r\n\r\nEssentially, we are spinning up a bunch of external processes with stdin & stdout pipes concurrently. Something like (see link above for full repro):\r\n\r\n```go\r\nfunc spawn(binaryPath string, n int) []*client {\r\n\tclients := make([]*client, n)\r\n\tfor i := 0; i < n; i++ {\r\n\t\tclients[i] = newClient(binaryPath)\r\n\t}\r\n\r\n\tvar wg sync.WaitGroup\r\n\tfor i := 0; i < n; i++ {\r\n\t\twg.Add(1)\r\n\t\tclient := clients[i]\r\n\t\tgo func() {\r\n\t\t\tif err := client.start(); err != nil {\r\n\t\t\t\tpanic(""TODO"")\r\n\t\t\t}\r\n\t\t\twg.Done()\r\n\t\t}()\r\n\t}\r\n\twg.Wait()\r\n\treturn clients\r\n}\r\n\r\ntype client struct {\r\n\tcmd *exec.Cmd\r\n\r\n\tstdout io.ReadCloser\r\n\tstdin  io.WriteCloser\r\n}\r\n\r\nfunc newClient(binary string) *client {\r\n\treturn &client{\r\n\t\tcmd: exec.Command(binary),\r\n\t}\r\n}\r\n\r\nfunc (c *client) start() error {\r\n\tvar err error\r\n\tc.stdout, err = c.cmd.StdoutPipe()\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(""create stdout pipe: %w"", err)\r\n\t}\r\n\tc.stdin, err = c.cmd.StdinPipe()\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(""create stdin pipe: %w"", err)\r\n\t}\r\n\tif err = c.cmd.Start(); err != nil {\r\n\t\treturn fmt.Errorf(""run cmd: %w"", err)\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\r\nAttaching delve to the hanging process, we notice the issue occurs in `cmd.Start`, where `syscall.forkExec` seems to hang:\r\n\r\n```\r\n(dlv) grs\r\n  Goroutine 1 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/sema.go:62 sync.runtime_Semacquire (0x1026bf57c) [semacquire]\r\n  Goroutine 2 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [force gc (idle)]\r\n  Goroutine 3 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [GC sweep wait]\r\n  Goroutine 4 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [GC scavenge wait]\r\n  Goroutine 5 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/proc.go:399 runtime.gopark (0x102695198) [finalizer wait]\r\n  Goroutine 12 - User: /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_darwin.go:24 syscall.syscall (0x1026bfaf8) (thread 18311682) [timer goroutine (idle)]\r\n[6 goroutines]\r\n(dlv) gr 12\r\nSwitched from 0 to 12 (thread 18311682)\r\n(dlv) stack\r\n 0  0x000000018f884acc in ???\r\n    at ?:-1\r\n 1  0x00000001026c0b58 in runtime.systemstack_switch\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/asm_arm64.s:200\r\n 2  0x00000001026b19dc in runtime.libcCall\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_libc.go:49\r\n 3  0x00000001026bfaf8 in syscall.syscall\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/sys_darwin.go:24\r\n 4  0x00000001026daa5c in syscall.readlen\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/syscall_darwin.go:242\r\n 5  0x00000001026d9c30 in syscall.forkExec\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/exec_unix.go:217\r\n 6  0x00000001026e9628 in syscall.StartProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/syscall/exec_unix.go:334\r\n 7  0x00000001026e9628 in os.startProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec_posix.go:54\r\n 8  0x00000001026e9340 in os.StartProcess\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec.go:111\r\n 9  0x00000001026fc534 in os/exec.(*Cmd).Start\r\n    at /Users/joaks/go/src/github.com/golang/go/src/os/exec/exec.go:693\r\n10  0x00000001026ff368 in main.(*client).start\r\n    at ./server/main.go:105\r\n11  0x00000001026fefa8 in main.spawn.func1\r\n    at ./server/main.go:46\r\n12  0x00000001026c3024 in runtime.goexit\r\n    at /Users/joaks/go/src/github.com/golang/go/src/runtime/asm_arm64.s:1197\r\n```\r\n\r\nThis behavior is flaky and in our investigation, only appears on Go1.21rc2 on darwin-arm64.\r\n\r\n`git bisect` indicated [this change](https://go-review.googlesource.com/c/go/+/421441) to be the culprit.\r\n\r\n### What did you expect to see?\r\n\r\nI would expect the program in the linked repro to not hang, as in Go 1.20.\r\n\r\n### What did you see instead?\r\n\r\nIt occasionally hangs, see above.\r\n\r\n\r\n","go\r\nfunc spawn(binaryPath string, n int) []*client {\r\n\tclients := make([]*client, n)\r\n\tfor i := 0; i < n; i++ {\r\n\t\tclients[i] = newClient(binaryPath)\r\n\t}\r\n\r\n\tvar wg sync.WaitGroup\r\n\tfor i := 0; i < n; i++ {\r\n\t\twg.Add(1)\r\n\t\tclient := clients[i]\r\n\t\tgo func() {\r\n\t\t\tif err := client.start(); err != nil {\r\n\t\t\t\tpanic(""TODO"")\r\n\t\t\t}\r\n\t\t\twg.Done()\r\n\t\t}()\r\n\t}\r\n\twg.Wait()\r\n\treturn clients\r\n}\r\n\r\ntype client struct {\r\n\tcmd *exec.Cmd\r\n\r\n\tstdout io.ReadCloser\r\n\tstdin  io.WriteCloser\r\n}\r\n\r\nfunc newClient(binary string) *client {\r\n\treturn &client{\r\n\t\tcmd: exec.Command(binary),\r\n\t}\r\n}\r\n\r\nfunc (c *client) start() error {\r\n\tvar err error\r\n\tc.stdout, err = c.cmd.StdoutPipe()\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(""create stdout pipe: %w"", err)\r\n\t}\r\n\tc.stdin, err = c.cmd.StdinPipe()\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(""create stdin pipe: %w"", err)\r\n\t}\r\n\tif err = c.cmd.Start(); err != nil {\r\n\t\treturn fmt.Errorf(""run cmd: %w"", err)\r\n\t}\r\n\treturn nil\r\n}\r\n"
60996,"runtime: crash/hang on startup in buildmode=c-shared amd64 DLL when run on ARM64 windows 11.<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes. Confirmed behavior with go1.21rc2 also. \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\bb\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\bb\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\bb\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\bb\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\go120\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\go120\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=D:\\work\\go\\minimal_cfguard_test\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\bb\\AppData\\Local\\Temp\\go-build1785003883=/tmp/go-build -gno-record-gcc-switches\r\ngdb --version: GNU gdb (GDB) 8.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n* Behaviour exhibits reliably when running as amd64 DLL in either C or Python host EXE on windows ARM machines. \r\n* Crash/Hang is intermittent but can be reliably triggered in between 5-20 repeated runs of the exe. \r\n* Trigger condition tracked down to the host exe having windows anti-exploit measure ""Control Flow Guard"" enabled. \r\n\r\n\r\nPre-reqs:\r\n* Windows 11 ARM machine (vm or baremetal)\r\n* Go 1.20  or 1.21rc2 installed\r\n* Visual C Build Tools 2019 (or 2020) installed (for the caller exe)\r\n* MingGW 8.10  or TDM-GCC latest (for Go DLL compiling)\r\n\r\nSteps to reproduce as follows:\r\n\r\nmindll.go\r\n\r\n\r\n\r\ncompile it\r\n\r\n```\r\ngo mod init\r\ngo mod init mindll\r\ngo mod tidy\r\ngo build -buildmode=c-shared -o mindll.dll .\r\n```\r\n\r\nc_call.c\r\n\r\n```\r\n#include <windows.h>\r\n#include <stdio.h>\r\ntypedef void (*fred_func)(void);\r\nint main() {\r\n\tHINSTANCE hinstLib = LoadLibrary(TEXT(""mindll.dll""));\r\n\tfred_func Fred;\r\n\tFred = (fred_func)GetProcAddress(hinstLib, ""Fred"");\r\n\tprintf(""Calling Fred\\n"");  fflush(stdout);\r\n\tFred();\r\n\tprintf(""Back from Fred\\n"");\r\n    return 0;\r\n}\r\n```\r\n\r\nCompile it (no CFGuard)\r\n\r\n```\r\n""C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat""\r\ncl c_call.c -o ccall_nocfg.exe -Wall\r\n```\r\n\r\nccall_nocfg.bat\r\n\r\n```\r\nccall_nocfg.exe\r\nccall_nocfg.bat\r\n```\r\n\r\nRun ccall_nocfg.bat for a while, runs fine, no issues.\r\n\r\nCompile caller with CFGuard on\r\n\r\n```\r\ncl c_call.c -o ccall_withcfg.exe -Wall /guard:cf\r\n```\r\n\r\nccall_withcfg.bat\r\n\r\n```\r\nccall_withcfg.exe\r\nccall_withcfg.bat\r\n```\r\n\r\nRun ccall_withcfg.bat, process crashes/hangs quite quickly, anywhere from 5th to 20th run. Then keeps crashing throughout, every 5-20 runs or so.\r\n\r\n### What did you expect to see?\r\n\r\nThe C process and Go DLL running reliably 100% \r\n\r\n\r\n### What did you see instead?\r\n\r\nThe process hanging/crashing after LoadLibrary and/or at first DLL function call (Fred) every 5-20 runs.\r\n\r\n### Workarounds (& why they are workarounds) \r\n* ""Compile everything for ARM""  -  Don't have control of the python exe 'mothership'. Viable arm python has only recently appeared with 3.11 but we must support back to py 3.7 for windows 7. Also many python libraries not fully available native for arm windows yet. \r\n* ""Compile caller without Control Flow Guard"" - as above + unhappy security auditors\r\n* ""Have the end users disable Control Flow Guard for this process (or system-wide) in windows control panel for ARM windows machines"" - very unhappy security auditors. Bad reputational for product.\r\n\r\n\r\n### Notes\r\n* This behavior does not happen when a minimal C-DLL is substituted for the Go DLL above, *regardless of whether or not the test C DLL has control flow guard enabled or disabled.*\r\n* There is only one Go runtime in the process as the 'mothership' is either a python or C exe. \r\n* I am not freeing or attempting to unload the Go DLL at all. \r\n\r\n* The process briefly hangs then suddenly exits and no errors, stacktraces or anything are printed. Also nothing in the Windows event log, which seems to imply that Go is eating the exception and calling ExitProcess?\r\n* I see support for CFG itself IN go was deemed not-useful here https://github.com/golang/go/issues/35940  however interactions *with* CFG when GO is a DLL do possibly still need to be addressed.\r\n* (Speculation) perhaps this issue is similar to that of https://github.com/golang/go/issues/59213 however this issue is still present in Go 1.21rc2\r\n\r\n\r\n\r\n\r\n\r\n\r\n",OS-Windows|NeedsInvestigation|arch-arm64|compiler/runtime,qmuntal,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes. Confirmed behavior with go1.21rc2 also. \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\bb\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\bb\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\bb\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\bb\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\go120\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\go120\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=D:\\work\\go\\minimal_cfguard_test\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\bb\\AppData\\Local\\Temp\\go-build1785003883=/tmp/go-build -gno-record-gcc-switches\r\ngdb --version: GNU gdb (GDB) 8.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n* Behaviour exhibits reliably when running as amd64 DLL in either C or Python host EXE on windows ARM machines. \r\n* Crash/Hang is intermittent but can be reliably triggered in between 5-20 repeated runs of the exe. \r\n* Trigger condition tracked down to the host exe having windows anti-exploit measure ""Control Flow Guard"" enabled. \r\n\r\n\r\nPre-reqs:\r\n* Windows 11 ARM machine (vm or baremetal)\r\n* Go 1.20  or 1.21rc2 installed\r\n* Visual C Build Tools 2019 (or 2020) installed (for the caller exe)\r\n* MingGW 8.10  or TDM-GCC latest (for Go DLL compiling)\r\n\r\nSteps to reproduce as follows:\r\n\r\nmindll.go\r\n\r\n```go\r\npackage main\r\n\r\nimport ""C""\r\nimport ""fmt""\r\n\r\n//export Fred\r\nfunc Fred() {\r\n\tfmt.Println(""go: MINDLL: i am fred"")\r\n}\r\n\r\nfunc main() { }\r\n```\r\n\r\ncompile it\r\n\r\n```\r\ngo mod init\r\ngo mod init mindll\r\ngo mod tidy\r\ngo build -buildmode=c-shared -o mindll.dll .\r\n```\r\n\r\nc_call.c\r\n\r\n```\r\n#include <windows.h>\r\n#include <stdio.h>\r\ntypedef void (*fred_func)(void);\r\nint main() {\r\n\tHINSTANCE hinstLib = LoadLibrary(TEXT(""mindll.dll""));\r\n\tfred_func Fred;\r\n\tFred = (fred_func)GetProcAddress(hinstLib, ""Fred"");\r\n\tprintf(""Calling Fred\\n"");  fflush(stdout);\r\n\tFred();\r\n\tprintf(""Back from Fred\\n"");\r\n    return 0;\r\n}\r\n```\r\n\r\nCompile it (no CFGuard)\r\n\r\n```\r\n""C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat""\r\ncl c_call.c -o ccall_nocfg.exe -Wall\r\n```\r\n\r\nccall_nocfg.bat\r\n\r\n```\r\nccall_nocfg.exe\r\nccall_nocfg.bat\r\n```\r\n\r\nRun ccall_nocfg.bat for a while, runs fine, no issues.\r\n\r\nCompile caller with CFGuard on\r\n\r\n```\r\ncl c_call.c -o ccall_withcfg.exe -Wall /guard:cf\r\n```\r\n\r\nccall_withcfg.bat\r\n\r\n```\r\nccall_withcfg.exe\r\nccall_withcfg.bat\r\n```\r\n\r\nRun ccall_withcfg.bat, process crashes/hangs quite quickly, anywhere from 5th to 20th run. Then keeps crashing throughout, every 5-20 runs or so.\r\n\r\n### What did you expect to see?\r\n\r\nThe C process and Go DLL running reliably 100% \r\n\r\n\r\n### What did you see instead?\r\n\r\nThe process hanging/crashing after LoadLibrary and/or at first DLL function call (Fred) every 5-20 runs.\r\n\r\n### Workarounds (& why they are workarounds) \r\n* ""Compile everything for ARM""  -  Don't have control of the python exe 'mothership'. Viable arm python has only recently appeared with 3.11 but we must support back to py 3.7 for windows 7. Also many python libraries not fully available native for arm windows yet. \r\n* ""Compile caller without Control Flow Guard"" - as above + unhappy security auditors\r\n* ""Have the end users disable Control Flow Guard for this process (or system-wide) in windows control panel for ARM windows machines"" - very unhappy security auditors. Bad reputational for product.\r\n\r\n\r\n### Notes\r\n* This behavior does not happen when a minimal C-DLL is substituted for the Go DLL above, *regardless of whether or not the test C DLL has control flow guard enabled or disabled.*\r\n* There is only one Go runtime in the process as the 'mothership' is either a python or C exe. \r\n* I am not freeing or attempting to unload the Go DLL at all. \r\n\r\n* The process briefly hangs then suddenly exits and no errors, stacktraces or anything are printed. Also nothing in the Windows event log, which seems to imply that Go is eating the exception and calling ExitProcess?\r\n* I see support for CFG itself IN go was deemed not-useful here https://github.com/golang/go/issues/35940  however interactions *with* CFG when GO is a DLL do possibly still need to be addressed.\r\n* (Speculation) perhaps this issue is similar to that of https://github.com/golang/go/issues/59213 however this issue is still present in Go 1.21rc2\r\n\r\n\r\n\r\n\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport ""C""\r\nimport ""fmt""\r\n\r\n//export Fred\r\nfunc Fred() {\r\n\tfmt.Println(""go: MINDLL: i am fred"")\r\n}\r\n\r\nfunc main() { }\r\n"
60946,"cmd/compile: function parameter order-dependence in type inferenceType inference is supposed to be function parameter order independent. Here's a counter-example ([playground](https://go.dev/play/p/GjZb9pOmb9X?v=gotip)):\r\n\r\n\r\n\r\nAnalysis: In the call `g(t1, t2, t)`, the first two arguments (`t1`, `t2`) have types that don't match and unification fails. In the call `g(t, t1, t2)`, the argument `t` subsumes the other types and it works out.\r\n\r\nThis issue also arises if the interface `T` were an unnamed interface.\r\n\r\nTentatively marking as a release blocker.\r\n",NeedsDecision|release-blocker|compiler/runtime,griesemer,"Type inference is supposed to be function parameter order independent. Here's a counter-example ([playground](https://go.dev/play/p/GjZb9pOmb9X?v=gotip)):\r\n\r\n```Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar t1 *T1\r\n\tvar t2 *T2\r\n\tg(t, t1, t2) // this works\r\n\tg(t1, t2, t) // this doesn't\r\n}\r\n\r\ntype T interface{ m() }\r\ntype T1 struct{}\r\ntype T2 struct{}\r\n\r\nfunc (*T1) m() {}\r\nfunc (*T2) m() {}\r\n\r\nfunc g[P any](...P) {}\r\n```\r\n\r\nAnalysis: In the call `g(t1, t2, t)`, the first two arguments (`t1`, `t2`) have types that don't match and unification fails. In the call `g(t, t1, t2)`, the argument `t` subsumes the other types and it works out.\r\n\r\nThis issue also arises if the interface `T` were an unnamed interface.\r\n\r\nTentatively marking as a release blocker.\r\n","Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar t1 *T1\r\n\tvar t2 *T2\r\n\tg(t, t1, t2) // this works\r\n\tg(t1, t2, t) // this doesn't\r\n}\r\n\r\ntype T interface{ m() }\r\ntype T1 struct{}\r\ntype T2 struct{}\r\n\r\nfunc (*T1) m() {}\r\nfunc (*T2) m() {}\r\n\r\nfunc g[P any](...P) {}\r\n"
60945,cmd/compile: 1.21rc2 internal compiler error: missing wrapper for (method)<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis is on 1.21rc2 only; 1.20.5 works.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/evan.jones/Library/Caches/go-build'\r\nGOENV='/Users/evan.jones/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/evan.jones/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/evan.jones/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/evan.jones/dd/dd-go/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build3625918932=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nAttempt to run the following program ([github repository version](https://github.com/evanj/go121bug)):\r\n\r\n`main.go`\r\n\r\n\r\n`pkg/pkg.go`\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSome output:\r\n\r\n```\r\n$ go run .\r\n0x10248fcb0\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ /Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64/bin/go run .\r\n# github.com/evanj/go121bug\r\n./pkg/pkg.go:14:37: internal compiler error: missing wrapper for pkg.getConfigVersion\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```,NeedsFix|release-blocker|compiler/runtime,cuonglm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.21rc2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis is on 1.21rc2 only; 1.20.5 works.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=''\r\nGOARCH='arm64'\r\nGOBIN=''\r\nGOCACHE='/Users/evan.jones/Library/Caches/go-build'\r\nGOENV='/Users/evan.jones/Library/Application Support/go/env'\r\nGOEXE=''\r\nGOEXPERIMENT=''\r\nGOFLAGS=''\r\nGOHOSTARCH='arm64'\r\nGOHOSTOS='darwin'\r\nGOINSECURE=''\r\nGOMODCACHE='/Users/evan.jones/go/pkg/mod'\r\nGONOPROXY=''\r\nGONOSUMDB=''\r\nGOOS='darwin'\r\nGOPATH='/Users/evan.jones/go'\r\nGOPRIVATE=''\r\nGOPROXY=''\r\nGOROOT='/Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64'\r\nGOSUMDB='sum.golang.org'\r\nGOTMPDIR=''\r\nGOTOOLCHAIN='auto'\r\nGOTOOLDIR='/Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64/pkg/tool/darwin_arm64'\r\nGOVCS=''\r\nGOVERSION='go1.21rc2'\r\nGCCGO='gccgo'\r\nAR='ar'\r\nCC='clang'\r\nCXX='clang++'\r\nCGO_ENABLED='1'\r\nGOMOD='/Users/evan.jones/dd/dd-go/go.mod'\r\nGOWORK=''\r\nCGO_CFLAGS='-O2 -g'\r\nCGO_CPPFLAGS=''\r\nCGO_CXXFLAGS='-O2 -g'\r\nCGO_FFLAGS='-O2 -g'\r\nCGO_LDFLAGS='-O2 -g'\r\nPKG_CONFIG='pkg-config'\r\nGOGCCFLAGS='-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -ffile-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build3625918932=/tmp/go-build -gno-record-gcc-switches -fno-common'\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nAttempt to run the following program ([github repository version](https://github.com/evanj/go121bug)):\r\n\r\n`main.go`\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/evanj/go121bug/pkg""\r\n)\r\n\r\nfunc main() {\r\n\tout := &pkg.Router{}\r\n\tfmt.Println(out.Route)\r\n}\r\n```\r\n\r\n`pkg/pkg.go`\r\n```go\r\npackage pkg\r\n\r\nimport ""fmt""\r\n\r\ntype Router struct{}\r\n\r\nfunc callClosure(closure func()) {\r\n\tclosure()\r\n}\r\n\r\n// Route is the obs_pipelines router\r\nfunc (r *Router) Route() {\r\n\tcallClosure(func() {\r\n\t\tfmt.Println(""getConfigVersion:"", r.getConfigVersion)\r\n\t})\r\n}\r\n\r\nfunc (r *Router) getConfigVersion() {}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSome output:\r\n\r\n```\r\n$ go run .\r\n0x10248fcb0\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ /Users/evan.jones/.gimme/versions/go1.21rc2.darwin.arm64/bin/go run .\r\n# github.com/evanj/go121bug\r\n./pkg/pkg.go:14:37: internal compiler error: missing wrapper for pkg.getConfigVersion\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/evanj/go121bug/pkg""\r\n)\r\n\r\nfunc main() {\r\n\tout := &pkg.Router{}\r\n\tfmt.Println(out.Route)\r\n}\r\n"
60933,"cmd/compile: unexpected type inference with interface typesExample program https://go.dev/play/p/rLW5osbRq6Z?v=gotip\r\n\r\n\r\n\r\nWith current HEAD running this program prints\r\n\r\n```\r\n*io.Writer\r\n**os.File\r\n```\r\n\r\nThe second result is reasonable.  The first, less so.  The compiler has taken a value of type `*os.File` and a value of type `io.Writer`, which must be of the same type, and inferred a type argument of `io.Writer`.  This seems potentially quite confusing, as pointed out at https://github.com/golang/go/issues/60204#issuecomment-1601820737.\r\n\r\nLet's make sure this is what we want before we commit it to 1.21.\r\n\r\nCC @griesemer @findleyr ",NeedsInvestigation|release-blocker|compiler/runtime,griesemer,"Example program https://go.dev/play/p/rLW5osbRq6Z?v=gotip\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""os""\r\n)\r\n\r\nfunc F[T any](v ...T) {\r\n\tvar zero T\r\n\tfmt.Printf(""%T\\n"", &zero)\r\n}\r\n\r\nfunc main() {\r\n\tvar nilFile *os.File\r\n\tF(nilFile, io.Discard)\r\n\tF(nilFile, os.Stdout)\r\n}\r\n```\r\n\r\nWith current HEAD running this program prints\r\n\r\n```\r\n*io.Writer\r\n**os.File\r\n```\r\n\r\nThe second result is reasonable.  The first, less so.  The compiler has taken a value of type `*os.File` and a value of type `io.Writer`, which must be of the same type, and inferred a type argument of `io.Writer`.  This seems potentially quite confusing, as pointed out at https://github.com/golang/go/issues/60204#issuecomment-1601820737.\r\n\r\nLet's make sure this is what we want before we commit it to 1.21.\r\n\r\nCC @griesemer @findleyr ","Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""os""\r\n)\r\n\r\nfunc F[T any](v ...T) {\r\n\tvar zero T\r\n\tfmt.Printf(""%T\\n"", &zero)\r\n}\r\n\r\nfunc main() {\r\n\tvar nilFile *os.File\r\n\tF(nilFile, io.Discard)\r\n\tF(nilFile, os.Stdout)\r\n}\r\n"
60919,"x/build: runtime package tests consistently fail due to 45 min timeout on darwin-amd64-longtest, only when running via all.bashRunning all.bash on the darwin-amd64-longtest builder fairly consistently fails with a 45 minute timeout in the runtime package tests. Testing was done using at a near-tip commit on release-branch.go1.21 (ebbff91f5930ba74a4285f8ba6ddfd0df0871d95). From a sample of about 10 runs, there was one time the runtime package tests completed successfully:\r\n\r\n```\r\nok  \truntime\t2471.456s\r\n```\r\n\r\nBut all other times they failed due to a 45 min timeout. (The 45 minutes comes from cmd/dist's [default](https://cs.opensource.google/go/go/+/master:src/cmd/dist/test.go;l=532-538;drc=f4086d36862d8fd41af90356c894d04d3ff58203) of 180 seconds for package tests, times 3 because cmd/go test are running, times 5 because the builder has GO_TEST_TIMEOUT_SCALE=5.)\r\n\r\n```\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (21m8s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.568s\r\n```\r\n\r\n<details><summary>More</summary>\r\n\r\n```\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (21m8s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.568s\r\n```\r\n\r\n```\r\n--- FAIL: TestPingPongHog (0.19s)\r\n    proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 8000000/1000 = 8000\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (20m31s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.967s\r\n```\r\n\r\n```\r\n--- FAIL: TestPingPongHog (0.13s)\r\n    proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 4000000/1000 = 4000\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (20m29s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.754s\r\n```\r\n\r\n```\r\nFAIL\truntime\t2701.087s\r\nFAIL\truntime\t2700.519s\r\nFAIL\truntime\t2700.616s\r\nFAIL\truntime\t2700.441s\r\n```\r\n\r\n</details>\r\n\r\nCan be reproduced in a gomote with:\r\n\r\n\r\n\r\nHere's a complete all.bash output from one such run:\r\n\r\n<details>\r\n\r\n```\r\ngopher@Gophers-iMac-Pro src % time ./all.bash\r\nBuilding Go cmd/dist using /Users/gopher/goboot. (go1.19.3 darwin/amd64)\r\nBuilding Go toolchain1 using /Users/gopher/goboot.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n\r\n##### Test execution environment.\r\n# GOARCH: amd64\r\n# CPU: \r\n# GOOS: darwin\r\n# OS Version: Darwin 22.1.0 Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64 x86_64\r\n\r\n##### Testing packages.\r\nok  \tarchive/tar\t0.684s\r\nok  \tarchive/zip\t69.040s\r\nok  \tbufio\t0.226s\r\nok  \tbytes\t5.220s\r\nok  \tcmp\t0.079s\r\nok  \tcompress/bzip2\t0.257s\r\nok  \tcompress/flate\t20.785s\r\nok  \tcompress/gzip\t6.121s\r\nok  \tcompress/lzw\t0.290s\r\nok  \tcompress/zlib\t2.880s\r\nok  \tcontainer/heap\t0.099s\r\nok  \tcontainer/list\t0.026s\r\nok  \tcontainer/ring\t0.029s\r\nok  \tcontext\t0.168s\r\nok  \tcrypto\t0.085s\r\nok  \tcrypto/aes\t0.175s\r\nok  \tcrypto/cipher\t0.800s\r\nok  \tcrypto/des\t0.042s\r\nok  \tcrypto/dsa\t23.812s\r\nok  \tcrypto/ecdh\t1.521s\r\nok  \tcrypto/ecdsa\t1.973s\r\nok  \tcrypto/ed25519\t1.411s\r\nok  \tcrypto/elliptic\t1.076s\r\nok  \tcrypto/hmac\t0.033s\r\nok  \tcrypto/internal/alias\t0.049s\r\nok  \tcrypto/internal/bigmod\t0.550s\r\nok  \tcrypto/internal/boring\t0.074s\r\nok  \tcrypto/internal/boring/bcache\t0.275s\r\nok  \tcrypto/internal/edwards25519\t10.263s\r\nok  \tcrypto/internal/edwards25519/field\t7.944s\r\nok  \tcrypto/internal/nistec\t12.088s\r\nok  \tcrypto/internal/nistec/fiat\t0.037s [no tests to run]\r\nok  \tcrypto/md5\t0.059s\r\nok  \tcrypto/rand\t0.426s\r\nok  \tcrypto/rc4\t0.068s\r\nok  \tcrypto/rsa\t8.907s\r\nok  \tcrypto/sha1\t0.054s\r\nok  \tcrypto/sha256\t0.050s\r\nok  \tcrypto/sha512\t0.052s\r\nok  \tcrypto/subtle\t17.780s\r\nok  \tcrypto/tls\t37.772s\r\nok  \tcrypto/x509\t22.285s\r\nok  \tdatabase/sql\t1.461s\r\nok  \tdatabase/sql/driver\t0.029s\r\nok  \tdebug/buildinfo\t33.520s\r\nok  \tdebug/dwarf\t0.291s\r\nok  \tdebug/elf\t1.157s\r\nok  \tdebug/gosym\t31.489s\r\nok  \tdebug/macho\t0.111s\r\nok  \tdebug/pe\t0.291s\r\nok  \tdebug/plan9obj\t0.054s\r\nok  \tembed\t0.097s [no tests to run]\r\nok  \tembed/internal/embedtest\t0.049s\r\nok  \tencoding/ascii85\t0.039s\r\nok  \tencoding/asn1\t0.054s\r\nok  \tencoding/base32\t0.094s\r\nok  \tencoding/base64\t0.035s\r\nok  \tencoding/binary\t0.037s\r\nok  \tencoding/csv\t0.036s\r\nok  \tencoding/gob\t11.098s\r\nok  \tencoding/hex\t0.046s\r\nok  \tencoding/json\t4.832s\r\nok  \tencoding/pem\t5.511s\r\nok  \tencoding/xml\t18.266s\r\nok  \terrors\t0.171s\r\nok  \texpvar\t0.070s\r\nok  \tflag\t0.223s\r\nok  \tfmt\t0.212s\r\nok  \tgo/ast\t0.034s\r\nok  \tgo/build\t2.346s\r\nok  \tgo/build/constraint\t0.099s\r\nok  \tgo/constant\t0.085s\r\nok  \tgo/doc\t0.309s\r\nok  \tgo/doc/comment\t3.958s\r\nok  \tgo/format\t0.033s\r\nok  \tgo/importer\t1.655s\r\nok  \tgo/internal/gccgoimporter\t0.081s\r\nok  \tgo/internal/gcimporter\t430.781s\r\nok  \tgo/internal/srcimporter\t71.404s\r\nok  \tgo/parser\t25.058s\r\nok  \tgo/printer\t0.982s\r\nok  \tgo/scanner\t0.096s\r\nok  \tgo/token\t0.068s\r\nok  \tgo/types\t84.196s\r\nok  \thash\t0.046s\r\nok  \thash/adler32\t0.048s\r\nok  \thash/crc32\t0.055s\r\nok  \thash/crc64\t0.043s\r\nok  \thash/fnv\t0.052s\r\nok  \thash/maphash\t300.247s\r\nok  \thtml\t0.067s\r\nok  \thtml/template\t1.890s\r\nok  \timage\t0.700s\r\nok  \timage/color\t0.052s\r\nok  \timage/draw\t0.289s\r\nok  \timage/gif\t41.522s\r\nok  \timage/jpeg\t13.865s\r\nok  \timage/png\t4.065s\r\nok  \tindex/suffixarray\t114.748s\r\nok  \tinternal/abi\t0.809s\r\nok  \tinternal/buildcfg\t0.105s\r\nok  \tinternal/coverage/cformat\t0.094s\r\nok  \tinternal/coverage/cmerge\t0.033s\r\nok  \tinternal/coverage/pods\t0.077s\r\nok  \tinternal/coverage/slicereader\t0.035s\r\nok  \tinternal/coverage/slicewriter\t0.051s\r\nok  \tinternal/coverage/test\t0.055s\r\nok  \tinternal/cpu\t0.184s\r\nok  \tinternal/dag\t0.108s\r\nok  \tinternal/diff\t0.088s\r\nok  \tinternal/fmtsort\t0.186s\r\nok  \tinternal/fuzz\t0.072s\r\nok  \tinternal/godebug\t2.686s\r\nok  \tinternal/godebugs\t0.068s\r\nok  \tinternal/intern\t18.376s\r\nok  \tinternal/itoa\t0.031s\r\nok  \tinternal/poll\t0.944s\r\nok  \tinternal/profile\t0.044s\r\nok  \tinternal/reflectlite\t0.056s\r\nok  \tinternal/safefilepath\t0.071s\r\nok  \tinternal/saferio\t0.358s\r\nok  \tinternal/singleflight\t0.053s\r\nok  \tinternal/testenv\t1.993s\r\nok  \tinternal/trace\t4.708s\r\nok  \tinternal/types/errors\t2.962s\r\nok  \tinternal/unsafeheader\t0.025s\r\nok  \tinternal/xcoff\t0.049s\r\nok  \tinternal/zstd\t0.036s\r\nok  \tio\t0.156s\r\nok  \tio/fs\t1.117s\r\nok  \tio/ioutil\t0.073s\r\nok  \tlog\t0.054s\r\nok  \tlog/slog\t0.554s\r\nok  \tlog/slog/internal/benchmarks\t0.027s\r\nok  \tlog/slog/internal/buffer\t0.129s\r\nok  \tlog/syslog\t1.387s\r\nok  \tmaps\t0.035s\r\nok  \tmath\t0.035s\r\nok  \tmath/big\t13.384s\r\nok  \tmath/bits\t0.082s\r\nok  \tmath/cmplx\t0.034s\r\nok  \tmath/rand\t15.860s\r\nok  \tmime\t0.051s\r\nok  \tmime/multipart\t4.276s\r\nok  \tmime/quotedprintable\t6.464s\r\nok  \tnet\t126.307s\r\nok  \tnet/http\t153.486s\r\nok  \tnet/http/cgi\t4.849s\r\nok  \tnet/http/cookiejar\t0.101s\r\nok  \tnet/http/fcgi\t0.164s\r\nok  \tnet/http/httptest\t0.305s\r\nok  \tnet/http/httptrace\t0.071s\r\nok  \tnet/http/httputil\t23.016s\r\nok  \tnet/http/internal\t0.059s\r\nok  \tnet/http/internal/ascii\t0.028s\r\nok  \tnet/http/pprof\t5.536s\r\nok  \tnet/internal/socktest\t0.023s\r\nok  \tnet/mail\t0.031s\r\nok  \tnet/netip\t3.936s\r\nok  \tnet/rpc\t0.362s\r\nok  \tnet/rpc/jsonrpc\t0.112s\r\nok  \tnet/smtp\t0.173s\r\nok  \tnet/textproto\t3.713s\r\nok  \tnet/url\t0.029s\r\nok  \tos\t19.573s\r\nok  \tos/exec\t4.130s\r\nok  \tos/exec/internal/fdtest\t0.054s\r\nok  \tos/signal\t17.377s\r\nok  \tos/user\t0.097s\r\nok  \tpath\t0.059s\r\nok  \tpath/filepath\t0.392s\r\nok  \tplugin\t0.032s\r\nok  \treflect\t7.792s\r\nok  \tregexp\t59.010s\r\nok  \tregexp/syntax\t5.013s\r\n--- FAIL: TestPingPongHog (0.21s)                                                                                                                              D     proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 6000000/1000 = 6000                                                                          ^ panic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (22m19s)\r\n\r\ngoroutine 73160259 [running]:\r\npanic({0x13c5980?, 0xc000e86080?})\r\n\t/tmp/buildlet/gotip/src/runtime/panic.go:1017 +0x3ac fp=0xc000c32f10 sp=0xc000c32e60 pc=0x103b0ac\r\ntesting.(*M).startAlarm.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2259 +0x3b9 fp=0xc000c32fe0 sp=0xc000c32f10 pc=0x1104059\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c32fe8 sp=0xc000c32fe0 pc=0x10795c1\r\ncreated by time.goFunc\r\n\t/tmp/buildlet/gotip/src/time/sleep.go:176 +0x2d\r\n\r\ngoroutine 1 [chan receive, 22 minutes]:\r\nruntime.gopark(0xc0000cd970?, 0x10104c5?, 0x78?, 0x0?, 0x18?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0000cd908 sp=0xc0000cd8e8 pc=0x103f0ee\r\nruntime.chanrecv(0xc000192700, 0xc0000cd9ef, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0000cd980 sp=0xc0000cd908 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0000cd9a8 sp=0xc0000cd980 pc=0x1008f92\r\ntesting.(*T).Run(0xc0000de1a0, {0x145f7f5?, 0x20?}, 0x147ee20)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1649 +0x3c8 fp=0xc0000cda68 sp=0xc0000cd9a8 pc=0x1100c68\r\ntesting.runTests.func1(0x1741240?)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2054 +0x3e fp=0xc0000cdab8 sp=0xc0000cda68 pc=0x1102d7e\r\ntesting.tRunner(0xc0000de1a0, 0xc0000cdbd0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0000cdb08 sp=0xc0000cdab8 pc=0x10ffe3f\r\ntesting.runTests(0xc00009a780?, {0x173c3a0, 0x1b7, 0x1b7}, {0x2ed000000000000?, 0xc0000cdc90?, 0x1740520?})\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2052 +0x445 fp=0xc0000cdc00 sp=0xc0000cdb08 pc=0x1102c65\r\ntesting.(*M).Run(0xc00009a780)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1925 +0x636 fp=0xc0000cde48 sp=0xc0000cdc00 pc=0x1101656\r\nruntime_test.TestMain(0x107923a?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:27 +0x13 fp=0xc0000cde88 sp=0xc0000cde48 pc=0x12ec513\r\nmain.main()\r\n\t_testmain.go:1543 +0x1c6 fp=0xc0000cdf40 sp=0xc0000cde88 pc=0x1399246\r\nruntime.main()\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:267 +0x2bb fp=0xc0000cdfe0 sp=0xc0000cdf40 pc=0x103ec7b\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000cdfe8 sp=0xc0000cdfe0 pc=0x10795c1\r\n\r\ngoroutine 2 [force gc (idle), 36 minutes]:\r\nruntime.gopark(0x2a11745527a?, 0x1741240?, 0x0?, 0x0?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0000487a8 sp=0xc000048788 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:322 +0xb3 fp=0xc0000487e0 sp=0xc0000487a8 pc=0x103ef53\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000487e8 sp=0xc0000487e0 pc=0x10795c1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x173ff01?, 0x173ffe0?, 0xc?, 0x14?, 0x1?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000048f78 sp=0xc000048f58 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcsweep.go:321 +0xdf fp=0xc000048fc8 sp=0xc000048f78 pc=0x1028b7f\r\nruntime.gcenable.func1()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:200 +0x25 fp=0xc000048fe0 sp=0xc000048fc8 pc=0x101d725\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000048fe8 sp=0xc000048fe0 pc=0x10795c1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x2fc735?, 0x38561?, 0x0?, 0x0?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000049770 sp=0xc000049750 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x17405a0)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc0000497a0 sp=0xc000049770 pc=0x10263a9\r\nruntime.bgscavenge(0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc0000497c8 sp=0xc0000497a0 pc=0x1026959\r\nruntime.gcenable.func2()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:201 +0x25 fp=0xc0000497e0 sp=0xc0000497c8 pc=0x101d6c5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000497e8 sp=0xc0000497e0 pc=0x10795c1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:201 +0xa5\r\n\r\ngoroutine 5 [finalizer wait, 22 minutes]:\r\nruntime.gopark(0x0?, 0x147f158?, 0x90?, 0xa3?, 0x2000000020?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000049e28 sp=0xc000049e08 pc=0x103f0ee\r\nruntime.runfinq()\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal.go:193 +0x107 fp=0xc000049fe0 sp=0xc000049e28 pc=0x101c727\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000049fe8 sp=0xc000049fe0 pc=0x10795c1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal.go:163 +0x3d\r\n\r\ngoroutine 20213575 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x0?, 0x6e?, 0xc000d72c98?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000d72c48 sp=0xc000d72c28 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000d72cc0 sp=0xc000d72c48 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000d72ce8 sp=0xc000d72cc0 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc0002681a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000d72d80 sp=0xc000d72ce8 pc=0x10ffae5\r\nruntime_test.TestCheckPtr(0xc0002681a0)\r\n\t/tmp/buildlet/gotip/src/runtime/checkptr_test.go:21 +0x8a fp=0xc000d72f70 sp=0xc000d72d80 pc=0x12e5f2a\r\ntesting.tRunner(0xc0002681a0, 0x147e5a8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000d72fc0 sp=0xc000d72f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000d72fe0 sp=0xc000d72fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000d72fe8 sp=0xc000d72fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 35 [GC worker (idle), 23 minutes]:\r\nruntime.gopark(0x3372d19298a?, 0xc000133e60?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00004a750 sp=0xc00004a730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc00004a7e0 sp=0xc00004a750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00004a7e8 sp=0xc00004a7e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 34 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x344822df90a?, 0xc00002c180?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000044f50 sp=0xc000044f30 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc000044fe0 sp=0xc000044f50 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000044fe8 sp=0xc000044fe0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 21 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x33e1446adec?, 0xc00002c1a0?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000044750 sp=0xc000044730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0000447e0 sp=0xc000044750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000447e8 sp=0xc0000447e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 22 [GC worker (idle)]:\r\nruntime.gopark(0x344823bf331?, 0xc0001a0060?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000045750 sp=0xc000045730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0000457e0 sp=0xc000045750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000457e8 sp=0xc0000457e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 36 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x33e1446a945?, 0x2?, 0x56?, 0xaa?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000498750 sp=0xc000498730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0004987e0 sp=0xc000498750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004987e8 sp=0xc0004987e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 8 [GC worker (idle), 23 minutes]:\r\nruntime.gopark(0x3372d195998?, 0xc000133e80?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00004af50 sp=0xc00004af30 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc00004afe0 sp=0xc00004af50 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00004afe8 sp=0xc00004afe0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 20214033 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xf0?, 0x80?, 0xc000a9ae00?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a9adb0 sp=0xc000a9ad90 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a9ae28 sp=0xc000a9adb0 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a9ae50 sp=0xc000a9ae28 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03d40)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a9aee8 sp=0xc000a9ae50 pc=0x10ffae5\r\nruntime_test.TestDeferKeepAlive(0xc000c03d40)\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal_test.go:237 +0x72 fp=0xc000a9af70 sp=0xc000a9aee8 pc=0x132afd2\r\ntesting.tRunner(0xc000c03d40, 0x147e668)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a9afc0 sp=0xc000a9af70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a9afe0 sp=0xc000a9afc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a9afe8 sp=0xc000a9afe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213613 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x50?, 0x25?, 0xc000047dd0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000047d80 sp=0xc000047d60 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000047df8 sp=0xc000047d80 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000047e20 sp=0xc000047df8 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c031e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000047eb8 sp=0xc000047e20 pc=0x10ffae5\r\nruntime_test.TestCatchPanic(0xc000c031e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:457 +0x27 fp=0xc000047f70 sp=0xc000047eb8 pc=0x12ea1a7\r\ntesting.tRunner(0xc000c031e0, 0x147e498)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000047fc0 sp=0xc000047f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000047fe0 sp=0xc000047fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000047fe8 sp=0xc000047fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20205441 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x70?, 0x20?, 0xc000494e10?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000494dc0 sp=0xc000494da0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000494e38 sp=0xc000494dc0 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000494e60 sp=0xc000494e38 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02000)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000494ef8 sp=0xc000494e60 pc=0x10ffae5\r\nruntime_test.TestCgoCrashTraceback(0xc000c02000)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:240 +0x1c fp=0xc000494f70 sp=0xc000494ef8 pc=0x12e84bc\r\ntesting.tRunner(0xc000c02000, 0x147e4c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000494fc0 sp=0xc000494f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000494fe0 sp=0xc000494fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000494fe8 sp=0xc000494fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213624 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0x2a?, 0xc0004cf618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004cf5c8 sp=0xc0004cf5a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004cf640 sp=0xc0004cf5c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004cf668 sp=0xc0004cf640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004cf700 sp=0xc0004cf668 pc=0x10ffae5\r\nruntime_test.TestAbortInCgo(0xc000c54340)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:702 +0x1c fp=0xc0004cf770 sp=0xc0004cf700 pc=0x12eb65c\r\ntesting.tRunner(0xc000c54340, 0x147e380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004cf7c0 sp=0xc0004cf770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004cf7e0 sp=0xc0004cf7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004cf7e8 sp=0xc0004cf7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213633 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0xd0?, 0x2d?, 0xc0004cfe08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004cfdb8 sp=0xc0004cfd98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004cfe30 sp=0xc0004cfdb8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004cfe58 sp=0xc0004cfe30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54b60)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004cfef0 sp=0xc0004cfe58 pc=0x10ffae5\r\nruntime_test.TestDestructorCallback(0xc000c54b60)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:809 +0x1f fp=0xc0004cff70 sp=0xc0004cfef0 pc=0x12ebf7f\r\ntesting.tRunner(0xc000c54b60, 0x147e6a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004cffc0 sp=0xc0004cff70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004cffe0 sp=0xc0004cffc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004cffe8 sp=0xc0004cffe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213617 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xe0?, 0x26?, 0xc000499e18?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000499dc8 sp=0xc000499da8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000499e40 sp=0xc000499dc8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000499e68 sp=0xc000499e40 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03860)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000499f00 sp=0xc000499e68 pc=0x10ffae5\r\nruntime_test.TestCgoTracebackSigpanic(0xc000c03860)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:537 +0x1c fp=0xc000499f70 sp=0xc000499f00 pc=0x12ea7bc\r\ntesting.tRunner(0xc000c03860, 0x147e580)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000499fc0 sp=0xc000499f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000499fe0 sp=0xc000499fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000499fe8 sp=0xc000499fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20214051 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xf0?, 0x81?, 0xc000c30750?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000c30700 sp=0xc000c306e0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000c30778 sp=0xc000c30700 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000c307a0 sp=0xc000c30778 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c541a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000c30838 sp=0xc000c307a0 pc=0x10ffae5\r\nruntime_test.TestGcPacer(0xc000c541a0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcpacer_test.go:17 +0x2a fp=0xc000c30f70 sp=0xc000c30838 pc=0x132c84a\r\ntesting.tRunner(0xc000c541a0, 0x147e7d0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000c30fc0 sp=0xc000c30f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000c30fe0 sp=0xc000c30fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c30fe8 sp=0xc000c30fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213587 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x90?, 0xed?, 0xc000187608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0001875b8 sp=0xc000187598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000187630 sp=0xc0001875b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000187658 sp=0xc000187630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f1e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0001876f0 sp=0xc000187658 pc=0x10ffae5\r\nruntime_test.TestCgoPanicDeadlock(0xc00015f1e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:206 +0x1f fp=0xc000187770 sp=0xc0001876f0 pc=0x12e80df\r\ntesting.tRunner(0xc00015f1e0, 0x147e510)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0001877c0 sp=0xc000187770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0001877e0 sp=0xc0001877c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0001877e8 sp=0xc0001877e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213972 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x40?, 0x65?, 0xc0002d2e48?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0002d2df8 sp=0xc0002d2dd8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0002d2e70 sp=0xc0002d2df8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0002d2e98 sp=0xc0002d2e70 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00030a340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0002d2f30 sp=0xc0002d2e98 pc=0x10ffae5\r\nruntime_test.TestMemmoveOverlapLarge0x120000(0xc00030a340)\r\n\t/tmp/buildlet/gotip/src/runtime/memmove_test.go:116 +0xa5 fp=0xc0002d2f70 sp=0xc0002d2f30 pc=0x131d0e5\r\ntesting.tRunner(0xc00030a340, 0x147ea70)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0002d2fc0 sp=0xc0002d2f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0002d2fe0 sp=0xc0002d2fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0002d2fe8 sp=0xc0002d2fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213606 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x50?, 0x22?, 0xc000c37c58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000c37c08 sp=0xc000c37be8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000c37c80 sp=0xc000c37c08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000c37ca8 sp=0xc000c37c80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000c37d40 sp=0xc000c37ca8 pc=0x10ffae5\r\nruntime_test.testCgoPprof(0xc000c02820, {0x1456e8e, 0xe}, {0x1453579, 0x8}, {0x1452827, 0x6}, {0x1455b14, 0xc})\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:295 +0x79 fp=0xc000c37f18 sp=0xc000c37d40 pc=0x12e8ab9\r\nruntime_test.TestCgoPprofPIE(0xc000a76fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:362 +0x45 fp=0xc000c37f70 sp=0xc000c37f18 pc=0x12e97e5\r\ntesting.tRunner(0xc000c02820, 0x147e528)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000c37fc0 sp=0xc000c37f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000c37fe0 sp=0xc000c37fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c37fe8 sp=0xc000c37fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212589 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x40?, 0xeb?, 0xc000a93df8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a93da8 sp=0xc000a93d88 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a93e20 sp=0xc000a93da8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a93e48 sp=0xc000a93e20 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a93ee0 sp=0xc000a93e48 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadSIGPROF(0xc00015e820)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:92 +0x25 fp=0xc000a93f70 sp=0xc000a93ee0 pc=0x12e7585\r\ntesting.tRunner(0xc00015e820, 0x147e4e8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a93fc0 sp=0xc000a93f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a93fe0 sp=0xc000a93fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a93fe8 sp=0xc000a93fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213836 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x90?, 0x20?, 0xc0004ce5e0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004ce590 sp=0xc0004ce570 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004ce608 sp=0xc0004ce590 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004ce630 sp=0xc0004ce608 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02d00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004ce6c8 sp=0xc0004ce630 pc=0x10ffae5\r\nruntime_test.testConcurrentReadsAfterGrowth(0xc0004ce760?, 0x0)\r\n\t/tmp/buildlet/gotip/src/runtime/map_test.go:317 +0x2a fp=0xc0004ce750 sp=0xc0004ce6c8 pc=0x13145aa\r\nruntime_test.TestConcurrentReadsAfterGrowth(0xc001711800?)\r\n\t/tmp/buildlet/gotip/src/runtime/map_test.go:363 +0x15 fp=0xc0004ce770 sp=0xc0004ce750 pc=0x1314d35\r\ntesting.tRunner(0xc000c02d00, 0x147e5f0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004ce7c0 sp=0xc0004ce770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004ce7e0 sp=0xc0004ce7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004ce7e8 sp=0xc0004ce7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213588 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xf0?, 0xed?, 0xc000496e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000496db8 sp=0xc000496d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000496e30 sp=0xc000496db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000496e58 sp=0xc000496e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000496ef0 sp=0xc000496e58 pc=0x10ffae5\r\nruntime_test.TestCgoCCodeSIGPROF(0xc00015f380)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:216 +0x1f fp=0xc000496f70 sp=0xc000496ef0 pc=0x12e81ff\r\ntesting.tRunner(0xc00015f380, 0x147e4a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000496fc0 sp=0xc000496f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000496fe0 sp=0xc000496fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000496fe8 sp=0xc000496fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213577 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0x6e?, 0xc000d29660?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000d29610 sp=0xc000d295f0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000d29688 sp=0xc000d29610 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000d296b0 sp=0xc000d29688 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc0002684e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000d29748 sp=0xc000d296b0 pc=0x10ffae5\r\nruntime_test.TestCgoCrashHandler(0xc000d297a0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:24 +0x18 fp=0xc000d29770 sp=0xc000d29748 pc=0x12e6ff8\r\ntesting.tRunner(0xc0002684e0, 0x147e4b8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000d297c0 sp=0xc000d29770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000d297e0 sp=0xc000d297c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000d297e8 sp=0xc000d297e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212592 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x70?, 0xec?, 0xc000a935f8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a935a8 sp=0xc000a93588 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a93620 sp=0xc000a935a8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a93648 sp=0xc000a93620 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015ed00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a936e0 sp=0xc000a93648 pc=0x10ffae5\r\nruntime_test.TestCgoExecSignalMask(0xc00015ed00)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:135 +0x25 fp=0xc000a93770 sp=0xc000a936e0 pc=0x12e7925\r\ntesting.tRunner(0xc00015ed00, 0x147e4d8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a937c0 sp=0xc000a93770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a937e0 sp=0xc000a937c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a937e8 sp=0xc000a937e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213586 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x30?, 0xed?, 0xc000deed90?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000deed40 sp=0xc000deed20 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000deedb8 sp=0xc000deed40 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000deede0 sp=0xc000deedb8 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f040)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000deee78 sp=0xc000deede0 pc=0x10ffae5\r\nruntime_test.TestCgoCheckBytes(0xc00015f040)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:166 +0x27 fp=0xc000deef70 sp=0xc000deee78 pc=0x12e7b87\r\ntesting.tRunner(0xc00015f040, 0x147e4b0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000deefc0 sp=0xc000deef70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000deefe0 sp=0xc000deefc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000deefe8 sp=0xc000deefe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213576 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x60?, 0x6e?, 0xc000de85e0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000de8590 sp=0xc000de8570 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000de8608 sp=0xc000de8590 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000de8630 sp=0xc000de8608 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000268340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000de86c8 sp=0xc000de8630 pc=0x10ffae5\r\nruntime_test.TestCheckPtr2(0xc000268340)\r\n\t/tmp/buildlet/gotip/src/runtime/checkptr_test.go:74 +0x87 fp=0xc000de8770 sp=0xc000de86c8 pc=0x12e6447\r\ntesting.tRunner(0xc000268340, 0x147e5b0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000de87c0 sp=0xc000de8770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000de87e0 sp=0xc000de87c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000de87e8 sp=0xc000de87e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212588 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xe0?, 0xea?, 0xc000a90e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a90db8 sp=0xc000a90d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a90e30 sp=0xc000a90db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a90e58 sp=0xc000a90e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e680)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a90ef0 sp=0xc000a90e58 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadPanic(0xc00015e680)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:80 +0x1f fp=0xc000a90f70 sp=0xc000a90ef0 pc=0x12e747f\r\ntesting.tRunner(0xc00015e680, 0x147e4e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a90fc0 sp=0xc000a90f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a90fe0 sp=0xc000a90fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a90fe8 sp=0xc000a90fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213651 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0x90?, 0x2e?, 0xc000a77e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a77db8 sp=0xc000a77d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a77e30 sp=0xc000a77db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a77e58 sp=0xc000a77e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54ea0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a77ef0 sp=0xc000a77e58 pc=0x10ffae5\r\nruntime_test.TestEnsureBindM(0xc000c54ea0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:845 +0x1f fp=0xc000a77f70 sp=0xc000a77ef0 pc=0x12ec3ff\r\ntesting.tRunner(0xc000c54ea0, 0x147e6e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a77fc0 sp=0xc000a77f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a77fe0 sp=0xc000a77fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a77fe8 sp=0xc000a77fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213616 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x80?, 0x26?, 0xc000495608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004955b8 sp=0xc000495598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000495630 sp=0xc0004955b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000495658 sp=0xc000495630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c036c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004956f0 sp=0xc000495658 pc=0x10ffae5\r\nruntime_test.TestSigStackSwapping(0xc000c036c0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:517 +0x1f fp=0xc000495770 sp=0xc0004956f0 pc=0x12ea69f\r\ntesting.tRunner(0xc000c036c0, 0x147ee98)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004957c0 sp=0xc000495770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004957e0 sp=0xc0004957c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004957e8 sp=0xc0004957e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213625 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x30?, 0x2b?, 0xc0004d0608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d05b8 sp=0xc0004d0598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d0630 sp=0xc0004d05b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d0658 sp=0xc0004d0630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c544e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d06f0 sp=0xc0004d0658 pc=0x10ffae5\r\nruntime_test.TestEINTR(0xc000c544e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:735 +0x1f fp=0xc0004d0770 sp=0xc0004d06f0 pc=0x12eb7df\r\ntesting.tRunner(0xc000c544e0, 0x147e6c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d07c0 sp=0xc0004d0770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d07e0 sp=0xc0004d07c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d07e8 sp=0xc0004d07e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213711 [chan receive, 41 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xb0?, 0x62?, 0xc000a72608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a725b8 sp=0xc000a72598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a72630 sp=0xc000a725b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a72658 sp=0xc000a72630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a726f0 sp=0xc000a72658 pc=0x10ffae5\r\nruntime_test.TestRecoverBeforePanicAfterGoexit(0xc000c54820)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:455 +0x38 fp=0xc000a72770 sp=0xc000a726f0 pc=0x12ef578\r\ntesting.tRunner(0xc000c54820, 0x147ed98)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a727c0 sp=0xc000a72770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a727e0 sp=0xc000a727c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a727e8 sp=0xc000a727e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213971 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xe0?, 0x64?, 0xc000a69e48?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a69df8 sp=0xc000a69dd8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a69e70 sp=0xc000a69df8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a69e98 sp=0xc000a69e70 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00030a1a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a69f30 sp=0xc000a69e98 pc=0x10ffae5\r\nruntime_test.TestMemmoveLarge0x180000(0xc00030a1a0)\r\n\t/tmp/buildlet/gotip/src/runtime/memmove_test.go:104 +0xa5 fp=0xc000a69f70 sp=0xc000a69f30 pc=0x131cfe5\r\ntesting.tRunner(0xc00030a1a0, 0x147ea68)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a69fc0 sp=0xc000a69f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a69fe0 sp=0xc000a69fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a69fe8 sp=0xc000a69fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213618 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x40?, 0x27?, 0xc0004d3618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d35c8 sp=0xc0004d35a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d3640 sp=0xc0004d35c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d3668 sp=0xc0004d3640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03a00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d3700 sp=0xc0004d3668 pc=0x10ffae5\r\nruntime_test.TestCgoPanicCallback(0xc000c03a00)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:561 +0x1c fp=0xc0004d3770 sp=0xc0004d3700 pc=0x12ea9bc\r\ntesting.tRunner(0xc000c03a00, 0x147e508)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d37c0 sp=0xc0004d3770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d37e0 sp=0xc0004d37c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d37e8 sp=0xc0004d37e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213605 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xf0?, 0x21?, 0xc000849c58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000849c08 sp=0xc000849be8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000849c80 sp=0xc000849c08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000849ca8 sp=0xc000849c80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02680)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000849d40 sp=0xc000849ca8 pc=0x10ffae5\r\nruntime_test.testCgoPprof(0xc000c02680, {0x0, 0x0}, {0x1453579, 0x8}, {0x1452827, 0x6}, {0x1455b14, 0xc})\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:295 +0x79 fp=0xc000849f18 sp=0xc000849d40 pc=0x12e8ab9\r\nruntime_test.TestCgoPprof(0xc000047fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:358 +0x3d fp=0xc000849f70 sp=0xc000849f18 pc=0x12e977d\r\ntesting.tRunner(0xc000c02680, 0x147e518)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000849fc0 sp=0xc000849f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000849fe0 sp=0xc000849fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000849fe8 sp=0xc000849fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213652 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0xf0?, 0x2e?, 0xc00049b618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00049b5c8 sp=0xc00049b5a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc00049b640 sp=0xc00049b5c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc00049b668 sp=0xc00049b640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c55040)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc00049b700 sp=0xc00049b668 pc=0x10ffae5\r\nruntime_test.TestVDSO(0xc000c55040)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:157 +0x1c fp=0xc00049b770 sp=0xc00049b700 pc=0x12ed8bc\r\ntesting.tRunner(0xc000c55040, 0x147f0f8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc00049b7c0 sp=0xc00049b770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc00049b7e0 sp=0xc00049b7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00049b7e8 sp=0xc00049b7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213844 [chan receive, 40 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x70?, 0x61?, 0xc000a9d638?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a9d5e8 sp=0xc000a9d5c8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a9d660 sp=0xc000a9d5e8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a9d688 sp=0xc000a9d660 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000268b60)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a9d720 sp=0xc000a9d688 pc=0x10ffae5\r\nruntime_test.TestGCTestMoveStackOnNextCall(0xc000268b60)\r\n\t/tmp/buildlet/gotip/src/runtime/gc_test.go:210 +0x1c fp=0xc000a9d770 sp=0xc000a9d720 pc=0x12fc01c\r\ntesting.tRunner(0xc000268b60, 0x147e798)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a9d7c0 sp=0xc000a9d770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a9d7e0 sp=0xc000a9d7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a9d7e8 sp=0xc000a9d7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212586 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x20?, 0xea?, 0xc0004d4608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d45b8 sp=0xc0004d4598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d4630 sp=0xc0004d45b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d4658 sp=0xc0004d4630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d46f0 sp=0xc0004d4658 pc=0x10ffae5\r\nruntime_test.TestCgoTraceback(0xc00015e340)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:44 +0x1f fp=0xc0004d4770 sp=0xc0004d46f0 pc=0x12e719f\r\ntesting.tRunner(0xc00015e340, 0x147e560)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d47c0 sp=0xc0004d4770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d47e0 sp=0xc0004d47c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d47e8 sp=0xc0004d47e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212593 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0xec?, 0xc000aa9e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000aa9db8 sp=0xc000aa9d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000aa9e30 sp=0xc000aa9db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000aa9e58 sp=0xc000aa9e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015eea0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000aa9ef0 sp=0xc000aa9e58 pc=0x10ffae5\r\nruntime_test.TestEnsureDropM(0xc00015eea0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:149 +0x1f fp=0xc000aa9f70 sp=0xc000aa9ef0 pc=0x12e7a5f\r\ntesting.tRunner(0xc00015eea0, 0x147e6e8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000aa9fc0 sp=0xc000aa9f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000aa9fe0 sp=0xc000aa9fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000aa9fe8 sp=0xc000aa9fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\n[...]\r\n\r\ngoroutine 20212587 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x80?, 0xea?, 0xc000a96df8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a96da8 sp=0xc000a96d88 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a96e20 sp=0xc000a96da8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a96e48 sp=0xc000a96e20 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e4e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a96ee0 sp=0xc000a96e48 pc=0x10ffae5\r\nruntime_test.TestCgoCallbackGC(0xc00015e4e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:53 +0x25 fp=0xc000a96f70 sp=0xc000a96ee0 pc=0x12e72c5\r\ntesting.tRunner(0xc00015e4e0, 0x147e4a8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a96fc0 sp=0xc000a96f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a96fe0 sp=0xc000a96fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a96fe8 sp=0xc000a96fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213614 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xb0?, 0x25?, 0xc000495e58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000495e08 sp=0xc000495de8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000495e80 sp=0xc000495e08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000495ea8 sp=0xc000495e80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000495f40 sp=0xc000495ea8 pc=0x10ffae5\r\nruntime_test.TestCgoLockOSThreadExit(0xc000495fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:493 +0x18 fp=0xc000495f70 sp=0xc000495f40 pc=0x12ea4b8\r\ntesting.tRunner(0xc000c03380, 0x147e4f8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000495fc0 sp=0xc000495f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000495fe0 sp=0xc000495fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000495fe8 sp=0xc000495fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212590 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xa0?, 0xeb?, 0xc000ded608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000ded5b8 sp=0xc000ded598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000ded630 sp=0xc000ded5b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000ded658 sp=0xc000ded630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e9c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000ded6f0 sp=0xc000ded658 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadSignal(0xc00015e9c0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:106 +0x1f fp=0xc000ded770 sp=0xc000ded6f0 pc=0x12e76bf\r\ntesting.tRunner(0xc00015e9c0, 0x147e4f0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000ded7c0 sp=0xc000ded770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000ded7e0 sp=0xc000ded7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000ded7e8 sp=0xc000ded7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\nFAIL\truntime\t2700.374s\r\nok  \truntime/cgo\t0.128s\r\nok  \truntime/coverage\t219.696s\r\nok  \truntime/debug\t0.538s\r\nok  \truntime/internal/atomic\t2.918s\r\nok  \truntime/internal/math\t0.035s\r\nok  \truntime/internal/sys\t0.103s\r\nok  \truntime/internal/wasitest\t0.037s\r\nok  \truntime/metrics\t0.043s\r\nok  \truntime/pprof\t172.532s\r\nok  \truntime/trace\t24.523s\r\nok  \tslices\t0.529s\r\nok  \tsort\t1.569s\r\nok  \tstrconv\t3.867s\r\nok  \tstrings\t4.437s\r\nok  \tsync\t5.790s\r\nok  \tsync/atomic\t272.798s\r\nok  \tsyscall\t5.363s\r\nok  \ttesting\t6.910s\r\nok  \ttesting/fstest\t0.043s\r\nok  \ttesting/iotest\t0.023s\r\nok  \ttesting/quick\t0.160s\r\nok  \ttesting/slogtest\t0.035s\r\nok  \ttext/scanner\t0.067s\r\nok  \ttext/tabwriter\t0.022s\r\nok  \ttext/template\t1.794s\r\nok  \ttext/template/parse\t0.037s\r\nok  \ttime\t16.225s\r\nok  \tunicode\t0.042s\r\nok  \tunicode/utf16\t0.054s\r\nok  \tunicode/utf8\t0.040s\r\nok  \tcmd/addr2line\t2.624s\r\nok  \tcmd/api\t55.041s\r\nok  \tcmd/asm/internal/asm\t2.978s\r\nok  \tcmd/asm/internal/lex\t0.026s\r\nok  \tcmd/cgo/internal/swig\t0.120s\r\nok  \tcmd/cgo/internal/test\t2.047s\r\nok  \tcmd/cgo/internal/testcarchive\t79.541s\r\nok  \tcmd/cgo/internal/testcshared\t33.894s\r\nok  \tcmd/cgo/internal/testerrors\t63.344s\r\nok  \tcmd/cgo/internal/testfortran\t0.200s\r\nok  \tcmd/cgo/internal/testgodefs\t7.664s\r\nok  \tcmd/cgo/internal/testlife\t5.389s\r\nok  \tcmd/cgo/internal/testnocgo\t0.023s\r\nok  \tcmd/cgo/internal/testplugin\t201.859s\r\nok  \tcmd/cgo/internal/testsanitizers\t0.027s [no tests to run]\r\nok  \tcmd/cgo/internal/testshared\t0.030s\r\nok  \tcmd/cgo/internal/testso\t8.682s\r\nok  \tcmd/cgo/internal/teststdio\t10.117s\r\nok  \tcmd/cgo/internal/testtls\t0.041s\r\nok  \tcmd/compile/internal/abt\t0.031s\r\nok  \tcmd/compile/internal/amd64\t27.447s\r\nok  \tcmd/compile/internal/base\t0.038s\r\nok  \tcmd/compile/internal/compare\t0.044s\r\nok  \tcmd/compile/internal/dwarfgen\t1.277s\r\nok  \tcmd/compile/internal/importer\t122.148s\r\nok  \tcmd/compile/internal/ir\t0.037s\r\nok  \tcmd/compile/internal/logopt\t1.958s\r\nok  \tcmd/compile/internal/loopvar\t133.111s\r\nok  \tcmd/compile/internal/noder\t0.040s\r\nok  \tcmd/compile/internal/reflectdata\t0.028s [no tests to run]\r\nok  \tcmd/compile/internal/ssa\t2044.246s\r\nok  \tcmd/compile/internal/syntax\t15.338s\r\nok  \tcmd/compile/internal/test\t272.817s\r\nok  \tcmd/compile/internal/typecheck\t1.585s\r\nok  \tcmd/compile/internal/types\t0.024s\r\nok  \tcmd/compile/internal/types2\t47.700s\r\nok  \tcmd/covdata\t4.944s\r\nok  \tcmd/cover\t4.858s\r\nok  \tcmd/dist\t0.052s\r\nok  \tcmd/distpack\t0.039s\r\nok  \tcmd/doc\t1.275s\r\nok  \tcmd/fix\t16.940s\r\nok  \tcmd/go\t2286.949s\r\nok  \tcmd/go/internal/auth\t0.107s\r\nok  \tcmd/go/internal/cache\t156.563s\r\nok  \tcmd/go/internal/envcmd\t0.288s\r\nok  \tcmd/go/internal/fsys\t0.300s\r\nok  \tcmd/go/internal/generate\t0.056s\r\nok  \tcmd/go/internal/get\t0.061s\r\nok  \tcmd/go/internal/gover\t0.041s\r\nok  \tcmd/go/internal/imports\t0.192s\r\nok  \tcmd/go/internal/load\t0.062s\r\nok  \tcmd/go/internal/lockedfile\t3.186s\r\nok  \tcmd/go/internal/lockedfile/internal/filelock\t0.094s\r\nok  \tcmd/go/internal/modconv\t0.113s\r\nok  \tcmd/go/internal/modfetch\t88.177s\r\nok  \tcmd/go/internal/modfetch/codehost\t22.141s\r\nok  \tcmd/go/internal/modfetch/zip_sum_test\t0.062s\r\nok  \tcmd/go/internal/modindex\t0.987s\r\nok  \tcmd/go/internal/modload\t132.943s\r\nok  \tcmd/go/internal/mvs\t0.043s\r\nok  \tcmd/go/internal/par\t0.048s\r\nok  \tcmd/go/internal/str\t0.038s\r\nok  \tcmd/go/internal/test\t0.142s\r\nok  \tcmd/go/internal/toolchain\t0.084s\r\nok  \tcmd/go/internal/vcs\t0.318s\r\nok  \tcmd/go/internal/vcweb\t0.113s\r\nok  \tcmd/go/internal/vcweb/vcstest\t25.225s\r\nok  \tcmd/go/internal/web\t0.055s\r\nok  \tcmd/go/internal/work\t1.410s\r\nok  \tcmd/gofmt\t78.050s\r\nok  \tcmd/internal/archive\t6.460s\r\nok  \tcmd/internal/bootstrap_test\t1321.297s\r\nok  \tcmd/internal/buildid\t2.248s\r\nok  \tcmd/internal/cov\t5.902s\r\nok  \tcmd/internal/dwarf\t0.035s\r\nok  \tcmd/internal/edit\t0.029s\r\nok  \tcmd/internal/goobj\t190.039s\r\nok  \tcmd/internal/moddeps\t415.238s\r\nok  \tcmd/internal/notsha256\t0.045s\r\nok  \tcmd/internal/obj\t4.979s\r\nok  \tcmd/internal/obj/ppc64\t22.048s\r\nok  \tcmd/internal/obj/riscv\t63.925s\r\nok  \tcmd/internal/obj/s390x\t0.024s\r\nok  \tcmd/internal/obj/x86\t18.306s\r\nok  \tcmd/internal/objabi\t0.037s\r\nok  \tcmd/internal/pkgpath\t0.293s\r\nok  \tcmd/internal/pkgpattern\t0.046s\r\nok  \tcmd/internal/quoted\t0.267s\r\nok  \tcmd/internal/src\t0.035s\r\nok  \tcmd/internal/test2json\t1.494s\r\nok  \tcmd/link\t128.266s\r\nok  \tcmd/link/internal/benchmark\t0.051s\r\nok  \tcmd/link/internal/ld\t196.680s\r\nok  \tcmd/link/internal/loader\t0.064s\r\nok  \tcmd/nm\t12.542s\r\nok  \tcmd/objdump\t23.895s\r\nok  \tcmd/pack\t7.383s\r\nok  \tcmd/pprof\t5.996s\r\nok  \tcmd/trace\t0.625s\r\nok  \tcmd/vet\t43.754s\r\nFAIL\r\ngo tool dist: Failed: exit status 1\r\n./all.bash  5245.55s user 10829.54s system 430% cpu 1:02:14.00 total\r\ngopher@Gophers-iMac-Pro src % \r\n```\r\n\r\n</details>\r\n\r\nIssue #59634 for x/tools looks related.\r\n\r\nCC @golang/release, @prattmic.",Performance|Testing|OS-Darwin|Builders|NeedsFix,dmitshur,"Running all.bash on the darwin-amd64-longtest builder fairly consistently fails with a 45 minute timeout in the runtime package tests. Testing was done using at a near-tip commit on release-branch.go1.21 (ebbff91f5930ba74a4285f8ba6ddfd0df0871d95). From a sample of about 10 runs, there was one time the runtime package tests completed successfully:\r\n\r\n```\r\nok  \truntime\t2471.456s\r\n```\r\n\r\nBut all other times they failed due to a 45 min timeout. (The 45 minutes comes from cmd/dist's [default](https://cs.opensource.google/go/go/+/master:src/cmd/dist/test.go;l=532-538;drc=f4086d36862d8fd41af90356c894d04d3ff58203) of 180 seconds for package tests, times 3 because cmd/go test are running, times 5 because the builder has GO_TEST_TIMEOUT_SCALE=5.)\r\n\r\n```\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (21m8s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.568s\r\n```\r\n\r\n<details><summary>More</summary>\r\n\r\n```\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (21m8s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.568s\r\n```\r\n\r\n```\r\n--- FAIL: TestPingPongHog (0.19s)\r\n    proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 8000000/1000 = 8000\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (20m31s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.967s\r\n```\r\n\r\n```\r\n--- FAIL: TestPingPongHog (0.13s)\r\n    proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 4000000/1000 = 4000\r\npanic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (20m29s)\r\n\r\n[...]\r\n\r\nFAIL\truntime\t2700.754s\r\n```\r\n\r\n```\r\nFAIL\truntime\t2701.087s\r\nFAIL\truntime\t2700.519s\r\nFAIL\truntime\t2700.616s\r\nFAIL\truntime\t2700.441s\r\n```\r\n\r\n</details>\r\n\r\nCan be reproduced in a gomote with:\r\n\r\n```bash\r\n$ gomote create darwin-amd64-longtest\r\n$ gomote puttar -dir gotip -url='https://go.googlesource.com/go/+archive/ebbff91f5930ba74a4285f8ba6ddfd0df0871d95.tar.gz' $USER-darwin-amd64-longtest-0\r\n$ gomote ssh $USER-darwin-amd64-longtest-0\r\n$ cd /tmp/buildlet/gotip/src\r\n$ export GOROOT_BOOTSTRAP=$HOME/goboot\r\n$ ./all.bash  # GO_TEST_SHORT=0 is implicitly on via this builder's environment\r\n```\r\n\r\nHere's a complete all.bash output from one such run:\r\n\r\n<details>\r\n\r\n```\r\ngopher@Gophers-iMac-Pro src % time ./all.bash\r\nBuilding Go cmd/dist using /Users/gopher/goboot. (go1.19.3 darwin/amd64)\r\nBuilding Go toolchain1 using /Users/gopher/goboot.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n\r\n##### Test execution environment.\r\n# GOARCH: amd64\r\n# CPU: \r\n# GOOS: darwin\r\n# OS Version: Darwin 22.1.0 Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64 x86_64\r\n\r\n##### Testing packages.\r\nok  \tarchive/tar\t0.684s\r\nok  \tarchive/zip\t69.040s\r\nok  \tbufio\t0.226s\r\nok  \tbytes\t5.220s\r\nok  \tcmp\t0.079s\r\nok  \tcompress/bzip2\t0.257s\r\nok  \tcompress/flate\t20.785s\r\nok  \tcompress/gzip\t6.121s\r\nok  \tcompress/lzw\t0.290s\r\nok  \tcompress/zlib\t2.880s\r\nok  \tcontainer/heap\t0.099s\r\nok  \tcontainer/list\t0.026s\r\nok  \tcontainer/ring\t0.029s\r\nok  \tcontext\t0.168s\r\nok  \tcrypto\t0.085s\r\nok  \tcrypto/aes\t0.175s\r\nok  \tcrypto/cipher\t0.800s\r\nok  \tcrypto/des\t0.042s\r\nok  \tcrypto/dsa\t23.812s\r\nok  \tcrypto/ecdh\t1.521s\r\nok  \tcrypto/ecdsa\t1.973s\r\nok  \tcrypto/ed25519\t1.411s\r\nok  \tcrypto/elliptic\t1.076s\r\nok  \tcrypto/hmac\t0.033s\r\nok  \tcrypto/internal/alias\t0.049s\r\nok  \tcrypto/internal/bigmod\t0.550s\r\nok  \tcrypto/internal/boring\t0.074s\r\nok  \tcrypto/internal/boring/bcache\t0.275s\r\nok  \tcrypto/internal/edwards25519\t10.263s\r\nok  \tcrypto/internal/edwards25519/field\t7.944s\r\nok  \tcrypto/internal/nistec\t12.088s\r\nok  \tcrypto/internal/nistec/fiat\t0.037s [no tests to run]\r\nok  \tcrypto/md5\t0.059s\r\nok  \tcrypto/rand\t0.426s\r\nok  \tcrypto/rc4\t0.068s\r\nok  \tcrypto/rsa\t8.907s\r\nok  \tcrypto/sha1\t0.054s\r\nok  \tcrypto/sha256\t0.050s\r\nok  \tcrypto/sha512\t0.052s\r\nok  \tcrypto/subtle\t17.780s\r\nok  \tcrypto/tls\t37.772s\r\nok  \tcrypto/x509\t22.285s\r\nok  \tdatabase/sql\t1.461s\r\nok  \tdatabase/sql/driver\t0.029s\r\nok  \tdebug/buildinfo\t33.520s\r\nok  \tdebug/dwarf\t0.291s\r\nok  \tdebug/elf\t1.157s\r\nok  \tdebug/gosym\t31.489s\r\nok  \tdebug/macho\t0.111s\r\nok  \tdebug/pe\t0.291s\r\nok  \tdebug/plan9obj\t0.054s\r\nok  \tembed\t0.097s [no tests to run]\r\nok  \tembed/internal/embedtest\t0.049s\r\nok  \tencoding/ascii85\t0.039s\r\nok  \tencoding/asn1\t0.054s\r\nok  \tencoding/base32\t0.094s\r\nok  \tencoding/base64\t0.035s\r\nok  \tencoding/binary\t0.037s\r\nok  \tencoding/csv\t0.036s\r\nok  \tencoding/gob\t11.098s\r\nok  \tencoding/hex\t0.046s\r\nok  \tencoding/json\t4.832s\r\nok  \tencoding/pem\t5.511s\r\nok  \tencoding/xml\t18.266s\r\nok  \terrors\t0.171s\r\nok  \texpvar\t0.070s\r\nok  \tflag\t0.223s\r\nok  \tfmt\t0.212s\r\nok  \tgo/ast\t0.034s\r\nok  \tgo/build\t2.346s\r\nok  \tgo/build/constraint\t0.099s\r\nok  \tgo/constant\t0.085s\r\nok  \tgo/doc\t0.309s\r\nok  \tgo/doc/comment\t3.958s\r\nok  \tgo/format\t0.033s\r\nok  \tgo/importer\t1.655s\r\nok  \tgo/internal/gccgoimporter\t0.081s\r\nok  \tgo/internal/gcimporter\t430.781s\r\nok  \tgo/internal/srcimporter\t71.404s\r\nok  \tgo/parser\t25.058s\r\nok  \tgo/printer\t0.982s\r\nok  \tgo/scanner\t0.096s\r\nok  \tgo/token\t0.068s\r\nok  \tgo/types\t84.196s\r\nok  \thash\t0.046s\r\nok  \thash/adler32\t0.048s\r\nok  \thash/crc32\t0.055s\r\nok  \thash/crc64\t0.043s\r\nok  \thash/fnv\t0.052s\r\nok  \thash/maphash\t300.247s\r\nok  \thtml\t0.067s\r\nok  \thtml/template\t1.890s\r\nok  \timage\t0.700s\r\nok  \timage/color\t0.052s\r\nok  \timage/draw\t0.289s\r\nok  \timage/gif\t41.522s\r\nok  \timage/jpeg\t13.865s\r\nok  \timage/png\t4.065s\r\nok  \tindex/suffixarray\t114.748s\r\nok  \tinternal/abi\t0.809s\r\nok  \tinternal/buildcfg\t0.105s\r\nok  \tinternal/coverage/cformat\t0.094s\r\nok  \tinternal/coverage/cmerge\t0.033s\r\nok  \tinternal/coverage/pods\t0.077s\r\nok  \tinternal/coverage/slicereader\t0.035s\r\nok  \tinternal/coverage/slicewriter\t0.051s\r\nok  \tinternal/coverage/test\t0.055s\r\nok  \tinternal/cpu\t0.184s\r\nok  \tinternal/dag\t0.108s\r\nok  \tinternal/diff\t0.088s\r\nok  \tinternal/fmtsort\t0.186s\r\nok  \tinternal/fuzz\t0.072s\r\nok  \tinternal/godebug\t2.686s\r\nok  \tinternal/godebugs\t0.068s\r\nok  \tinternal/intern\t18.376s\r\nok  \tinternal/itoa\t0.031s\r\nok  \tinternal/poll\t0.944s\r\nok  \tinternal/profile\t0.044s\r\nok  \tinternal/reflectlite\t0.056s\r\nok  \tinternal/safefilepath\t0.071s\r\nok  \tinternal/saferio\t0.358s\r\nok  \tinternal/singleflight\t0.053s\r\nok  \tinternal/testenv\t1.993s\r\nok  \tinternal/trace\t4.708s\r\nok  \tinternal/types/errors\t2.962s\r\nok  \tinternal/unsafeheader\t0.025s\r\nok  \tinternal/xcoff\t0.049s\r\nok  \tinternal/zstd\t0.036s\r\nok  \tio\t0.156s\r\nok  \tio/fs\t1.117s\r\nok  \tio/ioutil\t0.073s\r\nok  \tlog\t0.054s\r\nok  \tlog/slog\t0.554s\r\nok  \tlog/slog/internal/benchmarks\t0.027s\r\nok  \tlog/slog/internal/buffer\t0.129s\r\nok  \tlog/syslog\t1.387s\r\nok  \tmaps\t0.035s\r\nok  \tmath\t0.035s\r\nok  \tmath/big\t13.384s\r\nok  \tmath/bits\t0.082s\r\nok  \tmath/cmplx\t0.034s\r\nok  \tmath/rand\t15.860s\r\nok  \tmime\t0.051s\r\nok  \tmime/multipart\t4.276s\r\nok  \tmime/quotedprintable\t6.464s\r\nok  \tnet\t126.307s\r\nok  \tnet/http\t153.486s\r\nok  \tnet/http/cgi\t4.849s\r\nok  \tnet/http/cookiejar\t0.101s\r\nok  \tnet/http/fcgi\t0.164s\r\nok  \tnet/http/httptest\t0.305s\r\nok  \tnet/http/httptrace\t0.071s\r\nok  \tnet/http/httputil\t23.016s\r\nok  \tnet/http/internal\t0.059s\r\nok  \tnet/http/internal/ascii\t0.028s\r\nok  \tnet/http/pprof\t5.536s\r\nok  \tnet/internal/socktest\t0.023s\r\nok  \tnet/mail\t0.031s\r\nok  \tnet/netip\t3.936s\r\nok  \tnet/rpc\t0.362s\r\nok  \tnet/rpc/jsonrpc\t0.112s\r\nok  \tnet/smtp\t0.173s\r\nok  \tnet/textproto\t3.713s\r\nok  \tnet/url\t0.029s\r\nok  \tos\t19.573s\r\nok  \tos/exec\t4.130s\r\nok  \tos/exec/internal/fdtest\t0.054s\r\nok  \tos/signal\t17.377s\r\nok  \tos/user\t0.097s\r\nok  \tpath\t0.059s\r\nok  \tpath/filepath\t0.392s\r\nok  \tplugin\t0.032s\r\nok  \treflect\t7.792s\r\nok  \tregexp\t59.010s\r\nok  \tregexp/syntax\t5.013s\r\n--- FAIL: TestPingPongHog (0.21s)                                                                                                                              D     proc_test.go:490: want hogCount/lightCount in [0.05, 20]; got 6000000/1000 = 6000                                                                          ^ panic: test timed out after 45m0s\r\nrunning tests:\r\n\tTestSchedLocalQueueEmpty (22m19s)\r\n\r\ngoroutine 73160259 [running]:\r\npanic({0x13c5980?, 0xc000e86080?})\r\n\t/tmp/buildlet/gotip/src/runtime/panic.go:1017 +0x3ac fp=0xc000c32f10 sp=0xc000c32e60 pc=0x103b0ac\r\ntesting.(*M).startAlarm.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2259 +0x3b9 fp=0xc000c32fe0 sp=0xc000c32f10 pc=0x1104059\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c32fe8 sp=0xc000c32fe0 pc=0x10795c1\r\ncreated by time.goFunc\r\n\t/tmp/buildlet/gotip/src/time/sleep.go:176 +0x2d\r\n\r\ngoroutine 1 [chan receive, 22 minutes]:\r\nruntime.gopark(0xc0000cd970?, 0x10104c5?, 0x78?, 0x0?, 0x18?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0000cd908 sp=0xc0000cd8e8 pc=0x103f0ee\r\nruntime.chanrecv(0xc000192700, 0xc0000cd9ef, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0000cd980 sp=0xc0000cd908 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0000cd9a8 sp=0xc0000cd980 pc=0x1008f92\r\ntesting.(*T).Run(0xc0000de1a0, {0x145f7f5?, 0x20?}, 0x147ee20)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1649 +0x3c8 fp=0xc0000cda68 sp=0xc0000cd9a8 pc=0x1100c68\r\ntesting.runTests.func1(0x1741240?)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2054 +0x3e fp=0xc0000cdab8 sp=0xc0000cda68 pc=0x1102d7e\r\ntesting.tRunner(0xc0000de1a0, 0xc0000cdbd0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0000cdb08 sp=0xc0000cdab8 pc=0x10ffe3f\r\ntesting.runTests(0xc00009a780?, {0x173c3a0, 0x1b7, 0x1b7}, {0x2ed000000000000?, 0xc0000cdc90?, 0x1740520?})\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:2052 +0x445 fp=0xc0000cdc00 sp=0xc0000cdb08 pc=0x1102c65\r\ntesting.(*M).Run(0xc00009a780)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1925 +0x636 fp=0xc0000cde48 sp=0xc0000cdc00 pc=0x1101656\r\nruntime_test.TestMain(0x107923a?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:27 +0x13 fp=0xc0000cde88 sp=0xc0000cde48 pc=0x12ec513\r\nmain.main()\r\n\t_testmain.go:1543 +0x1c6 fp=0xc0000cdf40 sp=0xc0000cde88 pc=0x1399246\r\nruntime.main()\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:267 +0x2bb fp=0xc0000cdfe0 sp=0xc0000cdf40 pc=0x103ec7b\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000cdfe8 sp=0xc0000cdfe0 pc=0x10795c1\r\n\r\ngoroutine 2 [force gc (idle), 36 minutes]:\r\nruntime.gopark(0x2a11745527a?, 0x1741240?, 0x0?, 0x0?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0000487a8 sp=0xc000048788 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.forcegchelper()\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:322 +0xb3 fp=0xc0000487e0 sp=0xc0000487a8 pc=0x103ef53\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000487e8 sp=0xc0000487e0 pc=0x10795c1\r\ncreated by runtime.init.6 in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:310 +0x1a\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x173ff01?, 0x173ffe0?, 0xc?, 0x14?, 0x1?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000048f78 sp=0xc000048f58 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.bgsweep(0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcsweep.go:321 +0xdf fp=0xc000048fc8 sp=0xc000048f78 pc=0x1028b7f\r\nruntime.gcenable.func1()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:200 +0x25 fp=0xc000048fe0 sp=0xc000048fc8 pc=0x101d725\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000048fe8 sp=0xc000048fe0 pc=0x10795c1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:200 +0x66\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x2fc735?, 0x38561?, 0x0?, 0x0?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000049770 sp=0xc000049750 pc=0x103f0ee\r\nruntime.goparkunlock(...)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:404\r\nruntime.(*scavengerState).park(0x17405a0)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcscavenge.go:425 +0x49 fp=0xc0000497a0 sp=0xc000049770 pc=0x10263a9\r\nruntime.bgscavenge(0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcscavenge.go:658 +0x59 fp=0xc0000497c8 sp=0xc0000497a0 pc=0x1026959\r\nruntime.gcenable.func2()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:201 +0x25 fp=0xc0000497e0 sp=0xc0000497c8 pc=0x101d6c5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000497e8 sp=0xc0000497e0 pc=0x10795c1\r\ncreated by runtime.gcenable in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:201 +0xa5\r\n\r\ngoroutine 5 [finalizer wait, 22 minutes]:\r\nruntime.gopark(0x0?, 0x147f158?, 0x90?, 0xa3?, 0x2000000020?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000049e28 sp=0xc000049e08 pc=0x103f0ee\r\nruntime.runfinq()\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal.go:193 +0x107 fp=0xc000049fe0 sp=0xc000049e28 pc=0x101c727\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000049fe8 sp=0xc000049fe0 pc=0x10795c1\r\ncreated by runtime.createfing in goroutine 1\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal.go:163 +0x3d\r\n\r\ngoroutine 20213575 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x0?, 0x6e?, 0xc000d72c98?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000d72c48 sp=0xc000d72c28 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000d72cc0 sp=0xc000d72c48 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000d72ce8 sp=0xc000d72cc0 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc0002681a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000d72d80 sp=0xc000d72ce8 pc=0x10ffae5\r\nruntime_test.TestCheckPtr(0xc0002681a0)\r\n\t/tmp/buildlet/gotip/src/runtime/checkptr_test.go:21 +0x8a fp=0xc000d72f70 sp=0xc000d72d80 pc=0x12e5f2a\r\ntesting.tRunner(0xc0002681a0, 0x147e5a8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000d72fc0 sp=0xc000d72f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000d72fe0 sp=0xc000d72fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000d72fe8 sp=0xc000d72fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 35 [GC worker (idle), 23 minutes]:\r\nruntime.gopark(0x3372d19298a?, 0xc000133e60?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00004a750 sp=0xc00004a730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc00004a7e0 sp=0xc00004a750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00004a7e8 sp=0xc00004a7e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 34 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x344822df90a?, 0xc00002c180?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000044f50 sp=0xc000044f30 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc000044fe0 sp=0xc000044f50 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000044fe8 sp=0xc000044fe0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 21 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x33e1446adec?, 0xc00002c1a0?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000044750 sp=0xc000044730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0000447e0 sp=0xc000044750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000447e8 sp=0xc0000447e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 22 [GC worker (idle)]:\r\nruntime.gopark(0x344823bf331?, 0xc0001a0060?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000045750 sp=0xc000045730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0000457e0 sp=0xc000045750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0000457e8 sp=0xc0000457e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 36 [GC worker (idle), 22 minutes]:\r\nruntime.gopark(0x33e1446a945?, 0x2?, 0x56?, 0xaa?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000498750 sp=0xc000498730 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc0004987e0 sp=0xc000498750 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004987e8 sp=0xc0004987e0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 8 [GC worker (idle), 23 minutes]:\r\nruntime.gopark(0x3372d195998?, 0xc000133e80?, 0x1a?, 0x14?, 0x0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00004af50 sp=0xc00004af30 pc=0x103f0ee\r\nruntime.gcBgMarkWorker()\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1293 +0xe5 fp=0xc00004afe0 sp=0xc00004af50 pc=0x101f2a5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00004afe8 sp=0xc00004afe0 pc=0x10795c1\r\ncreated by runtime.gcBgMarkStartWorkers in goroutine 18\r\n\t/tmp/buildlet/gotip/src/runtime/mgc.go:1217 +0x1c\r\n\r\ngoroutine 20214033 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xf0?, 0x80?, 0xc000a9ae00?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a9adb0 sp=0xc000a9ad90 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a9ae28 sp=0xc000a9adb0 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a9ae50 sp=0xc000a9ae28 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03d40)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a9aee8 sp=0xc000a9ae50 pc=0x10ffae5\r\nruntime_test.TestDeferKeepAlive(0xc000c03d40)\r\n\t/tmp/buildlet/gotip/src/runtime/mfinal_test.go:237 +0x72 fp=0xc000a9af70 sp=0xc000a9aee8 pc=0x132afd2\r\ntesting.tRunner(0xc000c03d40, 0x147e668)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a9afc0 sp=0xc000a9af70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a9afe0 sp=0xc000a9afc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a9afe8 sp=0xc000a9afe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213613 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x50?, 0x25?, 0xc000047dd0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000047d80 sp=0xc000047d60 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000047df8 sp=0xc000047d80 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000047e20 sp=0xc000047df8 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c031e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000047eb8 sp=0xc000047e20 pc=0x10ffae5\r\nruntime_test.TestCatchPanic(0xc000c031e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:457 +0x27 fp=0xc000047f70 sp=0xc000047eb8 pc=0x12ea1a7\r\ntesting.tRunner(0xc000c031e0, 0x147e498)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000047fc0 sp=0xc000047f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000047fe0 sp=0xc000047fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000047fe8 sp=0xc000047fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20205441 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x70?, 0x20?, 0xc000494e10?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000494dc0 sp=0xc000494da0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000494e38 sp=0xc000494dc0 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000494e60 sp=0xc000494e38 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02000)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000494ef8 sp=0xc000494e60 pc=0x10ffae5\r\nruntime_test.TestCgoCrashTraceback(0xc000c02000)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:240 +0x1c fp=0xc000494f70 sp=0xc000494ef8 pc=0x12e84bc\r\ntesting.tRunner(0xc000c02000, 0x147e4c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000494fc0 sp=0xc000494f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000494fe0 sp=0xc000494fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000494fe8 sp=0xc000494fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213624 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0x2a?, 0xc0004cf618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004cf5c8 sp=0xc0004cf5a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004cf640 sp=0xc0004cf5c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004cf668 sp=0xc0004cf640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004cf700 sp=0xc0004cf668 pc=0x10ffae5\r\nruntime_test.TestAbortInCgo(0xc000c54340)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:702 +0x1c fp=0xc0004cf770 sp=0xc0004cf700 pc=0x12eb65c\r\ntesting.tRunner(0xc000c54340, 0x147e380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004cf7c0 sp=0xc0004cf770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004cf7e0 sp=0xc0004cf7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004cf7e8 sp=0xc0004cf7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213633 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0xd0?, 0x2d?, 0xc0004cfe08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004cfdb8 sp=0xc0004cfd98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004cfe30 sp=0xc0004cfdb8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004cfe58 sp=0xc0004cfe30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54b60)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004cfef0 sp=0xc0004cfe58 pc=0x10ffae5\r\nruntime_test.TestDestructorCallback(0xc000c54b60)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:809 +0x1f fp=0xc0004cff70 sp=0xc0004cfef0 pc=0x12ebf7f\r\ntesting.tRunner(0xc000c54b60, 0x147e6a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004cffc0 sp=0xc0004cff70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004cffe0 sp=0xc0004cffc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004cffe8 sp=0xc0004cffe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213617 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xe0?, 0x26?, 0xc000499e18?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000499dc8 sp=0xc000499da8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000499e40 sp=0xc000499dc8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000499e68 sp=0xc000499e40 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03860)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000499f00 sp=0xc000499e68 pc=0x10ffae5\r\nruntime_test.TestCgoTracebackSigpanic(0xc000c03860)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:537 +0x1c fp=0xc000499f70 sp=0xc000499f00 pc=0x12ea7bc\r\ntesting.tRunner(0xc000c03860, 0x147e580)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000499fc0 sp=0xc000499f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000499fe0 sp=0xc000499fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000499fe8 sp=0xc000499fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20214051 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xf0?, 0x81?, 0xc000c30750?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000c30700 sp=0xc000c306e0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000c30778 sp=0xc000c30700 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000c307a0 sp=0xc000c30778 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c541a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000c30838 sp=0xc000c307a0 pc=0x10ffae5\r\nruntime_test.TestGcPacer(0xc000c541a0?)\r\n\t/tmp/buildlet/gotip/src/runtime/mgcpacer_test.go:17 +0x2a fp=0xc000c30f70 sp=0xc000c30838 pc=0x132c84a\r\ntesting.tRunner(0xc000c541a0, 0x147e7d0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000c30fc0 sp=0xc000c30f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000c30fe0 sp=0xc000c30fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c30fe8 sp=0xc000c30fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213587 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x90?, 0xed?, 0xc000187608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0001875b8 sp=0xc000187598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000187630 sp=0xc0001875b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000187658 sp=0xc000187630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f1e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0001876f0 sp=0xc000187658 pc=0x10ffae5\r\nruntime_test.TestCgoPanicDeadlock(0xc00015f1e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:206 +0x1f fp=0xc000187770 sp=0xc0001876f0 pc=0x12e80df\r\ntesting.tRunner(0xc00015f1e0, 0x147e510)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0001877c0 sp=0xc000187770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0001877e0 sp=0xc0001877c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0001877e8 sp=0xc0001877e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213972 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x40?, 0x65?, 0xc0002d2e48?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0002d2df8 sp=0xc0002d2dd8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0002d2e70 sp=0xc0002d2df8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0002d2e98 sp=0xc0002d2e70 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00030a340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0002d2f30 sp=0xc0002d2e98 pc=0x10ffae5\r\nruntime_test.TestMemmoveOverlapLarge0x120000(0xc00030a340)\r\n\t/tmp/buildlet/gotip/src/runtime/memmove_test.go:116 +0xa5 fp=0xc0002d2f70 sp=0xc0002d2f30 pc=0x131d0e5\r\ntesting.tRunner(0xc00030a340, 0x147ea70)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0002d2fc0 sp=0xc0002d2f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0002d2fe0 sp=0xc0002d2fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0002d2fe8 sp=0xc0002d2fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213606 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x50?, 0x22?, 0xc000c37c58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000c37c08 sp=0xc000c37be8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000c37c80 sp=0xc000c37c08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000c37ca8 sp=0xc000c37c80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000c37d40 sp=0xc000c37ca8 pc=0x10ffae5\r\nruntime_test.testCgoPprof(0xc000c02820, {0x1456e8e, 0xe}, {0x1453579, 0x8}, {0x1452827, 0x6}, {0x1455b14, 0xc})\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:295 +0x79 fp=0xc000c37f18 sp=0xc000c37d40 pc=0x12e8ab9\r\nruntime_test.TestCgoPprofPIE(0xc000a76fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:362 +0x45 fp=0xc000c37f70 sp=0xc000c37f18 pc=0x12e97e5\r\ntesting.tRunner(0xc000c02820, 0x147e528)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000c37fc0 sp=0xc000c37f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000c37fe0 sp=0xc000c37fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000c37fe8 sp=0xc000c37fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212589 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x40?, 0xeb?, 0xc000a93df8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a93da8 sp=0xc000a93d88 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a93e20 sp=0xc000a93da8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a93e48 sp=0xc000a93e20 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a93ee0 sp=0xc000a93e48 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadSIGPROF(0xc00015e820)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:92 +0x25 fp=0xc000a93f70 sp=0xc000a93ee0 pc=0x12e7585\r\ntesting.tRunner(0xc00015e820, 0x147e4e8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a93fc0 sp=0xc000a93f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a93fe0 sp=0xc000a93fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a93fe8 sp=0xc000a93fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213836 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x90?, 0x20?, 0xc0004ce5e0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004ce590 sp=0xc0004ce570 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004ce608 sp=0xc0004ce590 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004ce630 sp=0xc0004ce608 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02d00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004ce6c8 sp=0xc0004ce630 pc=0x10ffae5\r\nruntime_test.testConcurrentReadsAfterGrowth(0xc0004ce760?, 0x0)\r\n\t/tmp/buildlet/gotip/src/runtime/map_test.go:317 +0x2a fp=0xc0004ce750 sp=0xc0004ce6c8 pc=0x13145aa\r\nruntime_test.TestConcurrentReadsAfterGrowth(0xc001711800?)\r\n\t/tmp/buildlet/gotip/src/runtime/map_test.go:363 +0x15 fp=0xc0004ce770 sp=0xc0004ce750 pc=0x1314d35\r\ntesting.tRunner(0xc000c02d00, 0x147e5f0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004ce7c0 sp=0xc0004ce770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004ce7e0 sp=0xc0004ce7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004ce7e8 sp=0xc0004ce7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213588 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xf0?, 0xed?, 0xc000496e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000496db8 sp=0xc000496d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000496e30 sp=0xc000496db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000496e58 sp=0xc000496e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000496ef0 sp=0xc000496e58 pc=0x10ffae5\r\nruntime_test.TestCgoCCodeSIGPROF(0xc00015f380)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:216 +0x1f fp=0xc000496f70 sp=0xc000496ef0 pc=0x12e81ff\r\ntesting.tRunner(0xc00015f380, 0x147e4a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000496fc0 sp=0xc000496f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000496fe0 sp=0xc000496fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000496fe8 sp=0xc000496fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213577 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0x6e?, 0xc000d29660?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000d29610 sp=0xc000d295f0 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000d29688 sp=0xc000d29610 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000d296b0 sp=0xc000d29688 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc0002684e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000d29748 sp=0xc000d296b0 pc=0x10ffae5\r\nruntime_test.TestCgoCrashHandler(0xc000d297a0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:24 +0x18 fp=0xc000d29770 sp=0xc000d29748 pc=0x12e6ff8\r\ntesting.tRunner(0xc0002684e0, 0x147e4b8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000d297c0 sp=0xc000d29770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000d297e0 sp=0xc000d297c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000d297e8 sp=0xc000d297e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212592 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x70?, 0xec?, 0xc000a935f8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a935a8 sp=0xc000a93588 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a93620 sp=0xc000a935a8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a93648 sp=0xc000a93620 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015ed00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a936e0 sp=0xc000a93648 pc=0x10ffae5\r\nruntime_test.TestCgoExecSignalMask(0xc00015ed00)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:135 +0x25 fp=0xc000a93770 sp=0xc000a936e0 pc=0x12e7925\r\ntesting.tRunner(0xc00015ed00, 0x147e4d8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a937c0 sp=0xc000a93770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a937e0 sp=0xc000a937c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a937e8 sp=0xc000a937e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213586 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x30?, 0xed?, 0xc000deed90?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000deed40 sp=0xc000deed20 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000deedb8 sp=0xc000deed40 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000deede0 sp=0xc000deedb8 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015f040)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000deee78 sp=0xc000deede0 pc=0x10ffae5\r\nruntime_test.TestCgoCheckBytes(0xc00015f040)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:166 +0x27 fp=0xc000deef70 sp=0xc000deee78 pc=0x12e7b87\r\ntesting.tRunner(0xc00015f040, 0x147e4b0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000deefc0 sp=0xc000deef70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000deefe0 sp=0xc000deefc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000deefe8 sp=0xc000deefe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213576 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x60?, 0x6e?, 0xc000de85e0?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000de8590 sp=0xc000de8570 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000de8608 sp=0xc000de8590 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000de8630 sp=0xc000de8608 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000268340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000de86c8 sp=0xc000de8630 pc=0x10ffae5\r\nruntime_test.TestCheckPtr2(0xc000268340)\r\n\t/tmp/buildlet/gotip/src/runtime/checkptr_test.go:74 +0x87 fp=0xc000de8770 sp=0xc000de86c8 pc=0x12e6447\r\ntesting.tRunner(0xc000268340, 0x147e5b0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000de87c0 sp=0xc000de8770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000de87e0 sp=0xc000de87c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000de87e8 sp=0xc000de87e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212588 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xe0?, 0xea?, 0xc000a90e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a90db8 sp=0xc000a90d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a90e30 sp=0xc000a90db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a90e58 sp=0xc000a90e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e680)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a90ef0 sp=0xc000a90e58 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadPanic(0xc00015e680)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:80 +0x1f fp=0xc000a90f70 sp=0xc000a90ef0 pc=0x12e747f\r\ntesting.tRunner(0xc00015e680, 0x147e4e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a90fc0 sp=0xc000a90f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a90fe0 sp=0xc000a90fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a90fe8 sp=0xc000a90fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213651 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0x90?, 0x2e?, 0xc000a77e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a77db8 sp=0xc000a77d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a77e30 sp=0xc000a77db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a77e58 sp=0xc000a77e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54ea0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a77ef0 sp=0xc000a77e58 pc=0x10ffae5\r\nruntime_test.TestEnsureBindM(0xc000c54ea0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:845 +0x1f fp=0xc000a77f70 sp=0xc000a77ef0 pc=0x12ec3ff\r\ntesting.tRunner(0xc000c54ea0, 0x147e6e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a77fc0 sp=0xc000a77f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a77fe0 sp=0xc000a77fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a77fe8 sp=0xc000a77fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213616 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x80?, 0x26?, 0xc000495608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004955b8 sp=0xc000495598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000495630 sp=0xc0004955b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000495658 sp=0xc000495630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c036c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004956f0 sp=0xc000495658 pc=0x10ffae5\r\nruntime_test.TestSigStackSwapping(0xc000c036c0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:517 +0x1f fp=0xc000495770 sp=0xc0004956f0 pc=0x12ea69f\r\ntesting.tRunner(0xc000c036c0, 0x147ee98)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004957c0 sp=0xc000495770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004957e0 sp=0xc0004957c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004957e8 sp=0xc0004957e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213625 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x30?, 0x2b?, 0xc0004d0608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d05b8 sp=0xc0004d0598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d0630 sp=0xc0004d05b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d0658 sp=0xc0004d0630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c544e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d06f0 sp=0xc0004d0658 pc=0x10ffae5\r\nruntime_test.TestEINTR(0xc000c544e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:735 +0x1f fp=0xc0004d0770 sp=0xc0004d06f0 pc=0x12eb7df\r\ntesting.tRunner(0xc000c544e0, 0x147e6c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d07c0 sp=0xc0004d0770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d07e0 sp=0xc0004d07c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d07e8 sp=0xc0004d07e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213711 [chan receive, 41 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xb0?, 0x62?, 0xc000a72608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a725b8 sp=0xc000a72598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a72630 sp=0xc000a725b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a72658 sp=0xc000a72630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c54820)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a726f0 sp=0xc000a72658 pc=0x10ffae5\r\nruntime_test.TestRecoverBeforePanicAfterGoexit(0xc000c54820)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:455 +0x38 fp=0xc000a72770 sp=0xc000a726f0 pc=0x12ef578\r\ntesting.tRunner(0xc000c54820, 0x147ed98)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a727c0 sp=0xc000a72770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a727e0 sp=0xc000a727c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a727e8 sp=0xc000a727e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213971 [chan receive, 26 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0xe0?, 0x64?, 0xc000a69e48?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a69df8 sp=0xc000a69dd8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a69e70 sp=0xc000a69df8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a69e98 sp=0xc000a69e70 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00030a1a0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a69f30 sp=0xc000a69e98 pc=0x10ffae5\r\nruntime_test.TestMemmoveLarge0x180000(0xc00030a1a0)\r\n\t/tmp/buildlet/gotip/src/runtime/memmove_test.go:104 +0xa5 fp=0xc000a69f70 sp=0xc000a69f30 pc=0x131cfe5\r\ntesting.tRunner(0xc00030a1a0, 0x147ea68)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a69fc0 sp=0xc000a69f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a69fe0 sp=0xc000a69fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a69fe8 sp=0xc000a69fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213618 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x40?, 0x27?, 0xc0004d3618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d35c8 sp=0xc0004d35a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d3640 sp=0xc0004d35c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d3668 sp=0xc0004d3640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03a00)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d3700 sp=0xc0004d3668 pc=0x10ffae5\r\nruntime_test.TestCgoPanicCallback(0xc000c03a00)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:561 +0x1c fp=0xc0004d3770 sp=0xc0004d3700 pc=0x12ea9bc\r\ntesting.tRunner(0xc000c03a00, 0x147e508)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d37c0 sp=0xc0004d3770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d37e0 sp=0xc0004d37c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d37e8 sp=0xc0004d37e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213605 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xf0?, 0x21?, 0xc000849c58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000849c08 sp=0xc000849be8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000849c80 sp=0xc000849c08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000849ca8 sp=0xc000849c80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c02680)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000849d40 sp=0xc000849ca8 pc=0x10ffae5\r\nruntime_test.testCgoPprof(0xc000c02680, {0x0, 0x0}, {0x1453579, 0x8}, {0x1452827, 0x6}, {0x1455b14, 0xc})\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:295 +0x79 fp=0xc000849f18 sp=0xc000849d40 pc=0x12e8ab9\r\nruntime_test.TestCgoPprof(0xc000047fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:358 +0x3d fp=0xc000849f70 sp=0xc000849f18 pc=0x12e977d\r\ntesting.tRunner(0xc000c02680, 0x147e518)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000849fc0 sp=0xc000849f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000849fe0 sp=0xc000849fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000849fe8 sp=0xc000849fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213652 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef82a0?, 0xf0?, 0x2e?, 0xc00049b618?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc00049b5c8 sp=0xc00049b5a8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc00049b640 sp=0xc00049b5c8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc00049b668 sp=0xc00049b640 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c55040)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc00049b700 sp=0xc00049b668 pc=0x10ffae5\r\nruntime_test.TestVDSO(0xc000c55040)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_test.go:157 +0x1c fp=0xc00049b770 sp=0xc00049b700 pc=0x12ed8bc\r\ntesting.tRunner(0xc000c55040, 0x147f0f8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc00049b7c0 sp=0xc00049b770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc00049b7e0 sp=0xc00049b7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc00049b7e8 sp=0xc00049b7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213844 [chan receive, 40 minutes]:\r\nruntime.gopark(0x0?, 0xc001ef84e0?, 0x70?, 0x61?, 0xc000a9d638?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a9d5e8 sp=0xc000a9d5c8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a9d660 sp=0xc000a9d5e8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a9d688 sp=0xc000a9d660 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000268b60)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a9d720 sp=0xc000a9d688 pc=0x10ffae5\r\nruntime_test.TestGCTestMoveStackOnNextCall(0xc000268b60)\r\n\t/tmp/buildlet/gotip/src/runtime/gc_test.go:210 +0x1c fp=0xc000a9d770 sp=0xc000a9d720 pc=0x12fc01c\r\ntesting.tRunner(0xc000268b60, 0x147e798)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a9d7c0 sp=0xc000a9d770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a9d7e0 sp=0xc000a9d7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a9d7e8 sp=0xc000a9d7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212586 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x20?, 0xea?, 0xc0004d4608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc0004d45b8 sp=0xc0004d4598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc0004d4630 sp=0xc0004d45b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc0004d4658 sp=0xc0004d4630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e340)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc0004d46f0 sp=0xc0004d4658 pc=0x10ffae5\r\nruntime_test.TestCgoTraceback(0xc00015e340)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:44 +0x1f fp=0xc0004d4770 sp=0xc0004d46f0 pc=0x12e719f\r\ntesting.tRunner(0xc00015e340, 0x147e560)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc0004d47c0 sp=0xc0004d4770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc0004d47e0 sp=0xc0004d47c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc0004d47e8 sp=0xc0004d47e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212593 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xd0?, 0xec?, 0xc000aa9e08?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000aa9db8 sp=0xc000aa9d98 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000aa9e30 sp=0xc000aa9db8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000aa9e58 sp=0xc000aa9e30 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015eea0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000aa9ef0 sp=0xc000aa9e58 pc=0x10ffae5\r\nruntime_test.TestEnsureDropM(0xc00015eea0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:149 +0x1f fp=0xc000aa9f70 sp=0xc000aa9ef0 pc=0x12e7a5f\r\ntesting.tRunner(0xc00015eea0, 0x147e6e8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000aa9fc0 sp=0xc000aa9f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000aa9fe0 sp=0xc000aa9fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000aa9fe8 sp=0xc000aa9fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\n[...]\r\n\r\ngoroutine 20212587 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0x80?, 0xea?, 0xc000a96df8?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000a96da8 sp=0xc000a96d88 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000a96e20 sp=0xc000a96da8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000a96e48 sp=0xc000a96e20 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e4e0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000a96ee0 sp=0xc000a96e48 pc=0x10ffae5\r\nruntime_test.TestCgoCallbackGC(0xc00015e4e0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:53 +0x25 fp=0xc000a96f70 sp=0xc000a96ee0 pc=0x12e72c5\r\ntesting.tRunner(0xc00015e4e0, 0x147e4a8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000a96fc0 sp=0xc000a96f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000a96fe0 sp=0xc000a96fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000a96fe8 sp=0xc000a96fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20213614 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xb0?, 0x25?, 0xc000495e58?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000495e08 sp=0xc000495de8 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000495e80 sp=0xc000495e08 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000495ea8 sp=0xc000495e80 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc000c03380)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000495f40 sp=0xc000495ea8 pc=0x10ffae5\r\nruntime_test.TestCgoLockOSThreadExit(0xc000495fa0?)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:493 +0x18 fp=0xc000495f70 sp=0xc000495f40 pc=0x12ea4b8\r\ntesting.tRunner(0xc000c03380, 0x147e4f8)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000495fc0 sp=0xc000495f70 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000495fe0 sp=0xc000495fc0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000495fe8 sp=0xc000495fe0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\n\r\ngoroutine 20212590 [chan receive, 43 minutes]:\r\nruntime.gopark(0x0?, 0xc000076000?, 0xa0?, 0xeb?, 0xc000ded608?)\r\n\t/tmp/buildlet/gotip/src/runtime/proc.go:398 +0xce fp=0xc000ded5b8 sp=0xc000ded598 pc=0x103f0ee\r\nruntime.chanrecv(0xc0000821e0, 0x0, 0x1)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:583 +0x3cd fp=0xc000ded630 sp=0xc000ded5b8 pc=0x100938d\r\nruntime.chanrecv1(0x173fe20?, 0x13c5980?)\r\n\t/tmp/buildlet/gotip/src/runtime/chan.go:442 +0x12 fp=0xc000ded658 sp=0xc000ded630 pc=0x1008f92\r\ntesting.(*T).Parallel(0xc00015e9c0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1403 +0x205 fp=0xc000ded6f0 sp=0xc000ded658 pc=0x10ffae5\r\nruntime_test.TestCgoExternalThreadSignal(0xc00015e9c0)\r\n\t/tmp/buildlet/gotip/src/runtime/crash_cgo_test.go:106 +0x1f fp=0xc000ded770 sp=0xc000ded6f0 pc=0x12e76bf\r\ntesting.tRunner(0xc00015e9c0, 0x147e4f0)\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1595 +0xff fp=0xc000ded7c0 sp=0xc000ded770 pc=0x10ffe3f\r\ntesting.(*T).Run.func1()\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x25 fp=0xc000ded7e0 sp=0xc000ded7c0 pc=0x1100dc5\r\nruntime.goexit()\r\n\t/tmp/buildlet/gotip/src/runtime/asm_amd64.s:1650 +0x1 fp=0xc000ded7e8 sp=0xc000ded7e0 pc=0x10795c1\r\ncreated by testing.(*T).Run in goroutine 1\r\n\t/tmp/buildlet/gotip/src/testing/testing.go:1648 +0x3ad\r\nFAIL\truntime\t2700.374s\r\nok  \truntime/cgo\t0.128s\r\nok  \truntime/coverage\t219.696s\r\nok  \truntime/debug\t0.538s\r\nok  \truntime/internal/atomic\t2.918s\r\nok  \truntime/internal/math\t0.035s\r\nok  \truntime/internal/sys\t0.103s\r\nok  \truntime/internal/wasitest\t0.037s\r\nok  \truntime/metrics\t0.043s\r\nok  \truntime/pprof\t172.532s\r\nok  \truntime/trace\t24.523s\r\nok  \tslices\t0.529s\r\nok  \tsort\t1.569s\r\nok  \tstrconv\t3.867s\r\nok  \tstrings\t4.437s\r\nok  \tsync\t5.790s\r\nok  \tsync/atomic\t272.798s\r\nok  \tsyscall\t5.363s\r\nok  \ttesting\t6.910s\r\nok  \ttesting/fstest\t0.043s\r\nok  \ttesting/iotest\t0.023s\r\nok  \ttesting/quick\t0.160s\r\nok  \ttesting/slogtest\t0.035s\r\nok  \ttext/scanner\t0.067s\r\nok  \ttext/tabwriter\t0.022s\r\nok  \ttext/template\t1.794s\r\nok  \ttext/template/parse\t0.037s\r\nok  \ttime\t16.225s\r\nok  \tunicode\t0.042s\r\nok  \tunicode/utf16\t0.054s\r\nok  \tunicode/utf8\t0.040s\r\nok  \tcmd/addr2line\t2.624s\r\nok  \tcmd/api\t55.041s\r\nok  \tcmd/asm/internal/asm\t2.978s\r\nok  \tcmd/asm/internal/lex\t0.026s\r\nok  \tcmd/cgo/internal/swig\t0.120s\r\nok  \tcmd/cgo/internal/test\t2.047s\r\nok  \tcmd/cgo/internal/testcarchive\t79.541s\r\nok  \tcmd/cgo/internal/testcshared\t33.894s\r\nok  \tcmd/cgo/internal/testerrors\t63.344s\r\nok  \tcmd/cgo/internal/testfortran\t0.200s\r\nok  \tcmd/cgo/internal/testgodefs\t7.664s\r\nok  \tcmd/cgo/internal/testlife\t5.389s\r\nok  \tcmd/cgo/internal/testnocgo\t0.023s\r\nok  \tcmd/cgo/internal/testplugin\t201.859s\r\nok  \tcmd/cgo/internal/testsanitizers\t0.027s [no tests to run]\r\nok  \tcmd/cgo/internal/testshared\t0.030s\r\nok  \tcmd/cgo/internal/testso\t8.682s\r\nok  \tcmd/cgo/internal/teststdio\t10.117s\r\nok  \tcmd/cgo/internal/testtls\t0.041s\r\nok  \tcmd/compile/internal/abt\t0.031s\r\nok  \tcmd/compile/internal/amd64\t27.447s\r\nok  \tcmd/compile/internal/base\t0.038s\r\nok  \tcmd/compile/internal/compare\t0.044s\r\nok  \tcmd/compile/internal/dwarfgen\t1.277s\r\nok  \tcmd/compile/internal/importer\t122.148s\r\nok  \tcmd/compile/internal/ir\t0.037s\r\nok  \tcmd/compile/internal/logopt\t1.958s\r\nok  \tcmd/compile/internal/loopvar\t133.111s\r\nok  \tcmd/compile/internal/noder\t0.040s\r\nok  \tcmd/compile/internal/reflectdata\t0.028s [no tests to run]\r\nok  \tcmd/compile/internal/ssa\t2044.246s\r\nok  \tcmd/compile/internal/syntax\t15.338s\r\nok  \tcmd/compile/internal/test\t272.817s\r\nok  \tcmd/compile/internal/typecheck\t1.585s\r\nok  \tcmd/compile/internal/types\t0.024s\r\nok  \tcmd/compile/internal/types2\t47.700s\r\nok  \tcmd/covdata\t4.944s\r\nok  \tcmd/cover\t4.858s\r\nok  \tcmd/dist\t0.052s\r\nok  \tcmd/distpack\t0.039s\r\nok  \tcmd/doc\t1.275s\r\nok  \tcmd/fix\t16.940s\r\nok  \tcmd/go\t2286.949s\r\nok  \tcmd/go/internal/auth\t0.107s\r\nok  \tcmd/go/internal/cache\t156.563s\r\nok  \tcmd/go/internal/envcmd\t0.288s\r\nok  \tcmd/go/internal/fsys\t0.300s\r\nok  \tcmd/go/internal/generate\t0.056s\r\nok  \tcmd/go/internal/get\t0.061s\r\nok  \tcmd/go/internal/gover\t0.041s\r\nok  \tcmd/go/internal/imports\t0.192s\r\nok  \tcmd/go/internal/load\t0.062s\r\nok  \tcmd/go/internal/lockedfile\t3.186s\r\nok  \tcmd/go/internal/lockedfile/internal/filelock\t0.094s\r\nok  \tcmd/go/internal/modconv\t0.113s\r\nok  \tcmd/go/internal/modfetch\t88.177s\r\nok  \tcmd/go/internal/modfetch/codehost\t22.141s\r\nok  \tcmd/go/internal/modfetch/zip_sum_test\t0.062s\r\nok  \tcmd/go/internal/modindex\t0.987s\r\nok  \tcmd/go/internal/modload\t132.943s\r\nok  \tcmd/go/internal/mvs\t0.043s\r\nok  \tcmd/go/internal/par\t0.048s\r\nok  \tcmd/go/internal/str\t0.038s\r\nok  \tcmd/go/internal/test\t0.142s\r\nok  \tcmd/go/internal/toolchain\t0.084s\r\nok  \tcmd/go/internal/vcs\t0.318s\r\nok  \tcmd/go/internal/vcweb\t0.113s\r\nok  \tcmd/go/internal/vcweb/vcstest\t25.225s\r\nok  \tcmd/go/internal/web\t0.055s\r\nok  \tcmd/go/internal/work\t1.410s\r\nok  \tcmd/gofmt\t78.050s\r\nok  \tcmd/internal/archive\t6.460s\r\nok  \tcmd/internal/bootstrap_test\t1321.297s\r\nok  \tcmd/internal/buildid\t2.248s\r\nok  \tcmd/internal/cov\t5.902s\r\nok  \tcmd/internal/dwarf\t0.035s\r\nok  \tcmd/internal/edit\t0.029s\r\nok  \tcmd/internal/goobj\t190.039s\r\nok  \tcmd/internal/moddeps\t415.238s\r\nok  \tcmd/internal/notsha256\t0.045s\r\nok  \tcmd/internal/obj\t4.979s\r\nok  \tcmd/internal/obj/ppc64\t22.048s\r\nok  \tcmd/internal/obj/riscv\t63.925s\r\nok  \tcmd/internal/obj/s390x\t0.024s\r\nok  \tcmd/internal/obj/x86\t18.306s\r\nok  \tcmd/internal/objabi\t0.037s\r\nok  \tcmd/internal/pkgpath\t0.293s\r\nok  \tcmd/internal/pkgpattern\t0.046s\r\nok  \tcmd/internal/quoted\t0.267s\r\nok  \tcmd/internal/src\t0.035s\r\nok  \tcmd/internal/test2json\t1.494s\r\nok  \tcmd/link\t128.266s\r\nok  \tcmd/link/internal/benchmark\t0.051s\r\nok  \tcmd/link/internal/ld\t196.680s\r\nok  \tcmd/link/internal/loader\t0.064s\r\nok  \tcmd/nm\t12.542s\r\nok  \tcmd/objdump\t23.895s\r\nok  \tcmd/pack\t7.383s\r\nok  \tcmd/pprof\t5.996s\r\nok  \tcmd/trace\t0.625s\r\nok  \tcmd/vet\t43.754s\r\nFAIL\r\ngo tool dist: Failed: exit status 1\r\n./all.bash  5245.55s user 10829.54s system 430% cpu 1:02:14.00 total\r\ngopher@Gophers-iMac-Pro src % \r\n```\r\n\r\n</details>\r\n\r\nIssue #59634 for x/tools looks related.\r\n\r\nCC @golang/release, @prattmic.",bash\r\n$ gomote create darwin-amd64-longtest\r\n$ gomote puttar -dir gotip -url='https://go.googlesource.com/go/+archive/ebbff91f5930ba74a4285f8ba6ddfd0df0871d95.tar.gz' $USER-darwin-amd64-longtest-0\r\n$ gomote ssh $USER-darwin-amd64-longtest-0\r\n$ cd /tmp/buildlet/gotip/src\r\n$ export GOROOT_BOOTSTRAP=$HOME/goboot\r\n$ ./all.bash  # GO_TEST_SHORT=0 is implicitly on via this builder's environment\r\n
60817,"go/types, types2: inconsistent behavior with recursive generic types that produces deadlock, invalid recursive, unknown field error<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, since go1.18 had introduced generics.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/neko/Library/Caches/go-build""\r\nGOENV=""/Users/neko/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/neko/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/neko/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.5/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/neko/Playground/go/recursive_generic_type/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""/opt/homebrew/bin/pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/m0/k_38ftb53yg0mqbcrrjypr3m0000gn/T/go-build4074324993=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI defined a recursive generic type like this:\r\n\r\n\r\n\r\nAnd trying to discover the possibility of using generics to make the common options assignment easier and more readable by using chained calls pattern.\r\n\r\n### What did you expect to see?\r\n\r\nEither the compiler or the documentations of generics of Golang addresses the restricted usage of recursive generic types or the compiler behaves consistently. \r\nThe inconsistent behavior may be vary based on whether it's with in tests or just build, whether it's a single source file or multiple source files, whether it's wrapped with a pointer over pointer or not, whether it's imported the outside package or not.\r\n\r\n### What did you see instead?\r\n\r\n#### Issue 1: `fatal error: all goroutines are asleep - deadlock!`\r\n\r\n<details>\r\n<summary>Panic stack</summary>\r\n\r\n```txt\r\nfatal error: all goroutines are asleep - deadlock!\r\n\r\ngoroutine 1 [sync.Mutex.Lock]:\r\nsync.runtime_SemacquireMutex(0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go/src/runtime/sema.go:77 +0x26\r\nsync.(*Mutex).lockSlow(0xc0003b1218)\r\n\t/usr/local/go/src/sync/mutex.go:171 +0x165\r\nsync.(*Mutex).Lock(...)\r\n\t/usr/local/go/src/sync/mutex.go:90\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b11f0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:164 +0x7b\r\ncmd/compile/internal/types2.(*Named).TypeParams(0x0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:310 +0x19\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c4e18, {0xf26150?, 0xc0003b12d0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:223 +0xd95\r\ncmd/compile/internal/types2.(*subster).typ(0x3?, {0xf26178?, 0xc00008d050?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:118 +0x3ae\r\ncmd/compile/internal/types2.(*subster).var_(0xc0000c4bc0?, 0xc0003b1340)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:285 +0x32\r\ncmd/compile/internal/types2.(*subster).varList(0xc33e51?, {0xc00009c530, 0x1, 0x415ed0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:311 +0x90\r\ncmd/compile/internal/types2.(*subster).typ(0x0?, {0xf261f0?, 0xc000347e30?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:111 +0x25c\r\ncmd/compile/internal/types2.(*Checker).subst(0x0, {0x0?, 0x3b2300?, 0xc0?}, {0xf261f0?, 0xc000347e30}, 0xc0003dc270, 0xc0003b1420, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:78 +0x1c5\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:623 +0x505\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:177 +0x185\r\ncmd/compile/internal/types2.(*Named).Underlying(0x1?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:456 +0x19\r\ncmd/compile/internal/types2.(*Named).under(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:484 +0x36\r\ncmd/compile/internal/types2.under({0xf26150?, 0xc0003b1420?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:19 +0x45\r\ncmd/compile/internal/types2.computeInterfaceTypeSet(0x0, {0xc000347c80?, 0x7e8c72af?, 0x7cc7?}, 0xc0003adbd0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeset.go:275 +0x567\r\ncmd/compile/internal/types2.(*TypeParam).iface(0xc0003dc090)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeparam.go:138 +0x1b2\r\ncmd/compile/internal/types2.(*TypeParam).SetConstraint(...)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeparam.go:86\r\ncmd/compile/internal/importer.(*reader).typeParamNames(0xc00009ff80)\r\n\t/usr/local/go/src/cmd/compile/internal/importer/ureader.go:510 +0x213\r\ncmd/compile/internal/importer.(*pkgReader).objIdx.func1.1(0xc000347b90?)\r\n\t/usr/local/go/src/cmd/compile/internal/importer/ureader.go:430 +0x26\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b11f0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:203 +0x122\r\ncmd/compile/internal/types2.(*Named).TypeParams(0xc0003d80e0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:310 +0x19\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c5e48, {0xf26150?, 0xc0003b12d0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:223 +0xd95\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c5bb8?, {0xf26178?, 0xc00008d050?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:118 +0x3ae\r\ncmd/compile/internal/types2.(*subster).var_(0xc0000c5bf0?, 0xc0003b1340)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:285 +0x32\r\ncmd/compile/internal/types2.(*subster).varList(0xc33e51?, {0xc00009c530, 0x1, 0x415ed0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:311 +0x90\r\ncmd/compile/internal/types2.(*subster).typ(0x0?, {0xf261f0?, 0xc000347e30?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:111 +0x25c\r\ncmd/compile/internal/types2.(*Checker).subst(0xc0000e23c0, {0xc000347860?, 0x3b22c0?, 0xc0?}, {0xf261f0?, 0xc000347e30}, 0xc0003dc030, 0xc0003b13b0, 0xc0003b21c0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:78 +0x1c5\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:623 +0x505\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:177 +0x185\r\ncmd/compile/internal/types2.(*Named).Underlying(0xc0003b13b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:456 +0x19\r\ncmd/compile/internal/types2.(*Named).under(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:484 +0x36\r\ncmd/compile/internal/types2.under({0xf26150?, 0xc0003b13b0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:19 +0x45\r\ncmd/compile/internal/types2.coreType({0xf26150?, 0xc0003b13b0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:33 +0x9a\r\ncmd/compile/internal/types2.(*Checker).exprInternal(0xc0000e23c0, 0xc0003d02c0, {0xf28200?, 0xc0000b3300}, {0x0?, 0x0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1403 +0x82f\r\ncmd/compile/internal/types2.(*Checker).rawExpr(0xc0000e23c0, 0xc0003d02c0, {0xf28200?, 0xc0000b3300?}, {0x0?, 0x0?}, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1252 +0x1a5\r\ncmd/compile/internal/types2.(*Checker).multiExpr(0x503b01512f1d42fc?, 0xc0000c6948?, {0xf28200?, 0xc0000b3300?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1817 +0x35\r\ncmd/compile/internal/types2.(*Checker).exprList(0xd4c?, {0xc0000c6be0?, 0xc0003adb30?, 0xc0003adae0?}, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/call.go:273 +0x97\r\ncmd/compile/internal/types2.(*Checker).assignVars(0xc0000e23c0, {0xc0000c6bf0?, 0x1, 0x1}, {0xc0000c6be0?, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/assignments.go:384 +0x7f\r\ncmd/compile/internal/types2.(*Checker).stmt(0xc0000e23c0, 0x0, {0xf27078?, 0xc0003d0100?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:472 +0x7c5\r\ncmd/compile/internal/types2.(*Checker).stmtList(0xf259d0?, 0x0, {0xc00008ceb0?, 0xbecba0?, 0xc0000e23c0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:123 +0x78\r\ncmd/compile/internal/types2.(*Checker).funcBody(0xc0000e23c0, 0xc00009fce0, {0xc0000ab738?, 0x1?}, 0xc0003d0280, 0xc0003d00c0, {0x0, 0x0})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:43 +0x396\r\ncmd/compile/internal/types2.(*Checker).funcDecl.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/types2/decl.go:760 +0x45\r\ncmd/compile/internal/types2.(*Checker).processDelayed(0xc0000e23c0, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:383 +0x1af\r\ncmd/compile/internal/types2.(*Checker).checkFiles(0xc0000e23c0, {0xc00009c4c8, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:328 +0x172\r\ncmd/compile/internal/types2.(*Checker).Files(...)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:300\r\ncmd/compile/internal/types2.(*Config).Check(0xc000099998?, {0x7fff23c24cc8?, 0x7?}, {0xc00009c4c8, 0x1, 0x1}, 0xdc612a?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/api.go:434 +0x70\r\ncmd/compile/internal/noder.checkFiles({0xc00009c4b0, 0x1, 0xdcb342?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/irgen.go:73 +0x465\r\ncmd/compile/internal/noder.writePkgStub({0xc00009c4b0, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:210 +0x46\r\ncmd/compile/internal/noder.unified({0xc00009c4b0?, 0xc000347890?, 0x2?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:75 +0x85\r\ncmd/compile/internal/noder.LoadPackage({0xc0000a4120, 0x1, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/noder.go:77 +0x465\r\ncmd/compile/internal/gc.Main(0xdfc760)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/main.go:196 +0xc53\r\nmain.main()\r\n\t/usr/local/go/src/cmd/compile/main.go:57 +0xdd\r\n```\r\n\r\n</details>\r\n\r\n- Errored:\r\n   - when met the following criteria [[playground](https://go.dev/play/p/kDFyEh2XE_J)]:  \r\n     1. takes place on `go build` or `go test`,\r\n     2. the target code imports a package containing recursive generics type definition.\r\n \r\n- Error **disappeared**:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/VYudODcFIUR)]:\r\n    1. the target code imports a package containing recursive generics type definition,\r\n    2. **recursive generics type has pointer reference for both field and type parameter**.\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n  - when met the following criteria [[playground](https://go.dev/play/p/jSH4qROnSYQ)]:\r\n    1. **the package has the target code lives in contains the recursive generics type defined**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n#### Issue 2: `invalid recursive type x`\r\n\r\n<details>\r\n<summary>Output</summary>\r\n\r\n```txt\r\n./file_2.go:3:6: invalid recursive type T2\r\n\t./file_2.go:3:6: T2 refers to\r\n\t./main.go:8:6: innerT refers to\r\n\t./file_2.go:3:6: T2\r\n```\r\n\r\n</details>\r\n\r\n- errored:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/NyC9qAsuUx_B)]:\r\n    1. takes place on `go build` or `go test`,\r\n    2. define one of the type parameter of type `innerT` as union type recursively,\r\n    4. definitions live in two separated files.\r\n\r\n- error **disappeared**\r\n  - when met the following criteria [[playground](https://go.dev/play/p/xExr4oLsuFk)]:\r\n    1. define one of the type parameter of type `innerT` as union type recursively.\r\n    2. **definitions live in one single file.**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n#### Issue 3: `unknown field x in struct literal of type y`\r\n\r\n- errored:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/wgcIFnkH4tk)]:\r\n    1. this case is not playground reproducible due to it only take place when editing in Visual Studio Code with a hovering popup,\r\n    2. try to access or set the field within the parent of the recursive generics type.\r\n    - which results in:\r\n      1. if try to execute `go build` or `go test` the compiler will complain `fatal error: all goroutines are asleep - deadlock!` error\r\n\r\n- error **disappeared**:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/mU9I5L-qIty)]:\r\n    1. try to access or set the field within the parent of the recursive generics type.\r\n    2. **recursive generics type has pointer reference for both field and type parameter.**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n  - when met the following criteria:\r\n    1. the package has the target code lives in contains the recursive generics type defined.\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n### Issue 4: `x` redeclared in this block\r\n\r\n![image](https://github.com/golang/go/assets/11081491/0d88913e-b28a-4055-acf6-59c98c9c1518)\r\n\r\nIt errored with a single valid `file_1.go`, and the package `channelx` only containing the `SubContainer`, `ContainerA`, `ContainerB` types.\r\n\r\nThis is the most hard to reproduced one by comparing to the other issues I have faced. I only encountered once when debugging the `invalid recursive type` error.\r\n\r\n### Further more\r\n\r\nI have found a issue that containing the same error message just like me in #49439. However, this doesn't explain why it compiles successfully and run expected when the type definitions and the functions that referenced the type are in a same package.\r\n\r\nLater I found #51244 with a ongoing fix at [CL 386718](https://go-review.googlesource.com/c/go/+/386718) that pending on merge (maybe merge before next cycle of Golang release?). However, just like the same issue, this doesn't explain why it compiles successfully and run expected in some cases while the compiler and static analysis behaves inconsistently.\r\n\r\nSo, is this such inconsistent behavior a already known issue? At least it  jammed me for a while to find out what I have done wrong.\r\n\r\nEspecially the compiler would optimized the recursive type definition and generate a unexpected assembly code:\r\n\r\n```\r\n$ go build -gcflags=-S ./minimum_repro/deadlock_issue/with_generics                     \r\n# github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics\r\ngo:cuinfo.producer.github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics SDWARFCUINFO dupok size=0\r\n        0x0000 2d 73 68 61 72 65 64 20 72 65 67 61 62 69        -shared regabi\r\ngo:cuinfo.packagename.github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics SDWARFCUINFO dupok size=0\r\n        0x0000 77 69 74 68 5f 67 65 6e 65 72 69 63 73           with_generics\r\n```\r\n\r\nIs this abnormal? The normal assembly output doesn't look like this.\r\n\r\nImagine a developer is maintaining a package that is widely used by other users, and the developer never test the code with a test package suffixed with `_test`, and developer initially would have no ideas to understand how and why the compiler may complain and throw a panic with `fatal error: all goroutines are asleep - deadlock!` message when users imported the package with the version contained some type definitions the same as the reproduction codes in playground bellow.\r\n\r\nBy the way, run `go build` and `go test` with `GOEXPERIMENT=nounified` env flag fixed the following errors I encountered bellow (suggested in #54535).",NeedsFix|early-in-cycle,findleyr,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, since go1.18 had introduced generics.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/neko/Library/Caches/go-build""\r\nGOENV=""/Users/neko/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/neko/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/neko/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.5/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/neko/Playground/go/recursive_generic_type/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""/opt/homebrew/bin/pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/m0/k_38ftb53yg0mqbcrrjypr3m0000gn/T/go-build4074324993=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI defined a recursive generic type like this:\r\n\r\n```golang\r\ntype CommonOption[T any, C TypeA[T] | TypeB[T]] struct {\r\n\tvalue     T\r\n\tcontainer *C\r\n}\r\n\r\nfunc (o *CommonOption[T, C]) WithValue(v T) *C {\r\n\to.value = v\r\n\r\n\treturn o.container\r\n}\r\n\r\ntype TypeA[T any] struct {\r\n\t*CommonOption[T, TypeA[T]]\r\n\r\n\tsubFieldA string\r\n}\r\n\r\ntype TypeB[T any] struct {\r\n\t*CommonOption[T, TypeB[T]]\r\n}\r\n```\r\n\r\nAnd trying to discover the possibility of using generics to make the common options assignment easier and more readable by using chained calls pattern.\r\n\r\n### What did you expect to see?\r\n\r\nEither the compiler or the documentations of generics of Golang addresses the restricted usage of recursive generic types or the compiler behaves consistently. \r\nThe inconsistent behavior may be vary based on whether it's with in tests or just build, whether it's a single source file or multiple source files, whether it's wrapped with a pointer over pointer or not, whether it's imported the outside package or not.\r\n\r\n### What did you see instead?\r\n\r\n#### Issue 1: `fatal error: all goroutines are asleep - deadlock!`\r\n\r\n<details>\r\n<summary>Panic stack</summary>\r\n\r\n```txt\r\nfatal error: all goroutines are asleep - deadlock!\r\n\r\ngoroutine 1 [sync.Mutex.Lock]:\r\nsync.runtime_SemacquireMutex(0x0?, 0x0?, 0x0?)\r\n\t/usr/local/go/src/runtime/sema.go:77 +0x26\r\nsync.(*Mutex).lockSlow(0xc0003b1218)\r\n\t/usr/local/go/src/sync/mutex.go:171 +0x165\r\nsync.(*Mutex).Lock(...)\r\n\t/usr/local/go/src/sync/mutex.go:90\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b11f0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:164 +0x7b\r\ncmd/compile/internal/types2.(*Named).TypeParams(0x0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:310 +0x19\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c4e18, {0xf26150?, 0xc0003b12d0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:223 +0xd95\r\ncmd/compile/internal/types2.(*subster).typ(0x3?, {0xf26178?, 0xc00008d050?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:118 +0x3ae\r\ncmd/compile/internal/types2.(*subster).var_(0xc0000c4bc0?, 0xc0003b1340)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:285 +0x32\r\ncmd/compile/internal/types2.(*subster).varList(0xc33e51?, {0xc00009c530, 0x1, 0x415ed0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:311 +0x90\r\ncmd/compile/internal/types2.(*subster).typ(0x0?, {0xf261f0?, 0xc000347e30?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:111 +0x25c\r\ncmd/compile/internal/types2.(*Checker).subst(0x0, {0x0?, 0x3b2300?, 0xc0?}, {0xf261f0?, 0xc000347e30}, 0xc0003dc270, 0xc0003b1420, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:78 +0x1c5\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:623 +0x505\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:177 +0x185\r\ncmd/compile/internal/types2.(*Named).Underlying(0x1?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:456 +0x19\r\ncmd/compile/internal/types2.(*Named).under(0xc0003b1420)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:484 +0x36\r\ncmd/compile/internal/types2.under({0xf26150?, 0xc0003b1420?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:19 +0x45\r\ncmd/compile/internal/types2.computeInterfaceTypeSet(0x0, {0xc000347c80?, 0x7e8c72af?, 0x7cc7?}, 0xc0003adbd0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeset.go:275 +0x567\r\ncmd/compile/internal/types2.(*TypeParam).iface(0xc0003dc090)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeparam.go:138 +0x1b2\r\ncmd/compile/internal/types2.(*TypeParam).SetConstraint(...)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/typeparam.go:86\r\ncmd/compile/internal/importer.(*reader).typeParamNames(0xc00009ff80)\r\n\t/usr/local/go/src/cmd/compile/internal/importer/ureader.go:510 +0x213\r\ncmd/compile/internal/importer.(*pkgReader).objIdx.func1.1(0xc000347b90?)\r\n\t/usr/local/go/src/cmd/compile/internal/importer/ureader.go:430 +0x26\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b11f0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:203 +0x122\r\ncmd/compile/internal/types2.(*Named).TypeParams(0xc0003d80e0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:310 +0x19\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c5e48, {0xf26150?, 0xc0003b12d0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:223 +0xd95\r\ncmd/compile/internal/types2.(*subster).typ(0xc0000c5bb8?, {0xf26178?, 0xc00008d050?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:118 +0x3ae\r\ncmd/compile/internal/types2.(*subster).var_(0xc0000c5bf0?, 0xc0003b1340)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:285 +0x32\r\ncmd/compile/internal/types2.(*subster).varList(0xc33e51?, {0xc00009c530, 0x1, 0x415ed0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:311 +0x90\r\ncmd/compile/internal/types2.(*subster).typ(0x0?, {0xf261f0?, 0xc000347e30?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:111 +0x25c\r\ncmd/compile/internal/types2.(*Checker).subst(0xc0000e23c0, {0xc000347860?, 0x3b22c0?, 0xc0?}, {0xf261f0?, 0xc000347e30}, 0xc0003dc030, 0xc0003b13b0, 0xc0003b21c0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/subst.go:78 +0x1c5\r\ncmd/compile/internal/types2.(*Named).expandUnderlying(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:623 +0x505\r\ncmd/compile/internal/types2.(*Named).resolve(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:177 +0x185\r\ncmd/compile/internal/types2.(*Named).Underlying(0xc0003b13b0?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:456 +0x19\r\ncmd/compile/internal/types2.(*Named).under(0xc0003b13b0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/named.go:484 +0x36\r\ncmd/compile/internal/types2.under({0xf26150?, 0xc0003b13b0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:19 +0x45\r\ncmd/compile/internal/types2.coreType({0xf26150?, 0xc0003b13b0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/type.go:33 +0x9a\r\ncmd/compile/internal/types2.(*Checker).exprInternal(0xc0000e23c0, 0xc0003d02c0, {0xf28200?, 0xc0000b3300}, {0x0?, 0x0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1403 +0x82f\r\ncmd/compile/internal/types2.(*Checker).rawExpr(0xc0000e23c0, 0xc0003d02c0, {0xf28200?, 0xc0000b3300?}, {0x0?, 0x0?}, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1252 +0x1a5\r\ncmd/compile/internal/types2.(*Checker).multiExpr(0x503b01512f1d42fc?, 0xc0000c6948?, {0xf28200?, 0xc0000b3300?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/expr.go:1817 +0x35\r\ncmd/compile/internal/types2.(*Checker).exprList(0xd4c?, {0xc0000c6be0?, 0xc0003adb30?, 0xc0003adae0?}, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/call.go:273 +0x97\r\ncmd/compile/internal/types2.(*Checker).assignVars(0xc0000e23c0, {0xc0000c6bf0?, 0x1, 0x1}, {0xc0000c6be0?, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/assignments.go:384 +0x7f\r\ncmd/compile/internal/types2.(*Checker).stmt(0xc0000e23c0, 0x0, {0xf27078?, 0xc0003d0100?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:472 +0x7c5\r\ncmd/compile/internal/types2.(*Checker).stmtList(0xf259d0?, 0x0, {0xc00008ceb0?, 0xbecba0?, 0xc0000e23c0?})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:123 +0x78\r\ncmd/compile/internal/types2.(*Checker).funcBody(0xc0000e23c0, 0xc00009fce0, {0xc0000ab738?, 0x1?}, 0xc0003d0280, 0xc0003d00c0, {0x0, 0x0})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/stmt.go:43 +0x396\r\ncmd/compile/internal/types2.(*Checker).funcDecl.func1()\r\n\t/usr/local/go/src/cmd/compile/internal/types2/decl.go:760 +0x45\r\ncmd/compile/internal/types2.(*Checker).processDelayed(0xc0000e23c0, 0x0)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:383 +0x1af\r\ncmd/compile/internal/types2.(*Checker).checkFiles(0xc0000e23c0, {0xc00009c4c8, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:328 +0x172\r\ncmd/compile/internal/types2.(*Checker).Files(...)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/check.go:300\r\ncmd/compile/internal/types2.(*Config).Check(0xc000099998?, {0x7fff23c24cc8?, 0x7?}, {0xc00009c4c8, 0x1, 0x1}, 0xdc612a?)\r\n\t/usr/local/go/src/cmd/compile/internal/types2/api.go:434 +0x70\r\ncmd/compile/internal/noder.checkFiles({0xc00009c4b0, 0x1, 0xdcb342?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/irgen.go:73 +0x465\r\ncmd/compile/internal/noder.writePkgStub({0xc00009c4b0, 0x1, 0x1})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:210 +0x46\r\ncmd/compile/internal/noder.unified({0xc00009c4b0?, 0xc000347890?, 0x2?})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/unified.go:75 +0x85\r\ncmd/compile/internal/noder.LoadPackage({0xc0000a4120, 0x1, 0x2})\r\n\t/usr/local/go/src/cmd/compile/internal/noder/noder.go:77 +0x465\r\ncmd/compile/internal/gc.Main(0xdfc760)\r\n\t/usr/local/go/src/cmd/compile/internal/gc/main.go:196 +0xc53\r\nmain.main()\r\n\t/usr/local/go/src/cmd/compile/main.go:57 +0xdd\r\n```\r\n\r\n</details>\r\n\r\n- Errored:\r\n   - when met the following criteria [[playground](https://go.dev/play/p/kDFyEh2XE_J)]:  \r\n     1. takes place on `go build` or `go test`,\r\n     2. the target code imports a package containing recursive generics type definition.\r\n \r\n- Error **disappeared**:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/VYudODcFIUR)]:\r\n    1. the target code imports a package containing recursive generics type definition,\r\n    2. **recursive generics type has pointer reference for both field and type parameter**.\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n  - when met the following criteria [[playground](https://go.dev/play/p/jSH4qROnSYQ)]:\r\n    1. **the package has the target code lives in contains the recursive generics type defined**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n#### Issue 2: `invalid recursive type x`\r\n\r\n<details>\r\n<summary>Output</summary>\r\n\r\n```txt\r\n./file_2.go:3:6: invalid recursive type T2\r\n\t./file_2.go:3:6: T2 refers to\r\n\t./main.go:8:6: innerT refers to\r\n\t./file_2.go:3:6: T2\r\n```\r\n\r\n</details>\r\n\r\n- errored:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/NyC9qAsuUx_B)]:\r\n    1. takes place on `go build` or `go test`,\r\n    2. define one of the type parameter of type `innerT` as union type recursively,\r\n    4. definitions live in two separated files.\r\n\r\n- error **disappeared**\r\n  - when met the following criteria [[playground](https://go.dev/play/p/xExr4oLsuFk)]:\r\n    1. define one of the type parameter of type `innerT` as union type recursively.\r\n    2. **definitions live in one single file.**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n#### Issue 3: `unknown field x in struct literal of type y`\r\n\r\n- errored:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/wgcIFnkH4tk)]:\r\n    1. this case is not playground reproducible due to it only take place when editing in Visual Studio Code with a hovering popup,\r\n    2. try to access or set the field within the parent of the recursive generics type.\r\n    - which results in:\r\n      1. if try to execute `go build` or `go test` the compiler will complain `fatal error: all goroutines are asleep - deadlock!` error\r\n\r\n- error **disappeared**:\r\n  - when met the following criteria [[playground](https://go.dev/play/p/mU9I5L-qIty)]:\r\n    1. try to access or set the field within the parent of the recursive generics type.\r\n    2. **recursive generics type has pointer reference for both field and type parameter.**\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n  - when met the following criteria:\r\n    1. the package has the target code lives in contains the recursive generics type defined.\r\n    - which results in:\r\n      1. `fmt.Printf(""%T"")` still works as expected,\r\n      2. the recursive type definition might be optimized by compiler with abnormal assembly code when inspect the assembly by using `go build -gcflags=-S`.\r\n\r\n### Issue 4: `x` redeclared in this block\r\n\r\n![image](https://github.com/golang/go/assets/11081491/0d88913e-b28a-4055-acf6-59c98c9c1518)\r\n\r\nIt errored with a single valid `file_1.go`, and the package `channelx` only containing the `SubContainer`, `ContainerA`, `ContainerB` types.\r\n\r\nThis is the most hard to reproduced one by comparing to the other issues I have faced. I only encountered once when debugging the `invalid recursive type` error.\r\n\r\n### Further more\r\n\r\nI have found a issue that containing the same error message just like me in #49439. However, this doesn't explain why it compiles successfully and run expected when the type definitions and the functions that referenced the type are in a same package.\r\n\r\nLater I found #51244 with a ongoing fix at [CL 386718](https://go-review.googlesource.com/c/go/+/386718) that pending on merge (maybe merge before next cycle of Golang release?). However, just like the same issue, this doesn't explain why it compiles successfully and run expected in some cases while the compiler and static analysis behaves inconsistently.\r\n\r\nSo, is this such inconsistent behavior a already known issue? At least it  jammed me for a while to find out what I have done wrong.\r\n\r\nEspecially the compiler would optimized the recursive type definition and generate a unexpected assembly code:\r\n\r\n```\r\n$ go build -gcflags=-S ./minimum_repro/deadlock_issue/with_generics                     \r\n# github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics\r\ngo:cuinfo.producer.github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics SDWARFCUINFO dupok size=0\r\n        0x0000 2d 73 68 61 72 65 64 20 72 65 67 61 62 69        -shared regabi\r\ngo:cuinfo.packagename.github.com/nekomeowww/recursive_generic_type_issue_reproduction/minimum_repro/deadlock_issue/with_generics SDWARFCUINFO dupok size=0\r\n        0x0000 77 69 74 68 5f 67 65 6e 65 72 69 63 73           with_generics\r\n```\r\n\r\nIs this abnormal? The normal assembly output doesn't look like this.\r\n\r\nImagine a developer is maintaining a package that is widely used by other users, and the developer never test the code with a test package suffixed with `_test`, and developer initially would have no ideas to understand how and why the compiler may complain and throw a panic with `fatal error: all goroutines are asleep - deadlock!` message when users imported the package with the version contained some type definitions the same as the reproduction codes in playground bellow.\r\n\r\nBy the way, run `go build` and `go test` with `GOEXPERIMENT=nounified` env flag fixed the following errors I encountered bellow (suggested in #54535).","golang\r\ntype CommonOption[T any, C TypeA[T] | TypeB[T]] struct {\r\n\tvalue     T\r\n\tcontainer *C\r\n}\r\n\r\nfunc (o *CommonOption[T, C]) WithValue(v T) *C {\r\n\to.value = v\r\n\r\n\treturn o.container\r\n}\r\n\r\ntype TypeA[T any] struct {\r\n\t*CommonOption[T, TypeA[T]]\r\n\r\n\tsubFieldA string\r\n}\r\n\r\ntype TypeB[T any] struct {\r\n\t*CommonOption[T, TypeB[T]]\r\n}\r\n"
60812,"cmd/compile: confusing error message when using an indexing expression as an array size<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nsyntax error: array length must be a constant\r\n\r\nor\r\n\r\nsyntax error: type constraint is incomplete\r\n\r\nor\r\n\r\nsyntax error: either type constraint is incomplete or array length is not a constant\r\n\r\n### What did you see instead?\r\n\r\nsyntax error: type parameters must be named\r\n",generics|compiler/runtime|FixPending,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\npackage main\r\n\r\nconst S = ""Go""\r\n\r\ntype T [S[0]]int // syntax error: type parameters must be named\r\n\r\nfunc main() {}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nsyntax error: array length must be a constant\r\n\r\nor\r\n\r\nsyntax error: type constraint is incomplete\r\n\r\nor\r\n\r\nsyntax error: either type constraint is incomplete or array length is not a constant\r\n\r\n### What did you see instead?\r\n\r\nsyntax error: type parameters must be named\r\n","Go\r\npackage main\r\n\r\nconst S = ""Go""\r\n\r\ntype T [S[0]]int // syntax error: type parameters must be named\r\n\r\nfunc main() {}\r\n"
60747,"go/types, types2: better error message for cases of reverse type inferenceThis is a reminder issue to follow up on feedback in  https://go.dev/cl/501938 (#60688).\r\n\r\n\r\n\r\nFeedback (@findleyr):\r\n\r\n> I think a better error would be ""type func(string) []int of variable v9 does not match inferred type func(string) []string for f5""\r\n\r\n",NeedsFix|TypeInference|BadErrorMessage,griesemer,"This is a reminder issue to follow up on feedback in  https://go.dev/cl/501938 (#60688).\r\n\r\n```Go\r\nv9 func(string) []int = f5 // ERROR ""type func(string) []int of variable in assignment does not match inferred type func(string) []string for func(P) []P""\r\n```\r\n\r\nFeedback (@findleyr):\r\n\r\n> I think a better error would be ""type func(string) []int of variable v9 does not match inferred type func(string) []string for f5""\r\n\r\n","Go\r\nv9 func(string) []int = f5 // ERROR ""type func(string) []int of variable in assignment does not match inferred type func(string) []string for func(P) []P""\r\n"
60717,"crypto/elliptic: P256 ScalarBaseMult with order-34 yields point at infinity### What version of Go are you using (`go version`)?\r\n\r\nLatest Go development branch\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo. Tested latest using latest binary releases of Go 1.19 and 1.20; not affected, hence I'm creating a public bug report for this.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nLinux x64\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nhttps://go.dev/play/p/aTrVUdp0SkH?v=gotip\r\n\r\n### What did you expect to see?\r\n\r\n`21538630073048560509735576007149539115526969787353231629118474871518563178910 , 60188232952792585766986390787318113745120282298037326219660563054891997721808`\r\n\r\n### What did you see instead?\r\n\r\n`0, 0`\r\n",NeedsInvestigation,FiloSottile,"### What version of Go are you using (`go version`)?\r\n\r\nLatest Go development branch\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo. Tested latest using latest binary releases of Go 1.19 and 1.20; not affected, hence I'm creating a public bug report for this.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nLinux x64\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/elliptic""\r\n\t""fmt""\r\n\t""math/big""\r\n)\r\n\r\nfunc main() {\r\n\tcurve := elliptic.P256()\r\n\tpriv, _ := new(big.Int).SetString(""115792089210356248762697446949407573529996955224135760342422259061068512044335"", 10)\r\n\tx, y := curve.ScalarBaseMult(priv.Bytes())\r\n\tfmt.Println(x, "","", y)\r\n}\r\n```\r\n\r\nhttps://go.dev/play/p/aTrVUdp0SkH?v=gotip\r\n\r\n### What did you expect to see?\r\n\r\n`21538630073048560509735576007149539115526969787353231629118474871518563178910 , 60188232952792585766986390787318113745120282298037326219660563054891997721808`\r\n\r\n### What did you see instead?\r\n\r\n`0, 0`\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/elliptic""\r\n\t""fmt""\r\n\t""math/big""\r\n)\r\n\r\nfunc main() {\r\n\tcurve := elliptic.P256()\r\n\tpriv, _ := new(big.Int).SetString(""115792089210356248762697446949407573529996955224135760342422259061068512044335"", 10)\r\n\tx, y := curve.ScalarBaseMult(priv.Bytes())\r\n\tfmt.Println(x, "","", y)\r\n}\r\n"
60688,"go/types, types2: assignment instead of inference error for invalid generic function assignment\r\nproduces the error ([playground](https://go.dev/play/p/s1nDmPJuRdT?v=gotip)):\r\n```\r\ncannot use g (value of type func(int, string)) as func(int, String) value in variable declaration\r\n```\r\nbut `String` and `string` are not identical and thus inference should have failed with a different error:\r\n```\r\ntype func[P any](P, string) of g does not match func(int, String)\r\n```\r\nwhich is what is reported when `g` is passed to a function with a `func(int, String)` argument ([playground](https://go.dev/play/p/ggQ2eK1Af4L?v=gotip)).\r\n\r\nMarking for 1.21 because the fix should not be too hard, but ok to defer to 1.22.\r\n\r\n@findleyr for visibilty\r\n",NeedsFix,griesemer,"```Go\r\ntype String string\r\n\r\nfunc g[P any](P, string) {}\r\n\r\nvar f func(int, String) = g\r\n```\r\nproduces the error ([playground](https://go.dev/play/p/s1nDmPJuRdT?v=gotip)):\r\n```\r\ncannot use g (value of type func(int, string)) as func(int, String) value in variable declaration\r\n```\r\nbut `String` and `string` are not identical and thus inference should have failed with a different error:\r\n```\r\ntype func[P any](P, string) of g does not match func(int, String)\r\n```\r\nwhich is what is reported when `g` is passed to a function with a `func(int, String)` argument ([playground](https://go.dev/play/p/ggQ2eK1Af4L?v=gotip)).\r\n\r\nMarking for 1.21 because the fix should not be too hard, but ok to defer to 1.22.\r\n\r\n@findleyr for visibilty\r\n","Go\r\ntype String string\r\n\r\nfunc g[P any](P, string) {}\r\n\r\nvar f func(int, String) = g\r\n"
60686,"cmd/go: ""loadPackageData called with empty package path"" build panic<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\ngo build\r\n\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\ngo 1.19\r\n\r\n```prog.go:3:8: invalid import path: """"```\r\n\r\n\r\n### What did you see instead?\r\n```\r\npanic: loadPackageData called with empty package path\r\n\r\ngoroutine 29 [running]:\r\ncmd/go/internal/load.loadPackageData({0xb45d70, 0xc00019a000}, {0xc000028e0e, 0x0}, {0xc00019a938, 0x4}, {0xc00033bf20, 0x1f}, {0xc000032064, 0x1f}, ...)\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:815 +0x65d\r\ncmd/go/internal/load.(*preload).preloadImports.func1({0xc000028e0e?, 0x0?})\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:1076 +0xa5\r\ncreated by cmd/go/internal/load.(*preload).preloadImports\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:1075 +0x2aa\r\n ```\r\n\r\n\r\n",NeedsFix|GoCommand,matloob,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.5 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\ngo build\r\n\r\n```go\r\npackage main\r\n\r\nimport """"\r\n\r\nfunc main() {}\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\ngo 1.19\r\n\r\n```prog.go:3:8: invalid import path: """"```\r\n\r\n\r\n### What did you see instead?\r\n```\r\npanic: loadPackageData called with empty package path\r\n\r\ngoroutine 29 [running]:\r\ncmd/go/internal/load.loadPackageData({0xb45d70, 0xc00019a000}, {0xc000028e0e, 0x0}, {0xc00019a938, 0x4}, {0xc00033bf20, 0x1f}, {0xc000032064, 0x1f}, ...)\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:815 +0x65d\r\ncmd/go/internal/load.(*preload).preloadImports.func1({0xc000028e0e?, 0x0?})\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:1076 +0xa5\r\ncreated by cmd/go/internal/load.(*preload).preloadImports\r\n        /home/linuxbrew/.linuxbrew/Cellar/go/1.20.5/libexec/src/cmd/go/internal/load/pkg.go:1075 +0x2aa\r\n ```\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport """"\r\n\r\nfunc main() {}\r\n"
60667,"cmd/go: go list fails with submodules which have test-only dependencies<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.20.5\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes, I believe it is related to https://github.com/golang/go/issues/60001\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/smira/.cache/go-build""\r\nGOENV=""/home/smira/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/smira/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/smira/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/smira/sdk/go1.20.5""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/smira/sdk/go1.20.5/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/smira/Documents/go-test-package-failure/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build337276505=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI hit this on a big repository, but I reduced this down to https://github.com/smira/go-test-package-failure.\r\n\r\nThere's a submodule which has an import of a package from `_test.go` file.\r\n\r\n### What did you expect to see?\r\n\r\nSwitching to older version of Go ""fixes"" it:\r\n\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nIn the checkout, the following fails:\r\n\r\n",NeedsFix|GoCommand|release-blocker|modules,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.20.5\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes, I believe it is related to https://github.com/golang/go/issues/60001\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/smira/.cache/go-build""\r\nGOENV=""/home/smira/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/smira/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/smira/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/smira/sdk/go1.20.5""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/smira/sdk/go1.20.5/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/smira/Documents/go-test-package-failure/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build337276505=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI hit this on a big repository, but I reduced this down to https://github.com/smira/go-test-package-failure.\r\n\r\nThere's a submodule which has an import of a package from `_test.go` file.\r\n\r\n### What did you expect to see?\r\n\r\nSwitching to older version of Go ""fixes"" it:\r\n\r\n```shell\r\n$ ~/go/bin/go1.20.3 list -u -m -json all\r\n{\r\n\t""Path"": ""github.com/smira/go-test-package-failure"",\r\n\t""Main"": true,\r\n\t""Dir"": ""/home/smira/Documents/go-test-package-failure"",\r\n\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/go.mod"",\r\n\t""GoVersion"": ""1.20""\r\n}\r\n{\r\n\t""Path"": ""github.com/santhosh-tekuri/jsonschema/v5"",\r\n\t""Version"": ""v5.3.0"",\r\n\t""Time"": ""2023-04-04T18:54:33Z"",\r\n\t""Indirect"": true,\r\n\t""Dir"": ""/home/smira/go/pkg/mod/github.com/santhosh-tekuri/jsonschema/v5@v5.3.0""\r\n}\r\n{\r\n\t""Path"": ""github.com/smira/go-test-failure/subpackage"",\r\n\t""Version"": ""v0.0.0-00010101000000-000000000000"",\r\n\t""Replace"": {\r\n\t\t""Path"": ""./subpackage"",\r\n\t\t""Dir"": ""/home/smira/Documents/go-test-package-failure/subpackage"",\r\n\t\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/subpackage/go.mod"",\r\n\t\t""GoVersion"": ""1.20""\r\n\t},\r\n\t""Dir"": ""/home/smira/Documents/go-test-package-failure/subpackage"",\r\n\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/subpackage/go.mod"",\r\n\t""GoVersion"": ""1.20""\r\n}\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nIn the checkout, the following fails:\r\n\r\n```shell\r\n$ ~/go/bin/go1.20.5 list -u -m -json all\r\ngo: updates to go.sum needed, disabled by -mod=readonly\r\n```","shell\r\n$ ~/go/bin/go1.20.3 list -u -m -json all\r\n{\r\n\t""Path"": ""github.com/smira/go-test-package-failure"",\r\n\t""Main"": true,\r\n\t""Dir"": ""/home/smira/Documents/go-test-package-failure"",\r\n\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/go.mod"",\r\n\t""GoVersion"": ""1.20""\r\n}\r\n{\r\n\t""Path"": ""github.com/santhosh-tekuri/jsonschema/v5"",\r\n\t""Version"": ""v5.3.0"",\r\n\t""Time"": ""2023-04-04T18:54:33Z"",\r\n\t""Indirect"": true,\r\n\t""Dir"": ""/home/smira/go/pkg/mod/github.com/santhosh-tekuri/jsonschema/v5@v5.3.0""\r\n}\r\n{\r\n\t""Path"": ""github.com/smira/go-test-failure/subpackage"",\r\n\t""Version"": ""v0.0.0-00010101000000-000000000000"",\r\n\t""Replace"": {\r\n\t\t""Path"": ""./subpackage"",\r\n\t\t""Dir"": ""/home/smira/Documents/go-test-package-failure/subpackage"",\r\n\t\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/subpackage/go.mod"",\r\n\t\t""GoVersion"": ""1.20""\r\n\t},\r\n\t""Dir"": ""/home/smira/Documents/go-test-package-failure/subpackage"",\r\n\t""GoMod"": ""/home/smira/Documents/go-test-package-failure/subpackage/go.mod"",\r\n\t""GoVersion"": ""1.20""\r\n}\r\n"
60649,"go/types, types2: trace(1e-) causes crash Reproducer:\r\n\r\nthen check this code via `go test -run Manual -- filename`.\r\n\r\nThe `1e-` leads to an invalid operand and the subsequent assertion fails.\r\n\r\nRelated to #60605.",NeedsFix,griesemer,Reproducer:\r\n```Go\r\npackage p\r\nconst _ float64 = trace(1e-)\r\n```\r\nthen check this code via `go test -run Manual -- filename`.\r\n\r\nThe `1e-` leads to an invalid operand and the subsequent assertion fails.\r\n\r\nRelated to #60605.,Go\r\npackage p\r\nconst _ float64 = trace(1e-)\r\n
60628,"x/tools/gopls: panic in methodsets.NewIndexgopls version: v0.12.2 (go1.20.4)\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.38.0\r\ngo version: 1.20.4\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Tue, 06 Jun 2023 01:34:11 GMT\r\nrestart history:\r\nTue, 06 Jun 2023 01:29:42 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:36 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:44 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:47 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:31:01 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:31:34 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:02 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:14 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:44 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:33:04 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:34:09 GMT: manual (enabled: true)\r\n\r\nATTENTION: PLEASE PROVIDE THE DETAILS REQUESTED BELOW.\r\n\r\nDescribe what you observed.\r\n\r\nThe following code immediately caused a crash.\r\n\r\n\r\n\r\n<pre>panic: interface conversion: types.Object is nil, not *types.Func\r\n\r\ngoroutine 181 [running]:\r\ngolang.org/x/tools/internal/typeparams.OriginMethod(0x14000758660)\r\n\t  common.go:108  0x14c\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.(*indexBuilder).build.func2(0x140000491c0, 0x14000758660)\r\n\t  methodsets.go:248  0x1c4\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.methodSetInfo({0x10383ecf0, 0x1400015cc40}, 0x14000775718)\r\n\t  methodsets.go:309  0x1f0\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.(*indexBuilder).build(0x14000775a68, 0x14000048a00, 0x1400009c6e0)\r\n\t  methodsets.go:261  0x4f0\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.NewIndex(...)\r\n\t  methodsets.go:98\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x1038427c8, 0x1400074bf50}, 0x102c206f0%3F, {{0x14000122dc8, 0x18}, {0x14000122dc8, 0x18}, {0x140002825d0, 0x5}, {0x14000226510, ...}, ...})\r\n\t  check.go:1269  0x1b4\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).checkPackage(0x1400042fec8%3F, {0x1038427c8, 0x1400074b380}, 0x14000744360)\r\n\t  check.go:634  0x190\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).handleSyntaxPackage(0x1400009c690, {0x1038427c8, 0x1400074b380}, 0x0%3F, {0x14000122dc8, 0x18})\r\n\t  check.go:518  0x3d0\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).forEachPackageInternal.func2()\r\n\t  check.go:401  0x34\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t  errgroup.go:75  0x5c\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go\r\n\t  errgroup.go:72  0xa0\r\n[Error - 9:34:09 PM] </pre>\r\n\r\nOPTIONAL: If you would like to share more information, you can attach your complete gopls logs.\r\n\r\nNOTE: THESE MAY CONTAIN SENSITIVE INFORMATION ABOUT YOUR CODEBASE.\r\nDO NOT SHARE LOGS IF YOU ARE WORKING IN A PRIVATE REPOSITORY.\r\n\r\n<OPTIONAL: ATTACH LOGS HERE>\r\n",NeedsInvestigation|gopls|Tools,adonovan,"gopls version: v0.12.2 (go1.20.4)\r\ngopls flags: \r\nupdate flags: proxy\r\nextension version: 0.38.0\r\ngo version: 1.20.4\r\nenvironment: Visual Studio Code darwin\r\ninitialization error: undefined\r\nissue timestamp: Tue, 06 Jun 2023 01:34:11 GMT\r\nrestart history:\r\nTue, 06 Jun 2023 01:29:42 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:36 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:44 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:30:47 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:31:01 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:31:34 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:02 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:14 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:32:44 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:33:04 GMT: manual (enabled: true)\r\nTue, 06 Jun 2023 01:34:09 GMT: manual (enabled: true)\r\n\r\nATTENTION: PLEASE PROVIDE THE DETAILS REQUESTED BELOW.\r\n\r\nDescribe what you observed.\r\n\r\nThe following code immediately caused a crash.\r\n\r\n```go\r\npackage crash\r\n\r\ntype a[K any] *[]K\r\n\r\nfunc (*a[K]) a() {}\r\n```\r\n\r\n<pre>panic: interface conversion: types.Object is nil, not *types.Func\r\n\r\ngoroutine 181 [running]:\r\ngolang.org/x/tools/internal/typeparams.OriginMethod(0x14000758660)\r\n\t  common.go:108  0x14c\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.(*indexBuilder).build.func2(0x140000491c0, 0x14000758660)\r\n\t  methodsets.go:248  0x1c4\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.methodSetInfo({0x10383ecf0, 0x1400015cc40}, 0x14000775718)\r\n\t  methodsets.go:309  0x1f0\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.(*indexBuilder).build(0x14000775a68, 0x14000048a00, 0x1400009c6e0)\r\n\t  methodsets.go:261  0x4f0\r\ngolang.org/x/tools/gopls/internal/lsp/source/methodsets.NewIndex(...)\r\n\t  methodsets.go:98\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x1038427c8, 0x1400074bf50}, 0x102c206f0%3F, {{0x14000122dc8, 0x18}, {0x14000122dc8, 0x18}, {0x140002825d0, 0x5}, {0x14000226510, ...}, ...})\r\n\t  check.go:1269  0x1b4\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).checkPackage(0x1400042fec8%3F, {0x1038427c8, 0x1400074b380}, 0x14000744360)\r\n\t  check.go:634  0x190\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*typeCheckBatch).handleSyntaxPackage(0x1400009c690, {0x1038427c8, 0x1400074b380}, 0x0%3F, {0x14000122dc8, 0x18})\r\n\t  check.go:518  0x3d0\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).forEachPackageInternal.func2()\r\n\t  check.go:401  0x34\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t  errgroup.go:75  0x5c\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go\r\n\t  errgroup.go:72  0xa0\r\n[Error - 9:34:09 PM] </pre>\r\n\r\nOPTIONAL: If you would like to share more information, you can attach your complete gopls logs.\r\n\r\nNOTE: THESE MAY CONTAIN SENSITIVE INFORMATION ABOUT YOUR CODEBASE.\r\nDO NOT SHARE LOGS IF YOU ARE WORKING IN A PRIVATE REPOSITORY.\r\n\r\n<OPTIONAL: ATTACH LOGS HERE>\r\n",go\r\npackage crash\r\n\r\ntype a[K any] *[]K\r\n\r\nfunc (*a[K]) a() {}\r\n
60582,"cmd/compile: min/max builtins trigger mayCall ICETested with the most recent Go tip version:\r\n\r\n\r\n\r\n(https://go.dev/play/p/Td1MrT9ErxG?v=gotip)\r\n\r\nNotably, simplifying further in the following ways causes it to stop reproducing:\r\n\r\n- using `println` instead of `fmt.Println`\r\n- assigning result of `min` to `_` instead of `fmt.Println`\r\n- assigning result of `min` to another variable and `fmt.Println`ing that\r\n- using constants instead of variables for `a`, `b`\r\n\r\n(Rebuilding `cmd/compile` without `GOROOT/src/cmd/compile/default.pgo` doesn't stop it from reproducing.)\r\n\r\nCC @golang/compiler.",NeedsFix|release-blocker|compiler/runtime,cuonglm,"Tested with the most recent Go tip version:\r\n\r\n```bash\r\n$ go version\r\ngo version devel go1.21-6260049fa2 Fri Jun 2 19:54:05 2023 +0000 darwin/arm64\r\n\r\n$ cd $(mktemp -d) && go mod init example && cat <<EOF > main.go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\ta, b := 5, 7\r\n\tfmt.Println(min(a, b))\r\n}\r\nEOF\r\n\r\n$ go build\r\n# example\r\n./main.go:7:17: internal compiler error: mayCall \r\n.   MIN int tc(1) # main.go:7:17\r\n.   MIN-Args\r\n.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:6:2\r\n.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:6:5\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/Users/gopher/gotip/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x1926c0?, 0x140?}, {0x102c2a06b, 0xb}, {0x14000453c38, 0x1, 0x1})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/base/print.go:230 +0x1fc\r\ncmd/compile/internal/walk.mayCall.func2({0x102e62018, 0x1400011e960})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:308 +0x408\r\ncmd/compile/internal/ir.Any.func1({0x102e62018, 0x1400011e960})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:130 +0x38\r\ncmd/compile/internal/ir.(*ConvExpr).doChildren(0x140001926c0, 0x1400069a318)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/node_gen.go:503 +0xc0\r\ncmd/compile/internal/ir.DoChildren(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:94\r\ncmd/compile/internal/ir.Any.func1({0x102e623d8, 0x140001926c0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:130 +0x68\r\ncmd/compile/internal/ir.Any({0x102e623d8, 0x140001926c0}, 0x14000660f20)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:132 +0xb0\r\ncmd/compile/internal/walk.mayCall({0x102e623d8, 0x140001926c0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:299 +0x78\r\ncmd/compile/internal/walk.walkCall1(0x1400011ed20, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:619 +0x2bc\r\ncmd/compile/internal/walk.walkCall(0x1400011ed20, 0x10249c380?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:589 +0xb00\r\ncmd/compile/internal/walk.walkExpr1({0x102e62018, 0x1400011ed20}, 0x1400011ed20?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:189 +0x3a8\r\ncmd/compile/internal/walk.walkExpr({0x102e62018, 0x1400011ed20}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.dataWord(0x14000192240, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/convert.go:211 +0xc84\r\ncmd/compile/internal/walk.walkConvInterface(0x14000192240, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/convert.go:60 +0xb44\r\ncmd/compile/internal/walk.walkExpr1({0x102e623d8, 0x14000192240}, 0x14000192240?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:224 +0x470\r\ncmd/compile/internal/walk.walkExpr({0x102e623d8, 0x14000192240}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkAssign(0x14000454ac0, {0x102e63158, 0x14000697680})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:72 +0xae0\r\ncmd/compile/internal/walk.walkExpr1({0x102e63158, 0x14000697680}, 0x14000697680?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:192 +0x37c\r\ncmd/compile/internal/walk.walkExpr({0x102e63158, 0x14000697680}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkStmt({0x102e63158, 0x14000697680?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:59 +0x728\r\ncmd/compile/internal/walk.walkStmtList(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:175\r\ncmd/compile/internal/walk.walkStmt({0x102e62cd8, 0x14000684b40?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:98 +0x1054\r\ncmd/compile/internal/walk.appendWalkStmt(0x140004553a0, {0x102e62cd8, 0x14000684b40})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:258 +0x70\r\ncmd/compile/internal/walk.slicelit(0x0, 0x14000176a00, {0x102e61d18?, 0x14000665ad0}, 0x1?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:409 +0x9b0\r\ncmd/compile/internal/walk.anylit({0x102e62b58, 0x14000176a00}, {0x102e61d18?, 0x14000665ad0}, 0x14000454fa8?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:600 +0x448\r\ncmd/compile/internal/walk.oaslit(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:649\r\ncmd/compile/internal/walk.walkAssign(0x140004553a0, {0x102e63158, 0x140006974f0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:57 +0x74c\r\ncmd/compile/internal/walk.walkExpr1({0x102e63158, 0x140006974f0}, 0x140006974f0?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:192 +0x37c\r\ncmd/compile/internal/walk.walkExpr({0x102e63158, 0x140006974f0}, 0x140004553a0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.appendWalkStmt(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:256\r\ncmd/compile/internal/walk.ascompatee(0x16, {0x14000660d00?, 0x1, 0x14000684940?}, {0x14000660d40?, 0x1, 0x102e61d18?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:375 +0x64c\r\ncmd/compile/internal/walk.walkAssignList(0x140004557f0, 0x14000699380)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:147 +0x12c\r\ncmd/compile/internal/walk.walkExpr1({0x102e62e58, 0x14000699380}, 0x14000699380?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:196 +0x2b0\r\ncmd/compile/internal/walk.walkExpr({0x102e62e58, 0x14000699380}, 0x140004557f0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkStmt({0x102e62e58, 0x14000699380?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:59 +0x728\r\ncmd/compile/internal/walk.walkStmtList(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:175\r\ncmd/compile/internal/walk.Walk(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:43 +0x15c\r\ncmd/compile/internal/gc.prepareFunc(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/compile.go:105 +0x104\r\ncmd/compile/internal/gc.enqueueFunc(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/compile.go:71 +0x2b4\r\ncmd/compile/internal/gc.Main(0x102e56530)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/main.go:338 +0x131c\r\nmain.main()\r\n\t/Users/gopher/gotip/src/cmd/compile/main.go:57 +0x110\r\n\r\n$ echo $?\r\n1\r\n```\r\n\r\n(https://go.dev/play/p/Td1MrT9ErxG?v=gotip)\r\n\r\nNotably, simplifying further in the following ways causes it to stop reproducing:\r\n\r\n- using `println` instead of `fmt.Println`\r\n- assigning result of `min` to `_` instead of `fmt.Println`\r\n- assigning result of `min` to another variable and `fmt.Println`ing that\r\n- using constants instead of variables for `a`, `b`\r\n\r\n(Rebuilding `cmd/compile` without `GOROOT/src/cmd/compile/default.pgo` doesn't stop it from reproducing.)\r\n\r\nCC @golang/compiler.","bash\r\n$ go version\r\ngo version devel go1.21-6260049fa2 Fri Jun 2 19:54:05 2023 +0000 darwin/arm64\r\n\r\n$ cd $(mktemp -d) && go mod init example && cat <<EOF > main.go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\ta, b := 5, 7\r\n\tfmt.Println(min(a, b))\r\n}\r\nEOF\r\n\r\n$ go build\r\n# example\r\n./main.go:7:17: internal compiler error: mayCall \r\n.   MIN int tc(1) # main.go:7:17\r\n.   MIN-Args\r\n.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:6:2\r\n.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:6:5\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/Users/gopher/gotip/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x1926c0?, 0x140?}, {0x102c2a06b, 0xb}, {0x14000453c38, 0x1, 0x1})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/base/print.go:230 +0x1fc\r\ncmd/compile/internal/walk.mayCall.func2({0x102e62018, 0x1400011e960})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:308 +0x408\r\ncmd/compile/internal/ir.Any.func1({0x102e62018, 0x1400011e960})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:130 +0x38\r\ncmd/compile/internal/ir.(*ConvExpr).doChildren(0x140001926c0, 0x1400069a318)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/node_gen.go:503 +0xc0\r\ncmd/compile/internal/ir.DoChildren(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:94\r\ncmd/compile/internal/ir.Any.func1({0x102e623d8, 0x140001926c0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:130 +0x68\r\ncmd/compile/internal/ir.Any({0x102e623d8, 0x140001926c0}, 0x14000660f20)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/ir/visit.go:132 +0xb0\r\ncmd/compile/internal/walk.mayCall({0x102e623d8, 0x140001926c0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:299 +0x78\r\ncmd/compile/internal/walk.walkCall1(0x1400011ed20, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:619 +0x2bc\r\ncmd/compile/internal/walk.walkCall(0x1400011ed20, 0x10249c380?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:589 +0xb00\r\ncmd/compile/internal/walk.walkExpr1({0x102e62018, 0x1400011ed20}, 0x1400011ed20?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:189 +0x3a8\r\ncmd/compile/internal/walk.walkExpr({0x102e62018, 0x1400011ed20}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.dataWord(0x14000192240, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/convert.go:211 +0xc84\r\ncmd/compile/internal/walk.walkConvInterface(0x14000192240, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/convert.go:60 +0xb44\r\ncmd/compile/internal/walk.walkExpr1({0x102e623d8, 0x14000192240}, 0x14000192240?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:224 +0x470\r\ncmd/compile/internal/walk.walkExpr({0x102e623d8, 0x14000192240}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkAssign(0x14000454ac0, {0x102e63158, 0x14000697680})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:72 +0xae0\r\ncmd/compile/internal/walk.walkExpr1({0x102e63158, 0x14000697680}, 0x14000697680?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:192 +0x37c\r\ncmd/compile/internal/walk.walkExpr({0x102e63158, 0x14000697680}, 0x14000454ac0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkStmt({0x102e63158, 0x14000697680?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:59 +0x728\r\ncmd/compile/internal/walk.walkStmtList(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:175\r\ncmd/compile/internal/walk.walkStmt({0x102e62cd8, 0x14000684b40?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:98 +0x1054\r\ncmd/compile/internal/walk.appendWalkStmt(0x140004553a0, {0x102e62cd8, 0x14000684b40})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:258 +0x70\r\ncmd/compile/internal/walk.slicelit(0x0, 0x14000176a00, {0x102e61d18?, 0x14000665ad0}, 0x1?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:409 +0x9b0\r\ncmd/compile/internal/walk.anylit({0x102e62b58, 0x14000176a00}, {0x102e61d18?, 0x14000665ad0}, 0x14000454fa8?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:600 +0x448\r\ncmd/compile/internal/walk.oaslit(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/complit.go:649\r\ncmd/compile/internal/walk.walkAssign(0x140004553a0, {0x102e63158, 0x140006974f0})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:57 +0x74c\r\ncmd/compile/internal/walk.walkExpr1({0x102e63158, 0x140006974f0}, 0x140006974f0?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:192 +0x37c\r\ncmd/compile/internal/walk.walkExpr({0x102e63158, 0x140006974f0}, 0x140004553a0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.appendWalkStmt(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:256\r\ncmd/compile/internal/walk.ascompatee(0x16, {0x14000660d00?, 0x1, 0x14000684940?}, {0x14000660d40?, 0x1, 0x102e61d18?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:375 +0x64c\r\ncmd/compile/internal/walk.walkAssignList(0x140004557f0, 0x14000699380)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/assign.go:147 +0x12c\r\ncmd/compile/internal/walk.walkExpr1({0x102e62e58, 0x14000699380}, 0x14000699380?)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:196 +0x2b0\r\ncmd/compile/internal/walk.walkExpr({0x102e62e58, 0x14000699380}, 0x140004557f0)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/expr.go:56 +0x25c\r\ncmd/compile/internal/walk.walkStmt({0x102e62e58, 0x14000699380?})\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:59 +0x728\r\ncmd/compile/internal/walk.walkStmtList(...)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/stmt.go:175\r\ncmd/compile/internal/walk.Walk(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/walk/walk.go:43 +0x15c\r\ncmd/compile/internal/gc.prepareFunc(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/compile.go:105 +0x104\r\ncmd/compile/internal/gc.enqueueFunc(0x1400042de40)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/compile.go:71 +0x2b4\r\ncmd/compile/internal/gc.Main(0x102e56530)\r\n\t/Users/gopher/gotip/src/cmd/compile/internal/gc/main.go:338 +0x131c\r\nmain.main()\r\n\t/Users/gopher/gotip/src/cmd/compile/main.go:57 +0x110\r\n\r\n$ echo $?\r\n1\r\n"
60566,"go/types, types2: improved constant handling guarded by go1.21 but other inference improvements are notThe Go 1.21 compiler implements significantly more powerful and precise type inference than Go 1.20. One of the improvements made is for untyped constants (#58671). That change was implemented based on the language version: -lang must be >= go1.21.\r\n\r\n\r\nproduces an [error](https://go.dev/play/p/Tp7dB5QpeIJ) (`default type float64 of 2.0 does not match inferred type int for P`) with -lang=go1.20 but runs fine with -lang >= go1.21.\r\n\r\nHowever, there are plenty of other inference improvements that that were made for 1.21 which are accessible even if -lang < go1.21. For instance:\r\n\r\n\r\nIn this case the change and error is not fundamentally different from above: in Go 1.20 we couldn't infer a type argument and now we can. In both these cases one can provide explicit type arguments and make the code compile. Also, all inference improvements are fully backwards-compatible.\r\n\r\nI propose that we remove the -lang check for the more lenient constant handling for consistency with the other inference improvements. (Making all improvements -lang dependent is not practical.)\r\n\r\n",NeedsDecision,griesemer,"The Go 1.21 compiler implements significantly more powerful and precise type inference than Go 1.20. One of the improvements made is for untyped constants (#58671). That change was implemented based on the language version: -lang must be >= go1.21.\r\n\r\n```Go\r\nfunc f[P any](...P) {}\r\n\r\nfunc main() {\r\n\tf(1, 2.0)\r\n}\r\n```\r\nproduces an [error](https://go.dev/play/p/Tp7dB5QpeIJ) (`default type float64 of 2.0 does not match inferred type int for P`) with -lang=go1.20 but runs fine with -lang >= go1.21.\r\n\r\nHowever, there are plenty of other inference improvements that that were made for 1.21 which are accessible even if -lang < go1.21. For instance:\r\n\r\n```Go\r\npackage main\r\n\r\nfunc f[T any](interface{ m(T) }) {}\r\n\r\ntype S struct{}\r\n\r\nfunc (S) m(int) {}\r\n\r\nfunc main() {\r\n\tf(S{})\r\n}\r\n```\r\nIn this case the change and error is not fundamentally different from above: in Go 1.20 we couldn't infer a type argument and now we can. In both these cases one can provide explicit type arguments and make the code compile. Also, all inference improvements are fully backwards-compatible.\r\n\r\nI propose that we remove the -lang check for the more lenient constant handling for consistency with the other inference improvements. (Making all improvements -lang dependent is not practical.)\r\n\r\n","Go\r\nfunc f[P any](...P) {}\r\n\r\nfunc main() {\r\n\tf(1, 2.0)\r\n}\r\n"
60564,"go/types, types2: inference fails where it should succeed when considering interface methodsThis code produces an error but we should be able to infer T in this case.\r\n\r\n\r\nNot a release blocker as it doesn't work either in Go 1.20. But should fix if not too hard.\r\n\r\ncc: @findleyr ",NeedsFix,griesemer,"This code produces an error but we should be able to infer T in this case.\r\n\r\n```Go\r\npackage p\r\n\r\ntype I[T any] interface {\r\n\tm(T)\r\n}\r\n\r\nfunc f5[T any](I[T]) {}\r\n\r\nfunc _() {\r\n\tvar x interface {\r\n\t\tm(int)\r\n\t\tn()\r\n\t}\r\n\tf5(x /* ERROR ""type interface{m(int); n()} of x does not match inferred type I[int] for I[T]"" */)\r\n\tf5[int](x) // ok\r\n}\r\n```\r\nNot a release blocker as it doesn't work either in Go 1.20. But should fix if not too hard.\r\n\r\ncc: @findleyr ","Go\r\npackage p\r\n\r\ntype I[T any] interface {\r\n\tm(T)\r\n}\r\n\r\nfunc f5[T any](I[T]) {}\r\n\r\nfunc _() {\r\n\tvar x interface {\r\n\t\tm(int)\r\n\t\tn()\r\n\t}\r\n\tf5(x /* ERROR ""type interface{m(int); n()} of x does not match inferred type I[int] for I[T]"" */)\r\n\tf5[int](x) // ok\r\n}\r\n"
60562,"go/types, types2: chan interface unifies with chan struct, resulting in misleading error message\r\nproduces\r\n```\r\ntestdata/manual.go:11:4: cannot use s (variable of type chan interface{m(int)}) as chan S[int] value in argument to f\r\n```\r\nbut it should say something like\r\n```\r\ntestdata/manual.go:11:4: type chan interface{m(int)} of s does not match chan S[T] (cannot infer T)\r\n```\r\n",NeedsFix|release-blocker,griesemer,```Go\r\npackage p\r\n\r\ntype S[T any] struct{}\r\n\r\nfunc (S[T]) m(T) {}\r\n\r\nfunc f[T any](chan S[T]) {}\r\n\r\nfunc _() {\r\n\tvar s chan interface{ m(int) }\r\n\tf(s)\r\n}\r\n```\r\nproduces\r\n```\r\ntestdata/manual.go:11:4: cannot use s (variable of type chan interface{m(int)}) as chan S[int] value in argument to f\r\n```\r\nbut it should say something like\r\n```\r\ntestdata/manual.go:11:4: type chan interface{m(int)} of s does not match chan S[T] (cannot infer T)\r\n```\r\n,Go\r\npackage p\r\n\r\ntype S[T any] struct{}\r\n\r\nfunc (S[T]) m(T) {}\r\n\r\nfunc f[T any](chan S[T]) {}\r\n\r\nfunc _() {\r\n\tvar s chan interface{ m(int) }\r\n\tf(s)\r\n}\r\n
60556,"go/types, types2: infinite recursion in type inference\r\ncauses an infinite recursion. If panicAtUnificationDepthLimit = false, the error is:\r\n```\r\ntestdata/manual.go:15:3: T (type S[int]) does not satisfy I[E] (wrong type for method m)\r\n                        have m(I[int])\r\n                        want m(I[E])\r\n```",NeedsInvestigation|release-blocker,griesemer,"```Go\r\npackage p\r\n\r\ntype I[T any] interface {\r\n\tm(I[T])\r\n}\r\n\r\ntype S[T any] struct{}\r\n\r\nfunc (S[T]) m(I[T]) {}\r\n\r\nfunc f[T I[E], E any](T) {}\r\n\r\nfunc _() {\r\n\t//f[S[int], int](S[int]{}) // ok\r\n\tf(S[int]{})\r\n}\r\n```\r\ncauses an infinite recursion. If panicAtUnificationDepthLimit = false, the error is:\r\n```\r\ntestdata/manual.go:15:3: T (type S[int]) does not satisfy I[E] (wrong type for method m)\r\n                        have m(I[int])\r\n                        want m(I[E])\r\n```","Go\r\npackage p\r\n\r\ntype I[T any] interface {\r\n\tm(I[T])\r\n}\r\n\r\ntype S[T any] struct{}\r\n\r\nfunc (S[T]) m(I[T]) {}\r\n\r\nfunc f[T I[E], E any](T) {}\r\n\r\nfunc _() {\r\n\t//f[S[int], int](S[int]{}) // ok\r\n\tf(S[int]{})\r\n}\r\n"
60544,"x/tools/gopls: crash when a method has a parameter of type comparableTo reproduce:\r\n\r\n\r\n\r\n\r\n\r\n<pre>panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0xa31edd]\r\n\r\ngoroutine 162 [running]:\r\ngolang.org/x/tools/gopls/internal/lsp/source.NarrowestPackageForFile({0x1176b98, 0xc001456870}, {0x1183ed0, 0xc003232180}, {0xc00205e540, 0x27})\r\n\t  view.go:303  0x2dd\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).codeAction(0xd74d60%3F, {0x1176af0%3F, 0xc000374a00%3F}, 0xc00089fea0)\r\n\t  code_action.go:198  0x1738\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).CodeAction(0xc0002bc300%3F, {0x1176af0%3F, 0xc000374a00%3F}, 0xd74d60%3F)\r\n\t  server_gen.go:16  0x25\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.serverDispatch({0x1176af0, 0xc000374a00}, {0x1187810, 0xc000771c70}, 0xc001456630, {0x1176dc8, 0xc0000c86c0})\r\n\t  tsserver.go:237  0x1f05\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.ServerHandler.func1({0x1176af0, 0xc000374a00}, 0xc001456630, {0x1176dc8, 0xc0000c86c0})\r\n\t  protocol.go:157  0x90\r\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.handshaker.func1({0x1176af0, 0xc000374a00}, 0xc001456630, {0x1176dc8%3F, 0xc0000c86c0%3F})\r\n\t  lsprpc.go:519  0x9f9\r\ngolang.org/x/tools/internal/jsonrpc2.MustReplyHandler.func1({0x1176af0, 0xc000374a00}, 0xc0003cec60, {0x1176dc8%3F, 0xc0000c86c0%3F})\r\n\t  handler.go:35  0xf6\r\ngolang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1.2()\r\n\t  handler.go:103  0xa3\r\ncreated by golang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1\r\n\t  handler.go:100  0x20a\r\n[Error - 5:28:11 PM] </pre>\r\n\r\n",gopls|Tools,findleyr,"To reproduce:\r\n\r\n```bash\r\n$ go mod init github.com/thatguystone/crash\r\ngo: creating new go.mod: module github.com/thatguystone/crash\r\n$ code .\r\n$ echo ""package main\r\n\r\ntype X struct{}\r\n\r\nfunc (X) test(x comparable) {}\r\n"" > main.go\r\n$ code main.go\r\n\r\n```\r\n\r\n\r\n\r\n<pre>panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0xa31edd]\r\n\r\ngoroutine 162 [running]:\r\ngolang.org/x/tools/gopls/internal/lsp/source.NarrowestPackageForFile({0x1176b98, 0xc001456870}, {0x1183ed0, 0xc003232180}, {0xc00205e540, 0x27})\r\n\t  view.go:303  0x2dd\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).codeAction(0xd74d60%3F, {0x1176af0%3F, 0xc000374a00%3F}, 0xc00089fea0)\r\n\t  code_action.go:198  0x1738\r\ngolang.org/x/tools/gopls/internal/lsp.(*Server).CodeAction(0xc0002bc300%3F, {0x1176af0%3F, 0xc000374a00%3F}, 0xd74d60%3F)\r\n\t  server_gen.go:16  0x25\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.serverDispatch({0x1176af0, 0xc000374a00}, {0x1187810, 0xc000771c70}, 0xc001456630, {0x1176dc8, 0xc0000c86c0})\r\n\t  tsserver.go:237  0x1f05\r\ngolang.org/x/tools/gopls/internal/lsp/protocol.ServerHandler.func1({0x1176af0, 0xc000374a00}, 0xc001456630, {0x1176dc8, 0xc0000c86c0})\r\n\t  protocol.go:157  0x90\r\ngolang.org/x/tools/gopls/internal/lsp/lsprpc.handshaker.func1({0x1176af0, 0xc000374a00}, 0xc001456630, {0x1176dc8%3F, 0xc0000c86c0%3F})\r\n\t  lsprpc.go:519  0x9f9\r\ngolang.org/x/tools/internal/jsonrpc2.MustReplyHandler.func1({0x1176af0, 0xc000374a00}, 0xc0003cec60, {0x1176dc8%3F, 0xc0000c86c0%3F})\r\n\t  handler.go:35  0xf6\r\ngolang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1.2()\r\n\t  handler.go:103  0xa3\r\ncreated by golang.org/x/tools/internal/jsonrpc2.AsyncHandler.func1\r\n\t  handler.go:100  0x20a\r\n[Error - 5:28:11 PM] </pre>\r\n\r\n","bash\r\n$ go mod init github.com/thatguystone/crash\r\ngo: creating new go.mod: module github.com/thatguystone/crash\r\n$ code .\r\n$ echo ""package main\r\n\r\ntype X struct{}\r\n\r\nfunc (X) test(x comparable) {}\r\n"" > main.go\r\n$ code main.go\r\n\r\n"
60542,"cmd/compile: failing type inference produces unclear error messageTaken from #60434:\r\n\r\n\r\nproduces:\r\n```\r\n/tmp/x.go:8:13: S does not match []E\r\n```\r\nwhich is not helpful.\r\n\r\nSuggestion by @rsc :\r\n\r\nIt would be helpful to say what function is being called and what S is, as in:\r\n\r\n```\r\n/tmp/x.go:8:13: in call to slices.Clip, S (type func()) does not match []E\r\n```\r\n",NeedsFix|TypeInference|compiler/runtime,griesemer,"Taken from #60434:\r\n\r\n```Go\r\npackage p\r\n\r\nfunc Clip[S ~[]E, E any](s S) S {\r\n\treturn s\r\n}\r\n\r\nvar versions func()\r\nvar _ = Clip(versions)\r\n```\r\nproduces:\r\n```\r\n/tmp/x.go:8:13: S does not match []E\r\n```\r\nwhich is not helpful.\r\n\r\nSuggestion by @rsc :\r\n\r\nIt would be helpful to say what function is being called and what S is, as in:\r\n\r\n```\r\n/tmp/x.go:8:13: in call to slices.Clip, S (type func()) does not match []E\r\n```\r\n","Go\r\npackage p\r\n\r\nfunc Clip[S ~[]E, E any](s S) S {\r\n\treturn s\r\n}\r\n\r\nvar versions func()\r\nvar _ = Clip(versions)\r\n"
60528,"reflect: ArenaNew panic non-pointer type<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/r/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/r/sdk/go1.20.4""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/sdk/go1.20.4/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build3924141508=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.20.4 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.20.4\r\nuname -v: Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.3.1\r\nProductVersionExtra:\t(a)\r\nBuildVersion:\t\t22E772610a\r\nlldb --version: lldb-1403.0.17.64\r\nApple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\ntest.go:\r\n\r\n`GOEXPERIMENT=arenas  go1.20.4 run -a test.go`\r\n\r\n### What did you expect to see?\r\nprint\r\n```\r\n*int 0\r\n```\r\n\r\n\r\n### What did you see instead?\r\npanic:\r\n```\r\nfatal error: arena_New: non-pointer type\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw({0x1025c532b?, 0x10254070c?})\r\n        /Users/r/sdk/go1.20.4/src/runtime/panic.go:1047 +0x40 fp=0x140000a4e20 sp=0x140000a4df0 pc=0x102564dd0\r\narena.runtime_arena_arena_New(0x129cc1408?, {0x1025fa760, 0x1025eb8a0})\r\n        /Users/r/sdk/go1.20.4/src/runtime/arena.go:113 +0x78 fp=0x140000a4e60 sp=0x140000a4e20 pc=0x10258d318\r\nreflect.arena_New(0x140000a4ec8?, {0x1025fa760?, 0x1025eb8a0?})\r\n        /Users/r/sdk/go1.20.4/src/arena/arena.go:89 +0x28 fp=0x140000a4e90 sp=0x140000a4e60 pc=0x1025952d8\r\nreflect.ArenaNew(0x1025f06e0?, {0x1025ff038?, 0x1025eb8a0?})\r\n        /Users/r/sdk/go1.20.4/src/reflect/arena.go:15 +0x2c fp=0x140000a4ed0 sp=0x140000a4e90 pc=0x1025a39fc\r\nmain.main()\r\n        /Users/r/workspace/testcode/testarena/test.go:12 +0xa0 fp=0x140000a4f70 sp=0x140000a4ed0 pc=0x1025c1050\r\nruntime.main()\r\n        /Users/r/sdk/go1.20.4/src/runtime/proc.go:250 +0x248 fp=0x140000a4fd0 sp=0x140000a4f70 pc=0x1025673f8\r\nruntime.goexit()\r\n        /Users/r/sdk/go1.20.4/src/runtime/asm_arm64.s:1172 +0x4 fp=0x140000a4fd0 sp=0x140000a4fd0 pc=0x102592364\r\n```\r\n\r\nIf I change the code to `v := reflect.ArenaNew(a, reflect.TypeOf(&i))`, it will pass.\r\n\r\nBut it conflicts with the comment of reflect.ArenaNew:\r\n> // ArenaNew returns a Value representing a pointer to a new zero value for the\r\n// specified type, allocating storage for it in the provided arena. That is,\r\n// the returned Value's Type is PointerTo(typ).\r\n",NeedsFix|compiler/runtime,mknyszek,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/r/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/r/sdk/go1.20.4""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/sdk/go1.20.4/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build3924141508=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.20.4 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.20.4\r\nuname -v: Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.3.1\r\nProductVersionExtra:\t(a)\r\nBuildVersion:\t\t22E772610a\r\nlldb --version: lldb-1403.0.17.64\r\nApple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\ntest.go:\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""arena""\r\n\t""fmt""\r\n\t""reflect""\r\n)\r\n\r\nfunc main() {\r\n\ta := arena.NewArena()\r\n\ti := 0\r\n\tv := reflect.ArenaNew(a, reflect.TypeOf(i))\r\n\tfmt.Println(v.Type(), *v.Interface().(*int))\r\n\ta.Free()\r\n}\r\n```\r\n`GOEXPERIMENT=arenas  go1.20.4 run -a test.go`\r\n\r\n### What did you expect to see?\r\nprint\r\n```\r\n*int 0\r\n```\r\n\r\n\r\n### What did you see instead?\r\npanic:\r\n```\r\nfatal error: arena_New: non-pointer type\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw({0x1025c532b?, 0x10254070c?})\r\n        /Users/r/sdk/go1.20.4/src/runtime/panic.go:1047 +0x40 fp=0x140000a4e20 sp=0x140000a4df0 pc=0x102564dd0\r\narena.runtime_arena_arena_New(0x129cc1408?, {0x1025fa760, 0x1025eb8a0})\r\n        /Users/r/sdk/go1.20.4/src/runtime/arena.go:113 +0x78 fp=0x140000a4e60 sp=0x140000a4e20 pc=0x10258d318\r\nreflect.arena_New(0x140000a4ec8?, {0x1025fa760?, 0x1025eb8a0?})\r\n        /Users/r/sdk/go1.20.4/src/arena/arena.go:89 +0x28 fp=0x140000a4e90 sp=0x140000a4e60 pc=0x1025952d8\r\nreflect.ArenaNew(0x1025f06e0?, {0x1025ff038?, 0x1025eb8a0?})\r\n        /Users/r/sdk/go1.20.4/src/reflect/arena.go:15 +0x2c fp=0x140000a4ed0 sp=0x140000a4e90 pc=0x1025a39fc\r\nmain.main()\r\n        /Users/r/workspace/testcode/testarena/test.go:12 +0xa0 fp=0x140000a4f70 sp=0x140000a4ed0 pc=0x1025c1050\r\nruntime.main()\r\n        /Users/r/sdk/go1.20.4/src/runtime/proc.go:250 +0x248 fp=0x140000a4fd0 sp=0x140000a4f70 pc=0x1025673f8\r\nruntime.goexit()\r\n        /Users/r/sdk/go1.20.4/src/runtime/asm_arm64.s:1172 +0x4 fp=0x140000a4fd0 sp=0x140000a4fd0 pc=0x102592364\r\n```\r\n\r\nIf I change the code to `v := reflect.ArenaNew(a, reflect.TypeOf(&i))`, it will pass.\r\n\r\nBut it conflicts with the comment of reflect.ArenaNew:\r\n> // ArenaNew returns a Value representing a pointer to a new zero value for the\r\n// specified type, allocating storage for it in the provided arena. That is,\r\n// the returned Value's Type is PointerTo(typ).\r\n","golang\r\npackage main\r\n\r\nimport (\r\n\t""arena""\r\n\t""fmt""\r\n\t""reflect""\r\n)\r\n\r\nfunc main() {\r\n\ta := arena.NewArena()\r\n\ti := 0\r\n\tv := reflect.ArenaNew(a, reflect.TypeOf(i))\r\n\tfmt.Println(v.Type(), *v.Interface().(*int))\r\n\ta.Free()\r\n}\r\n"
60479,"cmd/compile: regression in DWARF location lists caused by ""issue VarDef only for pointer-ful types"" ### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo1.20. Also tip. Also go1.20-a74e5f584e.\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/andrei/.cache/go-build""\r\nGOENV=""/home/andrei/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/andrei/work/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/andrei/work""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/andrei/sdk/go1.19.9""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/andrei/sdk/go1.19.9/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.9""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build802006892=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThere appears to have been a regression in the quality of debug information between 1.19 and 1.20. I have bisected it to \r\na74e5f584 (`cmd/compile: issue VarDef only for pointer-ful types`), which is https://go-review.googlesource.com/c/go/+/419320.\r\n\r\nIt seems that this patch caused some local variables to no longer get their location lists emitted (i.e. the information telling debuggers the memory location of the variable in relation to different code locations).\r\n\r\nPlease consider the following program, which is the simplest repro I could produce:\r\nhttps://go.dev/play/p/u9iYmn8GXVz\r\n\r\n\r\nBefore a74e5f584e, the variable `t1` has the location information in debug info (pointing to the stack):\r\n\r\n```\r\nllvm-dwarfdump-16 --debug-info --color  --name=t1 --show-children <binary>\r\n```\r\n\r\n```\r\n0x00015395: DW_TAG_variable\r\n              DW_AT_name        (""t1"")\r\n              DW_AT_decl_line   (13)\r\n              DW_AT_type        (0x0000000000001bf4 ""main.T"")\r\n              DW_AT_location    (0x00000f61: \r\n                 [0x000000000045747c, 0x0000000000457490): DW_OP_fbreg -18)\r\n```\r\n\r\nAfter the patch though, it's no longer there:\r\n```\r\n0x00015395: DW_TAG_variable\r\n              DW_AT_name        (""t1"")\r\n              DW_AT_decl_line   (13)\r\n              DW_AT_type        (0x0000000000001bf4 ""main.T"")\r\n              DW_AT_location    (<empty>)\r\n```\r\n\r\n\r\nLuckily, the generated machine code for `main.foo` is not changed by a74e5f584e as far as I can tell, so I am hoping that the code-generation benefits of that patch are not at odds with the quality of the debug info. \r\n\r\nThe problem does not affect non-optimized builds (`-gcflags=""all=-N"").\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI would like to have the location list for the `t1` variable.\r\n\r\n### What did you see instead?\r\n\r\nLocation list is missing.\r\n\r\n--- \r\n\r\ncc @randall77 @dr2chase  - the author and reviewer of a74e5f584e. \r\nAlso kindly cc @aarzilli @thanm @neild - folks involved with https://go-review.googlesource.com/c/go/+/433479 which fixed other debug-info problems apparently caused by a74e5f584e.\r\n\r\nI would like to timidly volunteer myself to work on a fix if that would be useful, provided that someone knowledgeable would enjoy holding my hand a bit and showing me the ropes in the relevant parts of the compiler. I would like to personally take a longer-term interest in Go's debug info.",NeedsInvestigation|compiler/runtime,dr2chase,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo1.20. Also tip. Also go1.20-a74e5f584e.\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/andrei/.cache/go-build""\r\nGOENV=""/home/andrei/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/andrei/work/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/andrei/work""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/andrei/sdk/go1.19.9""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/andrei/sdk/go1.19.9/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.9""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build802006892=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThere appears to have been a regression in the quality of debug information between 1.19 and 1.20. I have bisected it to \r\na74e5f584 (`cmd/compile: issue VarDef only for pointer-ful types`), which is https://go-review.googlesource.com/c/go/+/419320.\r\n\r\nIt seems that this patch caused some local variables to no longer get their location lists emitted (i.e. the information telling debuggers the memory location of the variable in relation to different code locations).\r\n\r\nPlease consider the following program, which is the simplest repro I could produce:\r\nhttps://go.dev/play/p/u9iYmn8GXVz\r\n```go\r\npackage main\r\n\r\ntype T struct {\r\n\t// The size of the array matters; only 1 element is not enough for the demo.\r\n\tx [2]byte\r\n\t// Adding a pointer makes the problem go away, which seems to track with a74e5f584e.\r\n\t// p *int\r\n}\r\n\r\n//go:noinline\r\nfunc foo() T {\r\n\t// t1 has a loclist before a74e5f584e\r\n\tvar t1, t2 T\r\n\t_ = t2 // t2 is necessary for the demo; without it t1 is completely optimized out?\r\n\treturn t1\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n}\r\n```\r\n\r\nBefore a74e5f584e, the variable `t1` has the location information in debug info (pointing to the stack):\r\n\r\n```\r\nllvm-dwarfdump-16 --debug-info --color  --name=t1 --show-children <binary>\r\n```\r\n\r\n```\r\n0x00015395: DW_TAG_variable\r\n              DW_AT_name        (""t1"")\r\n              DW_AT_decl_line   (13)\r\n              DW_AT_type        (0x0000000000001bf4 ""main.T"")\r\n              DW_AT_location    (0x00000f61: \r\n                 [0x000000000045747c, 0x0000000000457490): DW_OP_fbreg -18)\r\n```\r\n\r\nAfter the patch though, it's no longer there:\r\n```\r\n0x00015395: DW_TAG_variable\r\n              DW_AT_name        (""t1"")\r\n              DW_AT_decl_line   (13)\r\n              DW_AT_type        (0x0000000000001bf4 ""main.T"")\r\n              DW_AT_location    (<empty>)\r\n```\r\n\r\n\r\nLuckily, the generated machine code for `main.foo` is not changed by a74e5f584e as far as I can tell, so I am hoping that the code-generation benefits of that patch are not at odds with the quality of the debug info. \r\n\r\nThe problem does not affect non-optimized builds (`-gcflags=""all=-N"").\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI would like to have the location list for the `t1` variable.\r\n\r\n### What did you see instead?\r\n\r\nLocation list is missing.\r\n\r\n--- \r\n\r\ncc @randall77 @dr2chase  - the author and reviewer of a74e5f584e. \r\nAlso kindly cc @aarzilli @thanm @neild - folks involved with https://go-review.googlesource.com/c/go/+/433479 which fixed other debug-info problems apparently caused by a74e5f584e.\r\n\r\nI would like to timidly volunteer myself to work on a fix if that would be useful, provided that someone knowledgeable would enjoy holding my hand a bit and showing me the ropes in the relevant parts of the compiler. I would like to personally take a longer-term interest in Go's debug info.","go\r\npackage main\r\n\r\ntype T struct {\r\n\t// The size of the array matters; only 1 element is not enough for the demo.\r\n\tx [2]byte\r\n\t// Adding a pointer makes the problem go away, which seems to track with a74e5f584e.\r\n\t// p *int\r\n}\r\n\r\n//go:noinline\r\nfunc foo() T {\r\n\t// t1 has a loclist before a74e5f584e\r\n\tvar t1, t2 T\r\n\t_ = t2 // t2 is necessary for the demo; without it t1 is completely optimized out?\r\n\treturn t1\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n}\r\n"
60431,"go/types: vet and test fail to typecheck valid package using unsafe.Sizeof<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/branden/.cache/go-build""\r\nGOENV=""/home/branden/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/branden/go/pkg/mod""\r\nGONOPROXY=""*.example.net""\r\nGONOSUMDB=""*.example.net""\r\nGOOS=""linux""\r\nGOPATH=""/home/branden/go""\r\nGOPRIVATE=""*.example.net""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/branden/work/example/arapi/go.mod""\r\nGOWORK=""/home/branden/work/example/go.work""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2431293305=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nStatically asserted the size of a generated struct to ensure that I wouldn't forget to update tests if the definition from which it is generated changes:\r\n\r\n\r\n\r\n\r\n\r\nThen build, vet, and test:\r\n\r\n```\r\n$ go build ./front/\r\n$ go vet ./front/\r\n$ go test ./front/\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPASS.\r\n\r\n### What did you see instead?\r\n\r\n- `go build` succeeds.\r\n- `go vet` reports `vet: front/order_test.go:262:23: invalid argument: index 160 out of bounds [0:1]`.\r\n- `go test` reports `front/order_test.go:262:23: invalid argument: index 197 out of bounds [0:1]`.\r\n\r\nLikely relates to #40322, in particular https://github.com/golang/go/issues/40322#issuecomment-829602848.",NeedsFix,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/branden/.cache/go-build""\r\nGOENV=""/home/branden/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/branden/go/pkg/mod""\r\nGONOPROXY=""*.example.net""\r\nGONOSUMDB=""*.example.net""\r\nGOOS=""linux""\r\nGOPATH=""/home/branden/go""\r\nGOPRIVATE=""*.example.net""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/branden/work/example/arapi/go.mod""\r\nGOWORK=""/home/branden/work/example/go.work""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2431293305=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nStatically asserted the size of a generated struct to ensure that I wouldn't forget to update tests if the definition from which it is generated changes:\r\n\r\n```go\r\npackage model\r\n\r\ntype Invoice struct {\r\n\tNum       int                  `json:""num""`       // num\r\n\tOt        sql.NullString       `json:""ot""`        // ot\r\n\tOi        sql.NullString       `json:""oi""`        // oi\r\n\tCust      int64                `json:""cust""`      // cust\r\n\tStore     sql.NullString       `json:""store""`     // store\r\n\tStatus    sql.NullString       `json:""status""`    // status\r\n\tAfe       sql.NullString       `json:""afe""`       // afe\r\n\tCc        sql.NullString       `json:""cc""`        // cc\r\n\tPono      sql.NullString       `json:""pono""`      // pono\r\n\tInvdate   sql.NullTime         `json:""invdate""`   // invdate\r\n\tSvcdate   sql.NullTime         `json:""svcdate""`   // svcdate\r\n\tReqdate   sql.NullTime         `json:""reqdate""`   // reqdate\r\n\tShipdate  sql.NullTime         `json:""shipdate""`  // shipdate\r\n\tSiteid    NullUniqueidentifier `json:""siteid""`    // siteid\r\n\tSite      sql.NullString       `json:""site""`      // site\r\n\tDeptid    NullUniqueidentifier `json:""deptid""`    // deptid\r\n\tDept      sql.NullString       `json:""dept""`      // dept\r\n\tPbid      NullUniqueidentifier `json:""pbid""`      // pbid\r\n\tPbno      sql.NullString       `json:""pbno""`      // pbno\r\n\tPb        sql.NullString       `json:""pb""`        // pb\r\n\tShiptoid  sql.NullString       `json:""shiptoid""`  // shiptoid\r\n\tShipto    sql.NullString       `json:""shipto""`    // shipto\r\n\tShipaddr1 sql.NullString       `json:""shipaddr1""` // shipaddr1\r\n\tShipaddr2 sql.NullString       `json:""shipaddr2""` // shipaddr2\r\n\tShipaddr3 sql.NullString       `json:""shipaddr3""` // shipaddr3\r\n\tShipaddr4 sql.NullString       `json:""shipaddr4""` // shipaddr4\r\n\tTotal     sql.NullFloat64      `json:""total""`     // total\r\n\tSubtotal  sql.NullFloat64      `json:""subtotal""`  // subtotal\r\n\tStatetax  sql.NullFloat64      `json:""statetax""`  // statetax\r\n\tCountytax sql.NullFloat64      `json:""countytax""` // countytax\r\n\tCitytax   sql.NullFloat64      `json:""citytax""`   // citytax\r\n\tOthertax  sql.NullFloat64      `json:""othertax""`  // othertax\r\n\tPbcheck   sql.NullTime         `json:""pbcheck""`   // pbcheck\r\n\tDescr     sql.NullString       `json:""descr""`     // descr\r\n\t// xo fields\r\n\t_exists, _deleted bool\r\n}\r\n```\r\n\r\n```go\r\npackage front\r\n\r\nvar _ = [1]struct{}{}[unsafe.Sizeof(model.Invoice{})-587]\r\n```\r\n\r\nThen build, vet, and test:\r\n\r\n```\r\n$ go build ./front/\r\n$ go vet ./front/\r\n$ go test ./front/\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPASS.\r\n\r\n### What did you see instead?\r\n\r\n- `go build` succeeds.\r\n- `go vet` reports `vet: front/order_test.go:262:23: invalid argument: index 160 out of bounds [0:1]`.\r\n- `go test` reports `front/order_test.go:262:23: invalid argument: index 197 out of bounds [0:1]`.\r\n\r\nLikely relates to #40322, in particular https://github.com/golang/go/issues/40322#issuecomment-829602848.","go\r\npackage model\r\n\r\ntype Invoice struct {\r\n\tNum       int                  `json:""num""`       // num\r\n\tOt        sql.NullString       `json:""ot""`        // ot\r\n\tOi        sql.NullString       `json:""oi""`        // oi\r\n\tCust      int64                `json:""cust""`      // cust\r\n\tStore     sql.NullString       `json:""store""`     // store\r\n\tStatus    sql.NullString       `json:""status""`    // status\r\n\tAfe       sql.NullString       `json:""afe""`       // afe\r\n\tCc        sql.NullString       `json:""cc""`        // cc\r\n\tPono      sql.NullString       `json:""pono""`      // pono\r\n\tInvdate   sql.NullTime         `json:""invdate""`   // invdate\r\n\tSvcdate   sql.NullTime         `json:""svcdate""`   // svcdate\r\n\tReqdate   sql.NullTime         `json:""reqdate""`   // reqdate\r\n\tShipdate  sql.NullTime         `json:""shipdate""`  // shipdate\r\n\tSiteid    NullUniqueidentifier `json:""siteid""`    // siteid\r\n\tSite      sql.NullString       `json:""site""`      // site\r\n\tDeptid    NullUniqueidentifier `json:""deptid""`    // deptid\r\n\tDept      sql.NullString       `json:""dept""`      // dept\r\n\tPbid      NullUniqueidentifier `json:""pbid""`      // pbid\r\n\tPbno      sql.NullString       `json:""pbno""`      // pbno\r\n\tPb        sql.NullString       `json:""pb""`        // pb\r\n\tShiptoid  sql.NullString       `json:""shiptoid""`  // shiptoid\r\n\tShipto    sql.NullString       `json:""shipto""`    // shipto\r\n\tShipaddr1 sql.NullString       `json:""shipaddr1""` // shipaddr1\r\n\tShipaddr2 sql.NullString       `json:""shipaddr2""` // shipaddr2\r\n\tShipaddr3 sql.NullString       `json:""shipaddr3""` // shipaddr3\r\n\tShipaddr4 sql.NullString       `json:""shipaddr4""` // shipaddr4\r\n\tTotal     sql.NullFloat64      `json:""total""`     // total\r\n\tSubtotal  sql.NullFloat64      `json:""subtotal""`  // subtotal\r\n\tStatetax  sql.NullFloat64      `json:""statetax""`  // statetax\r\n\tCountytax sql.NullFloat64      `json:""countytax""` // countytax\r\n\tCitytax   sql.NullFloat64      `json:""citytax""`   // citytax\r\n\tOthertax  sql.NullFloat64      `json:""othertax""`  // othertax\r\n\tPbcheck   sql.NullTime         `json:""pbcheck""`   // pbcheck\r\n\tDescr     sql.NullString       `json:""descr""`     // descr\r\n\t// xo fields\r\n\t_exists, _deleted bool\r\n}\r\n"
60377,cmd/compile: invalidly inferred type for interface that doesn't use type parameterIn the [following code](https://go.dev/play/p/Skc4IEzymQ1):\r\n\r\nwe infer the type `int` for `P` of `g`. But in fact any type would make this code work. Type inference should not succeed in this case.\r\n,NeedsFix|compiler/runtime,griesemer,"In the [following code](https://go.dev/play/p/Skc4IEzymQ1):\r\n```Go\r\ntype T[P any] interface {\r\n\tm()\r\n}\r\n\r\nfunc g[P any](T[P]) {}\r\n\r\nfunc _() {\r\n\tvar x T[int]\r\n\tg(x)         // here we infer P == int, but in fact any type of P would be ok\r\n\tg[string](x) // here we set P == string\r\n}\r\n```\r\nwe infer the type `int` for `P` of `g`. But in fact any type would make this code work. Type inference should not succeed in this case.\r\n","Go\r\ntype T[P any] interface {\r\n\tm()\r\n}\r\n\r\nfunc g[P any](T[P]) {}\r\n\r\nfunc _() {\r\n\tvar x T[int]\r\n\tg(x)         // here we infer P == int, but in fact any type of P would be ok\r\n\tg[string](x) // here we set P == string\r\n}\r\n"
60353,"spec: when unifying against interface types, consider common methods## Background\r\n\r\nCurrently, type inference fails when trying to unify two interfaces of different type, or an interface and a non-interface type, even though the respective types may have the correct methods and type sets if they could be unified somehow.\r\n\r\nExample 1 (see #57192)\r\n\r\nIn this case, `I2` implements `I1` if the type parameters `T` of `I1` and `I2` could be inferred to be `int`. Currently (Go 1.20) the compiler reports an error in this case.\r\n\r\nExample 2 (see #41176):\r\n\r\nIn this case, `S` implements `I` if the type parameter `T` of `I` could be inferred to be `byte`. Currently (Go 1.20) the compiler reports an error in this case.\r\n\r\nThe problem in the first case is that unification requires matching interfaces to be identical or from the same type declaration. The problem in the second case is that unification fails if the two types being compared (interface vs struct) are not of the same kind.\r\n\r\nThis does not accurately reflect Go's assignment rules for interfaces.\r\n\r\n## Proposal\r\n\r\nWe propose to change the type inference rules such that when interfaces are involved, type unification considers Go's assignment rules for interfaces. Specifically:\r\n\r\n1) Two (unnamed) interfaces unify if they have identical type terms and if one of the interfaces has a subset of the methods of the other and the methods in this subset unify.\r\n2) An interface `I` and a non-interface type `T` unify if all the methods of `I` exist in `T` and unify.\r\n3) For two named (defined) types originating in different type declarations where one or both of the underlying types is an interface, use rule 1) or 2) respectively to unify the underlying types.\r\n\r\nWhen unifying two defined types that are both interfaces originating in the same type declaration, use the current unification approach (type parameters must unify); i.e. there's no change in this case.\r\n\r\nThis is the entire proposal.\r\n\r\n## Discussion\r\n\r\nThe proposed changes are fully backward-compatible: the only case to consider is the unification of two interfaces (unifying an interface against a non-interface always failed in the past). In Go 1.20, two unnamed interfaces unify only if they have identical type terms, the same number of methods, and all methods unify. The proposed new rule will succeed in this case as well.\r\n\r\nWe don't change the existing behavior when unifying two defined types that are both interfaces originating in the same type declaration: first of all, the methods will unify if the type arguments unify (it's the same interface), but we also want to preserve existing behavior when type parameters are not used:\r\n\r\n\r\n\r\nIn this case we want to infer the type argument for `P` to be ~`int`~ `string` (as we do now). If we were only considering methods, this code would not work anymore. (That said, arguably this is a bug, see #60377: if we accept this as a bug then we don't need to separate between named/unnamed interface types for unification.)\r\n\r\nCurrently, if we try to unify two different interfaces, unification fails. The proposed new rule effectively means that one interface must implement the other. This may not be sufficient (e.g. if the interfaces are component types of other types) but if the two interfaces are compatible at all, it is a necessary condition.\r\n\r\nSimilarly, when unifying a non-interface type `T` with an interface `I`, at the very least `T` must implement all the methods of `I`; i.e. they must exist and they must unify. There are additional restrictions with respect to the type set but it's ok to ignore them for now (see next paragraph).\r\n\r\nThe proposed changes allow us to infer additional type arguments where unification (and thus type inference) currently fails immediately. It is still possible that the inferred type arguments lead to invalid instantiations and invalid parameter passing/assignments, in which case we will fail later.\r\n\r\n## Implementation\r\n\r\nWe have implemented this proposal ([CL 497015](https://go-review.git.corp.google.com/c/go/+/497656)) and enabled it through [CL 497657](https://go-review.git.corp.google.com/c/go/+/497657).\r\n\r\nShould this proposal not be accepted or should we run into problems during the freeze, the implementation can be safely disabled by issuing a revert of [CL 497657](https://go-review.git.corp.google.com/c/go/+/497657).\r\n\r\ncc: @ianlancetaylor @findleyr for visibility",Proposal|Proposal-Accepted|TypeInference,griesemer,"## Background\r\n\r\nCurrently, type inference fails when trying to unify two interfaces of different type, or an interface and a non-interface type, even though the respective types may have the correct methods and type sets if they could be unified somehow.\r\n\r\nExample 1 (see #57192)\r\n```Go\r\ntype I1[T any] interface {\r\n\tm1(T)\r\n}\r\ntype I2[T any] interface {\r\n\tI1[T]\r\n\tm2(T)\r\n}\r\n\r\nvar V1 I1[int]\r\nvar V2 I2[int]\r\n\r\nfunc g[T any](I1[T]) {}\r\nfunc _() {\r\n\tg(V1)\r\n\tg(V2) // ERROR type I2[int] of V2 does not match I1[T] (cannot infer T)\r\n}\r\n```\r\nIn this case, `I2` implements `I1` if the type parameters `T` of `I1` and `I2` could be inferred to be `int`. Currently (Go 1.20) the compiler reports an error in this case.\r\n\r\nExample 2 (see #41176):\r\n```Go\r\ntype S struct{}\r\n\r\nfunc (S) M() byte {\r\n\treturn 0\r\n}\r\n\r\ntype I[T any] interface {\r\n\tM() T\r\n}\r\n\r\nfunc f[T any](x I[T]) {}\r\n\r\nfunc _() {\r\n\tf(S{}) // ERROR type S of S{} does not match I[T] (cannot infer T)\r\n}\r\n```\r\nIn this case, `S` implements `I` if the type parameter `T` of `I` could be inferred to be `byte`. Currently (Go 1.20) the compiler reports an error in this case.\r\n\r\nThe problem in the first case is that unification requires matching interfaces to be identical or from the same type declaration. The problem in the second case is that unification fails if the two types being compared (interface vs struct) are not of the same kind.\r\n\r\nThis does not accurately reflect Go's assignment rules for interfaces.\r\n\r\n## Proposal\r\n\r\nWe propose to change the type inference rules such that when interfaces are involved, type unification considers Go's assignment rules for interfaces. Specifically:\r\n\r\n1) Two (unnamed) interfaces unify if they have identical type terms and if one of the interfaces has a subset of the methods of the other and the methods in this subset unify.\r\n2) An interface `I` and a non-interface type `T` unify if all the methods of `I` exist in `T` and unify.\r\n3) For two named (defined) types originating in different type declarations where one or both of the underlying types is an interface, use rule 1) or 2) respectively to unify the underlying types.\r\n\r\nWhen unifying two defined types that are both interfaces originating in the same type declaration, use the current unification approach (type parameters must unify); i.e. there's no change in this case.\r\n\r\nThis is the entire proposal.\r\n\r\n## Discussion\r\n\r\nThe proposed changes are fully backward-compatible: the only case to consider is the unification of two interfaces (unifying an interface against a non-interface always failed in the past). In Go 1.20, two unnamed interfaces unify only if they have identical type terms, the same number of methods, and all methods unify. The proposed new rule will succeed in this case as well.\r\n\r\nWe don't change the existing behavior when unifying two defined types that are both interfaces originating in the same type declaration: first of all, the methods will unify if the type arguments unify (it's the same interface), but we also want to preserve existing behavior when type parameters are not used:\r\n\r\n```Go\r\ntype T[_ any] any\r\n\r\nfunc f[P any](T[P]) {}\r\n\r\nfunc _() {\r\n\tvar x T[string]\r\n\tf(x)\r\n}\r\n```\r\n\r\nIn this case we want to infer the type argument for `P` to be ~`int`~ `string` (as we do now). If we were only considering methods, this code would not work anymore. (That said, arguably this is a bug, see #60377: if we accept this as a bug then we don't need to separate between named/unnamed interface types for unification.)\r\n\r\nCurrently, if we try to unify two different interfaces, unification fails. The proposed new rule effectively means that one interface must implement the other. This may not be sufficient (e.g. if the interfaces are component types of other types) but if the two interfaces are compatible at all, it is a necessary condition.\r\n\r\nSimilarly, when unifying a non-interface type `T` with an interface `I`, at the very least `T` must implement all the methods of `I`; i.e. they must exist and they must unify. There are additional restrictions with respect to the type set but it's ok to ignore them for now (see next paragraph).\r\n\r\nThe proposed changes allow us to infer additional type arguments where unification (and thus type inference) currently fails immediately. It is still possible that the inferred type arguments lead to invalid instantiations and invalid parameter passing/assignments, in which case we will fail later.\r\n\r\n## Implementation\r\n\r\nWe have implemented this proposal ([CL 497015](https://go-review.git.corp.google.com/c/go/+/497656)) and enabled it through [CL 497657](https://go-review.git.corp.google.com/c/go/+/497657).\r\n\r\nShould this proposal not be accepted or should we run into problems during the freeze, the implementation can be safely disabled by issuing a revert of [CL 497657](https://go-review.git.corp.google.com/c/go/+/497657).\r\n\r\ncc: @ianlancetaylor @findleyr for visibility",Go\r\ntype I1[T any] interface {\r\n\tm1(T)\r\n}\r\ntype I2[T any] interface {\r\n\tI1[T]\r\n\tm2(T)\r\n}\r\n\r\nvar V1 I1[int]\r\nvar V2 I2[int]\r\n\r\nfunc g[T any](I1[T]) {}\r\nfunc _() {\r\n\tg(V1)\r\n\tg(V2) // ERROR type I2[int] of V2 does not match I1[T] (cannot infer T)\r\n}\r\n
60346,"go/types, types2: for -lang=go1.20, type inference doesn't work for partially instantiated functions\r\nThis used to work.\r\n\r\n(Example courtesy of @findleyr.)\r\n",release-blocker,griesemer,"```Go\r\n// -lang=go1.20\r\n\r\npackage p\r\n\r\nfunc F[P any, Q *P](p P) {}\r\n\r\nvar _ = F[int]\r\n\r\nfunc G[R any](func(R)) {}\r\n\r\nfunc _() {\r\n\tG(F[int]) // ERROR implicitly instantiated function as argument requires go1.21 or later\r\n}\r\n```\r\nThis used to work.\r\n\r\n(Example courtesy of @findleyr.)\r\n","Go\r\n// -lang=go1.20\r\n\r\npackage p\r\n\r\nfunc F[P any, Q *P](p P) {}\r\n\r\nvar _ = F[int]\r\n\r\nfunc G[R any](func(R)) {}\r\n\r\nfunc _() {\r\n\tG(F[int]) // ERROR implicitly instantiated function as argument requires go1.21 or later\r\n}\r\n"
60245,"runtime/race: tracebacks missing symbol/file names<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ntip, cce67690b82faef7d12a86f20e8e6a158d15f2a3\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, not in 1.20\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/usr/local/google/home/mpratt/.cache/go-build""\r\nGOENV=""/usr/local/google/home/mpratt/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/usr/local/google/home/mpratt/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/usr/local/google/home/mpratt/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/google-golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/google-golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.21-20230317-RC01 cl/517508637 +f53a95fe39""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/usr/local/google/home/mpratt/src/go/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2742874043=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nRun this program in race mode:\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c000461d58 by main goroutine:\r\n  runtime.racewrite()\r\n      <autogenerated>:1 +0x24\r\n  main.main()\r\n      /tmp/race/main.go:14 +0x35\r\n\r\nPrevious read at 0x00c000461d58 by goroutine 2011:\r\n  runtime.raceread()\r\n      <autogenerated>:1 +0x24\r\n  main.main.func1()\r\n      /tmp/race/main.go:11 +0x35\r\n\r\nGoroutine 2011 (finished) created at:\r\n  main.main()\r\n      /tmp/race/main.go:10 +0x2b\r\n==================\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n==================           \r\nWARNING: DATA RACE \r\nWrite at 0x00c000531198 by main goroutine:\r\n  ??()\r\n      -:0 +0x49f39e                  \r\n  main.main()\r\n      /tmp/race/main.go:14 +0x30\r\n                                                                       \r\nPrevious read at 0x00c000531198 by goroutine 21825:\r\n  ??()\r\n      -:0 +0x49f35e\r\n  main.main.func1()        \r\n      /tmp/race/main.go:11 +0x33\r\n                                                                       \r\nGoroutine 21825 (finished) created at:    \r\n  main.main()        \r\n      /tmp/race/main.go:10 +0x26\r\n==================\r\n```\r\n\r\nThe reported PC is in racewrite.abi0:\r\n\r\n```\r\n000000000049f380 <runtime.racewrite.abi0>:\r\n  49f380:       55                      push   %rbp\r\n  49f381:       48 89 e5                mov    %rsp,%rbp\r\n  49f384:       48 83 ec 08             sub    $0x8,%rsp\r\n  49f388:       48 8b 44 24 18          mov    0x18(%rsp),%rax\r\n  49f38d:       45 0f 57 ff             xorps  %xmm15,%xmm15\r\n  49f391:       64 4c 8b 34 25 f8 ff    mov    %fs:0xfffffffffffffff8,%r14\r\n  49f398:       ff ff \r\n  49f39a:       e8 c1 eb ff ff          call   49df60 <runtime.racewrite>\r\n  49f39f:       48 83 c4 08             add    $0x8,%rsp\r\n  49f3a3:       5d                      pop    %rbp\r\n```\r\n\r\ncc @golang/runtime @aclements @cherrymui ",NeedsInvestigation|release-blocker|compiler/runtime,aclements,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ntip, cce67690b82faef7d12a86f20e8e6a158d15f2a3\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, not in 1.20\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/usr/local/google/home/mpratt/.cache/go-build""\r\nGOENV=""/usr/local/google/home/mpratt/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/usr/local/google/home/mpratt/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/usr/local/google/home/mpratt/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/google-golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/google-golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.21-20230317-RC01 cl/517508637 +f53a95fe39""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/usr/local/google/home/mpratt/src/go/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2742874043=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nRun this program in race mode:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        for {                        \r\n                var wg sync.WaitGroup\r\n                go func() {\r\n                        wg.Add(1)\r\n                        wg.Done()\r\n                }()\r\n                wg.Wait()\r\n        }                                 \r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c000461d58 by main goroutine:\r\n  runtime.racewrite()\r\n      <autogenerated>:1 +0x24\r\n  main.main()\r\n      /tmp/race/main.go:14 +0x35\r\n\r\nPrevious read at 0x00c000461d58 by goroutine 2011:\r\n  runtime.raceread()\r\n      <autogenerated>:1 +0x24\r\n  main.main.func1()\r\n      /tmp/race/main.go:11 +0x35\r\n\r\nGoroutine 2011 (finished) created at:\r\n  main.main()\r\n      /tmp/race/main.go:10 +0x2b\r\n==================\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n==================           \r\nWARNING: DATA RACE \r\nWrite at 0x00c000531198 by main goroutine:\r\n  ??()\r\n      -:0 +0x49f39e                  \r\n  main.main()\r\n      /tmp/race/main.go:14 +0x30\r\n                                                                       \r\nPrevious read at 0x00c000531198 by goroutine 21825:\r\n  ??()\r\n      -:0 +0x49f35e\r\n  main.main.func1()        \r\n      /tmp/race/main.go:11 +0x33\r\n                                                                       \r\nGoroutine 21825 (finished) created at:    \r\n  main.main()        \r\n      /tmp/race/main.go:10 +0x26\r\n==================\r\n```\r\n\r\nThe reported PC is in racewrite.abi0:\r\n\r\n```\r\n000000000049f380 <runtime.racewrite.abi0>:\r\n  49f380:       55                      push   %rbp\r\n  49f381:       48 89 e5                mov    %rsp,%rbp\r\n  49f384:       48 83 ec 08             sub    $0x8,%rsp\r\n  49f388:       48 8b 44 24 18          mov    0x18(%rsp),%rax\r\n  49f38d:       45 0f 57 ff             xorps  %xmm15,%xmm15\r\n  49f391:       64 4c 8b 34 25 f8 ff    mov    %fs:0xfffffffffffffff8,%r14\r\n  49f398:       ff ff \r\n  49f39a:       e8 c1 eb ff ff          call   49df60 <runtime.racewrite>\r\n  49f39f:       48 83 c4 08             add    $0x8,%rsp\r\n  49f3a3:       5d                      pop    %rbp\r\n```\r\n\r\ncc @golang/runtime @aclements @cherrymui ","go\r\npackage main\r\n\r\nimport (\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        for {                        \r\n                var wg sync.WaitGroup\r\n                go func() {\r\n                        wg.Add(1)\r\n                        wg.Done()\r\n                }()\r\n                wg.Wait()\r\n        }                                 \r\n}\r\n\r\n"
60212,"go/types: inconsistency in recorded types for instantiationsThis issue describes what is arguably a bug in the `go/types` API, which we may or may not be able to fix.\r\n\r\nSpecifically, consider the following generic declaration and instantiations:\r\n\r\n\r\n\r\nIn this example, we record in `types.Info.Types` the type `func(int, string)` for the expressions `f[int]` and `f[int, string]`, but for all `f` identifiers we record the type `func[P, Q any](P, Q)`.\r\n\r\nThis is inconsistent, and in hindsight ~clearly~probably wrong: `types.Info.Types` should record the effective type of each node in the syntax tree. In this case, the `Fun` expression of the call expression must have type `func(int, string)`.  `types.Info.Types` should never contain generic types.\r\n\r\nThere is some discussion of this at https://github.com/golang/go/issues/47916#issuecomment-904602462, where I _agreed_ with @mdempsky that it makes most sense to record the instance for the identifier. Unfortunately, that is not what was implemented, most likely as an artifact of the implementation. Mea culpa.\r\n\r\nNow that new forms of inference are being implemented, it is harder to preserve this inconsistency. Can we fix this bug so that we record the instance for `f`, or must we preserve this behavior as a historical artifact?\r\n\r\nOn the one hand, this bug has existed for over a year. On the other hand, the current behavior is inconsistent, and likely to cause bugs for tool authors.\r\n\r\nCC @griesemer @mdempsky @adonovan @dominikh ",NeedsFix,griesemer,"This issue describes what is arguably a bug in the `go/types` API, which we may or may not be able to fix.\r\n\r\nSpecifically, consider the following generic declaration and instantiations:\r\n\r\n```go\r\nfunc f[P, Q any](P, Q) {}\r\n\r\nfunc _() {\r\n  f(0, """")              // 0 type arguments provided\r\n  f[int](0, """")         // 1 type argument provided\r\n  f[int, string](0, """") // 2 type arguments provided\r\n}\r\n```\r\n\r\nIn this example, we record in `types.Info.Types` the type `func(int, string)` for the expressions `f[int]` and `f[int, string]`, but for all `f` identifiers we record the type `func[P, Q any](P, Q)`.\r\n\r\nThis is inconsistent, and in hindsight ~clearly~probably wrong: `types.Info.Types` should record the effective type of each node in the syntax tree. In this case, the `Fun` expression of the call expression must have type `func(int, string)`.  `types.Info.Types` should never contain generic types.\r\n\r\nThere is some discussion of this at https://github.com/golang/go/issues/47916#issuecomment-904602462, where I _agreed_ with @mdempsky that it makes most sense to record the instance for the identifier. Unfortunately, that is not what was implemented, most likely as an artifact of the implementation. Mea culpa.\r\n\r\nNow that new forms of inference are being implemented, it is harder to preserve this inconsistency. Can we fix this bug so that we record the instance for `f`, or must we preserve this behavior as a historical artifact?\r\n\r\nOn the one hand, this bug has existed for over a year. On the other hand, the current behavior is inconsistent, and likely to cause bugs for tool authors.\r\n\r\nCC @griesemer @mdempsky @adonovan @dominikh ","go\r\nfunc f[P, Q any](P, Q) {}\r\n\r\nfunc _() {\r\n  f(0, """")              // 0 type arguments provided\r\n  f[int](0, """")         // 1 type argument provided\r\n  f[int, string](0, """") // 2 type arguments provided\r\n}\r\n"
60083,testing: race detected in goroutine can report an error in an unnamed testTest case:\r\n\r\n\r\n\r\nRunning this test with `go test -race -test.v` prints\r\n\r\n```\r\n=== RUN   TestFoo\r\n0\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c000014288 by goroutine 8:\r\n  command-line-arguments_test.makeRace.func1()\r\n      /home/iant/foo_test.go:12 +0x33\r\n\r\nPrevious read at 0x00c000014288 by goroutine 7:\r\n  command-line-arguments_test.makeRace()\r\n      /home/iant/foo_test.go:15 +0x10c\r\n  command-line-arguments_test.TestFoo()\r\n      /home/iant/foo_test.go:20 +0x1c\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  ??()\r\n      -:0 +0x5243c4\r\n\r\nGoroutine 8 (running) created at:\r\n  command-line-arguments_test.makeRace()\r\n      /home/iant/foo_test.go:11 +0xfc\r\n  command-line-arguments_test.TestFoo()\r\n      /home/iant/foo_test.go:20 +0x1c\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  ??()\r\n      -:0 +0x5243c4\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/iant/go/src/testing/testing.go:1648 +0x835\r\n  testing.runTests.func1()\r\n      /home/iant/go/src/testing/testing.go:2054 +0x84\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  testing.runTests()\r\n      /home/iant/go/src/testing/testing.go:2052 +0x896\r\n  testing.(*M).Run()\r\n      /home/iant/go/src/testing/testing.go:1925 +0xb57\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n==================\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestFoo (0.00s)\r\n=== NAME  \r\n    testing.go:1465: race detected during execution of test\r\nFAIL\r\nFAIL\tcommand-line-arguments\t0.007s\r\nFAIL\r\n```\r\n\r\nNote the `=== NAME` near the end.  A `=== NAME` line should be followed by the name of the test.  Omitting the name is confusing and can break code that is parsing the test output.,NeedsInvestigation,bcmills,"Test case:\r\n\r\n```Go\r\npackage foo_test\r\n\r\nimport (\r\n\t""fmt""\r\n\t""testing""\r\n)\r\n\r\nfunc makeRace() {\r\n\tvar x int\r\n\tc := make(chan bool)\r\n\tgo func() {\r\n\t\tx = 1\r\n\t\tc <- true\r\n\t}()\r\n\tfmt.Println(x)\r\n\t<-c\r\n}\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tmakeRace()\r\n}\r\n```\r\n\r\nRunning this test with `go test -race -test.v` prints\r\n\r\n```\r\n=== RUN   TestFoo\r\n0\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c000014288 by goroutine 8:\r\n  command-line-arguments_test.makeRace.func1()\r\n      /home/iant/foo_test.go:12 +0x33\r\n\r\nPrevious read at 0x00c000014288 by goroutine 7:\r\n  command-line-arguments_test.makeRace()\r\n      /home/iant/foo_test.go:15 +0x10c\r\n  command-line-arguments_test.TestFoo()\r\n      /home/iant/foo_test.go:20 +0x1c\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  ??()\r\n      -:0 +0x5243c4\r\n\r\nGoroutine 8 (running) created at:\r\n  command-line-arguments_test.makeRace()\r\n      /home/iant/foo_test.go:11 +0xfc\r\n  command-line-arguments_test.TestFoo()\r\n      /home/iant/foo_test.go:20 +0x1c\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  ??()\r\n      -:0 +0x5243c4\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/iant/go/src/testing/testing.go:1648 +0x835\r\n  testing.runTests.func1()\r\n      /home/iant/go/src/testing/testing.go:2054 +0x84\r\n  testing.tRunner()\r\n      /home/iant/go/src/testing/testing.go:1595 +0x238\r\n  testing.runTests()\r\n      /home/iant/go/src/testing/testing.go:2052 +0x896\r\n  testing.(*M).Run()\r\n      /home/iant/go/src/testing/testing.go:1925 +0xb57\r\n  main.main()\r\n      _testmain.go:47 +0x2bd\r\n==================\r\n    testing.go:1465: race detected during execution of test\r\n--- FAIL: TestFoo (0.00s)\r\n=== NAME  \r\n    testing.go:1465: race detected during execution of test\r\nFAIL\r\nFAIL\tcommand-line-arguments\t0.007s\r\nFAIL\r\n```\r\n\r\nNote the `=== NAME` near the end.  A `=== NAME` line should be followed by the name of the test.  Omitting the name is confusing and can break code that is parsing the test output.","Go\r\npackage foo_test\r\n\r\nimport (\r\n\t""fmt""\r\n\t""testing""\r\n)\r\n\r\nfunc makeRace() {\r\n\tvar x int\r\n\tc := make(chan bool)\r\n\tgo func() {\r\n\t\tx = 1\r\n\t\tc <- true\r\n\t}()\r\n\tfmt.Println(x)\r\n\t<-c\r\n}\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tmakeRace()\r\n}\r\n"
60008,"text/template: missingkey does not affect builtin ""index"" functionThe documentation for the `missingkey` option says:\r\n\r\n> missingkey: Control the behavior during execution if a map is indexed with a key that is not present in the map. \r\n\r\nIt sounds like it might apply to `index` builtin function as well, but it applies only to the `.X.Y.Z` syntax.\r\n\r\nhttps://go.dev/play/p/ZneXhxfIBWT\r\n\r\n\r\nIt's hard to say whether this is behavioural bug, or just an ambiguity in documentation. Although I have use cases where `missingkey` applying to `index` builtin would be preferrable (replacement for `.X.Y.Z` if map keys don't happen to be valid identifiers), this indeed would be inconsistent with index expression of Go language itself.",NeedsInvestigation,robpike,"The documentation for the `missingkey` option says:\r\n\r\n> missingkey: Control the behavior during execution if a map is indexed with a key that is not present in the map. \r\n\r\nIt sounds like it might apply to `index` builtin function as well, but it applies only to the `.X.Y.Z` syntax.\r\n\r\nhttps://go.dev/play/p/ZneXhxfIBWT\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""text/template""\r\n)\r\n\r\nfunc f(text string) {\r\n\tfmt.Println(text)\r\n\tt := template.Must(template.New("""").Option(""missingkey=error"").Parse(text))\r\n\terr := t.Execute(io.Discard, map[string]any{})\r\n\tfmt.Println(err)\r\n\tfmt.Println()\r\n}\r\n\r\nfunc main() {\r\n\tf(`{{ .Foobar }}`)\r\n\t// template: :1:3: executing """" at <.Foobar>: map has no entry for key ""Foobar""\r\n\tf(`{{ index . ""Foobar"" }}`)\r\n\t// <nil>\r\n}\r\n```\r\n\r\nIt's hard to say whether this is behavioural bug, or just an ambiguity in documentation. Although I have use cases where `missingkey` applying to `index` builtin would be preferrable (replacement for `.X.Y.Z` if map keys don't happen to be valid identifiers), this indeed would be inconsistent with index expression of Go language itself.","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""text/template""\r\n)\r\n\r\nfunc f(text string) {\r\n\tfmt.Println(text)\r\n\tt := template.Must(template.New("""").Option(""missingkey=error"").Parse(text))\r\n\terr := t.Execute(io.Discard, map[string]any{})\r\n\tfmt.Println(err)\r\n\tfmt.Println()\r\n}\r\n\r\nfunc main() {\r\n\tf(`{{ .Foobar }}`)\r\n\t// template: :1:3: executing """" at <.Foobar>: map has no entry for key ""Foobar""\r\n\tf(`{{ index . ""Foobar"" }}`)\r\n\t// <nil>\r\n}\r\n"
59977,"cmd/compile: DWARF DW_TAG_subroutine_type doesn't mark return value's formal parameters as DW_AT_variable_parameter<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWhen trying to decode the type info for a pointer to a function (DW_TAG_subroutine_type), the return values of the function type DIE aren't encoded in a way that lets you determine that they are return values instead of normal parameters.\r\n\r\n\r\n\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected that a function type DIE's parameters & return values to be encoded in a similar way as a function DIE.\r\n\r\nFor example, the function that is returned from getfoo() is defined this way, with the return value being the correct type and being marked with a DW_AT_variable_parameter flag:\r\n\r\n```\r\n$ readelf -wi funcdef | grep -B1 -A18 main.getfoo.func1\r\n <1><4959b>: Abbrev Number: 3 (DW_TAG_subprogram)\r\n    <4959c>   DW_AT_name        : main.getfoo.func1\r\n    <495ae>   DW_AT_low_pc      : 0x458180\r\n    <495b6>   DW_AT_high_pc     : 0x458183\r\n    <495be>   DW_AT_frame_base  : 1 byte block: 9c \t(DW_OP_call_frame_cfa)\r\n    <495c0>   DW_AT_decl_file   : 0x2\r\n    <495c4>   DW_AT_external    : 1\r\n <2><495c5>: Abbrev Number: 18 (DW_TAG_formal_parameter)\r\n    <495c6>   DW_AT_name        : p1\r\n    <495c9>   DW_AT_variable_parameter: 0\r\n    <495ca>   DW_AT_decl_line   : 7\r\n    <495cb>   DW_AT_type        : <0x4a079>\r\n    <495cf>   DW_AT_location    : 0x6ec83 (location list)\r\n <2><495d3>: Abbrev Number: 17 (DW_TAG_formal_parameter)\r\n    <495d4>   DW_AT_name        : ~r0\r\n    <495d8>   DW_AT_variable_parameter: 1      <----- flag to indicate that this is a return value\r\n    <495d9>   DW_AT_decl_line   : 7\r\n    <495da>   DW_AT_type        : <0x499c9>   <---- normal bool type\r\n    <495de>   DW_AT_location    : 0 byte block: \t()\r\n <2><495df>: Abbrev Number: 0\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\nLooking at the DWARF for the function type definition, I get a DIE that defines 2 parameters with no way to tell that the last parameter is a return value:\r\n\r\n```\r\n$ readelf -wi funcdef | grep -A10 myfunctype\r\n    <4a03f>   DW_AT_name        : main.myfunctype\r\n    <4a04f>   DW_AT_byte_size   : 8\r\n    <4a050>   Unknown AT value: 2900: 19\r\n    <4a051>   Unknown AT value: 2904: 0x0\r\n <2><4a059>: Abbrev Number: 25 (DW_TAG_formal_parameter)\r\n    <4a05a>   DW_AT_type        : <0x4a079>\r\n <2><4a05e>: Abbrev Number: 25 (DW_TAG_formal_parameter)\r\n    <4a05f>   DW_AT_type        : <0x499da>   <--- bool* type instead of bool\r\n<2><4a063>: Abbrev Number: 0                   <--------- this is where I would expect a DW_AT_variable_parameter flag\r\n...\r\n\r\n$ readelf -wi funcdef | grep -A10 ""<499da""\r\n <1><499da>: Abbrev Number: 35 (DW_TAG_pointer_type)\r\n    <499db>   DW_AT_name        : *bool\r\n    <499e1>   DW_AT_type        : <0x499c9>\r\n    <499e5>   Unknown AT value: 2900: 0\r\n    <499e6>   Unknown AT value: 2904: 0x2760\r\n...\r\n```\r\n\r\nAdditionally, the return types are converted to a pointer-to-real-return-type.\r\n",NeedsInvestigation|compiler/runtime,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWhen trying to decode the type info for a pointer to a function (DW_TAG_subroutine_type), the return values of the function type DIE aren't encoded in a way that lets you determine that they are return values instead of normal parameters.\r\n\r\n```go\r\npackage main\r\n\r\ntype myfunctype func(int) bool\r\n\r\n//go:noinline\r\nfunc getfoo() myfunctype {\r\n\treturn func(p1 int) bool {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\r\n\tfoo := getfoo();\r\n\r\n\tprintln(""foo: "", foo(1))\r\n}\r\n\r\n```\r\n\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected that a function type DIE's parameters & return values to be encoded in a similar way as a function DIE.\r\n\r\nFor example, the function that is returned from getfoo() is defined this way, with the return value being the correct type and being marked with a DW_AT_variable_parameter flag:\r\n\r\n```\r\n$ readelf -wi funcdef | grep -B1 -A18 main.getfoo.func1\r\n <1><4959b>: Abbrev Number: 3 (DW_TAG_subprogram)\r\n    <4959c>   DW_AT_name        : main.getfoo.func1\r\n    <495ae>   DW_AT_low_pc      : 0x458180\r\n    <495b6>   DW_AT_high_pc     : 0x458183\r\n    <495be>   DW_AT_frame_base  : 1 byte block: 9c \t(DW_OP_call_frame_cfa)\r\n    <495c0>   DW_AT_decl_file   : 0x2\r\n    <495c4>   DW_AT_external    : 1\r\n <2><495c5>: Abbrev Number: 18 (DW_TAG_formal_parameter)\r\n    <495c6>   DW_AT_name        : p1\r\n    <495c9>   DW_AT_variable_parameter: 0\r\n    <495ca>   DW_AT_decl_line   : 7\r\n    <495cb>   DW_AT_type        : <0x4a079>\r\n    <495cf>   DW_AT_location    : 0x6ec83 (location list)\r\n <2><495d3>: Abbrev Number: 17 (DW_TAG_formal_parameter)\r\n    <495d4>   DW_AT_name        : ~r0\r\n    <495d8>   DW_AT_variable_parameter: 1      <----- flag to indicate that this is a return value\r\n    <495d9>   DW_AT_decl_line   : 7\r\n    <495da>   DW_AT_type        : <0x499c9>   <---- normal bool type\r\n    <495de>   DW_AT_location    : 0 byte block: \t()\r\n <2><495df>: Abbrev Number: 0\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\nLooking at the DWARF for the function type definition, I get a DIE that defines 2 parameters with no way to tell that the last parameter is a return value:\r\n\r\n```\r\n$ readelf -wi funcdef | grep -A10 myfunctype\r\n    <4a03f>   DW_AT_name        : main.myfunctype\r\n    <4a04f>   DW_AT_byte_size   : 8\r\n    <4a050>   Unknown AT value: 2900: 19\r\n    <4a051>   Unknown AT value: 2904: 0x0\r\n <2><4a059>: Abbrev Number: 25 (DW_TAG_formal_parameter)\r\n    <4a05a>   DW_AT_type        : <0x4a079>\r\n <2><4a05e>: Abbrev Number: 25 (DW_TAG_formal_parameter)\r\n    <4a05f>   DW_AT_type        : <0x499da>   <--- bool* type instead of bool\r\n<2><4a063>: Abbrev Number: 0                   <--------- this is where I would expect a DW_AT_variable_parameter flag\r\n...\r\n\r\n$ readelf -wi funcdef | grep -A10 ""<499da""\r\n <1><499da>: Abbrev Number: 35 (DW_TAG_pointer_type)\r\n    <499db>   DW_AT_name        : *bool\r\n    <499e1>   DW_AT_type        : <0x499c9>\r\n    <499e5>   Unknown AT value: 2900: 0\r\n    <499e6>   Unknown AT value: 2904: 0x2760\r\n...\r\n```\r\n\r\nAdditionally, the return types are converted to a pointer-to-real-return-type.\r\n","go\r\npackage main\r\n\r\ntype myfunctype func(int) bool\r\n\r\n//go:noinline\r\nfunc getfoo() myfunctype {\r\n\treturn func(p1 int) bool {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\r\n\tfoo := getfoo();\r\n\r\n\tprintln(""foo: "", foo(1))\r\n}\r\n\r\n"
59976,"x/tools/gopls: organizeImports is non-deterministicDiscovered while porting the marker tests: organizeImports is non-deterministic in its manipulation of the AST. For example, consider the following program:\r\n\r\n\r\n\r\nWhen removing the import block, organizeImports leaves behind exactly one of the `a`, `b`, comments, but non-deterministically.",NeedsInvestigation|gopls|Tools,findleyr,"Discovered while porting the marker tests: organizeImports is non-deterministic in its manipulation of the AST. For example, consider the following program:\r\n\r\n```go\r\npackage p\r\n\r\nimport (\r\n   ""fmt"" // a\r\n   ""bytes"" // b\r\n)\r\n```\r\n\r\nWhen removing the import block, organizeImports leaves behind exactly one of the `a`, `b`, comments, but non-deterministically.","go\r\npackage p\r\n\r\nimport (\r\n   ""fmt"" // a\r\n   ""bytes"" // b\r\n)\r\n"
59958,"go/types, types2: cannot handle partially instantiated generic function argument\r\nThe type-checker currently cannot handle a partially instantiated generic function argument.\r\nWould be good to fix for 1.21 but not a release blocker.\r\n",NeedsFix,griesemer,"```Go\r\npackage p\r\n\r\nfunc f(func(int) string) {}\r\n\r\nfunc g[P, Q any](P) Q { var q Q; return q }\r\n\r\nfunc _() {\r\n\tf(g)      // ok\r\n\tf(g[int]) // ERROR: cannot infer Q\r\n\r\n\tvar _ func(int) string = g      // ok\r\n\tvar _ func(int) string = g[int] // ok\r\n}\r\n```\r\nThe type-checker currently cannot handle a partially instantiated generic function argument.\r\nWould be good to fix for 1.21 but not a release blocker.\r\n","Go\r\npackage p\r\n\r\nfunc f(func(int) string) {}\r\n\r\nfunc g[P, Q any](P) Q { var q Q; return q }\r\n\r\nfunc _() {\r\n\tf(g)      // ok\r\n\tf(g[int]) // ERROR: cannot infer Q\r\n\r\n\tvar _ func(int) string = g      // ok\r\n\tvar _ func(int) string = g[int] // ok\r\n}\r\n"
59956,"go/types, types2: type inference fails when passing the same generic function twice\r\nproduces\r\n```\r\nx.go:8:7: type func[P any](P) of g does not match func(string)\r\n```\r\n\r\nAnalysis (by @findleyr): we need to rename `g`'s type parameters to avoid conflicts.",NeedsFix|release-blocker,griesemer,"```Go\r\npackage p\r\n\r\nfunc f(func(int), func(string)) {}\r\n\r\nfunc g[P any](P) {}\r\n\r\nfunc _() {\r\n\tf(g, g)\r\n}\r\n```\r\nproduces\r\n```\r\nx.go:8:7: type func[P any](P) of g does not match func(string)\r\n```\r\n\r\nAnalysis (by @findleyr): we need to rename `g`'s type parameters to avoid conflicts.","Go\r\npackage p\r\n\r\nfunc f(func(int), func(string)) {}\r\n\r\nfunc g[P any](P) {}\r\n\r\nfunc _() {\r\n\tf(g, g)\r\n}\r\n"
59954,"cmd/cgo: recognize that unsafe.StringData only points to a stringAfter https://go.dev/cl/483815 this program fails when run with `GOEXPERIMENT=boringcrypto`:\r\n\r\n\r\n\r\nRunning this program normally works fine.  With `GOEXPERIMENT=boringcrypto` it fails with\r\n\r\n```\r\npanic: runtime error: cgo argument has Go pointer to Go pointer\r\n\r\ngoroutine 1 [running]:\r\ncrypto/internal/boring.(*sha1Hash).WriteString.func1(0xc00009e000, {0x6fbcf0, 0x1})\r\n\t/home/iant/go/src/crypto/internal/boring/sha.go:149 +0x30\r\ncrypto/internal/boring.(*sha1Hash).WriteString(0xc0000061a0?, {0x6fbcf0?, 0x1})\r\n\t/home/iant/go/src/crypto/internal/boring/sha.go:149 +0x25\r\nmain.hash({0x6fbcf0, 0x1}, {0x0, 0x0})\r\n\t/home/iant/foo.go:12 +0x85\r\nmain.main()\r\n\t/home/iant/foo.go:27 +0x3d\r\nexit status 2\r\n```\r\n\r\nThe problem is that the boringcrypto code looks like this:\r\n\r\n\r\n\r\nThe cgo command does not recognize that passing `unsafe.Pointer(unsafe.StringData(s))` should only check the contents of the string.  Since it doesn't recognize that, it winds up checking the entire contents of the struct that contains the string, leading to report an incorrect error.\r\n\r\nWhile this test case is rather artificial, a more realistic test case can be constructed using arenas, in which the arena itself plays the part of the struct that may have associated pointers.\r\n",NeedsFix|compiler/runtime,ianlancetaylor,"After https://go.dev/cl/483815 this program fails when run with `GOEXPERIMENT=boringcrypto`:\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/sha1""\r\n\t""fmt""\r\n\t""io""\r\n\t""unsafe""\r\n)\r\n\r\nfunc hash(a, b string) []byte {\r\n\th := sha1.New()\r\n\th.(io.StringWriter).WriteString(a+b)\r\n\treturn h.Sum(nil)\r\n}\r\n\r\ntype S struct {\r\n\tbuf [5]byte\r\n\tz   int\r\n\tp   *int\r\n}\r\n\r\nvar x = S{p: new(int)}\r\n\r\nfunc main() {\r\n\tx.buf[0] = 'a'\r\n\ts := unsafe.String(&x.buf[0], 1)\r\n\tfmt.Printf(""%x\\n"", hash(s, """"))\r\n}\r\n```\r\n\r\nRunning this program normally works fine.  With `GOEXPERIMENT=boringcrypto` it fails with\r\n\r\n```\r\npanic: runtime error: cgo argument has Go pointer to Go pointer\r\n\r\ngoroutine 1 [running]:\r\ncrypto/internal/boring.(*sha1Hash).WriteString.func1(0xc00009e000, {0x6fbcf0, 0x1})\r\n\t/home/iant/go/src/crypto/internal/boring/sha.go:149 +0x30\r\ncrypto/internal/boring.(*sha1Hash).WriteString(0xc0000061a0?, {0x6fbcf0?, 0x1})\r\n\t/home/iant/go/src/crypto/internal/boring/sha.go:149 +0x25\r\nmain.hash({0x6fbcf0, 0x1}, {0x0, 0x0})\r\n\t/home/iant/foo.go:12 +0x85\r\nmain.main()\r\n\t/home/iant/foo.go:27 +0x3d\r\nexit status 2\r\n```\r\n\r\nThe problem is that the boringcrypto code looks like this:\r\n\r\n```Go\r\nfunc (h *sha1Hash) WriteString(s string) (int, error) {\r\n\tif len(s) > 0 && C._goboringcrypto_SHA1_Update(h.noescapeCtx(), unsafe.Pointer(unsafe.StringData(s)), C.size_t(len(s))) == 0 {\r\n\t\tpanic(""boringcrypto: SHA1_Update failed"")\r\n\t}\r\n\treturn len(s), nil\r\n}\r\n```\r\n\r\nThe cgo command does not recognize that passing `unsafe.Pointer(unsafe.StringData(s))` should only check the contents of the string.  Since it doesn't recognize that, it winds up checking the entire contents of the struct that contains the string, leading to report an incorrect error.\r\n\r\nWhile this test case is rather artificial, a more realistic test case can be constructed using arenas, in which the arena itself plays the part of the struct that may have associated pointers.\r\n","Go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/sha1""\r\n\t""fmt""\r\n\t""io""\r\n\t""unsafe""\r\n)\r\n\r\nfunc hash(a, b string) []byte {\r\n\th := sha1.New()\r\n\th.(io.StringWriter).WriteString(a+b)\r\n\treturn h.Sum(nil)\r\n}\r\n\r\ntype S struct {\r\n\tbuf [5]byte\r\n\tz   int\r\n\tp   *int\r\n}\r\n\r\nvar x = S{p: new(int)}\r\n\r\nfunc main() {\r\n\tx.buf[0] = 'a'\r\n\ts := unsafe.String(&x.buf[0], 1)\r\n\tfmt.Printf(""%x\\n"", hash(s, """"))\r\n}\r\n"
59953,"go/types, types2: type inference fails if inferred type is generic function\r\nfails to infer the _instantiated_ type for `g`:\r\n```\r\n== infer : [P\u2083, Q\u2082](P\u2083) \u279e []\r\n== function parameters: (P\u2083)\r\n-- function arguments : [g (value of type func[Q int](Q))]\r\n.  P\u2083 \u2261 func[Q\u2082 int](Q\u2082)\r\n.  P\u2083 \u279e func[Q\u2082 int](Q\u2082)\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](Q\u2082), <nil>]\r\n\r\n== type parameters: [P\u2083, Q\u2082]\r\n-- iteration 0\r\n-- type parameter P\u2083 = func[Q\u2082 int](Q\u2082): core(P\u2083) = \u2205, single = false\r\n-- type parameter Q\u2082 = <nil>: core(Q\u2082) = int, single = true\r\nQ\u2082 \u279e int\r\n\r\n-- iteration 1\r\n-- type parameter P\u2083 = func[Q\u2082 int](Q\u2082): core(P\u2083) = \u2205, single = false\r\n-- type parameter Q\u2082 = int: core(Q\u2082) = int, single = true\r\n.  int \u2261 int\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](Q\u2082), int]\r\n\r\n== untyped arguments: []\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](int), int]\r\n\r\n--- FAIL: TestManual (0.00s)\r\n    check_test.go:164: testdata/manual.go:12:22: cannot use g (value of type func(int)) as func[Q int](int) value in argument to f\r\n```\r\nThis looks like a substitution failure (type parameters are ignored) when doing substitution.\r\n\r\nShould be fixed for 1.21 but not necessarily a release blocker as it's a somewhat esoteric case.\r\n\r\n",NeedsInvestigation,griesemer,"```Go\r\npackage p\r\n\r\nfunc _()         { f(g) }\r\nfunc f[P any](P) {}\r\nfunc g[Q int](Q) {}\r\n```\r\nfails to infer the _instantiated_ type for `g`:\r\n```\r\n== infer : [P\u2083, Q\u2082](P\u2083) \u279e []\r\n== function parameters: (P\u2083)\r\n-- function arguments : [g (value of type func[Q int](Q))]\r\n.  P\u2083 \u2261 func[Q\u2082 int](Q\u2082)\r\n.  P\u2083 \u279e func[Q\u2082 int](Q\u2082)\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](Q\u2082), <nil>]\r\n\r\n== type parameters: [P\u2083, Q\u2082]\r\n-- iteration 0\r\n-- type parameter P\u2083 = func[Q\u2082 int](Q\u2082): core(P\u2083) = \u2205, single = false\r\n-- type parameter Q\u2082 = <nil>: core(Q\u2082) = int, single = true\r\nQ\u2082 \u279e int\r\n\r\n-- iteration 1\r\n-- type parameter P\u2083 = func[Q\u2082 int](Q\u2082): core(P\u2083) = \u2205, single = false\r\n-- type parameter Q\u2082 = int: core(Q\u2082) = int, single = true\r\n.  int \u2261 int\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](Q\u2082), int]\r\n\r\n== untyped arguments: []\r\n=> [P\u2083, Q\u2082] \u279e [func[Q\u2082 int](int), int]\r\n\r\n--- FAIL: TestManual (0.00s)\r\n    check_test.go:164: testdata/manual.go:12:22: cannot use g (value of type func(int)) as func[Q int](int) value in argument to f\r\n```\r\nThis looks like a substitution failure (type parameters are ignored) when doing substitution.\r\n\r\nShould be fixed for 1.21 but not necessarily a release blocker as it's a somewhat esoteric case.\r\n\r\n",Go\r\npackage p\r\n\r\nfunc _()         { f(g) }\r\nfunc f[P any](P) {}\r\nfunc g[Q int](Q) {}\r\n
59952,"cmd/link: relative paths are not respected when checking supported linker flags### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, it even reproduces when building go off of main.\r\nFrom looking at the code, it seems like all versions of go should be affected.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/james/.cache/go-build""\r\nGOENV=""/home/james/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/james/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/james""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/px_dev/tools/golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/px_dev/tools/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2321536912=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nI created the following script to reproduce the exact issue I'm seeing.\r\n<details><summary><code>repro.sh</code></summary>\r\n\r\n\r\n\r\n</details>\r\n\r\nRan `./repro.sh`. Also ran `USE_DEV_GO=1 ./repro.sh` inside of the go repository after running `./all.bash` off of main, to test against main.\r\n\r\n### What did you expect to see?\r\n`./repro.sh` to not return an error code.\r\n\r\n\r\n### What did you see instead?\r\n`./repro.sh` returns an error code because `-no-pie` or `-nopie` are not added to the external link flags.\r\n\r\nThe way that the [`linkerFlagSupported`](https://github.com/golang/go/blob/0d347544cbca0f42b160424f6bc2458ebcc7b3fc/src/cmd/link/internal/ld/lib.go#L1994) function works, means that if `-extld` or `-extldflags` reference relative paths they can cause `linkerFlagSupported` to return `false`, leading linker flags to not be added when they should be. In my repro script, this manifests itself in `-no-pie` not getting added to the external link flags, which can cause downstream issues. For example, when using [bazelbuild/rules_go](https://github.com/bazelbuild/rules_go) with a relative compiler path and with a compiler that defaults to PIE, the built go binaries end up segfaulting because go was compiled expecting to be run as a static binary but the external linker links it as PIE.\r\nThe repro script I provided is just one example of issues with `linkerFlagSupported` being run outside of the current working directory, but you could for example also have a relative path in `-extldflags` say `--sysroot=relative/path/to/sysroot`. \r\n\r\nThe fix is pretty simple, `linkerFlagSupported` should be run in the current working directory instead of inside the created temporary directory. I will put out a PR shortly.\r\n",NeedsFix|compiler/runtime,cherrymui,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, it even reproduces when building go off of main.\r\nFrom looking at the code, it seems like all versions of go should be affected.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/james/.cache/go-build""\r\nGOENV=""/home/james/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/james/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/james""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/px_dev/tools/golang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/px_dev/tools/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2321536912=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nI created the following script to reproduce the exact issue I'm seeing.\r\n<details><summary><code>repro.sh</code></summary>\r\n\r\n```bash\r\n#!/bin/bash -e\r\n\r\ngo=""go""\r\nif [[ ""$USE_DEV_GO"" = ""1"" ]]; then\r\n  go=""$(pwd)/bin/go""\r\nfi\r\n\r\ntmpdir=""$(mktemp -d)""\r\npushd ""${tmpdir}"" &>/dev/null\r\n\r\ncleanup() {\r\n  rm -rf ""${tmpdir}""\r\n}\r\ntrap cleanup ERR\r\ntrap cleanup EXIT\r\n\r\ncat <<EOF > trivial.go\r\npackage main\r\nfunc main() {}\r\nEOF\r\n\r\ncat <<EOF > mycompiler.sh\r\n#!/bin/bash\r\nclang ""\\$@""\r\nEOF\r\n\r\nchmod +x mycompiler.sh\r\n\r\nexport CGO_ENABLED=1\r\n""${go}"" build -ldflags '-extld ./mycompiler.sh -linkmode=external -buildmode=exe -v' trivial.go 2>&1 | tee -a build_out\r\n\r\nhost_link=""$(grep ""host link:"" build_out)""\r\n\r\nif (echo ""${host_link}"" | grep -- '-no-pie') || (echo ""${host_link}"" | grep -- '-nopie'); then\r\n  echo ""Host link has -no-pie or -nopie""\r\nelse\r\n  echo ""Host link missing expected -no-pie or -nopie""\r\n  exit 10\r\nfi\r\n\r\ncleanup\r\n```\r\n\r\n</details>\r\n\r\nRan `./repro.sh`. Also ran `USE_DEV_GO=1 ./repro.sh` inside of the go repository after running `./all.bash` off of main, to test against main.\r\n\r\n### What did you expect to see?\r\n`./repro.sh` to not return an error code.\r\n\r\n\r\n### What did you see instead?\r\n`./repro.sh` returns an error code because `-no-pie` or `-nopie` are not added to the external link flags.\r\n\r\nThe way that the [`linkerFlagSupported`](https://github.com/golang/go/blob/0d347544cbca0f42b160424f6bc2458ebcc7b3fc/src/cmd/link/internal/ld/lib.go#L1994) function works, means that if `-extld` or `-extldflags` reference relative paths they can cause `linkerFlagSupported` to return `false`, leading linker flags to not be added when they should be. In my repro script, this manifests itself in `-no-pie` not getting added to the external link flags, which can cause downstream issues. For example, when using [bazelbuild/rules_go](https://github.com/bazelbuild/rules_go) with a relative compiler path and with a compiler that defaults to PIE, the built go binaries end up segfaulting because go was compiled expecting to be run as a static binary but the external linker links it as PIE.\r\nThe repro script I provided is just one example of issues with `linkerFlagSupported` being run outside of the current working directory, but you could for example also have a relative path in `-extldflags` say `--sysroot=relative/path/to/sysroot`. \r\n\r\nThe fix is pretty simple, `linkerFlagSupported` should be run in the current working directory instead of inside the created temporary directory. I will put out a PR shortly.\r\n","bash\r\n#!/bin/bash -e\r\n\r\ngo=""go""\r\nif [[ ""$USE_DEV_GO"" = ""1"" ]]; then\r\n  go=""$(pwd)/bin/go""\r\nfi\r\n\r\ntmpdir=""$(mktemp -d)""\r\npushd ""${tmpdir}"" &>/dev/null\r\n\r\ncleanup() {\r\n  rm -rf ""${tmpdir}""\r\n}\r\ntrap cleanup ERR\r\ntrap cleanup EXIT\r\n\r\ncat <<EOF > trivial.go\r\npackage main\r\nfunc main() {}\r\nEOF\r\n\r\ncat <<EOF > mycompiler.sh\r\n#!/bin/bash\r\nclang ""\\$@""\r\nEOF\r\n\r\nchmod +x mycompiler.sh\r\n\r\nexport CGO_ENABLED=1\r\n""${go}"" build -ldflags '-extld ./mycompiler.sh -linkmode=external -buildmode=exe -v' trivial.go 2>&1 | tee -a build_out\r\n\r\nhost_link=""$(grep ""host link:"" build_out)""\r\n\r\nif (echo ""${host_link}"" | grep -- '-no-pie') || (echo ""${host_link}"" | grep -- '-nopie'); then\r\n  echo ""Host link has -no-pie or -nopie""\r\nelse\r\n  echo ""Host link missing expected -no-pie or -nopie""\r\n  exit 10\r\nfi\r\n\r\ncleanup\r\n"
59942,"cmd/cgo: building fully statically linked executable for Android fails when cgo is enabled<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/leleliu008/.cache/go-build""\r\nGOENV=""/home/leleliu008/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/leleliu008/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""android""\r\nGOPATH=""/home/leleliu008/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nAR=""/home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar""\r\nCC=""/home/leleliu008/.ndk-pkg/core/bin/proxy-target-cc""\r\nCXX=""/home/leleliu008/.ndk-pkg/core/bin/proxy-target-c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""--sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -fPIC -fno-common -Os""\r\nCGO_CPPFLAGS=""-I/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/include --sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -include /home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/include/ndk-pkg-common.h -DNDEBUG""\r\nCGO_CXXFLAGS=""--sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -fPIC -fno-common -Os""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-L/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/lib --sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Wl,--as-needed -Wl,-z,muldefs -Wl,--allow-multiple-definition -static --static -ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--no-dynamic-linker -Wl,-S""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build155171888=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n### What did you do?\r\n```\r\ngo build -trimpath -v -ldflags ' -s -w -linkmode external ""-extldflags=-static""' -tags release\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\nsuccessfully built\r\n\r\n\r\n### What did you see instead?\r\n```\r\n/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec/pkg/tool/linux_amd64/link: running /home/leleliu008/.ndk-pkg/core/bin/proxy-target-cc failed: exit status 1\r\nld: error: undefined symbol: __android_log_vprint\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(fatalf)\r\n\r\nld: error: undefined symbol: dlopen\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\n\r\nld: error: undefined symbol: dlsym\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\n\r\nld: error: undefined symbol: dlclose\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\nclang-12: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\n### more\r\n\r\nhttps://github.com/golang/go/blob/master/src/runtime/cgo/gcc_android.c\r\n\r\ngcc_android.c rely on `liblog.so` and `libdl.so`\r\n\r\nNote: Android NDK do not provides `liblog.a`\r\n\r\nstatically linked executable can not use functions in libdl.\r\n\r\nto get runtime os SDK API Level, I usually use follwoing code:\r\n\r\n",OS-Android|NeedsInvestigation|compiler/runtime,changkun,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/leleliu008/.cache/go-build""\r\nGOENV=""/home/leleliu008/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/leleliu008/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""android""\r\nGOPATH=""/home/leleliu008/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nAR=""/home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar""\r\nCC=""/home/leleliu008/.ndk-pkg/core/bin/proxy-target-cc""\r\nCXX=""/home/leleliu008/.ndk-pkg/core/bin/proxy-target-c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""--sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -fPIC -fno-common -Os""\r\nCGO_CPPFLAGS=""-I/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/include --sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -include /home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/include/ndk-pkg-common.h -DNDEBUG""\r\nCGO_CXXFLAGS=""--sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Qunused-arguments -fPIC -fno-common -Os""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-L/home/leleliu008/.ndk-pkg/installing/android-31/arm64-v8a/yq/lib --sysroot /home/leleliu008/.ndk-pkg/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/sysroot -Wl,--as-needed -Wl,-z,muldefs -Wl,--allow-multiple-definition -static --static -ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--no-dynamic-linker -Wl,-S""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build155171888=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n### What did you do?\r\n```\r\ngo build -trimpath -v -ldflags ' -s -w -linkmode external ""-extldflags=-static""' -tags release\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\nsuccessfully built\r\n\r\n\r\n### What did you see instead?\r\n```\r\n/home/linuxbrew/.linuxbrew/Cellar/go/1.20.3/libexec/pkg/tool/linux_amd64/link: running /home/leleliu008/.ndk-pkg/core/bin/proxy-target-cc failed: exit status 1\r\nld: error: undefined symbol: __android_log_vprint\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(fatalf)\r\n\r\nld: error: undefined symbol: dlopen\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\n\r\nld: error: undefined symbol: dlsym\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\n\r\nld: error: undefined symbol: dlclose\r\n>>> referenced by gcc_android.c\r\n>>>               /tmp/go-link-1481358754/000008.o:(inittls)\r\nclang-12: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\n### more\r\n\r\nhttps://github.com/golang/go/blob/master/src/runtime/cgo/gcc_android.c\r\n\r\ngcc_android.c rely on `liblog.so` and `libdl.so`\r\n\r\nNote: Android NDK do not provides `liblog.a`\r\n\r\nstatically linked executable can not use functions in libdl.\r\n\r\nto get runtime os SDK API Level, I usually use follwoing code:\r\n\r\n```c\r\nchar buff[PROP_VALUE_MAX];\r\n\r\nint n = __system_property_get(""ro.build.version.sdk"", buff);\r\n\r\nif (n > 0) {\r\n    return 0;\r\n} else {\r\n    return -1; \r\n}\r\n```","c\r\nchar buff[PROP_VALUE_MAX];\r\n\r\nint n = __system_property_get(""ro.build.version.sdk"", buff);\r\n\r\nif (n > 0) {\r\n    return 0;\r\n} else {\r\n    return -1; \r\n}\r\n"
59938,"go/test: coverage test fails with ""error generating coverage report: write tmp: file already closed"" with golang 1.20<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n\u276f podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go version'\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\u276f podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go env'\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/v/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build236938569=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\non podman intel macOS\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nwith golang 1.20, coverage test of [`coredns/plugin/file/tree`](https://github.com/coredns/coredns/tree/master/plugin/file/tree) fails with error `error generating coverage report: write tmp: file already closed`.\r\nwith golang 1.19, it doesn't fail.\r\n\r\nThis is a recipe for reproducing the error.\r\n\r\n\r\nThis is reproducible with local golang (go version go1.20.3 darwin/amd64)\r\n```\r\n$ git clone git@github.com:bitoku/coredns.git\r\n$ cd coredns/plugin/file/tree\r\n$ go test -covermode=atomic -race ./...\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.466s\r\nFAIL\r\n```\r\n\r\nOther coverage tests don't fail.\r\n\r\nsee https://github.com/coredns/coredns/pull/6067#issuecomment-1532222281 for reference.\r\n\r\n### What did you expect to see?\r\n\r\nwith golang 1.19.9\r\n```\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.19.9 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nok  \tgithub.com/coredns/coredns/plugin/file/tree\t0.027s\r\n```\r\n\r\n### What did you see instead?\r\n\r\nwith golang 1.20.4\r\n```\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.029s\r\nFAIL\r\n```\r\n\r\n",NeedsInvestigation,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n\u276f podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go version'\r\ngo version go1.20.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\u276f podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go env'\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/v/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build236938569=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\non podman intel macOS\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nwith golang 1.20, coverage test of [`coredns/plugin/file/tree`](https://github.com/coredns/coredns/tree/master/plugin/file/tree) fails with error `error generating coverage report: write tmp: file already closed`.\r\nwith golang 1.19, it doesn't fail.\r\n\r\nThis is a recipe for reproducing the error.\r\n```bash\r\n$ git clone git@github.com:bitoku/coredns.git\r\n$ cd coredns\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.029s\r\nFAIL\r\n```\r\n\r\nThis is reproducible with local golang (go version go1.20.3 darwin/amd64)\r\n```\r\n$ git clone git@github.com:bitoku/coredns.git\r\n$ cd coredns/plugin/file/tree\r\n$ go test -covermode=atomic -race ./...\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.466s\r\nFAIL\r\n```\r\n\r\nOther coverage tests don't fail.\r\n\r\nsee https://github.com/coredns/coredns/pull/6067#issuecomment-1532222281 for reference.\r\n\r\n### What did you expect to see?\r\n\r\nwith golang 1.19.9\r\n```\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.19.9 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nok  \tgithub.com/coredns/coredns/plugin/file/tree\t0.027s\r\n```\r\n\r\n### What did you see instead?\r\n\r\nwith golang 1.20.4\r\n```\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.029s\r\nFAIL\r\n```\r\n\r\n",bash\r\n$ git clone git@github.com:bitoku/coredns.git\r\n$ cd coredns\r\n$ podman run --rm -it -v $PWD:/v -w /v/plugin/file/tree golang:1.20.4 sh -c 'go test -covermode=atomic -race ./...'\r\ngo: downloading github.com/miekg/dns v1.1.53\r\ngo: downloading golang.org/x/net v0.9.0\r\ngo: downloading golang.org/x/sys v0.7.0\r\nerror generating coverage report: write tmp: file already closed\r\nFAIL\tgithub.com/coredns/coredns/plugin/file/tree\t0.029s\r\nFAIL\r\n
59902,"runtime:  pointer assignment in tight loop cause long STW<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/zgy/.cache/go-build""\r\nGOENV=""/home/zgy/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/zgy/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/zgy/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/zgy/00.Tools/stablego/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/zgy/00.Tools/stablego/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2002358002=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\nUse `go build` to build this single file program. \r\nAnd use `export GODEBUG=gctrace=1` to enable gctrace.\r\nThen just excute it.\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe STW time of GC should in normal range. Maybe microseconds to milliseconds.\r\n\r\n### What did you see instead?\r\n<pre>\r\n./main \r\ngc 1 @1.001s 24%: 328+4201+1363 ms clock, 5259+0/0.13/0+21812 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 2 @6.894s 39%: 48+3432+3799 ms clock, 768+0/0.10/0+60788 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 3 @14.173s 41%: 389+838+673 ms clock, 6231+0/0.13/0+10774 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 4 @16.075s 49%: 2399+319+544 ms clock, 38386+0/0.12/0+8716 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 5 @19.339s 38%: 413+7188+725 ms clock, 6621+0/0.10/0+11607 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 6 @27.667s 40%: 15+145+1200 ms clock, 243+0/0.091/0+19212 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 7 @29.028s 45%: 1281+450+1298 ms clock, 20501+0/0.11/0+20773 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\n</pre>\r\n\r\nActually, The second STW during GC is about one second. I have even observed it will be several minutes.\r\n\r\nIt seems that this may be related to #36365 . There is a task ""Make large pointer-full memmoves/memclrs preemptible"" in it. But it seems that it is no more update about it.",NeedsInvestigation|compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/zgy/.cache/go-build""\r\nGOENV=""/home/zgy/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/zgy/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/zgy/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/zgy/00.Tools/stablego/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/zgy/00.Tools/stablego/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2002358002=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""runtime""\r\n\t""time""\r\n)\r\n\r\nvar a = [1000]*int{}\r\n\r\nfunc Func1() {\r\n\tvar b [1000]*int\r\n\tfor a[0] == nil {\r\n\t\ta = b\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tgo Func1()\r\n\tticker := time.NewTicker(time.Second)\r\n\tfor range ticker.C {\r\n\t\truntime.GC()\r\n\t}\r\n}\r\n```\r\n\r\nUse `go build` to build this single file program. \r\nAnd use `export GODEBUG=gctrace=1` to enable gctrace.\r\nThen just excute it.\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe STW time of GC should in normal range. Maybe microseconds to milliseconds.\r\n\r\n### What did you see instead?\r\n<pre>\r\n./main \r\ngc 1 @1.001s 24%: 328+4201+1363 ms clock, 5259+0/0.13/0+21812 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 2 @6.894s 39%: 48+3432+3799 ms clock, 768+0/0.10/0+60788 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 3 @14.173s 41%: 389+838+673 ms clock, 6231+0/0.13/0+10774 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 4 @16.075s 49%: 2399+319+544 ms clock, 38386+0/0.12/0+8716 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 5 @19.339s 38%: 413+7188+725 ms clock, 6621+0/0.10/0+11607 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 6 @27.667s 40%: 15+145+1200 ms clock, 243+0/0.091/0+19212 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\ngc 7 @29.028s 45%: 1281+450+1298 ms clock, 20501+0/0.11/0+20773 ms cpu, 0->0->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 16 P (forced)\r\n</pre>\r\n\r\nActually, The second STW during GC is about one second. I have even observed it will be several minutes.\r\n\r\nIt seems that this may be related to #36365 . There is a task ""Make large pointer-full memmoves/memclrs preemptible"" in it. But it seems that it is no more update about it.","go\r\npackage main\r\n\r\nimport (\r\n\t""runtime""\r\n\t""time""\r\n)\r\n\r\nvar a = [1000]*int{}\r\n\r\nfunc Func1() {\r\n\tvar b [1000]*int\r\n\tfor a[0] == nil {\r\n\t\ta = b\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tgo Func1()\r\n\tticker := time.NewTicker(time.Second)\r\n\tfor range ticker.C {\r\n\t\truntime.GC()\r\n\t}\r\n}\r\n"
59754,"x/vuln: ""panic: interface conversion: types.Type is *types.Interface, not *types.Array""### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nYes, the version is `v0.0.0-20230420164154-4183d94fd335`. \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""/Users/alexeykiselev/go/bin""\r\nGOCACHE=""/Users/alexeykiselev/Library/Caches/go-build""\r\nGOENV=""/Users/alexeykiselev/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/alexeykiselev/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/alexeykiselev/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/opt/go/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/opt/go/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cl/l92tcvwd0vz1wx2mwp9v468r0000gn/T/go-build2991959473=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Update `govulncheck`.\r\n\r\n\r\n\r\n2. Checkout project `gowaves`.\r\n\r\n\r\n\r\n3. Run `govulncheck`.\r\n\r\n```\r\ncd gowaves\r\ngovulncheck ./...\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful execution. \r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nUsing go1.20.3 and govulncheck@v0.0.0 with\r\nvulnerability data from https://vuln.go.dev (last modified 2023-04-18 21:32:26 +0000 UTC).\r\n\r\nScanning your code and 555 packages across 93 dependent modules for known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 9011 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0x164ed98, 0xc06732bac0})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/utils.go:126 +0x185\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc06c0bfc08?, 0xc0673502a0)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:486 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc06c0bfaf0?, {0x1652978?, 0xc0673502a0?})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:358 +0x2cd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:300\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc06c0bfc08, 0x50?)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:292 +0x1bf\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:266\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc06c0bfee0?, 0xc04f645040)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/internal/vulncheck.callGraph({0x1651180, 0xc000b12c30}, 0xc010ef0540, {0xc02b966000, 0x1628, 0x0?})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/utils.go:80 +0x23e\r\ngolang.org/x/vuln/internal/vulncheck.Source.func1()\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/source.go:80 +0xf5\r\ncreated by golang.org/x/vuln/internal/vulncheck.Source\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/source.go:76 +0x3e5\r\n```\r\n\r\nAlso project's GitHub Action fails with the same error, but different version of `govulncheck`:\r\n\r\n```\r\ngo: downloading golang.org/x/vuln v0.0.0-20230419231234-ceb2c82124a6\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nUsing go1.19.8 and govulncheck@v0.0.0 with\r\nvulnerability data from https://vuln.go.dev/ (last modified 2023-04-18 21:32:26 +0000 UTC).\r\n\r\nScanning your code and 554 packages across 93 dependent modules for known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 8928 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0xa40290, 0xc0674ad440})\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/utils.go:126 +0x1bd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc08be1dc08?, 0xc0674ccba0)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:486 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc08be1daf0?, {0xa443b8?, 0xc0674ccba0?})\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:358 +0x165\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:300\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc08be1dc08, 0xf?)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:292 +0x1e5\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:266\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc08be1dee0?, 0xc03febee40)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/internal/vulncheck.callGraph({0xa42838, 0xc013b3b340}, 0xc049909680, {0xc000c96000, 0x1628, 0x0?})\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/utils.go:80 +0x23e\r\ngolang.org/x/vuln/internal/vulncheck.Source.func1()\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/source.go:80 +0xf5\r\ncreated by golang.org/x/vuln/internal/vulncheck.Source\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/source.go:76 +0x3db\r\nError: Process completed with exit code 2.\r\n```\r\n",NeedsInvestigation|vulncheck or vulndb,zpavlinovic,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nYes, the version is `v0.0.0-20230420164154-4183d94fd335`. \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""/Users/alexeykiselev/go/bin""\r\nGOCACHE=""/Users/alexeykiselev/Library/Caches/go-build""\r\nGOENV=""/Users/alexeykiselev/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/alexeykiselev/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/alexeykiselev/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/opt/go/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/opt/go/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cl/l92tcvwd0vz1wx2mwp9v468r0000gn/T/go-build2991959473=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Update `govulncheck`.\r\n\r\n```bash\r\ngo install golang.org/x/vuln/cmd/govulncheck@latest\r\ngo: downloading golang.org/x/vuln v0.0.0-20230420164154-4183d94fd335\r\n```\r\n\r\n2. Checkout project `gowaves`.\r\n\r\n```bash\r\ngit clone https://github.com/wavesplatform/gowaves.git\r\n```\r\n\r\n3. Run `govulncheck`.\r\n\r\n```\r\ncd gowaves\r\ngovulncheck ./...\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful execution. \r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nUsing go1.20.3 and govulncheck@v0.0.0 with\r\nvulnerability data from https://vuln.go.dev (last modified 2023-04-18 21:32:26 +0000 UTC).\r\n\r\nScanning your code and 555 packages across 93 dependent modules for known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 9011 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0x164ed98, 0xc06732bac0})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/utils.go:126 +0x185\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc06c0bfc08?, 0xc0673502a0)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:486 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc06c0bfaf0?, {0x1652978?, 0xc0673502a0?})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:358 +0x2cd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:300\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc06c0bfc08, 0x50?)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:292 +0x1bf\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:266\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc06c0bfee0?, 0xc04f645040)\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/internal/vulncheck.callGraph({0x1651180, 0xc000b12c30}, 0xc010ef0540, {0xc02b966000, 0x1628, 0x0?})\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/utils.go:80 +0x23e\r\ngolang.org/x/vuln/internal/vulncheck.Source.func1()\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/source.go:80 +0xf5\r\ncreated by golang.org/x/vuln/internal/vulncheck.Source\r\n\t/Users/alexeykiselev/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230420164154-4183d94fd335/internal/vulncheck/source.go:76 +0x3e5\r\n```\r\n\r\nAlso project's GitHub Action fails with the same error, but different version of `govulncheck`:\r\n\r\n```\r\ngo: downloading golang.org/x/vuln v0.0.0-20230419231234-ceb2c82124a6\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nUsing go1.19.8 and govulncheck@v0.0.0 with\r\nvulnerability data from https://vuln.go.dev/ (last modified 2023-04-18 21:32:26 +0000 UTC).\r\n\r\nScanning your code and 554 packages across 93 dependent modules for known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 8928 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0xa40290, 0xc0674ad440})\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/utils.go:126 +0x1bd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc08be1dc08?, 0xc0674ccba0)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:486 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc08be1daf0?, {0xa443b8?, 0xc0674ccba0?})\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:358 +0x165\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:300\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc08be1dc08, 0xf?)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:292 +0x1e5\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/graph.go:266\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc08be1dee0?, 0xc03febee40)\r\n\t/home/runner/go/pkg/mod/golang.org/x/tools@v0.7.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/internal/vulncheck.callGraph({0xa42838, 0xc013b3b340}, 0xc049909680, {0xc000c96000, 0x1628, 0x0?})\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/utils.go:80 +0x23e\r\ngolang.org/x/vuln/internal/vulncheck.Source.func1()\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/source.go:80 +0xf5\r\ncreated by golang.org/x/vuln/internal/vulncheck.Source\r\n\t/home/runner/go/pkg/mod/golang.org/x/vuln@v0.0.0-20230419231234-ceb2c82124a6/internal/vulncheck/source.go:76 +0x3db\r\nError: Process completed with exit code 2.\r\n```\r\n",bash\r\ngo install golang.org/x/vuln/cmd/govulncheck@latest\r\ngo: downloading golang.org/x/vuln v0.0.0-20230420164154-4183d94fd335\r\n
59695,"crypto/rsa: rsa.PrivateKey with json.Unmarshal and Go1.20 results in slow keys<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/evan.jones/Library/Caches/go-build""\r\nGOENV=""/Users/evan.jones/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/evan.jones/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/evan.jones/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/evan.jones/rsajsongo120/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build3310032317=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIf you create an `rsa.PrivateKey`, then call `json.Marshal`, then call `json.Unmarshal`, the resulting key ""works"" but is 3X slower for signing operations. The problem is that Go 1.20 added private fields to `rsa.PrecomputedValues` which do not get round-tripped. The resulting keys need to have `key.Precompute()` called to restore their performance. The following test fails on Go 1.20, but works on Go 1.19. The included benchmark demonstrates the performance problem.\r\n\r\nFrom Issue #59442 , it seems like we may want to preserve the existing behavior: https://github.com/golang/go/issues/59442#issuecomment-1513318816\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe test should pass, and the benchmark should show the two cases have approximately the same performance, like on Go 1.19:\r\n\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: example.com/rsajsongo120\r\nBenchmarkJSONRoundTrip/orig-10         \t    1179\t   1022081 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped-10 \t    1166\t   1024418 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped_after_Precompute-10         \t    1172\t   1018375 ns/op\r\nPASS\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe test fails, showing that the round tripped key has nil fields:\r\n\r\n\r\n```\r\n          roundTripped=&rsa.PrivateKey{PublicKey:rsa.PublicKey{N:24...37, E:65537}, D:21..33, Primes:[]*big.Int{...}, Precomputed:rsa.PrecomputedValues{Dp:12...13, Dq:10...41, Qinv:13...24, CRTValues:[]rsa.CRTValue{}, n:(*bigmod.Modulus)(nil), p:(*bigmod.Modulus)(nil), q:(*bigmod.Modulus)(nil)}}\r\nFAIL\r\n```\r\n\r\nThe benchmark shows ~3X slower signing until calling `Precompute()`:\r\n\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: example.com/rsajsongo120\r\nBenchmarkJSONRoundTrip/orig-10         \t     972\t   1243100 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped-10 \t     285\t   4164388 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped_after_Precompute-10         \t     961\t   1251028 ns/op\r\nPASS\r\nok  \texample.com/rsajsongo120\t4.482s\r\n```",Performance|NeedsFix,FiloSottile,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/evan.jones/Library/Caches/go-build""\r\nGOENV=""/Users/evan.jones/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/evan.jones/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/evan.jones/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""c++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/evan.jones/rsajsongo120/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build3310032317=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIf you create an `rsa.PrivateKey`, then call `json.Marshal`, then call `json.Unmarshal`, the resulting key ""works"" but is 3X slower for signing operations. The problem is that Go 1.20 added private fields to `rsa.PrecomputedValues` which do not get round-tripped. The resulting keys need to have `key.Precompute()` called to restore their performance. The following test fails on Go 1.20, but works on Go 1.19. The included benchmark demonstrates the performance problem.\r\n\r\nFrom Issue #59442 , it seems like we may want to preserve the existing behavior: https://github.com/golang/go/issues/59442#issuecomment-1513318816\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""crypto""\r\n\t""crypto/rand""\r\n\t""crypto/rsa""\r\n\t""encoding/json""\r\n\t""reflect""\r\n\t""testing""\r\n)\r\n\r\nfunc mustGenerateRSA() *rsa.PrivateKey {\r\n\tprivateKey, err := rsa.GenerateKey(rand.Reader, 2048)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn privateKey\r\n}\r\n\r\nfunc roundTripUnmarshal(privateKey *rsa.PrivateKey) *rsa.PrivateKey {\r\n\tjsonBytes, err := json.Marshal(privateKey)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\troundTripped := &rsa.PrivateKey{}\r\n\terr = json.Unmarshal(jsonBytes, roundTripped)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn roundTripped\r\n}\r\n\r\nfunc TestJSONRoundTrip(t *testing.T) {\r\n\torig := mustGenerateRSA()\r\n\troundTripped := roundTripUnmarshal(orig)\r\n\tif !reflect.DeepEqual(orig, roundTripped) {\r\n\t\tt.Errorf(""expected JSON Unmarshal key to be the same;\\n  orig=%#v\\n  roundTripped=%#v"",\r\n\t\t\torig, roundTripped)\r\n\t}\r\n}\r\n\r\nfunc BenchmarkJSONRoundTrip(b *testing.B) {\r\n\torig := mustGenerateRSA()\r\n\troundTripped := roundTripUnmarshal(orig)\r\n\r\n\tb.Run(""orig"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, orig)\r\n\t})\r\n\tb.Run(""roundTripped"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, roundTripped)\r\n\t})\r\n\troundTripped.Precompute()\r\n\tb.Run(""roundTripped_after_Precompute"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, roundTripped)\r\n\t})\r\n}\r\n\r\nfunc signBenchmark(b *testing.B, key *rsa.PrivateKey) {\r\n\tzeroDigest := make([]byte, 32)\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_, err := key.Sign(rand.Reader, zeroDigest, crypto.SHA256)\r\n\t\tif err != nil {\r\n\t\t\tb.Fatal(err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe test should pass, and the benchmark should show the two cases have approximately the same performance, like on Go 1.19:\r\n\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: example.com/rsajsongo120\r\nBenchmarkJSONRoundTrip/orig-10         \t    1179\t   1022081 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped-10 \t    1166\t   1024418 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped_after_Precompute-10         \t    1172\t   1018375 ns/op\r\nPASS\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe test fails, showing that the round tripped key has nil fields:\r\n\r\n\r\n```\r\n          roundTripped=&rsa.PrivateKey{PublicKey:rsa.PublicKey{N:24...37, E:65537}, D:21..33, Primes:[]*big.Int{...}, Precomputed:rsa.PrecomputedValues{Dp:12...13, Dq:10...41, Qinv:13...24, CRTValues:[]rsa.CRTValue{}, n:(*bigmod.Modulus)(nil), p:(*bigmod.Modulus)(nil), q:(*bigmod.Modulus)(nil)}}\r\nFAIL\r\n```\r\n\r\nThe benchmark shows ~3X slower signing until calling `Precompute()`:\r\n\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: example.com/rsajsongo120\r\nBenchmarkJSONRoundTrip/orig-10         \t     972\t   1243100 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped-10 \t     285\t   4164388 ns/op\r\nBenchmarkJSONRoundTrip/roundTripped_after_Precompute-10         \t     961\t   1251028 ns/op\r\nPASS\r\nok  \texample.com/rsajsongo120\t4.482s\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""crypto""\r\n\t""crypto/rand""\r\n\t""crypto/rsa""\r\n\t""encoding/json""\r\n\t""reflect""\r\n\t""testing""\r\n)\r\n\r\nfunc mustGenerateRSA() *rsa.PrivateKey {\r\n\tprivateKey, err := rsa.GenerateKey(rand.Reader, 2048)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn privateKey\r\n}\r\n\r\nfunc roundTripUnmarshal(privateKey *rsa.PrivateKey) *rsa.PrivateKey {\r\n\tjsonBytes, err := json.Marshal(privateKey)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\troundTripped := &rsa.PrivateKey{}\r\n\terr = json.Unmarshal(jsonBytes, roundTripped)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn roundTripped\r\n}\r\n\r\nfunc TestJSONRoundTrip(t *testing.T) {\r\n\torig := mustGenerateRSA()\r\n\troundTripped := roundTripUnmarshal(orig)\r\n\tif !reflect.DeepEqual(orig, roundTripped) {\r\n\t\tt.Errorf(""expected JSON Unmarshal key to be the same;\\n  orig=%#v\\n  roundTripped=%#v"",\r\n\t\t\torig, roundTripped)\r\n\t}\r\n}\r\n\r\nfunc BenchmarkJSONRoundTrip(b *testing.B) {\r\n\torig := mustGenerateRSA()\r\n\troundTripped := roundTripUnmarshal(orig)\r\n\r\n\tb.Run(""orig"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, orig)\r\n\t})\r\n\tb.Run(""roundTripped"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, roundTripped)\r\n\t})\r\n\troundTripped.Precompute()\r\n\tb.Run(""roundTripped_after_Precompute"", func(b *testing.B) {\r\n\t\tsignBenchmark(b, roundTripped)\r\n\t})\r\n}\r\n\r\nfunc signBenchmark(b *testing.B, key *rsa.PrivateKey) {\r\n\tzeroDigest := make([]byte, 32)\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_, err := key.Sign(rand.Reader, zeroDigest, crypto.SHA256)\r\n\t\tif err != nil {\r\n\t\t\tb.Fatal(err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n"
59690,"x/net/http2: raciness in stream close prevents closing of failed connections, blocking subsequent requests### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.3 linux/amd6\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2968508177=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nA connection is established to a remote server (using HTTP/2 where available) and requests are sent periodically over this connection - it's essentially a write pipeline working through a queue sequentially.\r\n\r\nThis being the internet, sometimes bad things happen to individual connections and packets go awry.\r\n\r\nIf a timeout occurs, the connection will (well, should) be closed:\r\n\r\n```\r\nresp, err := client.Do(req.WithContext(ctx))\r\nif err != nil {\r\n            // Attempt to tear down the connection\r\n            fmt.Println(""Timed out"")\r\n            client.CloseIdleConnections()\r\n        }\r\n```\r\n(that `CloseIdleConnections()` call is sourced from https://github.com/golang/go/issues/36026)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nOn the next request (generally a retry), a new connection should be established (if possible) and writes should resume.\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe underlying TCP connection does not get closed - the kernel sits retransmitting the most recent packets (until `net.ipv4.tcp_retries2` is reached about 17mins later).\r\n\r\nSubsequent requests all attempt to use the dead connection and so time out.\r\n\r\n\r\n### Repro\r\n\r\nThe following can be used to help repro the behaviour\r\n\r\n\r\nIf you build and run that, you should see `403` printed on a new line every second or so (it being 403 isn't pertinent here, it's just easy/convenient to generate)\r\n\r\nCheck which source port is being used\r\n```\r\nroot@ratchett:/home/ben/tmp/go_repro# netstat -anp | grep main\r\ntcp        0   2185 192.168.3.217:50446     143.244.38.137:443      ESTABLISHED 2389361/./main   \r\n```\r\n\r\nand then block it in `iptables` to break the return path \r\n\r\n```\r\niptables -I INPUT -p tcp --dport 50446 -j DROP\r\n```\r\n\r\nThe script should stop printing 403s and after around 5s will print `Timed out`.\r\n\r\nAlthough the code calls `CloseIdleConnections()`, it'll silently fail to do anything to the connection (more below)\r\n\r\nSubsequent attempts will also print `Time out` and re-running `netstat` will show that same connection still in an `ESTABLISHED` state. If you take a packet capture it'll show re-transmission of whatever packet we interrupted by adding the rule.\r\n\r\nIf you remove the `iptables` rule once the remote server starts sending resets, the kernel will tear down the connection and requests will go back to behaving as they should.\r\n\r\n----\r\n\r\n### Hacking it out\r\n\r\nIt is actually possible to work around this at the caller's level, although it's not exactly pleasant to look at.\r\n\r\n\r\n\r\nThis works because `net/http2` [specifically checks](https://github.com/golang/net/blob/master/http2/transport.go#L1344) for a `Connection: close` header before placing a request, and set's `doNotReuse` on the `ClientConn`, so when the next request comes around, the connection won't be used even if it is otherwise considered still active.\r\n\r\n----\r\n\r\n### Underlying Issue\r\n\r\nThe underlying *seems* to be that there's some raciness between normal stream closure and `closeIdleConnections()`.\r\n\r\nThe crucial check is [here](https://github.com/golang/net/blob/master/http2/transport.go#L1025)\r\n\r\n\r\nIf the map `cc.streams` contains any entries, the connection isn't considered idle and therefore can't be closed. \r\n\r\nDropping some prints in as a quick test shows it's this conditional we're failing at\r\n```\r\n@@ -7984,6 +7990,8 @@ func (cc *http2ClientConn) forceCloseConn() {\r\n func (cc *http2ClientConn) closeIfIdle() {\r\n        cc.mu.Lock()\r\n        if len(cc.streams) > 0 || cc.streamsReserved > 0 {\r\n+                fmt.Println(""Refusing to close - streams:"", len(cc.streams), "" reserved:"", cc.streamsReserved)\r\n+\r\n                cc.mu.Unlock()\r\n                return\r\n        }\r\n```\r\n\r\nGives\r\n```\r\nRefusing to close - streams: 1  reserved: 0\r\n```\r\n\r\n`net/http2` does actually try to tidy up the streams, [`doRequest`](https://github.com/golang/net/blob/master/http2/transport.go#L1299) calls [`cleanupWriteRequest`](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1503) which ultimately drops the broken stream.\r\n\r\nAdding some more prints though, shows that this only tends to happen **after** the caller has had opportunity to call `closeIdleConnections()`:\r\n```\r\nRefusing to close - streams: 1  reserved: 0\r\nDoing cleanup context deadline exceeded\r\nCleanup stream 5 got err context deadline exceeded\r\nMust close body:  false\r\nGot err Sent headers\r\nWriting reset\r\nForgetting ID  5\r\nwerr  <nil>\r\nclosing\r\n```\r\nThe string `Forgetting ID` was added [here](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1560).\r\n\r\n----\r\n\r\n### Raciness\r\n\r\nTimings definitely seem to be important here - if the `time.Sleep` call in the repro is adjusted to wait 5 seconds, you'll sometimes see a string of timeouts followed by writes recovering.\r\n\r\nThat's not the only raciness though.\r\n\r\nStream closures/timeouts etc are handled by a `select` statement [here](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1438)\r\n\r\n\r\nSometimes this is triggered by `cs.abort` and sometimes by `ctx.Done()`. This appears to be as a result of an attempt to abort the stream when the context hits deadline - so there's an element of potluck in terms of which gets through (I've not dug into this in too much depth though).\r\n\r\n----\r\n\r\n### TL:DR\r\n\r\n`CloseIdleConnections()` relies on `closeIfIdle()` which will close a connection **only** if there are no active streams on that connection.\r\n\r\nHowever, when a timeout occurs, there may be a delay before the stream is closed (leaving it visible to `closeIfIdle()`). \r\n\r\nBy the time the stream closure occurs, the timeout has already been bubbled up to the caller, who may then choose to call `CloseIdleConnections()` knowing that the connection has failed. \r\n\r\nBecause the dead connection does not get closed by this call, it remains available for use by the next request.\r\n\r\nThe result is that requests will fail until the kernel itself gives up on the connection, or a RST or FIN makes it through from the remote end.\r\n",NeedsFix,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.3 linux/amd6\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2968508177=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nA connection is established to a remote server (using HTTP/2 where available) and requests are sent periodically over this connection - it's essentially a write pipeline working through a queue sequentially.\r\n\r\nThis being the internet, sometimes bad things happen to individual connections and packets go awry.\r\n\r\nIf a timeout occurs, the connection will (well, should) be closed:\r\n\r\n```\r\nresp, err := client.Do(req.WithContext(ctx))\r\nif err != nil {\r\n            // Attempt to tear down the connection\r\n            fmt.Println(""Timed out"")\r\n            client.CloseIdleConnections()\r\n        }\r\n```\r\n(that `CloseIdleConnections()` call is sourced from https://github.com/golang/go/issues/36026)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nOn the next request (generally a retry), a new connection should be established (if possible) and writes should resume.\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe underlying TCP connection does not get closed - the kernel sits retransmitting the most recent packets (until `net.ipv4.tcp_retries2` is reached about 17mins later).\r\n\r\nSubsequent requests all attempt to use the dead connection and so time out.\r\n\r\n\r\n### Repro\r\n\r\nThe following can be used to help repro the behaviour\r\n```go\r\npackage main\r\n\r\nimport (\r\n    ""context""\r\n    ""fmt""\r\n    ""net/http""\r\n    ""time""\r\n    ""strings""\r\n)\r\n\r\nfunc main() {\r\n\r\n    // The url to place requests to\r\n    url := ""https://www.bentasker.co.uk/""\r\n\r\n    // Create an empty context\r\n    ctx := context.Background()\r\n\r\n    // Create an io.Reader from a string to act as the request body\r\n    bodystring := ""foo\\nbar\\nsed""\r\n    myReader := strings.NewReader(bodystring)\r\n\r\n    // build client and request\r\n    client := http.Client{\r\n        Timeout: 5 * time.Second,\r\n    }\r\n\r\n    // Set up an infinite loop to place requests from\r\n    for {\r\n        req, err := http.NewRequest(""POST"", url, myReader)\r\n        if err != nil {\r\n            fmt.Println(""boo"")\r\n        }\r\n        req.Header.Set(""Content-Type"", ""text/plain; charset=utf-8"")\r\n\r\n        resp, err := client.Do(req.WithContext(ctx))\r\n\r\n        if err != nil {\r\n            // Attempt to tear down the connection\r\n            fmt.Println(""Timed out"")\r\n            client.CloseIdleConnections()\r\n        } else {\r\n            fmt.Println(resp.StatusCode)\r\n        }\r\n\r\n        time.Sleep(time.Second)\r\n    }\r\n}\r\n```\r\n\r\nIf you build and run that, you should see `403` printed on a new line every second or so (it being 403 isn't pertinent here, it's just easy/convenient to generate)\r\n\r\nCheck which source port is being used\r\n```\r\nroot@ratchett:/home/ben/tmp/go_repro# netstat -anp | grep main\r\ntcp        0   2185 192.168.3.217:50446     143.244.38.137:443      ESTABLISHED 2389361/./main   \r\n```\r\n\r\nand then block it in `iptables` to break the return path \r\n\r\n```\r\niptables -I INPUT -p tcp --dport 50446 -j DROP\r\n```\r\n\r\nThe script should stop printing 403s and after around 5s will print `Timed out`.\r\n\r\nAlthough the code calls `CloseIdleConnections()`, it'll silently fail to do anything to the connection (more below)\r\n\r\nSubsequent attempts will also print `Time out` and re-running `netstat` will show that same connection still in an `ESTABLISHED` state. If you take a packet capture it'll show re-transmission of whatever packet we interrupted by adding the rule.\r\n\r\nIf you remove the `iptables` rule once the remote server starts sending resets, the kernel will tear down the connection and requests will go back to behaving as they should.\r\n\r\n----\r\n\r\n### Hacking it out\r\n\r\nIt is actually possible to work around this at the caller's level, although it's not exactly pleasant to look at.\r\n\r\n```go\r\n        if err != nil {\r\n            // Attempt to tear down the connection\r\n            fmt.Println(""Timed out"")\r\n\r\n            // prompt the handler into marking the connection as not\r\n           // being reusable\r\n            req.Header.Set(""Connection"", ""close"")\r\n            client.Do(req.WithContext(ctx))\r\n\r\n            // this is no longer required\r\n            // client.CloseIdleConnections()\r\n        } else {\r\n            fmt.Println(resp.StatusCode)\r\n        }\r\n```\r\n\r\nThis works because `net/http2` [specifically checks](https://github.com/golang/net/blob/master/http2/transport.go#L1344) for a `Connection: close` header before placing a request, and set's `doNotReuse` on the `ClientConn`, so when the next request comes around, the connection won't be used even if it is otherwise considered still active.\r\n\r\n----\r\n\r\n### Underlying Issue\r\n\r\nThe underlying *seems* to be that there's some raciness between normal stream closure and `closeIdleConnections()`.\r\n\r\nThe crucial check is [here](https://github.com/golang/net/blob/master/http2/transport.go#L1025)\r\n```go\r\n\tif len(cc.streams) > 0 || cc.streamsReserved > 0 {\r\n\t\tcc.mu.Unlock()\r\n\t\treturn\r\n\t}\r\n```\r\n\r\nIf the map `cc.streams` contains any entries, the connection isn't considered idle and therefore can't be closed. \r\n\r\nDropping some prints in as a quick test shows it's this conditional we're failing at\r\n```\r\n@@ -7984,6 +7990,8 @@ func (cc *http2ClientConn) forceCloseConn() {\r\n func (cc *http2ClientConn) closeIfIdle() {\r\n        cc.mu.Lock()\r\n        if len(cc.streams) > 0 || cc.streamsReserved > 0 {\r\n+                fmt.Println(""Refusing to close - streams:"", len(cc.streams), "" reserved:"", cc.streamsReserved)\r\n+\r\n                cc.mu.Unlock()\r\n                return\r\n        }\r\n```\r\n\r\nGives\r\n```\r\nRefusing to close - streams: 1  reserved: 0\r\n```\r\n\r\n`net/http2` does actually try to tidy up the streams, [`doRequest`](https://github.com/golang/net/blob/master/http2/transport.go#L1299) calls [`cleanupWriteRequest`](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1503) which ultimately drops the broken stream.\r\n\r\nAdding some more prints though, shows that this only tends to happen **after** the caller has had opportunity to call `closeIdleConnections()`:\r\n```\r\nRefusing to close - streams: 1  reserved: 0\r\nDoing cleanup context deadline exceeded\r\nCleanup stream 5 got err context deadline exceeded\r\nMust close body:  false\r\nGot err Sent headers\r\nWriting reset\r\nForgetting ID  5\r\nwerr  <nil>\r\nclosing\r\n```\r\nThe string `Forgetting ID` was added [here](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1560).\r\n\r\n----\r\n\r\n### Raciness\r\n\r\nTimings definitely seem to be important here - if the `time.Sleep` call in the repro is adjusted to wait 5 seconds, you'll sometimes see a string of timeouts followed by writes recovering.\r\n\r\nThat's not the only raciness though.\r\n\r\nStream closures/timeouts etc are handled by a `select` statement [here](https://github.com/golang/net/blob/eb1572ce7f7a6e97ec44c27568286345c2a7748e/http2/transport.go#L1438)\r\n```go\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-cs.peerClosed:\r\n\t\t\treturn nil\r\n\t\tcase <-respHeaderTimer:\r\n\t\t\treturn errTimeout\r\n\t\tcase <-respHeaderRecv:\r\n\t\t\trespHeaderRecv = nil\r\n\t\t\trespHeaderTimer = nil // keep waiting for END_STREAM\r\n\t\tcase <-cs.abort:\r\n\t\t\treturn cs.abortErr\r\n\t\tcase <-ctx.Done():\r\n\t\t\treturn ctx.Err()\r\n\t\tcase <-cs.reqCancel:\r\n\t\t\treturn errRequestCanceled\r\n\t\t}\r\n\t}\r\n```\r\n\r\nSometimes this is triggered by `cs.abort` and sometimes by `ctx.Done()`. This appears to be as a result of an attempt to abort the stream when the context hits deadline - so there's an element of potluck in terms of which gets through (I've not dug into this in too much depth though).\r\n\r\n----\r\n\r\n### TL:DR\r\n\r\n`CloseIdleConnections()` relies on `closeIfIdle()` which will close a connection **only** if there are no active streams on that connection.\r\n\r\nHowever, when a timeout occurs, there may be a delay before the stream is closed (leaving it visible to `closeIfIdle()`). \r\n\r\nBy the time the stream closure occurs, the timeout has already been bubbled up to the caller, who may then choose to call `CloseIdleConnections()` knowing that the connection has failed. \r\n\r\nBecause the dead connection does not get closed by this call, it remains available for use by the next request.\r\n\r\nThe result is that requests will fail until the kernel itself gives up on the connection, or a RST or FIN makes it through from the remote end.\r\n","go\r\npackage main\r\n\r\nimport (\r\n    ""context""\r\n    ""fmt""\r\n    ""net/http""\r\n    ""time""\r\n    ""strings""\r\n)\r\n\r\nfunc main() {\r\n\r\n    // The url to place requests to\r\n    url := ""https://www.bentasker.co.uk/""\r\n\r\n    // Create an empty context\r\n    ctx := context.Background()\r\n\r\n    // Create an io.Reader from a string to act as the request body\r\n    bodystring := ""foo\\nbar\\nsed""\r\n    myReader := strings.NewReader(bodystring)\r\n\r\n    // build client and request\r\n    client := http.Client{\r\n        Timeout: 5 * time.Second,\r\n    }\r\n\r\n    // Set up an infinite loop to place requests from\r\n    for {\r\n        req, err := http.NewRequest(""POST"", url, myReader)\r\n        if err != nil {\r\n            fmt.Println(""boo"")\r\n        }\r\n        req.Header.Set(""Content-Type"", ""text/plain; charset=utf-8"")\r\n\r\n        resp, err := client.Do(req.WithContext(ctx))\r\n\r\n        if err != nil {\r\n            // Attempt to tear down the connection\r\n            fmt.Println(""Timed out"")\r\n            client.CloseIdleConnections()\r\n        } else {\r\n            fmt.Println(resp.StatusCode)\r\n        }\r\n\r\n        time.Sleep(time.Second)\r\n    }\r\n}\r\n"
59687,"x/sys/windows/svc: session change notification triggers ""checkptr: pointer arithmetic result points to invalid allocation""<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\nPS C:\\Users\\Lars Meyer\\src\\sys> go version\r\ngo version go1.20.3 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nPS C:\\Users\\Lars Meyer\\src\\sys> go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\Lars Meyer\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\Lars Meyer\\AppData\\Roaming\\go\\env  \r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Program Files\\Go\\pkg\\mod\r\nset GONOPROXY=code.enginsight.org\r\nset GONOSUMDB=code.enginsight.org\r\nset GOOS=windows\r\nset GOPATH=C:\\Program Files\\Go\r\nset GOPRIVATE=code.enginsight.org\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.3\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\Lars Meyer\\src\\sys\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 '-fdebug-prefix-map=C:\\Users\\Lars Meyer\\AppData\\Local\\Temp\\go-build2366456271=/tmp/go-build' -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI am running the Windows service example.\r\n\r\nI have forked the `sys` repository and added `svc.AcceptSessionChange` to the accepted service commands. (I have also redirected `stderr`/`stdout` to a file `example.log` next to the executable to be able to catch the crash output.)\r\n\r\nhttps://github.com/elmeyer/sys/tree/windows-svc-example-checkptr\r\n\r\n### What did you expect to see?\r\n\r\nNo errors when running the service example built with `-race`.\r\n\r\n### What did you see instead?\r\n\r\nWhen logging out and logging back in, a session change notification is triggered. The resulting call to `svc.ctlHandler` receives a `uintptr` to `svc.theService` in the `context` parameter. Its conversion back to a `*svc.service` seems to be what triggers this crash.\r\n\r\n<details><summary><code>example.log</code></summary><br><pre>\r\nfatal error: checkptr: pointer arithmetic result points to invalid allocation\r\n\r\ngoroutine 1 [running, locked to thread]:\r\nruntime.throw({0x58bdc4?, 0x4aa139?})\r\n\tC:/Program Files/Go/src/runtime/panic.go:1047 +0x65 fp=0xc00014b5d0 sp=0xc00014b5a0 pc=0x479305\r\nruntime.checkptrArithmetic(0x0?, {0x0, 0x0, 0x41d750?})\r\n\tC:/Program Files/Go/src/runtime/checkptr.go:69 +0xaa fp=0xc00014b600 sp=0xc00014b5d0 pc=0x44ac4a\r\ngolang.org/x/sys/windows/svc.ctlHandler(0xe, 0x6, 0x1614550, 0x6ca6c0)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:204 +0x4c fp=0xc00014b658 sp=0xc00014b600 pc=0x54f28c\r\nruntime.call32(0x0, 0x58c580, 0xc00014b6f0, 0x0, 0x0, 0x20, 0xc00014b948)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:729 +0x4e fp=0xc00014b688 sp=0xc00014b658 pc=0x4a6cae\r\nruntime.callbackWrap(0x146fab0)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:396 +0x1ef fp=0xc00014ba68 sp=0xc00014b688 pc=0x496fef\r\nruntime.cgocallbackg1(0x496e00, 0x4513c7?, 0x0)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:315 +0x2c5 fp=0xc00014bb30 sp=0xc00014ba68 pc=0x4481c5\r\nruntime.cgocallbackg(0xc000042000?, 0x300000002?, 0xc000042000?)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:234 +0x105 fp=0xc00014bbc0 sp=0xc00014bb30 pc=0x447e25\r\nruntime.cgocallbackg(0x496e00, 0x146fab0, 0x0)\r\n\t<autogenerated>:1 +0x34 fp=0xc00014bbe8 sp=0xc00014bbc0 pc=0x4ab414\r\nruntime.cgocallback(0x447c99, 0x4aa9a0, 0x6cb140)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:998 +0xcf fp=0xc00014bc10 sp=0xc00014bbe8 pc=0x4a876f\r\nruntime.systemstack_switch()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:463 fp=0xc00014bc18 sp=0xc00014bc10 pc=0x4a66c0\r\nruntime.cgocall(0x4aa9a0, 0x6cb140)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:167 +0xb9 fp=0xc00014bc50 sp=0xc00014bc18 pc=0x447c99\r\nsyscall.SyscallN(0x7ffa72487cd0?, {0xc00014bce8?, 0x3?, 0x0?})\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:557 +0x109 fp=0xc00014bcc8 sp=0xc00014bc50 pc=0x4a5509\r\nsyscall.Syscall(0xc00013fce0?, 0xc000108120?, 0xc0001401e0?, 0xc0001401e0?, 0x54fe18?)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:495 +0x3b fp=0xc00014bd10 sp=0xc00014bcc8 pc=0x4a51db\r\ngolang.org/x/sys/windows.StartServiceCtrlDispatcher(0xc00014bda8)\r\n\tC:/Users/Lars Meyer/src/sys/windows/zsyscall_windows.go:1331 +0xa5 fp=0xc00014bd80 sp=0xc00014bd10 pc=0x526d25\r\ngolang.org/x/sys/windows/svc.Run({0x580b70, 0x9}, {0x605b98?, 0x71d810})\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:301 +0x176 fp=0xc00014bdd8 sp=0xc00014bd80 pc=0x54fe56\r\nmain.runService({0x580b70, 0x9}, 0x0)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/service.go:90 +0x2e9 fp=0xc00014bed0 sp=0xc00014bdd8 pc=0x558169\r\nmain.main()\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/main.go:86 +0x40d fp=0xc00014bf80 sp=0xc00014bed0 pc=0x556c0d\r\nruntime.main()\r\n\tC:/Program Files/Go/src/runtime/proc.go:250 +0x1f7 fp=0xc00014bfe0 sp=0xc00014bf80 pc=0x47ba77\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00014bfe8 sp=0xc00014bfe0 pc=0x4a89c1\r\n\r\ngoroutine 17 [select, locked to thread]:\r\nruntime.gopark(0xc0001119e8?, 0x4?, 0x0?, 0xc0?, 0xc0001117d4?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc0001115e8 sp=0xc0001115c8 pc=0x47be96\r\nruntime.selectgo(0xc0001119e8, 0xc0001117cc, 0xc000111790?, 0x1, 0x0?, 0x1)\r\n\tC:/Program Files/Go/src/runtime/select.go:327 +0x8be fp=0xc000111748 sp=0xc0001115e8 pc=0x48b9fe\r\ngolang.org/x/sys/windows/svc.serviceMain(0x3, 0x161ace8)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:253 +0x676 fp=0xc000111a38 sp=0xc000111748 pc=0x54f9d6\r\nruntime.call16(0x0, 0x58c590, 0xc000111ac0, 0x0, 0x0, 0x10, 0xc000111d18)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:728 +0x4e fp=0xc000111a58 sp=0xc000111a38 pc=0x4a6c0e\r\nruntime.callbackWrap(0x28c5fdf0)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:396 +0x1ef fp=0xc000111e38 sp=0xc000111a58 pc=0x496fef\r\nruntime.cgocallbackg1(0x496e00, 0x0?, 0x0)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:315 +0x2c5 fp=0xc000111f00 sp=0xc000111e38 pc=0x4481c5\r\nruntime.cgocallbackg(0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:234 +0x105 fp=0xc000111f90 sp=0xc000111f00 pc=0x447e25\r\nruntime.cgocallbackg(0x496e00, 0x28c5fdf0, 0x0)\r\n\t<autogenerated>:1 +0x34 fp=0xc000111fb8 sp=0xc000111f90 pc=0x4ab414\r\nruntime.cgocallback(0x0, 0x0, 0x0)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:998 +0xcf fp=0xc000111fe0 sp=0xc000111fb8 pc=0x4a876f\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000111fe8 sp=0xc000111fe0 pc=0x4a89c1\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000045fb0 sp=0xc000045f90 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.forcegchelper()\r\n\tC:/Program Files/Go/src/runtime/proc.go:305 +0xb2 fp=0xc000045fe0 sp=0xc000045fb0 pc=0x47bcb2\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000045fe8 sp=0xc000045fe0 pc=0x4a89c1\r\ncreated by runtime.init.6\r\n\tC:/Program Files/Go/src/runtime/proc.go:293 +0x25\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000047f80 sp=0xc000047f60 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.bgsweep(0x0?)\r\n\tC:/Program Files/Go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc000047fc8 sp=0xc000047f80 pc=0x466a4e\r\nruntime.gcenable.func1()\r\n\tC:/Program Files/Go/src/runtime/mgc.go:178 +0x26 fp=0xc000047fe0 sp=0xc000047fc8 pc=0x45bec6\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000047fe8 sp=0xc000047fe0 pc=0x4a89c1\r\ncreated by runtime.gcenable\r\n\tC:/Program Files/Go/src/runtime/mgc.go:178 +0x6b\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00001a070?, 0x6044b8?, 0x1?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000057f70 sp=0xc000057f50 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.(*scavengerState).park(0x6ca800)\r\n\tC:/Program Files/Go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc000057fa0 sp=0xc000057f70 pc=0x4649b3\r\nruntime.bgscavenge(0x0?)\r\n\tC:/Program Files/Go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc000057fc8 sp=0xc000057fa0 pc=0x464f65\r\nruntime.gcenable.func2()\r\n\tC:/Program Files/Go/src/runtime/mgc.go:179 +0x26 fp=0xc000057fe0 sp=0xc000057fc8 pc=0x45be66\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x4a89c1\r\ncreated by runtime.gcenable\r\n\tC:/Program Files/Go/src/runtime/mgc.go:179 +0xaa\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x6cae80?, 0x6ab7d0?, 0x0?, 0x0?, 0xc000049f70?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000049e28 sp=0xc000049e08 pc=0x47be96\r\nruntime.runfinq()\r\n\tC:/Program Files/Go/src/runtime/mfinal.go:193 +0x147 fp=0xc000049fe0 sp=0xc000049e28 pc=0x45af27\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000049fe8 sp=0xc000049fe0 pc=0x4a89c1\r\ncreated by runtime.createfing\r\n\tC:/Program Files/Go/src/runtime/mfinal.go:163 +0x45\r\n\r\ngoroutine 5 [select]:\r\nruntime.gopark(0xc00004bf38?, 0x2?, 0x40?, 0x30?, 0xc00004be44?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc00004bca0 sp=0xc00004bc80 pc=0x47be96\r\nruntime.selectgo(0xc00004bf38, 0xc00004be40, 0x57fefe?, 0x0, 0x2?, 0x1)\r\n\tC:/Program Files/Go/src/runtime/select.go:327 +0x8be fp=0xc00004be00 sp=0xc00004bca0 pc=0x48b9fe\r\nmain.(*myservice).Execute(0xc00004c000?, {0xc00001c030, 0x3, 0x3}, 0xc00005c000, 0x0?)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/service.go:33 +0x193 fp=0xc00004bf68 sp=0xc00004be00 pc=0x557a53\r\ngolang.org/x/sys/windows/svc.serviceMain.func2()\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:241 +0x95 fp=0xc00004bfe0 sp=0xc00004bf68 pc=0x54fc95\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00004bfe8 sp=0xc00004bfe0 pc=0x4a89c1\r\ncreated by golang.org/x/sys/windows/svc.serviceMain\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:240 +0x4d6\r\n\r\n</pre></details>\r\n\r\nI fundamentally don't understand why a pointer to `svc.theService` is being passed to `windows.RegisterServiceCtrlHandlerEx`. The comment for `svc.theService` explicitly states:\r\n\r\n\r\n\r\nwhile the [documentation](https://learn.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-registerservicectrlhandlerexw) for `RegisterServiceCtrlHandlerExW` states:\r\n\r\n> `[in, optional] lpContext`\r\n> Any user-defined data. This parameter, which is passed to the handler function, can help identify the service **when multiple services share a process.**\r\n\r\n(emphasis mine)\r\n\r\nThe crash naturally disappears when this parameter is replaced with 0 and `svc.ctlHandler` is modified to assume that all calls to it refer to `svc.theService`. However, the root cause of this `checkptr` failure remains unclear.\r\n\r\ncc @ericrange who helped reproduce this problem.",OS-Windows|NeedsFix,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\nPS C:\\Users\\Lars Meyer\\src\\sys> go version\r\ngo version go1.20.3 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nPS C:\\Users\\Lars Meyer\\src\\sys> go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\Lars Meyer\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\Lars Meyer\\AppData\\Roaming\\go\\env  \r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Program Files\\Go\\pkg\\mod\r\nset GONOPROXY=code.enginsight.org\r\nset GONOSUMDB=code.enginsight.org\r\nset GOOS=windows\r\nset GOPATH=C:\\Program Files\\Go\r\nset GOPRIVATE=code.enginsight.org\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.3\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\Lars Meyer\\src\\sys\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 '-fdebug-prefix-map=C:\\Users\\Lars Meyer\\AppData\\Local\\Temp\\go-build2366456271=/tmp/go-build' -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI am running the Windows service example.\r\n\r\nI have forked the `sys` repository and added `svc.AcceptSessionChange` to the accepted service commands. (I have also redirected `stderr`/`stdout` to a file `example.log` next to the executable to be able to catch the crash output.)\r\n\r\nhttps://github.com/elmeyer/sys/tree/windows-svc-example-checkptr\r\n\r\n### What did you expect to see?\r\n\r\nNo errors when running the service example built with `-race`.\r\n\r\n### What did you see instead?\r\n\r\nWhen logging out and logging back in, a session change notification is triggered. The resulting call to `svc.ctlHandler` receives a `uintptr` to `svc.theService` in the `context` parameter. Its conversion back to a `*svc.service` seems to be what triggers this crash.\r\n\r\n<details><summary><code>example.log</code></summary><br><pre>\r\nfatal error: checkptr: pointer arithmetic result points to invalid allocation\r\n\r\ngoroutine 1 [running, locked to thread]:\r\nruntime.throw({0x58bdc4?, 0x4aa139?})\r\n\tC:/Program Files/Go/src/runtime/panic.go:1047 +0x65 fp=0xc00014b5d0 sp=0xc00014b5a0 pc=0x479305\r\nruntime.checkptrArithmetic(0x0?, {0x0, 0x0, 0x41d750?})\r\n\tC:/Program Files/Go/src/runtime/checkptr.go:69 +0xaa fp=0xc00014b600 sp=0xc00014b5d0 pc=0x44ac4a\r\ngolang.org/x/sys/windows/svc.ctlHandler(0xe, 0x6, 0x1614550, 0x6ca6c0)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:204 +0x4c fp=0xc00014b658 sp=0xc00014b600 pc=0x54f28c\r\nruntime.call32(0x0, 0x58c580, 0xc00014b6f0, 0x0, 0x0, 0x20, 0xc00014b948)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:729 +0x4e fp=0xc00014b688 sp=0xc00014b658 pc=0x4a6cae\r\nruntime.callbackWrap(0x146fab0)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:396 +0x1ef fp=0xc00014ba68 sp=0xc00014b688 pc=0x496fef\r\nruntime.cgocallbackg1(0x496e00, 0x4513c7?, 0x0)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:315 +0x2c5 fp=0xc00014bb30 sp=0xc00014ba68 pc=0x4481c5\r\nruntime.cgocallbackg(0xc000042000?, 0x300000002?, 0xc000042000?)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:234 +0x105 fp=0xc00014bbc0 sp=0xc00014bb30 pc=0x447e25\r\nruntime.cgocallbackg(0x496e00, 0x146fab0, 0x0)\r\n\t<autogenerated>:1 +0x34 fp=0xc00014bbe8 sp=0xc00014bbc0 pc=0x4ab414\r\nruntime.cgocallback(0x447c99, 0x4aa9a0, 0x6cb140)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:998 +0xcf fp=0xc00014bc10 sp=0xc00014bbe8 pc=0x4a876f\r\nruntime.systemstack_switch()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:463 fp=0xc00014bc18 sp=0xc00014bc10 pc=0x4a66c0\r\nruntime.cgocall(0x4aa9a0, 0x6cb140)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:167 +0xb9 fp=0xc00014bc50 sp=0xc00014bc18 pc=0x447c99\r\nsyscall.SyscallN(0x7ffa72487cd0?, {0xc00014bce8?, 0x3?, 0x0?})\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:557 +0x109 fp=0xc00014bcc8 sp=0xc00014bc50 pc=0x4a5509\r\nsyscall.Syscall(0xc00013fce0?, 0xc000108120?, 0xc0001401e0?, 0xc0001401e0?, 0x54fe18?)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:495 +0x3b fp=0xc00014bd10 sp=0xc00014bcc8 pc=0x4a51db\r\ngolang.org/x/sys/windows.StartServiceCtrlDispatcher(0xc00014bda8)\r\n\tC:/Users/Lars Meyer/src/sys/windows/zsyscall_windows.go:1331 +0xa5 fp=0xc00014bd80 sp=0xc00014bd10 pc=0x526d25\r\ngolang.org/x/sys/windows/svc.Run({0x580b70, 0x9}, {0x605b98?, 0x71d810})\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:301 +0x176 fp=0xc00014bdd8 sp=0xc00014bd80 pc=0x54fe56\r\nmain.runService({0x580b70, 0x9}, 0x0)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/service.go:90 +0x2e9 fp=0xc00014bed0 sp=0xc00014bdd8 pc=0x558169\r\nmain.main()\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/main.go:86 +0x40d fp=0xc00014bf80 sp=0xc00014bed0 pc=0x556c0d\r\nruntime.main()\r\n\tC:/Program Files/Go/src/runtime/proc.go:250 +0x1f7 fp=0xc00014bfe0 sp=0xc00014bf80 pc=0x47ba77\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00014bfe8 sp=0xc00014bfe0 pc=0x4a89c1\r\n\r\ngoroutine 17 [select, locked to thread]:\r\nruntime.gopark(0xc0001119e8?, 0x4?, 0x0?, 0xc0?, 0xc0001117d4?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc0001115e8 sp=0xc0001115c8 pc=0x47be96\r\nruntime.selectgo(0xc0001119e8, 0xc0001117cc, 0xc000111790?, 0x1, 0x0?, 0x1)\r\n\tC:/Program Files/Go/src/runtime/select.go:327 +0x8be fp=0xc000111748 sp=0xc0001115e8 pc=0x48b9fe\r\ngolang.org/x/sys/windows/svc.serviceMain(0x3, 0x161ace8)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:253 +0x676 fp=0xc000111a38 sp=0xc000111748 pc=0x54f9d6\r\nruntime.call16(0x0, 0x58c590, 0xc000111ac0, 0x0, 0x0, 0x10, 0xc000111d18)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:728 +0x4e fp=0xc000111a58 sp=0xc000111a38 pc=0x4a6c0e\r\nruntime.callbackWrap(0x28c5fdf0)\r\n\tC:/Program Files/Go/src/runtime/syscall_windows.go:396 +0x1ef fp=0xc000111e38 sp=0xc000111a58 pc=0x496fef\r\nruntime.cgocallbackg1(0x496e00, 0x0?, 0x0)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:315 +0x2c5 fp=0xc000111f00 sp=0xc000111e38 pc=0x4481c5\r\nruntime.cgocallbackg(0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/cgocall.go:234 +0x105 fp=0xc000111f90 sp=0xc000111f00 pc=0x447e25\r\nruntime.cgocallbackg(0x496e00, 0x28c5fdf0, 0x0)\r\n\t<autogenerated>:1 +0x34 fp=0xc000111fb8 sp=0xc000111f90 pc=0x4ab414\r\nruntime.cgocallback(0x0, 0x0, 0x0)\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:998 +0xcf fp=0xc000111fe0 sp=0xc000111fb8 pc=0x4a876f\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000111fe8 sp=0xc000111fe0 pc=0x4a89c1\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000045fb0 sp=0xc000045f90 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.forcegchelper()\r\n\tC:/Program Files/Go/src/runtime/proc.go:305 +0xb2 fp=0xc000045fe0 sp=0xc000045fb0 pc=0x47bcb2\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000045fe8 sp=0xc000045fe0 pc=0x4a89c1\r\ncreated by runtime.init.6\r\n\tC:/Program Files/Go/src/runtime/proc.go:293 +0x25\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000047f80 sp=0xc000047f60 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.bgsweep(0x0?)\r\n\tC:/Program Files/Go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc000047fc8 sp=0xc000047f80 pc=0x466a4e\r\nruntime.gcenable.func1()\r\n\tC:/Program Files/Go/src/runtime/mgc.go:178 +0x26 fp=0xc000047fe0 sp=0xc000047fc8 pc=0x45bec6\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000047fe8 sp=0xc000047fe0 pc=0x4a89c1\r\ncreated by runtime.gcenable\r\n\tC:/Program Files/Go/src/runtime/mgc.go:178 +0x6b\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0xc00001a070?, 0x6044b8?, 0x1?, 0x0?, 0x0?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000057f70 sp=0xc000057f50 pc=0x47be96\r\nruntime.goparkunlock(...)\r\n\tC:/Program Files/Go/src/runtime/proc.go:387\r\nruntime.(*scavengerState).park(0x6ca800)\r\n\tC:/Program Files/Go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc000057fa0 sp=0xc000057f70 pc=0x4649b3\r\nruntime.bgscavenge(0x0?)\r\n\tC:/Program Files/Go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc000057fc8 sp=0xc000057fa0 pc=0x464f65\r\nruntime.gcenable.func2()\r\n\tC:/Program Files/Go/src/runtime/mgc.go:179 +0x26 fp=0xc000057fe0 sp=0xc000057fc8 pc=0x45be66\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000057fe8 sp=0xc000057fe0 pc=0x4a89c1\r\ncreated by runtime.gcenable\r\n\tC:/Program Files/Go/src/runtime/mgc.go:179 +0xaa\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x6cae80?, 0x6ab7d0?, 0x0?, 0x0?, 0xc000049f70?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc000049e28 sp=0xc000049e08 pc=0x47be96\r\nruntime.runfinq()\r\n\tC:/Program Files/Go/src/runtime/mfinal.go:193 +0x147 fp=0xc000049fe0 sp=0xc000049e28 pc=0x45af27\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000049fe8 sp=0xc000049fe0 pc=0x4a89c1\r\ncreated by runtime.createfing\r\n\tC:/Program Files/Go/src/runtime/mfinal.go:163 +0x45\r\n\r\ngoroutine 5 [select]:\r\nruntime.gopark(0xc00004bf38?, 0x2?, 0x40?, 0x30?, 0xc00004be44?)\r\n\tC:/Program Files/Go/src/runtime/proc.go:381 +0xd6 fp=0xc00004bca0 sp=0xc00004bc80 pc=0x47be96\r\nruntime.selectgo(0xc00004bf38, 0xc00004be40, 0x57fefe?, 0x0, 0x2?, 0x1)\r\n\tC:/Program Files/Go/src/runtime/select.go:327 +0x8be fp=0xc00004be00 sp=0xc00004bca0 pc=0x48b9fe\r\nmain.(*myservice).Execute(0xc00004c000?, {0xc00001c030, 0x3, 0x3}, 0xc00005c000, 0x0?)\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/example/service.go:33 +0x193 fp=0xc00004bf68 sp=0xc00004be00 pc=0x557a53\r\ngolang.org/x/sys/windows/svc.serviceMain.func2()\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:241 +0x95 fp=0xc00004bfe0 sp=0xc00004bf68 pc=0x54fc95\r\nruntime.goexit()\r\n\tC:/Program Files/Go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00004bfe8 sp=0xc00004bfe0 pc=0x4a89c1\r\ncreated by golang.org/x/sys/windows/svc.serviceMain\r\n\tC:/Users/Lars Meyer/src/sys/windows/svc/service.go:240 +0x4d6\r\n\r\n</pre></details>\r\n\r\nI fundamentally don't understand why a pointer to `svc.theService` is being passed to `windows.RegisterServiceCtrlHandlerEx`. The comment for `svc.theService` explicitly states:\r\n\r\n```go\r\nvar theService service // This is, unfortunately, a global, which means only one service per process.\r\n```\r\n\r\nwhile the [documentation](https://learn.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-registerservicectrlhandlerexw) for `RegisterServiceCtrlHandlerExW` states:\r\n\r\n> `[in, optional] lpContext`\r\n> Any user-defined data. This parameter, which is passed to the handler function, can help identify the service **when multiple services share a process.**\r\n\r\n(emphasis mine)\r\n\r\nThe crash naturally disappears when this parameter is replaced with 0 and `svc.ctlHandler` is modified to assume that all calls to it refer to `svc.theService`. However, the root cause of this `checkptr` failure remains unclear.\r\n\r\ncc @ericrange who helped reproduce this problem.","go\r\nvar theService service // This is, unfortunately, a global, which means only one service per process.\r\n"
59591,"cmd/compile: better optimization of type switches in instantiated generic functionsConsider this test case:\r\n\r\n\r\n\r\nThis runs fine.  It instantiates `F` twice: `main.F[go.shape.[]uint8]` and `main.F[go.shape.string]`.  Both versions take a dictionary, and both versions implement the type switch by loading the type descriptor from the dictionary and comparing it to the descriptors for `[]byte` and `string`.\r\n\r\nIn these instantiations, however, the type descriptor is a constant.  We know this because the constraint does not use a `~`.  It would be nice if the compiler were able to constant fold the dictionary value and eliminate the type switch.\r\n\r\nI came up with this example because of #38776.  It would be nice if we could change some of the hash implementations to use generic functions, which largely works until they try to call assembly code.  At that point it's necessary to get the pointer to the slice or string data.  It would be nice to be able to do that reasonably safely, which is what the above code does, and also efficiently, which the above code is not.\r\n\r\nCC @randall77 @mdempsky ",Performance|NeedsInvestigation|FeatureRequest|compiler/runtime,randall77,"Consider this test case:\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc start[S []byte | string](s S) *byte {\r\n\tswitch s := any(s).(type) {\r\n\tcase []byte:\r\n\t\treturn unsafe.SliceData(s)\r\n\tcase string:\r\n\t\treturn unsafe.StringData(s)\r\n\tdefault:\r\n\t\tpanic(""can't happen"")\r\n\t}\r\n}\r\n\r\nfunc F[S []byte | string](s S) {\r\n\tfmt.Println(start(s), len(s))\r\n}\r\n\r\nfunc main() {\r\n\tF(""hi"")\r\n\tF([]byte(""bye""))\r\n}\r\n```\r\n\r\nThis runs fine.  It instantiates `F` twice: `main.F[go.shape.[]uint8]` and `main.F[go.shape.string]`.  Both versions take a dictionary, and both versions implement the type switch by loading the type descriptor from the dictionary and comparing it to the descriptors for `[]byte` and `string`.\r\n\r\nIn these instantiations, however, the type descriptor is a constant.  We know this because the constraint does not use a `~`.  It would be nice if the compiler were able to constant fold the dictionary value and eliminate the type switch.\r\n\r\nI came up with this example because of #38776.  It would be nice if we could change some of the hash implementations to use generic functions, which largely works until they try to call assembly code.  At that point it's necessary to get the pointer to the slice or string data.  It would be nice to be able to do that reasonably safely, which is what the above code does, and also efficiently, which the above code is not.\r\n\r\nCC @randall77 @mdempsky ","Go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc start[S []byte | string](s S) *byte {\r\n\tswitch s := any(s).(type) {\r\n\tcase []byte:\r\n\t\treturn unsafe.SliceData(s)\r\n\tcase string:\r\n\t\treturn unsafe.StringData(s)\r\n\tdefault:\r\n\t\tpanic(""can't happen"")\r\n\t}\r\n}\r\n\r\nfunc F[S []byte | string](s S) {\r\n\tfmt.Println(start(s), len(s))\r\n}\r\n\r\nfunc main() {\r\n\tF(""hi"")\r\n\tF([]byte(""bye""))\r\n}\r\n"
59572,cmd/compile: incorrect inline function variable### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/gJSSO8xRwyl\r\n\r\n### What did you expect to see?\r\noutput\r\n```\r\n1\r\n2\r\n3\r\n```\r\n### What did you see instead?\r\noutput\r\n```\r\nfoo\r\nfoo\r\nfoo\r\n```\r\n\r\n```\r\ngo run -gcflags='-m=1' a.go\r\n# command-line-arguments\r\n./a.go:3:6: can inline foo\r\n./a.go:7:6: can inline main\r\n./a.go:10:5: inlining call to foo\r\n./a.go:15:2: can inline glob..func1\r\n./a.go:18:2: can inline glob..func2\r\n./a.go:21:2: can inline glob..func3\r\n```\r\n\r\nI'll send a CL to fix soon.\r\n,NeedsFix|FrozenDueToAge|compiler/runtime,wdvxdr1123,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n```go\r\npackage main\r\n\r\nfunc foo() {\r\n\tprintln(""foo"")\r\n}\r\n\r\nfunc main() {\r\n\tfn := foo\r\n\tfor _, fn = range list {\r\n\t\tfn()\r\n\t}\r\n}\r\n\r\nvar list = []func(){\r\n\tfunc() {\r\n\t\tprintln(""1"")\r\n\t},\r\n\tfunc() {\r\n\t\tprintln(""2"")\r\n\t},\r\n\tfunc() {\r\n\t\tprintln(""3"")\r\n\t},\r\n}\r\n```\r\nhttps://go.dev/play/p/gJSSO8xRwyl\r\n\r\n### What did you expect to see?\r\noutput\r\n```\r\n1\r\n2\r\n3\r\n```\r\n### What did you see instead?\r\noutput\r\n```\r\nfoo\r\nfoo\r\nfoo\r\n```\r\n\r\n```\r\ngo run -gcflags='-m=1' a.go\r\n# command-line-arguments\r\n./a.go:3:6: can inline foo\r\n./a.go:7:6: can inline main\r\n./a.go:10:5: inlining call to foo\r\n./a.go:15:2: can inline glob..func1\r\n./a.go:18:2: can inline glob..func2\r\n./a.go:21:2: can inline glob..func3\r\n```\r\n\r\nI'll send a CL to fix soon.\r\n","go\r\npackage main\r\n\r\nfunc foo() {\r\n\tprintln(""foo"")\r\n}\r\n\r\nfunc main() {\r\n\tfn := foo\r\n\tfor _, fn = range list {\r\n\t\tfn()\r\n\t}\r\n}\r\n\r\nvar list = []func(){\r\n\tfunc() {\r\n\t\tprintln(""1"")\r\n\t},\r\n\tfunc() {\r\n\t\tprintln(""2"")\r\n\t},\r\n\tfunc() {\r\n\t\tprintln(""3"")\r\n\t},\r\n}\r\n"
59569,"runtime: cgo stuck because of go signal handler went into dead loop if pid=1<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nSure\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=\r\nGONOSUMDB=\r\nGOOS=""linux""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2188387714=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nThe bug found in go1.10.3 at first, the I update go to go1.19, it happends too. I find the root case lives here: https://github.com/golang/go/blob/de475e8a66b0f530e074c68031a364ad2ebe2a95/src/runtime/signal_unix.go#L964\r\n\r\nIn almost all real cases the program is about to crash, but in my situation, it does not after `usleep`. But why, I cannot explain!!!.\r\n\r\nThen I try fix it myself with the following patch:\r\n\r\n\r\n\r\n### What did you expect to see?\r\npanic\r\n\r\n\r\n\r\n### What did you see instead?\r\nSee #56649\r\n\r\n",NeedsDecision|compiler/runtime,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nSure\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=\r\nGONOSUMDB=\r\nGOOS=""linux""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2188387714=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nThe bug found in go1.10.3 at first, the I update go to go1.19, it happends too. I find the root case lives here: https://github.com/golang/go/blob/de475e8a66b0f530e074c68031a364ad2ebe2a95/src/runtime/signal_unix.go#L964\r\n\r\nIn almost all real cases the program is about to crash, but in my situation, it does not after `usleep`. But why, I cannot explain!!!.\r\n\r\nThen I try fix it myself with the following patch:\r\n```go\r\n\traise(sig)\r\n\t// Give the signal a chance to be delivered.\r\n\t// In almost all real cases the program is about to crash,\r\n\t// so sleeping here is not a waste of time.\r\n\tusleep(1000)\r\n\r\n\tswitch sig {\r\n\tcase _SIGSEGV, _SIGABRT, _SIGFPE, _SIGILL, _SIGBUS:\r\n\t\tprint(""fatal error: unexpected signal during runtime execution\\n"")\r\n\t\tsigname := signame(sig)\r\n\t\tif signame != """" {\r\n\t\t\tprint(""[signal "", signame)\r\n\t\t} else {\r\n\t\t\tprint(""[signal "", hex(sig))\r\n\t\t}\r\n\t\tprint("" code="", hex(c.sigcode()), "" addr="", hex(c.sigaddr()), ""]\\n"")\r\n\t\tdieFromSignal(sig)\r\n\r\n\tdefault:\r\n\t\t// If the signal didn't cause the program to exit, restore the\r\n\t\t// Go signal handler and carry on.\r\n\t\t//\r\n\t\t// We may receive another instance of the signal before we\r\n\t\t// restore the Go handler, but that is not so bad: we know\r\n\t\t// that the Go program has been ignoring the signal.\r\n\t\tsetsig(sig, abi.FuncPCABIInternal(sighandler))\r\n\t}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\npanic\r\n\r\n\r\n\r\n### What did you see instead?\r\nSee #56649\r\n\r\n","go\r\n\traise(sig)\r\n\t// Give the signal a chance to be delivered.\r\n\t// In almost all real cases the program is about to crash,\r\n\t// so sleeping here is not a waste of time.\r\n\tusleep(1000)\r\n\r\n\tswitch sig {\r\n\tcase _SIGSEGV, _SIGABRT, _SIGFPE, _SIGILL, _SIGBUS:\r\n\t\tprint(""fatal error: unexpected signal during runtime execution\\n"")\r\n\t\tsigname := signame(sig)\r\n\t\tif signame != """" {\r\n\t\t\tprint(""[signal "", signame)\r\n\t\t} else {\r\n\t\t\tprint(""[signal "", hex(sig))\r\n\t\t}\r\n\t\tprint("" code="", hex(c.sigcode()), "" addr="", hex(c.sigaddr()), ""]\\n"")\r\n\t\tdieFromSignal(sig)\r\n\r\n\tdefault:\r\n\t\t// If the signal didn't cause the program to exit, restore the\r\n\t\t// Go signal handler and carry on.\r\n\t\t//\r\n\t\t// We may receive another instance of the signal before we\r\n\t\t// restore the Go handler, but that is not so bad: we know\r\n\t\t// that the Go program has been ignoring the signal.\r\n\t\tsetsig(sig, abi.FuncPCABIInternal(sighandler))\r\n\t}\r\n"
59442,"crypto/rsa: Some severe performance regressions in Go 1.20 ### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.20.3\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (only on latest release).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n~ \xbb go env                                                                                                                  sungyoon@sungyoon\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go-repos/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go-repos:/opt/go/path:/home/user/go-code""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/go/root""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/go/root/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2856124056=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nSome services at Uber started seeing severe performance degradation after upgrading to Go 1.20. \r\n\r\nProfiles revealed crypto/rsa related stacks showing up everywhere.\r\n\r\nHere is a repro benchmark that shows around ~60% regression compared to Go 1.19:\r\n\r\n \r\n```\r\nbenchstat before.txt after.txt                                                                                                                                                                                \r\ngoos: linux\r\ngoarch: amd64\r\npkg: github.com/sywhang/issues/cryptosign\r\ncpu: AMD EPYC 7B13\r\n        \u2502 before.txt  \u2502              after.txt              \u2502\r\n        \u2502   sec/op    \u2502   sec/op     vs base                \u2502\r\nSign-96   1.246m \xb1 2%   2.009m \xb1 7%  +61.23% (p=0.000 n=10)\r\n```\r\n\r\n### What did you expect to see?\r\nI am aware of the new crypto/rsa changes that were introduced in Go 1.20 that involves removing big.Int to bigmod changes, which could be related to the regression. (https://github.com/golang/go/issues/56980). \r\n\r\nThis benchmark was created based on profile from a single service that reported this issue internally, and there may be more paths in crypto/rsa that has similar issues. Will update as we find more such paths if we find any.\r\n\r\n### What did you see instead?\r\n>60% regression as noted above.\r\n",Performance|NeedsFix|release-blocker,FiloSottile,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.20.3\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (only on latest release).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n~ \xbb go env                                                                                                                  sungyoon@sungyoon\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go-repos/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go-repos:/opt/go/path:/home/user/go-code""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/go/root""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/go/root/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2856124056=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nSome services at Uber started seeing severe performance degradation after upgrading to Go 1.20. \r\n\r\nProfiles revealed crypto/rsa related stacks showing up everywhere.\r\n\r\nHere is a repro benchmark that shows around ~60% regression compared to Go 1.19:\r\n```go\r\npackage cryptosign\r\n\r\nimport (\r\n        ""crypto""\r\n        ""crypto/rand""\r\n        ""crypto/rsa""\r\n        ""crypto/sha256""\r\n)\r\n\r\nfunc Sign(key any, msg []byte) (sig []byte, err error) {\r\n        k, _ := key.(*rsa.PrivateKey)\r\n        h := sha256.New()\r\n        h.Write(msg)\r\n        return rsa.SignPKCS1v15(rand.Reader, k, crypto.SHA256, h.Sum(nil))\r\n}\r\n\r\nfunc BenchmarkSign(b *testing.B) {\r\n        msg := []byte(""secret text"")\r\n        rsaKey, _ := rsa.GenerateKey(rand.Reader, 2048)\r\n\r\n        b.ResetTimer()\r\n\r\n        for i := 0; i < b.N; i++ {\r\n                Sign(rsaKey, msg)\r\n        }\r\n}\r\n```\r\n \r\n```\r\nbenchstat before.txt after.txt                                                                                                                                                                                \r\ngoos: linux\r\ngoarch: amd64\r\npkg: github.com/sywhang/issues/cryptosign\r\ncpu: AMD EPYC 7B13\r\n        \u2502 before.txt  \u2502              after.txt              \u2502\r\n        \u2502   sec/op    \u2502   sec/op     vs base                \u2502\r\nSign-96   1.246m \xb1 2%   2.009m \xb1 7%  +61.23% (p=0.000 n=10)\r\n```\r\n\r\n### What did you expect to see?\r\nI am aware of the new crypto/rsa changes that were introduced in Go 1.20 that involves removing big.Int to bigmod changes, which could be related to the regression. (https://github.com/golang/go/issues/56980). \r\n\r\nThis benchmark was created based on profile from a single service that reported this issue internally, and there may be more paths in crypto/rsa that has similar issues. Will update as we find more such paths if we find any.\r\n\r\n### What did you see instead?\r\n>60% regression as noted above.\r\n","go\r\npackage cryptosign\r\n\r\nimport (\r\n        ""crypto""\r\n        ""crypto/rand""\r\n        ""crypto/rsa""\r\n        ""crypto/sha256""\r\n)\r\n\r\nfunc Sign(key any, msg []byte) (sig []byte, err error) {\r\n        k, _ := key.(*rsa.PrivateKey)\r\n        h := sha256.New()\r\n        h.Write(msg)\r\n        return rsa.SignPKCS1v15(rand.Reader, k, crypto.SHA256, h.Sum(nil))\r\n}\r\n\r\nfunc BenchmarkSign(b *testing.B) {\r\n        msg := []byte(""secret text"")\r\n        rsaKey, _ := rsa.GenerateKey(rand.Reader, 2048)\r\n\r\n        b.ResetTimer()\r\n\r\n        for i := 0; i < b.N; i++ {\r\n                Sign(rsaKey, msg)\r\n        }\r\n}\r\n"
59391,"cmd/go: windows binaries shouldn't be marked with IMAGE_FILE_DEBUG_STRIPPED<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.2 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\***\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\***\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\***\\go\\pkg\\mod\r\nset GONOPROXY\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\***\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\***\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Users\\***\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.2\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\***\\code\\go-lab\\go.mod\r\nset GOWORK=C:\\Users\\***\\code\\go-lab\\go.work\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\***\\AppData\\Local\\Temp\\go-build1712504696=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### Context\r\n\r\n\r\nThe Go linker sets the `IMAGE_FILE_DEBUG_STRIPPED` PE characteristic for all internal-linked binaries. The PE format [docs](https://learn.microsoft.com/en-us/windows/win32/debug/pe-format) defines this characteristic as:\r\n\r\n> Debugging information is removed from the image file.\r\n\r\nThis definition is misleading, it does not really mean that the debugging information has been completely deleted, but that it has been removed from the PE file and moved into a DBG file.\r\n\r\nThis other Microsoft [doc](https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/da528y14(v=vs.100)) explains it better:\r\n\r\n> DBG files have been superseded by PDB files, which are now more commonly used for debugging.\r\n\r\n> You can use the REBASE.EXE utility to strip debug information from a PE-format executable and store it in a DBG file. The file characteristic field IMAGE_FILE_DEBUG_STRIPPED in the PE file header tells the debugger that Codeview information has been stripped to a separate DBG file.\r\n\r\nThe Go linker is not creating a DBG file with debugging information, so it should not set the `IMAGE_FILE_DEBUG_STRIPPED` characteristic, else some tools, such as [SymChk](https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/using-symchk), will report a validation error if the corresponding DBG file is not found (see following sections for an example of a symchk execution).\r\n\r\nThis small PE incompliance has been there since the very beginning without anyone complaining. That's because Go binaries don't contain Windows-native debugging information (CodeView, DBG, PDB, ...), so there is no need to run debugging-related tools on them. My team at Microsoft is trying to improve this situation by generating PDB files from Go binaries so they can be debugged by WinDbg and friends (the tool is not public yet, but we plan to open-source it at some point). In this new context, having the `IMAGE_FILE_DEBUG_STRIPPED` characteristic is annoying, as debugging tools first try to search for a DBG file instead of going directly to the PDB, possibly reporting an error while doing so.\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n1) Build using the following dummy program with\r\n\r\n`go build -o main.exe .`\r\n\r\n\r\n\r\n2) Run [SymChk](https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/using-symchk)\r\n\r\n`symchk /v ./main.exe /s .`\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n@alexbrainman @golang/windows \r\n",OS-Windows|NeedsFix|FrozenDueToAge|compiler/runtime,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.20.2 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\***\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\***\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\***\\go\\pkg\\mod\r\nset GONOPROXY\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\***\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\***\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Users\\***\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.20.2\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\***\\code\\go-lab\\go.mod\r\nset GOWORK=C:\\Users\\***\\code\\go-lab\\go.work\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\***\\AppData\\Local\\Temp\\go-build1712504696=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### Context\r\n\r\n\r\nThe Go linker sets the `IMAGE_FILE_DEBUG_STRIPPED` PE characteristic for all internal-linked binaries. The PE format [docs](https://learn.microsoft.com/en-us/windows/win32/debug/pe-format) defines this characteristic as:\r\n\r\n> Debugging information is removed from the image file.\r\n\r\nThis definition is misleading, it does not really mean that the debugging information has been completely deleted, but that it has been removed from the PE file and moved into a DBG file.\r\n\r\nThis other Microsoft [doc](https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/da528y14(v=vs.100)) explains it better:\r\n\r\n> DBG files have been superseded by PDB files, which are now more commonly used for debugging.\r\n\r\n> You can use the REBASE.EXE utility to strip debug information from a PE-format executable and store it in a DBG file. The file characteristic field IMAGE_FILE_DEBUG_STRIPPED in the PE file header tells the debugger that Codeview information has been stripped to a separate DBG file.\r\n\r\nThe Go linker is not creating a DBG file with debugging information, so it should not set the `IMAGE_FILE_DEBUG_STRIPPED` characteristic, else some tools, such as [SymChk](https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/using-symchk), will report a validation error if the corresponding DBG file is not found (see following sections for an example of a symchk execution).\r\n\r\nThis small PE incompliance has been there since the very beginning without anyone complaining. That's because Go binaries don't contain Windows-native debugging information (CodeView, DBG, PDB, ...), so there is no need to run debugging-related tools on them. My team at Microsoft is trying to improve this situation by generating PDB files from Go binaries so they can be debugged by WinDbg and friends (the tool is not public yet, but we plan to open-source it at some point). In this new context, having the `IMAGE_FILE_DEBUG_STRIPPED` characteristic is annoying, as debugging tools first try to search for a DBG file instead of going directly to the PDB, possibly reporting an error while doing so.\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n1) Build using the following dummy program with\r\n\r\n`go build -o main.exe .`\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n  println(""foo"")\r\n}\r\n```\r\n\r\n2) Run [SymChk](https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/using-symchk)\r\n\r\n`symchk /v ./main.exe /s .`\r\n\r\n### What did you expect to see?\r\n\r\n```cmd\r\n...\r\n[SYMCHK] [ 0x00000000 - 0x000f0001 ] Checked ""C:\\Users\\***\\code\\go-lab\\cmd\\gotest\\gotest.exe""\r\n\r\nSYMCHK: FAILED files = 0\r\nSYMCHK: PASSED + IGNORED files = 1\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```cmd\r\n...\r\nDBGHELP: C:\\Users\\***\\code\\go-lab\\cmd\\gotest\\gotest.exe is stripped.  Searching for dbg file\r\nDBGHELP: .\\gotest.dbg - file not found\r\nDBGHELP: .\\exe\\gotest.dbg - path not found\r\nDBGHELP: .\\symbols\\exe\\gotest.dbg - path not found\r\nDBGHELP: C:\\Users\\***\\code\\go-lab\\cmd\\gotest\\gotest.dbg - file not found\r\n...\r\n[SYMCHK] [ 0x00000000 - 0x000f0301 ] Checked ""C:\\Users\\***\\code\\go-lab\\cmd\\gotest\\gotest.exe""\r\nSYMCHK: gotest.exe           FAILED  - Image is split correctly, but gotest.dbg is missing\r\n\r\nSYMCHK: FAILED files = 1\r\nSYMCHK: PASSED + IGNORED files = 0\r\n```\r\n\r\n@alexbrainman @golang/windows \r\n","go\r\npackage main\r\n\r\nfunc main() {\r\n  println(""foo"")\r\n}\r\n"
59378,"cmd/compile: internal compiler error: cannot call SetType(go.shape.int) on v (type int) <!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/REDACTED/Library/Caches/go-build""\r\nGOENV=""/Users/REDACTED/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/REDACTED/go/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/REDACTED/go""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""REDACTED""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/p4/t2ydl1qj10s99sfykmbnp6cc0000gq/T/go-build2434621046=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI was working on a package that uses generics. I changed a call from `slices.ContainsFunc` to `slices.IndexFunc` and it stopped compiling. The actual code was fairly complicated, but I've reduced it down to this nonsensical repro:\r\n\r\nhttps://go.dev/play/p/-3mq-tXI8lI\r\n\r\n\r\n\r\n```\r\ngo: finding module for package golang.org/x/exp/slices\r\ngo: downloading golang.org/x/exp v0.0.0-20230321023759-10a507213a29\r\ngo: found golang.org/x/exp/slices in golang.org/x/exp v0.0.0-20230321023759-10a507213a29\r\n# play\r\n./prog.go:10:9: internal compiler error: cannot call SetType(go.shape.int) on v (type int)\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected the code to keep compiling.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nREDACTED:393:9: internal compiler error: cannot call SetType(go.shape.int) on v (type int)\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL    REDACTED [build failed]\r\nFAIL\r\n```\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,cuonglm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/REDACTED/Library/Caches/go-build""\r\nGOENV=""/Users/REDACTED/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/REDACTED/go/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/REDACTED/go""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""REDACTED""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/p4/t2ydl1qj10s99sfykmbnp6cc0000gq/T/go-build2434621046=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI was working on a package that uses generics. I changed a call from `slices.ContainsFunc` to `slices.IndexFunc` and it stopped compiling. The actual code was fairly complicated, but I've reduced it down to this nonsensical repro:\r\n\r\nhttps://go.dev/play/p/-3mq-tXI8lI\r\n\r\n```go\r\npackage main\r\n\r\nimport ""golang.org/x/exp/slices""\r\n\r\nfunc main() {\r\n\tcompilerError([]int{}, func(int) bool { return true })\r\n}\r\n\r\nfunc compilerError[S []E, E any](a S, fn func(E) bool) {\r\n\tfor _, v := range a {\r\n\t\t// The error doesn't occur with slices.ContainsFunc\r\n\t\tslices.IndexFunc(a, func(e E) bool { return fn(v) })\r\n\t}\r\n}\r\n```\r\n\r\n```\r\ngo: finding module for package golang.org/x/exp/slices\r\ngo: downloading golang.org/x/exp v0.0.0-20230321023759-10a507213a29\r\ngo: found golang.org/x/exp/slices in golang.org/x/exp v0.0.0-20230321023759-10a507213a29\r\n# play\r\n./prog.go:10:9: internal compiler error: cannot call SetType(go.shape.int) on v (type int)\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expected the code to keep compiling.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nREDACTED:393:9: internal compiler error: cannot call SetType(go.shape.int) on v (type int)\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL    REDACTED [build failed]\r\nFAIL\r\n```\r\n\r\n","go\r\npackage main\r\n\r\nimport ""golang.org/x/exp/slices""\r\n\r\nfunc main() {\r\n\tcompilerError([]int{}, func(int) bool { return true })\r\n}\r\n\r\nfunc compilerError[S []E, E any](a S, fn func(E) bool) {\r\n\tfor _, v := range a {\r\n\t\t// The error doesn't occur with slices.ContainsFunc\r\n\t\tslices.IndexFunc(a, func(e E) bool { return fn(v) })\r\n\t}\r\n}\r\n"
59338,"spec: infer type arguments from assignments of generic functions (reverse type inference)This proposal suggests a generalization of type inference where type parameters of generic function values are inferred from assignments of those values to variables. Similar ideas have been suggested in the past, e.g. see #53138 and related issues mentioned in that issue.\r\n\r\n## Background\r\n\r\nAt the moment, and even with the proposed reformulation of type inference (#58650), type inference determines the type arguments of a generic function based on (partially) provided type arguments and function arguments passed _to_ that generic function.\r\n\r\nWe propose that missing type arguments of generic functions be inferred when such generic function values are _assigned_ to variables of function type. That is, rather than inferring the type arguments of the function being called (and values being passed _to_), we infer the type arguments of the function being passed _from_ the function being called (hence _reverse_ type inference for lack of a better term).\r\n\r\nFor instance, the generic function `g`\r\n\r\n\r\n\r\nmay be assigned to a variable of function type\r\n\r\n\r\n\r\nand type inference will infer that `P` must be `int` and `Q` must be `bool`. The function `g` may also be partially instantiated, so this assignment (after `f` is declared) would be allowed as well\r\n\r\n\r\n\r\nMore importantly, passing a generic function as a function value to another (possibly generic) function may infer the type arguments of the function value (and possibly of the generic function being called). Given\r\n\r\n\r\n\r\nwe can call\r\n\r\n\r\nand the type argument `Q` of `sort` will be inferred from the `list` argument, and the type argument `P` of `less` will be inferred from passing `less` to `sort`.\r\n\r\n## Proposal\r\n\r\nA generic function may not be fully instantiated when its (function) value is _assigned_ to a variable of matching function type. In that case, type inference will infer any unknown type arguments, if possible.\r\n\r\nFor the purpose of this proposal, initialization expressions (to fully typed variables) in variable declarations, assignments to redeclared (and thus fully typed) variables in short variable declarations, returning results to function result parameters, and passing values to (user-defined) functions in function calls are considered assignments where this form of type inference will be applicable.\r\n\r\nThis is the entire proposal.\r\n(Together with @ianlancetaylor.)\r\n\r\n## Implementation\r\n\r\nWe have a partial implementation (currently disabled in the dev branch) that implements significant aspects of this proposal (assignments and return statements, except passing arguments to generic functions) so that we can explore the ramifications. If this proposal is accepted, we hope to make the feature available for Go 1.21.",Proposal|Proposal-Accepted|release-blocker|generics|TypeInference|okay-after-rc1,griesemer,"This proposal suggests a generalization of type inference where type parameters of generic function values are inferred from assignments of those values to variables. Similar ideas have been suggested in the past, e.g. see #53138 and related issues mentioned in that issue.\r\n\r\n## Background\r\n\r\nAt the moment, and even with the proposed reformulation of type inference (#58650), type inference determines the type arguments of a generic function based on (partially) provided type arguments and function arguments passed _to_ that generic function.\r\n\r\nWe propose that missing type arguments of generic functions be inferred when such generic function values are _assigned_ to variables of function type. That is, rather than inferring the type arguments of the function being called (and values being passed _to_), we infer the type arguments of the function being passed _from_ the function being called (hence _reverse_ type inference for lack of a better term).\r\n\r\nFor instance, the generic function `g`\r\n\r\n```Go\r\nfunc g[P, Q any](x P) Q { ... }\r\n```\r\n\r\nmay be assigned to a variable of function type\r\n\r\n```Go\r\nvar f func(int) bool = g\r\n```\r\n\r\nand type inference will infer that `P` must be `int` and `Q` must be `bool`. The function `g` may also be partially instantiated, so this assignment (after `f` is declared) would be allowed as well\r\n\r\n```Go\r\nf = g[int]\r\n```\r\n\r\nMore importantly, passing a generic function as a function value to another (possibly generic) function may infer the type arguments of the function value (and possibly of the generic function being called). Given\r\n\r\n```Go\r\nfunc less[P Ordered](x, y P) bool { return x < y }\r\nfunc sort[Q any](list []Q, less func(x, y Q) bool) { ... }\r\n```\r\n\r\nwe can call\r\n\r\n```Go\r\nsort(list, less)\r\n```\r\nand the type argument `Q` of `sort` will be inferred from the `list` argument, and the type argument `P` of `less` will be inferred from passing `less` to `sort`.\r\n\r\n## Proposal\r\n\r\nA generic function may not be fully instantiated when its (function) value is _assigned_ to a variable of matching function type. In that case, type inference will infer any unknown type arguments, if possible.\r\n\r\nFor the purpose of this proposal, initialization expressions (to fully typed variables) in variable declarations, assignments to redeclared (and thus fully typed) variables in short variable declarations, returning results to function result parameters, and passing values to (user-defined) functions in function calls are considered assignments where this form of type inference will be applicable.\r\n\r\nThis is the entire proposal.\r\n(Together with @ianlancetaylor.)\r\n\r\n## Implementation\r\n\r\nWe have a partial implementation (currently disabled in the dev branch) that implements significant aspects of this proposal (assignments and return statements, except passing arguments to generic functions) so that we can explore the ramifications. If this proposal is accepted, we hope to make the feature available for Go 1.21.","Go\r\nfunc g[P, Q any](x P) Q { ... }\r\n"
59265,"x/sys/unix: Missing AT_EACCESS on non-Linux Unix systems### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/amd64\r\n$ tail -n 1 go.mod\r\nrequire golang.org/x/sys v0.6.0\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mk/Library/Caches/go-build""\r\nGOENV=""/Users/mk/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mk/.local/share/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mk/.local/share/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.20.2/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.20.2/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/7l/56csh9n54g503487v94kb2pm0000gp/T/go-build1532737799=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/yqd7iBRFmEV\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nProgram to run and (most likely) print `<nil>`.\r\n\r\n### What did you see instead?\r\n\r\nCompilation error:\r\n\r\n```terminal\r\n$ go run access.go\r\n# command-line-arguments\r\n./access.go:10:66: undefined: unix.AT_EACCESS\r\n```\r\n\r\n## Comment\r\n\r\nAT_EACCESS is specified by the POSIX standard, in the [fcntl.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/fcntl.h.html) header; used by the [faccessat](https://pubs.opengroup.org/onlinepubs/9699919799/functions/faccessat.html) syscall.\r\n\r\nIf the latter syscall is exposed, I don't see any reason why the AT_EACCESS constant is not provided.\r\n\r\nLooking through the source code of the x/sys/unix package however, ~~AT_EACCESS seems to only be available on Linux~~ AT_EACCESS is missing from AIX and Darwin.\r\n\r\n## Workaround\r\n\r\nI can workaround the issue by using CGo and manually poking at fcntl.h.\r\n\r\n\r\n\r\n```terminal\r\n$ go run access.go\r\n<nil>\r\n```\r\n\r\n",help wanted|OS-Darwin|NeedsFix|FrozenDueToAge|compiler/runtime,MKuranowski,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/amd64\r\n$ tail -n 1 go.mod\r\nrequire golang.org/x/sys v0.6.0\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mk/Library/Caches/go-build""\r\nGOENV=""/Users/mk/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mk/.local/share/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mk/.local/share/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.20.2/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.20.2/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/7l/56csh9n54g503487v94kb2pm0000gp/T/go-build1532737799=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/yqd7iBRFmEV\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/sys/unix""\r\n)\r\n\r\nfunc main() {\r\n\terr := unix.Faccessat(unix.AT_FDCWD, ""/bin/sh"", unix.X_OK, unix.AT_EACCESS)\r\n\tfmt.Println(err)\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nProgram to run and (most likely) print `<nil>`.\r\n\r\n### What did you see instead?\r\n\r\nCompilation error:\r\n\r\n```terminal\r\n$ go run access.go\r\n# command-line-arguments\r\n./access.go:10:66: undefined: unix.AT_EACCESS\r\n```\r\n\r\n## Comment\r\n\r\nAT_EACCESS is specified by the POSIX standard, in the [fcntl.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/fcntl.h.html) header; used by the [faccessat](https://pubs.opengroup.org/onlinepubs/9699919799/functions/faccessat.html) syscall.\r\n\r\nIf the latter syscall is exposed, I don't see any reason why the AT_EACCESS constant is not provided.\r\n\r\nLooking through the source code of the x/sys/unix package however, ~~AT_EACCESS seems to only be available on Linux~~ AT_EACCESS is missing from AIX and Darwin.\r\n\r\n## Workaround\r\n\r\nI can workaround the issue by using CGo and manually poking at fcntl.h.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/sys/unix""\r\n)\r\n\r\n// #include <fcntl.h>\r\nimport ""C""\r\n\r\nfunc main() {\r\n\terr := unix.Faccessat(unix.AT_FDCWD, ""/bin/sh"", unix.X_OK, C.AT_EACCESS)\r\n\tfmt.Println(err)\r\n}\r\n```\r\n\r\n```terminal\r\n$ go run access.go\r\n<nil>\r\n```\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/sys/unix""\r\n)\r\n\r\nfunc main() {\r\n\terr := unix.Faccessat(unix.AT_FDCWD, ""/bin/sh"", unix.X_OK, unix.AT_EACCESS)\r\n\tfmt.Println(err)\r\n}\r\n"
59243,"x/tools/gopls: Feature Request: Support for ""Inline Method"" refactoring code actionAbout once a week I look for the [Inline Method](https://refactoring.guru/inline-method) refactoring in VSCode.\r\n\r\nIf this could be added that would be super!\r\n\r\n### gopls version\r\n\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.20.1\r\n```\r\n\r\n### go env\r\n\r\n```\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/johan/Library/Caches/go-build""\r\nGOENV=""/Users/johan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/johan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/johan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.20.2/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.20.2/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cg/d7qzk4s13s9c8t49t3txdjpr0000gn/T/go-build213492774=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nPut the cursor on either of the `PrintHello`s.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA \U0001f4a1 with a Code Action to ""Inline `PrintHello`"".\r\n\r\nThe result should be this:\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nNo obvious way of having `gopls` inline `PrintHello()` for me.\r\n\r\n### Editor and settings\r\n\r\n```json\r\n{\r\n  ""files.exclude"": {\r\n    ""node_modules/"": true,\r\n    ""**/*.pyc"": true\r\n  },\r\n  ""editor.minimap.enabled"": false,\r\n  ""python.linting.mypyEnabled"": true,\r\n  ""git.autofetch"": true,\r\n  ""files.associations"": {\r\n    ""*.1"": ""troff"",\r\n    ""COMMIT_EDITMSG"": ""git-commit"",\r\n    ""TAG_EDITMSG"": ""git-commit""\r\n  },\r\n  ""git.confirmSync"": false,\r\n  ""python.linting.flake8Args"": [\r\n    ""--ignore=E501,W504""\r\n  ],\r\n  ""workbench.startupEditor"": ""newUntitledFile"",\r\n  ""zentabs.maximumOpenedTabs"": 4,\r\n  ""files.trimTrailingWhitespace"": true,\r\n  ""editor.scrollBeyondLastLine"": false,\r\n  ""editor.codeActionsOnSave"": {\r\n    ""source.fixAll.dart"": true,\r\n    ""source.fixAll.eslint"": true\r\n  },\r\n  ""go.useLanguageServer"": true,\r\n  ""editor.cursorSurroundingLines"": 4,\r\n  ""[javascript]"": {\r\n    ""editor.defaultFormatter"": ""numso.prettier-standard-vscode""\r\n  },\r\n  ""workbench.editor.limit.enabled"": true,\r\n  ""workbench.editor.limit.value"": 5,\r\n  ""python.showStartPage"": false,\r\n  ""[c]"": {\r\n    ""editor.defaultFormatter"": ""xaver.clang-format""\r\n  },\r\n  ""[cpp]"": {\r\n    ""editor.defaultFormatter"": ""xaver.clang-format""\r\n  },\r\n  ""rust-analyzer.checkOnSave.command"": ""clippy"",\r\n  ""rst.preview.pythonPath"": ""python3"",\r\n  ""git.countBadge"": ""off"",\r\n  ""scm.countBadge"": ""off"",\r\n  ""[html]"": {\r\n    ""editor.defaultFormatter"": ""vscode.html-language-features""\r\n  },\r\n  ""liveServer.settings.donotShowInfoMsg"": true,\r\n  ""html.autoClosingTags"": false,\r\n  ""html.format.endWithNewline"": true,\r\n  ""workbench.editorAssociations"": {\r\n    ""*.ipynb"": ""jupyter-notebook""\r\n  },\r\n  ""go.toolsManagement.autoUpdate"": true,\r\n  ""workbench.editor.untitled.hint"": ""hidden"",\r\n  ""explorer.confirmDelete"": false,\r\n  ""security.workspace.trust.untrustedFiles"": ""open"",\r\n  ""notebook.cellToolbarLocation"": {\r\n    ""default"": ""right"",\r\n    ""jupyter-notebook"": ""left""\r\n  },\r\n  ""blender.executables"": [\r\n    {\r\n      ""path"": ""/Applications/Blender.app/Contents/MacOS/blender"",\r\n      ""name"": """",\r\n      ""isDebug"": false\r\n    }\r\n  ],\r\n  ""blender.allowModifyExternalPython"": true,\r\n  ""python.linting.mypyArgs"": [\r\n    ""--ignore-missing-imports"",\r\n    ""--follow-imports=silent"",\r\n    ""--show-column-numbers"",\r\n    ""--check-untyped-defs""\r\n  ],\r\n  ""[dockerfile]"": {\r\n    ""editor.defaultFormatter"": ""ms-azuretools.vscode-docker""\r\n  },\r\n  ""testExplorer.useNativeTesting"": true,\r\n  ""python.formatting.provider"": ""black"",\r\n  ""terminal.integrated.scrollback"": 10000,\r\n  ""redhat.telemetry.enabled"": true,\r\n  ""outline.showArrays"": false,\r\n  ""outline.showBooleans"": false,\r\n  ""outline.showConstants"": false,\r\n  ""outline.showEnumMembers"": false,\r\n  ""outline.showEnums"": false,\r\n  ""outline.showFields"": false,\r\n  ""outline.showKeys"": false,\r\n  ""outline.showNull"": false,\r\n  ""outline.showNumbers"": false,\r\n  ""outline.showObjects"": false,\r\n  ""outline.showOperators"": false,\r\n  ""outline.showProperties"": false,\r\n  ""outline.showStrings"": false,\r\n  ""outline.showTypeParameters"": false,\r\n  ""outline.showVariables"": false,\r\n  ""outline.showStructs"": false,\r\n  ""breadcrumbs.symbolSortOrder"": ""name"",\r\n  ""editor.guides.bracketPairsHorizontal"": false,\r\n  ""editor.guides.indentation"": false,\r\n  ""editor.guides.bracketPairs"": ""active"",\r\n  ""search.smartCase"": true,\r\n  ""[dart]"": {\r\n    ""editor.formatOnSave"": true,\r\n    ""editor.formatOnType"": true,\r\n    ""editor.rulers"": [\r\n      80\r\n    ],\r\n    ""editor.selectionHighlight"": false,\r\n    ""editor.suggest.snippetsPreventQuickSuggestions"": false,\r\n    ""editor.suggestSelection"": ""first"",\r\n    ""editor.tabCompletion"": ""onlySnippets"",\r\n    ""editor.wordBasedSuggestions"": false\r\n  },\r\n  ""editor.fontLigatures"": true,\r\n  ""editor.fontFamily"": ""Fira Code, Menlo, Monaco, 'Courier New', monospace"",\r\n  ""dart.debugExternalPackageLibraries"": true,\r\n  ""dart.debugSdkLibraries"": true,\r\n  ""[json]"": {\r\n    ""editor.defaultFormatter"": ""vscode.json-language-features""\r\n  },\r\n  ""go.lintTool"": ""golangci-lint"",\r\n  ""editor.stickyScroll.enabled"": true,\r\n  ""lldb.suppressUpdateNotifications"": true,\r\n  ""outline.collapseItems"": ""alwaysCollapse"",\r\n  ""python.linting.cwd"": """",\r\n  ""[typescript]"": {\r\n    ""editor.defaultFormatter"": ""esbenp.prettier-vscode""\r\n  },\r\n  ""[jsonc]"": {\r\n    ""editor.defaultFormatter"": ""vscode.json-language-features""\r\n  },\r\n  ""javascript.format.enable"": false,\r\n  ""typescript.format.enable"": false,\r\n  ""[json-tmLanguage]"": {\r\n    ""editor.defaultFormatter"": ""RedCMD.tmlanguage-syntax-highlighter""\r\n  },\r\n  ""[python]"": {\r\n    ""editor.formatOnType"": true\r\n  },\r\n  ""[markdown]"": {\r\n    ""editor.defaultFormatter"": ""numso.prettier-standard-vscode""\r\n  },\r\n  ""diffEditor.renderSideBySide"": false,\r\n  ""git.verboseCommit"": true,\r\n  ""workbench.sideBar.location"": ""right""\r\n}\r\n```\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n",FeatureRequest|gopls|Tools|Refactoring,adonovan,"About once a week I look for the [Inline Method](https://refactoring.guru/inline-method) refactoring in VSCode.\r\n\r\nIf this could be added that would be super!\r\n\r\n### gopls version\r\n\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.20.1\r\n```\r\n\r\n### go env\r\n\r\n```\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/johan/Library/Caches/go-build""\r\nGOENV=""/Users/johan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/johan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/johan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.20.2/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.20.2/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cg/d7qzk4s13s9c8t49t3txdjpr0000gn/T/go-build213492774=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nPut the cursor on either of the `PrintHello`s.\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc PrintHello() {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n}\r\n\r\nfunc main() {\r\n\tPrintHello()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nA \U0001f4a1 with a Code Action to ""Inline `PrintHello`"".\r\n\r\nThe result should be this:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n}\r\n```\r\n\r\n### What did you see instead?\r\n\r\nNo obvious way of having `gopls` inline `PrintHello()` for me.\r\n\r\n### Editor and settings\r\n\r\n```json\r\n{\r\n  ""files.exclude"": {\r\n    ""node_modules/"": true,\r\n    ""**/*.pyc"": true\r\n  },\r\n  ""editor.minimap.enabled"": false,\r\n  ""python.linting.mypyEnabled"": true,\r\n  ""git.autofetch"": true,\r\n  ""files.associations"": {\r\n    ""*.1"": ""troff"",\r\n    ""COMMIT_EDITMSG"": ""git-commit"",\r\n    ""TAG_EDITMSG"": ""git-commit""\r\n  },\r\n  ""git.confirmSync"": false,\r\n  ""python.linting.flake8Args"": [\r\n    ""--ignore=E501,W504""\r\n  ],\r\n  ""workbench.startupEditor"": ""newUntitledFile"",\r\n  ""zentabs.maximumOpenedTabs"": 4,\r\n  ""files.trimTrailingWhitespace"": true,\r\n  ""editor.scrollBeyondLastLine"": false,\r\n  ""editor.codeActionsOnSave"": {\r\n    ""source.fixAll.dart"": true,\r\n    ""source.fixAll.eslint"": true\r\n  },\r\n  ""go.useLanguageServer"": true,\r\n  ""editor.cursorSurroundingLines"": 4,\r\n  ""[javascript]"": {\r\n    ""editor.defaultFormatter"": ""numso.prettier-standard-vscode""\r\n  },\r\n  ""workbench.editor.limit.enabled"": true,\r\n  ""workbench.editor.limit.value"": 5,\r\n  ""python.showStartPage"": false,\r\n  ""[c]"": {\r\n    ""editor.defaultFormatter"": ""xaver.clang-format""\r\n  },\r\n  ""[cpp]"": {\r\n    ""editor.defaultFormatter"": ""xaver.clang-format""\r\n  },\r\n  ""rust-analyzer.checkOnSave.command"": ""clippy"",\r\n  ""rst.preview.pythonPath"": ""python3"",\r\n  ""git.countBadge"": ""off"",\r\n  ""scm.countBadge"": ""off"",\r\n  ""[html]"": {\r\n    ""editor.defaultFormatter"": ""vscode.html-language-features""\r\n  },\r\n  ""liveServer.settings.donotShowInfoMsg"": true,\r\n  ""html.autoClosingTags"": false,\r\n  ""html.format.endWithNewline"": true,\r\n  ""workbench.editorAssociations"": {\r\n    ""*.ipynb"": ""jupyter-notebook""\r\n  },\r\n  ""go.toolsManagement.autoUpdate"": true,\r\n  ""workbench.editor.untitled.hint"": ""hidden"",\r\n  ""explorer.confirmDelete"": false,\r\n  ""security.workspace.trust.untrustedFiles"": ""open"",\r\n  ""notebook.cellToolbarLocation"": {\r\n    ""default"": ""right"",\r\n    ""jupyter-notebook"": ""left""\r\n  },\r\n  ""blender.executables"": [\r\n    {\r\n      ""path"": ""/Applications/Blender.app/Contents/MacOS/blender"",\r\n      ""name"": """",\r\n      ""isDebug"": false\r\n    }\r\n  ],\r\n  ""blender.allowModifyExternalPython"": true,\r\n  ""python.linting.mypyArgs"": [\r\n    ""--ignore-missing-imports"",\r\n    ""--follow-imports=silent"",\r\n    ""--show-column-numbers"",\r\n    ""--check-untyped-defs""\r\n  ],\r\n  ""[dockerfile]"": {\r\n    ""editor.defaultFormatter"": ""ms-azuretools.vscode-docker""\r\n  },\r\n  ""testExplorer.useNativeTesting"": true,\r\n  ""python.formatting.provider"": ""black"",\r\n  ""terminal.integrated.scrollback"": 10000,\r\n  ""redhat.telemetry.enabled"": true,\r\n  ""outline.showArrays"": false,\r\n  ""outline.showBooleans"": false,\r\n  ""outline.showConstants"": false,\r\n  ""outline.showEnumMembers"": false,\r\n  ""outline.showEnums"": false,\r\n  ""outline.showFields"": false,\r\n  ""outline.showKeys"": false,\r\n  ""outline.showNull"": false,\r\n  ""outline.showNumbers"": false,\r\n  ""outline.showObjects"": false,\r\n  ""outline.showOperators"": false,\r\n  ""outline.showProperties"": false,\r\n  ""outline.showStrings"": false,\r\n  ""outline.showTypeParameters"": false,\r\n  ""outline.showVariables"": false,\r\n  ""outline.showStructs"": false,\r\n  ""breadcrumbs.symbolSortOrder"": ""name"",\r\n  ""editor.guides.bracketPairsHorizontal"": false,\r\n  ""editor.guides.indentation"": false,\r\n  ""editor.guides.bracketPairs"": ""active"",\r\n  ""search.smartCase"": true,\r\n  ""[dart]"": {\r\n    ""editor.formatOnSave"": true,\r\n    ""editor.formatOnType"": true,\r\n    ""editor.rulers"": [\r\n      80\r\n    ],\r\n    ""editor.selectionHighlight"": false,\r\n    ""editor.suggest.snippetsPreventQuickSuggestions"": false,\r\n    ""editor.suggestSelection"": ""first"",\r\n    ""editor.tabCompletion"": ""onlySnippets"",\r\n    ""editor.wordBasedSuggestions"": false\r\n  },\r\n  ""editor.fontLigatures"": true,\r\n  ""editor.fontFamily"": ""Fira Code, Menlo, Monaco, 'Courier New', monospace"",\r\n  ""dart.debugExternalPackageLibraries"": true,\r\n  ""dart.debugSdkLibraries"": true,\r\n  ""[json]"": {\r\n    ""editor.defaultFormatter"": ""vscode.json-language-features""\r\n  },\r\n  ""go.lintTool"": ""golangci-lint"",\r\n  ""editor.stickyScroll.enabled"": true,\r\n  ""lldb.suppressUpdateNotifications"": true,\r\n  ""outline.collapseItems"": ""alwaysCollapse"",\r\n  ""python.linting.cwd"": """",\r\n  ""[typescript]"": {\r\n    ""editor.defaultFormatter"": ""esbenp.prettier-vscode""\r\n  },\r\n  ""[jsonc]"": {\r\n    ""editor.defaultFormatter"": ""vscode.json-language-features""\r\n  },\r\n  ""javascript.format.enable"": false,\r\n  ""typescript.format.enable"": false,\r\n  ""[json-tmLanguage]"": {\r\n    ""editor.defaultFormatter"": ""RedCMD.tmlanguage-syntax-highlighter""\r\n  },\r\n  ""[python]"": {\r\n    ""editor.formatOnType"": true\r\n  },\r\n  ""[markdown]"": {\r\n    ""editor.defaultFormatter"": ""numso.prettier-standard-vscode""\r\n  },\r\n  ""diffEditor.renderSideBySide"": false,\r\n  ""git.verboseCommit"": true,\r\n  ""workbench.sideBar.location"": ""right""\r\n}\r\n```\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc PrintHello() {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n}\r\n\r\nfunc main() {\r\n\tPrintHello()\r\n}\r\n"
59213,"runtime: TLS slot index over 64 and crash<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n go version go1.20.2 windows/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\...\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\...\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=...\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=...\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=...\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=...\r\nset GOVCS=\r\nset GOVERSION=go1.20.2\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\xxx\\AppData\\Local\\Temp\\go-build2366715319=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n1. Build a golang dll in windows with command `go build -buildmode=c-shared -o=""a.dll"" ""./main.go""`:\r\n  \r\n2. Using the windows api `CreateRemoteThread` inject `a.dll` to any process.\r\n3. Wait seconds the injected process crash and ida debugger show this:\r\n![1](https://user-images.githubusercontent.com/9884836/227420249-d7f76e03-dc83-4a86-be1a-96126a44e3b1.png)\r\n  The TlsAlloc returned slot index over 64 and the  [golang runtime assertion](https://github.com/golang/go/blob/7ec2e8442415bd7d15819cf2aeba3a678223c81c/src/runtime/sys_windows_amd64.s#L301) failed.\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n",OS-Windows|NeedsFix|compiler/runtime,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n go version go1.20.2 windows/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\...\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\...\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=...\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=...\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=...\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=...\r\nset GOVCS=\r\nset GOVERSION=go1.20.2\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\xxx\\AppData\\Local\\Temp\\go-build2366715319=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n1. Build a golang dll in windows with command `go build -buildmode=c-shared -o=""a.dll"" ""./main.go""`:\r\n  ```golang\r\n  package main\r\n  \r\n  import ""C""\r\n\r\n  func main() {}\r\n  ```\r\n2. Using the windows api `CreateRemoteThread` inject `a.dll` to any process.\r\n3. Wait seconds the injected process crash and ida debugger show this:\r\n![1](https://user-images.githubusercontent.com/9884836/227420249-d7f76e03-dc83-4a86-be1a-96126a44e3b1.png)\r\n  The TlsAlloc returned slot index over 64 and the  [golang runtime assertion](https://github.com/golang/go/blob/7ec2e8442415bd7d15819cf2aeba3a678223c81c/src/runtime/sys_windows_amd64.s#L301) failed.\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n","golang\r\n  package main\r\n  \r\n  import ""C""\r\n\r\n  func main() {}\r\n  "
59209,"go/types, types2: bad error message for invalid array length\r\nproduces the type-check error:\r\n```\r\nx.go:2:9: array length 1 << 100 (untyped int constant 1267650600228229401496703205376) must be integer\r\n```\r\nThe int constant is an integer.",NeedsFix|FrozenDueToAge,griesemer,```Go\r\npackage p\r\ntype _ [1 << 100]byte\r\n```\r\nproduces the type-check error:\r\n```\r\nx.go:2:9: array length 1 << 100 (untyped int constant 1267650600228229401496703205376) must be integer\r\n```\r\nThe int constant is an integer.,Go\r\npackage p\r\ntype _ [1 << 100]byte\r\n
59208,"debug/elf: Incorrectly double-decompressing ELF section\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""/Users/brancz/bin""\r\nGOCACHE=""/Users/brancz/Library/Caches/go-build""\r\nGOENV=""/Users/brancz/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/brancz/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/brancz""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/brancz/src/github.com/polarsignals/polarsignals/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/var/folders/rl/8sh8jb5s1c1fl77ztzy4zw6m0000gn/T/go-build2747742421=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nDownloaded the debuginfo for liblzma5:\r\n\r\n```\r\ncurl https://debuginfod.ubuntu.com/buildid/0e13b0f27b3bc79a2828c11199ce4336a348af37/debuginfo > liblzma5.debuginfo\r\n```\r\n\r\nTried to look at the DWARF entries:\r\n\r\n\r\n\r\nAnd running that returns an error:\r\n\r\n```\r\n$ go run main.go\r\nDWARF ERROR: zlib: invalid header\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo error.\r\n\r\n### What did you see instead?\r\n\r\nAn error, and I suspect I know why: `debug/elf` in extremely rare cases attempts to double-decompress an ELF section.\r\n\r\nFirst the call to `.Data()` returns the decompressed section:\r\n\r\nhttps://github.com/golang/go/blob/0aa14fca8c639c9ceba264dbf0d82bd53306aeaa/src/debug/elf/file.go#L1308\r\n\r\nAnd if by pure chance the first 4 bytes of the decompressed bytes also happen to be what trigger a decompression, then the `.DWARF()` function will attempt to decompress the section a second time:\r\n\r\nhttps://github.com/golang/go/blob/0aa14fca8c639c9ceba264dbf0d82bd53306aeaa/src/debug/elf/file.go#L1317-L1319\r\n\r\ncc @mengzhuo since you recently added this case",compiler/runtime,mengzhuo,"\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""/Users/brancz/bin""\r\nGOCACHE=""/Users/brancz/Library/Caches/go-build""\r\nGOENV=""/Users/brancz/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/brancz/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/brancz""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.20.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.20.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/brancz/src/github.com/polarsignals/polarsignals/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/var/folders/rl/8sh8jb5s1c1fl77ztzy4zw6m0000gn/T/go-build2747742421=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nDownloaded the debuginfo for liblzma5:\r\n\r\n```\r\ncurl https://debuginfod.ubuntu.com/buildid/0e13b0f27b3bc79a2828c11199ce4336a348af37/debuginfo > liblzma5.debuginfo\r\n```\r\n\r\nTried to look at the DWARF entries:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""bytes""\r\n\t""debug/elf""\r\n\t""fmt""\r\n\t""io""\r\n\t""net/http""\r\n)\r\n\r\nfunc main() {\r\n\tresp, err := http.Get(""https://debuginfod.ubuntu.com/buildid/0e13b0f27b3bc79a2828c11199ce4336a348af37/debuginfo"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tif resp.StatusCode != 200 {\r\n\t\tpanic(""unexpected status code"")\r\n\t}\r\n\r\n\tcontent, err := io.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tf, err := elf.NewFile(bytes.NewReader(content))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\t_, err = f.DWARF()\r\n\tfmt.Println(""DWARF ERROR:"", err)\r\n}\r\n```\r\n\r\nAnd running that returns an error:\r\n\r\n```\r\n$ go run main.go\r\nDWARF ERROR: zlib: invalid header\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo error.\r\n\r\n### What did you see instead?\r\n\r\nAn error, and I suspect I know why: `debug/elf` in extremely rare cases attempts to double-decompress an ELF section.\r\n\r\nFirst the call to `.Data()` returns the decompressed section:\r\n\r\nhttps://github.com/golang/go/blob/0aa14fca8c639c9ceba264dbf0d82bd53306aeaa/src/debug/elf/file.go#L1308\r\n\r\nAnd if by pure chance the first 4 bytes of the decompressed bytes also happen to be what trigger a decompression, then the `.DWARF()` function will attempt to decompress the section a second time:\r\n\r\nhttps://github.com/golang/go/blob/0aa14fca8c639c9ceba264dbf0d82bd53306aeaa/src/debug/elf/file.go#L1317-L1319\r\n\r\ncc @mengzhuo since you recently added this case","go\r\npackage main\r\n\r\nimport (\r\n\t""bytes""\r\n\t""debug/elf""\r\n\t""fmt""\r\n\t""io""\r\n\t""net/http""\r\n)\r\n\r\nfunc main() {\r\n\tresp, err := http.Get(""https://debuginfod.ubuntu.com/buildid/0e13b0f27b3bc79a2828c11199ce4336a348af37/debuginfo"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tif resp.StatusCode != 200 {\r\n\t\tpanic(""unexpected status code"")\r\n\t}\r\n\r\n\tcontent, err := io.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tf, err := elf.NewFile(bytes.NewReader(content))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\t_, err = f.DWARF()\r\n\tfmt.Println(""DWARF ERROR:"", err)\r\n}\r\n"
59207,"go/types, types2: array size computation may overflow to 0\r\ngo test -run Manual -- x.go produces\r\n```\r\nx.go:9:8: unsafe.Sizeof(a) (constant 0 of type uintptr)\r\n```\r\n\r\n",NeedsFix|FrozenDueToAge,griesemer,"```Go\r\npackage p\r\n\r\nimport ""unsafe""\r\n\r\ntype E [1 << 32]byte\r\nvar a [1<<32]E\r\n\r\nfunc _() {\r\n\ttrace(unsafe.Sizeof(a))\r\n}\r\n```\r\ngo test -run Manual -- x.go produces\r\n```\r\nx.go:9:8: unsafe.Sizeof(a) (constant 0 of type uintptr)\r\n```\r\n\r\n","Go\r\npackage p\r\n\r\nimport ""unsafe""\r\n\r\ntype E [1 << 32]byte\r\nvar a [1<<32]E\r\n\r\nfunc _() {\r\n\ttrace(unsafe.Sizeof(a))\r\n}\r\n"
59164,"x/tools/go/analysis/analysistest: facts are sometimes not inherited from dependent analyzers<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.20.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ericchiang/Library/Caches/go-build""\r\nGOENV=""/Users/ericchiang/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ericchiang/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ericchiang/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/d1/wpvcpdrs2tlgn5xs3_xm88th0000gn/T/go-build2810425986=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nWrote an analyzer that depends on facts from another analyzer. In my case, this was a dead code analyzer that depended on facts omitted by a ""usage"" analyzer. Per the docs in the analysis package:\r\n\r\nhttps://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Modular_analysis_with_Facts\r\n\r\nI modeled this as an analyzer that read facts from another.\r\n\r\nHowever, when I tried to test with analysistest, the analyzer wasn't seeing the facts:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAnalyzer to see the facts exported by the ""factAnalyzer"".\r\n\r\n### What did you see instead?\r\n\r\nIt appears that when analyzing the same package, facts aren't inherited:\r\n\r\nhttps://github.com/golang/tools/blob/fa556487c5c2be818dd2bab43e16f1afa06f8f89/go/analysis/internal/checker/checker.go#L721-L732\r\n\r\nSo the test fails:\r\n\r\n```\r\n% go test\r\n--- FAIL: TestAnalyze (0.07s)\r\n    analysistest.go:520: a/a.go:2: no diagnostic was reported matching `test message`\r\nFAIL\r\nexit status 1\r\nFAIL\texample.com/m\t0.368s\r\n```\r\n",NeedsInvestigation|FrozenDueToAge|Tools,adonovan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.20.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ericchiang/Library/Caches/go-build""\r\nGOENV=""/Users/ericchiang/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ericchiang/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ericchiang/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/d1/wpvcpdrs2tlgn5xs3_xm88th0000gn/T/go-build2810425986=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nWrote an analyzer that depends on facts from another analyzer. In my case, this was a dead code analyzer that depended on facts omitted by a ""usage"" analyzer. Per the docs in the analysis package:\r\n\r\nhttps://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Modular_analysis_with_Facts\r\n\r\nI modeled this as an analyzer that read facts from another.\r\n\r\nHowever, when I tried to test with analysistest, the analyzer wasn't seeing the facts:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""testing""\r\n\r\n        ""golang.org/x/tools/go/analysis""\r\n        ""golang.org/x/tools/go/analysis/analysistest""\r\n)\r\n\r\nvar file = `package a\r\nfunc b() {} // want ""test message""\r\n`\r\n\r\ntype fact struct{ Message string }\r\n\r\nfunc (f *fact) AFact() {}\r\n\r\nvar factAnalyzer = &analysis.Analyzer{\r\n        Name:      ""dependent"",\r\n        FactTypes: []analysis.Fact{&fact{}},\r\n        Run: func(pass *analysis.Pass) (interface{}, error) {\r\n                o := pass.Pkg.Scope().Lookup(""b"")\r\n                pass.ExportObjectFact(o, &fact{Message: ""test message""})\r\n                return nil, nil\r\n        },\r\n}\r\n\r\nvar analyzer = &analysis.Analyzer{\r\n        Name:      ""analyzer"",\r\n        FactTypes: []analysis.Fact{&fact{}},\r\n        Requires:  []*analysis.Analyzer{factAnalyzer},\r\n        Run: func(pass *analysis.Pass) (interface{}, error) {\r\n                o := pass.Pkg.Scope().Lookup(""b"")\r\n                var f fact\r\n                if !pass.ImportObjectFact(o, &f) {\r\n                        return nil, nil\r\n                }\r\n                pass.Report(analysis.Diagnostic{Pos: o.Pos(), Message: f.Message})\r\n                return nil, nil\r\n        },\r\n}\r\n\r\nfunc TestAnalyze(t *testing.T) {\r\n        files := map[string]string{""a/a.go"": file}\r\n        dir, cleanup, err := analysistest.WriteFiles(files)\r\n        if err != nil {\r\n                t.Fatalf(""writing temp files"")\r\n        }\r\n        defer cleanup()\r\n        analysistest.Run(t, dir, analyzer, ""a"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAnalyzer to see the facts exported by the ""factAnalyzer"".\r\n\r\n### What did you see instead?\r\n\r\nIt appears that when analyzing the same package, facts aren't inherited:\r\n\r\nhttps://github.com/golang/tools/blob/fa556487c5c2be818dd2bab43e16f1afa06f8f89/go/analysis/internal/checker/checker.go#L721-L732\r\n\r\nSo the test fails:\r\n\r\n```\r\n% go test\r\n--- FAIL: TestAnalyze (0.07s)\r\n    analysistest.go:520: a/a.go:2: no diagnostic was reported matching `test message`\r\nFAIL\r\nexit status 1\r\nFAIL\texample.com/m\t0.368s\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n        ""testing""\r\n\r\n        ""golang.org/x/tools/go/analysis""\r\n        ""golang.org/x/tools/go/analysis/analysistest""\r\n)\r\n\r\nvar file = `package a\r\nfunc b() {} // want ""test message""\r\n`\r\n\r\ntype fact struct{ Message string }\r\n\r\nfunc (f *fact) AFact() {}\r\n\r\nvar factAnalyzer = &analysis.Analyzer{\r\n        Name:      ""dependent"",\r\n        FactTypes: []analysis.Fact{&fact{}},\r\n        Run: func(pass *analysis.Pass) (interface{}, error) {\r\n                o := pass.Pkg.Scope().Lookup(""b"")\r\n                pass.ExportObjectFact(o, &fact{Message: ""test message""})\r\n                return nil, nil\r\n        },\r\n}\r\n\r\nvar analyzer = &analysis.Analyzer{\r\n        Name:      ""analyzer"",\r\n        FactTypes: []analysis.Fact{&fact{}},\r\n        Requires:  []*analysis.Analyzer{factAnalyzer},\r\n        Run: func(pass *analysis.Pass) (interface{}, error) {\r\n                o := pass.Pkg.Scope().Lookup(""b"")\r\n                var f fact\r\n                if !pass.ImportObjectFact(o, &f) {\r\n                        return nil, nil\r\n                }\r\n                pass.Report(analysis.Diagnostic{Pos: o.Pos(), Message: f.Message})\r\n                return nil, nil\r\n        },\r\n}\r\n\r\nfunc TestAnalyze(t *testing.T) {\r\n        files := map[string]string{""a/a.go"": file}\r\n        dir, cleanup, err := analysistest.WriteFiles(files)\r\n        if err != nil {\r\n                t.Fatalf(""writing temp files"")\r\n        }\r\n        defer cleanup()\r\n        analysistest.Run(t, dir, analyzer, ""a"")\r\n}\r\n"
59070,"cmd/compile: does not inline method of generic type across packages when there are multiple instantiations<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/r/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/Users/r/sdk/go1.20.2""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/sdk/go1.20.2/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/r/workspace/testcode/testinlinegeneric/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build2389814434=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.20.2 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.20.2\r\nuname -v: Darwin Kernel Version 22.3.0: Mon Jan 30 20:38:37 PST 2023; root:xnu-8792.81.3~2/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.2.1\r\nBuildVersion:\t\t22D68\r\nlldb --version: lldb-1400.0.38.17\r\nApple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\ngo.mod:\r\n```\r\nmodule test/inlinegeneric\r\n\r\ngo 1.20\r\n```\r\n\r\na/a.go:\r\n\r\n\r\nb/b.go:\r\n\r\n\r\nmain.go:\r\n\r\n\r\n`go1.20.2 build --gcflags=""-m=2"" ./main.go`\r\n\r\n`go1.19.7 build --gcflags=""-m=2"" ./main.go`\r\n\r\n### What did you expect to see?\r\nFor go1.20.2:\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 20 as: func() { b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo1[go.shape.int]).Run\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n```\r\n\r\nFor go1.19.7\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 20 as: func() { b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo1[go.shape.int_0]).Run\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n```\r\n\r\n\r\n### What did you see instead?\r\nFor go1.20.2:\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 27 as: func() { x = <nil>; _ = x; b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n./a/a.go:6:6: can inline a.(*Foo1[go.shape.int]).Run with cost 0 as: method(*a.Foo1[go.shape.int]) func(*[0]uintptr) {  }\r\n./a/a.go:6:6: can inline a.(*Foo1[int]).Run with cost 9 as: method(*a.Foo1[int]) func() { var .autotmp_0 *a.Foo1[int]; .autotmp_0 = <nil>; (*a.Foo1[go.shape.int]).Run(.autotmp_0, &a..dict.Foo1[int]) }\r\n./a/a.go:6:6: inlining call to a.(*Foo1[go.shape.int]).Run\r\n```\r\n\r\nFor go1.19.7\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 27 as: func() { var x b.Boo; x = <nil>; _ = x; b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n./a/a.go:6:17: can inline a.(*Foo1[go.shape.int_0]).Run with cost 0 as: func(uintptr, *a.Foo1[go.shape.int_0]) {  }\r\n```\r\n",NeedsInvestigation|compiler/runtime,mdempsky,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/r/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/Users/r/sdk/go1.20.2""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/sdk/go1.20.2/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/r/workspace/testcode/testinlinegeneric/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build2389814434=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.20.2 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.20.2\r\nuname -v: Darwin Kernel Version 22.3.0: Mon Jan 30 20:38:37 PST 2023; root:xnu-8792.81.3~2/RELEASE_ARM64_T6000\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t13.2.1\r\nBuildVersion:\t\t22D68\r\nlldb --version: lldb-1400.0.38.17\r\nApple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\ngo.mod:\r\n```\r\nmodule test/inlinegeneric\r\n\r\ngo 1.20\r\n```\r\n\r\na/a.go:\r\n```golang\r\npackage a\r\n\r\ntype Foo1[T any] struct {\r\n}\r\n\r\nfunc (*Foo1[T]) Run() {\r\n}\r\n\r\ntype Foo2 struct {\r\n}\r\n\r\nfunc (*Foo2) Run() {\r\n}\r\n```\r\n\r\nb/b.go:\r\n```golang\r\npackage b\r\n\r\nimport ""test/inlinegeneric/a""\r\n\r\nfunc Bar() {\r\n\tvar f1 a.Foo1[int]\r\n\tf1.Run()\r\n\tvar f2 a.Foo2\r\n\tf2.Run()\r\n}\r\n\r\ntype Boo struct {\r\n\tf1 a.Foo1[int]\r\n\tf2 a.Foo2\r\n}\r\n```\r\n\r\nmain.go:\r\n```golang\r\npackage main\r\n\r\nimport ""test/inlinegeneric/b""\r\n\r\nfunc main() {\r\n\tvar x b.Boo\r\n\t_ = x\r\n\tb.Bar()\r\n}\r\n```\r\n\r\n`go1.20.2 build --gcflags=""-m=2"" ./main.go`\r\n\r\n`go1.19.7 build --gcflags=""-m=2"" ./main.go`\r\n\r\n### What did you expect to see?\r\nFor go1.20.2:\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 20 as: func() { b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo1[go.shape.int]).Run\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n```\r\n\r\nFor go1.19.7\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 20 as: func() { b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo1[go.shape.int_0]).Run\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n```\r\n\r\n\r\n### What did you see instead?\r\nFor go1.20.2:\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 27 as: func() { x = <nil>; _ = x; b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n./a/a.go:6:6: can inline a.(*Foo1[go.shape.int]).Run with cost 0 as: method(*a.Foo1[go.shape.int]) func(*[0]uintptr) {  }\r\n./a/a.go:6:6: can inline a.(*Foo1[int]).Run with cost 9 as: method(*a.Foo1[int]) func() { var .autotmp_0 *a.Foo1[int]; .autotmp_0 = <nil>; (*a.Foo1[go.shape.int]).Run(.autotmp_0, &a..dict.Foo1[int]) }\r\n./a/a.go:6:6: inlining call to a.(*Foo1[go.shape.int]).Run\r\n```\r\n\r\nFor go1.19.7\r\n```\r\n# command-line-arguments\r\n./main.go:5:6: can inline main with cost 27 as: func() { var x b.Boo; x = <nil>; _ = x; b.Bar() }\r\n./main.go:8:7: inlining call to b.Bar\r\n./main.go:8:7: inlining call to a.(*Foo2).Run\r\n./a/a.go:6:17: can inline a.(*Foo1[go.shape.int_0]).Run with cost 0 as: func(uintptr, *a.Foo1[go.shape.int_0]) {  }\r\n```\r\n",golang\r\npackage a\r\n\r\ntype Foo1[T any] struct {\r\n}\r\n\r\nfunc (*Foo1[T]) Run() {\r\n}\r\n\r\ntype Foo2 struct {\r\n}\r\n\r\nfunc (*Foo2) Run() {\r\n}\r\n
58735,"cmd/asm: generates invalid MULX instruction<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\n\r\nGOARCH=""amd64""\r\n\r\nGOBIN=""""\r\n\r\nGOCACHE=""/home/user/.cache/go-build""\r\n\r\nGOENV=""/home/user/.config/go/env""\r\n\r\nGOEXE=""""\r\n\r\nGOEXPERIMENT=""""\r\n\r\nGOFLAGS=""""\r\n\r\nGOHOSTARCH=""amd64""\r\n\r\nGOHOSTOS=""linux""\r\n\r\nGOINSECURE=""""\r\n\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\n\r\nGONOPROXY=""""\r\n\r\nGONOSUMDB=""""\r\n\r\nGOOS=""linux""\r\n\r\nGOPATH=""/home/user/go""\r\n\r\nGOPRIVATE=""""\r\n\r\nGOPROXY=""https://proxy.golang.org,direct""\r\n\r\nGOROOT=""/usr/local/go""\r\n\r\nGOSUMDB=""sum.golang.org""\r\n\r\nGOTMPDIR=""""\r\n\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\n\r\nGOVCS=""""\r\n\r\nGOVERSION=""go1.20.1""\r\n\r\nGCCGO=""gccgo""\r\n\r\nGOAMD64=""v1""\r\n\r\nAR=""ar""\r\n\r\nCC=""gcc""\r\n\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1448370878=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nmain.go\r\n\r\n\r\nmulx_amd64.s\r\n\r\n```asm\r\nTEXT \xb7a1(SB),0,$0-0\r\n    MULXQ \xb7myGlobal(SB), AX, CX\r\n    RET\r\n```\r\nCommand:\r\n```sh\r\n$ go mod init example.com/mulx\r\n$ go build -buildmode=plugin\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCommand compiles this program succesfully.\r\n\r\n### What did you see instead?\r\n\r\n```sh\r\n# example.com/mulx\r\nasm: """".a1: invalid instruction: 00007 (/home/user/mulx_amd64.s:2)\tMULXQ\t(R15), CX\r\nasm: assembly failed\r\n\r\n```\r\n\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\n\r\nGOARCH=""amd64""\r\n\r\nGOBIN=""""\r\n\r\nGOCACHE=""/home/user/.cache/go-build""\r\n\r\nGOENV=""/home/user/.config/go/env""\r\n\r\nGOEXE=""""\r\n\r\nGOEXPERIMENT=""""\r\n\r\nGOFLAGS=""""\r\n\r\nGOHOSTARCH=""amd64""\r\n\r\nGOHOSTOS=""linux""\r\n\r\nGOINSECURE=""""\r\n\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\n\r\nGONOPROXY=""""\r\n\r\nGONOSUMDB=""""\r\n\r\nGOOS=""linux""\r\n\r\nGOPATH=""/home/user/go""\r\n\r\nGOPRIVATE=""""\r\n\r\nGOPROXY=""https://proxy.golang.org,direct""\r\n\r\nGOROOT=""/usr/local/go""\r\n\r\nGOSUMDB=""sum.golang.org""\r\n\r\nGOTMPDIR=""""\r\n\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\n\r\nGOVCS=""""\r\n\r\nGOVERSION=""go1.20.1""\r\n\r\nGCCGO=""gccgo""\r\n\r\nGOAMD64=""v1""\r\n\r\nAR=""ar""\r\n\r\nCC=""gcc""\r\n\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1448370878=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nmain.go\r\n```go\r\npackage main\r\n\r\nvar myGlobal = [2]uint64{0,0}\r\n\r\n//go:noescape\r\nfunc a1()\r\n\r\nfunc main() {\r\n    _ = myGlobal\r\n    a1()\r\n}\r\n\r\n```\r\n\r\nmulx_amd64.s\r\n\r\n```asm\r\nTEXT \xb7a1(SB),0,$0-0\r\n    MULXQ \xb7myGlobal(SB), AX, CX\r\n    RET\r\n```\r\nCommand:\r\n```sh\r\n$ go mod init example.com/mulx\r\n$ go build -buildmode=plugin\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCommand compiles this program succesfully.\r\n\r\n### What did you see instead?\r\n\r\n```sh\r\n# example.com/mulx\r\nasm: """".a1: invalid instruction: 00007 (/home/user/mulx_amd64.s:2)\tMULXQ\t(R15), CX\r\nasm: assembly failed\r\n\r\n```\r\n\r\n","go\r\npackage main\r\n\r\nvar myGlobal = [2]uint64{0,0}\r\n\r\n//go:noescape\r\nfunc a1()\r\n\r\nfunc main() {\r\n    _ = myGlobal\r\n    a1()\r\n}\r\n\r\n"
58687,"x/tools/gopls/internal/lsp/protocol: CodeAction.Edit is always serialized`protocol.CodeAction` can't be used to lazily compute workspace edits with [`codeAction/resolve`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeAction_resolve) as  [`protocol.CodeAction.Edit`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsp/protocol/tsprotocol.go;drc=e85b5336ed5c729c983d08d5f581b5034e8f1a9b;l=303) is a struct value, and not a pointer to a struct, and is thus always serialized even when a zero value:\r\n\r\n\r\nI see in serialized output:\r\n```\r\nI0224 09:15:34.328959      63 conn_opt.go:96] jsonrpc2: <-- result #3: textDocument/codeAction: [{""title"":""..."",""kind"":""quickfix"",""diagnostics"":[...],""edit"":{},""data"":{...}},...]\r\n```\r\n\r\n`omitempty` is not applied by [`json.Marshal`](https://pkg.go.dev/encoding/json) for zero-value structs (see #11939):\r\n> The ""omitempty"" option specifies that the field should be omitted from the encoding if the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or string.\r\n\r\nI think the solution is for [`{""CodeAction"", ""edit""}`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsp/protocol/generate/tables.go;drc=e85b5336ed5c729c983d08d5f581b5034e8f1a9b;l=25) to be marked as `wantOptStar`:\r\n\r\ncc: @hyangah ",FrozenDueToAge|gopls|Tools,pjweinb,"`protocol.CodeAction` can't be used to lazily compute workspace edits with [`codeAction/resolve`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeAction_resolve) as  [`protocol.CodeAction.Edit`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsp/protocol/tsprotocol.go;drc=e85b5336ed5c729c983d08d5f581b5034e8f1a9b;l=303) is a struct value, and not a pointer to a struct, and is thus always serialized even when a zero value:\r\n```golang\r\n// The workspace edit this code action performs.\r\nEdit WorkspaceEdit `json:""edit,omitempty""`\r\n```\r\n\r\nI see in serialized output:\r\n```\r\nI0224 09:15:34.328959      63 conn_opt.go:96] jsonrpc2: <-- result #3: textDocument/codeAction: [{""title"":""..."",""kind"":""quickfix"",""diagnostics"":[...],""edit"":{},""data"":{...}},...]\r\n```\r\n\r\n`omitempty` is not applied by [`json.Marshal`](https://pkg.go.dev/encoding/json) for zero-value structs (see #11939):\r\n> The ""omitempty"" option specifies that the field should be omitted from the encoding if the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or string.\r\n\r\nI think the solution is for [`{""CodeAction"", ""edit""}`](https://cs.opensource.google/go/x/tools/+/master:gopls/internal/lsp/protocol/generate/tables.go;drc=e85b5336ed5c729c983d08d5f581b5034e8f1a9b;l=25) to be marked as `wantOptStar`:\r\n```golang\r\n\t{""CodeAction"", ""edit""}:                                       wantOpt,\r\n```\r\ncc: @hyangah ","golang\r\n// The workspace edit this code action performs.\r\nEdit WorkspaceEdit `json:""edit,omitempty""`\r\n"
58671,"spec: type inference should be more lenient about untyped numeric literalsForked off #58650 per @ianlancetaylor's request\r\n\r\nCurrently \r\n\r\nassigns `x` the type `float64` but on the next line reports the error `default type float64 of 2.5 does not match inferred type int for T`.\r\n\r\nGo takes the default type based on the literal form before applying type inference so it's the same as writing `Add(int(1), float64(2.5))`.\r\n\r\nIn the special case of multiple untyped numeric literals for a single type parameter, type inference should select the ""largest"" one provided to use as the default type.\r\n\r\n(""largest"" in the sense that complex128 is larger than float64 is larger than int)\r\n\r\n<details>\r\n  <summary>template</summary>\r\n<!--\r\nOur process for evaluating language changes can be found here:\r\nhttps://go.googlesource.com/proposal/+/refs/heads/master#language-changes\r\n-->\r\n\r\n### Author background\r\n\r\n- **Would you consider yourself a novice, intermediate, or experienced Go programmer?** experienced\r\n- **What other languages do you have experience with?** Many.\r\n\r\n### Related proposals\r\n\r\n- **Has this idea, or one like it, been proposed before?** not to my knowledge\r\n  - **If so, how does this proposal differ?**\r\n- **Does this affect error handling?** no\r\n  - **If so, how does this differ from previous error handling proposals?**\r\n- **Is this about generics?** yes\r\n  - **If so, how does this relate to the accepted design and other generics proposals?** tweaks the inference algorithm\r\n\r\n### Proposal\r\n\r\n- **What is the proposed change?** see above\r\n- **Who does this proposal help, and why?** Currently the eagerness to jump to default types makes inference behave more rigidly than the rest of the language. This would loosen the restriction to make both behave the same so there's less to remember.\r\n- **Please describe as precisely as possible the change to the language.** see above\r\n- **What would change in the language spec?** inference algorithm\r\n- **Please also describe the change informally, as in a class teaching Go.** The same explanation that's used to explain the default type of `1 + 2.5`\r\n- **Is this change backward compatible?** yes, all old code would still be admissible, this would just allow code to work that is currently an error\r\n  - Breaking the Go 1 compatibility guarantee is a large cost and requires a large benefit.\r\n    Show example code before and after the change.\r\n  - **Before** `Add(1.0, 2.5)`\r\n  - **After** `Add(1, 2.5)`\r\n- **Orthogonality: how does this change interact or overlap with existing features?** n/a\r\n- **Is the goal of this change a performance improvement?** no\r\n  - **If so, what quantifiable improvement should we expect?**\r\n  - **How would we measure it?**\r\n\r\n### Costs\r\n\r\n- **Would this change make Go easier or harder to learn, and why?** Easier as type inference would work the same as regular math expressions.\r\n- **What is the cost of this proposal? (Every language change has a cost).** change to type inference algorithm/spec\r\n- **How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?** go/types would need to implement the changes in addition to the compiler. Nothing else would need to change that I am aware of.\r\n- **What is the compile time cost?** extra stage during type inference in corner cases, unlikely to be an issue\r\n- **What is the run time cost?** none\r\n- **Can you describe a possible implementation?** no\r\n- **Do you have a prototype? (This is not required.)** no\r\n</details>",Proposal|Proposal-Accepted|generics|TypeInference,griesemer,"Forked off #58650 per @ianlancetaylor's request\r\n\r\nCurrently \r\n```go\r\nfunc Add[T addable](x, y T) T {\r\n  return x + y\r\n}\r\nvar x = 1 + 2.5\r\nvar y = Add(1, 2.5)\r\n```\r\nassigns `x` the type `float64` but on the next line reports the error `default type float64 of 2.5 does not match inferred type int for T`.\r\n\r\nGo takes the default type based on the literal form before applying type inference so it's the same as writing `Add(int(1), float64(2.5))`.\r\n\r\nIn the special case of multiple untyped numeric literals for a single type parameter, type inference should select the ""largest"" one provided to use as the default type.\r\n\r\n(""largest"" in the sense that complex128 is larger than float64 is larger than int)\r\n\r\n<details>\r\n  <summary>template</summary>\r\n<!--\r\nOur process for evaluating language changes can be found here:\r\nhttps://go.googlesource.com/proposal/+/refs/heads/master#language-changes\r\n-->\r\n\r\n### Author background\r\n\r\n- **Would you consider yourself a novice, intermediate, or experienced Go programmer?** experienced\r\n- **What other languages do you have experience with?** Many.\r\n\r\n### Related proposals\r\n\r\n- **Has this idea, or one like it, been proposed before?** not to my knowledge\r\n  - **If so, how does this proposal differ?**\r\n- **Does this affect error handling?** no\r\n  - **If so, how does this differ from previous error handling proposals?**\r\n- **Is this about generics?** yes\r\n  - **If so, how does this relate to the accepted design and other generics proposals?** tweaks the inference algorithm\r\n\r\n### Proposal\r\n\r\n- **What is the proposed change?** see above\r\n- **Who does this proposal help, and why?** Currently the eagerness to jump to default types makes inference behave more rigidly than the rest of the language. This would loosen the restriction to make both behave the same so there's less to remember.\r\n- **Please describe as precisely as possible the change to the language.** see above\r\n- **What would change in the language spec?** inference algorithm\r\n- **Please also describe the change informally, as in a class teaching Go.** The same explanation that's used to explain the default type of `1 + 2.5`\r\n- **Is this change backward compatible?** yes, all old code would still be admissible, this would just allow code to work that is currently an error\r\n  - Breaking the Go 1 compatibility guarantee is a large cost and requires a large benefit.\r\n    Show example code before and after the change.\r\n  - **Before** `Add(1.0, 2.5)`\r\n  - **After** `Add(1, 2.5)`\r\n- **Orthogonality: how does this change interact or overlap with existing features?** n/a\r\n- **Is the goal of this change a performance improvement?** no\r\n  - **If so, what quantifiable improvement should we expect?**\r\n  - **How would we measure it?**\r\n\r\n### Costs\r\n\r\n- **Would this change make Go easier or harder to learn, and why?** Easier as type inference would work the same as regular math expressions.\r\n- **What is the cost of this proposal? (Every language change has a cost).** change to type inference algorithm/spec\r\n- **How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?** go/types would need to implement the changes in addition to the compiler. Nothing else would need to change that I am aware of.\r\n- **What is the compile time cost?** extra stage during type inference in corner cases, unlikely to be an issue\r\n- **What is the run time cost?** none\r\n- **Can you describe a possible implementation?** no\r\n- **Do you have a prototype? (This is not required.)** no\r\n</details>","go\r\nfunc Add[T addable](x, y T) T {\r\n  return x + y\r\n}\r\nvar x = 1 + 2.5\r\nvar y = Add(1, 2.5)\r\n"
58654,"cmd/go: unable to get major versions/sub modules when using vanity urls<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.6 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\n</pre></details>\r\n\r\n### What did you do?\r\nI have a small package set up at https://github.com/tomasruud/gvm for reproducing this issue. This package is set up with vanity urls, by using Github pages as hosting. The root of the package has module name `tomasruud.github.io/gvm`, which is linked up with Github pages, so when you try to get https://tomasruud.github.io/gvm you'll be served an html page with the `go-import` set to point to the Github repository.\r\n\r\nThis works fine for major version v0 and v1, but once I try to add a `v2` module in my project, go mod seems to be unable to find the `tomasruud.github.io/gvm/v2` module. I have added v2 as a submodule by following the documentation, so the code lives in a v2 folder under the root of the project, with its own go.mod file. \r\n\r\nThe same issue happens with other submodules in the project. I have tried adding a `foo` module and tagging it accordingly, but go mod seems unable to find this module also.\r\n\r\n\r\n### What did you expect to see?\r\nI would expect go mod to be able to resolve the submodules based on the tags and subfolder from the repository.\r\n\r\n\r\n### What did you see instead?\r\nInstead I'm getting errors like these\r\n\r\n\r\n\r\n",WaitingForInfo|NeedsInvestigation|GoCommand|modules,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.6 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\n</pre></details>\r\n\r\n### What did you do?\r\nI have a small package set up at https://github.com/tomasruud/gvm for reproducing this issue. This package is set up with vanity urls, by using Github pages as hosting. The root of the package has module name `tomasruud.github.io/gvm`, which is linked up with Github pages, so when you try to get https://tomasruud.github.io/gvm you'll be served an html page with the `go-import` set to point to the Github repository.\r\n\r\nThis works fine for major version v0 and v1, but once I try to add a `v2` module in my project, go mod seems to be unable to find the `tomasruud.github.io/gvm/v2` module. I have added v2 as a submodule by following the documentation, so the code lives in a v2 folder under the root of the project, with its own go.mod file. \r\n\r\nThe same issue happens with other submodules in the project. I have tried adding a `foo` module and tagging it accordingly, but go mod seems unable to find this module also.\r\n\r\n\r\n### What did you expect to see?\r\nI would expect go mod to be able to resolve the submodules based on the tags and subfolder from the repository.\r\n\r\n\r\n### What did you see instead?\r\nInstead I'm getting errors like these\r\n\r\n```shell\r\n$ go get tomasruud.github.io/gvm/v2@v2.0.0\r\ngo: tomasruud.github.io/gvm@v2.0.0: invalid version: module contains a go.mod file, so module path must match major version (""tomasruud.github.io/gvm/v2"")\r\n```\r\n\r\n","shell\r\n$ go get tomasruud.github.io/gvm/v2@v2.0.0\r\ngo: tomasruud.github.io/gvm@v2.0.0: invalid version: module contains a go.mod file, so module path must match major version (""tomasruud.github.io/gvm/v2"")\r\n"
58653,"x/tools/gopls: textDocument/implementation is slow<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\ngopls built @ 3ec30bd95cd143796a8b51514c85d5667d261333\r\n<details><summary>go version -m ~/go/bin/gopls</summary>\r\n```\r\ngo version -m ~/go/bin/gopls\r\n/Users/hakim/go/bin/gopls: go1.20.1\r\n        path    golang.org/x/tools/gopls\r\n        mod     golang.org/x/tools/gopls        (devel)\r\n        dep     github.com/BurntSushi/toml      v1.2.1  h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n        dep     github.com/google/go-cmp        v0.5.9  h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n        dep     github.com/sergi/go-diff        v1.1.0  h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n        dep     golang.org/x/exp        v0.0.0-20220722155223-a9213eeb770e      h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n        dep     golang.org/x/exp/typeparams     v0.0.0-20221212164502-fae10dda9338      h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n        dep     golang.org/x/mod        v0.8.0  h1:LUYupSeNrTNCGzR/hVBk2NHZO4hXcVaW1k4Qx7rjPx8=\r\n        dep     golang.org/x/sync       v0.1.0  h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n        dep     golang.org/x/sys        v0.5.0  h1:MUK/U/4lj1t1oPg0HfuXDN/Z1wv31ZJ/YcPiGccS4DU=\r\n        dep     golang.org/x/text       v0.7.0  h1:4BRB4x83lYWy72KwLD/qYDuTu7q9PjSagHvijDw7cLo=\r\n        dep     golang.org/x/tools      (devel)\r\n        dep     golang.org/x/vuln       v0.0.0-20230110180137-6ad3e3d07815      h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n        dep     honnef.co/go/tools      v0.3.3  h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n        dep     mvdan.cc/gofumpt        v0.4.0  h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n        dep     mvdan.cc/xurls/v2       v2.4.0  h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\n        build   vcs.revision=3ec30bd95cd143796a8b51514c85d5667d261333\r\n        build   vcs.time=2023-02-22T21:51:18Z\r\n```  \r\n</details>\r\n\r\n\r\n### go env\r\n\r\ngo1.20.1\r\ndarwin/amd64\r\n\r\n### What did you do?\r\n\r\ngit clone https://github.com/juju/juju\r\ncd juju\r\n\r\nAnd open vscode from the directory.\r\nOpen utils/stringforwarder/stringforwarder.go\r\nHover over StringForwarder type def (line13), right click, choose ""Find All Implementations""\r\n\r\nThis triggers `textDocument/implementation` LSP request\r\n\r\n### What did you expect to see?\r\n\r\nFast response or failure.\r\n\r\n### What did you see instead?\r\n\r\ngopls becomes unresponsive for 10+min.\r\nUnfortunately, I couldn't find VS Code UI that causes cancellation of the implementation request.\r\n(so this isn't cancellable currently).\r\n\r\nWhile the gopls server is blocked handling this request, none of the other requests can be served.\r\n\r\nOnce the first implementation response returns (after 10min+), gopls responds fast. \r\nBut if I restart gopls, I see the initial loading time is much shorter, but the implementation query still takes several minutes and blocks other gopls functionalities.\r\n\r\nAnother strange behavior is the log messages about go command failures related to module download. I thought gopls would do module download when starting and warm the module cache. So the ""module lookup disabled by GOPROXY=off"" errors message is rather surprising and I wonder whether gopls managed to diagnose go.mod.\r\n\r\n### Editor and settings\r\n\r\nVS Code\r\n\r\n```\r\n    ""ui.completion.completionBudget"": ""1s"",\r\n    ""build.directoryFilters"": [\r\n        ""-**/node_modules""\r\n    ],\r\n    ""ui.semanticTokens"": true,\r\n    ""ui.documentation.linksInHover"": false,\r\n    ""ui.codelenses"": {\r\n        ""run_govulncheck"": true\r\n    },\r\n    ""ui.documentation.linkTarget"": ""foo.bar"",\r\n    ""ui.inlayhint.hints"": {\r\n        ""assignVariableTypes"": true,\r\n        ""compositeLiteralFields"": false,\r\n        ""compositeLiteralTypes"": false,\r\n        ""constantValues"": true,\r\n        ""functionTypeParameters"": false,\r\n        ""parameterNames"": false,\r\n        ""rangeVariableTypes"": false\r\n    },\r\n    ""ui.vulncheck"": ""Off"",\r\n    ""allExperiments"": true\r\n```\r\n\r\n### Logs\r\n```\r\n...\r\n[Trace - 11:30:44 PM] Received response 'textDocument/documentSymbol - (11)' in 37058ms.\r\nResult: [...]\r\n\r\n[Trace - 11:30:44 PM] Received response 'textDocument/codeAction - (12)' in 36574ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:30:44 PM] Received response 'textDocument/codeAction - (13)' in 36584ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:30:44 PM] Received response 'textDocument/semanticTokens/range - (14)' in 36380ms.\r\nResult: {...}\r\n....\r\n\r\n[Trace - 11:30:44 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go"",""version"":1,""diagnostics"":[]}\r\n\r\n\r\n[Trace - 11:31:14 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2023/02/22 23:31:14 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Trace - 11:31:35 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2023/02/22 23:31:35 background refresh finished after 21.52114096s\\n""}\r\n\r\n\r\n[Trace - 11:31:39 PM] Sending request 'textDocument/hover - (20)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":12,""character"":11}}\r\n\r\n\r\n[Trace - 11:31:39 PM] Received response 'textDocument/hover - (20)' in 77ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""\\n\\nStringForwarder is a goroutine-safe type that pipes messages from the its Forward() method, sending them to callback.  The send will not be blocked by the callback, but will instead discard messages if there is an incomplete callback in progress. The number of discarded messages is tracked and returned when the forwarder is stopped.\\n""},""range"":{""start"":{""line"":12,""character"":5},""end"":{""line"":12,""character"":20}}}\r\n\r\n...\r\n\r\n[Trace - 11:31:47 PM] Sending request 'textDocument/implementation - (23)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":12,""character"":11}}\r\n\r\n\r\n[Trace - 11:32:23 PM] Sending request 'textDocument/hover - (24)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":23,""character"":5}}\r\n\r\n\r\n[Trace - 11:32:25 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":24}\r\n....\r\n[Trace - 11:33:04 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":26}\r\n\r\n\r\n[Trace - 11:33:26 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2023/02/22 23:33:26 tidy: diagnosing file:///Users/hakim/projects/juju/go.mod: err: exit status 1: stderr: go: downloading github.com/jessevdk/go-flags v1.5.0\\ngo: downloading github.com/vishvananda/netlink v1.2.1-beta.2\\ngo: downloading github.com/canonical/go-dqlite v1.11.5\\ngo: downloading github.com/pkg/term v1.1.0\\ngo: downloading github.com/juju/qthttptest v0.1.3\\ngo: downloading github.com/rogpeppe/clock v0.0.0-20190514195947-2896927a307a\\ngo: downloading github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute v1.0.0\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal v1.0.0\\ngo: downloading github.com/testcontainers/testcontainers-go v0.11.1\\ngo: downloading github.com/onsi/ginkgo v1.14.0\\ngo: downloading github.com/onsi/gomega v1.10.1\\ngithub.com/juju/juju/core/network imports\\n\\tgithub.com/vishvananda/netlink: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/app: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/client: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/driver imports\\n\\tgithub.com/canonical/go-dqlite/driver: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/jessevdk/go-flags: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/canonical/pebble/internal/ptyutil imports\\n\\tgithub.com/pkg/term/termios: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery tested by\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery.test imports\\n\\tgithub.com/juju/qthttptest: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgopkg.in/retry.v1 tested by\\n\\tgopkg.in/retry.v1.test imports\\n\\tgithub.com/rogpeppe/clock/testclock: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/cmd/juju/commands imports\\n\\tgithub.com/chzyer/readline tested by\\n\\tgithub.com/chzyer/readline.test imports\\n\\tgithub.com/chzyer/test: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go/wait: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/config: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/types: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/gomega: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Trace - 11:33:26 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/juju/container/lxd/export_test.go"",""diagnostics"":[{""range"":{""start"":{""line"":50,""character"":46},""end"":{""line"":50,""character"":57}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: SnapManager""},{""range"":{""start"":{""line"":51,""character"":21},""end"":{""line"":51,""character"":35}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: getSnapManager""},{""range"":{""start"":{""line"":51,""character"":44},""end"":{""line"":51,""character"":55}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: SnapManager""}]}\r\n\r\n\r\n[Trace - 11:33:27 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2023/02/22 23:33:27 tidy: diagnosing file:///Users/hakim/projects/juju/go.mod: err: exit status 1: stderr: go: downloading github.com/vishvananda/netlink v1.2.1-beta.2\\ngo: downloading github.com/jessevdk/go-flags v1.5.0\\ngo: downloading github.com/canonical/go-dqlite v1.11.5\\ngo: downloading github.com/pkg/term v1.1.0\\ngo: downloading github.com/juju/qthttptest v0.1.3\\ngo: downloading github.com/rogpeppe/clock v0.0.0-20190514195947-2896927a307a\\ngo: downloading github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute v1.0.0\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal v1.0.0\\ngo: downloading github.com/testcontainers/testcontainers-go v0.11.1\\ngo: downloading github.com/onsi/ginkgo v1.14.0\\ngo: downloading github.com/onsi/gomega v1.10.1\\ngithub.com/juju/juju/core/network imports\\n\\tgithub.com/vishvananda/netlink: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/app: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/client: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/driver imports\\n\\tgithub.com/canonical/go-dqlite/driver: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/jessevdk/go-flags: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/canonical/pebble/internal/ptyutil imports\\n\\tgithub.com/pkg/term/termios: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery tested by\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery.test imports\\n\\tgithub.com/juju/qthttptest: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgopkg.in/retry.v1 tested by\\n\\tgopkg.in/retry.v1.test imports\\n\\tgithub.com/rogpeppe/clock/testclock: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/cmd/juju/commands imports\\n\\tgithub.com/chzyer/readline tested by\\n\\tgithub.com/chzyer/readline.test imports\\n\\tgithub.com/chzyer/test: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go/wait: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/config: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/types: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/gomega: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Trace - 11:34:12 PM] Sending request 'textDocument/codeAction - (27)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""range"":{""start"":{""line"":27,""character"":17},""end"":{""line"":27,""character"":17}},""context"":{""diagnostics"":[],""triggerKind"":2}}\r\n\r\n\r\n[Trace - 11:34:12 PM] Sending request 'textDocument/hover - (28)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":27,""character"":16}}\r\n\r\n\r\n[Trace - 11:34:13 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":28}\r\n\r\n...\r\n\r\n[Trace - 11:45:45 PM] Sending request 'textDocument/hover - (32)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":30,""character"":29}}\r\n\r\n\r\n[Trace - 11:45:46 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":32}\r\n\r\n\r\n[Trace - 11:48:25 PM] Received response 'textDocument/implementation - (23)' in 997596ms.\r\nNo result returned.\r\n\r\n\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (24)' in 962122ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (25)' in 923091ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (26)' in 922806ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/codeAction - (27)' in 853586ms.\r\nResult: [{""title"":""Fill StringForwarder"",""kind"":""refactor.rewrite"",""edit"":{},""command"":{""title"":""Fill StringForwarder"",""command"":""gopls.apply_fix"",""arguments"":[{""Fix"":""fill_struct"",""URI"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go"",""Range"":{""start"":{""line"":27,""character"":10},""end"":{""line"":27,""character"":40}}}]}}]\r\n\r\n\r\n```",Documentation|gopls|Tools|gopls/incremental,adonovan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\ngopls built @ 3ec30bd95cd143796a8b51514c85d5667d261333\r\n<details><summary>go version -m ~/go/bin/gopls</summary>\r\n```\r\ngo version -m ~/go/bin/gopls\r\n/Users/hakim/go/bin/gopls: go1.20.1\r\n        path    golang.org/x/tools/gopls\r\n        mod     golang.org/x/tools/gopls        (devel)\r\n        dep     github.com/BurntSushi/toml      v1.2.1  h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n        dep     github.com/google/go-cmp        v0.5.9  h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n        dep     github.com/sergi/go-diff        v1.1.0  h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n        dep     golang.org/x/exp        v0.0.0-20220722155223-a9213eeb770e      h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=\r\n        dep     golang.org/x/exp/typeparams     v0.0.0-20221212164502-fae10dda9338      h1:2O2DON6y3XMJiQRAS1UWU+54aec2uopH3x7MAiqGW6Y=\r\n        dep     golang.org/x/mod        v0.8.0  h1:LUYupSeNrTNCGzR/hVBk2NHZO4hXcVaW1k4Qx7rjPx8=\r\n        dep     golang.org/x/sync       v0.1.0  h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n        dep     golang.org/x/sys        v0.5.0  h1:MUK/U/4lj1t1oPg0HfuXDN/Z1wv31ZJ/YcPiGccS4DU=\r\n        dep     golang.org/x/text       v0.7.0  h1:4BRB4x83lYWy72KwLD/qYDuTu7q9PjSagHvijDw7cLo=\r\n        dep     golang.org/x/tools      (devel)\r\n        dep     golang.org/x/vuln       v0.0.0-20230110180137-6ad3e3d07815      h1:A9kONVi4+AnuOr1dopsibH6hLi1Huy54cbeJxnq4vmU=\r\n        dep     honnef.co/go/tools      v0.3.3  h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n        dep     mvdan.cc/gofumpt        v0.4.0  h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n        dep     mvdan.cc/xurls/v2       v2.4.0  h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\n        build   vcs.revision=3ec30bd95cd143796a8b51514c85d5667d261333\r\n        build   vcs.time=2023-02-22T21:51:18Z\r\n```  \r\n</details>\r\n\r\n\r\n### go env\r\n\r\ngo1.20.1\r\ndarwin/amd64\r\n\r\n### What did you do?\r\n\r\ngit clone https://github.com/juju/juju\r\ncd juju\r\n\r\nAnd open vscode from the directory.\r\nOpen utils/stringforwarder/stringforwarder.go\r\nHover over StringForwarder type def (line13), right click, choose ""Find All Implementations""\r\n\r\nThis triggers `textDocument/implementation` LSP request\r\n\r\n### What did you expect to see?\r\n\r\nFast response or failure.\r\n\r\n### What did you see instead?\r\n\r\ngopls becomes unresponsive for 10+min.\r\nUnfortunately, I couldn't find VS Code UI that causes cancellation of the implementation request.\r\n(so this isn't cancellable currently).\r\n\r\nWhile the gopls server is blocked handling this request, none of the other requests can be served.\r\n\r\nOnce the first implementation response returns (after 10min+), gopls responds fast. \r\nBut if I restart gopls, I see the initial loading time is much shorter, but the implementation query still takes several minutes and blocks other gopls functionalities.\r\n\r\nAnother strange behavior is the log messages about go command failures related to module download. I thought gopls would do module download when starting and warm the module cache. So the ""module lookup disabled by GOPROXY=off"" errors message is rather surprising and I wonder whether gopls managed to diagnose go.mod.\r\n\r\n### Editor and settings\r\n\r\nVS Code\r\n\r\n```\r\n    ""ui.completion.completionBudget"": ""1s"",\r\n    ""build.directoryFilters"": [\r\n        ""-**/node_modules""\r\n    ],\r\n    ""ui.semanticTokens"": true,\r\n    ""ui.documentation.linksInHover"": false,\r\n    ""ui.codelenses"": {\r\n        ""run_govulncheck"": true\r\n    },\r\n    ""ui.documentation.linkTarget"": ""foo.bar"",\r\n    ""ui.inlayhint.hints"": {\r\n        ""assignVariableTypes"": true,\r\n        ""compositeLiteralFields"": false,\r\n        ""compositeLiteralTypes"": false,\r\n        ""constantValues"": true,\r\n        ""functionTypeParameters"": false,\r\n        ""parameterNames"": false,\r\n        ""rangeVariableTypes"": false\r\n    },\r\n    ""ui.vulncheck"": ""Off"",\r\n    ""allExperiments"": true\r\n```\r\n\r\n### Logs\r\n```\r\n...\r\n[Trace - 11:30:44 PM] Received response 'textDocument/documentSymbol - (11)' in 37058ms.\r\nResult: [...]\r\n\r\n[Trace - 11:30:44 PM] Received response 'textDocument/codeAction - (12)' in 36574ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:30:44 PM] Received response 'textDocument/codeAction - (13)' in 36584ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:30:44 PM] Received response 'textDocument/semanticTokens/range - (14)' in 36380ms.\r\nResult: {...}\r\n....\r\n\r\n[Trace - 11:30:44 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go"",""version"":1,""diagnostics"":[]}\r\n\r\n\r\n[Trace - 11:31:14 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2023/02/22 23:31:14 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Trace - 11:31:35 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2023/02/22 23:31:35 background refresh finished after 21.52114096s\\n""}\r\n\r\n\r\n[Trace - 11:31:39 PM] Sending request 'textDocument/hover - (20)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":12,""character"":11}}\r\n\r\n\r\n[Trace - 11:31:39 PM] Received response 'textDocument/hover - (20)' in 77ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""```go\\ntype StringForwarder struct {\\n\\tmu           sync.Mutex\\n\\tcond         *sync.Cond\\n\\tcurrent      *string\\n\\tstopped      bool\\n\\tdiscardCount uint64\\n}\\n\\nfunc (*StringForwarder).Forward(msg string)\\nfunc (*StringForwarder).Stop() uint64\\nfunc (*StringForwarder).invokeCallback(callback func(string), msg string)\\nfunc (*StringForwarder).loop(callback func(string))\\n```\\n\\nStringForwarder is a goroutine-safe type that pipes messages from the its Forward() method, sending them to callback.  The send will not be blocked by the callback, but will instead discard messages if there is an incomplete callback in progress. The number of discarded messages is tracked and returned when the forwarder is stopped.\\n""},""range"":{""start"":{""line"":12,""character"":5},""end"":{""line"":12,""character"":20}}}\r\n\r\n...\r\n\r\n[Trace - 11:31:47 PM] Sending request 'textDocument/implementation - (23)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":12,""character"":11}}\r\n\r\n\r\n[Trace - 11:32:23 PM] Sending request 'textDocument/hover - (24)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":23,""character"":5}}\r\n\r\n\r\n[Trace - 11:32:25 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":24}\r\n....\r\n[Trace - 11:33:04 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":26}\r\n\r\n\r\n[Trace - 11:33:26 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2023/02/22 23:33:26 tidy: diagnosing file:///Users/hakim/projects/juju/go.mod: err: exit status 1: stderr: go: downloading github.com/jessevdk/go-flags v1.5.0\\ngo: downloading github.com/vishvananda/netlink v1.2.1-beta.2\\ngo: downloading github.com/canonical/go-dqlite v1.11.5\\ngo: downloading github.com/pkg/term v1.1.0\\ngo: downloading github.com/juju/qthttptest v0.1.3\\ngo: downloading github.com/rogpeppe/clock v0.0.0-20190514195947-2896927a307a\\ngo: downloading github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute v1.0.0\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal v1.0.0\\ngo: downloading github.com/testcontainers/testcontainers-go v0.11.1\\ngo: downloading github.com/onsi/ginkgo v1.14.0\\ngo: downloading github.com/onsi/gomega v1.10.1\\ngithub.com/juju/juju/core/network imports\\n\\tgithub.com/vishvananda/netlink: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/app: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/client: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/driver imports\\n\\tgithub.com/canonical/go-dqlite/driver: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/jessevdk/go-flags: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/canonical/pebble/internal/ptyutil imports\\n\\tgithub.com/pkg/term/termios: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery tested by\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery.test imports\\n\\tgithub.com/juju/qthttptest: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgopkg.in/retry.v1 tested by\\n\\tgopkg.in/retry.v1.test imports\\n\\tgithub.com/rogpeppe/clock/testclock: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/cmd/juju/commands imports\\n\\tgithub.com/chzyer/readline tested by\\n\\tgithub.com/chzyer/readline.test imports\\n\\tgithub.com/chzyer/test: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go/wait: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/config: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/types: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/gomega: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Trace - 11:33:26 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/juju/container/lxd/export_test.go"",""diagnostics"":[{""range"":{""start"":{""line"":50,""character"":46},""end"":{""line"":50,""character"":57}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: SnapManager""},{""range"":{""start"":{""line"":51,""character"":21},""end"":{""line"":51,""character"":35}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: getSnapManager""},{""range"":{""start"":{""line"":51,""character"":44},""end"":{""line"":51,""character"":55}},""severity"":1,""code"":""UndeclaredName"",""codeDescription"":{""href"":""https://foo.bar/golang.org/x/tools/internal/typesinternal#UndeclaredName""},""source"":""compiler"",""message"":""undefined: SnapManager""}]}\r\n\r\n\r\n[Trace - 11:33:27 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2023/02/22 23:33:27 tidy: diagnosing file:///Users/hakim/projects/juju/go.mod: err: exit status 1: stderr: go: downloading github.com/vishvananda/netlink v1.2.1-beta.2\\ngo: downloading github.com/jessevdk/go-flags v1.5.0\\ngo: downloading github.com/canonical/go-dqlite v1.11.5\\ngo: downloading github.com/pkg/term v1.1.0\\ngo: downloading github.com/juju/qthttptest v0.1.3\\ngo: downloading github.com/rogpeppe/clock v0.0.0-20190514195947-2896927a307a\\ngo: downloading github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute v1.0.0\\ngo: downloading github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal v1.0.0\\ngo: downloading github.com/testcontainers/testcontainers-go v0.11.1\\ngo: downloading github.com/onsi/ginkgo v1.14.0\\ngo: downloading github.com/onsi/gomega v1.10.1\\ngithub.com/juju/juju/core/network imports\\n\\tgithub.com/vishvananda/netlink: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/app: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/app imports\\n\\tgithub.com/canonical/go-dqlite/client: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/database/driver imports\\n\\tgithub.com/canonical/go-dqlite/driver: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/jessevdk/go-flags: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju imports\\n\\tgithub.com/canonical/pebble/cmd/pebble imports\\n\\tgithub.com/canonical/pebble/internal/ptyutil imports\\n\\tgithub.com/pkg/term/termios: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery tested by\\n\\tgithub.com/go-macaroon-bakery/macaroon-bakery/v3/httpbakery.test imports\\n\\tgithub.com/juju/qthttptest: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/api imports\\n\\tgopkg.in/retry.v1 tested by\\n\\tgopkg.in/retry.v1.test imports\\n\\tgithub.com/rogpeppe/clock/testclock: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/cmd/juju/commands imports\\n\\tgithub.com/chzyer/readline tested by\\n\\tgithub.com/chzyer/readline.test imports\\n\\tgithub.com/chzyer/test: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/provider/azure imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2 tested by\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v2.test imports\\n\\tgithub.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/secrets/provider/vault imports\\n\\tgithub.com/mittwald/vaultgo tested by\\n\\tgithub.com/mittwald/vaultgo.test imports\\n\\tgithub.com/mittwald/vaultgo/test/testdata imports\\n\\tgithub.com/testcontainers/testcontainers-go/wait: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/config: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/ginkgo/types: module lookup disabled by GOPROXY=off\\ngithub.com/juju/juju/caas/kubernetes/provider/mocks imports\\n\\tk8s.io/client-go/applyconfigurations/admissionregistration/v1 imports\\n\\tk8s.io/apimachinery/pkg/util/managedfields imports\\n\\tk8s.io/kube-openapi/pkg/util/proto tested by\\n\\tk8s.io/kube-openapi/pkg/util/proto.test imports\\n\\tgithub.com/onsi/gomega: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Trace - 11:34:12 PM] Sending request 'textDocument/codeAction - (27)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""range"":{""start"":{""line"":27,""character"":17},""end"":{""line"":27,""character"":17}},""context"":{""diagnostics"":[],""triggerKind"":2}}\r\n\r\n\r\n[Trace - 11:34:12 PM] Sending request 'textDocument/hover - (28)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":27,""character"":16}}\r\n\r\n\r\n[Trace - 11:34:13 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":28}\r\n\r\n...\r\n\r\n[Trace - 11:45:45 PM] Sending request 'textDocument/hover - (32)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go""},""position"":{""line"":30,""character"":29}}\r\n\r\n\r\n[Trace - 11:45:46 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":32}\r\n\r\n\r\n[Trace - 11:48:25 PM] Received response 'textDocument/implementation - (23)' in 997596ms.\r\nNo result returned.\r\n\r\n\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (24)' in 962122ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (25)' in 923091ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/hover - (26)' in 922806ms. Request failed: JSON RPC cancelled (-32800).\r\n[Trace - 11:48:25 PM] Received response 'textDocument/codeAction - (27)' in 853586ms.\r\nResult: [{""title"":""Fill StringForwarder"",""kind"":""refactor.rewrite"",""edit"":{},""command"":{""title"":""Fill StringForwarder"",""command"":""gopls.apply_fix"",""arguments"":[{""Fix"":""fill_struct"",""URI"":""file:///Users/hakim/projects/juju/utils/stringforwarder/stringforwarder.go"",""Range"":{""start"":{""line"":27,""character"":10},""end"":{""line"":27,""character"":40}}}]}}]\r\n\r\n\r\n```","go\\ntype StringForwarder struct {\\n\\tmu           sync.Mutex\\n\\tcond         *sync.Cond\\n\\tcurrent      *string\\n\\tstopped      bool\\n\\tdiscardCount uint64\\n}\\n\\nfunc (*StringForwarder).Forward(msg string)\\nfunc (*StringForwarder).Stop() uint64\\nfunc (*StringForwarder).invokeCallback(callback func(string), msg string)\\nfunc (*StringForwarder).loop(callback func(string))\\n"
58633,"x/tools/go/ssa: ent.withHooks$1: cannot convert *t0 (M) to PM### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, and it's actual for `x/tools` master too.\r\n\r\n### What did you do?\r\nDemo: https://github.com/Antonboom/golangci-vs-ent-generics\r\n\r\n```\r\n$ golangci-lint version    \r\ngolangci-lint has version 1.51.2 built from 3e8facb4 on 2023-02-19T21:43:54Z\r\n\r\n$ golangci-lint run ./...\r\n```\r\n\r\n### What did you expect to see?\r\nNo panics.\r\n\r\n### What did you see instead?\r\n```\r\nERRO Running error: 1 error occurred:\r\n        * can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa:\r\n        package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in\r\n        github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1:\r\n        cannot convert *t0 (M) to PM\r\n```\r\n\r\n<details><summary>Full stack trace</summary>\r\n\r\n```\r\nERRO [runner] Panic: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM: goroutine 4179 [running]:\r\nruntime/debug.Stack()\r\n        /usr/local/go/src/runtime/debug/stack.go:24 +0x64\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func1()\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:102 +0x108\r\npanic({0x101d904a0, 0x140058f16a0})\r\n        /usr/local/go/src/runtime/panic.go:884 +0x1f4\r\ngolang.org/x/tools/go/ssa.emitConv(0x140058a9080, {0x101f72740, 0x140058f6d80}, {0x101f69d48?, 0x140033fb290})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/emit.go:286 +0xb40\r\ngolang.org/x/tools/go/ssa.emitStore(0x140058a9080, {0x101f72740, 0x140058f6cc0}, {0x101f72740, 0x140058f6d80}, 0x2aa377f)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/emit.go:377 +0x58\r\ngolang.org/x/tools/go/ssa.(*address).store(0x140058fa0f0, 0x140058a9080?, {0x101f72740?, 0x140058f6d80?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/lvalue.go:40 +0x4c\r\ngolang.org/x/tools/go/ssa.(*storebuf).emit(...)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:533\r\ngolang.org/x/tools/go/ssa.(*builder).assignStmt(0x140058a9080?, 0x140058a9080, {0x140035bc870, 0x1, 0x101f06d60?}, {0x140035bc890, 0x1, 0x100fd9900?}, 0x0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:1207 +0x370\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x14003852838?, 0x140058a9080, {0x101f6cbd0?, 0x14002ec1a40?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2181 +0x380\r\ngolang.org/x/tools/go/ssa.(*builder).stmtList(0x140058e9ec0?, 0x14000a67520?, {0x14002ec1a80?, 0x4, 0x140058e9ec0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:946 +0x48\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x140058a9080?, 0x140058a9080, {0x101f6ccf0?, 0x1400347c0c0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2277 +0x718\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunctionBody(0x0?, 0x140058a9080)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2391 +0x354\r\ngolang.org/x/tools/go/ssa.(*builder).expr0(0x140038539f8, 0x1400300de00, {0x101f6cf90?, 0x140035bc900?}, {0x7, {0x101f69c58, 0x14003340740}, {0x0, 0x0}})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:656 +0x42c\r\ngolang.org/x/tools/go/ssa.(*builder).expr(0x101dfec00?, 0x1400300de00, {0x101f6cf90, 0x140035bc900})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:625 +0x11c\r\ngolang.org/x/tools/go/ssa.(*builder).expr0(0x140038539f8, 0x1400300de00, {0x101f6cd50?, 0x14002ec1b00?}, {0x7, {0x101f69bb8, 0x14002587260}, {0x0, 0x0}})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:676 +0x5f8\r\ngolang.org/x/tools/go/ssa.(*builder).expr(0x101ef8e60?, 0x1400300de00, {0x101f6cd50, 0x14002ec1b00})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:625 +0x11c\r\ngolang.org/x/tools/go/ssa.(*builder).assign(0x1400300de00?, 0x1400300de00?, {0x101f6f668?, 0x140058e9e30}, {0x101f6cd50?, 0x14002ec1b00?}, 0x0?, 0x0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:598 +0x30c\r\ngolang.org/x/tools/go/ssa.(*builder).localValueSpec(0x1400300de00?, 0x1400300de00, 0x14002c46190)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:1147 +0xb8\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x14003853548?, 0x1400300de00, {0x101f6ce40?, 0x140035bc950?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2147 +0x14b0\r\ngolang.org/x/tools/go/ssa.(*builder).stmtList(0x140038535c8?, 0x101014e70?, {0x14000a6c100?, 0x8, 0x10?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:946 +0x48\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x1400300de00?, 0x1400300de00, {0x101f6ccf0?, 0x1400347c3f0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2277 +0x718\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunctionBody(0x14002fe3500?, 0x1400300de00)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2391 +0x354\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunction(0x101503cc0?, 0x1400300de00)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2326 +0x30\r\ngolang.org/x/tools/go/ssa.(*builder).buildCreated(0x140038539f8)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2413 +0x28\r\ngolang.org/x/tools/go/ssa.(*Package).build(0x14002726900)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2606 +0xa60\r\nsync.(*Once).doSlow(0x140003c6480?, 0x14003c59ae0?)\r\n        /usr/local/go/src/sync/once.go:74 +0x100\r\nsync.(*Once).Do(...)\r\n        /usr/local/go/src/sync/once.go:65\r\ngolang.org/x/tools/go/ssa.(*Package).Build(...)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2477\r\ngolang.org/x/tools/go/analysis/passes/buildssa.run(0x1400362c1e0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/analysis/passes/buildssa/buildssa.go:72 +0x13c\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyze(0x140015f2310)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:188 +0x94c\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func2()\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:106 +0x20\r\ngithub.com/golangci/golangci-lint/pkg/timeutils.(*Stopwatch).TrackStage(0x140006e6050, {0x101a7e2c1, 0x8}, 0x14001138f30)\r\n        /Users/anthony/golangci-lint/pkg/timeutils/stopwatch.go:111 +0x44\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe(0x14000580d00?)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:105 +0x74\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze.func2(0x140015f2310)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:80 +0xb0\r\ncreated by github.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:75 +0x17c \r\nWARN [runner] Can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM \r\nWARN [linters_context] rowserrcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649. \r\nWARN [linters_context] wastedassign is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649. \r\nINFO [runner] processing took 2.622\xb5s with stages: max_same_issues: 500ns, skip_dirs: 292ns, nolint: 250ns, source_code: 208ns, exclude-rules: 167ns, sort_results: 125ns, filename_unadjuster: 125ns, max_from_linter: 125ns, cgo: 125ns, path_prettifier: 84ns, path_shortener: 84ns, skip_files: 83ns, identifier_marker: 83ns, max_per_file_from_linter: 83ns, diff: 83ns, uniq_by_line: 41ns, severity-rules: 41ns, path_prefixer: 41ns, exclude: 41ns, autogenerated_exclude: 41ns \r\nINFO [runner] linters took 1.620278917s with stages: goanalysis_metalinter: 1.620215167s, rowserrcheck: 13.75\xb5s, wastedassign: 6.792\xb5s \r\nERRO Running error: 1 error occurred:\r\n        * can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM\r\n```\r\n\r\n</details>\r\n\r\n### Additional info\r\n\r\n1) Related to https://github.com/golangci/golangci-lint/issues/3086\r\n\r\n2) Suggested problematic [code](https://github.com/Antonboom/golangci-vs-ent-generics/blob/c30db16f2421497fc2d207ea74ab048dcbc9ceac/ent/ent.go#L476):\r\n\r\n",NeedsInvestigation|Tools,timothy-king,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, and it's actual for `x/tools` master too.\r\n\r\n### What did you do?\r\nDemo: https://github.com/Antonboom/golangci-vs-ent-generics\r\n\r\n```\r\n$ golangci-lint version    \r\ngolangci-lint has version 1.51.2 built from 3e8facb4 on 2023-02-19T21:43:54Z\r\n\r\n$ golangci-lint run ./...\r\n```\r\n\r\n### What did you expect to see?\r\nNo panics.\r\n\r\n### What did you see instead?\r\n```\r\nERRO Running error: 1 error occurred:\r\n        * can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa:\r\n        package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in\r\n        github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1:\r\n        cannot convert *t0 (M) to PM\r\n```\r\n\r\n<details><summary>Full stack trace</summary>\r\n\r\n```\r\nERRO [runner] Panic: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM: goroutine 4179 [running]:\r\nruntime/debug.Stack()\r\n        /usr/local/go/src/runtime/debug/stack.go:24 +0x64\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func1()\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:102 +0x108\r\npanic({0x101d904a0, 0x140058f16a0})\r\n        /usr/local/go/src/runtime/panic.go:884 +0x1f4\r\ngolang.org/x/tools/go/ssa.emitConv(0x140058a9080, {0x101f72740, 0x140058f6d80}, {0x101f69d48?, 0x140033fb290})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/emit.go:286 +0xb40\r\ngolang.org/x/tools/go/ssa.emitStore(0x140058a9080, {0x101f72740, 0x140058f6cc0}, {0x101f72740, 0x140058f6d80}, 0x2aa377f)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/emit.go:377 +0x58\r\ngolang.org/x/tools/go/ssa.(*address).store(0x140058fa0f0, 0x140058a9080?, {0x101f72740?, 0x140058f6d80?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/lvalue.go:40 +0x4c\r\ngolang.org/x/tools/go/ssa.(*storebuf).emit(...)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:533\r\ngolang.org/x/tools/go/ssa.(*builder).assignStmt(0x140058a9080?, 0x140058a9080, {0x140035bc870, 0x1, 0x101f06d60?}, {0x140035bc890, 0x1, 0x100fd9900?}, 0x0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:1207 +0x370\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x14003852838?, 0x140058a9080, {0x101f6cbd0?, 0x14002ec1a40?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2181 +0x380\r\ngolang.org/x/tools/go/ssa.(*builder).stmtList(0x140058e9ec0?, 0x14000a67520?, {0x14002ec1a80?, 0x4, 0x140058e9ec0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:946 +0x48\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x140058a9080?, 0x140058a9080, {0x101f6ccf0?, 0x1400347c0c0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2277 +0x718\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunctionBody(0x0?, 0x140058a9080)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2391 +0x354\r\ngolang.org/x/tools/go/ssa.(*builder).expr0(0x140038539f8, 0x1400300de00, {0x101f6cf90?, 0x140035bc900?}, {0x7, {0x101f69c58, 0x14003340740}, {0x0, 0x0}})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:656 +0x42c\r\ngolang.org/x/tools/go/ssa.(*builder).expr(0x101dfec00?, 0x1400300de00, {0x101f6cf90, 0x140035bc900})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:625 +0x11c\r\ngolang.org/x/tools/go/ssa.(*builder).expr0(0x140038539f8, 0x1400300de00, {0x101f6cd50?, 0x14002ec1b00?}, {0x7, {0x101f69bb8, 0x14002587260}, {0x0, 0x0}})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:676 +0x5f8\r\ngolang.org/x/tools/go/ssa.(*builder).expr(0x101ef8e60?, 0x1400300de00, {0x101f6cd50, 0x14002ec1b00})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:625 +0x11c\r\ngolang.org/x/tools/go/ssa.(*builder).assign(0x1400300de00?, 0x1400300de00?, {0x101f6f668?, 0x140058e9e30}, {0x101f6cd50?, 0x14002ec1b00?}, 0x0?, 0x0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:598 +0x30c\r\ngolang.org/x/tools/go/ssa.(*builder).localValueSpec(0x1400300de00?, 0x1400300de00, 0x14002c46190)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:1147 +0xb8\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x14003853548?, 0x1400300de00, {0x101f6ce40?, 0x140035bc950?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2147 +0x14b0\r\ngolang.org/x/tools/go/ssa.(*builder).stmtList(0x140038535c8?, 0x101014e70?, {0x14000a6c100?, 0x8, 0x10?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:946 +0x48\r\ngolang.org/x/tools/go/ssa.(*builder).stmt(0x1400300de00?, 0x1400300de00, {0x101f6ccf0?, 0x1400347c3f0?})\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2277 +0x718\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunctionBody(0x14002fe3500?, 0x1400300de00)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2391 +0x354\r\ngolang.org/x/tools/go/ssa.(*builder).buildFunction(0x101503cc0?, 0x1400300de00)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2326 +0x30\r\ngolang.org/x/tools/go/ssa.(*builder).buildCreated(0x140038539f8)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2413 +0x28\r\ngolang.org/x/tools/go/ssa.(*Package).build(0x14002726900)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2606 +0xa60\r\nsync.(*Once).doSlow(0x140003c6480?, 0x14003c59ae0?)\r\n        /usr/local/go/src/sync/once.go:74 +0x100\r\nsync.(*Once).Do(...)\r\n        /usr/local/go/src/sync/once.go:65\r\ngolang.org/x/tools/go/ssa.(*Package).Build(...)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/ssa/builder.go:2477\r\ngolang.org/x/tools/go/analysis/passes/buildssa.run(0x1400362c1e0)\r\n        /Users/anthony/golang_workspace/pkg/mod/golang.org/x/tools@v0.6.0/go/analysis/passes/buildssa/buildssa.go:72 +0x13c\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyze(0x140015f2310)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:188 +0x94c\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe.func2()\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:106 +0x20\r\ngithub.com/golangci/golangci-lint/pkg/timeutils.(*Stopwatch).TrackStage(0x140006e6050, {0x101a7e2c1, 0x8}, 0x14001138f30)\r\n        /Users/anthony/golangci-lint/pkg/timeutils/stopwatch.go:111 +0x44\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*action).analyzeSafe(0x14000580d00?)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_action.go:105 +0x74\r\ngithub.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze.func2(0x140015f2310)\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:80 +0xb0\r\ncreated by github.com/golangci/golangci-lint/pkg/golinters/goanalysis.(*loadingPackage).analyze\r\n        /Users/anthony/golangci-lint/pkg/golinters/goanalysis/runner_loadingpackage.go:75 +0x17c \r\nWARN [runner] Can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM \r\nWARN [linters_context] rowserrcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649. \r\nWARN [linters_context] wastedassign is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649. \r\nINFO [runner] processing took 2.622\xb5s with stages: max_same_issues: 500ns, skip_dirs: 292ns, nolint: 250ns, source_code: 208ns, exclude-rules: 167ns, sort_results: 125ns, filename_unadjuster: 125ns, max_from_linter: 125ns, cgo: 125ns, path_prettifier: 84ns, path_shortener: 84ns, skip_files: 83ns, identifier_marker: 83ns, max_per_file_from_linter: 83ns, diff: 83ns, uniq_by_line: 41ns, severity-rules: 41ns, path_prefixer: 41ns, exclude: 41ns, autogenerated_exclude: 41ns \r\nINFO [runner] linters took 1.620278917s with stages: goanalysis_metalinter: 1.620215167s, rowserrcheck: 13.75\xb5s, wastedassign: 6.792\xb5s \r\nERRO Running error: 1 error occurred:\r\n        * can't run linter goanalysis_metalinter: goanalysis_metalinter: buildssa: package ""ent"" (isInitialPkg: true, needAnalyzeSource: true): in github.com/Antonboom/golangci-vs-ent-generics/ent.withHooks$1: cannot convert *t0 (M) to PM\r\n```\r\n\r\n</details>\r\n\r\n### Additional info\r\n\r\n1) Related to https://github.com/golangci/golangci-lint/issues/3086\r\n\r\n2) Suggested problematic [code](https://github.com/Antonboom/golangci-vs-ent-generics/blob/c30db16f2421497fc2d207ea74ab048dcbc9ceac/ent/ent.go#L476):\r\n```go\r\nfunc withHooks[V Value, M any, PM interface {\r\n\t*M\r\n\tMutation\r\n}](ctx context.Context, exec func(context.Context) (V, error), mutation PM, hooks []Hook) (value V, err error) {\r\n    /* ... */\r\n}\r\n```\r\n","go\r\nfunc withHooks[V Value, M any, PM interface {\r\n\t*M\r\n\tMutation\r\n}](ctx context.Context, exec func(context.Context) (V, error), mutation PM, hooks []Hook) (value V, err error) {\r\n    /* ... */\r\n}\r\n"
58632,"cmd/asm: incorrectly signaled 'R15 as clobbered' in MULXQ <!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1448370878=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nmain.go\r\n\r\n\r\nmulx_amd64.s\r\n```asm\r\nTEXT \xb7a1(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ R15, AX, DX\r\n    RET\r\n\r\nTEXT \xb7a2(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ AX, R15, DX\r\n    RET\r\n\r\nTEXT \xb7a3(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ AX, DX, R15\r\n    RET\r\n\r\nTEXT \xb7a4(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MOVQ AX, R15\r\n    RET\r\n```\r\n\r\nCommand: \r\n```sh\r\n$ go mod init example.com/mulx\r\n$ go build -buildmode=plugin\r\n```\r\n\r\n### What did you expect to see?\r\nCompiler triggers 1 error. This is a true error, since R15 is being used as an input of MULX.\r\n\r\n```sh\r\nasm: mulx_amd64.s:3: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00003 (/home/user/mulx_amd64.s:3)\tMULXQ\tR15, AX, DX\r\nasm: assembly failed\r\n```\r\n\r\n### What did you see instead?\r\nThe compiler signals 3 errors. The first one is a true error. The second and third are false positives, since R15 is being used as an output of MULX. \r\nTo confirm this, note that the `a4` function has no error as R15 is used as output of MOVQ.\r\n\r\n```sh\r\nasm: mulx_amd64.s:3: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00003 (/home/user/mulx_amd64.s:3)\tMULXQ\tR15, AX, DX\r\nasm: mulx_amd64.s:8: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00007 (/home/user/mulx_amd64.s:8)\tMULXQ\tAX, R15, DX\r\nasm: mulx_amd64.s:13: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00011 (/home/user/mulx_amd64.s:13)\tMULXQ\tAX, DX, R15\r\nasm: assembly failed\r\n```\r\n\r\nOther info:\r\nThe closest CL related to this issue is: https://go-review.googlesource.com/c/go/+/283474\r\nI found this issue while working in https://github.com/cloudflare/circl/pull/407",NeedsInvestigation|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20.1""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1448370878=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nmain.go\r\n```go\r\npackage main\r\nvar myGlobal = []byte(""helloworld"")\r\n//go:noescape\r\nfunc a1()\r\n//go:noescape\r\nfunc a2()\r\n//go:noescape\r\nfunc a3()\r\n//go:noescape\r\nfunc a4()\r\nfunc main() {\r\n  _ = myGlobal\r\n  a1(); a2(); a3(); a4()\r\n}\r\n```\r\n\r\nmulx_amd64.s\r\n```asm\r\nTEXT \xb7a1(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ R15, AX, DX\r\n    RET\r\n\r\nTEXT \xb7a2(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ AX, R15, DX\r\n    RET\r\n\r\nTEXT \xb7a3(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MULXQ AX, DX, R15\r\n    RET\r\n\r\nTEXT \xb7a4(SB),0,$0-0\r\n    CMPL \xb7myGlobal(SB), $0\r\n    MOVQ AX, R15\r\n    RET\r\n```\r\n\r\nCommand: \r\n```sh\r\n$ go mod init example.com/mulx\r\n$ go build -buildmode=plugin\r\n```\r\n\r\n### What did you expect to see?\r\nCompiler triggers 1 error. This is a true error, since R15 is being used as an input of MULX.\r\n\r\n```sh\r\nasm: mulx_amd64.s:3: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00003 (/home/user/mulx_amd64.s:3)\tMULXQ\tR15, AX, DX\r\nasm: assembly failed\r\n```\r\n\r\n### What did you see instead?\r\nThe compiler signals 3 errors. The first one is a true error. The second and third are false positives, since R15 is being used as an output of MULX. \r\nTo confirm this, note that the `a4` function has no error as R15 is used as output of MOVQ.\r\n\r\n```sh\r\nasm: mulx_amd64.s:3: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00003 (/home/user/mulx_amd64.s:3)\tMULXQ\tR15, AX, DX\r\nasm: mulx_amd64.s:8: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00007 (/home/user/mulx_amd64.s:8)\tMULXQ\tAX, R15, DX\r\nasm: mulx_amd64.s:13: when dynamic linking, R15 is clobbered by a global variable access and is used here: 00011 (/home/user/mulx_amd64.s:13)\tMULXQ\tAX, DX, R15\r\nasm: assembly failed\r\n```\r\n\r\nOther info:\r\nThe closest CL related to this issue is: https://go-review.googlesource.com/c/go/+/283474\r\nI found this issue while working in https://github.com/cloudflare/circl/pull/407","go\r\npackage main\r\nvar myGlobal = []byte(""helloworld"")\r\n//go:noescape\r\nfunc a1()\r\n//go:noescape\r\nfunc a2()\r\n//go:noescape\r\nfunc a3()\r\n//go:noescape\r\nfunc a4()\r\nfunc main() {\r\n  _ = myGlobal\r\n  a1(); a2(); a3(); a4()\r\n}\r\n"
58625,"unsafe: allow conversion of uintptr to unsafe.Pointer when it points to non-Go memory### Background\r\n\r\nThe documentation for [`unsafe.Pointer`](https://pkg.go.dev/unsafe@go1.20.1) currently lists six valid conversion patterns:\r\n\r\n1. \u201cConversion of a `*T1` to `Pointer` to `*T2` \u2026 [p]rovided that `T2` is no larger than `T1` and that the two share an equivalent memory layout.\u201d\r\n\r\n2. \u201cConversion of a `Pointer` to a `uintptr` (but not back to `Pointer`).\u201d\r\n\r\n3. \u201cConversion of a `Pointer` to a `uintptr` and back, with arithmetic \u2026 in the same expression, with only the intervening arithmetic between them.\u201d\r\n\r\n4. \u201cConversion of a `Pointer` to a `uintptr` when calling `syscall.Syscall` \u2026 [or] in the argument list of a call to a function implemented in assembly.\u201d (Compare #34684.)\r\n\r\n5. \u201cConversion of the result of `reflect.Value.Pointer` or `reflect.Value.UnsafeAddr` from `uintptr` to `Pointer` \u2026 immediately after making the call, in the same expression.\u201d\r\n\r\n6. \u201cConversion of a `reflect.SliceHeader` or `reflect.StringHeader` `Data` field to or from `Pointer` \u2026 when interpreting the content of an actual slice or string value.\u201d\r\n\r\nThe `unsafeptr` check provided by [`cmd/vet`](https://pkg.go.dev/cmd/vet) warns about uses that do not follow the above patterns. However, it currently flags many violations in `x/sys/unix` (see #41205) when addresses returned by system calls such as `mmap` are converted to Go pointers, and in code generated by ebitengine/purego (see #56487) when hard-coded addresses provided by the operating system or linker are converted to Go pointers. In both cases, the program is attempting to create Go pointers that refer to known-valid addresses that are not managed by the Go runtime; notably, the compiler's `-d=checkptr` mode does not flag them as invalid at run-time.\r\n\r\nIdeally, the `unsafe.Pointer` documentation, the `unsafeptr` check in `cmd/vet`, the `-d=checkptr` mode in `cmd/compile`, and the real-world usage in `syscall`, `x/sys`, and similar low-level libraries should all agree on what is valid. This proposal aims to narrow that gap.\r\n\r\n### Proposal\r\n\r\nI propose that we add another allowed case in the `unsafe.Pointer` documentation:\r\n\r\n> <strong>(7) Conversion of a `uintptr` to `Pointer` when the address is allocated outside of Go.</strong>\r\n> \r\n> A `uintptr` containing a valid memory address allocated outside of Go\r\n> (such as by a system call) may be converted to `Pointer`.\r\n> <strike>The address must remain valid for as long as any Go pointer (of type `Pointer`\r\n> or any other pointer type) refers to it.</strike>\r\n> The address must remain unavailable to the Go runtime (for example, due to an\r\n> allocation using `cgo` or `syscall.Mmap`) for as long as any Go pointer\r\n> (of type `Pointer` or any other pointer type) refers to it.\r\n> \\[edited per https://github.com/golang/go/issues/58625#issuecomment-1440188404\\]\r\n>\r\n> The uintptr constant `0` may be converted to `Pointer`.\r\n> The resulting `Pointer` has the value `nil`.\r\n> \r\n> \r\n\r\nThe `unsafeptr` check in `cmd/vet` would be changed to allow the new case, resolving the warnings in `x/sys` and `ebitengine/purego`.\r\n\r\nThe compiler's `-d=checkptr` mode would check conversions from `uintptr` to `unsafe.Pointer`. The conversion may throw at run-time if:\r\n- The `uintptr` refers to an address managed by Go that is not explicitly pinned (#46787), or\r\n- <strike>the `uintptr` refers to an invalid (unmapped) nonzero address.</strike>\r\n   \\[edit: per https://github.com/golang/go/issues/58625#issuecomment-1440188404, unmapped addresses should be allowed as long as they cannot become Go addresses\\]\r\n\r\n### Alternatives\r\n\r\nThe `vet` warning can be worked around today by relying on a liberal reading of the \u201cequivalent memory layout\u201d rule, rewriting\r\n\r\n(https://go.dev/play/p/ZWZxv6URqTW) as\r\n\r\n(https://go.dev/play/p/Wh5f8k0_yyR), on the theory that the memory layout of a `uintptr` must be in some sense \u201cequivalent\u201d to the memory layout of `unsafe.Pointer`. However, I believe that such a rewrite does not capture the intent of the code as accurately, and should not be necessary.\r\n\r\n(CC @golang/runtime)",Proposal|Proposal-Accepted|compiler/runtime,rsc,"### Background\r\n\r\nThe documentation for [`unsafe.Pointer`](https://pkg.go.dev/unsafe@go1.20.1) currently lists six valid conversion patterns:\r\n\r\n1. \u201cConversion of a `*T1` to `Pointer` to `*T2` \u2026 [p]rovided that `T2` is no larger than `T1` and that the two share an equivalent memory layout.\u201d\r\n\r\n2. \u201cConversion of a `Pointer` to a `uintptr` (but not back to `Pointer`).\u201d\r\n\r\n3. \u201cConversion of a `Pointer` to a `uintptr` and back, with arithmetic \u2026 in the same expression, with only the intervening arithmetic between them.\u201d\r\n\r\n4. \u201cConversion of a `Pointer` to a `uintptr` when calling `syscall.Syscall` \u2026 [or] in the argument list of a call to a function implemented in assembly.\u201d (Compare #34684.)\r\n\r\n5. \u201cConversion of the result of `reflect.Value.Pointer` or `reflect.Value.UnsafeAddr` from `uintptr` to `Pointer` \u2026 immediately after making the call, in the same expression.\u201d\r\n\r\n6. \u201cConversion of a `reflect.SliceHeader` or `reflect.StringHeader` `Data` field to or from `Pointer` \u2026 when interpreting the content of an actual slice or string value.\u201d\r\n\r\nThe `unsafeptr` check provided by [`cmd/vet`](https://pkg.go.dev/cmd/vet) warns about uses that do not follow the above patterns. However, it currently flags many violations in `x/sys/unix` (see #41205) when addresses returned by system calls such as `mmap` are converted to Go pointers, and in code generated by ebitengine/purego (see #56487) when hard-coded addresses provided by the operating system or linker are converted to Go pointers. In both cases, the program is attempting to create Go pointers that refer to known-valid addresses that are not managed by the Go runtime; notably, the compiler's `-d=checkptr` mode does not flag them as invalid at run-time.\r\n\r\nIdeally, the `unsafe.Pointer` documentation, the `unsafeptr` check in `cmd/vet`, the `-d=checkptr` mode in `cmd/compile`, and the real-world usage in `syscall`, `x/sys`, and similar low-level libraries should all agree on what is valid. This proposal aims to narrow that gap.\r\n\r\n### Proposal\r\n\r\nI propose that we add another allowed case in the `unsafe.Pointer` documentation:\r\n\r\n> <strong>(7) Conversion of a `uintptr` to `Pointer` when the address is allocated outside of Go.</strong>\r\n> \r\n> A `uintptr` containing a valid memory address allocated outside of Go\r\n> (such as by a system call) may be converted to `Pointer`.\r\n> <strike>The address must remain valid for as long as any Go pointer (of type `Pointer`\r\n> or any other pointer type) refers to it.</strike>\r\n> The address must remain unavailable to the Go runtime (for example, due to an\r\n> allocation using `cgo` or `syscall.Mmap`) for as long as any Go pointer\r\n> (of type `Pointer` or any other pointer type) refers to it.\r\n> \\[edited per https://github.com/golang/go/issues/58625#issuecomment-1440188404\\]\r\n>\r\n> The uintptr constant `0` may be converted to `Pointer`.\r\n> The resulting `Pointer` has the value `nil`.\r\n> \r\n> ```go\r\n> addr, _, err := syscall.Syscall(\u2026)\r\n> \u2026\r\n> p := unsafe.Pointer(addr)\r\n> ```\r\n\r\nThe `unsafeptr` check in `cmd/vet` would be changed to allow the new case, resolving the warnings in `x/sys` and `ebitengine/purego`.\r\n\r\nThe compiler's `-d=checkptr` mode would check conversions from `uintptr` to `unsafe.Pointer`. The conversion may throw at run-time if:\r\n- The `uintptr` refers to an address managed by Go that is not explicitly pinned (#46787), or\r\n- <strike>the `uintptr` refers to an invalid (unmapped) nonzero address.</strike>\r\n   \\[edit: per https://github.com/golang/go/issues/58625#issuecomment-1440188404, unmapped addresses should be allowed as long as they cannot become Go addresses\\]\r\n\r\n### Alternatives\r\n\r\nThe `vet` warning can be worked around today by relying on a liberal reading of the \u201cequivalent memory layout\u201d rule, rewriting\r\n```go\r\nvar addr uintptr = \u2026\r\np := unsafe.Pointer(addr)\r\n```\r\n(https://go.dev/play/p/ZWZxv6URqTW) as\r\n```go\r\nvar addr uintptr = \u2026\r\np := *(*unsafe.Pointer)(unsafe.Pointer(&addr))\r\n```\r\n(https://go.dev/play/p/Wh5f8k0_yyR), on the theory that the memory layout of a `uintptr` must be in some sense \u201cequivalent\u201d to the memory layout of `unsafe.Pointer`. However, I believe that such a rewrite does not capture the intent of the code as accurately, and should not be necessary.\r\n\r\n(CC @golang/runtime)","go\r\n> addr, _, err := syscall.Syscall(\u2026)\r\n> \u2026\r\n> p := unsafe.Pointer(addr)\r\n> "
58612,"cmd/compile: incorrect program produces ""invalid syntax tree"" error\r\n[produces 3 errors](https://go.dev/play/p/1CSUhUqugB0):\r\n```\r\n./prog.go:4:6: value declared and not used\r\n./prog.go:5:10: value.(type) is not a type\r\n./prog.go:5:10: invalid syntax tree: use of .(type) outside type switch\r\n```\r\nOnly the 2nd error should be presented.\r\n\r\nFrom #58608.",NeedsFix|compiler/runtime,griesemer,```Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar value = new(Demo)\r\n\tUseFunc[value.(type)]()\r\n}\r\n\r\ntype Demo struct{}\r\n\r\nfunc UseFunc[T any]() {}\r\n```\r\n[produces 3 errors](https://go.dev/play/p/1CSUhUqugB0):\r\n```\r\n./prog.go:4:6: value declared and not used\r\n./prog.go:5:10: value.(type) is not a type\r\n./prog.go:5:10: invalid syntax tree: use of .(type) outside type switch\r\n```\r\nOnly the 2nd error should be presented.\r\n\r\nFrom #58608.,Go\r\npackage main\r\n\r\nfunc main() {\r\n\tvar value = new(Demo)\r\n\tUseFunc[value.(type)]()\r\n}\r\n\r\ntype Demo struct{}\r\n\r\nfunc UseFunc[T any]() {}\r\n
58611,"cmd/compile: confusing error: cannot use x (variable of type []string) as []string value ### What version of Go are you using (`go version`)?\r\nSame for go 1.18 to 1.20.1\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nn/a\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/YhkT3b691OB\r\n\r\n\r\n### What did you expect to see?\r\n```\r\ncannot use keys (variable of type []comparable) as []string value in argument to sort.Strings \r\n```\r\ninstead\r\n\r\n### What did you see instead?\r\n```\r\ncannot use keys (variable of type []string) as []string value in argument to sort.Strings\r\n```\r\n\r\n\r\nps: I'm now aware that using Set[string] in that context doesn't specialize the Set to string, but this was super confusing\r\nAn even better error message could be in the receiver to say something\r\n```Set[string] should be Set[T comparable]``` or some such as while string isn't a reserved keyword (sadly in this case) it's very confusing\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\nSame for go 1.18 to 1.20.1\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nn/a\r\n### What did you do?\r\n```golang\r\ntype Set[T comparable] map[T]struct{}\r\n\r\nfunc (s *Set[string]) String() string {\r\n\tkeys := make([]string, 0, len(*s))\r\n\tfor k := range *s {\r\n\t\tkeys = append(keys, k)\r\n\t}\r\n\tsort.Strings(keys)             // cannot use keys (variable of type []string) as []string value in argument to sort.Strings (!!!)\r\n\treturn strings.Join(keys, "","") // cannot use keys (variable of type []string) as []string value in argument to strings.Join (!!!)\r\n}\r\n```\r\nhttps://go.dev/play/p/YhkT3b691OB\r\n\r\n\r\n### What did you expect to see?\r\n```\r\ncannot use keys (variable of type []comparable) as []string value in argument to sort.Strings \r\n```\r\ninstead\r\n\r\n### What did you see instead?\r\n```\r\ncannot use keys (variable of type []string) as []string value in argument to sort.Strings\r\n```\r\n\r\n\r\nps: I'm now aware that using Set[string] in that context doesn't specialize the Set to string, but this was super confusing\r\nAn even better error message could be in the receiver to say something\r\n```Set[string] should be Set[T comparable]``` or some such as while string isn't a reserved keyword (sadly in this case) it's very confusing\r\n","golang\r\ntype Set[T comparable] map[T]struct{}\r\n\r\nfunc (s *Set[string]) String() string {\r\n\tkeys := make([]string, 0, len(*s))\r\n\tfor k := range *s {\r\n\t\tkeys = append(keys, k)\r\n\t}\r\n\tsort.Strings(keys)             // cannot use keys (variable of type []string) as []string value in argument to sort.Strings (!!!)\r\n\treturn strings.Join(keys, "","") // cannot use keys (variable of type []string) as []string value in argument to strings.Join (!!!)\r\n}\r\n"
58606,"x/sys/execabs: Incorrect error reported when executable does not exist### What version of Go are you using (`go version`)?\r\n\r\nGo 1.20, via https://go.dev/play/\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nhttps://go.dev/play/\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAn error message should complain that the executable was not found in the current PATH, or something along those lines. The `os/exec` equivalent code returns this error:\r\n\r\n```\r\nexec: ""this-command-does-not-exist"": executable file not found in $PATH\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe error reported is:\r\n\r\n```\r\nthis-command-does-not-exist resolves to executable in current directory (./this-command-does-not-exist)\r\n```\r\n\r\n(This is not true, there is no such file in the current directory)",NeedsFix|FrozenDueToAge,ianlancetaylor,"### What version of Go are you using (`go version`)?\r\n\r\nGo 1.20, via https://go.dev/play/\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nhttps://go.dev/play/\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/sys/execabs""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(execabs.Command(""this-command-does-not-exist"").Start())\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAn error message should complain that the executable was not found in the current PATH, or something along those lines. The `os/exec` equivalent code returns this error:\r\n\r\n```\r\nexec: ""this-command-does-not-exist"": executable file not found in $PATH\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe error reported is:\r\n\r\n```\r\nthis-command-does-not-exist resolves to executable in current directory (./this-command-does-not-exist)\r\n```\r\n\r\n(This is not true, there is no such file in the current directory)","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/sys/execabs""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(execabs.Command(""this-command-does-not-exist"").Start())\r\n}\r\n"
58590,"spec: unable to create constraint based upon type parameter: ""type in term ~T cannot be a type parameter""<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\nhttps://go.dev/play/p/Ztyu2FJaajl\r\ngo1.20.1\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGo Playground server\r\n\r\n### What did you do?\r\n\r\n\r\n### What did you expect to see?\r\nno error\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:3:18: type in term ~T cannot be a type parameter\r\n./prog.go:4:18: type in term ~T cannot be a type parameter\r\n./prog.go:5:27: type in term ~T cannot be a type parameter\r\n\r\nGo build failed.\r\n```\r\n\r\nToo bad Google isn't using numbered sections in the Go spec, that would make it easier to cite precise specification items.\r\n\r\nSo constraints are interfaces and implicitly converted to them using the syntax of the first four examples. The spec states that ""An interface type <code>T</code> may not embed a type element that is, contains, or embeds <code>T</code>, directly or indirectly."" However, we're specifying a type with T as an underlying type. If I read the specification correctly then this should be legal.\r\n\r\nIt's probably a separate issue with the specification that a constraint of `type A[T any, U T | *T] struct{}` is not legal.",Documentation,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\nhttps://go.dev/play/p/Ztyu2FJaajl\r\ngo1.20.1\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGo Playground server\r\n\r\n### What did you do?\r\n```go\r\npackage main\r\n\r\ntype A[T any, U ~T] struct{}\r\ntype B[T any, U ~T | ~*T] struct{}\r\ntype C[T any] interface{ ~T | ~*T }\r\n\r\nfunc main() {}\r\n```\r\n\r\n### What did you expect to see?\r\nno error\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:3:18: type in term ~T cannot be a type parameter\r\n./prog.go:4:18: type in term ~T cannot be a type parameter\r\n./prog.go:5:27: type in term ~T cannot be a type parameter\r\n\r\nGo build failed.\r\n```\r\n\r\nToo bad Google isn't using numbered sections in the Go spec, that would make it easier to cite precise specification items.\r\n\r\nSo constraints are interfaces and implicitly converted to them using the syntax of the first four examples. The spec states that ""An interface type <code>T</code> may not embed a type element that is, contains, or embeds <code>T</code>, directly or indirectly."" However, we're specifying a type with T as an underlying type. If I read the specification correctly then this should be legal.\r\n\r\nIt's probably a separate issue with the specification that a constraint of `type A[T any, U T | *T] struct{}` is not legal.","go\r\npackage main\r\n\r\ntype A[T any, U ~T] struct{}\r\ntype B[T any, U ~T | ~*T] struct{}\r\ntype C[T any] interface{ ~T | ~*T }\r\n\r\nfunc main() {}\r\n"
58513,"runtime: endless traceback when panic in generics funtion<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.21-261fe25c83 Sat Feb 11 16:16:34 2023 +0000 darwin/amd64\r\n</pre>\r\n\r\n- Introduced in 833367e98af838a2511ee7e4e19dc8f1da7b8ed7 (I found it by `git bisect`)\r\n- Still can be reproduced in 261fe25c83a94fc3defe064baed3944cd3d16959 (master)\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following code:\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nProgram panics and exits. Output by go1.19.4:\r\n\r\n```\r\n$ go run main.go\r\npanic: interface conversion: interface {} is int, not string\r\n\r\ngoroutine 1 [running]:\r\nmain.typeAssert[...](...)\r\n        /Users/bytedance/workspace/traceback/main.go:68\r\nmain.(*mapIter[...]).Next(0xc000090018?, 0xc00004e701)\r\n        /Users/bytedance/workspace/traceback/main.go:44 +0x92\r\nmain.ToSlice[...]({0x107b8e8?, 0xc000090018?})\r\n        /Users/bytedance/workspace/traceback/main.go:59 +0x2e\r\nmain.main()\r\n        /Users/bytedance/workspace/traceback/main.go:76 +0x69\r\nexit status 2\r\n```\r\n\r\n### What did you see instead?\r\n\r\nProgram panics as expected, but print stack endlessly.\r\n\r\n```\r\n$ ~/git/go/bin/go run main.go\r\npanic: interface conversion: interface {} is int, not string\r\n\r\ngoroutine 1 [running]:\r\nmain.typeAssert[...](0xc00001c001?)\r\n\t/Users/bytedance/workspace/traceback/main.go:68 +0x45\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n```\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.21-261fe25c83 Sat Feb 11 16:16:34 2023 +0000 darwin/amd64\r\n</pre>\r\n\r\n- Introduced in 833367e98af838a2511ee7e4e19dc8f1da7b8ed7 (I found it by `git bisect`)\r\n- Still can be reproduced in 261fe25c83a94fc3defe064baed3944cd3d16959 (master)\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following code:\r\n\r\n```go\r\npackage main\r\n\r\nconst (\r\n\tALL = -1\r\n)\r\n\r\ntype Iter[T any] interface {\r\n\tNext(n int) []T\r\n}\r\n\r\ntype sliceIter[T any] struct {\r\n\ts []T\r\n}\r\n\r\nfunc (i *sliceIter[T]) Next(n int) []T {\r\n\tif n == ALL || n > len(i.s) {\r\n\t\tn = len(i.s)\r\n\t}\r\n\tnext := make([]T, n)\r\n\tcopy(next, i.s[:n])\r\n\ti.s = i.s[n:]\r\n\treturn next\r\n}\r\n\r\n// FromSlice constructs an Iter from slice s, in order from left to right.\r\n// An empty Iter (without element) is returned if the given slice is empty\r\n// or nil.\r\nfunc FromSlice[T any](s []T) Iter[T] {\r\n\treturn &sliceIter[T]{s}\r\n}\r\n\r\ntype mapIter[T1, T2 any] struct {\r\n\tf func(T1) T2\r\n\ti Iter[T1]\r\n}\r\n\r\nfunc (i *mapIter[T1, T2]) Next(n int) []T2 {\r\n\tvs := i.i.Next(n)\r\n\tif len(vs) == 0 {\r\n\t\treturn nil\r\n\t}\r\n\tnext := make([]T2, len(vs))\r\n\tfor j := range next {\r\n\t\tnext[j] = i.f(vs[j])\r\n\t}\r\n\treturn next\r\n}\r\n\r\n// Map applies function f to each element of iterator i with Type T1.\r\n// Results of f are returned as a new Iter with Type T2.\r\nfunc Map[T1, T2 any](f func(T1) T2, i Iter[T1]) Iter[T2] {\r\n\treturn &mapIter[T1, T2]{f, i}\r\n}\r\n\r\n// ToSlice collects elements of iterator to a slice.\r\n//\r\n// If the iterator is empty, empty slice []T{} is returned.\r\nfunc ToSlice[T any](i Iter[T]) []T {\r\n\tall := i.Next(ALL)\r\n\tif all == nil {\r\n\t\treturn []T{} // Always returns a slice\r\n\t} else {\r\n\t\treturn all\r\n\t}\r\n}\r\n\r\nfunc typeAssert[To, From any](v From) To {\r\n\treturn any(v).(To)\r\n}\r\n\r\nfunc TypeAssert[To, From any](i Iter[From]) Iter[To] {\r\n\treturn Map(typeAssert[To, From], i)\r\n}\r\n\r\nfunc main() {\r\n\t_ = ToSlice(\r\n\t\tTypeAssert[string](\r\n\t\t\tFromSlice([]int{1})))\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nProgram panics and exits. Output by go1.19.4:\r\n\r\n```\r\n$ go run main.go\r\npanic: interface conversion: interface {} is int, not string\r\n\r\ngoroutine 1 [running]:\r\nmain.typeAssert[...](...)\r\n        /Users/bytedance/workspace/traceback/main.go:68\r\nmain.(*mapIter[...]).Next(0xc000090018?, 0xc00004e701)\r\n        /Users/bytedance/workspace/traceback/main.go:44 +0x92\r\nmain.ToSlice[...]({0x107b8e8?, 0xc000090018?})\r\n        /Users/bytedance/workspace/traceback/main.go:59 +0x2e\r\nmain.main()\r\n        /Users/bytedance/workspace/traceback/main.go:76 +0x69\r\nexit status 2\r\n```\r\n\r\n### What did you see instead?\r\n\r\nProgram panics as expected, but print stack endlessly.\r\n\r\n```\r\n$ ~/git/go/bin/go run main.go\r\npanic: interface conversion: interface {} is int, not string\r\n\r\ngoroutine 1 [running]:\r\nmain.typeAssert[...](0xc00001c001?)\r\n\t/Users/bytedance/workspace/traceback/main.go:68 +0x45\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n\t/Users/bytedance/workspace/traceback/main.go:72\r\nmain.TypeAssert[...](...)\r\n```\r\n\r\n","go\r\npackage main\r\n\r\nconst (\r\n\tALL = -1\r\n)\r\n\r\ntype Iter[T any] interface {\r\n\tNext(n int) []T\r\n}\r\n\r\ntype sliceIter[T any] struct {\r\n\ts []T\r\n}\r\n\r\nfunc (i *sliceIter[T]) Next(n int) []T {\r\n\tif n == ALL || n > len(i.s) {\r\n\t\tn = len(i.s)\r\n\t}\r\n\tnext := make([]T, n)\r\n\tcopy(next, i.s[:n])\r\n\ti.s = i.s[n:]\r\n\treturn next\r\n}\r\n\r\n// FromSlice constructs an Iter from slice s, in order from left to right.\r\n// An empty Iter (without element) is returned if the given slice is empty\r\n// or nil.\r\nfunc FromSlice[T any](s []T) Iter[T] {\r\n\treturn &sliceIter[T]{s}\r\n}\r\n\r\ntype mapIter[T1, T2 any] struct {\r\n\tf func(T1) T2\r\n\ti Iter[T1]\r\n}\r\n\r\nfunc (i *mapIter[T1, T2]) Next(n int) []T2 {\r\n\tvs := i.i.Next(n)\r\n\tif len(vs) == 0 {\r\n\t\treturn nil\r\n\t}\r\n\tnext := make([]T2, len(vs))\r\n\tfor j := range next {\r\n\t\tnext[j] = i.f(vs[j])\r\n\t}\r\n\treturn next\r\n}\r\n\r\n// Map applies function f to each element of iterator i with Type T1.\r\n// Results of f are returned as a new Iter with Type T2.\r\nfunc Map[T1, T2 any](f func(T1) T2, i Iter[T1]) Iter[T2] {\r\n\treturn &mapIter[T1, T2]{f, i}\r\n}\r\n\r\n// ToSlice collects elements of iterator to a slice.\r\n//\r\n// If the iterator is empty, empty slice []T{} is returned.\r\nfunc ToSlice[T any](i Iter[T]) []T {\r\n\tall := i.Next(ALL)\r\n\tif all == nil {\r\n\t\treturn []T{} // Always returns a slice\r\n\t} else {\r\n\t\treturn all\r\n\t}\r\n}\r\n\r\nfunc typeAssert[To, From any](v From) To {\r\n\treturn any(v).(To)\r\n}\r\n\r\nfunc TypeAssert[To, From any](i Iter[From]) Iter[To] {\r\n\treturn Map(typeAssert[To, From], i)\r\n}\r\n\r\nfunc main() {\r\n\t_ = ToSlice(\r\n\t\tTypeAssert[string](\r\n\t\t\tFromSlice([]int{1})))\r\n}\r\n\r\n"
58451,"path/filepath: reject Windows volume names containing `..` components(New issue branching off discussion on #56336.)\r\n\r\nhttps://go.dev/cl/444280 changed Windows volume name detection to be more accurate, correctly detecting a number of previously unrecognized volume name prefixes such as `\\\\.\\?\\UNC\\a\\b`. (Yes, that's a valid volume name.)\r\n\r\nThis change also results in us treating some invalid filenames as containing a prefix. For example, `\\\\` is not a valid Windows filename, but we now consider it to have a `\\\\` volume name on the grounds that preserving the semantically-significant `\\\\` prefix is better than ignoring it.\r\n\r\nA consequence of this change is that on Windows `filepath.Clean` can produce a path that can contain `..` elements. For example, `filepath.Clean(""//../../a"")` is `\\\\..\\..\\a`. I'm not sure if `\\\\..\\..` is a valid Windows volume name or not, but a consequence of this is that code like\r\n\r\n\r\n\r\ncan produce a result that escapes the intended root when `slashSeparatedPath` is something like `/../../foo`.\r\n\r\nWhile this code should be written as something like\r\n\r\n\r\n\r\nwe can still do a better job of defending against vulnerabilities caused by this misuse of `filepath.Clean` by rejecting volume names that contain `..` as a component. So far as I know, `..` never appears in Windows volume names.\r\n\r\nConcretely:\r\n\r\n```\r\nfilepath.Clean(`\\\\..\\..\\a`) = `\\a`\r\nfilepath.VolumeName(`\\\\..\\..\\a`) = ``\r\n```",OS-Windows|NeedsInvestigation,neild,"(New issue branching off discussion on #56336.)\r\n\r\nhttps://go.dev/cl/444280 changed Windows volume name detection to be more accurate, correctly detecting a number of previously unrecognized volume name prefixes such as `\\\\.\\?\\UNC\\a\\b`. (Yes, that's a valid volume name.)\r\n\r\nThis change also results in us treating some invalid filenames as containing a prefix. For example, `\\\\` is not a valid Windows filename, but we now consider it to have a `\\\\` volume name on the grounds that preserving the semantically-significant `\\\\` prefix is better than ignoring it.\r\n\r\nA consequence of this change is that on Windows `filepath.Clean` can produce a path that can contain `..` elements. For example, `filepath.Clean(""//../../a"")` is `\\\\..\\..\\a`. I'm not sure if `\\\\..\\..` is a valid Windows volume name or not, but a consequence of this is that code like\r\n\r\n```go\r\n// Incorrect: Please do not write this.\r\npath = filepath.Join(root, filepath.Clean(""/"" + slashSeparatedPath))\r\n```\r\n\r\ncan produce a result that escapes the intended root when `slashSeparatedPath` is something like `/../../foo`.\r\n\r\nWhile this code should be written as something like\r\n\r\n```go\r\n// Using path.Clean rather than filepath.Clean avoids applying Windows volume semantics to the input path.\r\npath = filepath.Join(root, path.Clean(""/"" + slashSeparatedPath))\r\n```\r\n\r\nwe can still do a better job of defending against vulnerabilities caused by this misuse of `filepath.Clean` by rejecting volume names that contain `..` as a component. So far as I know, `..` never appears in Windows volume names.\r\n\r\nConcretely:\r\n\r\n```\r\nfilepath.Clean(`\\\\..\\..\\a`) = `\\a`\r\nfilepath.VolumeName(`\\\\..\\..\\a`) = ``\r\n```","go\r\n// Incorrect: Please do not write this.\r\npath = filepath.Join(root, filepath.Clean(""/"" + slashSeparatedPath))\r\n"
58382,"x/tools/imports: package in v2 module listed in go.mod is resolved to non-listed v1### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.20\r\n$ go version -m $(which goimports)\r\n/home/dolmen/go/bin/goimports: go1.20\r\n\tpath\tgolang.org/x/tools/cmd/goimports\r\n\tmod\tgolang.org/x/tools\tv0.5.0\th1:+bSpV5HIeWkuvgaMfI3UmKRThoTA5ODJTUd8T17NO+4=\r\n\tdep\tgolang.org/x/mod\tv0.7.0\th1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n\tdep\tgolang.org/x/sys\tv0.4.0\th1:Zr2JFtRQNX3BCZ8YtxRE9hNJYC8J6I1MVbMg6owUp18=\r\n\tbuild\t-buildmode=exe\r\n\tbuild\t-compiler=gc\r\n\tbuild\tCGO_ENABLED=1\r\n\tbuild\tCGO_CFLAGS=\r\n\tbuild\tCGO_CPPFLAGS=\r\n\tbuild\tCGO_CXXFLAGS=\r\n\tbuild\tCGO_LDFLAGS=\r\n\tbuild\tGOARCH=amd64\r\n\tbuild\tGOOS=darwin\r\n\tbuild\tGOAMD64=v3\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\nIssue is reproducible with the latest commit from the repository:\r\n<pre>\r\n$ go install golang.org/x/tools/cmd/goimports@master\r\ngo: downloading golang.org/x/tools v0.5.1-0.20230207145906-edddc5fc3223\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n1. Create `main.go` without incomplete imports. `xurls` symbol is not linked to any declared imports.\r\n2. Create `go.mod` to list dependencies. One module has major version 2: `mvdan.cc/xurls/v2@v2.4.0`\r\n3. Run `goimports` to fix imports \r\n\r\n<pre>\r\n$ cat main.go\r\npackage main\r\n\r\n// Some imports are missing.\r\n// I expect goimports to resolve them using modules listed in go.mod.\r\nimport ""os""\r\n\r\nfunc main() {\r\n\tos.Args[1] = os.Args[0]\r\n\tos.Args = os.Args[1:]\r\n//line :1\r\n\tfmt.Println(xurls.Relaxed().FindAllString(os.Args[1], -1))\r\n}\r\n$ cat go.mod\r\nmodule demo\r\n\r\ngo 1.20\r\n\r\nrequire mvdan.cc/xurls/v2 v2.4.0\r\n$ cat go.sum\r\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\r\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\r\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\r\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\r\ngithub.com/rogpeppe/go-internal v1.8.1/go.mod h1:JeRgkft04UBgHMgCIwADu4Pn6Mtm5d4nPKWu0nJ5d+o=\r\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\r\nmvdan.cc/xurls/v2 v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\nmvdan.cc/xurls/v2 v2.4.0/go.mod h1:+GEjq9uNjqs8LQfM9nVnM8rff0OQ5Iash5rzX+N1CSg=\r\n$ go install golang.org/x/tools/cmd/goimports@master\r\ngo: downloading golang.org/x/tools v0.5.1-0.20230207145906-edddc5fc3223\r\n$ goimports main.go\r\npackage main\r\n\r\n// Some imports are missing.\r\n// I expect goimports to resolve them using modules listed in go.mod.\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\r\n\t""mvdan.cc/xurls""\r\n)\r\n\r\nfunc main() {\r\n\tos.Args[1] = os.Args[0]\r\n\tos.Args = os.Args[1:]\r\n//line :1\r\n\tfmt.Println(xurls.Relaxed().FindAllString(os.Args[1], -1))\r\n}\r\n</pre>\r\n\r\n### What did you expect to see?\r\n\r\nImports fixed in `main.go`. In particular an import of `mvdan.cc/xurls/v2`.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nI get an import of `mvdan.cc/xurls` (which is v1 and a different API) instead of `mvdan.cc/xurls/v2`.\r\n\r\n\r\n\r\n\r\nAs a result the code modified by the goimports doesn't compile.\r\n",NeedsInvestigation|modules|Tools|gopls/imports,pjweinb,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.20\r\n$ go version -m $(which goimports)\r\n/home/dolmen/go/bin/goimports: go1.20\r\n\tpath\tgolang.org/x/tools/cmd/goimports\r\n\tmod\tgolang.org/x/tools\tv0.5.0\th1:+bSpV5HIeWkuvgaMfI3UmKRThoTA5ODJTUd8T17NO+4=\r\n\tdep\tgolang.org/x/mod\tv0.7.0\th1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n\tdep\tgolang.org/x/sys\tv0.4.0\th1:Zr2JFtRQNX3BCZ8YtxRE9hNJYC8J6I1MVbMg6owUp18=\r\n\tbuild\t-buildmode=exe\r\n\tbuild\t-compiler=gc\r\n\tbuild\tCGO_ENABLED=1\r\n\tbuild\tCGO_CFLAGS=\r\n\tbuild\tCGO_CPPFLAGS=\r\n\tbuild\tCGO_CXXFLAGS=\r\n\tbuild\tCGO_LDFLAGS=\r\n\tbuild\tGOARCH=amd64\r\n\tbuild\tGOOS=darwin\r\n\tbuild\tGOAMD64=v3\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\nIssue is reproducible with the latest commit from the repository:\r\n<pre>\r\n$ go install golang.org/x/tools/cmd/goimports@master\r\ngo: downloading golang.org/x/tools v0.5.1-0.20230207145906-edddc5fc3223\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n1. Create `main.go` without incomplete imports. `xurls` symbol is not linked to any declared imports.\r\n2. Create `go.mod` to list dependencies. One module has major version 2: `mvdan.cc/xurls/v2@v2.4.0`\r\n3. Run `goimports` to fix imports \r\n\r\n<pre>\r\n$ cat main.go\r\npackage main\r\n\r\n// Some imports are missing.\r\n// I expect goimports to resolve them using modules listed in go.mod.\r\nimport ""os""\r\n\r\nfunc main() {\r\n\tos.Args[1] = os.Args[0]\r\n\tos.Args = os.Args[1:]\r\n//line :1\r\n\tfmt.Println(xurls.Relaxed().FindAllString(os.Args[1], -1))\r\n}\r\n$ cat go.mod\r\nmodule demo\r\n\r\ngo 1.20\r\n\r\nrequire mvdan.cc/xurls/v2 v2.4.0\r\n$ cat go.sum\r\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\r\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\r\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\r\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\r\ngithub.com/rogpeppe/go-internal v1.8.1/go.mod h1:JeRgkft04UBgHMgCIwADu4Pn6Mtm5d4nPKWu0nJ5d+o=\r\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\r\nmvdan.cc/xurls/v2 v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\nmvdan.cc/xurls/v2 v2.4.0/go.mod h1:+GEjq9uNjqs8LQfM9nVnM8rff0OQ5Iash5rzX+N1CSg=\r\n$ go install golang.org/x/tools/cmd/goimports@master\r\ngo: downloading golang.org/x/tools v0.5.1-0.20230207145906-edddc5fc3223\r\n$ goimports main.go\r\npackage main\r\n\r\n// Some imports are missing.\r\n// I expect goimports to resolve them using modules listed in go.mod.\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\r\n\t""mvdan.cc/xurls""\r\n)\r\n\r\nfunc main() {\r\n\tos.Args[1] = os.Args[0]\r\n\tos.Args = os.Args[1:]\r\n//line :1\r\n\tfmt.Println(xurls.Relaxed().FindAllString(os.Args[1], -1))\r\n}\r\n</pre>\r\n\r\n### What did you expect to see?\r\n\r\nImports fixed in `main.go`. In particular an import of `mvdan.cc/xurls/v2`.\r\n\r\n```go\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\r\n\t""mvdan.cc/xurls/v2""\r\n)\r\n```\r\n\r\n### What did you see instead?\r\n\r\nI get an import of `mvdan.cc/xurls` (which is v1 and a different API) instead of `mvdan.cc/xurls/v2`.\r\n\r\n```go\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\r\n\t""mvdan.cc/xurls""\r\n)\r\n```\r\n\r\n\r\nAs a result the code modified by the goimports doesn't compile.\r\n","go\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\r\n\t""mvdan.cc/xurls/v2""\r\n)\r\n"
58370,"cmd/cover: cover mode ""atomic"" generates invalid code for files without a newline at EOF<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n- It does not reproduce under Go 1.19.5.\r\n- Also does not reproduce with `GOEXPERIMENT=nocoverageredesign` and suggests the issue is possibly a regression related to #51430 -- thanks to @deltamualpha for discovering this.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ncower/.cache/go-build""\r\nGOENV=""/home/ncower/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ncower/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ncower/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ncower/p/break/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build76322923=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan `go test -cover -covermode=atomic` on a package with a file that had a newline missing at EOF.\r\n\r\nAll code referred to is also under <https://github.com/nilium/go-issue-test/tree/38c0047d4219026ecccbb2f35f96162fef5478a7>. Because it involves the trailing newline at EOF on sources, there isn't a good way to reproduce it in the playground as far as I can see.\r\n\r\nA more or less empty file can be used to reproduce this provided the `empty.go` file does not have a newline at EOF:\r\n\r\n**empty.go**\r\n\r\n\r\n**some_test.go** (doesn't matter if this file has a newline at EOF to reproduce)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nFor test output:\r\n```\r\n$ go test -cover -covermode=atomic ./noeol\r\nok      github.com/nilium/go-issue-test/noeol   0.001s  coverage: [no statements]\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go test -cover -covermode=atomic ./noeol\r\n# github.com/nilium/go-issue-test/noeol [github.com/nilium/go-issue-test/noeol.test]\r\nnoeol/empty.go:2:51: syntax error: unexpected var after top level declaration\r\nFAIL    github.com/nilium/go-issue-test/noeol [build failed]\r\nFAIL\r\n```\r\n\r\nwith the generated code for mode=atomic resembling the following:\r\n\r\n",NeedsFix,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n- It does not reproduce under Go 1.19.5.\r\n- Also does not reproduce with `GOEXPERIMENT=nocoverageredesign` and suggests the issue is possibly a regression related to #51430 -- thanks to @deltamualpha for discovering this.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ncower/.cache/go-build""\r\nGOENV=""/home/ncower/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ncower/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ncower/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ncower/p/break/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build76322923=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan `go test -cover -covermode=atomic` on a package with a file that had a newline missing at EOF.\r\n\r\nAll code referred to is also under <https://github.com/nilium/go-issue-test/tree/38c0047d4219026ecccbb2f35f96162fef5478a7>. Because it involves the trailing newline at EOF on sources, there isn't a good way to reproduce it in the playground as far as I can see.\r\n\r\nA more or less empty file can be used to reproduce this provided the `empty.go` file does not have a newline at EOF:\r\n\r\n**empty.go**\r\n```go\r\npackage noeol\r\n```\r\n\r\n**some_test.go** (doesn't matter if this file has a newline at EOF to reproduce)\r\n```go\r\npackage noeol\r\n\r\nimport ""testing""\r\n\r\nfunc TestNothing(t *testing.T) {\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nFor test output:\r\n```\r\n$ go test -cover -covermode=atomic ./noeol\r\nok      github.com/nilium/go-issue-test/noeol   0.001s  coverage: [no statements]\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go test -cover -covermode=atomic ./noeol\r\n# github.com/nilium/go-issue-test/noeol [github.com/nilium/go-issue-test/noeol.test]\r\nnoeol/empty.go:2:51: syntax error: unexpected var after top level declaration\r\nFAIL    github.com/nilium/go-issue-test/noeol [build failed]\r\nFAIL\r\n```\r\n\r\nwith the generated code for mode=atomic resembling the following:\r\n\r\n```go\r\n//line noeol/empty.go:1:1\r\n// empty.go\r\npackage noeol; import _cover_atomic_ ""sync/atomic""var _ = _cover_atomic_.LoadUint32\r\n\r\nvar CoverageVariableNameP uint32\r\n// etc.\r\n```",go\r\npackage noeol\r\n
58352,"x/tools/gopls: render doc links properly in hover<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.1\r\n```\r\n\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n```env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ichamberlain/Library/Caches/go-build""\r\nGOENV=""/Users/ichamberlain/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ichamberlain/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ichamberlain/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org""\r\nGOROOT=""/usr/local/Cellar/go/1.19.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.19.5/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ichamberlain/Documents/go-sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/wb/7n13y1cx0v1d28zb304bw8bm0000gn/T/go-build1610262310=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\n\r\nThe new [go1.19 doc comments](https://go.dev/doc/comment) are rendered to markdown, as mentioned in #54260, but the implementation seems to be incomplete to me. Mostly, linking to anything (package-local or otherwise) seems broken, and markdown links don't render as expected.\r\n\r\nI believe all of these formats should be supported per https://go.dev/doc/comment#links\r\n\r\nSample program:\r\n\r\n\r\n\r\n### What did you expect to see?\r\nI would expect a hover comment to render something like this (using GitHub to render the expected markdown):\r\n\r\n> Struct is a struct.\r\n> \r\n> ### Unexpected link behavior\r\n> \r\n>   - [fmt.Println] is linked to, but the link doesn't work (leads to non-existent ""fmt"")\r\n>   - [fmt] same as above\r\n>   - [Struct] isn't linked to\r\n>   - [absolute markdown links] don't seem to work\r\n>   - [relative markdown links] don't seem to work, although I'm\r\n>     not entirely sure what the expected behavior here is\r\n>\r\n> [absolute markdown links]: https://example.com\r\n> [relative markdown links]: #Example\r\n> [fmt.Println]: https://pkg.go.dev/fmt#Println\r\n> [fmt]: https://pkg.go.dev/fmt\r\n> [Struct]: #Struct\r\n\r\nWhether `fmt.Println` should link to `pkg.go.dev` or be a ""go to definition"" link is up for debate, but maybe making it configurable would be nice? \r\n\r\nFor local links like `Struct` I think the same question applies but I would lean towards ""go to definition"", it seems there has been some tangentially related discussion in #44890.\r\n\r\n### What did you see instead?\r\n\r\n![Screen Shot 2023-02-06 at 11 20 52](https://user-images.githubusercontent.com/11131775/217026366-7917eb92-7235-400b-b0c5-a7492eb81383.png)\r\n\r\nClicking the `fmt` links leads to this:\r\n\r\n![Screen Shot 2023-02-06 at 11 18 54](https://user-images.githubusercontent.com/11131775/217025952-e36be7d0-2443-4b6a-ada5-733c42cd8627.png)\r\n\r\n\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n```\r\nVersion: 1.75.0\r\nCommit: e2816fe719a4026ffa1ee0189dc89bdfdbafb164\r\nDate: 2023-02-01T15:24:42.903Z\r\nElectron: 19.1.9\r\nChromium: 102.0.5005.194\r\nNode.js: 16.14.2\r\nV8: 10.2.154.23-electron.0\r\nOS: Darwin x64 21.6.0\r\nSandboxed: No\r\n```\r\n\r\nRelevant config:\r\n```jsonc\r\n{\r\n    ""go.buildOnSave"": ""off"",\r\n    ""go.formatTool"": ""gofumpt"",\r\n    ""go.lintOnSave"": ""file"",\r\n    ""go.terminal.activateEnvironment"": false,\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.vetOnSave"": ""off"",\r\n    ""go.testExplorer.enable"": true,\r\n    ""go.useLanguageServer"": true,\r\n    ""go.inlayHints.assignVariableTypes"": false,\r\n    ""go.inlayHints.compositeLiteralFields"": true,\r\n    ""go.inlayHints.compositeLiteralTypes"": true,\r\n    ""go.inlayHints.constantValues"": true,\r\n    ""go.inlayHints.functionTypeParameters"": true,\r\n    ""go.inlayHints.parameterNames"": true,\r\n    ""go.inlayHints.rangeVariableTypes"": false,\r\n    ""gopls"": {\r\n        ""ui.completion.usePlaceholders"": true,\r\n        ""ui.navigation.importShortcut"": ""Definition"",\r\n        ""ui.semanticTokens"": true,\r\n        ""noSemanticString"": true,\r\n        ""noSemanticNumber"": true,\r\n    },\r\n}\r\n```\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\nN/A, I think \u2014\xa0but I can capture some if necessary.\r\n",NeedsInvestigation|FrozenDueToAge|gopls|Tools,pjweinb,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.1\r\n```\r\n\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n```env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ichamberlain/Library/Caches/go-build""\r\nGOENV=""/Users/ichamberlain/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ichamberlain/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ichamberlain/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org""\r\nGOROOT=""/usr/local/Cellar/go/1.19.5/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.19.5/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ichamberlain/Documents/go-sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/wb/7n13y1cx0v1d28zb304bw8bm0000gn/T/go-build1610262310=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\n\r\nThe new [go1.19 doc comments](https://go.dev/doc/comment) are rendered to markdown, as mentioned in #54260, but the implementation seems to be incomplete to me. Mostly, linking to anything (package-local or otherwise) seems broken, and markdown links don't render as expected.\r\n\r\nI believe all of these formats should be supported per https://go.dev/doc/comment#links\r\n\r\nSample program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n// Struct is a struct.\r\n//\r\n// # Unexpected link behavior\r\n//\r\n//   - [fmt.Println] is linked to, but the link doesn't work (leads to non-existent ""fmt"")\r\n//   - [fmt] same as above\r\n//   - [Struct] isn't linked to\r\n//   - [absolute markdown links] don't seem to work\r\n//   - [relative markdown links] don't seem to work, although I'm\r\n//     not entirely sure what the expected behavior here is\r\n//\r\n// [absolute markdown links]: https://example.com\r\n// [relative markdown links]: #Example\r\n//\r\n//nolint:ignored\r\ntype Struct struct{}\r\n\r\nfunc main() {\r\n\tfmt.Println()\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nI would expect a hover comment to render something like this (using GitHub to render the expected markdown):\r\n\r\n> Struct is a struct.\r\n> \r\n> ### Unexpected link behavior\r\n> \r\n>   - [fmt.Println] is linked to, but the link doesn't work (leads to non-existent ""fmt"")\r\n>   - [fmt] same as above\r\n>   - [Struct] isn't linked to\r\n>   - [absolute markdown links] don't seem to work\r\n>   - [relative markdown links] don't seem to work, although I'm\r\n>     not entirely sure what the expected behavior here is\r\n>\r\n> [absolute markdown links]: https://example.com\r\n> [relative markdown links]: #Example\r\n> [fmt.Println]: https://pkg.go.dev/fmt#Println\r\n> [fmt]: https://pkg.go.dev/fmt\r\n> [Struct]: #Struct\r\n\r\nWhether `fmt.Println` should link to `pkg.go.dev` or be a ""go to definition"" link is up for debate, but maybe making it configurable would be nice? \r\n\r\nFor local links like `Struct` I think the same question applies but I would lean towards ""go to definition"", it seems there has been some tangentially related discussion in #44890.\r\n\r\n### What did you see instead?\r\n\r\n![Screen Shot 2023-02-06 at 11 20 52](https://user-images.githubusercontent.com/11131775/217026366-7917eb92-7235-400b-b0c5-a7492eb81383.png)\r\n\r\nClicking the `fmt` links leads to this:\r\n\r\n![Screen Shot 2023-02-06 at 11 18 54](https://user-images.githubusercontent.com/11131775/217025952-e36be7d0-2443-4b6a-ada5-733c42cd8627.png)\r\n\r\n\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n```\r\nVersion: 1.75.0\r\nCommit: e2816fe719a4026ffa1ee0189dc89bdfdbafb164\r\nDate: 2023-02-01T15:24:42.903Z\r\nElectron: 19.1.9\r\nChromium: 102.0.5005.194\r\nNode.js: 16.14.2\r\nV8: 10.2.154.23-electron.0\r\nOS: Darwin x64 21.6.0\r\nSandboxed: No\r\n```\r\n\r\nRelevant config:\r\n```jsonc\r\n{\r\n    ""go.buildOnSave"": ""off"",\r\n    ""go.formatTool"": ""gofumpt"",\r\n    ""go.lintOnSave"": ""file"",\r\n    ""go.terminal.activateEnvironment"": false,\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.vetOnSave"": ""off"",\r\n    ""go.testExplorer.enable"": true,\r\n    ""go.useLanguageServer"": true,\r\n    ""go.inlayHints.assignVariableTypes"": false,\r\n    ""go.inlayHints.compositeLiteralFields"": true,\r\n    ""go.inlayHints.compositeLiteralTypes"": true,\r\n    ""go.inlayHints.constantValues"": true,\r\n    ""go.inlayHints.functionTypeParameters"": true,\r\n    ""go.inlayHints.parameterNames"": true,\r\n    ""go.inlayHints.rangeVariableTypes"": false,\r\n    ""gopls"": {\r\n        ""ui.completion.usePlaceholders"": true,\r\n        ""ui.navigation.importShortcut"": ""Definition"",\r\n        ""ui.semanticTokens"": true,\r\n        ""noSemanticString"": true,\r\n        ""noSemanticNumber"": true,\r\n    },\r\n}\r\n```\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\nN/A, I think \u2014\xa0but I can capture some if necessary.\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n// Struct is a struct.\r\n//\r\n// # Unexpected link behavior\r\n//\r\n//   - [fmt.Println] is linked to, but the link doesn't work (leads to non-existent ""fmt"")\r\n//   - [fmt] same as above\r\n//   - [Struct] isn't linked to\r\n//   - [absolute markdown links] don't seem to work\r\n//   - [relative markdown links] don't seem to work, although I'm\r\n//     not entirely sure what the expected behavior here is\r\n//\r\n// [absolute markdown links]: https://example.com\r\n// [relative markdown links]: #Example\r\n//\r\n//nolint:ignored\r\ntype Struct struct{}\r\n\r\nfunc main() {\r\n\tfmt.Println()\r\n}\r\n"
58342,"cmd/compile: typechecker Go version and build-constraints Go version disagree### What version of Go are you using (`go version`)?\r\n\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/lukeshu/.cache/go-build""\r\nGOENV=""/home/lukeshu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/lukeshu/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/lukeshu/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/lukeshu/btrfs/btrfs-tools/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/run/user/1000/tmpdir/go-build2441700527=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n- `go.mod`:\r\n  ```\r\n  module local\r\n\r\n  go 1.18\r\n  ```\r\n- `main.go`:\r\n  \r\n- `go118.go`:\r\n  \r\n- `go120.go`:\r\n  \r\n\r\n### What did you expect to see?\r\n\r\nI expected the program to successfully compile with either Go 1.18 or Go 1.20, offering stricter type-safety with Go 1.20.\r\n\r\nWhile this flexibility isn't such a problem for standalone programs (as in the above reproducer), this is a problem for me trying to publish a library where I need the type parameter to be spec-comparable; for Go <1.20 it is appropriate to fall back to `any` and note in the documentation that it may panic if the type isn't spec-comparable; while for Go >=1.20 it is appropriate for the compiler to help check for mistakes and prevent non-spec-comparable type parameters.\r\n\r\nIf that example doesn't demonstrate the use-case to you, consider a library providing a `type MyMap[K mapkey, v Any] struct{ \u2026 }` with `type mapkey = any` for `go:build !go1.20` and `type mapkey = comparable` for `go:build go1.20`.\r\n\r\nI'll note that there was no mention of build-constraints in https://github.com/golang/go/issues/56548.  I'm not entirely sure how I think this should work, but I think that satisfying the `go1.20` build constraint while disabling Go 1.20 features is definitely wrong.\r\n\r\n### What did you see instead?\r\n\r\nThe program fails to compile with Go 1.20:\r\n\r\n",NeedsInvestigation|compiler/runtime,rsc,"### What version of Go are you using (`go version`)?\r\n\r\n```console\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/lukeshu/.cache/go-build""\r\nGOENV=""/home/lukeshu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/lukeshu/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/lukeshu/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/lukeshu/btrfs/btrfs-tools/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/run/user/1000/tmpdir/go-build2441700527=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n- `go.mod`:\r\n  ```\r\n  module local\r\n\r\n  go 1.18\r\n  ```\r\n- `main.go`:\r\n  ```go\r\n  package main\r\n\r\n  import (\r\n  \t""reflect""\r\n  )\r\n\r\n  func main() {\r\n  \tf[reflect.Type]()\r\n  }\r\n  ```\r\n- `go118.go`:\r\n  ```go\r\n  //go:build !go1.20\r\n\r\n  package main\r\n\r\n  func f[T any]() {}\r\n  ```\r\n- `go120.go`:\r\n  ```go\r\n  //go:build go1.20\r\n\r\n  package main\r\n\r\n  func f[T comparable]() {}\r\n  ```\r\n\r\n### What did you expect to see?\r\n\r\nI expected the program to successfully compile with either Go 1.18 or Go 1.20, offering stricter type-safety with Go 1.20.\r\n\r\nWhile this flexibility isn't such a problem for standalone programs (as in the above reproducer), this is a problem for me trying to publish a library where I need the type parameter to be spec-comparable; for Go <1.20 it is appropriate to fall back to `any` and note in the documentation that it may panic if the type isn't spec-comparable; while for Go >=1.20 it is appropriate for the compiler to help check for mistakes and prevent non-spec-comparable type parameters.\r\n\r\nIf that example doesn't demonstrate the use-case to you, consider a library providing a `type MyMap[K mapkey, v Any] struct{ \u2026 }` with `type mapkey = any` for `go:build !go1.20` and `type mapkey = comparable` for `go:build go1.20`.\r\n\r\nI'll note that there was no mention of build-constraints in https://github.com/golang/go/issues/56548.  I'm not entirely sure how I think this should work, but I think that satisfying the `go1.20` build constraint while disabling Go 1.20 features is definitely wrong.\r\n\r\n### What did you see instead?\r\n\r\nThe program fails to compile with Go 1.20:\r\n\r\n```console\r\n$ go build\r\n# local\r\n./main.go:8:4: reflect.Type to satisfy comparable requires go1.20 or later (-lang was set to go1.18; check go.mod)\r\n```",console\r\n$ go version\r\ngo version go1.20 linux/amd64\r\n
58325,"cmd/compile: internal compiler error: panic: interface conversion: ir.Node is *ir.CompLitExpr, not *ir.Name<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/evan.jones/Library/Caches/go-build""\r\nGOENV=""/Users/evan.jones/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/evan.jones/go/pkg/mod""\r\nGONOPROXY=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/evan.jones/go""\r\nGOPRIVATE=""""\r\nGOROOT=""/Users/evan.jones/go120""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/evan.jones/go120/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/evan.jones/go120bug/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build1938067015=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nAttempt to run the following program with Go 1.20\r\n\r\n\r\n\r\n(this is a silly example, but it was extracted and minimized from a much larger program while trying to get Go 1.20 running)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe binary runs successfully and does nothing.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# example.go/go120bug\r\n./bug.go:23:5: internal compiler error: panic: interface conversion: ir.Node is *ir.CompLitExpr, not *ir.Name\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,cuonglm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/evan.jones/Library/Caches/go-build""\r\nGOENV=""/Users/evan.jones/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/evan.jones/go/pkg/mod""\r\nGONOPROXY=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/evan.jones/go""\r\nGOPRIVATE=""""\r\nGOROOT=""/Users/evan.jones/go120""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/evan.jones/go120/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/evan.jones/go120bug/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g1/97d8s0r57hj4nv4_qd3fqcrm0000gp/T/go-build1938067015=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nAttempt to run the following program with Go 1.20\r\n\r\n```go\r\npackage main\r\n\r\ntype BugStruct struct {\r\n\twrappedint IntWrapper\r\n}\r\n\r\ntype IntWrapper struct {\r\n\tint\r\n}\r\n\r\nfunc (IntWrapper) Make() IntWrapper {\r\n\treturn IntWrapper{5}\r\n}\r\n\r\n// FromWire decodes trace ID from the data transferred over the wire\r\nfunc (BugStruct) Make() BugStruct {\r\n\treturn BugStruct{\r\n\t\twrappedint: IntWrapper{}.Make(),\r\n\t}\r\n}\r\n\r\n// triggers the ICE\r\nvar somevalue = BugStruct{}.Make()\r\n\r\n// does not trigger the ICE\r\n// var somevalue = bugsubpackage.IntWrapper{}.Make()\r\n\r\nfunc main() {}\r\n```\r\n\r\n(this is a silly example, but it was extracted and minimized from a much larger program while trying to get Go 1.20 running)\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe binary runs successfully and does nothing.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# example.go/go120bug\r\n./bug.go:23:5: internal compiler error: panic: interface conversion: ir.Node is *ir.CompLitExpr, not *ir.Name\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n","go\r\npackage main\r\n\r\ntype BugStruct struct {\r\n\twrappedint IntWrapper\r\n}\r\n\r\ntype IntWrapper struct {\r\n\tint\r\n}\r\n\r\nfunc (IntWrapper) Make() IntWrapper {\r\n\treturn IntWrapper{5}\r\n}\r\n\r\n// FromWire decodes trace ID from the data transferred over the wire\r\nfunc (BugStruct) Make() BugStruct {\r\n\treturn BugStruct{\r\n\t\twrappedint: IntWrapper{}.Make(),\r\n\t}\r\n}\r\n\r\n// triggers the ICE\r\nvar somevalue = BugStruct{}.Make()\r\n\r\n// does not trigger the ICE\r\n// var somevalue = bugsubpackage.IntWrapper{}.Make()\r\n\r\nfunc main() {}\r\n"
58324,"x/playground: result not cached\r\n### What version of Go are you using (`go version`)?\r\n\r\n1.20 on the playground\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nWith 1.20, but not 1.19\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nPlayground\r\n\r\n### What did you do?\r\n\r\nRan the code from @rsc [new blog post](https://research.swtch.com/sample) ([link](https://go.dev/play/p/GQr6ShQ_ivG)) multiple times.\r\n\r\nWhole file:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe same result when running multiple times, as written at the top of the file:\r\n\r\n```\r\n// Note that this program will print one answer\r\n// consistently on the Go playground due to caching.\r\n```\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n",NeedsInvestigation,findleyr,"\r\n### What version of Go are you using (`go version`)?\r\n\r\n1.20 on the playground\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nWith 1.20, but not 1.19\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nPlayground\r\n\r\n### What did you do?\r\n\r\nRan the code from @rsc [new blog post](https://research.swtch.com/sample) ([link](https://go.dev/play/p/GQr6ShQ_ivG)) multiple times.\r\n\r\nWhole file:\r\n\r\n```go\r\n// Note that this program will print one answer\r\n// consistently on the Go playground due to caching.\r\n\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""math/rand""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(rand.Perm(37)[:10])\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe same result when running multiple times, as written at the top of the file:\r\n\r\n```\r\n// Note that this program will print one answer\r\n// consistently on the Go playground due to caching.\r\n```\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n","go\r\n// Note that this program will print one answer\r\n// consistently on the Go playground due to caching.\r\n\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""math/rand""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(rand.Perm(37)[:10])\r\n}\r\n"
58233,"proposal: spec: define return statement's result assignment order?A coworker sent out a code review with:\r\n\r\n\r\n\r\n... and during review I said I wasn't sure whether it works. Turns out it worked but it's undefined. It happens to work in cmd/compile and doesn't work in gccgo.\r\n\r\nThe spec defines assignment order for e.g. `a, b = foo(), bar()` or `a, b = b, a` but not for `return`.\r\n\r\nAnother example which has different results between gc and gccgo: https://go.dev/play/p/SDMlczFBshC\r\n\r\nI propose the spec defines this. My preference would be left to right assignment to results.\r\n\r\nBut admittedly it might break code like above. (which we fortunately rewrote to be simpler and explicit)\r\n\r\n/cc @ianlancetaylor @griesemer (sorry)\r\n",LanguageChange|Proposal|FrozenDueToAge,griesemer,"A coworker sent out a code review with:\r\n\r\n```go\r\nfunc As(err error) (_ Error, ok bool) {\r\n\tvar e Error\r\n\treturn e, errors.As(err, &e)\r\n}\r\n```\r\n\r\n... and during review I said I wasn't sure whether it works. Turns out it worked but it's undefined. It happens to work in cmd/compile and doesn't work in gccgo.\r\n\r\nThe spec defines assignment order for e.g. `a, b = foo(), bar()` or `a, b = b, a` but not for `return`.\r\n\r\nAnother example which has different results between gc and gccgo: https://go.dev/play/p/SDMlczFBshC\r\n\r\nI propose the spec defines this. My preference would be left to right assignment to results.\r\n\r\nBut admittedly it might break code like above. (which we fortunately rewrote to be simpler and explicit)\r\n\r\n/cc @ianlancetaylor @griesemer (sorry)\r\n","go\r\nfunc As(err error) (_ Error, ok bool) {\r\n\tvar e Error\r\n\treturn e, errors.As(err, &e)\r\n}\r\n"
58020,"race: Thread Sanitizer breaks sequential consistency semantics### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, it reproduces on the tip of `master` too.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vmg/.cache/go-build""\r\nGOENV=""/home/vmg/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vmg/src/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/vmg/src/go""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vmg/.local/opt/go1.19.4""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vmg/.local/opt/go1.19.4/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI was working on some lock-free algorithms in Go and found something interesting. Here's a break down:\r\n\r\n1. The Go memory model ensures sequential consistency for atomic operations in the `sync/atomic` package. This is explicitly declared in [the documentation](https://go.dev/ref/mem) that @rsc carefully crafted!\r\n\r\n> The APIs in the [sync/atomic](https://go.dev/pkg/sync/atomic/) package are collectively \u201catomic operations\u201d that can be used to synchronize the execution of different goroutines. If the effect of an atomic operation A is observed by atomic operation B, then A is synchronized before B. All the atomic operations executed in a program behave as though executed in some sequentially consistent order.\r\n\r\n> The preceding definition has the same semantics as C++\u2019s sequentially consistent atomics and Java\u2019s volatile variables.\r\n\r\n2. To accomplish sequential consistency between stores and loads, in `AMD64`, the Go compiler always emits `XCHG` instructions for both `atomic.StoreXX` and `atomic.SwapXX`. In fact, these two atomic functions are interchangeable in the codegen if you don't care about the output.\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/cmd/compile/internal/ssa/_gen/AMD64.rules#L526-L535\r\n\r\n3. However, when you compile a Go program with the race detector enabled (`-race`), the Go codegen for x64 no longer applies, as the atomic operations are delegated to the TSAN runtime library so they can be checked for races:\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/runtime/race_amd64.s#L234-L238\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/runtime/race_amd64.s#L259-L263\r\n\r\n4. The TSAN runtime library actually implements two different helpers for `Store` and `Swap`, unlike the Go codegen which would emit identical code for both.\r\n\r\nhttps://github.com/llvm/llvm-project/blob/79649eacbc113a287d380fd7a0dab60302078eb4/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cpp\r\n\r\n\r\n\r\n6. **The code in TSAN does not match Go's semantics!** Besides doing the race checking, TSAN must actually perform the atomic operation that the user requested. These atomic operations have been modeled using the C++ memory model **and they have an explicit ordering argument that does not match Go's semantics**. More particularly, `atomic64_exchange` is emitted with C++'s `std::memory_order_acq_rel`, which coincidentally in x64 is equivalent to `std::memory_order_seq_cst` (it emits a `LOCK XCHG` like Go would). However, `atomic64_store` is emitted with `std::memory_order_release` **which is not sequentially consistent**! In fact, it only emits a `MOV` because writes in x64 imply release semantics.\r\n7. Hence, when running under `-race`, calls to `atomic.Store64` in Go code are actually not sequentially consistent!\r\n\r\nIt took me and @dbussink a good while to figure this one out. We were porting a lock-free algorithm that required sequentially consistent semantics and we were extremely puzzled when the algorithm worked correctly when ran normally and yet **it broke down and started emitting wrong results without any race errors** when ran under `-race`. It got even more confusing when replacing an `atomic.StoreInt64` with an `atomic.SwapInt64` fixed the algorithm.\r\n\r\nWe think this explains the issue we were seeing quite well!\r\n\r\n### What did you expect to see?\r\n\r\nI would expect the sequentially consistent semantics of Go atomics to be maintained when running under the race detector. I would expect the actual assembly instructions for the atomic operations to be identical when running under the race detector (modulo _all the helper code that TSAN adds around them to actually track races_).\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe race detector actually introduced a race in my code that didn't exist before! I want my money back!\r\n\r\n",RaceDetector|WaitingForInfo|NeedsFix|compiler/runtime,dvyukov|randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, it reproduces on the tip of `master` too.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vmg/.cache/go-build""\r\nGOENV=""/home/vmg/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vmg/src/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/vmg/src/go""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vmg/.local/opt/go1.19.4""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vmg/.local/opt/go1.19.4/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI was working on some lock-free algorithms in Go and found something interesting. Here's a break down:\r\n\r\n1. The Go memory model ensures sequential consistency for atomic operations in the `sync/atomic` package. This is explicitly declared in [the documentation](https://go.dev/ref/mem) that @rsc carefully crafted!\r\n\r\n> The APIs in the [sync/atomic](https://go.dev/pkg/sync/atomic/) package are collectively \u201catomic operations\u201d that can be used to synchronize the execution of different goroutines. If the effect of an atomic operation A is observed by atomic operation B, then A is synchronized before B. All the atomic operations executed in a program behave as though executed in some sequentially consistent order.\r\n\r\n> The preceding definition has the same semantics as C++\u2019s sequentially consistent atomics and Java\u2019s volatile variables.\r\n\r\n2. To accomplish sequential consistency between stores and loads, in `AMD64`, the Go compiler always emits `XCHG` instructions for both `atomic.StoreXX` and `atomic.SwapXX`. In fact, these two atomic functions are interchangeable in the codegen if you don't care about the output.\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/cmd/compile/internal/ssa/_gen/AMD64.rules#L526-L535\r\n\r\n3. However, when you compile a Go program with the race detector enabled (`-race`), the Go codegen for x64 no longer applies, as the atomic operations are delegated to the TSAN runtime library so they can be checked for races:\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/runtime/race_amd64.s#L234-L238\r\n\r\nhttps://github.com/golang/go/blob/4df10fba1687a6d4f51d7238a403f8f2298f6a16/src/runtime/race_amd64.s#L259-L263\r\n\r\n4. The TSAN runtime library actually implements two different helpers for `Store` and `Swap`, unlike the Go codegen which would emit identical code for both.\r\n\r\nhttps://github.com/llvm/llvm-project/blob/79649eacbc113a287d380fd7a0dab60302078eb4/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cpp\r\n\r\n```c++\r\nSANITIZER_INTERFACE_ATTRIBUTE\r\nvoid __tsan_go_atomic64_store(ThreadState *thr, uptr cpc, uptr pc, u8 *a) {\r\n  ATOMIC(Store, *(a64**)a, *(a64*)(a+8), mo_release);\r\n}\r\n\r\nSANITIZER_INTERFACE_ATTRIBUTE\r\nvoid __tsan_go_atomic64_exchange(ThreadState *thr, uptr cpc, uptr pc, u8 *a) {\r\n  ATOMIC_RET(Exchange, *(a64*)(a+16), *(a64**)a, *(a64*)(a+8), mo_acq_rel);\r\n}\r\n```\r\n\r\n6. **The code in TSAN does not match Go's semantics!** Besides doing the race checking, TSAN must actually perform the atomic operation that the user requested. These atomic operations have been modeled using the C++ memory model **and they have an explicit ordering argument that does not match Go's semantics**. More particularly, `atomic64_exchange` is emitted with C++'s `std::memory_order_acq_rel`, which coincidentally in x64 is equivalent to `std::memory_order_seq_cst` (it emits a `LOCK XCHG` like Go would). However, `atomic64_store` is emitted with `std::memory_order_release` **which is not sequentially consistent**! In fact, it only emits a `MOV` because writes in x64 imply release semantics.\r\n7. Hence, when running under `-race`, calls to `atomic.Store64` in Go code are actually not sequentially consistent!\r\n\r\nIt took me and @dbussink a good while to figure this one out. We were porting a lock-free algorithm that required sequentially consistent semantics and we were extremely puzzled when the algorithm worked correctly when ran normally and yet **it broke down and started emitting wrong results without any race errors** when ran under `-race`. It got even more confusing when replacing an `atomic.StoreInt64` with an `atomic.SwapInt64` fixed the algorithm.\r\n\r\nWe think this explains the issue we were seeing quite well!\r\n\r\n### What did you expect to see?\r\n\r\nI would expect the sequentially consistent semantics of Go atomics to be maintained when running under the race detector. I would expect the actual assembly instructions for the atomic operations to be identical when running under the race detector (modulo _all the helper code that TSAN adds around them to actually track races_).\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe race detector actually introduced a race in my code that didn't exist before! I want my money back!\r\n\r\n","c++\r\nSANITIZER_INTERFACE_ATTRIBUTE\r\nvoid __tsan_go_atomic64_store(ThreadState *thr, uptr cpc, uptr pc, u8 *a) {\r\n  ATOMIC(Store, *(a64**)a, *(a64*)(a+8), mo_release);\r\n}\r\n\r\nSANITIZER_INTERFACE_ATTRIBUTE\r\nvoid __tsan_go_atomic64_exchange(ThreadState *thr, uptr cpc, uptr pc, u8 *a) {\r\n  ATOMIC_RET(Exchange, *(a64*)(a+16), *(a64**)a, *(a64*)(a+8), mo_acq_rel);\r\n}\r\n"
57979,"x/tools/gopls: zero-config gopls workspaces# Zero-config gopls workspaces\r\n\r\nThis issue describes a change to gopls' internal data model that will allow it to ""Do The Right Thing"" when the user opens a Go file. By decoupling the relationship between builds and workspace folders, we can eliminate complexity related to configuring the workspace (hence ""zero-config""), and lay the groundwork for later improvements such as better support for working on multiple sets of build tags simultaneously (#29202).\r\n\r\nAfter this change, users can work on multiple modules inside of a workspace regardless of whether they are related by a go.work file or explicitly open as separate workspace folders.\r\n\r\n## Background\r\n\r\nRight now, gopls determines a unique build (called a `View`) for each workspace folder. When a workspace folder is opened, gopls performs the following steps:\r\n\r\n1. Request configuration for each workspace folder using the [`workspace/configuration`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_configuration) request with `scopeUri` set to the folder URI.\r\n2. Using this configuration (which may affect the Go environment), resolve a root directory for this folder:\r\n a. Check `go env GOWORK`.\r\n b. Else, look for `go.mod` in a parent directory (recursively).\r\n c. Else, look for `go.mod` in a nested directory, _if there is only one such nested directory_. This was done to support polyglot workspaces where the Go project is in a nested directory, but is a source of both confusion and unpredictable startup time.\r\n d. Else, use the folder as root.\r\n3. Load package metadata for the workspace by calling `go/packages.Load`.\r\n4. Type check packages. We ""fully"" type-check packages that are inside a workspace module, and attempt to type-check only the exported symbols of packages in dependencies outside the workspace.\r\n\r\n### Problems\r\nThere are several problems with this model:\r\n- gopls startup involves scanning the entire workspace directory to find modules. If a user opens a home directory with millions of files, we pay significant a startup penalty (#56496).\r\n- The layout of gopls' internal data model depends on which directories are opened. Users must understand which directory to open, and gopls has to try to provide useful error messages when the workspace is misconfigured. This has been a significant source of confusion, and has led to various workarounds such as the `""experimentalWorkspaceModule""` setting, `""expandWorkspaceToModule""` setting, and `""directoryFilters""` setting.\r\n- Confusingly, if there is only one module in a nested directory, gopls will work. But if there are two modules, gopls won\u2019t work.\r\n- If the user opens a file in a module that is not included in the workspace, gopls will simply not work, even though the go command may function properly when run from the file\u2019s directory (as in the case where there are two nested modules but no go.work file).\r\n- gopls does a lot of work eagerly when initialized, before the user opens a file or makes any request. This may not be desirable, particularly in polyglot workspaces.\r\n- ad-hoc packages (packages outside of GOPATH, with no go.mod) do not work well with gopls. They have limited support if the ad-hoc package directory is opened as a workspace folder, but have several bugs and don\u2019t work as expected when multiple ad-hoc directories are present.\r\n\r\n## New Model\r\n\r\nWe can address these problems by decoupling Views from workspace folders. The set of views will be dynamic, depending on both the set of open folders and the set of open files, and will be chosen to cover all open files.\r\n\r\nSpecifically, define new `View` and `Folder` types approximately as follows:\r\n\r\n\r\n\r\nA `Session` consists of a set of `View` objects describing modules (`go.mod` files), workspaces (`go.work` files), GOPATH directories or ad-hoc packages that the user is working on. This set is determined by both the workspace folders specified by the editor and the set of open files.\r\n\r\n### View types\r\n\r\n- A `workspace` View is defined by a `go.work` file. `source` is the path to the `go.work` file.\r\n- A `module` View is defined by a single `go.mod` file. `source` is the path to the `go.mod` file.\r\n- A `GOPATH` View is defined by a folder inside a `GOPATH` directory, with `GO111MODULE=off` or `GO111MODULE=auto` and no `go.mod` file. `source` is the path to the directory.\r\n- An `adhoc` View  is defined by a folder outside of `GOPATH`, with no enclosing `go.mod` file. In this case, we consider files in the same directory to be part of a package, and `source` is the path to the directory.\r\n\r\n### The set of Views\r\n\r\nWe define the set of Views to ensure that we have coverage for each open folder, and each open file.\r\n\r\n1. **For each workspace folder**, determine a View using the the following algorithm:\r\n\r\n- If `go env GOWORK` is set, create a `workspace` View.\r\n- Else, look for `go.mod` in a parent directory. If found, create a `module` View.\r\n- Else, if the workspace folder is inside `GOPATH`, and `GO111MODULE` is not explicitly set to `on`, create a `GOPATH` View. If `GO111MODULE=on` explicitly, fail.\r\n- Else, create an `adhoc` View for the workspace folder. This may not be desirable for the user if they have modules contained in nested directories. In this case we could either prompt the user, or scan for modules in nested directories, creating Views for each (but notably if we do decide to scan the filesystem, we would create a View for each go.mod or go.work file encountered, rather than fail if there are more than one).\r\n\r\n2. **For each open file**, apply the following algorithm:\r\n\r\n_Match to an existing View_\r\n  - Find the enclosing module corresponding to the file by searching parent directories for `go.mod` files.\r\n  - If a `go.mod` file is found, search for existing `workspace` or `module` type Views containing this module in their `modules` set.\r\n  - Search for existing `GOPATH` type Views whose `source` directory contains the file.\r\n  - Search for existing `adhoc` type Views whose `source` is equal to `filepath.Dir(file)`.\r\n \r\n _If no existing View matches the file, create a new one_\r\n\r\n - Find a workspace folder containing the file, if any. If none is found, use a nil Folder (and therefore assume the default configuration). Note that if a workspace folder is found, the file is either in a module that is not included in the go.work file, or the folder is ad-hoc.\r\n -  If the file is in a module, define a new View of `module` type. Apply an explicit `GOWORK=off` to the View configuration to ensure that we can load the module.\r\n - If the file is not in a module, define a new ad-hoc View.\r\n\r\n### Initializing views\r\n\r\nInitialize views using the following logic. This essentially matches gopls\u2019 current behavior.\r\n\r\n- For `workspace` Views, load `modulepath/...` for each workspace module.\r\n- For `module` Views, load `modulepath/...` for the main module.\r\n- For `GOPATH` Views, load `./...` from the View dir.\r\n- For `ad-hoc` Views, load `./` from the View dir.\r\n\r\nType-check packages (and report their compiler diagnostics) as follows:\r\n\r\n- For `workspace` Views, type-check any package whose module is a workspace module.\r\n- For `module` Views, type-check any package whose module is the main module.\r\n- For `GOPATH` Views, type-check any package contained in `dir`.\r\n- For `adhoc` Views, type-check the ad-hoc package.\r\n\r\n### Resolving requests to Views\r\n\r\nWhen a file-oriented request is handled by gopls (a request prefixed with `textDocument/`, such as `textDocument/definition`), gopls must usually resolve package metadata associated with the file.\r\n\r\nIn most cases, gopls currently chooses an existing view that best applies to the file (`cache.bestViewForURI`), but this is already problematic, because it can lead to path-dependency and incomplete results (c.f. #57558).  For example: when finding references from a package imported from multiple views, gopls currently only shows references in one view.\r\n\r\nWherever possible, gopls should multiplex queries across all Views and merge their results. This would lead to consistent behavior of cross references. In a future where gopls has better build-tag support, this could also lead to multiple locations for jump-to-definition results.\r\n\r\nIn some cases (for example `hover` or `signatureHelp`), we must pick one view. In these cases we can apply some heuristic, but it should be of secondary significance (any hover or signatureHelp result is better than none).\r\n\r\n### Updating Views\r\n\r\nBased on the algorithms used to determine Views above, the following notifications may affect the set of Views:\r\n\r\n- `didOpen` and `didClose` cause gopls to re-evaluate Views, ensuring that we have a View for each open file contained in a workspace folder.\r\n- `didChangeConfiguration` and `didChangeWorkspaceFolders`causes gopls to update `Folder` layout and configuration. Note that configuration may affect e.g. GOWORK values and therefore may lead to a new set of Views.\r\n- `didChange` or `didChangeWatchedFile` may cause gopls to re-evaluate Views if the change is to a `go.mod` or `go.work` file (for example, a `go.mod` file deleted or added, or a `go.work` file changed in any way).\r\n\r\nFollowing these changes, gopls will re-run the algorithm above to determine a new set of Views. It will re-use existing Views that have not changed.\r\n\r\nWhenever new Views are created, they are reinitialized as above.\r\n\r\n## Differences from the current model\r\n\r\nThe algorithms described above are not vastly divergent from gopls\u2019 current behavior. The significant differences may be summarized as follows:\r\n\r\n- Rather than having one view per folder, we may have multiple Views per folder (or even multiple folders per view, such as the case where several folders resolve to a common go.work file).\r\n- The set of \u2018workspace modules\u2019 in a given View is static. As `go.mod` files are added or removed, or `go.work` files changed, we reconfigure the set of Views. This simplifies the logic of handling metadata invalidation in each view.\r\n\r\n## Downsides\r\n\r\nWhile this change will make gopls \u201cdo the right thing\u201d in more cases, there are a several notable downsides:\r\n- Users may experience increased memory usage simply due to the fact that gopls successfully loads more packages. We are working on a separate redesign that will allow us to hold significantly less information in memory per view.\r\n- When opening a new workspace, if there are no open files gopls *may* resolve less information, for example if there is no `go.work` or `go.mod` in a parent directory of the workspace folder. This means that `workspace/symbols` requests may return empty results, or results that depend on the set of open files. Users can mitigate this by using a `go.work` file.\r\n- Workspace-wide queries such as \u201cfind references\u201d may become more confusing to users. For example if the user has modules `a` and `b` in their workspace, and `a` depends on a version of `b` in the module cache, find reference on a symbol in the `b` directory of the workspace will *not* include references in `a`. Users can mitigate this by using a `go.work` file. It would also be possible for us to implement looser heuristics in our references search.\r\n\r\n## Future extension to build tags\r\n\r\nBy decoupling Views from workspace folders, it becomes possible for gopls to support working on multiple sets of build tags simultaneously. One can imagine that the algorithm above to compute views based on open files could be extended to GOOS and GOARCH: if an open file is not included in an existing view because of its GOOS or GOARCH build constraints, create a new view with updated environment.\r\n\r\nThe downsides above apply: potentially increased memory, and potentially confusing UX as the behavior of certain workspace-wide queries (such as references or workspace symbols) depends on the set of open files. We can work to mitigate these downsides, and in my opinion they do not outweigh the upsides, as these queries simply _don't work_ in the current model.\r\n\r\n# Task List\r\n\r\nHere's an approximate plan of attack for implementing this feature, which I'm aiming to complete by the end of the year. (migrated from https://github.com/golang/go/issues/57979#issuecomment-1787445478).\r\n\r\nThis is inside baseball, but may be interesting to @adonovan and @hyangah.\r\n\r\n**Phase 1: making Views immutable**:\r\n- [x] Port all the completion tests to the new marker framework. The old marker framework toggles options before every single completion assertion, and if that causes the views to be recreated, the tests run far too slow.\r\n- [x] Remove the ""minorOptionsChange"" logic: every new configuration should result in a new view. The existing logic to avoid recreating the view is almost certainly a premature optimization.\r\n- [x] Extract the `Session.getWorkspaceInformation` logic to be unit-testable, and rename/refactor. This will be the basis of the new workspace algorithm.\r\n- [x] Isolate ""folder"" information into the `Folder` type, to reuse across new/multiple views.\r\n- [x] Invert the control of `NewView`, which should no longer query workspace information, but rather should be provided immutable workspace and folder information.\r\n- [x] Move management of the go.work and workspace mod files outside of the view, and into what is currently called `getWorkspaceInformation`. Whenever a `go.work` file changes, create a new view (at least if the new `go.work` parses and is saved to disk).\r\n- [x] Move all the mutable view state (such as vulnerabilities) into the snapshot. This is actually necessary for correctness anyway.\r\n\r\nAt this point, gopls should still behave identically, but Views will have immutable options and main modules. There may be a bit more churn when configuration or go.work files change, but such events should be very infrequent, and it seems reasonable to reload the workspace when they occur.\r\n\r\n**Phase 2: supporting multiple views per folder**\r\n\r\n- [ ] Where it makes sense, multiplex LSP queries across all views. We currently do this only for WorkspaceSymbols, but it makes sense for all workspace-wide queries such as finding references or implementations.\r\n- [x] Rewrite the diagnostic logic to merge diagnostics from different views. I'm not sure exactly how this will work: the current logic enforces freshness by tracking a monotonic snapshot counter, but that ends up being rather complicated, and we should do better.\r\n- [x] Change the `bestViewForURI` logic to return nil if no view matches, and lift up `snapshot.contains` to the `View`, since views are now immutable.\r\n- [x] On any didOpen/didClose/didChangeConfiguration/didChange*(of go.work files), recompute the set of `Views` necessary to cover all open files (`computeViews`). Compute the diff with the current set, and minimally (re)create views that are necessary.\r\n- [ ] Move memoizedFS to each view, so that it is naturally reset whenever views change. Since views affect the set of file watchers, changes to the set of views may pull in files whose changes weren't observed, so we need to re-read.\r\n\r\n**Phase 3: support for multiple GOOS/GOARCH combinations**\r\n\r\n- [x] Extend the `computeViews` algorithm to consider GOOS and GOARCH combinations. I'm not sure exactly how this algorithm will work: presumably if the current GOOS/GOARCH combination doesn't match an open file, we'll pick another, but the algorithm to pick another is non-trivial.\r\n",gopls|Tools|gopls/metadata|gopls/workspace,findleyr,"# Zero-config gopls workspaces\r\n\r\nThis issue describes a change to gopls' internal data model that will allow it to ""Do The Right Thing"" when the user opens a Go file. By decoupling the relationship between builds and workspace folders, we can eliminate complexity related to configuring the workspace (hence ""zero-config""), and lay the groundwork for later improvements such as better support for working on multiple sets of build tags simultaneously (#29202).\r\n\r\nAfter this change, users can work on multiple modules inside of a workspace regardless of whether they are related by a go.work file or explicitly open as separate workspace folders.\r\n\r\n## Background\r\n\r\nRight now, gopls determines a unique build (called a `View`) for each workspace folder. When a workspace folder is opened, gopls performs the following steps:\r\n\r\n1. Request configuration for each workspace folder using the [`workspace/configuration`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_configuration) request with `scopeUri` set to the folder URI.\r\n2. Using this configuration (which may affect the Go environment), resolve a root directory for this folder:\r\n a. Check `go env GOWORK`.\r\n b. Else, look for `go.mod` in a parent directory (recursively).\r\n c. Else, look for `go.mod` in a nested directory, _if there is only one such nested directory_. This was done to support polyglot workspaces where the Go project is in a nested directory, but is a source of both confusion and unpredictable startup time.\r\n d. Else, use the folder as root.\r\n3. Load package metadata for the workspace by calling `go/packages.Load`.\r\n4. Type check packages. We ""fully"" type-check packages that are inside a workspace module, and attempt to type-check only the exported symbols of packages in dependencies outside the workspace.\r\n\r\n### Problems\r\nThere are several problems with this model:\r\n- gopls startup involves scanning the entire workspace directory to find modules. If a user opens a home directory with millions of files, we pay significant a startup penalty (#56496).\r\n- The layout of gopls' internal data model depends on which directories are opened. Users must understand which directory to open, and gopls has to try to provide useful error messages when the workspace is misconfigured. This has been a significant source of confusion, and has led to various workarounds such as the `""experimentalWorkspaceModule""` setting, `""expandWorkspaceToModule""` setting, and `""directoryFilters""` setting.\r\n- Confusingly, if there is only one module in a nested directory, gopls will work. But if there are two modules, gopls won\u2019t work.\r\n- If the user opens a file in a module that is not included in the workspace, gopls will simply not work, even though the go command may function properly when run from the file\u2019s directory (as in the case where there are two nested modules but no go.work file).\r\n- gopls does a lot of work eagerly when initialized, before the user opens a file or makes any request. This may not be desirable, particularly in polyglot workspaces.\r\n- ad-hoc packages (packages outside of GOPATH, with no go.mod) do not work well with gopls. They have limited support if the ad-hoc package directory is opened as a workspace folder, but have several bugs and don\u2019t work as expected when multiple ad-hoc directories are present.\r\n\r\n## New Model\r\n\r\nWe can address these problems by decoupling Views from workspace folders. The set of views will be dynamic, depending on both the set of open folders and the set of open files, and will be chosen to cover all open files.\r\n\r\nSpecifically, define new `View` and `Folder` types approximately as follows:\r\n\r\n```go\r\ntype Session struct {\r\n\tviews   []*View\r\n\tfolders []*Folder\r\n\r\n\t// other per-session fields\r\n}\r\n\r\ntype View struct {\r\n\tviewType ViewType  // workspace (go.work), module (go.mod), GOPATH, or adhoc\r\n\tsource   URI       // go.work file, go.mod file, or directory\r\n\tmodules  []URI     // set of modules contained in this View, if any\r\n\toptions   *Options // options derived from either session options, or folder options\r\n\r\n\t// \u2026per-view state, such as the latest snapshot\r\n}\r\n\r\ntype ViewType int\r\n\r\nconst (\r\n\tworkspace ViewType = iota // go.work\r\n\tmodule ViewType           // go.mod\r\n\tgopath ViewType           // GOPATH directory\r\n\tadhoc ViewType            // ad-hoc directory \u2013 see below\r\n)\r\n\r\ntype Folder struct {\r\n\tdir     URI      // workspace folder\r\n\toptions *Options // configuration scoped to the workspace folder\r\n}\r\n```\r\n\r\nA `Session` consists of a set of `View` objects describing modules (`go.mod` files), workspaces (`go.work` files), GOPATH directories or ad-hoc packages that the user is working on. This set is determined by both the workspace folders specified by the editor and the set of open files.\r\n\r\n### View types\r\n\r\n- A `workspace` View is defined by a `go.work` file. `source` is the path to the `go.work` file.\r\n- A `module` View is defined by a single `go.mod` file. `source` is the path to the `go.mod` file.\r\n- A `GOPATH` View is defined by a folder inside a `GOPATH` directory, with `GO111MODULE=off` or `GO111MODULE=auto` and no `go.mod` file. `source` is the path to the directory.\r\n- An `adhoc` View  is defined by a folder outside of `GOPATH`, with no enclosing `go.mod` file. In this case, we consider files in the same directory to be part of a package, and `source` is the path to the directory.\r\n\r\n### The set of Views\r\n\r\nWe define the set of Views to ensure that we have coverage for each open folder, and each open file.\r\n\r\n1. **For each workspace folder**, determine a View using the the following algorithm:\r\n\r\n- If `go env GOWORK` is set, create a `workspace` View.\r\n- Else, look for `go.mod` in a parent directory. If found, create a `module` View.\r\n- Else, if the workspace folder is inside `GOPATH`, and `GO111MODULE` is not explicitly set to `on`, create a `GOPATH` View. If `GO111MODULE=on` explicitly, fail.\r\n- Else, create an `adhoc` View for the workspace folder. This may not be desirable for the user if they have modules contained in nested directories. In this case we could either prompt the user, or scan for modules in nested directories, creating Views for each (but notably if we do decide to scan the filesystem, we would create a View for each go.mod or go.work file encountered, rather than fail if there are more than one).\r\n\r\n2. **For each open file**, apply the following algorithm:\r\n\r\n_Match to an existing View_\r\n  - Find the enclosing module corresponding to the file by searching parent directories for `go.mod` files.\r\n  - If a `go.mod` file is found, search for existing `workspace` or `module` type Views containing this module in their `modules` set.\r\n  - Search for existing `GOPATH` type Views whose `source` directory contains the file.\r\n  - Search for existing `adhoc` type Views whose `source` is equal to `filepath.Dir(file)`.\r\n \r\n _If no existing View matches the file, create a new one_\r\n\r\n - Find a workspace folder containing the file, if any. If none is found, use a nil Folder (and therefore assume the default configuration). Note that if a workspace folder is found, the file is either in a module that is not included in the go.work file, or the folder is ad-hoc.\r\n -  If the file is in a module, define a new View of `module` type. Apply an explicit `GOWORK=off` to the View configuration to ensure that we can load the module.\r\n - If the file is not in a module, define a new ad-hoc View.\r\n\r\n### Initializing views\r\n\r\nInitialize views using the following logic. This essentially matches gopls\u2019 current behavior.\r\n\r\n- For `workspace` Views, load `modulepath/...` for each workspace module.\r\n- For `module` Views, load `modulepath/...` for the main module.\r\n- For `GOPATH` Views, load `./...` from the View dir.\r\n- For `ad-hoc` Views, load `./` from the View dir.\r\n\r\nType-check packages (and report their compiler diagnostics) as follows:\r\n\r\n- For `workspace` Views, type-check any package whose module is a workspace module.\r\n- For `module` Views, type-check any package whose module is the main module.\r\n- For `GOPATH` Views, type-check any package contained in `dir`.\r\n- For `adhoc` Views, type-check the ad-hoc package.\r\n\r\n### Resolving requests to Views\r\n\r\nWhen a file-oriented request is handled by gopls (a request prefixed with `textDocument/`, such as `textDocument/definition`), gopls must usually resolve package metadata associated with the file.\r\n\r\nIn most cases, gopls currently chooses an existing view that best applies to the file (`cache.bestViewForURI`), but this is already problematic, because it can lead to path-dependency and incomplete results (c.f. #57558).  For example: when finding references from a package imported from multiple views, gopls currently only shows references in one view.\r\n\r\nWherever possible, gopls should multiplex queries across all Views and merge their results. This would lead to consistent behavior of cross references. In a future where gopls has better build-tag support, this could also lead to multiple locations for jump-to-definition results.\r\n\r\nIn some cases (for example `hover` or `signatureHelp`), we must pick one view. In these cases we can apply some heuristic, but it should be of secondary significance (any hover or signatureHelp result is better than none).\r\n\r\n### Updating Views\r\n\r\nBased on the algorithms used to determine Views above, the following notifications may affect the set of Views:\r\n\r\n- `didOpen` and `didClose` cause gopls to re-evaluate Views, ensuring that we have a View for each open file contained in a workspace folder.\r\n- `didChangeConfiguration` and `didChangeWorkspaceFolders`causes gopls to update `Folder` layout and configuration. Note that configuration may affect e.g. GOWORK values and therefore may lead to a new set of Views.\r\n- `didChange` or `didChangeWatchedFile` may cause gopls to re-evaluate Views if the change is to a `go.mod` or `go.work` file (for example, a `go.mod` file deleted or added, or a `go.work` file changed in any way).\r\n\r\nFollowing these changes, gopls will re-run the algorithm above to determine a new set of Views. It will re-use existing Views that have not changed.\r\n\r\nWhenever new Views are created, they are reinitialized as above.\r\n\r\n## Differences from the current model\r\n\r\nThe algorithms described above are not vastly divergent from gopls\u2019 current behavior. The significant differences may be summarized as follows:\r\n\r\n- Rather than having one view per folder, we may have multiple Views per folder (or even multiple folders per view, such as the case where several folders resolve to a common go.work file).\r\n- The set of \u2018workspace modules\u2019 in a given View is static. As `go.mod` files are added or removed, or `go.work` files changed, we reconfigure the set of Views. This simplifies the logic of handling metadata invalidation in each view.\r\n\r\n## Downsides\r\n\r\nWhile this change will make gopls \u201cdo the right thing\u201d in more cases, there are a several notable downsides:\r\n- Users may experience increased memory usage simply due to the fact that gopls successfully loads more packages. We are working on a separate redesign that will allow us to hold significantly less information in memory per view.\r\n- When opening a new workspace, if there are no open files gopls *may* resolve less information, for example if there is no `go.work` or `go.mod` in a parent directory of the workspace folder. This means that `workspace/symbols` requests may return empty results, or results that depend on the set of open files. Users can mitigate this by using a `go.work` file.\r\n- Workspace-wide queries such as \u201cfind references\u201d may become more confusing to users. For example if the user has modules `a` and `b` in their workspace, and `a` depends on a version of `b` in the module cache, find reference on a symbol in the `b` directory of the workspace will *not* include references in `a`. Users can mitigate this by using a `go.work` file. It would also be possible for us to implement looser heuristics in our references search.\r\n\r\n## Future extension to build tags\r\n\r\nBy decoupling Views from workspace folders, it becomes possible for gopls to support working on multiple sets of build tags simultaneously. One can imagine that the algorithm above to compute views based on open files could be extended to GOOS and GOARCH: if an open file is not included in an existing view because of its GOOS or GOARCH build constraints, create a new view with updated environment.\r\n\r\nThe downsides above apply: potentially increased memory, and potentially confusing UX as the behavior of certain workspace-wide queries (such as references or workspace symbols) depends on the set of open files. We can work to mitigate these downsides, and in my opinion they do not outweigh the upsides, as these queries simply _don't work_ in the current model.\r\n\r\n# Task List\r\n\r\nHere's an approximate plan of attack for implementing this feature, which I'm aiming to complete by the end of the year. (migrated from https://github.com/golang/go/issues/57979#issuecomment-1787445478).\r\n\r\nThis is inside baseball, but may be interesting to @adonovan and @hyangah.\r\n\r\n**Phase 1: making Views immutable**:\r\n- [x] Port all the completion tests to the new marker framework. The old marker framework toggles options before every single completion assertion, and if that causes the views to be recreated, the tests run far too slow.\r\n- [x] Remove the ""minorOptionsChange"" logic: every new configuration should result in a new view. The existing logic to avoid recreating the view is almost certainly a premature optimization.\r\n- [x] Extract the `Session.getWorkspaceInformation` logic to be unit-testable, and rename/refactor. This will be the basis of the new workspace algorithm.\r\n- [x] Isolate ""folder"" information into the `Folder` type, to reuse across new/multiple views.\r\n- [x] Invert the control of `NewView`, which should no longer query workspace information, but rather should be provided immutable workspace and folder information.\r\n- [x] Move management of the go.work and workspace mod files outside of the view, and into what is currently called `getWorkspaceInformation`. Whenever a `go.work` file changes, create a new view (at least if the new `go.work` parses and is saved to disk).\r\n- [x] Move all the mutable view state (such as vulnerabilities) into the snapshot. This is actually necessary for correctness anyway.\r\n\r\nAt this point, gopls should still behave identically, but Views will have immutable options and main modules. There may be a bit more churn when configuration or go.work files change, but such events should be very infrequent, and it seems reasonable to reload the workspace when they occur.\r\n\r\n**Phase 2: supporting multiple views per folder**\r\n\r\n- [ ] Where it makes sense, multiplex LSP queries across all views. We currently do this only for WorkspaceSymbols, but it makes sense for all workspace-wide queries such as finding references or implementations.\r\n- [x] Rewrite the diagnostic logic to merge diagnostics from different views. I'm not sure exactly how this will work: the current logic enforces freshness by tracking a monotonic snapshot counter, but that ends up being rather complicated, and we should do better.\r\n- [x] Change the `bestViewForURI` logic to return nil if no view matches, and lift up `snapshot.contains` to the `View`, since views are now immutable.\r\n- [x] On any didOpen/didClose/didChangeConfiguration/didChange*(of go.work files), recompute the set of `Views` necessary to cover all open files (`computeViews`). Compute the diff with the current set, and minimally (re)create views that are necessary.\r\n- [ ] Move memoizedFS to each view, so that it is naturally reset whenever views change. Since views affect the set of file watchers, changes to the set of views may pull in files whose changes weren't observed, so we need to re-read.\r\n\r\n**Phase 3: support for multiple GOOS/GOARCH combinations**\r\n\r\n- [x] Extend the `computeViews` algorithm to consider GOOS and GOARCH combinations. I'm not sure exactly how this algorithm will work: presumably if the current GOOS/GOARCH combination doesn't match an open file, we'll pick another, but the algorithm to pick another is non-trivial.\r\n","go\r\ntype Session struct {\r\n\tviews   []*View\r\n\tfolders []*Folder\r\n\r\n\t// other per-session fields\r\n}\r\n\r\ntype View struct {\r\n\tviewType ViewType  // workspace (go.work), module (go.mod), GOPATH, or adhoc\r\n\tsource   URI       // go.work file, go.mod file, or directory\r\n\tmodules  []URI     // set of modules contained in this View, if any\r\n\toptions   *Options // options derived from either session options, or folder options\r\n\r\n\t// \u2026per-view state, such as the latest snapshot\r\n}\r\n\r\ntype ViewType int\r\n\r\nconst (\r\n\tworkspace ViewType = iota // go.work\r\n\tmodule ViewType           // go.mod\r\n\tgopath ViewType           // GOPATH directory\r\n\tadhoc ViewType            // ad-hoc directory \u2013 see below\r\n)\r\n\r\ntype Folder struct {\r\n\tdir     URI      // workspace folder\r\n\toptions *Options // configuration scoped to the workspace folder\r\n}\r\n"
57955,"cmd/compile: illegal combination 02044<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/arm\r\n</pre>\r\n\r\nCan also repro on 1.19.5.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm""\r\nGOBIN=""""\r\nGOCACHE=""/home/pi/.cache/go-build""\r\nGOENV=""/home/pi/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/pi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/pi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_arm""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOARM=""6""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/path/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -marm -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1078720696=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nIt's a large type switch:\r\n\r\n\r\n\r\nThe source code is not public (yet) and I haven't been able to create a minimal repro. I can provide the source code privately for debugging purposes, though.\r\n\r\nWhen I comment out both the `int16` and `uint16` cases it works.\r\n\r\n### What did you expect to see?\r\n\r\nIt compile.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nillegal combination 02044 (/path/decode.go:817) WORD package-path..autotmp_151-286(SP); NONE NONE HAUTO; from 0 0; to 3 3\r\n```\r\n",arch-arm|compiler/runtime,cherrymui,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/arm\r\n</pre>\r\n\r\nCan also repro on 1.19.5.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm""\r\nGOBIN=""""\r\nGOCACHE=""/home/pi/.cache/go-build""\r\nGOENV=""/home/pi/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/pi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/pi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_arm""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOARM=""6""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/path/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -marm -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1078720696=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nIt's a large type switch:\r\n\r\n```go\r\nfunc Decode[T any](b []byte) (T, int) {\r\n    switch any(*new(T)).(type) {\r\n    case int:\r\n        v, n := DecodeInt(b)\r\n        return any(v).(T), n\r\n    case int8:\r\n        v, n := DecodeInt8(b)\r\n        return any(v).(T), n\r\n    case int16:\r\n        v, n := DecodeUint16(b)\r\n        return any(v).(T), n\r\n   // Elided for brevity\r\n   case uint:\r\n        v, n := DecodeUint(b)\r\n        return any(v).(T), n\r\n   case uint8:\r\n        v, n := DecodeUint8(b)\r\n        return any(v).(T), n\r\n   case uint16:\r\n        v, n := DecodeUint16(b)\r\n        return any(v).(T), n\r\n   // More cases, about 30 total.\r\n}\r\n```\r\n\r\nThe source code is not public (yet) and I haven't been able to create a minimal repro. I can provide the source code privately for debugging purposes, though.\r\n\r\nWhen I comment out both the `int16` and `uint16` cases it works.\r\n\r\n### What did you expect to see?\r\n\r\nIt compile.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nillegal combination 02044 (/path/decode.go:817) WORD package-path..autotmp_151-286(SP); NONE NONE HAUTO; from 0 0; to 3 3\r\n```\r\n","go\r\nfunc Decode[T any](b []byte) (T, int) {\r\n    switch any(*new(T)).(type) {\r\n    case int:\r\n        v, n := DecodeInt(b)\r\n        return any(v).(T), n\r\n    case int8:\r\n        v, n := DecodeInt8(b)\r\n        return any(v).(T), n\r\n    case int16:\r\n        v, n := DecodeUint16(b)\r\n        return any(v).(T), n\r\n   // Elided for brevity\r\n   case uint:\r\n        v, n := DecodeUint(b)\r\n        return any(v).(T), n\r\n   case uint8:\r\n        v, n := DecodeUint8(b)\r\n        return any(v).(T), n\r\n   case uint16:\r\n        v, n := DecodeUint16(b)\r\n        return any(v).(T), n\r\n   // More cases, about 30 total.\r\n}\r\n"
57910,"sync: `sync.Mutex.*` escape `m *Mutex` argument### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.5 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes as well as current master (2e792a8295d7c7f082cf2e3b163a3d4d30b6df7e).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hugo/.cache/go-build""\r\nGOENV=""/home/hugo/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hugo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hugo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/home/hugo/Documents/Scripts/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hugo/Documents/Scripts/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3304808272=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have some type that do lazy initialization of some state, for that I use `sync.Once`, however that force my object to leak and prevents stack allocations where I use this object in a non leaky way:\r\nHere is some minimal repro `go build -gcflags=""-m"" a.go`:\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n# command-line-arguments\r\n./a.go:14:8: inlining call to sync.(*Once).Do\r\n./a.go:14:9: can inline (*A).init.func1\r\n./a.go:21:13: inlining call to fmt.Println\r\n./a.go:24:6: can inline main\r\n./a.go:13:7: leaking param: a\r\n./a.go:14:9: func literal does not escape\r\n./a.go:19:7: leaking param: a\r\n./a.go:21:13: ... argument does not escape\r\n./a.go:21:15: a.v escapes to heap\r\n./a.go:25:6: moved to heap: a\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# command-line-arguments\r\n./a.go:14:8: inlining call to sync.(*Once).Do\r\n./a.go:14:9: can inline (*A).init.func1\r\n./a.go:21:13: inlining call to fmt.Println\r\n./a.go:24:6: can inline main\r\n./a.go:13:7: a does not escape\r\n./a.go:14:9: func literal does not escape\r\n./a.go:19:7: a does not escape\r\n./a.go:21:13: ... argument does not escape\r\n./a.go:21:15: a.v escapes to heap\r\n```\r\n\r\n---\r\nDepends on #16241 (note that fixing #16241 wont fully fix the problem here but is required).",Performance|NeedsInvestigation|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.5 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes as well as current master (2e792a8295d7c7f082cf2e3b163a3d4d30b6df7e).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hugo/.cache/go-build""\r\nGOENV=""/home/hugo/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hugo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hugo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/home/hugo/Documents/Scripts/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hugo/Documents/Scripts/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3304808272=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have some type that do lazy initialization of some state, for that I use `sync.Once`, however that force my object to leak and prevents stack allocations where I use this object in a non leaky way:\r\nHere is some minimal repro `go build -gcflags=""-m"" a.go`:\r\n```go\r\npackage a\r\n\r\nimport (\r\n\t""sync""\r\n\t""fmt""\r\n)\r\n\r\ntype A struct {\r\n\to sync.Once\r\n\tv int\r\n}\r\n\r\nfunc (a *A) init() {\r\n\ta.o.Do(func() {\r\n\t\ta.v = 42\r\n\t})\r\n}\r\n\r\nfunc (a *A) Print() {\r\n\ta.init()\r\n\tfmt.Println(a.v)\r\n}\r\n\r\nfunc main() {\r\n\tvar a A\r\n\ta.Print()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n# command-line-arguments\r\n./a.go:14:8: inlining call to sync.(*Once).Do\r\n./a.go:14:9: can inline (*A).init.func1\r\n./a.go:21:13: inlining call to fmt.Println\r\n./a.go:24:6: can inline main\r\n./a.go:13:7: leaking param: a\r\n./a.go:14:9: func literal does not escape\r\n./a.go:19:7: leaking param: a\r\n./a.go:21:13: ... argument does not escape\r\n./a.go:21:15: a.v escapes to heap\r\n./a.go:25:6: moved to heap: a\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# command-line-arguments\r\n./a.go:14:8: inlining call to sync.(*Once).Do\r\n./a.go:14:9: can inline (*A).init.func1\r\n./a.go:21:13: inlining call to fmt.Println\r\n./a.go:24:6: can inline main\r\n./a.go:13:7: a does not escape\r\n./a.go:14:9: func literal does not escape\r\n./a.go:19:7: a does not escape\r\n./a.go:21:13: ... argument does not escape\r\n./a.go:21:15: a.v escapes to heap\r\n```\r\n\r\n---\r\nDepends on #16241 (note that fixing #16241 wont fully fix the problem here but is required).","go\r\npackage a\r\n\r\nimport (\r\n\t""sync""\r\n\t""fmt""\r\n)\r\n\r\ntype A struct {\r\n\to sync.Once\r\n\tv int\r\n}\r\n\r\nfunc (a *A) init() {\r\n\ta.o.Do(func() {\r\n\t\ta.v = 42\r\n\t})\r\n}\r\n\r\nfunc (a *A) Print() {\r\n\ta.init()\r\n\tfmt.Println(a.v)\r\n}\r\n\r\nfunc main() {\r\n\tvar a A\r\n\ta.Print()\r\n}\r\n"
57906,"x/tools/go/analysis: add Analyzer.URL and Diagnostic.URL fieldsThis issue proposes the following additions to `x/tools/go/analysis`\r\n\r\n\r\n\r\n**Background**: #57903 reverted an ad-hoc URL formatted in the printf analyzer diagnostic message, as it adds unnecessary verbosity and is inconsistent with other vet errors.  However, this URL was added based on evidence that some users are confused about how to fix printf formatting verb mismatches.\r\n\r\nThere is inherent tension in error messages because while we want vet errors to be as concise as possible, some users need more information to understand the error, particularly the first time they see it.\r\n\r\nAdding a URL field to analyzers and diagnostics would allow tools to serve the user additional documentation in whatever form is most appropriate. For example, `cmd/vet` could have a flag that controls this information (`-url`?), and gopls could set the LSP [codeDescription](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#codeDescription).\r\n\r\nCC @rsc @adonovan @timothy-king @stapelberg @dominikh ",Proposal|Proposal-Accepted,adonovan,"This issue proposes the following additions to `x/tools/go/analysis`\r\n\r\n```go\r\ntype Analyzer struct {\r\n  // URL holds an optional link to a web page with additional documentation for this analyzer.\r\n  // This value will be used as the default value of Diagnostic.URL for diagnostics produced via\r\n  // the Pass.Reportf API.\r\n  URL string\r\n  //...\r\n}\r\n\r\ntype Diagnostic struct {\r\n  // URL holds an optional link to a web page with additional documentation for this diagnostic.\r\n  URL string\r\n  //...\r\n}\r\n```\r\n\r\n**Background**: #57903 reverted an ad-hoc URL formatted in the printf analyzer diagnostic message, as it adds unnecessary verbosity and is inconsistent with other vet errors.  However, this URL was added based on evidence that some users are confused about how to fix printf formatting verb mismatches.\r\n\r\nThere is inherent tension in error messages because while we want vet errors to be as concise as possible, some users need more information to understand the error, particularly the first time they see it.\r\n\r\nAdding a URL field to analyzers and diagnostics would allow tools to serve the user additional documentation in whatever form is most appropriate. For example, `cmd/vet` could have a flag that controls this information (`-url`?), and gopls could set the LSP [codeDescription](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#codeDescription).\r\n\r\nCC @rsc @adonovan @timothy-king @stapelberg @dominikh ",go\r\ntype Analyzer struct {\r\n  // URL holds an optional link to a web page with additional documentation for this analyzer.\r\n  // This value will be used as the default value of Diagnostic.URL for diagnostics produced via\r\n  // the Pass.Reportf API.\r\n  URL string\r\n  //...\r\n}\r\n\r\ntype Diagnostic struct {\r\n  // URL holds an optional link to a web page with additional documentation for this diagnostic.\r\n  URL string\r\n  //...\r\n}\r\n
57851,"x/net/http2: timeouts not respected on malformed data frames<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nDarwin / ARM64 / AMD64, but also reproduced on Linux / AMD64.\r\n\r\n### What did you do?\r\n\r\nRun the following code with server that completes TLS handshake, but then just sends random raw data.\r\nIn other words, our client never receives frame with `flags=END_STREAM`.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAfter 3 seconds, the connection is aborted.\r\n\r\n### What did you see instead?\r\n\r\nThe connection hangs indefinitely.\r\n\r\n### Additional Context\r\n\r\nWe've seen this happen with Cloudflare in front of a non-http(s) backend.\r\nIn this case we assume it is wrongly configured to point at a SSH daemon. \r\nEven in that case, we should not hang forever.\r\n\r\nRunning with `GODEBUG=http2debug=2`:\r\n```\r\n2023/01/17 19:17:30 http2: Transport failed to get client conn for <snip>:443: http2: no cached connection was available\r\n2023/01/17 19:17:30 http2: Transport creating client conn 0xc0000a8180 to [<snip>]:443\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote SETTINGS len=18, settings: ENABLE_PUSH=0, INITIAL_WINDOW_SIZE=4194304, MAX_HEADER_LIST_SIZE=10485760\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote WINDOW_UPDATE len=4 (conn) incr=1073741824\r\n2023/01/17 19:17:30 http2: Transport encoding header "":authority"" = ""<snip>""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":method"" = ""GET""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":path"" = ""/""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":scheme"" = ""https""\r\n2023/01/17 19:17:30 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2023/01/17 19:17:30 http2: Transport encoding header ""user-agent"" = ""Go-http-client/2.0""\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote HEADERS flags=END_STREAM|END_HEADERS stream=1 len=39\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read SETTINGS len=18, settings: MAX_CONCURRENT_STREAMS=256, INITIAL_WINDOW_SIZE=65536, MAX_FRAME_SIZE=16777215\r\n2023/01/17 19:17:30 http2: Transport received SETTINGS len=18, settings: MAX_CONCURRENT_STREAMS=256, INITIAL_WINDOW_SIZE=65536, MAX_FRAME_SIZE=16777215\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read WINDOW_UPDATE len=4 (conn) incr=2147418112\r\n2023/01/17 19:17:30 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=2147418112\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Transport received SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read HEADERS flags=END_HEADERS stream=1 len=417\r\n2023/01/17 19:17:30 http2: decoded hpack field header field "":status"" = ""101""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""date"" = ""Tue, 17 Jan 2023 18:17:31 GMT""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""cf-cache-status"" = ""DYNAMIC""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""report-to"" = ""{\\""endpoints\\"":[{\\""url\\"":\\""https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=<snip>\\""}],\\""group\\"":\\""cf-nel\\"",\\""max_age\\"":604800}""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""nel"" = ""{\\""success_fraction\\"":0,\\""report_to\\"":\\""cf-nel\\"",\\""max_age\\"":604800}""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""server"" = ""cloudflare""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""cf-ray"" = ""78b116903a38731a-LHR""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""alt-svc"" = ""h3=\\"":443\\""; ma=86400, h3-29=\\"":443\\""; ma=86400""\r\n2023/01/17 19:17:30 http2: Transport received HEADERS flags=END_HEADERS stream=1 len=417\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read DATA stream=1 len=41 data=""SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\\r\\n""\r\n2023/01/17 19:17:30 http2: Transport received DATA stream=1 len=41 data=""SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\\r\\n""\r\n```\r\n\r\nx/net/http2 also provides a `ReadIdleTimeout` and `PingTimeout`. According to the docs:\r\n>ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the connection.\r\n\r\n>PingTimeout is the timeout after which the connection will be closed if a response to Ping is not received.\r\n\r\nSo the following was tried:\r\n\r\n\r\nThis still hangs indefinitely.",NeedsFix,neild,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nDarwin / ARM64 / AMD64, but also reproduced on Linux / AMD64.\r\n\r\n### What did you do?\r\n\r\nRun the following code with server that completes TLS handshake, but then just sends random raw data.\r\nIn other words, our client never receives frame with `flags=END_STREAM`.\r\n\r\n```go\r\nfunc main() {\r\n    ctx, cancel := context.WithTimeout(context.Background(), time.Duration(3*time.Second))\r\n    defer cancel()\r\n    cl := &http.Client{Timeout: 3 * time.Second}\r\n    req, _ := http.NewRequestWithContext(ctx, ""GET"", os.Args[1], nil)\r\n    cl.Do(req)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAfter 3 seconds, the connection is aborted.\r\n\r\n### What did you see instead?\r\n\r\nThe connection hangs indefinitely.\r\n\r\n### Additional Context\r\n\r\nWe've seen this happen with Cloudflare in front of a non-http(s) backend.\r\nIn this case we assume it is wrongly configured to point at a SSH daemon. \r\nEven in that case, we should not hang forever.\r\n\r\nRunning with `GODEBUG=http2debug=2`:\r\n```\r\n2023/01/17 19:17:30 http2: Transport failed to get client conn for <snip>:443: http2: no cached connection was available\r\n2023/01/17 19:17:30 http2: Transport creating client conn 0xc0000a8180 to [<snip>]:443\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote SETTINGS len=18, settings: ENABLE_PUSH=0, INITIAL_WINDOW_SIZE=4194304, MAX_HEADER_LIST_SIZE=10485760\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote WINDOW_UPDATE len=4 (conn) incr=1073741824\r\n2023/01/17 19:17:30 http2: Transport encoding header "":authority"" = ""<snip>""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":method"" = ""GET""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":path"" = ""/""\r\n2023/01/17 19:17:30 http2: Transport encoding header "":scheme"" = ""https""\r\n2023/01/17 19:17:30 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2023/01/17 19:17:30 http2: Transport encoding header ""user-agent"" = ""Go-http-client/2.0""\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote HEADERS flags=END_STREAM|END_HEADERS stream=1 len=39\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read SETTINGS len=18, settings: MAX_CONCURRENT_STREAMS=256, INITIAL_WINDOW_SIZE=65536, MAX_FRAME_SIZE=16777215\r\n2023/01/17 19:17:30 http2: Transport received SETTINGS len=18, settings: MAX_CONCURRENT_STREAMS=256, INITIAL_WINDOW_SIZE=65536, MAX_FRAME_SIZE=16777215\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: wrote SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read WINDOW_UPDATE len=4 (conn) incr=2147418112\r\n2023/01/17 19:17:30 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=2147418112\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Transport received SETTINGS flags=ACK len=0\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read HEADERS flags=END_HEADERS stream=1 len=417\r\n2023/01/17 19:17:30 http2: decoded hpack field header field "":status"" = ""101""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""date"" = ""Tue, 17 Jan 2023 18:17:31 GMT""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""cf-cache-status"" = ""DYNAMIC""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""report-to"" = ""{\\""endpoints\\"":[{\\""url\\"":\\""https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=<snip>\\""}],\\""group\\"":\\""cf-nel\\"",\\""max_age\\"":604800}""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""nel"" = ""{\\""success_fraction\\"":0,\\""report_to\\"":\\""cf-nel\\"",\\""max_age\\"":604800}""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""server"" = ""cloudflare""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""cf-ray"" = ""78b116903a38731a-LHR""\r\n2023/01/17 19:17:30 http2: decoded hpack field header field ""alt-svc"" = ""h3=\\"":443\\""; ma=86400, h3-29=\\"":443\\""; ma=86400""\r\n2023/01/17 19:17:30 http2: Transport received HEADERS flags=END_HEADERS stream=1 len=417\r\n2023/01/17 19:17:30 http2: Framer 0xc0000e0460: read DATA stream=1 len=41 data=""SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\\r\\n""\r\n2023/01/17 19:17:30 http2: Transport received DATA stream=1 len=41 data=""SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\\r\\n""\r\n```\r\n\r\nx/net/http2 also provides a `ReadIdleTimeout` and `PingTimeout`. According to the docs:\r\n>ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the connection.\r\n\r\n>PingTimeout is the timeout after which the connection will be closed if a response to Ping is not received.\r\n\r\nSo the following was tried:\r\n```go\r\nfunc main() {\r\n    t2 := &http2.Transport{\r\n        ReadIdleTimeout: 3 * time.Second,\r\n        PingTimeout:     1 * time.Second,\r\n    }\r\n    cl := &http.Client{Transport: t2}\r\n    req, _ := http.NewRequest(""GET"", os.Args[1], nil)\r\n    cl.Do(req)\r\n}\r\n```\r\n\r\nThis still hangs indefinitely.","go\r\nfunc main() {\r\n    ctx, cancel := context.WithTimeout(context.Background(), time.Duration(3*time.Second))\r\n    defer cancel()\r\n    cl := &http.Client{Timeout: 3 * time.Second}\r\n    req, _ := http.NewRequestWithContext(ctx, ""GET"", os.Args[1], nil)\r\n    cl.Do(req)\r\n}\r\n"
57790,"x/tools/go/ssa: slice to array conversion has the wrong type### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20rc2 linux/arm64\r\n\r\n</pre>\r\n\r\nAnd I'm using the latest version of x/tools/go/ssa: 03eac8179ffe6c450672516551213b3426ba06a6\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, slice to array conversions were added in Go 1.20.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20rc2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ayke/src/tinygo/tools/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build6976675=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI created a simple Go file with the following contents:\r\n\r\n\r\n\r\nThen I dumped the SSA output using `ssadump`:\r\n\r\n```\r\n$ ssadump -build CFI slice2array.go\r\n# Name: command-line-arguments.init\r\n# Package: command-line-arguments\r\n# Synthetic: package initializer\r\nfunc init():\r\n0:                                                                entry P:0 S:0\r\n        return\r\n\r\n# Name: command-line-arguments.sliceToArray\r\n# Package: command-line-arguments\r\n# Location: /home/ayke/tmp/slice2array.go:3:6\r\n# Locals:\r\n#   0:  t2 [4]int\r\nfunc sliceToArray(s []int) [4]int:\r\n0:                                                                entry P:0 S:2\r\n        t0 = slice to array pointer *[4]int <- []int (s)                *[4]int\r\n        t1 = t0 == nil:*[4]int                                             bool\r\n        if t1 goto 1 else 2\r\n1:                                                     slicetoarray.nil P:1 S:1\r\n        t2 = local [4]int ()                                            *[4]int\r\n        jump 3\r\n2:                                                  slicetoarray.nonnil P:1 S:1\r\n        jump 3\r\n3:                                                    slicetoarray.done P:2 S:0\r\n        t3 = phi [1: t2, 2: t0] #slicetoarray                            [4]int\r\n        t4 = *t3                                                         [4]int\r\n        return t4\r\n```\r\n\r\nThe problem here is that `t3` has the wrong type. It should be `*[4]int` (a pointer) but instead it is `[4]int` (an array). This triggers an issue on the following line:\r\n\r\n```\r\n        t4 = *t3                                                         [4]int\r\n```\r\n\r\nHere, `t3` (which should be of pointer type but is an array here) is dereferenced. This leads to a panic in my code, which expects to dereference a pointer and not an array.",FrozenDueToAge|Tools,timothy-king,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.20rc2 linux/arm64\r\n\r\n</pre>\r\n\r\nAnd I'm using the latest version of x/tools/go/ssa: 03eac8179ffe6c450672516551213b3426ba06a6\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, slice to array conversions were added in Go 1.20.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20rc2""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ayke/src/tinygo/tools/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build6976675=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI created a simple Go file with the following contents:\r\n\r\n```go\r\npackage main\r\n\r\nfunc sliceToArray(s []int) [4]int {\r\n        return [4]int(s)\r\n}\r\n```\r\n\r\nThen I dumped the SSA output using `ssadump`:\r\n\r\n```\r\n$ ssadump -build CFI slice2array.go\r\n# Name: command-line-arguments.init\r\n# Package: command-line-arguments\r\n# Synthetic: package initializer\r\nfunc init():\r\n0:                                                                entry P:0 S:0\r\n        return\r\n\r\n# Name: command-line-arguments.sliceToArray\r\n# Package: command-line-arguments\r\n# Location: /home/ayke/tmp/slice2array.go:3:6\r\n# Locals:\r\n#   0:  t2 [4]int\r\nfunc sliceToArray(s []int) [4]int:\r\n0:                                                                entry P:0 S:2\r\n        t0 = slice to array pointer *[4]int <- []int (s)                *[4]int\r\n        t1 = t0 == nil:*[4]int                                             bool\r\n        if t1 goto 1 else 2\r\n1:                                                     slicetoarray.nil P:1 S:1\r\n        t2 = local [4]int ()                                            *[4]int\r\n        jump 3\r\n2:                                                  slicetoarray.nonnil P:1 S:1\r\n        jump 3\r\n3:                                                    slicetoarray.done P:2 S:0\r\n        t3 = phi [1: t2, 2: t0] #slicetoarray                            [4]int\r\n        t4 = *t3                                                         [4]int\r\n        return t4\r\n```\r\n\r\nThe problem here is that `t3` has the wrong type. It should be `*[4]int` (a pointer) but instead it is `[4]int` (an array). This triggers an issue on the following line:\r\n\r\n```\r\n        t4 = *t3                                                         [4]int\r\n```\r\n\r\nHere, `t3` (which should be of pointer type but is an array here) is dereferenced. This leads to a panic in my code, which expects to dereference a pointer and not an array.",go\r\npackage main\r\n\r\nfunc sliceToArray(s []int) [4]int {\r\n        return [4]int(s)\r\n}\r\n
57778,"cmd/compile: internal compiler error: 'init': value .dict (nil) incorrectly live at entry<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go1.20rc3 version\r\ngo version go1.20rc3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nHappens with 1.20rc3 and not with 1.19.4\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go1.20rc3 env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/dvaneeden/.cache/go-build""\r\nGOENV=""/home/dvaneeden/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/dvaneeden/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/dvaneeden/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/dvaneeden/sdk/go1.20rc3""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""/home/dvaneeden/go/tmp""\r\nGOTOOLDIR=""/home/dvaneeden/sdk/go1.20rc3/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20rc3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/tmp/foo/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/home/dvaneeden/go/tmp/go-build3602575493=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis happens for https://pkg.go.dev/github.com/google/btree  that's used in https://github.com/pingcap/tiflow\r\n\r\n\r\nTo reproduce:\r\n\r\n\r\nOr with external dependencies:\r\n```\r\npackage main\r\n\r\nimport ""github.com/google/btree""\r\n\r\nvar (\r\n\tbf = btree.NewFreeListG[*int](1024)\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n```\r\n### What did you expect to see?\r\n\r\n```\r\n$ go version \r\ngo version go1.19.4 linux/amd64\r\n$ go build foo.go\r\n$\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go1.20rc3 build foo.go \r\n# command-line-arguments\r\n./foo.go:15:2: internal compiler error: 'init': value .dict (nil) incorrectly live at entry\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n",NeedsFix|FrozenDueToAge|release-blocker|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go1.20rc3 version\r\ngo version go1.20rc3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nHappens with 1.20rc3 and not with 1.19.4\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go1.20rc3 env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/dvaneeden/.cache/go-build""\r\nGOENV=""/home/dvaneeden/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/dvaneeden/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/dvaneeden/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/dvaneeden/sdk/go1.20rc3""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""/home/dvaneeden/go/tmp""\r\nGOTOOLDIR=""/home/dvaneeden/sdk/go1.20rc3/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.20rc3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/tmp/foo/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/home/dvaneeden/go/tmp/go-build3602575493=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis happens for https://pkg.go.dev/github.com/google/btree  that's used in https://github.com/pingcap/tiflow\r\n\r\n\r\nTo reproduce:\r\n```go\r\npackage main\r\n\r\ntype FreeListG[T any] struct {\r\n\tfreelist []*node[T]\r\n}\r\n\r\ntype node[T any] struct {\r\n}\r\n\r\nfunc NewFreeListG[T any](size int) *FreeListG[T] {\r\n\treturn &FreeListG[T]{freelist: make([]*node[T], 0, size)}\r\n}\r\n\r\nvar (\r\n\tbf = NewFreeListG[*int](1024)\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n```\r\n\r\nOr with external dependencies:\r\n```\r\npackage main\r\n\r\nimport ""github.com/google/btree""\r\n\r\nvar (\r\n\tbf = btree.NewFreeListG[*int](1024)\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n```\r\n### What did you expect to see?\r\n\r\n```\r\n$ go version \r\ngo version go1.19.4 linux/amd64\r\n$ go build foo.go\r\n$\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go1.20rc3 build foo.go \r\n# command-line-arguments\r\n./foo.go:15:2: internal compiler error: 'init': value .dict (nil) incorrectly live at entry\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n","go\r\npackage main\r\n\r\ntype FreeListG[T any] struct {\r\n\tfreelist []*node[T]\r\n}\r\n\r\ntype node[T any] struct {\r\n}\r\n\r\nfunc NewFreeListG[T any](size int) *FreeListG[T] {\r\n\treturn &FreeListG[T]{freelist: make([]*node[T], 0, size)}\r\n}\r\n\r\nvar (\r\n\tbf = NewFreeListG[*int](1024)\r\n)\r\n\r\nfunc main() {\r\n\r\n}\r\n"
57572,"runtime/trace: Tracing error when catching SIGINT<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 windows/amd64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=auto\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\jeremies\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\jeremies\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\jeremies\\Documents\\Perso\\Trunk\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\jeremies\\Documents\\Perso\\Trunk\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.19.4\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset GOWORK=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\jeremies\\AppData\\Local\\Temp\\go-build511942346=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am trying to trace my golang program. Here is the code I used to produce the error\r\n\r\nThen I used the cmd/runtime tool but I get the following error :\r\n```\r\n$ go tool trace trace.out\r\n2023/01/04 12:49:43 Parsing trace...\r\nfailed to parse trace: no consistent ordering of events possible\r\n```\r\n\r\nIf I remove the signal catching part of the code, the tool works fine. Is this a normal behavior ? I find it weird that catching a sigint causes this. Is there a way to fix this ?\r\n\r\nThank you\r\n\r\nEDIT: From what was tested, this problem only occurs on windows (i have tested it on windows 10 and 11). I also tried to use os.Interrupt, syscall.SIGTERM instead but it does not help.",NeedsInvestigation|compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 windows/amd64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=auto\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\jeremies\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\jeremies\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\jeremies\\Documents\\Perso\\Trunk\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\jeremies\\Documents\\Perso\\Trunk\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.19.4\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset GOWORK=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\jeremies\\AppData\\Local\\Temp\\go-build511942346=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am trying to trace my golang program. Here is the code I used to produce the error\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/signal""\r\n\t""runtime/trace""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tf, err := os.Create(""trace.out"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer f.Close()\r\n\r\n\terr = trace.Start(f)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer trace.Stop()\r\n\r\n\t// random stuff\r\n\ta := 0\r\n\tfor i := 0; i < 10; i++ {\r\n\t\ta += i\r\n\t}\r\n\tfmt.Println(a)\r\n\t// end random stuff\r\n\r\n\tsigint := make(chan os.Signal, 1)\r\n\tsignal.Notify(sigint, syscall.SIGINT)\r\n\r\n\t<-sigint // this creates the problem\r\n}\r\n```\r\nThen I used the cmd/runtime tool but I get the following error :\r\n```\r\n$ go tool trace trace.out\r\n2023/01/04 12:49:43 Parsing trace...\r\nfailed to parse trace: no consistent ordering of events possible\r\n```\r\n\r\nIf I remove the signal catching part of the code, the tool works fine. Is this a normal behavior ? I find it weird that catching a sigint causes this. Is there a way to fix this ?\r\n\r\nThank you\r\n\r\nEDIT: From what was tested, this problem only occurs on windows (i have tested it on windows 10 and 11). I also tried to use os.Interrupt, syscall.SIGTERM instead but it does not help.","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""os""\r\n\t""os/signal""\r\n\t""runtime/trace""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tf, err := os.Create(""trace.out"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer f.Close()\r\n\r\n\terr = trace.Start(f)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer trace.Stop()\r\n\r\n\t// random stuff\r\n\ta := 0\r\n\tfor i := 0; i < 10; i++ {\r\n\t\ta += i\r\n\t}\r\n\tfmt.Println(a)\r\n\t// end random stuff\r\n\r\n\tsigint := make(chan os.Signal, 1)\r\n\tsignal.Notify(sigint, syscall.SIGINT)\r\n\r\n\t<-sigint // this creates the problem\r\n}\r\n"
57522,"go/types: panic when checking method on generic struct called from package-level function<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.4\r\n```\r\n\r\n\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n\r\n```\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/seth/.cache/go-build""\r\nGOENV=""/home/seth/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/seth/Code/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/seth/Code""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3205916473=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\n\r\nTyping away in my editor (VSCode, though I don't think it matters), I made a couple of mistakes in a file containing some generics: trying to add a `[]string` formal parameter to a method, I typed `[]STR` (because caps lock was on), and then made a second error in placing my cursor to start removing characters and ended up with a parameter type of `[STR`. This caused `gopls` to go into a tight crash loop.\r\n\r\nWhittling it down, I found this example produces a panic at the same location:\r\n\r\n\r\n\r\n~The names of things don't seem to matter, besides the match between the method `M` and package `func M`.~ I thought this was the case, but I just tried with `func F() { V.M() }` and that also crashed.\r\n\r\n### What did you expect to see?\r\n\r\nSome sort of error like: ""mismatched ["" I suppose? I'm not really sure what `gopls check` looks like when it's working as intended.\r\n\r\n### What did you see instead?\r\n\r\nThe immediate crash described above and below.\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n\r\nI don't think it's relevant, since it's reproducible for me with a bare `gopls` invocation in an empty directory not part of any project, but I'm happy to provide these if it'd be helpful.\r\n\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\n\r\nThe full stdio output from running the `gopls check ...` above that I see is:\r\n\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\r\n        panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x28 pc=0x5beb50]\r\n\r\ngoroutine 222 [running]:\r\ngo/types.(*Checker).handleBailout(0xc0004d21c0, 0xc0007bf5e8)\r\n        /usr/lib/go/src/go/types/check.go:302 +0x8b\r\npanic({0xd64c60, 0x160c0e0})\r\n        /usr/lib/go/src/runtime/panic.go:884 +0x212\r\ngo/types.(*Named).expandMethod(0xc0004fccb0, 0xc0004fccb0?)\r\n        /usr/lib/go/src/go/types/named.go:386 +0xb0\r\ngo/types.(*Named).Method(0xc0004fccb0, 0x0)\r\n        /usr/lib/go/src/go/types/named.go:357 +0x1a9\r\ngo/types.(*Named).lookupMethod(0xc0004fccb0, 0xc0007b5890?, {0x15db2e8, 0x1}, 0x49?)\r\n        /usr/lib/go/src/go/types/named.go:569 +0xa5\r\ngo/types.lookupFieldOrMethod({0x10dcdd0?, 0xc0004fccb0?}, 0x1, 0x10df408?, {0x15db2e8, 0x1}, 0x0?)\r\n        /usr/lib/go/src/go/types/lookup.go:137 +0x605\r\ngo/types.LookupFieldOrMethod({0x10dcdd0?, 0xc0004fccb0?}, 0x8?, 0xc0007b0dc0?, {0x15db2e8?, 0x1?})\r\n        /usr/lib/go/src/go/types/lookup.go:66 +0xc5\r\ngo/types.(*Checker).selector(0xc0004d21c0, 0xc00016a7c0, 0xc0000132a8, 0x0)\r\n        /usr/lib/go/src/go/types/call.go:544 +0x1e5\r\ngo/types.(*Checker).typInternal(0xc0004d21c0, {0x10df6a8?, 0xc0000132a8?}, 0x0)\r\n        /usr/lib/go/src/go/types/typexpr.go:258 +0x37d\r\ngo/types.(*Checker).definedType(0xc0007be948?, {0x10df6a8?, 0xc0000132a8}, 0xd596c0?)\r\n        /usr/lib/go/src/go/types/typexpr.go:180 +0x37\r\ngo/types.(*Checker).varType(0xe32ee0?, {0x10df6a8, 0xc0000132a8})\r\n        /usr/lib/go/src/go/types/typexpr.go:145 +0x2a\r\ngo/types.(*Checker).collectParams(0xc0004d21c0, 0xc0007c0960, 0xc0007b4a80, 0x1)\r\n        /usr/lib/go/src/go/types/signature.go:281 +0x227\r\ngo/types.(*Checker).funcType(0xc0004d21c0, 0xc00016a780, 0x0, 0xc0007b0e00)\r\n        /usr/lib/go/src/go/types/signature.go:184 +0x394\r\ngo/types.(*Checker).typInternal(0xc0004d21c0, {0x10df378?, 0xc0007b0e00?}, 0x0)\r\n        /usr/lib/go/src/go/types/typexpr.go:323 +0x28a\r\ngo/types.(*Checker).definedType(0xc0007beef0?, {0x10df378?, 0xc0007b0e00}, 0xd596c0?)\r\n        /usr/lib/go/src/go/types/typexpr.go:180 +0x37\r\ngo/types.(*Checker).varType(0xe32ee0?, {0x10df378, 0xc0007b0e00})\r\n        /usr/lib/go/src/go/types/typexpr.go:145 +0x2a\r\ngo/types.(*Checker).collectParams(0xc0004d21c0, 0xc0007c07e0, 0xc0007b4ae0, 0x1)\r\n        /usr/lib/go/src/go/types/signature.go:281 +0x227\r\ngo/types.(*Checker).funcType(0xc0004d21c0, 0xc00016a500, 0xc0007b49f0, 0xc0007b0e20)\r\n        /usr/lib/go/src/go/types/signature.go:184 +0x394\r\ngo/types.(*Checker).funcDecl(0xc0004d21c0, 0xc0007c0660, 0xc0007c06c0)\r\n        /usr/lib/go/src/go/types/decl.go:809 +0xd9\r\ngo/types.(*Checker).objDecl(0xc0004d21c0, {0x10e9138, 0xc0007c0660}, 0xc0007bf4f8?)\r\n        /usr/lib/go/src/go/types/decl.go:201 +0x676\r\ngo/types.(*Checker).packageObjects(0xc0004d21c0)\r\n        /usr/lib/go/src/go/types/resolver.go:658 +0x285\r\ngo/types.(*Checker).checkFiles(0xc0004d21c0, {0xc00011a848?, 0xc00016ecd0?, 0x1?})\r\n        /usr/lib/go/src/go/types/check.go:332 +0xbf\r\ngo/types.(*Checker).Files(...)\r\n        /usr/lib/go/src/go/types/check.go:307\r\ngolang.org/x/tools/gopls/internal/lsp/cache.doTypeCheck({0x10e0998, 0xc00043e600}, 0xc0003cedc0, {0xc0004871a0, 0x1, 0x0?}, {0xc0004871b0, 0x1, 0x1}, 0xc000659ba0, ...)\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:572 +0xa09\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x10e0998?, 0xc00043e600}, 0xc0003cedc0, {0xc0004871a0, 0x1, 0x1}, {0xc0004871b0, 0x1, 0x1}, 0xc000659ba0, ...)\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:332 +0x345\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).buildPackageHandle.func1({0x10e0998?, 0xc00043e600?}, {0xe4e3c0?, 0xc0003cedc0?})\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:145 +0x96\r\ngolang.org/x/tools/internal/memoize.(*Promise).run.func2.1()\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:187 +0xa9\r\nruntime/trace.WithRegion({0x10e0998?, 0xc00043e600?}, {0xc00012fe30, 0x22}, 0xc00069a790)\r\n        /usr/lib/go/src/runtime/trace/annotation.go:141 +0xe3\r\ngolang.org/x/tools/internal/memoize.(*Promise).run.func2()\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:180 +0x145\r\ncreated by golang.org/x/tools/internal/memoize.(*Promise).run\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:179 +0x1ea\r\n```\r\n\r\n",FrozenDueToAge|gopls|Tools,findleyr,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.4\r\n```\r\n\r\n\r\n\r\n### go env\r\n\r\n<!--\r\nOutput of `go env` on the command line in your workspace directory\r\n-->\r\n\r\n```\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/seth/.cache/go-build""\r\nGOENV=""/home/seth/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/seth/Code/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/seth/Code""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3205916473=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is better.\r\nA failing unit test is the best.\r\n-->\r\n\r\nTyping away in my editor (VSCode, though I don't think it matters), I made a couple of mistakes in a file containing some generics: trying to add a `[]string` formal parameter to a method, I typed `[]STR` (because caps lock was on), and then made a second error in placing my cursor to start removing characters and ended up with a parameter type of `[STR`. This caused `gopls` to go into a tight crash loop.\r\n\r\nWhittling it down, I found this example produces a panic at the same location:\r\n\r\n```shell\r\n$ gopls check <(cat <<'EOF'\r\npackage p\r\n\r\ntype S[T any] struct{}\r\n\r\nvar V = S[any]{}\r\n\r\nfunc (fs *S[T]) M([STR) {}\r\n\r\nfunc M() {\r\n\tV.M()\r\n}\r\nEOF\r\n)\r\n```\r\n\r\n~The names of things don't seem to matter, besides the match between the method `M` and package `func M`.~ I thought this was the case, but I just tried with `func F() { V.M() }` and that also crashed.\r\n\r\n### What did you expect to see?\r\n\r\nSome sort of error like: ""mismatched ["" I suppose? I'm not really sure what `gopls check` looks like when it's working as intended.\r\n\r\n### What did you see instead?\r\n\r\nThe immediate crash described above and below.\r\n\r\n### Editor and settings\r\n\r\n<!--\r\nYour editor and any settings you have configured (for example, your VSCode settings.json file)\r\n-->\r\n\r\nI don't think it's relevant, since it's reproducible for me with a bare `gopls` invocation in an empty directory not part of any project, but I'm happy to provide these if it'd be helpful.\r\n\r\n\r\n### Logs\r\n\r\n<!--\r\nIf possible please include gopls logs. Instructions for capturing them can be found here:\r\nhttps://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#capture-logs\r\n-->\r\n\r\nThe full stdio output from running the `gopls check ...` above that I see is:\r\n\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\r\n        panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x28 pc=0x5beb50]\r\n\r\ngoroutine 222 [running]:\r\ngo/types.(*Checker).handleBailout(0xc0004d21c0, 0xc0007bf5e8)\r\n        /usr/lib/go/src/go/types/check.go:302 +0x8b\r\npanic({0xd64c60, 0x160c0e0})\r\n        /usr/lib/go/src/runtime/panic.go:884 +0x212\r\ngo/types.(*Named).expandMethod(0xc0004fccb0, 0xc0004fccb0?)\r\n        /usr/lib/go/src/go/types/named.go:386 +0xb0\r\ngo/types.(*Named).Method(0xc0004fccb0, 0x0)\r\n        /usr/lib/go/src/go/types/named.go:357 +0x1a9\r\ngo/types.(*Named).lookupMethod(0xc0004fccb0, 0xc0007b5890?, {0x15db2e8, 0x1}, 0x49?)\r\n        /usr/lib/go/src/go/types/named.go:569 +0xa5\r\ngo/types.lookupFieldOrMethod({0x10dcdd0?, 0xc0004fccb0?}, 0x1, 0x10df408?, {0x15db2e8, 0x1}, 0x0?)\r\n        /usr/lib/go/src/go/types/lookup.go:137 +0x605\r\ngo/types.LookupFieldOrMethod({0x10dcdd0?, 0xc0004fccb0?}, 0x8?, 0xc0007b0dc0?, {0x15db2e8?, 0x1?})\r\n        /usr/lib/go/src/go/types/lookup.go:66 +0xc5\r\ngo/types.(*Checker).selector(0xc0004d21c0, 0xc00016a7c0, 0xc0000132a8, 0x0)\r\n        /usr/lib/go/src/go/types/call.go:544 +0x1e5\r\ngo/types.(*Checker).typInternal(0xc0004d21c0, {0x10df6a8?, 0xc0000132a8?}, 0x0)\r\n        /usr/lib/go/src/go/types/typexpr.go:258 +0x37d\r\ngo/types.(*Checker).definedType(0xc0007be948?, {0x10df6a8?, 0xc0000132a8}, 0xd596c0?)\r\n        /usr/lib/go/src/go/types/typexpr.go:180 +0x37\r\ngo/types.(*Checker).varType(0xe32ee0?, {0x10df6a8, 0xc0000132a8})\r\n        /usr/lib/go/src/go/types/typexpr.go:145 +0x2a\r\ngo/types.(*Checker).collectParams(0xc0004d21c0, 0xc0007c0960, 0xc0007b4a80, 0x1)\r\n        /usr/lib/go/src/go/types/signature.go:281 +0x227\r\ngo/types.(*Checker).funcType(0xc0004d21c0, 0xc00016a780, 0x0, 0xc0007b0e00)\r\n        /usr/lib/go/src/go/types/signature.go:184 +0x394\r\ngo/types.(*Checker).typInternal(0xc0004d21c0, {0x10df378?, 0xc0007b0e00?}, 0x0)\r\n        /usr/lib/go/src/go/types/typexpr.go:323 +0x28a\r\ngo/types.(*Checker).definedType(0xc0007beef0?, {0x10df378?, 0xc0007b0e00}, 0xd596c0?)\r\n        /usr/lib/go/src/go/types/typexpr.go:180 +0x37\r\ngo/types.(*Checker).varType(0xe32ee0?, {0x10df378, 0xc0007b0e00})\r\n        /usr/lib/go/src/go/types/typexpr.go:145 +0x2a\r\ngo/types.(*Checker).collectParams(0xc0004d21c0, 0xc0007c07e0, 0xc0007b4ae0, 0x1)\r\n        /usr/lib/go/src/go/types/signature.go:281 +0x227\r\ngo/types.(*Checker).funcType(0xc0004d21c0, 0xc00016a500, 0xc0007b49f0, 0xc0007b0e20)\r\n        /usr/lib/go/src/go/types/signature.go:184 +0x394\r\ngo/types.(*Checker).funcDecl(0xc0004d21c0, 0xc0007c0660, 0xc0007c06c0)\r\n        /usr/lib/go/src/go/types/decl.go:809 +0xd9\r\ngo/types.(*Checker).objDecl(0xc0004d21c0, {0x10e9138, 0xc0007c0660}, 0xc0007bf4f8?)\r\n        /usr/lib/go/src/go/types/decl.go:201 +0x676\r\ngo/types.(*Checker).packageObjects(0xc0004d21c0)\r\n        /usr/lib/go/src/go/types/resolver.go:658 +0x285\r\ngo/types.(*Checker).checkFiles(0xc0004d21c0, {0xc00011a848?, 0xc00016ecd0?, 0x1?})\r\n        /usr/lib/go/src/go/types/check.go:332 +0xbf\r\ngo/types.(*Checker).Files(...)\r\n        /usr/lib/go/src/go/types/check.go:307\r\ngolang.org/x/tools/gopls/internal/lsp/cache.doTypeCheck({0x10e0998, 0xc00043e600}, 0xc0003cedc0, {0xc0004871a0, 0x1, 0x0?}, {0xc0004871b0, 0x1, 0x1}, 0xc000659ba0, ...)\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:572 +0xa09\r\ngolang.org/x/tools/gopls/internal/lsp/cache.typeCheckImpl({0x10e0998?, 0xc00043e600}, 0xc0003cedc0, {0xc0004871a0, 0x1, 0x1}, {0xc0004871b0, 0x1, 0x1}, 0xc000659ba0, ...)\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:332 +0x345\r\ngolang.org/x/tools/gopls/internal/lsp/cache.(*snapshot).buildPackageHandle.func1({0x10e0998?, 0xc00043e600?}, {0xe4e3c0?, 0xc0003cedc0?})\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools/gopls@v0.11.0/internal/lsp/cache/check.go:145 +0x96\r\ngolang.org/x/tools/internal/memoize.(*Promise).run.func2.1()\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:187 +0xa9\r\nruntime/trace.WithRegion({0x10e0998?, 0xc00043e600?}, {0xc00012fe30, 0x22}, 0xc00069a790)\r\n        /usr/lib/go/src/runtime/trace/annotation.go:141 +0xe3\r\ngolang.org/x/tools/internal/memoize.(*Promise).run.func2()\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:180 +0x145\r\ncreated by golang.org/x/tools/internal/memoize.(*Promise).run\r\n        /home/seth/Code/pkg/mod/golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8/internal/memoize/memoize.go:179 +0x1ea\r\n```\r\n\r\n",shell\r\n$ gopls check <(cat <<'EOF'\r\npackage p\r\n\r\ntype S[T any] struct{}\r\n\r\nvar V = S[any]{}\r\n\r\nfunc (fs *S[T]) M([STR) {}\r\n\r\nfunc M() {\r\n\tV.M()\r\n}\r\nEOF\r\n)\r\n
57489,"cmd/compile: shouldn't report argument mismatch errors for using unexported functions<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ross-spencer/.cache/go-build""\r\nGOENV=""/home/ross-spencer/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ross-spencer/git/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ross-spencer/git/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3868854645=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAccidentally called `.join` (lower-case 'j') and expected an error, instead I am told I can supply a string array to the function.\r\n\r\n### What did you see instead?\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ross-spencer/.cache/go-build""\r\nGOENV=""/home/ross-spencer/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ross-spencer/git/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ross-spencer/git/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3868854645=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""path/filepath""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n\tarr := []string{""dir"", ""path""}\r\n\tfmt.Println(""arr"")\r\n\tfmt.Println(filepath.join(""a"", ""b""))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAccidentally called `.join` (lower-case 'j') and expected an error, instead I am told I can supply a string array to the function.\r\n\r\n### What did you see instead?\r\n\r\n```bash\r\n./test.go:12:2: arr declared but not used\r\n./test.go:14:23: join not exported by package filepath\r\n./test.go:14:33: too many arguments in call to filepath.join\r\n\thave (string, string)\r\n\twant ([]string)\r\n```\r\n","golang\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""path/filepath""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, \u4e16\u754c"")\r\n\tarr := []string{""dir"", ""path""}\r\n\tfmt.Println(""arr"")\r\n\tfmt.Println(filepath.join(""a"", ""b""))\r\n}\r\n"
57486,"cmd/compile: incorrect type set intersection computation<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, also for tip.\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBoth F1 and F2 fail to compile.\r\n\r\n### What did you see instead?\r\n\r\nF2 compiles okay.\r\n\r\nMy understanding is that the type set of C2 only contains `int`, because `[2]any` is not strictly comparable, though my understanding might be wrong.\r\n",NeedsFix|FrozenDueToAge|release-blocker|compiler/runtime,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, also for tip.\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\npackage main\r\n\r\nfunc main() {}\r\n\r\ntype C1 interface {\r\n\tcomparable\r\n}\r\n\r\ntype C2 interface {\r\n\tcomparable\r\n\t[2]any | int\r\n}\r\n\r\nfunc G1[T C1](t T) {}\r\nfunc G2[T C2](t T) {}\r\n\r\nfunc F1[V [2]any](v V) {\r\n\t_ = G1[V] // error: V does not implement comparable\r\n}\r\n\r\nfunc F2[V [2]any](v V) {\r\n\t_ = G2[V] // okay (but should not?)\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nBoth F1 and F2 fail to compile.\r\n\r\n### What did you see instead?\r\n\r\nF2 compiles okay.\r\n\r\nMy understanding is that the type set of C2 only contains `int`, because `[2]any` is not strictly comparable, though my understanding might be wrong.\r\n",Go\r\npackage main\r\n\r\nfunc main() {}\r\n\r\ntype C1 interface {\r\n\tcomparable\r\n}\r\n\r\ntype C2 interface {\r\n\tcomparable\r\n\t[2]any | int\r\n}\r\n\r\nfunc G1[T C1](t T) {}\r\nfunc G2[T C2](t T) {}\r\n\r\nfunc F1[V [2]any](v V) {\r\n\t_ = G1[V] // error: V does not implement comparable\r\n}\r\n\r\nfunc F2[V [2]any](v V) {\r\n\t_ = G2[V] // okay (but should not?)\r\n}\r\n
57459,"x/tools/gopls: ""addView called before server initialized""<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.4\r\n```\r\n\r\n### What did you do?\r\n\r\nHere is a simple ""virtual"" LSP client:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThis is (as far as I'm aware) a perfectly valid series of LSP requests. (By the time the `initialized` notification is sent,\r\nthe server has already sent the `initialize` response.)\r\n\r\nThere should be no problems for gopls here.\r\n\r\n### What did you see instead?\r\n\r\nAfter the 3rd message, gopls gives the client these notifications:\r\n```\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":4,""message"":""Loading packages...""}}\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":3,""message"":""Error loading packages: addView called before server initialized""}}\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":1,""message"":""Error loading workspace folders (expected 1, got 0)\\nfailed to load view for file:///tmp: addView called before server initialized\\n""}}\r\n```\r\n\r\nUsing `workspaceFolders` instead of `rootUri` gives the exact same result (in any case both must be handled by an LSP server).\r\nWaiting for more time after sending `initialized` does not resolve the issue.\r\n\r\nSending any more requests after this gives back the cryptic response:\r\n```\r\n{""jsonrpc"":""2.0"",""error"":{""code"":0,""message"":""no views in session""},""id"":...}\r\n```\r\nwith the non-existent error code 0.\r\n",NeedsFix|gopls|Tools|gopls/metadata,adonovan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### gopls version\r\n\r\n<!--\r\nOutput of `gopls -v version` on the command line\r\n-->\r\n```\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.11.0\r\n    golang.org/x/tools/gopls@v0.11.0 h1:/nvKHdTtePQmrv9XN3gIUN9MOdUrKzO/dcqgbG6x8EY=\r\n    github.com/BurntSushi/toml@v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\r\n    github.com/google/go-cmp@v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp@v0.0.0-20221031165847-c99f073a8326 h1:QfTh0HpN6hlw6D3vu8DAwC8pBIwikq0AI1evdm+FksE=\r\n    golang.org/x/exp/typeparams@v0.0.0-20221031165847-c99f073a8326 h1:fl8k2zg28yA23264d82M4dp+YlJ3ngDcpuB1bewkQi4=\r\n    golang.org/x/mod@v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=\r\n    golang.org/x/sync@v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\r\n    golang.org/x/sys@v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\r\n    golang.org/x/text@v0.4.0 h1:BrVqGRd7+k1DiOgtnFvAkoQEWQvBc25ouMJM6429SFg=\r\n    golang.org/x/tools@v0.3.1-0.20221213193459-ca17b2c27ca8 h1:7/HkGkN/2ktghBCSRRgp31wAww4syfsW52tj7yirjWk=\r\n    golang.org/x/vuln@v0.0.0-20221109205719-3af8368ee4fe h1:qptQiQwEpETwDiz85LKtChqif9xhVkAm8Nhxs0xnTww=\r\n    honnef.co/go/tools@v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=\r\n    mvdan.cc/gofumpt@v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19.4\r\n```\r\n\r\n### What did you do?\r\n\r\nHere is a simple ""virtual"" LSP client:\r\n```bash\r\n#!/bin/bash\r\nwrite_message() {\r\n\tprintf ""Content-Length: ${#1}\\r\\n\\r\\n$1""\r\n}\r\n\r\nf() {\r\n\twrite_message '{""jsonrpc"":""2.0"",""id"":0,""method"":""initialize"",\r\n\t               ""params"":{""processId"":'$$',""rootUri"":""file:///tmp""}}'\r\n\tsleep 2\r\n\twrite_message '{""jsonrpc"":""2.0"",""method"":""initialized""}'\r\n\tsleep 2\r\n\twrite_message '{""jsonrpc"":""2.0"",""method"":""textDocument/didOpen"",\r\n\t                ""params"":{""textDocument"":{""uri"":""file:///tmp/test.go"",\r\n\t                                          ""languageId"":""go"",""version"":0,""text"":""""}}}'\r\n\tsleep 30\r\n}\r\n\r\nf | gopls\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThis is (as far as I'm aware) a perfectly valid series of LSP requests. (By the time the `initialized` notification is sent,\r\nthe server has already sent the `initialize` response.)\r\n\r\nThere should be no problems for gopls here.\r\n\r\n### What did you see instead?\r\n\r\nAfter the 3rd message, gopls gives the client these notifications:\r\n```\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":4,""message"":""Loading packages...""}}\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":3,""message"":""Error loading packages: addView called before server initialized""}}\r\n{""jsonrpc"":""2.0"",""method"":""window/showMessage"",""params"":{""type"":1,""message"":""Error loading workspace folders (expected 1, got 0)\\nfailed to load view for file:///tmp: addView called before server initialized\\n""}}\r\n```\r\n\r\nUsing `workspaceFolders` instead of `rootUri` gives the exact same result (in any case both must be handled by an LSP server).\r\nWaiting for more time after sending `initialized` does not resolve the issue.\r\n\r\nSending any more requests after this gives back the cryptic response:\r\n```\r\n{""jsonrpc"":""2.0"",""error"":{""code"":0,""message"":""no views in session""},""id"":...}\r\n```\r\nwith the non-existent error code 0.\r\n","bash\r\n#!/bin/bash\r\nwrite_message() {\r\n\tprintf ""Content-Length: ${#1}\\r\\n\\r\\n$1""\r\n}\r\n\r\nf() {\r\n\twrite_message '{""jsonrpc"":""2.0"",""id"":0,""method"":""initialize"",\r\n\t               ""params"":{""processId"":'$$',""rootUri"":""file:///tmp""}}'\r\n\tsleep 2\r\n\twrite_message '{""jsonrpc"":""2.0"",""method"":""initialized""}'\r\n\tsleep 2\r\n\twrite_message '{""jsonrpc"":""2.0"",""method"":""textDocument/didOpen"",\r\n\t                ""params"":{""textDocument"":{""uri"":""file:///tmp/test.go"",\r\n\t                                          ""languageId"":""go"",""version"":0,""text"":""""}}}'\r\n\tsleep 30\r\n}\r\n\r\nf | gopls\r\n"
57404,"runtime: WinDbg fails to unwind the Go stack<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\qmuntaldiaz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\qmuntaldiaz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\qmuntaldiaz\\go\\pkg\\mod\r\nset GONOPROXY=github.com/microsoft/*\r\nset GONOSUMDB=github.com/microsoft/*\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\qmuntaldiaz\\go\r\nset GOPRIVATE=github.com/microsoft/*\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\qmuntaldiaz\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Users\\qmuntaldiaz\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.20-62de58c567 Fri Dec 16 08:50:12 2022 +0100\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\qmuntaldiaz\\code\\golang-go\\src\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\QMUNTA~1\\AppData\\Local\\Temp\\go-build4030085144=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nDebug a Go binary using WinDbg, break at the first instruction of `main()` and advance step by step.\r\n\r\nSynthetic sample:\r\n\r\n \r\n\r\n### What did you expect to see?\r\n\r\nWinDbg is capable of unwind the stack at any PC. \r\n\r\n### What did you see instead?\r\n\r\nThe call stack contains is more or less in good shape at the first instruction of `main` prologue:\r\n\r\nLegend:\r\n- 0x5c7e0: address on `main()`\r\n- 0x31a17: address on `runtime.main()`\r\n- 0x5c82a: address on `a()`\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648902-ff6e911a-599a-4159-80b4-f238639b7fd9.png)\r\n\r\nThe call stack contain garbage data after the first instruction that grows the stack pointer inside `main()` prologue.\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648610-a58d8115-cf7d-4ddc-ad64-c88801614691.png)\r\n\r\nThe call stack is lost after the first instruction that grows the stack pointer inside `a()` prologue:\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648475-3e6df392-35dc-4ba4-b208-0787d5b55241.png)",OS-Windows|Debugging|compiler/runtime,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\qmuntaldiaz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\qmuntaldiaz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\qmuntaldiaz\\go\\pkg\\mod\r\nset GONOPROXY=github.com/microsoft/*\r\nset GONOSUMDB=github.com/microsoft/*\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\qmuntaldiaz\\go\r\nset GOPRIVATE=github.com/microsoft/*\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Users\\qmuntaldiaz\\code\\golang-go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Users\\qmuntaldiaz\\code\\golang-go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=devel go1.20-62de58c567 Fri Dec 16 08:50:12 2022 +0100\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\qmuntaldiaz\\code\\golang-go\\src\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-O2 -g\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-O2 -g\r\nset CGO_FFLAGS=-O2 -g\r\nset CGO_LDFLAGS=-O2 -g\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\QMUNTA~1\\AppData\\Local\\Temp\\go-build4030085144=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nDebug a Go binary using WinDbg, break at the first instruction of `main()` and advance step by step.\r\n\r\nSynthetic sample:\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n  a()\r\n}\r\n\r\n//go:noinline\r\nfunc a() int {\r\n  return b(0)\r\n}\r\n\r\n//go:noinline\r\nfunc b(i int) int {\r\n  i++\r\n  return i\r\n}\r\n\r\n``` \r\n\r\n### What did you expect to see?\r\n\r\nWinDbg is capable of unwind the stack at any PC. \r\n\r\n### What did you see instead?\r\n\r\nThe call stack contains is more or less in good shape at the first instruction of `main` prologue:\r\n\r\nLegend:\r\n- 0x5c7e0: address on `main()`\r\n- 0x31a17: address on `runtime.main()`\r\n- 0x5c82a: address on `a()`\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648902-ff6e911a-599a-4159-80b4-f238639b7fd9.png)\r\n\r\nThe call stack contain garbage data after the first instruction that grows the stack pointer inside `main()` prologue.\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648610-a58d8115-cf7d-4ddc-ad64-c88801614691.png)\r\n\r\nThe call stack is lost after the first instruction that grows the stack pointer inside `a()` prologue:\r\n\r\n![image](https://user-images.githubusercontent.com/3747816/208648475-3e6df392-35dc-4ba4-b208-0787d5b55241.png)",go\r\npackage main\r\n\r\nfunc main() {\r\n  a()\r\n}\r\n\r\n//go:noinline\r\nfunc a() int {\r\n  return b(0)\r\n}\r\n\r\n//go:noinline\r\nfunc b(i int) int {\r\n  i++\r\n  return i\r\n}\r\n\r\n
57352,"cmd/compile: ""missing method"" diagnostic can be confusing when methods aren't promoted due to ambiguity### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nplayground\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nhttps://go.dev/play/p/_SQyOJ_n2qv\r\n\r\n\r\n### What did you expect to see?\r\n\r\nEither no error or an error saying that Foo has 2 a methods.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n./prog.go:18:13: cannot use Foo{} (value of type Foo) as type AB in variable declaration:\r\n\tFoo does not implement AB (missing a method)\r\n```\r\n\r\nI didn't find this case in spec, but the message seems wrong.",NeedsFix|FrozenDueToAge|compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nplayground\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\ntype A interface {\r\n\ta()\r\n}\r\n\r\ntype AB interface {\r\n\tA\r\n\tb()\r\n}\r\n\r\ntype Foo struct {\r\n\tA\r\n\tAB\r\n}\r\n\r\nfunc main() {\r\n\tvar _ AB = Foo{}\r\n}\r\n```\r\n\r\nhttps://go.dev/play/p/_SQyOJ_n2qv\r\n\r\n\r\n### What did you expect to see?\r\n\r\nEither no error or an error saying that Foo has 2 a methods.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n./prog.go:18:13: cannot use Foo{} (value of type Foo) as type AB in variable declaration:\r\n\tFoo does not implement AB (missing a method)\r\n```\r\n\r\nI didn't find this case in spec, but the message seems wrong.",go\r\npackage main\r\n\r\ntype A interface {\r\n\ta()\r\n}\r\n\r\ntype AB interface {\r\n\tA\r\n\tb()\r\n}\r\n\r\ntype Foo struct {\r\n\tA\r\n\tAB\r\n}\r\n\r\nfunc main() {\r\n\tvar _ AB = Foo{}\r\n}\r\n
57309,"cmd/compile: internal compiler error: OCALLMETH missed by typecheck<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\dcuthbertson\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\dcuthbertson\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\dcuthbertson\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\dcuthbertson\\go\r\nset GOPRIVATE=\r\nset GOROOT=C:\\local\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\local\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.19.4\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\dcuthbertson\\repos\\boom\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\DCUTHB~1\\AppData\\Local\\Temp\\go-build1037280389=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI ran `go test -v` on the following code in `pruner_test.go`:\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n=== RUN   TestPruner_Prune\r\n=== RUN   TestPruner_Prune/a_simple_test\r\n--- PASS: TestPruner_Prune (0.00s)\r\n    --- PASS: TestPruner_Prune/a_simple_test (0.00s)\r\nPASS\r\nok      example.com/boom        0.310s\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# example.com/boom [example.com/boom.test]\r\n.\\pruner_test.go:19:17: internal compiler error: OCALLMETH missed by typecheck\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL    example.com/boom [build failed]\r\n```\r\n\r\nThis compiler error can be avoided by uncommenting the two lines of commented-out code indicated in the source above. regardless, I believe the compiler shouldn't fail in either case.\r\n",NeedsFix|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\dcuthbertson\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\dcuthbertson\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\dcuthbertson\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\dcuthbertson\\go\r\nset GOPRIVATE=\r\nset GOROOT=C:\\local\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\local\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.19.4\r\nset GCCGO=gccgo\r\nset GOAMD64=v1\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\dcuthbertson\\repos\\boom\\go.mod\r\nset GOWORK=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\DCUTHB~1\\AppData\\Local\\Temp\\go-build1037280389=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI ran `go test -v` on the following code in `pruner_test.go`:\r\n\r\n```go\r\npackage prune\r\n\r\nimport (\r\n\t""os""\r\n\t""testing""\r\n\r\n\t""github.com/spf13/afero""\r\n)\r\n\r\nfunc TestPruner_Prune(t *testing.T) {\r\n\ttestIO := []struct {\r\n\t\tname string\r\n\t\tfs   afero.Fs\r\n\t}{\r\n\t\t{\r\n\t\t\tname: ""a simple test"",\r\n\t\t\tfs: func() afero.Fs {\r\n\t\t\t\tfs := afero.NewMemMapFs()\r\n\t\t\t\t_ = fs.Mkdir(""/proc/2"", os.ModeDir)\r\n\t\t\t\t// Uncomment the next two lines prevent a compiler error\r\n\t\t\t\t//_ = afero.WriteFile(fs, ""/proc/2/stat"", []byte(""2 (tail) S 1 SKIP 12""), 0777)\r\n\t\t\t\t//_ = fs.Remove(""/proc/2/stat"")\r\n\r\n\t\t\t\treturn fs\r\n\t\t\t}(),\r\n\t\t},\r\n\t}\r\n\r\n\tfor _, test := range testIO {\r\n\t\tt.Run(test.name, func(t *testing.T) {\r\n\t\t})\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n=== RUN   TestPruner_Prune\r\n=== RUN   TestPruner_Prune/a_simple_test\r\n--- PASS: TestPruner_Prune (0.00s)\r\n    --- PASS: TestPruner_Prune/a_simple_test (0.00s)\r\nPASS\r\nok      example.com/boom        0.310s\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# example.com/boom [example.com/boom.test]\r\n.\\pruner_test.go:19:17: internal compiler error: OCALLMETH missed by typecheck\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL    example.com/boom [build failed]\r\n```\r\n\r\nThis compiler error can be avoided by uncommenting the two lines of commented-out code indicated in the source above. regardless, I believe the compiler shouldn't fail in either case.\r\n","go\r\npackage prune\r\n\r\nimport (\r\n\t""os""\r\n\t""testing""\r\n\r\n\t""github.com/spf13/afero""\r\n)\r\n\r\nfunc TestPruner_Prune(t *testing.T) {\r\n\ttestIO := []struct {\r\n\t\tname string\r\n\t\tfs   afero.Fs\r\n\t}{\r\n\t\t{\r\n\t\t\tname: ""a simple test"",\r\n\t\t\tfs: func() afero.Fs {\r\n\t\t\t\tfs := afero.NewMemMapFs()\r\n\t\t\t\t_ = fs.Mkdir(""/proc/2"", os.ModeDir)\r\n\t\t\t\t// Uncomment the next two lines prevent a compiler error\r\n\t\t\t\t//_ = afero.WriteFile(fs, ""/proc/2/stat"", []byte(""2 (tail) S 1 SKIP 12""), 0777)\r\n\t\t\t\t//_ = fs.Remove(""/proc/2/stat"")\r\n\r\n\t\t\t\treturn fs\r\n\t\t\t}(),\r\n\t\t},\r\n\t}\r\n\r\n\tfor _, test := range testIO {\r\n\t\tt.Run(test.name, func(t *testing.T) {\r\n\t\t})\r\n\t}\r\n}\r\n"
57300,"x/tools/gopls: support markdown in completion items### What version of Go, VS Code & VS Code Go extension are you using?\r\n\r\n* Go 1.19.4\r\n* VSCode 1.74.0\r\n* Go extension 0.36.0\r\n\r\n### Describe the bug\r\n\r\nGo 1.19 introduced a lot of new additions to [doc comments](https://tip.golang.org/doc/go1.19#go-doc), in particular, a syntax to add hyperlinks to the text. The hyperlinks render correctly when hovering the entity with the cursor, but not in autocomplete.\r\n\r\n\r\n\r\n### Screenshots or recordings\r\n\r\nThe VSCode extension correctly renders the hyperlinks when hovering the function declaration:\r\n\r\n![1 hover func](https://user-images.githubusercontent.com/1283868/206884983-b2b1a2ea-b34c-49f8-827f-ef7ae4aad9d1.png)\r\n\r\nAnd it also correctly renders the hyperlinks when hovering the function calls:\r\n\r\n![2 hover func](https://user-images.githubusercontent.com/1283868/206884995-039800f0-75f8-4a87-9daa-09232713a42e.png)\r\n\r\nHowever, in autocompletion, the new hyperlink syntax disappears, and we read instead the raw syntax formatting:\r\n\r\n![3 autocomp](https://user-images.githubusercontent.com/1283868/206885020-f3d1b7ca-b221-4afc-a028-2ab3aae1e43e.png)\r\n\r\nThe autocomplete box should also render the hyperlinks.",FeatureRequest|FrozenDueToAge|gopls|Tools|gopls/completion,pjweinb,"### What version of Go, VS Code & VS Code Go extension are you using?\r\n\r\n* Go 1.19.4\r\n* VSCode 1.74.0\r\n* Go extension 0.36.0\r\n\r\n### Describe the bug\r\n\r\nGo 1.19 introduced a lot of new additions to [doc comments](https://tip.golang.org/doc/go1.19#go-doc), in particular, a syntax to add hyperlinks to the text. The hyperlinks render correctly when hovering the entity with the cursor, but not in autocomplete.\r\n\r\n```go\r\npackage foo\r\n\r\n// Just says [hello].\r\n//\r\n// [hello]: https://en.wikipedia.org/wiki/Hello\r\nfunc Hello() string {\r\n    return ""hello""\r\n}\r\n```\r\n\r\n### Screenshots or recordings\r\n\r\nThe VSCode extension correctly renders the hyperlinks when hovering the function declaration:\r\n\r\n![1 hover func](https://user-images.githubusercontent.com/1283868/206884983-b2b1a2ea-b34c-49f8-827f-ef7ae4aad9d1.png)\r\n\r\nAnd it also correctly renders the hyperlinks when hovering the function calls:\r\n\r\n![2 hover func](https://user-images.githubusercontent.com/1283868/206884995-039800f0-75f8-4a87-9daa-09232713a42e.png)\r\n\r\nHowever, in autocompletion, the new hyperlink syntax disappears, and we read instead the raw syntax formatting:\r\n\r\n![3 autocomp](https://user-images.githubusercontent.com/1283868/206885020-f3d1b7ca-b221-4afc-a028-2ab3aae1e43e.png)\r\n\r\nThe autocomplete box should also render the hyperlinks.","go\r\npackage foo\r\n\r\n// Just says [hello].\r\n//\r\n// [hello]: https://en.wikipedia.org/wiki/Hello\r\nfunc Hello() string {\r\n    return ""hello""\r\n}\r\n"
57174,"x/vuln: govulncheck panic: interface conversion: types.Type is *types.Interface, not *types.Array<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sixcolors/Library/Caches/go-build""\r\nGOENV=""/Users/sixcolors/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sixcolors/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sixcolors/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.19.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.19.3/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/sixcolors/maintainer/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/jl/xzdcwhj92pdfdqnp_z8cmbc40000gn/T/go-build2239372547=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nworking scan\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\nType error panic.",FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sixcolors/Library/Caches/go-build""\r\nGOENV=""/Users/sixcolors/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sixcolors/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sixcolors/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.19.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.19.3/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/sixcolors/maintainer/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/jl/xzdcwhj92pdfdqnp_z8cmbc40000gn/T/go-build2239372547=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```bash\r\n~/maintainer (main) \xbb govulncheck ./...         sixcolors@Jason-McNeils-Mac-Pro\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0x1554540, 0xc06db65790})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/utils.go:126 +0x1bd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc096eff790?, 0xc06db6c660)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:481 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc096eff678?, {0x1557d58?, 0xc06db6c660?})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:355 +0x165\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:299\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc096eff790, 0x280?)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:291 +0x1e5\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:265\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc096effb70?, 0xc0873d7560)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/vulncheck.callGraph(0xc03c0f9200, {0xc0873e0000, 0x165, 0x80?})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/vulncheck/utils.go:70 +0x2b9\r\ngolang.org/x/vuln/vulncheck.Source({0x15564d0, 0xc0001ae008}, {0xc029b26800?, 0x14, 0x20}, 0xc03c89bd78)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/vulncheck/source.go:80 +0x4cd\r\ngolang.org/x/vuln/internal/govulncheck.Source({0x15564d0?, 0xc0001ae008?}, 0xc000217eb0?, {0xc029b26800, 0x14, 0x20})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/internal/govulncheck/run.go:31 +0x94\r\nmain.doGovulncheck({0xc0001b4010?, 0x1, 0x1}, 0x1)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/cmd/govulncheck/main.go:114 +0x35b\r\nmain.main()\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/cmd/govulncheck/main.go:69 +0x127\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nworking scan\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\nType error panic.","bash\r\n~/maintainer (main) \xbb govulncheck ./...         sixcolors@Jason-McNeils-Mac-Pro\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\npanic: interface conversion: types.Type is *types.Interface, not *types.Array\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/callgraph/vta.sliceArrayElem({0x1554540, 0xc06db65790})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/utils.go:126 +0x1bd\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).indexAddr(0xc096eff790?, 0xc06db6c660)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:481 +0x38\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).instr(0xc096eff678?, {0x1557d58?, 0xc06db6c660?})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:355 +0x165\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).fun(...)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:299\r\ngolang.org/x/tools/go/callgraph/vta.(*builder).visit(0xc096eff790, 0x280?)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:291 +0x1e5\r\ngolang.org/x/tools/go/callgraph/vta.typePropGraph(...)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/graph.go:265\r\ngolang.org/x/tools/go/callgraph/vta.CallGraph(0xc096effb70?, 0xc0873d7560)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/tools@v0.4.0/go/callgraph/vta/vta.go:75 +0xe5\r\ngolang.org/x/vuln/vulncheck.callGraph(0xc03c0f9200, {0xc0873e0000, 0x165, 0x80?})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/vulncheck/utils.go:70 +0x2b9\r\ngolang.org/x/vuln/vulncheck.Source({0x15564d0, 0xc0001ae008}, {0xc029b26800?, 0x14, 0x20}, 0xc03c89bd78)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/vulncheck/source.go:80 +0x4cd\r\ngolang.org/x/vuln/internal/govulncheck.Source({0x15564d0?, 0xc0001ae008?}, 0xc000217eb0?, {0xc029b26800, 0x14, 0x20})\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/internal/govulncheck/run.go:31 +0x94\r\nmain.doGovulncheck({0xc0001b4010?, 0x1, 0x1}, 0x1)\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/cmd/govulncheck/main.go:114 +0x35b\r\nmain.main()\r\n\t/Users/sixcolors/go/pkg/mod/golang.org/x/vuln@v0.0.0-20221208170415-d970d6cd0f6e/cmd/govulncheck/main.go:69 +0x127\r\n"
57173,"cmd/vet: analyze 'loopclosure' func literals that preceed some well-understood statements### What version of Go are you using (`go version`)?\r\n\r\ntip.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes.\r\n\r\n### What did you do?\r\n\r\nRun the 'loopclosure' analyzer via `go vet` on code that has go or defer statements with a function literal that captures a loop iteration variable, but has trailing statements after the go or defer statement, such as this example from #21412:\r\n\r\n\r\n\r\n### What did you see?\r\n\r\nNo vet message.\r\n\r\n### What would you like to see instead?\r\n\r\nvet reporting:\r\n\r\n```\r\nloop variable request captured by func literal\r\n```\r\n\r\n### Recent background\r\n\r\nhttps://go.dev/cl/452155 recently added the ability to handle additional moderate complexity leading up to loop variables being captured by a function literal in a go or defer statement, as well as certain errgroup.Group.Go calls.\r\n\r\nWhile working on that CL, I also did a quick prototype of handling moderate complexity after the go or defer statement, where a limited number of well-understood trailing statements and expressions could be handled (recursively). Also, during the review of that CL, @timothy-king also asked if the definition of ""last"" could be modified to handle a trailing `i++` for example.\r\n\r\n### Handling well-understood trailing statements\r\n\r\nI have a new WIP CL https://go.dev/cl/455195, which modifies the 'loopclosure' analyzer to handle examples like the one above.\r\n\r\nThe basic approach is there are now a number of well-understood statements (and expressions within statements) that the analyzer now allows to trail a to-be-analyzed go or defer statement, but only if the analyzer believes those trailing statements cannot derail the loop variable from being modified when returning to the top of the loop. \r\n\r\nBecause statements trailing a go or defer statement are examined recursively, this loop capture is also now properly flagged:\r\n\r\n\r\n   \r\nThe analyzer gives up on statements and expressions that it does not understand, which hopefully makes the approach tractable while maintaining no false positives.\r\n\r\nFor example, the analyzer properly gives up on the following, which is also an example of why we do not report captured loop variables with a go statement trailed by something that waits, might wait, or we can't prove won't wait. (Example adapted from https://github.com/golang/go/issues/21412#issuecomment-322208030).\r\n\r\n\r\n\r\nIn that example, the func literal always completes execution prior to the loop variable changing. The analyzer does not have any explicit knowledge of WaitGroups in order to disallow them. Instead, it gives up when it sees the wg.Wait call, which is not something it understands.\r\n\r\n### Panics\r\n\r\nFor now, it does not allow trailing panics. \r\n\r\nIt is reasonable to debate whether or not it should flag:\r\n\r\n\r\n\r\nor:\r\n\r\n\r\n\r\nRight now, the analyzer purposefully will not flag either of those because of the explicit panic and the possible panic.\r\n\r\nMainly in the interests of incremental progress with a more conservative approach to start, my vote would be to defer to a later issue the question of whether it should or should not allow any trailing explicit panics or possible panics (and if so, in which circumstances), though of course open to discussing now if people prefer.\r\n\r\nCC @adonovan, @findleyr, @timothy-king",NeedsInvestigation|Analysis,thepudds,"### What version of Go are you using (`go version`)?\r\n\r\ntip.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes.\r\n\r\n### What did you do?\r\n\r\nRun the 'loopclosure' analyzer via `go vet` on code that has go or defer statements with a function literal that captures a loop iteration variable, but has trailing statements after the go or defer statement, such as this example from #21412:\r\n\r\n```go\r\nfunc handleBatch(ctx context.Context, batch *Batch) error {\r\n    var chans []chan error\r\n    for _, request := range batch.Requests {\r\n        c := make(chan error)\r\n        go func(c chan error) {\r\n            c <- handle(ctx, request) // wrong: request is captured loop iteration variable\r\n        }(c)\r\n        chans = append(chans, c)\r\n    }\r\n    // ... read chans ...\r\n}\r\n```\r\n\r\n### What did you see?\r\n\r\nNo vet message.\r\n\r\n### What would you like to see instead?\r\n\r\nvet reporting:\r\n\r\n```\r\nloop variable request captured by func literal\r\n```\r\n\r\n### Recent background\r\n\r\nhttps://go.dev/cl/452155 recently added the ability to handle additional moderate complexity leading up to loop variables being captured by a function literal in a go or defer statement, as well as certain errgroup.Group.Go calls.\r\n\r\nWhile working on that CL, I also did a quick prototype of handling moderate complexity after the go or defer statement, where a limited number of well-understood trailing statements and expressions could be handled (recursively). Also, during the review of that CL, @timothy-king also asked if the definition of ""last"" could be modified to handle a trailing `i++` for example.\r\n\r\n### Handling well-understood trailing statements\r\n\r\nI have a new WIP CL https://go.dev/cl/455195, which modifies the 'loopclosure' analyzer to handle examples like the one above.\r\n\r\nThe basic approach is there are now a number of well-understood statements (and expressions within statements) that the analyzer now allows to trail a to-be-analyzed go or defer statement, but only if the analyzer believes those trailing statements cannot derail the loop variable from being modified when returning to the top of the loop. \r\n\r\nBecause statements trailing a go or defer statement are examined recursively, this loop capture is also now properly flagged:\r\n\r\n```go\r\n\tvar processMore []string\r\n\tfor _, s := range []string{""one"", ""two"", ""three""} {\r\n\t\tgo func() { process(s) }() // wrong: s is a captured loop variable\r\n\t\tswitch s {\r\n\t\tcase ""two"":\r\n\t\t\tcontinue\r\n\t\tdefault:\r\n\t\t\tprocessMore = append(processMore, s)\r\n\t\t}\r\n\t}\r\n```\r\n   \r\nThe analyzer gives up on statements and expressions that it does not understand, which hopefully makes the approach tractable while maintaining no false positives.\r\n\r\nFor example, the analyzer properly gives up on the following, which is also an example of why we do not report captured loop variables with a go statement trailed by something that waits, might wait, or we can't prove won't wait. (Example adapted from https://github.com/golang/go/issues/21412#issuecomment-322208030).\r\n\r\n```go\r\n\tfor i := range ""loop"" {\r\n\t\twg := &sync.WaitGroup{}\r\n\t\twg.Add(1)\r\n\t\tgo func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\tprint(i) // use of i is correctly not flagged\r\n\t\t}()\r\n\t\twg.Wait()\r\n\t}\r\n```\r\n\r\nIn that example, the func literal always completes execution prior to the loop variable changing. The analyzer does not have any explicit knowledge of WaitGroups in order to disallow them. Instead, it gives up when it sees the wg.Wait call, which is not something it understands.\r\n\r\n### Panics\r\n\r\nFor now, it does not allow trailing panics. \r\n\r\nIt is reasonable to debate whether or not it should flag:\r\n\r\n```go\r\n\tfor i := range ""loop"" {\r\n\t\tgo func() { print(i) }()\r\n\t\tpanic(""this panic means the loop variable will never change"")\r\n\t}\r\n```\r\n\r\nor:\r\n\r\n```go\r\nfunc _(q int) {\r\n\tfor i := range ""loop"" {\r\n\t\tgo func() { print(i) }()\r\n\t\t_ = i / q // possible panic means loop var might never change\r\n\t}\r\n}\r\n```\r\n\r\nRight now, the analyzer purposefully will not flag either of those because of the explicit panic and the possible panic.\r\n\r\nMainly in the interests of incremental progress with a more conservative approach to start, my vote would be to defer to a later issue the question of whether it should or should not allow any trailing explicit panics or possible panics (and if so, in which circumstances), though of course open to discussing now if people prefer.\r\n\r\nCC @adonovan, @findleyr, @timothy-king","go\r\nfunc handleBatch(ctx context.Context, batch *Batch) error {\r\n    var chans []chan error\r\n    for _, request := range batch.Requests {\r\n        c := make(chan error)\r\n        go func(c chan error) {\r\n            c <- handle(ctx, request) // wrong: request is captured loop iteration variable\r\n        }(c)\r\n        chans = append(chans, c)\r\n    }\r\n    // ... read chans ...\r\n}\r\n"
57117,"cmd/dist: remove arch-specific timeout scale heuristics; handle these in x/build as neededDiscussion in #56968 seems to suggest we have agreement to get cmd/dist out of the practice of maintaining a hardcoded timeout scale for a few architectures. Instead, dist users can set it for their own machine (if at all needed) and we can factor out this configuration into x/build/dashboard for builders.\r\n\r\nThat is, we should remove these lines from cmd/dist:\r\n\r\n\r\n\r\nAnd adjust x/build as needed to avoid breaking any builders that might rely on that.\r\n\r\nBreaking this off into this issue for tracking purposes.\r\n\r\nCC @aclements, @bcmills.",NeedsFix|FrozenDueToAge,dmitshur,"Discussion in #56968 seems to suggest we have agreement to get cmd/dist out of the practice of maintaining a hardcoded timeout scale for a few architectures. Instead, dist users can set it for their own machine (if at all needed) and we can factor out this configuration into x/build/dashboard for builders.\r\n\r\nThat is, we should remove these lines from cmd/dist:\r\n\r\n```Go\r\nswitch goarch {\r\ncase ""arm"":\r\n\tt.timeoutScale = 2\r\ncase ""mips"", ""mipsle"", ""mips64"", ""mips64le"":\r\n\tt.timeoutScale = 4\r\n}\r\n```\r\n\r\nAnd adjust x/build as needed to avoid breaking any builders that might rely on that.\r\n\r\nBreaking this off into this issue for tracking purposes.\r\n\r\nCC @aclements, @bcmills.","Go\r\nswitch goarch {\r\ncase ""arm"":\r\n\tt.timeoutScale = 2\r\ncase ""mips"", ""mipsle"", ""mips64"", ""mips64le"":\r\n\tt.timeoutScale = 4\r\n}\r\n"
57103,"runtime/cgo: immediately handoff P before returning to C host program<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/yongjie.yyj/.cache/go-build""\r\nGOENV=""/home/yongjie.yyj/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/yongjie.yyj/gopath/pkg/mod""\r\nGONOPROXY=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGONOSUMDB=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGOOS=""linux""\r\nGOPATH=""/home/yongjie.yyj/gopath""\r\nGOPRIVATE=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGOPROXY=""https://goproxy.cn""\r\nGOROOT=""/home/yongjie.yyj/go1.19.3""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/yongjie.yyj/go1.19.3/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1750707572=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nRecently we're building our go program as dynamic linking lib(.so) and run it on a C-embedded program using cgo, and we found that there is still room for optimization.\r\n\r\nAs shown in the following demo, under the condition of limited P's resource, there's some delay between the cgo returns and the background goroutine being scheduled.\r\n\r\n\r\n\r\n\r\n\r\nrun\r\n```\r\n> go build -buildmode=c-shared -o libfoo.so foo.go     // build go as dynamic link lib\r\n\r\n> gcc main.cc -lfoo -L./ -lpthread -o main -g        // build C host program\r\n\r\n> GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main         // run demo under limited P's resource\r\n```\r\n\r\nThe above demo indicates that there's some schedule delay between the cgo returns and the background goroutine being scheduled. After going through runtime code, we found that when the cgo returns, `reentersyscall` changes P's status to `_Psyscall` and left it waiting until sysmon retake, which leading to sub-optimized performance.\r\n\r\nIf we try to handoff p immediately after cgo returns, as shown in the related pr, we can observe much better cgo performance.\r\n```\r\n$ GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main-before\r\n14214 ns\r\n\r\n$ GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main-after\r\n7163 ns\r\n```\r\n\r\nTherefore, this issue and the related pr request changes that the runtime could handoff p immediately before cgo returns to the C host program for better performance. However, how to determine whether it's returning to C host program or it's just a normal syscall (should not handoff p) is still a question. A possible way is to add compiler directive such as `//go:handoffp` on the exported go function? \r\n\r\n### What did you expect to see?\r\nthe background goroutine should be scheduled as soon as possible\r\n\r\n\r\n### What did you see instead?\r\nthere is some delay between cgo return and the background goroutine being scheduled, leading to sub-optimized performance.\r\n\r\n",NeedsFix|compiler/runtime,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/yongjie.yyj/.cache/go-build""\r\nGOENV=""/home/yongjie.yyj/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/yongjie.yyj/gopath/pkg/mod""\r\nGONOPROXY=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGONOSUMDB=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGOOS=""linux""\r\nGOPATH=""/home/yongjie.yyj/gopath""\r\nGOPRIVATE=""*.alipay-inc.com,*.alibaba-inc.com,*.alipay.com""\r\nGOPROXY=""https://goproxy.cn""\r\nGOROOT=""/home/yongjie.yyj/go1.19.3""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/yongjie.yyj/go1.19.3/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1750707572=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nRecently we're building our go program as dynamic linking lib(.so) and run it on a C-embedded program using cgo, and we found that there is still room for optimization.\r\n\r\nAs shown in the following demo, under the condition of limited P's resource, there's some delay between the cgo returns and the background goroutine being scheduled.\r\n\r\n```go\r\n// foo.go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""sync/atomic""\r\n\t""time""\r\n)\r\n\r\nvar ch = make(chan int64, 1)\r\nvar t, n int64\r\n\r\nfunc init() {\r\n\tgo func() { // background goroutine\r\n\t\tfor {\r\n\t\t\tstart := <-ch\r\n\t\t\tnow := time.Now().UnixNano()\r\n\t\t\tatomic.AddInt64(&t, now-start) // from cgo returns to background goroutine being scheduled\r\n\t\t\tatomic.AddInt64(&n, 1)\r\n\t\t}\r\n\t}()\r\n}\r\n\r\n//export foo\r\nfunc foo() {\r\n\tch <- time.Now().UnixNano() \r\n        // cgo returns\r\n}\r\n\r\n//export report\r\nfunc report() {\r\n\tfmt.Println(atomic.LoadInt64(&t) / atomic.LoadInt64(&n), ""ns"")\r\n}\r\n\r\nfunc main() {}\r\n\r\n```\r\n\r\n```c\r\n// main.cc\r\n#include <unistd.h>\r\n\r\n#include ""libfoo.h""\r\n\r\nint main() {\r\n\tfor(int i = 0; i < 10000; i++) {\r\n\t\tusleep(1000); // do somethings...\r\n                foo();   // cgo call\r\n\t}\r\n\tsleep(1);\r\n\treport();\r\n}\r\n```\r\n\r\nrun\r\n```\r\n> go build -buildmode=c-shared -o libfoo.so foo.go     // build go as dynamic link lib\r\n\r\n> gcc main.cc -lfoo -L./ -lpthread -o main -g        // build C host program\r\n\r\n> GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main         // run demo under limited P's resource\r\n```\r\n\r\nThe above demo indicates that there's some schedule delay between the cgo returns and the background goroutine being scheduled. After going through runtime code, we found that when the cgo returns, `reentersyscall` changes P's status to `_Psyscall` and left it waiting until sysmon retake, which leading to sub-optimized performance.\r\n\r\nIf we try to handoff p immediately after cgo returns, as shown in the related pr, we can observe much better cgo performance.\r\n```\r\n$ GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main-before\r\n14214 ns\r\n\r\n$ GOMAXPROCS=1 LD_LIBRARY_PATH=./ ./main-after\r\n7163 ns\r\n```\r\n\r\nTherefore, this issue and the related pr request changes that the runtime could handoff p immediately before cgo returns to the C host program for better performance. However, how to determine whether it's returning to C host program or it's just a normal syscall (should not handoff p) is still a question. A possible way is to add compiler directive such as `//go:handoffp` on the exported go function? \r\n\r\n### What did you expect to see?\r\nthe background goroutine should be scheduled as soon as possible\r\n\r\n\r\n### What did you see instead?\r\nthere is some delay between cgo return and the background goroutine being scheduled, leading to sub-optimized performance.\r\n\r\n","go\r\n// foo.go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""sync/atomic""\r\n\t""time""\r\n)\r\n\r\nvar ch = make(chan int64, 1)\r\nvar t, n int64\r\n\r\nfunc init() {\r\n\tgo func() { // background goroutine\r\n\t\tfor {\r\n\t\t\tstart := <-ch\r\n\t\t\tnow := time.Now().UnixNano()\r\n\t\t\tatomic.AddInt64(&t, now-start) // from cgo returns to background goroutine being scheduled\r\n\t\t\tatomic.AddInt64(&n, 1)\r\n\t\t}\r\n\t}()\r\n}\r\n\r\n//export foo\r\nfunc foo() {\r\n\tch <- time.Now().UnixNano() \r\n        // cgo returns\r\n}\r\n\r\n//export report\r\nfunc report() {\r\n\tfmt.Println(atomic.LoadInt64(&t) / atomic.LoadInt64(&n), ""ns"")\r\n}\r\n\r\nfunc main() {}\r\n\r\n"
57096,cmd/compile: bad error message for failing constraint type inference\r\nThe error should be: `int does not match []E`.\r\n,NeedsFix|FrozenDueToAge|compiler/runtime,griesemer,"```Go\r\npackage p\r\n\r\nfunc f[S []E, E any]() {}\r\n\r\nvar _ = f[int] // ERROR S does not match []E\r\n```\r\nThe error should be: `int does not match []E`.\r\n","Go\r\npackage p\r\n\r\nfunc f[S []E, E any]() {}\r\n\r\nvar _ = f[int] // ERROR S does not match []E\r\n"
57077,"cmd/compile: Prove doesn't understand division of slice length<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/magnus/.cache/go-build""\r\nGOENV=""/home/magnus/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/magnus/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/magnus/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/magnus/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1748103025=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI took the length of an object, to split it into halves, and there were IsSliceInBounds checks\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe IsSliceInBounds checks eliminatied\r\n\r\n### What did you see instead?\r\n\r\nThey were not eliminated\r\n\r\n### Short program showing issue\r\n\r\n\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n#### command-line-arguments\r\n./main.go:5:10: Found IsSliceInBounds\r\n./main.go:6:11: Found IsSliceInBounds\r\n\r\n",FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/magnus/.cache/go-build""\r\nGOENV=""/home/magnus/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/magnus/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/magnus/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/magnus/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1748103025=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI took the length of an object, to split it into halves, and there were IsSliceInBounds checks\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe IsSliceInBounds checks eliminatied\r\n\r\n### What did you see instead?\r\n\r\nThey were not eliminated\r\n\r\n### Short program showing issue\r\n\r\n```golang\r\npackage main\r\n\r\nfunc SplitInHalf(s []int) (left, right []int) {\r\n\tmiddle := len(s) / 2\r\n\tleft = s[:middle]\r\n\tright = s[middle:]\r\n\treturn\r\n}\r\n\r\nfunc main() {}\r\n```\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n#### command-line-arguments\r\n./main.go:5:10: Found IsSliceInBounds\r\n./main.go:6:11: Found IsSliceInBounds\r\n\r\n","golang\r\npackage main\r\n\r\nfunc SplitInHalf(s []int) (left, right []int) {\r\n\tmiddle := len(s) / 2\r\n\tleft = s[:middle]\r\n\tright = s[middle:]\r\n\treturn\r\n}\r\n\r\nfunc main() {}\r\n"
56884,"net/url: invalid percent encodings rejected by go1.19 are now accepted### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.20-831c6509cc Mon Nov 21 15:23:39 2022 +0000 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, this behavior is new in `master`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/liggitt/Library/Caches/go-build""\r\nGOENV=""/Users/liggitt/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/liggitt/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/liggitt/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/liggitt/git/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/liggitt/git/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-831c6509cc Mon Nov 21 15:23:39 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/37/ns7gt60104scfm9fvg02p1jh00kjgb/T/go-build1773376802=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nUse url.Parse to check for invalid %-encoding sequences.\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAn error, matching existing go releases.\r\n\r\n### What did you see instead?\r\n\r\nNo error.\r\n\r\n### Details\r\n\r\nThis change is due to https://github.com/golang/go/issues/56732 / https://go-review.googlesource.com/c/go/+/450375, which intentionally relaxes validation requirements for percent-decoding of URLs.\r\n\r\nThis means that systems using `url.Parse()` to ensure URLs are well-formed now accept malformed %-encoding sequences. This is already showing up as unit test failures in other projects testing against the golang dev branch, e.g. https://github.com/kubernetes/kubernetes/issues/113948, and required relaxing existing go unit tests in https://go-review.googlesource.com/c/go/+/450375 to accept previously rejected data.\r\n\r\nHoisting my question from https://github.com/golang/go/issues/56732#issuecomment-1320945282:\r\n\r\n* Doesn't loosening of URI validation risk propagating invalid %-encodings to other systems that will choke on the invalid URIs (like, for example, something built with go1.19)? This seems opposite to the rationale used to justify _tightening_ of ParseIP logic in go1.17 (https://github.com/golang/go/issues/30999).\r\n\r\nIf the implications of relaxing this are considered, and go1.20 decides to proceed relaxing this parsing to accept URIs as valid which go1.19 rejected as invalid, my follow-up questions are about how to roll out this change in a controlled way:\r\n\r\n* For go1.20 users that want to keep validating things strictly to disallow invalid %-encodings, how should they change their code?\r\n* For systems currently building with go1.19 that will need to update to build with go1.20 and want to preserve existing runtime behavior with minimally invasive code changes, how can they accomplish that?\r\n\r\ncc @dgryski @ianlancetaylor as authors of the prompting issue and CL\r\n\r\ncc @aojea @dims for implications on cross-version Kubernetes compatibility\r\n\r\ncc @rsc for intersection with runtime compatibility behavior discussed in https://github.com/golang/go/discussions/55090",NeedsInvestigation|FrozenDueToAge|release-blocker,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.20-831c6509cc Mon Nov 21 15:23:39 2022 +0000 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNo, this behavior is new in `master`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/liggitt/Library/Caches/go-build""\r\nGOENV=""/Users/liggitt/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/liggitt/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/liggitt/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/liggitt/git/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/liggitt/git/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-831c6509cc Mon Nov 21 15:23:39 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/37/ns7gt60104scfm9fvg02p1jh00kjgb/T/go-build1773376802=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nUse url.Parse to check for invalid %-encoding sequences.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""net/url""\r\n)\r\n\r\nfunc main() {\r\n        fmt.Println(url.Parse(""invalid%""))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAn error, matching existing go releases.\r\n\r\n### What did you see instead?\r\n\r\nNo error.\r\n\r\n### Details\r\n\r\nThis change is due to https://github.com/golang/go/issues/56732 / https://go-review.googlesource.com/c/go/+/450375, which intentionally relaxes validation requirements for percent-decoding of URLs.\r\n\r\nThis means that systems using `url.Parse()` to ensure URLs are well-formed now accept malformed %-encoding sequences. This is already showing up as unit test failures in other projects testing against the golang dev branch, e.g. https://github.com/kubernetes/kubernetes/issues/113948, and required relaxing existing go unit tests in https://go-review.googlesource.com/c/go/+/450375 to accept previously rejected data.\r\n\r\nHoisting my question from https://github.com/golang/go/issues/56732#issuecomment-1320945282:\r\n\r\n* Doesn't loosening of URI validation risk propagating invalid %-encodings to other systems that will choke on the invalid URIs (like, for example, something built with go1.19)? This seems opposite to the rationale used to justify _tightening_ of ParseIP logic in go1.17 (https://github.com/golang/go/issues/30999).\r\n\r\nIf the implications of relaxing this are considered, and go1.20 decides to proceed relaxing this parsing to accept URIs as valid which go1.19 rejected as invalid, my follow-up questions are about how to roll out this change in a controlled way:\r\n\r\n* For go1.20 users that want to keep validating things strictly to disallow invalid %-encodings, how should they change their code?\r\n* For systems currently building with go1.19 that will need to update to build with go1.20 and want to preserve existing runtime behavior with minimally invasive code changes, how can they accomplish that?\r\n\r\ncc @dgryski @ianlancetaylor as authors of the prompting issue and CL\r\n\r\ncc @aojea @dims for implications on cross-version Kubernetes compatibility\r\n\r\ncc @rsc for intersection with runtime compatibility behavior discussed in https://github.com/golang/go/discussions/55090","go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""net/url""\r\n)\r\n\r\nfunc main() {\r\n        fmt.Println(url.Parse(""invalid%""))\r\n}\r\n"
56753,"x/net/http2:  Above go1.19, the server cannot send packets to the client<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ubuntu/.cache/go-build""\r\nGOENV=""/home/ubuntu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ubuntu/.gvm/pkgsets/system/global/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ubuntu/.gvm/pkgsets/system/global""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ubuntu/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ubuntu/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ubuntu/software/debug_net/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1322243267=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n![image](https://user-images.githubusercontent.com/14817376/202110451-9e15b6a7-5b26-498e-bf9b-bd407ed08dbb.png)\r\n![image](https://user-images.githubusercontent.com/14817376/202110686-24718669-c4e2-4758-8e02-919b305c115b.png)\r\n\r\nFrom the packet capture point of view, the server does not send data packets to the client\r\n\r\nserver.go\r\n\r\n\r\nclient.go\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nIt is normal for versions below go 1.18.8\r\n\r\n![image](https://user-images.githubusercontent.com/14817376/202111744-e9e42f76-6883-4da4-9c78-d685a144b3c0.png)\r\n![image](https://user-images.githubusercontent.com/14817376/202112466-739a8bf5-6041-4a7d-b144-9c228272c9bd.png)\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge,neild,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ubuntu/.cache/go-build""\r\nGOENV=""/home/ubuntu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ubuntu/.gvm/pkgsets/system/global/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ubuntu/.gvm/pkgsets/system/global""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ubuntu/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ubuntu/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ubuntu/software/debug_net/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1322243267=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n![image](https://user-images.githubusercontent.com/14817376/202110451-9e15b6a7-5b26-498e-bf9b-bd407ed08dbb.png)\r\n![image](https://user-images.githubusercontent.com/14817376/202110686-24718669-c4e2-4758-8e02-919b305c115b.png)\r\n\r\nFrom the packet capture point of view, the server does not send data packets to the client\r\n\r\nserver.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""io""\r\n\t""net""\r\n\t""net/http""\r\n\t""strings""\r\n\t""time""\r\n\r\n\t""github.com/felixge/tcpkeepalive""\r\n\thttputil ""github.com/qiniupd/qiniu-go-sdk/x/httputil.v1""\r\n\t""golang.org/x/net/http2""\r\n)\r\n\r\ntype B struct {\r\n}\r\n\r\nfunc (b *B) ServeHTTP(resp http.ResponseWriter, req *http.Request) {\r\n\tif strings.Contains(req.RequestURI, ""long"") {\r\n\t\tfw := FlushWriter{W: resp}\r\n\t\tfw.Write([]byte(""long""))\r\n\t\ttime.Sleep(2 * time.Second)\r\n\t\tfw.Write([]byte(""long end""))\r\n\t\treturn\r\n\t}\r\n}\r\n\r\ntype A struct {\r\n}\r\n\r\nfunc (a *A) ServeHTTP(resp http.ResponseWriter, req *http.Request) {\r\n\tfmt.Println(""url"", req.URL.String())\r\n\tconn, err := UpgradeServerTCP(resp, req)\r\n\tif err != nil {\r\n\t\tfmt.Printf("" UpgradeServerTCP: %v"", err)\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(resp)\r\n\tgo func() {\r\n\t\tserver := &http2.Server{NewWriteScheduler: func() http2.WriteScheduler { return http2.NewPriorityWriteScheduler(nil) }}\r\n\t\tserver.ServeConn(conn, &http2.ServeConnOpts{\r\n\t\t\tHandler: &B{},\r\n\t\t})\r\n\t}()\r\n}\r\n\r\ntype FlushWriter struct {\r\n\tW io.Writer\r\n}\r\n\r\nfunc (fw FlushWriter) Write(p []byte) (n int, err error) {\r\n\tn, err = fw.W.Write(p)\r\n\tif f, ok := fw.W.(http.Flusher); ok {\r\n\t\tf.Flush()\r\n\t}\r\n\treturn\r\n}\r\n\r\ntype hijackedTcpConn struct {\r\n\tnet.Conn\r\n\tcancelf context.CancelFunc\r\n}\r\n\r\nfunc (p *hijackedTcpConn) Read(b []byte) (int, error) {\r\n\tn, err := p.Conn.Read(b)\r\n\tif err != nil {\r\n\t\tp.cancelf()\r\n\t}\r\n\treturn n, err\r\n}\r\n\r\nfunc (p *hijackedTcpConn) Write(b []byte) (int, error) {\r\n\tn, err := p.Conn.Write(b)\r\n\tif err != nil {\r\n\t\tp.cancelf()\r\n\t}\r\n\treturn n, err\r\n}\r\n\r\nfunc UpgradeServerTCP(w http.ResponseWriter, req *http.Request) (c net.Conn, err error) {\r\n\tif !IsUpgradeTcp(req.Header) {\r\n\t\thttputil.ReplyErr(w, 400, ""http upgrade needed"")\r\n\t\treturn nil, fmt.Errorf(""http upgrade needed"")\r\n\t}\r\n\thijacker, ok := httputil.GetHijacker(w)\r\n\tif !ok {\r\n\t\thttputil.ReplyErr(w, 500, ""http upgrade failed"")\r\n\t\treturn nil, fmt.Errorf(""http upgrade failed"")\r\n\t}\r\n\thttputil.Reply(w, 101, nil)\r\n\tconn, _, err := hijacker.Hijack()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tif err = keepAlive(conn); err != nil {\r\n\t\tconn.Close()\r\n\t\treturn nil, err\r\n\t}\r\n\tctx, cancelf := context.WithCancel(req.Context())\r\n\treq1 := req.WithContext(ctx)\r\n\t*req = *req1\r\n\treturn &hijackedTcpConn{conn, cancelf}, nil\r\n}\r\n\r\nfunc keepAlive(conn net.Conn) error {\r\n\tDefaultKeepAliveIdleTime := 13 * time.Second\r\n\tDefaultKeepAliveCount := 8\r\n\tDefaultKeepAliveInterval := 5 * time.Second\r\n\treturn tcpkeepalive.SetKeepAlive(conn, DefaultKeepAliveIdleTime, DefaultKeepAliveCount, DefaultKeepAliveInterval)\r\n}\r\n\r\nfunc IsUpgradeTcp(h http.Header) bool {\r\n\treturn strings.Contains(strings.ToLower(h.Get(""Connection"")), ""upgrade"") && h.Get(""Upgrade"") != """"\r\n}\r\n\r\nfunc main() {\r\n\terr := http.ListenAndServe(""127.0.0.1:10001"", &A{})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n```\r\n\r\nclient.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""bufio""\r\n\t""bytes""\r\n\t""context""\r\n\t""crypto/tls""\r\n\t""fmt""\r\n\t""io""\r\n\t""net""\r\n\t""net/http""\r\n\t""net/url""\r\n\t""time""\r\n\r\n\t""github.com/felixge/tcpkeepalive""\r\n\t""golang.org/x/net/http2""\r\n)\r\n\r\ntype readCloserWrap struct {\r\n\tio.Reader\r\n\tio.Closer\r\n}\r\ntype CP struct {\r\n\tclient *http2.ClientConn\r\n}\r\n\r\nfunc (c *CP) GetClientConn(req *http.Request, addr string) (*http2.ClientConn, error) {\r\n\tfmt.Println(""getClient: "", c.client)\r\n\treturn c.client, nil\r\n}\r\n\r\nfunc (c *CP) MarkDead(conn *http2.ClientConn) {\r\n\tconn.Close()\r\n}\r\n\r\nfunc UpgradeClientTCP(ctx context.Context, isProxy bool, conn net.Conn, req *http.Request) (c net.Conn, err error) {\r\n\treq.Header.Set(""Upgrade"", ""Tcp"")\r\n\treq.Header.Set(""Connection"", ""Upgrade"")\r\n\treq.Header.Set(""Content-Type"", ""application/json"")\r\n\r\n\tdefer func() {\r\n\t\tif err != nil {\r\n\t\t\tconn.Close()\r\n\t\t}\r\n\t}()\r\n\tif isProxy {\r\n\t\terr = req.WriteProxy(conn)\r\n\t} else {\r\n\t\terr = req.Write(conn)\r\n\t}\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tbr := bufio.NewReader(conn)\r\n\tresp, err := http.ReadResponse(br, req)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tif resp.StatusCode != 101 {\r\n\t\treturn nil, fmt.Errorf(""statusCode - %d"", resp.StatusCode)\r\n\t}\r\n\treturn &connWithBufReader{conn, br}, nil\r\n}\r\n\r\ntype connWithBufReader struct {\r\n\tnet.Conn\r\n\tbr *bufio.Reader\r\n}\r\n\r\nfunc (p *connWithBufReader) Read(b []byte) (int, error) {\r\n\treturn p.br.Read(b)\r\n}\r\n\r\ntype ClientConn struct {\r\n\tClientConfig\r\n}\r\n\r\ntype ClientConfig struct {\r\n\tDialTimeout time.Duration\r\n\tDial        func(network, addr string) (net.Conn, error)\r\n\r\n\tTLSClientConfig     *tls.Config\r\n\tTLSHandshakeTimeout time.Duration\r\n}\r\n\r\nfunc NewClientConn(cfg ClientConfig) *ClientConn {\r\n\tif cfg.DialTimeout == 0 {\r\n\t\tcfg.DialTimeout = 10 * time.Second\r\n\t}\r\n\tif cfg.Dial == nil {\r\n\t\tcfg.Dial = (&net.Dialer{\r\n\t\t\tTimeout:   cfg.DialTimeout,\r\n\t\t\tKeepAlive: 30 * time.Second,\r\n\t\t}).Dial\r\n\t}\r\n\tif cfg.TLSHandshakeTimeout == 0 {\r\n\t\tcfg.TLSHandshakeTimeout = 30 * time.Second\r\n\t}\r\n\treturn &ClientConn{cfg}\r\n}\r\n\r\nfunc (p *ClientConn) DialConn(targetUrl string) (net.Conn, error) {\r\n\tut, err := url.Parse(targetUrl)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tvar conn net.Conn\r\n\ttargetAddr := ut.Host\r\n\tif ut.Port() == """" {\r\n\t\tswitch ut.Scheme {\r\n\t\tcase ""http"":\r\n\t\t\ttargetAddr += "":80""\r\n\t\tcase ""https"":\r\n\t\t\ttargetAddr += "":443""\r\n\t\t}\r\n\t}\r\n\r\n\tconn, err = p.Dial(""tcp"", targetAddr)\r\n\tif err != nil {\r\n\t\treturn nil, &net.OpError{Op: ""connect"", Net: ""tcp"", Err: err}\r\n\t}\r\n\tif err = keepAlive(conn); err != nil {\r\n\t\tconn.Close()\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\treturn conn, nil\r\n}\r\n\r\nfunc keepAlive(conn net.Conn) error {\r\n\tDefaultKeepAliveIdleTime := 13 * time.Second\r\n\tDefaultKeepAliveCount := 8\r\n\tDefaultKeepAliveInterval := 5 * time.Second\r\n\treturn tcpkeepalive.SetKeepAlive(conn, DefaultKeepAliveIdleTime, DefaultKeepAliveCount, DefaultKeepAliveInterval)\r\n}\r\n\r\nfunc main() {\r\n\r\n\tconn, err := NewClientConn(ClientConfig{\r\n\t\tDialTimeout: 10 * time.Second,\r\n\t}).DialConn(""http://127.0.0.1:10001"")\r\n\r\n\treq, err := http.NewRequest(""POST"", ""/"", bytes.NewReader([]byte(""{}"")))\r\n\tif err != nil {\r\n\t\tfmt.Println(""NewRequest:"", err)\r\n\t\tconn.Close()\r\n\t\treturn\r\n\t}\r\n\treq.Header.Set(""Content-Type"", ""application/json"")\r\n\r\n\trawConn, err := UpgradeClientTCP(context.Background(), false, conn, req)\r\n\tif err != nil {\r\n\t\tfmt.Println("" UpgradeClientTCP:"", err)\r\n\t\treturn\r\n\t}\r\n\r\n\tpr, _ := io.Pipe()\r\n\tmr := io.MultiReader(bytes.NewReader([]byte(`{""a"":""a""}`)), pr)\r\n\r\n\treq, _ = http.NewRequest(""POST"", ""http://127.0.0.1:10001/long"", &readCloserWrap{mr, pr})\r\n\treq.Header.Set(""Content-Type"", ""application/json"")\r\n\r\n\tcp := &CP{}\r\n\th2t := &http2.Transport{ConnPool: cp, AllowHTTP: true}\r\n\th2c, err := h2t.NewClientConn(rawConn)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\tcp.client = h2c\r\n\r\n\tcli := &http.Client{\r\n\t\tTransport: h2t,\r\n\t\tCheckRedirect: func(req *http.Request, via []*http.Request) error {\r\n\t\t\treturn http.ErrUseLastResponse\r\n\t\t},\r\n\t}\r\n\tresp, err := cli.Do(req)\r\n\tif err != nil {\r\n\t\tfmt.Println(""err "", err)\r\n\t\treturn\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\tdata, _ := io.ReadAll(resp.Body)\r\n\tfmt.Println(string(data))\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nIt is normal for versions below go 1.18.8\r\n\r\n![image](https://user-images.githubusercontent.com/14817376/202111744-e9e42f76-6883-4da4-9c78-d685a144b3c0.png)\r\n![image](https://user-images.githubusercontent.com/14817376/202112466-739a8bf5-6041-4a7d-b144-9c228272c9bd.png)\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""io""\r\n\t""net""\r\n\t""net/http""\r\n\t""strings""\r\n\t""time""\r\n\r\n\t""github.com/felixge/tcpkeepalive""\r\n\thttputil ""github.com/qiniupd/qiniu-go-sdk/x/httputil.v1""\r\n\t""golang.org/x/net/http2""\r\n)\r\n\r\ntype B struct {\r\n}\r\n\r\nfunc (b *B) ServeHTTP(resp http.ResponseWriter, req *http.Request) {\r\n\tif strings.Contains(req.RequestURI, ""long"") {\r\n\t\tfw := FlushWriter{W: resp}\r\n\t\tfw.Write([]byte(""long""))\r\n\t\ttime.Sleep(2 * time.Second)\r\n\t\tfw.Write([]byte(""long end""))\r\n\t\treturn\r\n\t}\r\n}\r\n\r\ntype A struct {\r\n}\r\n\r\nfunc (a *A) ServeHTTP(resp http.ResponseWriter, req *http.Request) {\r\n\tfmt.Println(""url"", req.URL.String())\r\n\tconn, err := UpgradeServerTCP(resp, req)\r\n\tif err != nil {\r\n\t\tfmt.Printf("" UpgradeServerTCP: %v"", err)\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(resp)\r\n\tgo func() {\r\n\t\tserver := &http2.Server{NewWriteScheduler: func() http2.WriteScheduler { return http2.NewPriorityWriteScheduler(nil) }}\r\n\t\tserver.ServeConn(conn, &http2.ServeConnOpts{\r\n\t\t\tHandler: &B{},\r\n\t\t})\r\n\t}()\r\n}\r\n\r\ntype FlushWriter struct {\r\n\tW io.Writer\r\n}\r\n\r\nfunc (fw FlushWriter) Write(p []byte) (n int, err error) {\r\n\tn, err = fw.W.Write(p)\r\n\tif f, ok := fw.W.(http.Flusher); ok {\r\n\t\tf.Flush()\r\n\t}\r\n\treturn\r\n}\r\n\r\ntype hijackedTcpConn struct {\r\n\tnet.Conn\r\n\tcancelf context.CancelFunc\r\n}\r\n\r\nfunc (p *hijackedTcpConn) Read(b []byte) (int, error) {\r\n\tn, err := p.Conn.Read(b)\r\n\tif err != nil {\r\n\t\tp.cancelf()\r\n\t}\r\n\treturn n, err\r\n}\r\n\r\nfunc (p *hijackedTcpConn) Write(b []byte) (int, error) {\r\n\tn, err := p.Conn.Write(b)\r\n\tif err != nil {\r\n\t\tp.cancelf()\r\n\t}\r\n\treturn n, err\r\n}\r\n\r\nfunc UpgradeServerTCP(w http.ResponseWriter, req *http.Request) (c net.Conn, err error) {\r\n\tif !IsUpgradeTcp(req.Header) {\r\n\t\thttputil.ReplyErr(w, 400, ""http upgrade needed"")\r\n\t\treturn nil, fmt.Errorf(""http upgrade needed"")\r\n\t}\r\n\thijacker, ok := httputil.GetHijacker(w)\r\n\tif !ok {\r\n\t\thttputil.ReplyErr(w, 500, ""http upgrade failed"")\r\n\t\treturn nil, fmt.Errorf(""http upgrade failed"")\r\n\t}\r\n\thttputil.Reply(w, 101, nil)\r\n\tconn, _, err := hijacker.Hijack()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tif err = keepAlive(conn); err != nil {\r\n\t\tconn.Close()\r\n\t\treturn nil, err\r\n\t}\r\n\tctx, cancelf := context.WithCancel(req.Context())\r\n\treq1 := req.WithContext(ctx)\r\n\t*req = *req1\r\n\treturn &hijackedTcpConn{conn, cancelf}, nil\r\n}\r\n\r\nfunc keepAlive(conn net.Conn) error {\r\n\tDefaultKeepAliveIdleTime := 13 * time.Second\r\n\tDefaultKeepAliveCount := 8\r\n\tDefaultKeepAliveInterval := 5 * time.Second\r\n\treturn tcpkeepalive.SetKeepAlive(conn, DefaultKeepAliveIdleTime, DefaultKeepAliveCount, DefaultKeepAliveInterval)\r\n}\r\n\r\nfunc IsUpgradeTcp(h http.Header) bool {\r\n\treturn strings.Contains(strings.ToLower(h.Get(""Connection"")), ""upgrade"") && h.Get(""Upgrade"") != """"\r\n}\r\n\r\nfunc main() {\r\n\terr := http.ListenAndServe(""127.0.0.1:10001"", &A{})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n"
56748,"go/parser: parser doesn't accept trailing comma where it should\r\nleads to a syntax error when parsed with `go/parser`. In the playground, [the program](https://go.dev/play/p/UkmATVn1_dA) cannot be formatted (but it can be compiled and run because the compiler uses a different parser).\r\n",NeedsFix|FrozenDueToAge|release-blocker,griesemer|findleyr,"```Go\r\npackage p\r\n\r\ntype S[T1 any, T2 any] struct {\r\n\tv1 T1\r\n\tv2 T2\r\n}\r\n\r\ntype S1 struct {\r\n\tS[byte, []byte] // ok\r\n}\r\n\r\ntype S2 struct {\r\n\tS[byte, []byte,] // not ok: trailing comma not accepted even though it is legal\r\n}\r\n```\r\nleads to a syntax error when parsed with `go/parser`. In the playground, [the program](https://go.dev/play/p/UkmATVn1_dA) cannot be formatted (but it can be compiled and run because the compiler uses a different parser).\r\n","Go\r\npackage p\r\n\r\ntype S[T1 any, T2 any] struct {\r\n\tv1 T1\r\n\tv2 T2\r\n}\r\n\r\ntype S1 struct {\r\n\tS[byte, []byte] // ok\r\n}\r\n\r\ntype S2 struct {\r\n\tS[byte, []byte,] // not ok: trailing comma not accepted even though it is legal\r\n}\r\n"
56727,"cmd/compile: internal compiler error: missing typecheck<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (v1.19.3).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/biffen/.cache/go-build""\r\nGOENV=""/home/biffen/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/biffen/.local/go/pkg/mod""\r\nGONOPROXY=""\u2588\u2588\u2588""\r\nGONOSUMDB=""\u2588\u2588\u2588""\r\nGOOS=""linux""\r\nGOPATH=""/home/biffen/.local/go:/home/biffen/src/go:/home/biffen/src/private/go""\r\nGOPRIVATE=""\u2588\u2588\u2588""\r\nGOPROXY=""direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""off""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/biffen/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build735231424=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI came across an internal compiler error while testing a project. First locally then in CI/CD (self-hosted GitLab running a `golang` Docker container).\r\n\r\nI removed enough code to produce this:\r\n\r\n\r\n\r\nWith the above code in `test.go` I ran `go run ./test.go`.\r\n\r\n(Strangely, the same code seems to work on go.dev/play: <https://go.dev/play/p/A-TOmDsk13O>)\r\n\r\n### What did you expect to see?\r\n\r\n`done` and a 0 exit code.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run ./test.go \r\n# command-line-arguments\r\n./test.go:27:25: internal compiler error: missing typecheck: \r\n.   AS # test.go:27:25\r\n.   .   NAME-main..autotmp_21 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used exp.IdentifierExpression tc(1) # test.go:27:25\r\n.   .   DOT main.Bar exp.IdentifierExpression tc(1) # test.go:27:25\r\n.   .   .   NAME-main.columns esc(no) Class:PAUTO Offset:0 OnStack Used STRUCT-struct { Foo exp.IdentifierExpression; Bar exp.IdentifierExpression; Baz exp.IdentifierExpression } tc(1) # test.go:13:2\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,cuonglm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (v1.19.3).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/biffen/.cache/go-build""\r\nGOENV=""/home/biffen/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/biffen/.local/go/pkg/mod""\r\nGONOPROXY=""\u2588\u2588\u2588""\r\nGONOSUMDB=""\u2588\u2588\u2588""\r\nGOOS=""linux""\r\nGOPATH=""/home/biffen/.local/go:/home/biffen/src/go:/home/biffen/src/private/go""\r\nGOPRIVATE=""\u2588\u2588\u2588""\r\nGOPROXY=""direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""off""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/biffen/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build735231424=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nI came across an internal compiler error while testing a project. First locally then in CI/CD (self-hosted GitLab running a `golang` Docker container).\r\n\r\nI removed enough code to produce this:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/doug-martin/goqu/v9""\r\n\t""github.com/doug-martin/goqu/v9/exp""\r\n)\r\n\r\ntype Cols []exp.Expression\r\n\r\nfunc main() {\r\n\tcolumns := struct {\r\n\t\tFoo exp.IdentifierExpression\r\n\t\tBar exp.IdentifierExpression\r\n\t\tBaz exp.IdentifierExpression\r\n\t}{\r\n\t\tFoo: goqu.I(""foo""),\r\n\t\tBar: goqu.I(""bar""),\r\n\t\tBaz: goqu.I(""baz""),\r\n\t}\r\n\r\n\t_ = [...]struct {\r\n\t\tColumns Cols\r\n\t}{\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Baz, columns.Foo},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Baz, columns.Foo},\r\n\t\t},\r\n\t}\r\n\r\n\tfmt.Println(""done"")\r\n}\r\n```\r\n\r\nWith the above code in `test.go` I ran `go run ./test.go`.\r\n\r\n(Strangely, the same code seems to work on go.dev/play: <https://go.dev/play/p/A-TOmDsk13O>)\r\n\r\n### What did you expect to see?\r\n\r\n`done` and a 0 exit code.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run ./test.go \r\n# command-line-arguments\r\n./test.go:27:25: internal compiler error: missing typecheck: \r\n.   AS # test.go:27:25\r\n.   .   NAME-main..autotmp_21 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used exp.IdentifierExpression tc(1) # test.go:27:25\r\n.   .   DOT main.Bar exp.IdentifierExpression tc(1) # test.go:27:25\r\n.   .   .   NAME-main.columns esc(no) Class:PAUTO Offset:0 OnStack Used STRUCT-struct { Foo exp.IdentifierExpression; Bar exp.IdentifierExpression; Baz exp.IdentifierExpression } tc(1) # test.go:13:2\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/doug-martin/goqu/v9""\r\n\t""github.com/doug-martin/goqu/v9/exp""\r\n)\r\n\r\ntype Cols []exp.Expression\r\n\r\nfunc main() {\r\n\tcolumns := struct {\r\n\t\tFoo exp.IdentifierExpression\r\n\t\tBar exp.IdentifierExpression\r\n\t\tBaz exp.IdentifierExpression\r\n\t}{\r\n\t\tFoo: goqu.I(""foo""),\r\n\t\tBar: goqu.I(""bar""),\r\n\t\tBaz: goqu.I(""baz""),\r\n\t}\r\n\r\n\t_ = [...]struct {\r\n\t\tColumns Cols\r\n\t}{\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Bar},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Baz, columns.Foo},\r\n\t\t},\r\n\t\t{\r\n\t\t\tColumns: Cols{columns.Baz, columns.Foo},\r\n\t\t},\r\n\t}\r\n\r\n\tfmt.Println(""done"")\r\n}\r\n"
56669,"types2: Generics allow creating values of unexported or internal typesI'm not sure if this is a bug or should be a proposal, or if it is just a curiosity. But I noticed a thing and I think it's weird.\r\n\r\nSay `package a` wants to make sure that of some type, only well-controlled values are ever used (in my use case, its an interface which I want to share between packages but be able to change without breaking compatibility). It uses an internal package to do so:\r\n\r\n\r\n\r\nAs `a/internal` cannot be imported, there is no way to get an `internal.X` that isn't sanctioned by `a`. `reflect` can be used to construct an `any` with dynamic type `internal.X`, but that can't be type-asserted, so it can't be passed to `a.F`.\r\n\r\nHowever, using generics, we *can* do this trick:\r\n\r\n\r\n\r\nThe same also applies if the type is not from an internal package, but an unexported type. I suspect a similar issue would apply to #21498 (there is currently no way for a different package to write a `func(unexported)`, but #21498 would allow it by spelling it `(x) => { \u2026 }`).\r\n\r\nI'm not sure how important it is to prevent this. But I don't think this is how it should work. I think if an inferred type argument is from an internal package or is a defined type with unexported name from a different package, it should fail. But doing that would technically be a breaking change.\r\n\r\nJust thought I'd bring this up, at least.",NeedsDecision|generics,griesemer,"I'm not sure if this is a bug or should be a proposal, or if it is just a curiosity. But I noticed a thing and I think it's weird.\r\n\r\nSay `package a` wants to make sure that of some type, only well-controlled values are ever used (in my use case, its an interface which I want to share between packages but be able to change without breaking compatibility). It uses an internal package to do so:\r\n\r\n```go\r\n-- a/a.go --\r\npackage a\r\n\r\nimport ""a/internal""\r\n\r\nfunc MakeX() internal.X {\r\n\treturn internal.Make(42)\r\n}\r\n\r\nfunc F(x internal.X) {\r\n\tif x.V() != 42 {\r\n\t\tpanic(fmt.Errorf(""invalid %#v"", x))\r\n\t}\r\n}\r\n-- a/internal/internal.go --\r\npackage internal\r\n\r\ntype X struct { v int }\r\n\r\nfunc Make(v int) X { return X{v} }\r\n\r\nfunc (x X) V() int { return x.v }\r\n\r\n-- b/b.go --\r\npackage main\r\n\r\nimport (\r\n\t""a""\r\n\t// illegal: use of internal package a/internal not allowed\r\n\t// ""a/internal""\r\n)\r\n\r\nfunc main() {\r\n\t// doesn't work\r\n\t// a.F(internal.X{})\r\n\ta.F(a.MakeX())\r\n}\r\n```\r\n\r\nAs `a/internal` cannot be imported, there is no way to get an `internal.X` that isn't sanctioned by `a`. `reflect` can be used to construct an `any` with dynamic type `internal.X`, but that can't be type-asserted, so it can't be passed to `a.F`.\r\n\r\nHowever, using generics, we *can* do this trick:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""x/a""\r\n\r\nfunc main() {\r\n\ta.F(trick(a.MakeX))\r\n}\r\n\r\nfunc trick[T any](f func() T) T {\r\n\treturn *new(T)\r\n}\r\n```\r\n\r\nThe same also applies if the type is not from an internal package, but an unexported type. I suspect a similar issue would apply to #21498 (there is currently no way for a different package to write a `func(unexported)`, but #21498 would allow it by spelling it `(x) => { \u2026 }`).\r\n\r\nI'm not sure how important it is to prevent this. But I don't think this is how it should work. I think if an inferred type argument is from an internal package or is a defined type with unexported name from a different package, it should fail. But doing that would technically be a breaking change.\r\n\r\nJust thought I'd bring this up, at least.","go\r\n-- a/a.go --\r\npackage a\r\n\r\nimport ""a/internal""\r\n\r\nfunc MakeX() internal.X {\r\n\treturn internal.Make(42)\r\n}\r\n\r\nfunc F(x internal.X) {\r\n\tif x.V() != 42 {\r\n\t\tpanic(fmt.Errorf(""invalid %#v"", x))\r\n\t}\r\n}\r\n-- a/internal/internal.go --\r\npackage internal\r\n\r\ntype X struct { v int }\r\n\r\nfunc Make(v int) X { return X{v} }\r\n\r\nfunc (x X) V() int { return x.v }\r\n\r\n-- b/b.go --\r\npackage main\r\n\r\nimport (\r\n\t""a""\r\n\t// illegal: use of internal package a/internal not allowed\r\n\t// ""a/internal""\r\n)\r\n\r\nfunc main() {\r\n\t// doesn't work\r\n\t// a.F(internal.X{})\r\n\ta.F(a.MakeX())\r\n}\r\n"
56665,"cmd/compile: infinite loop with recursive generic types### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-3a41094107 Wed Nov 9 06:30:59 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. And on tip.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mero/.cache/go-build""\r\nGOENV=""/home/mero/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mero/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mero""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/mero/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/mero/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-3a41094107 Wed Nov 9 06:30:59 2022 +0000""\r\nGCCGO=""/usr/bin/gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/mero/tmp/x/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1760935320=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTry to compile [this program](https://go.dev/play/p/6VDGTz5yeCM):\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSomething. Probably an error message, I assume this is somehow violating the rules against embedding type parameters or something.\r\n\r\n### What did you see instead?\r\n\r\nThe compiler hangs, eating CPU (one core and a bit), obviously in an endless loop of some kind.",NeedsFix|FrozenDueToAge|compiler/runtime,findleyr,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-3a41094107 Wed Nov 9 06:30:59 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. And on tip.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mero/.cache/go-build""\r\nGOENV=""/home/mero/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mero/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mero""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/mero/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/mero/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-3a41094107 Wed Nov 9 06:30:59 2022 +0000""\r\nGCCGO=""/usr/bin/gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/mero/tmp/x/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1760935320=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTry to compile [this program](https://go.dev/play/p/6VDGTz5yeCM):\r\n\r\n```go\r\npackage main\r\n\r\ntype A[T any] interface {\r\n\t*T\r\n}\r\n\r\ntype B[T any] interface {\r\n\tB[*T]\r\n}\r\n\r\ntype C[T any, U B[U]] interface {\r\n\t*T\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSomething. Probably an error message, I assume this is somehow violating the rules against embedding type parameters or something.\r\n\r\n### What did you see instead?\r\n\r\nThe compiler hangs, eating CPU (one core and a bit), obviously in an endless loop of some kind.","go\r\npackage main\r\n\r\ntype A[T any] interface {\r\n\t*T\r\n}\r\n\r\ntype B[T any] interface {\r\n\tB[*T]\r\n}\r\n\r\ntype C[T any, U B[U]] interface {\r\n\t*T\r\n}\r\n\r\nfunc main() {\r\n}\r\n"
56656,"x/net/publicsuffix: table.go has been stale for a year### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n([playground](https://go.dev/play/p/4-JQ6ON4hFW))\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nfoo.aivencloud.com <nil>\r\n```\r\n\r\n`aivencloud.com` was indeed added to the [Public Suffix List](https://publicsuffix.org/list/public_suffix_list.dat) (PSL) as far back as [February 24th 2022](https://github.com/publicsuffix/list/pull/1508), i.e. much earlier than [Go 1.19.3's release on November 1st 2022](https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM).\r\n\r\n### What did you see instead?\r\n\r\n```\r\naivencloud.com <nil>\r\n```\r\n\r\nThis undesired output can be explained be explained by the fact that [file `table.go`](https://github.com/golang/net/blob/master/publicsuffix/table.go) hasn't been regenerated with an up-to-date version of the PSL since [November 2021](https://github.com/golang/net/blob/8021a29435afef042814c3ad3b702ff04b240bc7/publicsuffix/table.go#L5), which predates the addition of `aivencloud.com` to the PSL.\r\n\r\n### Why this matters\r\n\r\n Of course, there's nothing specific about PSL entry `aivencloud.com`. I just happened to [play a small part in its addition](https://hackerone.com/reports/1458236#activity-15187422). But it's an example of a PSL entry missing from the current version of `golang.org/x/net/publicsuffix`.\r\n\r\nThe PSL is the foundation on which the modern concept of [_site_](https://developer.mozilla.org/en-US/docs/Glossary/Site) is based. Go developers ([I included](https://twitter.com/jub0bs/status/1587441782270222336)) may depend on `x/net/publicsuffix` in order to decide whether to establish a trust relationship between different [Web origins](https://developer.mozilla.org/en-US/docs/Glossary/Origin). However, if `x/net/publicsuffix` doesn't stay abreast of changes to the PSL (give or take a few weeks), it becomes somewhat undependable, as relying on it to make sensitive decisions may introduce security holes.\r\n\r\nIs there a good reason why `table.go` does not get regenerated at each minor release (or even, ideally, at each patch release) of Go? I'd be more than willing to help to make this happen.",NeedsFix|FrozenDueToAge,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/net/publicsuffix""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(publicsuffix.EffectiveTLDPlusOne(""foo.aivencloud.com""))\r\n}\r\n```\r\n\r\n([playground](https://go.dev/play/p/4-JQ6ON4hFW))\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nfoo.aivencloud.com <nil>\r\n```\r\n\r\n`aivencloud.com` was indeed added to the [Public Suffix List](https://publicsuffix.org/list/public_suffix_list.dat) (PSL) as far back as [February 24th 2022](https://github.com/publicsuffix/list/pull/1508), i.e. much earlier than [Go 1.19.3's release on November 1st 2022](https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM).\r\n\r\n### What did you see instead?\r\n\r\n```\r\naivencloud.com <nil>\r\n```\r\n\r\nThis undesired output can be explained be explained by the fact that [file `table.go`](https://github.com/golang/net/blob/master/publicsuffix/table.go) hasn't been regenerated with an up-to-date version of the PSL since [November 2021](https://github.com/golang/net/blob/8021a29435afef042814c3ad3b702ff04b240bc7/publicsuffix/table.go#L5), which predates the addition of `aivencloud.com` to the PSL.\r\n\r\n### Why this matters\r\n\r\n Of course, there's nothing specific about PSL entry `aivencloud.com`. I just happened to [play a small part in its addition](https://hackerone.com/reports/1458236#activity-15187422). But it's an example of a PSL entry missing from the current version of `golang.org/x/net/publicsuffix`.\r\n\r\nThe PSL is the foundation on which the modern concept of [_site_](https://developer.mozilla.org/en-US/docs/Glossary/Site) is based. Go developers ([I included](https://twitter.com/jub0bs/status/1587441782270222336)) may depend on `x/net/publicsuffix` in order to decide whether to establish a trust relationship between different [Web origins](https://developer.mozilla.org/en-US/docs/Glossary/Origin). However, if `x/net/publicsuffix` doesn't stay abreast of changes to the PSL (give or take a few weeks), it becomes somewhat undependable, as relying on it to make sensitive decisions may introduce security holes.\r\n\r\nIs there a good reason why `table.go` does not get regenerated at each minor release (or even, ideally, at each patch release) of Go? I'd be more than willing to help to make this happen.","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""golang.org/x/net/publicsuffix""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(publicsuffix.EffectiveTLDPlusOne(""foo.aivencloud.com""))\r\n}\r\n"
56572,"x/tools/gopls: support ""go to implementation"" (textDocument/implementation) for function typesAs of gopls v0.10.1, the go to implementation feature of the LSP supports finding all of the types which implement an interface via the ""Go to Implementation"" feature in VS Code and Neovim etc.\r\n\r\nThis is a feature request to add the same support for named function types, and anonymous functions.\r\n\r\n# Current behaviour\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200022424-960e463d-7581-47af-ac34-113a2b894fbf.mov\r\n\r\nGo also allows you to define function types and also accept functions as a parameter. This is seen in the standard library, e.g. https://pkg.go.dev/net/http#HandlerFunc and https://pkg.go.dev/strings#IndexFunc but here's a simple example.\r\n\r\n\r\n\r\nAny function that has the same signature implements that function type.\r\n\r\n\r\n\r\nSo, you can use it like this:\r\n\r\n\r\n\r\nThe current behaviour of `gopls` does not allow you to go to the implementation of `f` from within the function body of the `TestFunctionType` function.\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023200-f1bb4f6e-17d5-4806-a0f4-ebfe348f95e3.mov\r\n\r\nAnd this same behaviour is true of anonymous functions:\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023283-dfb77b4b-f5d4-45b1-9306-569008d5a0bb.mov\r\n\r\n# Expected behavior\r\n\r\nIt should be possible to go the functions which implement the signature, as per this example.\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023352-e230dae8-ce32-48bc-809e-8db7ca622c1b.mov\r\n\r\nI've also tested the same behaviour with my modified version of the `gopls` Language Server running with Neovim.\r\n\r\n# Implementation\r\n\r\nI've got an implementation of the functionality to contribute.",Documentation|help wanted|FeatureRequest|gopls|Tools,a-h,"As of gopls v0.10.1, the go to implementation feature of the LSP supports finding all of the types which implement an interface via the ""Go to Implementation"" feature in VS Code and Neovim etc.\r\n\r\nThis is a feature request to add the same support for named function types, and anonymous functions.\r\n\r\n# Current behaviour\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200022424-960e463d-7581-47af-ac34-113a2b894fbf.mov\r\n\r\nGo also allows you to define function types and also accept functions as a parameter. This is seen in the standard library, e.g. https://pkg.go.dev/net/http#HandlerFunc and https://pkg.go.dev/strings#IndexFunc but here's a simple example.\r\n\r\n```go\r\ntype FunctionType func(s string, i int)\r\n```\r\n\r\nAny function that has the same signature implements that function type.\r\n\r\n```go\r\nfunc ImplementationOfFunctionType1(s string, i int) {\r\n}\r\n\r\nfunc ImplementationOfFunctionType2(s string, i int) {\r\n}\r\n```\r\n\r\nSo, you can use it like this:\r\n\r\n```go\r\nfunc TestFunctionType(f FunctionType) {\r\n\tf(""s"", 0)\r\n}\r\n```\r\n\r\nThe current behaviour of `gopls` does not allow you to go to the implementation of `f` from within the function body of the `TestFunctionType` function.\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023200-f1bb4f6e-17d5-4806-a0f4-ebfe348f95e3.mov\r\n\r\nAnd this same behaviour is true of anonymous functions:\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023283-dfb77b4b-f5d4-45b1-9306-569008d5a0bb.mov\r\n\r\n# Expected behavior\r\n\r\nIt should be possible to go the functions which implement the signature, as per this example.\r\n\r\nhttps://user-images.githubusercontent.com/1029947/200023352-e230dae8-ce32-48bc-809e-8db7ca622c1b.mov\r\n\r\nI've also tested the same behaviour with my modified version of the `gopls` Language Server running with Neovim.\r\n\r\n# Implementation\r\n\r\nI've got an implementation of the functionality to contribute.","go\r\ntype FunctionType func(s string, i int)\r\n"
56568,"runtime: nil-dereference panic refers to addr=0x8### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, [confirmed](https://go.dev/play/p/X9sUaD_NN3Y?v=gotip) via playground.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/snap/go/9981""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/snap/go/9981/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.7""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build662566094=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following program:\r\n\r\n\r\n\r\n[Link](https://go.dev/play/p/X9sUaD_NN3Y?v=goprev) to a playground.\r\n\r\n### What did you expect to see?\r\n\r\nNo panic for both method calls.\r\n\r\n### What did you see instead?\r\n\r\nPanic on the `b.Foo()` method call:\r\n\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x454ea2]\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/tmp/sandbox1079324543/prog.go:21 +0x2\r\n```\r\n\r\n### Discussion\r\n\r\nTechnically, I would expect `b.Foo()` to be equivalent to `(*A).Foo(nil)` in this case, at least when the struct offset of embedded `A` field is zero.\r\n\r\nIt is clear that the following would case panics in any case (struct offset is not zero, equivalent to `(*A).Foo(0x8)`):\r\n\r\n\r\n\r\nAs well as this code (always requires pointer de-reference):\r\n\r\n\r\n\r\nIf I understand correctly, as of now the behavior of `b.Foo()` is similar to `(*A).Foo(&b.A)`, where first `b.A` causes an operation analogous to pointer de-reference. I think this is a surprising behavior that makes it hard to embed structs (promoting methods) _and_ make the new type nil-safe.\r\n\r\nThe only non-error-prone way to fix it currently, is to make a named type instead of embedding and manually expose all the methods:\r\n\r\n\r\n\r\nAs I mentioned previously, I see no technical reason why the compiler cannot call `(*A).Foo(nil)` instead of requiring an additional boilerplate. Otherwise it defeats the purpose of struct composition, when nil-safety is required for promoted methods. \r\n\r\nI believe this change doesn't break the backward compatibility promise, only makes more programs safe(er).\r\n\r\nOpen questions are:\r\n- Can this be implemented without slowing down existing programs?\r\n- Should the case of `(*A).Foo(0x8)` be translated to `(*A).Foo(nil)` as well, so that the struct offset doesn't matter? This complicates the implementation, so likely is unnecessary.\r\n\r\nI admit this is not a bug per-se and works ""as intended"", however it's surprising enough to be worth fixing. Also, when using `unsafe`/cgo, I was able to somehow confuse the compiler to emit case similar to `(*A).Foo(0x8)` (thus skipping the initial nil check). I will try to provide a reproducer for it as well.",Thinking|NeedsInvestigation|compiler/runtime,cherrymui,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, [confirmed](https://go.dev/play/p/X9sUaD_NN3Y?v=gotip) via playground.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/snap/go/9981""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/snap/go/9981/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.7""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build662566094=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun the following program:\r\n\r\n```go\r\npackage main\r\n\r\ntype A struct {\r\n\tF int\r\n}\r\n\r\nfunc (a *A) Foo() {\r\n\tif a != nil {\r\n\t\ta.F++\r\n\t}\r\n}\r\n\r\ntype B struct {\r\n\tA\r\n}\r\n\r\nfunc main() {\r\n\tvar a *A\r\n\ta.Foo()\r\n\tvar b *B\r\n\tb.Foo()\r\n}\r\n```\r\n\r\n[Link](https://go.dev/play/p/X9sUaD_NN3Y?v=goprev) to a playground.\r\n\r\n### What did you expect to see?\r\n\r\nNo panic for both method calls.\r\n\r\n### What did you see instead?\r\n\r\nPanic on the `b.Foo()` method call:\r\n\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x454ea2]\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/tmp/sandbox1079324543/prog.go:21 +0x2\r\n```\r\n\r\n### Discussion\r\n\r\nTechnically, I would expect `b.Foo()` to be equivalent to `(*A).Foo(nil)` in this case, at least when the struct offset of embedded `A` field is zero.\r\n\r\nIt is clear that the following would case panics in any case (struct offset is not zero, equivalent to `(*A).Foo(0x8)`):\r\n\r\n```go\r\ntype B struct {\r\n\tF2 int\r\n\tA\r\n}\r\n```\r\n\r\nAs well as this code (always requires pointer de-reference):\r\n\r\n```go\r\ntype B struct {\r\n\t*A\r\n}\r\n```\r\n\r\nIf I understand correctly, as of now the behavior of `b.Foo()` is similar to `(*A).Foo(&b.A)`, where first `b.A` causes an operation analogous to pointer de-reference. I think this is a surprising behavior that makes it hard to embed structs (promoting methods) _and_ make the new type nil-safe.\r\n\r\nThe only non-error-prone way to fix it currently, is to make a named type instead of embedding and manually expose all the methods:\r\n\r\n```go\r\ntype B A\r\n\r\nfunc (b *B) Foo() {\r\n\t(*A)(b).Foo()\r\n}\r\n```\r\n\r\nAs I mentioned previously, I see no technical reason why the compiler cannot call `(*A).Foo(nil)` instead of requiring an additional boilerplate. Otherwise it defeats the purpose of struct composition, when nil-safety is required for promoted methods. \r\n\r\nI believe this change doesn't break the backward compatibility promise, only makes more programs safe(er).\r\n\r\nOpen questions are:\r\n- Can this be implemented without slowing down existing programs?\r\n- Should the case of `(*A).Foo(0x8)` be translated to `(*A).Foo(nil)` as well, so that the struct offset doesn't matter? This complicates the implementation, so likely is unnecessary.\r\n\r\nI admit this is not a bug per-se and works ""as intended"", however it's surprising enough to be worth fixing. Also, when using `unsafe`/cgo, I was able to somehow confuse the compiler to emit case similar to `(*A).Foo(0x8)` (thus skipping the initial nil check). I will try to provide a reproducer for it as well.",go\r\npackage main\r\n\r\ntype A struct {\r\n\tF int\r\n}\r\n\r\nfunc (a *A) Foo() {\r\n\tif a != nil {\r\n\t\ta.F++\r\n\t}\r\n}\r\n\r\ntype B struct {\r\n\tA\r\n}\r\n\r\nfunc main() {\r\n\tvar a *A\r\n\ta.Foo()\r\n\tvar b *B\r\n\tb.Foo()\r\n}\r\n
56570,"x/tools/gopls: deprecate the ""allowModfileModifications"" setting<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.18.7 linux/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.10.1\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.73.0 (8fa188b2b301d36553cbc9ce1b0a146ccb93351f)\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.35.2\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n  ```\r\n    GOBIN: undefined\r\n    toolsGopath: /home/skipr/go\r\n    gopath: /home/skipr/go\r\n    GOROOT: /usr/lib/golang\r\n    PATH: /home/skipr/.local/bin:/home/skipr/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/local/go/bin:/home/skipr/go/bin:/usr/local/go/bin:/home/skipr/go/bin\r\n\r\n    go:    /usr/bin/go: go version go1.18.7 linux/amd64\r\n\r\n    gotests:    /home/skipr/go/bin/gotests    (version: v1.6.0 built with go: go1.18.2)\r\n    gomodifytags:    /home/skipr/go/bin/gomodifytags    (version: v1.16.0 built with go: go1.18.2)\r\n    impl:    /home/skipr/go/bin/impl    (version: v1.1.0 built with go: go1.18.2)\r\n    goplay:    /home/skipr/go/bin/goplay    (version: v1.0.0 built with go: go1.18.2)\r\n    dlv:    /home/skipr/go/bin/dlv    (version: v1.8.3 built with go: go1.18.2)\r\n    staticcheck:    /home/skipr/go/bin/staticcheck    (version: v0.3.2 built with go: go1.18.2)\r\n    gopls:    /home/skipr/go/bin/gopls    (version: v0.10.1 built with go: go1.18.7)\r\n\r\n    go env\r\n    Workspace Folder (workspace): /home/skipr/Dev/workspace\r\n    GO111MODULE=""auto""\r\n    GOARCH=""amd64""\r\n    GOBIN=""""\r\n    GOCACHE=""/home/skipr/.cache/go-build""\r\n    GOENV=""/home/skipr/.config/go/env""\r\n    GOEXE=""""\r\n    GOEXPERIMENT=""""\r\n    GOFLAGS=""""\r\n    GOHOSTARCH=""amd64""\r\n    GOHOSTOS=""linux""\r\n    GOINSECURE=""""\r\n    GOMODCACHE=""/home/skipr/go/pkg/mod""\r\n    GONOPROXY=""""\r\n    GONOSUMDB=""""\r\n    GOOS=""linux""\r\n    GOPATH=""/home/skipr/go""\r\n    GOPRIVATE=""""\r\n    GOPROXY=""direct""\r\n    GOROOT=""/usr/lib/golang""\r\n    GOSUMDB=""off""\r\n    GOTMPDIR=""""\r\n    GOTOOLDIR=""/usr/lib/golang/pkg/tool/linux_amd64""\r\n    GOVCS=""""\r\n    GOVERSION=""go1.18.7""\r\n    GCCGO=""gccgo""\r\n    GOAMD64=""v1""\r\n    AR=""ar""\r\n    CC=""gcc""\r\n    CXX=""g++""\r\n    CGO_ENABLED=""1""\r\n    GOMOD=""/home/skipr/Dev/workspace/go.mod""\r\n    GOWORK=""/home/skipr/Dev/workspace/go.work""\r\n    CGO_CFLAGS=""-g -O2""\r\n    CGO_CPPFLAGS=""""\r\n    CGO_CXXFLAGS=""-g -O2""\r\n    CGO_FFLAGS=""-g -O2""\r\n    CGO_LDFLAGS=""-g -O2""\r\n    PKG_CONFIG=""pkg-config""\r\n    GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3105188839=/tmp/go-build -gno-record-gcc-switches""\r\n  ```\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```jsonc\r\n{\r\n  ""go.buildTags"": ""integration"",\r\n  ""go.toolsGopath"": ""~/go"",\r\n  ""go.toolsManagement.autoUpdate"": true,\r\n  ""gopls"": {\r\n    ""build.allowModfileModifications"": true\r\n  },\r\n}\r\n```\r\n\r\n### Describe the bug\r\nI faced the issue in a large project, but was able to reproduce minimally following: https://go.dev/doc/tutorial/workspaces\r\n\r\nOnce you add a Golang Workspace by creating a `go.work` file, every `go.mod` file returns error: `no go.mod file found in /home/skipr/Dev/workspace go list`. Where `/home/skipr/Dev/workspace` is the root of the workspace.\r\n![image](https://user-images.githubusercontent.com/62247524/199943822-d787f6f9-fe6a-4089-bb09-a19e565e64cf.png)\r\n\r\n### Steps to reproduce the behavior:\r\n1. Start with a blank directory\r\n2. Create a folder `hello`\r\n3. Start a Go module using `go mod init example.com/hello` (run inside `hello` directory)\r\n4. Create `hello/main.go` containing\r\n  \r\n5. Start a Go workspace using `go work init ./hello` (run inside root/workspace directory)\r\n6. Open `hello/go.mod`\r\n\r\nAdding a `go.mod` to the root doesn't solve the issue. Nor adding `.` to the `go.work`. When doing the latter, you even get the same error in the root `go.mod`:\r\n![image](https://user-images.githubusercontent.com/62247524/199945222-9acbb8c5-e323-4066-bf85-dff0ee0cf910.png)\r\n![image](https://user-images.githubusercontent.com/62247524/199945050-f5fb06da-3a14-4aed-afd7-db4a0ca03666.png)\r\n\r\n### Screenshots or recordings\r\nSee above\r\n",gopls|Tools|gopls/metadata,findleyr,"<!--\r\nFor asking questions, see:\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/go+visual-studio-code)\r\n- [GitHub Discussions (Help)](https://github.com/golang/vscode-go/discussions/categories/help)\r\n- [`#vscode` channel in Gophers Slack](https://invite.slack.golangbridge.org/messages/vscode)\r\n\r\nBefore filing an issue, please review our troubleshooting guides\r\n* [Troubleshooting problems with debugging](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\r\n* [Troubleshooting other problems](https://github.com/golang/vscode-go/wiki/troubleshooting)\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.18.7 linux/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.10.1\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.73.0 (8fa188b2b301d36553cbc9ce1b0a146ccb93351f)\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.35.2\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n  ```\r\n    GOBIN: undefined\r\n    toolsGopath: /home/skipr/go\r\n    gopath: /home/skipr/go\r\n    GOROOT: /usr/lib/golang\r\n    PATH: /home/skipr/.local/bin:/home/skipr/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/local/go/bin:/home/skipr/go/bin:/usr/local/go/bin:/home/skipr/go/bin\r\n\r\n    go:    /usr/bin/go: go version go1.18.7 linux/amd64\r\n\r\n    gotests:    /home/skipr/go/bin/gotests    (version: v1.6.0 built with go: go1.18.2)\r\n    gomodifytags:    /home/skipr/go/bin/gomodifytags    (version: v1.16.0 built with go: go1.18.2)\r\n    impl:    /home/skipr/go/bin/impl    (version: v1.1.0 built with go: go1.18.2)\r\n    goplay:    /home/skipr/go/bin/goplay    (version: v1.0.0 built with go: go1.18.2)\r\n    dlv:    /home/skipr/go/bin/dlv    (version: v1.8.3 built with go: go1.18.2)\r\n    staticcheck:    /home/skipr/go/bin/staticcheck    (version: v0.3.2 built with go: go1.18.2)\r\n    gopls:    /home/skipr/go/bin/gopls    (version: v0.10.1 built with go: go1.18.7)\r\n\r\n    go env\r\n    Workspace Folder (workspace): /home/skipr/Dev/workspace\r\n    GO111MODULE=""auto""\r\n    GOARCH=""amd64""\r\n    GOBIN=""""\r\n    GOCACHE=""/home/skipr/.cache/go-build""\r\n    GOENV=""/home/skipr/.config/go/env""\r\n    GOEXE=""""\r\n    GOEXPERIMENT=""""\r\n    GOFLAGS=""""\r\n    GOHOSTARCH=""amd64""\r\n    GOHOSTOS=""linux""\r\n    GOINSECURE=""""\r\n    GOMODCACHE=""/home/skipr/go/pkg/mod""\r\n    GONOPROXY=""""\r\n    GONOSUMDB=""""\r\n    GOOS=""linux""\r\n    GOPATH=""/home/skipr/go""\r\n    GOPRIVATE=""""\r\n    GOPROXY=""direct""\r\n    GOROOT=""/usr/lib/golang""\r\n    GOSUMDB=""off""\r\n    GOTMPDIR=""""\r\n    GOTOOLDIR=""/usr/lib/golang/pkg/tool/linux_amd64""\r\n    GOVCS=""""\r\n    GOVERSION=""go1.18.7""\r\n    GCCGO=""gccgo""\r\n    GOAMD64=""v1""\r\n    AR=""ar""\r\n    CC=""gcc""\r\n    CXX=""g++""\r\n    CGO_ENABLED=""1""\r\n    GOMOD=""/home/skipr/Dev/workspace/go.mod""\r\n    GOWORK=""/home/skipr/Dev/workspace/go.work""\r\n    CGO_CFLAGS=""-g -O2""\r\n    CGO_CPPFLAGS=""""\r\n    CGO_CXXFLAGS=""-g -O2""\r\n    CGO_FFLAGS=""-g -O2""\r\n    CGO_LDFLAGS=""-g -O2""\r\n    PKG_CONFIG=""pkg-config""\r\n    GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3105188839=/tmp/go-build -gno-record-gcc-switches""\r\n  ```\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```jsonc\r\n{\r\n  ""go.buildTags"": ""integration"",\r\n  ""go.toolsGopath"": ""~/go"",\r\n  ""go.toolsManagement.autoUpdate"": true,\r\n  ""gopls"": {\r\n    ""build.allowModfileModifications"": true\r\n  },\r\n}\r\n```\r\n\r\n### Describe the bug\r\nI faced the issue in a large project, but was able to reproduce minimally following: https://go.dev/doc/tutorial/workspaces\r\n\r\nOnce you add a Golang Workspace by creating a `go.work` file, every `go.mod` file returns error: `no go.mod file found in /home/skipr/Dev/workspace go list`. Where `/home/skipr/Dev/workspace` is the root of the workspace.\r\n![image](https://user-images.githubusercontent.com/62247524/199943822-d787f6f9-fe6a-4089-bb09-a19e565e64cf.png)\r\n\r\n### Steps to reproduce the behavior:\r\n1. Start with a blank directory\r\n2. Create a folder `hello`\r\n3. Start a Go module using `go mod init example.com/hello` (run inside `hello` directory)\r\n4. Create `hello/main.go` containing\r\n  ```go\r\n  package main\r\n\r\n  func main() {}\r\n  ```\r\n5. Start a Go workspace using `go work init ./hello` (run inside root/workspace directory)\r\n6. Open `hello/go.mod`\r\n\r\nAdding a `go.mod` to the root doesn't solve the issue. Nor adding `.` to the `go.work`. When doing the latter, you even get the same error in the root `go.mod`:\r\n![image](https://user-images.githubusercontent.com/62247524/199945222-9acbb8c5-e323-4066-bf85-dff0ee0cf910.png)\r\n![image](https://user-images.githubusercontent.com/62247524/199945050-f5fb06da-3a14-4aed-afd7-db4a0ca03666.png)\r\n\r\n### Screenshots or recordings\r\nSee above\r\n",go\r\n  package main\r\n\r\n  func main() {}\r\n  
56527,"cmd/go: TestScripts/svn fails if TZ database not installed<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-3ba3b4893f Wed Nov 2 14:43:52 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nOnly in tip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/src/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/src/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-3ba3b4893f Wed Nov 2 14:43:52 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/usr/local/src/go/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3269867307=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n`go test -run TestScripts/svn/hello -count 1 ./cmd/go/internal/vcweb/vcstest`\r\n\r\n### What did you expect to see?\r\n\r\n`ok      cmd/go/internal/vcweb/vcstest   0.155s`\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n### Additional info\r\n\r\n- Same failure happens in `test1-svn-git.txt` and `test2-svn-git.txt`.\r\n- These tests were added in [CL 427914](https://go-review.googlesource.com/c/go/+/427914), but they have been expanded in as part of #27494.\r\n- I'm running these tests on a Linux distro with `svn` but without `tzdata`.",Testing|NeedsFix|FrozenDueToAge|GoCommand,qmuntal,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-3ba3b4893f Wed Nov 2 14:43:52 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nOnly in tip\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/src/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/src/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-3ba3b4893f Wed Nov 2 14:43:52 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/usr/local/src/go/src/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3269867307=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n`go test -run TestScripts/svn/hello -count 1 ./cmd/go/internal/vcweb/vcstest`\r\n\r\n### What did you expect to see?\r\n\r\n`ok      cmd/go/internal/vcweb/vcstest   0.155s`\r\n\r\n### What did you see instead?\r\n\r\n```cmd\r\n  vcstest_test.go:136: 2022/11/02 07:32:23 hello.txt:\r\n        > handle svn\r\n        > env TZ='America/New_York'\r\n        > mkdir db/transactions\r\n        > mkdir db/txn-protorevs\r\n        > chmod 0755 hooks/pre-revprop-change\r\n        > env ROOT=$PWD\r\n        > cd .checkout\r\n        > svn checkout file://$ROOT .\r\n        [stdout]\r\n        Checked out revision 0.\r\n        > svn add hello.go\r\n        [stdout]\r\n        A         hello.go\r\n        > svn commit --file MSG\r\n        [stdout]\r\n        Adding         hello.go\r\n        Transmitting file data .done\r\n        Committing transaction...\r\n        Committed revision 1.\r\n        > svn propset svn:author 'rsc' --revprop -r1\r\n        [stdout]\r\n        property 'svn:author' set on repository revision 1\r\n        > svn propset svn:date '2017-09-22T01:12:45.861368Z' --revprop -r1\r\n        [stdout]\r\n        property 'svn:date' set on repository revision 1\r\n        > svn update\r\n        [stdout]\r\n        Updating '.':\r\n        At revision 1.\r\n        > svn log\r\n        [stdout]\r\n        ------------------------------------------------------------------------\r\n        r1 | rsc | 2017-09-22 01:12:45 +0000 (Fri, 22 Sep 2017) | 3 lines\r\n        \r\n        hello world\r\n        \r\n        \r\n        ------------------------------------------------------------------------\r\n        > cmp stdout .svn-log\r\n        diff stdout .svn-log\r\n        --- stdout\r\n        +++ .svn-log\r\n        @@ -1,5 +1,5 @@\r\n         ------------------------------------------------------------------------\r\n        -r1 | rsc | 2017-09-22 01:12:45 +0000 (Fri, 22 Sep 2017) | 3 lines\r\n        +r1 | rsc | 2017-09-21 21:12:45 -0400 (Thu, 21 Sep 2017) | 3 lines\r\n         \r\n         hello world\r\n```\r\n\r\n### Additional info\r\n\r\n- Same failure happens in `test1-svn-git.txt` and `test2-svn-git.txt`.\r\n- These tests were added in [CL 427914](https://go-review.googlesource.com/c/go/+/427914), but they have been expanded in as part of #27494.\r\n- I'm running these tests on a Linux distro with `svn` but without `tzdata`.","cmd\r\n  vcstest_test.go:136: 2022/11/02 07:32:23 hello.txt:\r\n        > handle svn\r\n        > env TZ='America/New_York'\r\n        > mkdir db/transactions\r\n        > mkdir db/txn-protorevs\r\n        > chmod 0755 hooks/pre-revprop-change\r\n        > env ROOT=$PWD\r\n        > cd .checkout\r\n        > svn checkout file://$ROOT .\r\n        [stdout]\r\n        Checked out revision 0.\r\n        > svn add hello.go\r\n        [stdout]\r\n        A         hello.go\r\n        > svn commit --file MSG\r\n        [stdout]\r\n        Adding         hello.go\r\n        Transmitting file data .done\r\n        Committing transaction...\r\n        Committed revision 1.\r\n        > svn propset svn:author 'rsc' --revprop -r1\r\n        [stdout]\r\n        property 'svn:author' set on repository revision 1\r\n        > svn propset svn:date '2017-09-22T01:12:45.861368Z' --revprop -r1\r\n        [stdout]\r\n        property 'svn:date' set on repository revision 1\r\n        > svn update\r\n        [stdout]\r\n        Updating '.':\r\n        At revision 1.\r\n        > svn log\r\n        [stdout]\r\n        ------------------------------------------------------------------------\r\n        r1 | rsc | 2017-09-22 01:12:45 +0000 (Fri, 22 Sep 2017) | 3 lines\r\n        \r\n        hello world\r\n        \r\n        \r\n        ------------------------------------------------------------------------\r\n        > cmp stdout .svn-log\r\n        diff stdout .svn-log\r\n        --- stdout\r\n        +++ .svn-log\r\n        @@ -1,5 +1,5 @@\r\n         ------------------------------------------------------------------------\r\n        -r1 | rsc | 2017-09-22 01:12:45 +0000 (Fri, 22 Sep 2017) | 3 lines\r\n        +r1 | rsc | 2017-09-21 21:12:45 -0400 (Thu, 21 Sep 2017) | 3 lines\r\n         \r\n         hello world\r\n"
56494,"cmd/go: get: panic: internal error: can't find reason for requirement on golang.org/x/sync@...### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ gotip version\r\ngo version devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000 linux/amd64\r\n</pre>\r\n\r\nSame result with 1.18.6, 1.19.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/icio/.cache/go-build""\r\nGOENV=""/home/icio/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/icio/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/icio/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/icio/sdk/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/icio/sdk/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/icio/go/src/github.com/icio/go-get-panic/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2460736486=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun `go get -u golang.org/x/tools` with go.mod:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\ngo.mod updated with latest golang.org/x/tools version.\r\n\r\n### What did you see instead?\r\n\r\n```\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n\r\ngoroutine 1 [running]:\r\ncmd/go/internal/modget.(*resolver).updateBuildList.func1({{0xc0000281e0, 0x11}, {0xc000032690, 0x22}})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1760 +0xd4\r\ncmd/go/internal/modget.(*resolver).updateBuildList(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0x0, 0x0, 0x0})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1765 +0x54c\r\ncmd/go/internal/modget.(*resolver).resolveQueries(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0xc000014058, 0x1, 0xc0000a3d78?})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1243 +0x1a5\r\ncmd/go/internal/modget.runGet({0xb2d5d0, 0xc00002c0f8}, 0xc0000285e8?, {0xc0000240f0, 0x1, 0x1})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:314 +0x408\r\nmain.invoke(0xe371a0, {0xc0000240d0, 0x3, 0x3})\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:225 +0x3d9\r\nmain.main()\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:179 +0x7ce\r\n```\r\n\r\n### To reproduce\r\n\r\n```\r\n$ git clone https://github.com/icio/go-get-panic\r\nCloning into 'go-get-panic'...\r\nremote: Enumerating objects: 7, done.\r\nremote: Counting objects: 100% (7/7), done.\r\nremote: Compressing objects: 100% (5/5), done.\r\nremote: Total 7 (delta 1), reused 7 (delta 1), pack-reused 0\r\nReceiving objects: 100% (7/7), done.\r\nResolving deltas: 100% (1/1), done.\r\n\r\n$ cd go-get-panic\r\n\r\n$ git checkout 2cbc2db2a48105fa2b71ec69d11b6496ba52c263\r\n\r\n$ git rev-parse HEAD\r\n2cbc2db2a48105fa2b71ec69d11b6496ba52c263\r\n\r\n$ gotip version\r\ngo version devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000 linux/amd64\r\n\r\n$ gotip get -u golang.org/x/tools\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n\r\ngoroutine 1 [running]:\r\ncmd/go/internal/modget.(*resolver).updateBuildList.func1({{0xc0000281e0, 0x11}, {0xc000032690, 0x22}})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1760 +0xd4\r\ncmd/go/internal/modget.(*resolver).updateBuildList(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0x0, 0x0, 0x0})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1765 +0x54c\r\ncmd/go/internal/modget.(*resolver).resolveQueries(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0xc000014058, 0x1, 0xc0000a3d78?})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1243 +0x1a5\r\ncmd/go/internal/modget.runGet({0xb2d5d0, 0xc00002c0f8}, 0xc0000285e8?, {0xc0000240f0, 0x1, 0x1})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:314 +0x408\r\nmain.invoke(0xe371a0, {0xc0000240d0, 0x3, 0x3})\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:225 +0x3d9\r\nmain.main()\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:179 +0x7ce\r\n```\r\n\r\nThis reproduces even if you remove the go.sum:\r\n\r\n```\r\n$ rm go.sum && gotip get -u golang.org/x/tools 2>&1 | head -1\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n```\r\n\r\nUncommenting any of the requirements in go.mod and re-running `go get -u golang.org/x/tools` will allow `go get` to succeed. E.g.:\r\n\r\n```\r\n$ sed -i '/x\\/net/d' go.mod  \r\n\r\n$ git diff\r\ndiff --git a/go.mod b/go.mod\r\nindex cc0392c..05b38b1 100644\r\n--- a/go.mod\r\n+++ b/go.mod\r\n@@ -3,7 +3,6 @@ module github.com/icio/go-get-panic\r\n go 1.18\r\n \r\n require (\r\n-       golang.org/x/net v0.1.0\r\n        golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f\r\n        golang.org/x/text v0.4.0\r\n )\r\n\r\n$ go get -u golang.org/x/tools\r\ngo: downgraded golang.org/x/text v0.4.0 => v0.3.7\r\ngo: upgraded golang.org/x/tools v0.1.12 => v0.2.0\r\n```\r\n\r\nIn the repository where I first encountered, this I was able to fix `go get -u golang.org/x/tools` by removing the `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f` line. Next, re-running `go mod tidy` reintroduces `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f` to go.mod. I'm not sure if this is related, but despite having a ./go.mod at the root of the project, we also have a ./cmd/ci-test-utility/go.mod which contains `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f`.",NeedsFix|GoCommand|modules,bcmills,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ gotip version\r\ngo version devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000 linux/amd64\r\n</pre>\r\n\r\nSame result with 1.18.6, 1.19.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/icio/.cache/go-build""\r\nGOENV=""/home/icio/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/icio/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/icio/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/icio/sdk/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/icio/sdk/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/icio/go/src/github.com/icio/go-get-panic/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2460736486=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun `go get -u golang.org/x/tools` with go.mod:\r\n\r\n```go.mod\r\nmodule github.com/icio/go-get-panic\r\n\r\ngo 1.18\r\n\r\nrequire (\r\n\tgolang.org/x/net v0.1.0\r\n\tgolang.org/x/sync v0.0.0-20220601150217-0de741cfad7f\r\n\tgolang.org/x/text v0.4.0\r\n)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\ngo.mod updated with latest golang.org/x/tools version.\r\n\r\n### What did you see instead?\r\n\r\n```\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n\r\ngoroutine 1 [running]:\r\ncmd/go/internal/modget.(*resolver).updateBuildList.func1({{0xc0000281e0, 0x11}, {0xc000032690, 0x22}})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1760 +0xd4\r\ncmd/go/internal/modget.(*resolver).updateBuildList(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0x0, 0x0, 0x0})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1765 +0x54c\r\ncmd/go/internal/modget.(*resolver).resolveQueries(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0xc000014058, 0x1, 0xc0000a3d78?})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1243 +0x1a5\r\ncmd/go/internal/modget.runGet({0xb2d5d0, 0xc00002c0f8}, 0xc0000285e8?, {0xc0000240f0, 0x1, 0x1})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:314 +0x408\r\nmain.invoke(0xe371a0, {0xc0000240d0, 0x3, 0x3})\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:225 +0x3d9\r\nmain.main()\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:179 +0x7ce\r\n```\r\n\r\n### To reproduce\r\n\r\n```\r\n$ git clone https://github.com/icio/go-get-panic\r\nCloning into 'go-get-panic'...\r\nremote: Enumerating objects: 7, done.\r\nremote: Counting objects: 100% (7/7), done.\r\nremote: Compressing objects: 100% (5/5), done.\r\nremote: Total 7 (delta 1), reused 7 (delta 1), pack-reused 0\r\nReceiving objects: 100% (7/7), done.\r\nResolving deltas: 100% (1/1), done.\r\n\r\n$ cd go-get-panic\r\n\r\n$ git checkout 2cbc2db2a48105fa2b71ec69d11b6496ba52c263\r\n\r\n$ git rev-parse HEAD\r\n2cbc2db2a48105fa2b71ec69d11b6496ba52c263\r\n\r\n$ gotip version\r\ngo version devel go1.20-e09bbae Sat Oct 29 04:48:07 2022 +0000 linux/amd64\r\n\r\n$ gotip get -u golang.org/x/tools\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n\r\ngoroutine 1 [running]:\r\ncmd/go/internal/modget.(*resolver).updateBuildList.func1({{0xc0000281e0, 0x11}, {0xc000032690, 0x22}})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1760 +0xd4\r\ncmd/go/internal/modget.(*resolver).updateBuildList(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0x0, 0x0, 0x0})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1765 +0x54c\r\ncmd/go/internal/modget.(*resolver).resolveQueries(0xc00023c000, {0xb2d5d0, 0xc00002c0f8}, {0xc000014058, 0x1, 0xc0000a3d78?})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:1243 +0x1a5\r\ncmd/go/internal/modget.runGet({0xb2d5d0, 0xc00002c0f8}, 0xc0000285e8?, {0xc0000240f0, 0x1, 0x1})\r\n        /home/icio/sdk/gotip/src/cmd/go/internal/modget/get.go:314 +0x408\r\nmain.invoke(0xe371a0, {0xc0000240d0, 0x3, 0x3})\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:225 +0x3d9\r\nmain.main()\r\n        /home/icio/sdk/gotip/src/cmd/go/main.go:179 +0x7ce\r\n```\r\n\r\nThis reproduces even if you remove the go.sum:\r\n\r\n```\r\n$ rm go.sum && gotip get -u golang.org/x/tools 2>&1 | head -1\r\npanic: internal error: can't find reason for requirement on golang.org/x/sync@v0.0.0-20220601150217-0de741cfad7f\r\n```\r\n\r\nUncommenting any of the requirements in go.mod and re-running `go get -u golang.org/x/tools` will allow `go get` to succeed. E.g.:\r\n\r\n```\r\n$ sed -i '/x\\/net/d' go.mod  \r\n\r\n$ git diff\r\ndiff --git a/go.mod b/go.mod\r\nindex cc0392c..05b38b1 100644\r\n--- a/go.mod\r\n+++ b/go.mod\r\n@@ -3,7 +3,6 @@ module github.com/icio/go-get-panic\r\n go 1.18\r\n \r\n require (\r\n-       golang.org/x/net v0.1.0\r\n        golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f\r\n        golang.org/x/text v0.4.0\r\n )\r\n\r\n$ go get -u golang.org/x/tools\r\ngo: downgraded golang.org/x/text v0.4.0 => v0.3.7\r\ngo: upgraded golang.org/x/tools v0.1.12 => v0.2.0\r\n```\r\n\r\nIn the repository where I first encountered, this I was able to fix `go get -u golang.org/x/tools` by removing the `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f` line. Next, re-running `go mod tidy` reintroduces `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f` to go.mod. I'm not sure if this is related, but despite having a ./go.mod at the root of the project, we also have a ./cmd/ci-test-utility/go.mod which contains `golang.org/x/sync v0.0.0-20220601150217-0de741cfad7f`.",go.mod\r\nmodule github.com/icio/go-get-panic\r\n\r\ngo 1.18\r\n\r\nrequire (\r\n\tgolang.org/x/net v0.1.0\r\n\tgolang.org/x/sync v0.0.0-20220601150217-0de741cfad7f\r\n\tgolang.org/x/text v0.4.0\r\n)\r\n
56486,"fmt: Printf flag '0' is not ignored for strings<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/k/.cache/go-build""\r\nGOENV=""/home/k/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/k/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/k/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build536070510=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/thI6FNjWrY_G\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\nabc\r\n\r\nAccording to the [doc](https://pkg.go.dev/fmt#pkg-overview), the flag '0' is ignored for strings.\r\n> '0' pad with leading zeros rather than spaces; for numbers, this moves the padding after the sign; ignored for strings, byte slices and byte arrays\r\n\r\n\r\n### What did you see instead?\r\n00abc\r\n\r\n### Background\r\nI originally asked this question in [Stackoverflow](https://stackoverflow.com/q/74246342/10009424). [Pak Uula](https://stackoverflow.com/a/74246921/10009424) helps check the source code and this issue seems to be a bug.\r\n> [The source code](https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/fmt/print.go;l=1037) resets the zero flag only for - (minus) flag. It is not modified neither for strings nor for any other type.\r\nAnd the [function that outputs a string](https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/fmt/format.go;l=108) doesn't reset the zero flag either.",NeedsFix|release-blocker,robpike,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/k/.cache/go-build""\r\nGOENV=""/home/k/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/k/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/k/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build536070510=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://go.dev/play/p/thI6FNjWrY_G\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n    fmt.Printf(""%05s"", ""abc"")\r\n    // print 00abc\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nabc\r\n\r\nAccording to the [doc](https://pkg.go.dev/fmt#pkg-overview), the flag '0' is ignored for strings.\r\n> '0' pad with leading zeros rather than spaces; for numbers, this moves the padding after the sign; ignored for strings, byte slices and byte arrays\r\n\r\n\r\n### What did you see instead?\r\n00abc\r\n\r\n### Background\r\nI originally asked this question in [Stackoverflow](https://stackoverflow.com/q/74246342/10009424). [Pak Uula](https://stackoverflow.com/a/74246921/10009424) helps check the source code and this issue seems to be a bug.\r\n> [The source code](https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/fmt/print.go;l=1037) resets the zero flag only for - (minus) flag. It is not modified neither for strings nor for any other type.\r\nAnd the [function that outputs a string](https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/fmt/format.go;l=108) doesn't reset the zero flag either.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n    fmt.Printf(""%05s"", ""abc"")\r\n    // print 00abc\r\n}\r\n"
56429,"debug/elf: index out of range triggered by DynamicSymbols()A malformed ELF file (generated through fuzzing, attached) caused this issue when calling DynamicSymbols().\r\n\r\n### Stacktrace ###\r\n```\r\n/home/tim/src/go/bin/go test -run=FuzzGetBuildID/af27d09108d1449f--- FAIL: FuzzGetBuildID (0.08s)\r\n    --- FAIL: FuzzGetBuildID/af27d09108d1449f (0.00s)\r\npanic: runtime error: index out of range [1] with length 1 [recovered]\r\n        panic: runtime error: index out of range [1] with length 1\r\n\r\ngoroutine 37 [running]:\r\ntesting.tRunner.func1.2({0xfe4dc0, 0xc000040e58})\r\n        /home/tim/src/go/src/testing/testing.go:1451 +0x24e\r\ntesting.tRunner.func1()\r\n        /home/tim/src/go/src/testing/testing.go:1454 +0x39f\r\npanic({0xfe4dc0, 0xc000040e58})\r\n        /home/tim/src/go/src/runtime/panic.go:884 +0x213\r\nencoding/binary.littleEndian.Uint16(...)\r\n        /home/tim/src/go/src/encoding/binary/binary.go:62\r\ndebug/elf.(*File).gnuVersion(0xc0005fed20, 0xc0001bc7e0?)\r\n        /home/tim/src/go/src/debug/elf/file.go:1578 +0x77\r\ndebug/elf.(*File).DynamicSymbols(0xc0000cec80?)\r\n        /home/tim/src/go/src/debug/elf/file.go:1457 +0xaa\r\ngithub.com/optimyze/prodfiler/libpf/pfelf.GetDynamicSymbols(0xc0005fed20?)\r\n        /home/tim/go/src/github.com/elastic/prodfiler/libpf/pfelf/pfelf.go:540 +0x19\r\ngithub.com/optimyze/prodfiler/libpf/pfelf_test.FuzzGetBuildID.func1(0x0?, {0xc0003e7800?, 0x0?, 0x46c059?})\r\n        /home/tim/go/src/github.com/elastic/prodfiler/libpf/pfelf/pfelf_test.go:80 +0xe9\r\nreflect.Value.call({0xebb0a0?, 0x10e0920?, 0x13?}, {0x1057b29, 0x4}, {0xc000321e60, 0x2, 0x2?})\r\n        /home/tim/src/go/src/reflect/value.go:586 +0xb09\r\nreflect.Value.Call({0xebb0a0?, 0x10e0920?, 0x16fb7c0?}, {0xc000321e60?, 0x1054300?, 0xc0005be8b8?})\r\n        /home/tim/src/go/src/reflect/value.go:370 +0xbc\r\ntesting.(*F).Fuzz.func1.1(0xc00043f208?)\r\n        /home/tim/src/go/src/testing/fuzz.go:336 +0x3f3\r\ntesting.tRunner(0xc0004ca340, 0xc0004c4090)\r\n        /home/tim/src/go/src/testing/testing.go:1501 +0x10b\r\ncreated by testing.(*F).Fuzz.func1\r\n        /home/tim/src/go/src/testing/fuzz.go:323 +0x5b9\r\nexit status 2\r\nFAIL    github.com/optimyze/prodfiler/libpf/pfelf       0.182s\r\n```\r\n\r\nThe Go version is from latest `master` (commit 939f9fd64a740ef770a0ca3588f8c193dceebe83).\r\n```\r\n$ go version\r\ngo version devel go1.20-939f9fd64a Wed Oct 26 05:51:33 2022 +0000 linux/amd64\r\n```\r\n\r\nLooking at the code\r\n\r\n\r\nHere we can see that if `len(f.gnuVersym)` is 3 and the input value `i` is 0, a slice of len 1 is passed to `Uint16()`. But Uint16 requires the slice to have a len of at least two bytes.\r\n\r\nI also wonder if it is intentional that a 0 input accesses the second array entry of f.gnuVersym instead of the first (is there a off-by-one issue hidden here ?).\r\n\r\n### Reproducer, ELF corpus ###\r\n[af27d09108d1449f.gz](https://github.com/golang/go/files/9867682/af27d09108d1449f.gz)\r\n\r\nPassing this file to `elf.Open()` and then calling `DynamicSymbols()` triggers the issue.\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,thanm,"A malformed ELF file (generated through fuzzing, attached) caused this issue when calling DynamicSymbols().\r\n\r\n### Stacktrace ###\r\n```\r\n/home/tim/src/go/bin/go test -run=FuzzGetBuildID/af27d09108d1449f--- FAIL: FuzzGetBuildID (0.08s)\r\n    --- FAIL: FuzzGetBuildID/af27d09108d1449f (0.00s)\r\npanic: runtime error: index out of range [1] with length 1 [recovered]\r\n        panic: runtime error: index out of range [1] with length 1\r\n\r\ngoroutine 37 [running]:\r\ntesting.tRunner.func1.2({0xfe4dc0, 0xc000040e58})\r\n        /home/tim/src/go/src/testing/testing.go:1451 +0x24e\r\ntesting.tRunner.func1()\r\n        /home/tim/src/go/src/testing/testing.go:1454 +0x39f\r\npanic({0xfe4dc0, 0xc000040e58})\r\n        /home/tim/src/go/src/runtime/panic.go:884 +0x213\r\nencoding/binary.littleEndian.Uint16(...)\r\n        /home/tim/src/go/src/encoding/binary/binary.go:62\r\ndebug/elf.(*File).gnuVersion(0xc0005fed20, 0xc0001bc7e0?)\r\n        /home/tim/src/go/src/debug/elf/file.go:1578 +0x77\r\ndebug/elf.(*File).DynamicSymbols(0xc0000cec80?)\r\n        /home/tim/src/go/src/debug/elf/file.go:1457 +0xaa\r\ngithub.com/optimyze/prodfiler/libpf/pfelf.GetDynamicSymbols(0xc0005fed20?)\r\n        /home/tim/go/src/github.com/elastic/prodfiler/libpf/pfelf/pfelf.go:540 +0x19\r\ngithub.com/optimyze/prodfiler/libpf/pfelf_test.FuzzGetBuildID.func1(0x0?, {0xc0003e7800?, 0x0?, 0x46c059?})\r\n        /home/tim/go/src/github.com/elastic/prodfiler/libpf/pfelf/pfelf_test.go:80 +0xe9\r\nreflect.Value.call({0xebb0a0?, 0x10e0920?, 0x13?}, {0x1057b29, 0x4}, {0xc000321e60, 0x2, 0x2?})\r\n        /home/tim/src/go/src/reflect/value.go:586 +0xb09\r\nreflect.Value.Call({0xebb0a0?, 0x10e0920?, 0x16fb7c0?}, {0xc000321e60?, 0x1054300?, 0xc0005be8b8?})\r\n        /home/tim/src/go/src/reflect/value.go:370 +0xbc\r\ntesting.(*F).Fuzz.func1.1(0xc00043f208?)\r\n        /home/tim/src/go/src/testing/fuzz.go:336 +0x3f3\r\ntesting.tRunner(0xc0004ca340, 0xc0004c4090)\r\n        /home/tim/src/go/src/testing/testing.go:1501 +0x10b\r\ncreated by testing.(*F).Fuzz.func1\r\n        /home/tim/src/go/src/testing/fuzz.go:323 +0x5b9\r\nexit status 2\r\nFAIL    github.com/optimyze/prodfiler/libpf/pfelf       0.182s\r\n```\r\n\r\nThe Go version is from latest `master` (commit 939f9fd64a740ef770a0ca3588f8c193dceebe83).\r\n```\r\n$ go version\r\ngo version devel go1.20-939f9fd64a Wed Oct 26 05:51:33 2022 +0000 linux/amd64\r\n```\r\n\r\nLooking at the code\r\n```Go\r\nfunc (f *File) gnuVersion(i int) (library string, version string) { \r\n        // Each entry is two bytes.\r\n        i = (i + 1) * 2\r\n        if i >= len(f.gnuVersym) {\r\n                return\r\n        }\r\n        j := int(f.ByteOrder.Uint16(f.gnuVersym[i:])) <--- this line triggers the panic (L1578)\r\n        if j < 2 || j >= len(f.gnuNeed) {\r\n                return\r\n        }\r\n        n := &f.gnuNeed[j]\r\n        return n.File, n.Name\r\n}       \r\n```\r\n\r\nHere we can see that if `len(f.gnuVersym)` is 3 and the input value `i` is 0, a slice of len 1 is passed to `Uint16()`. But Uint16 requires the slice to have a len of at least two bytes.\r\n\r\nI also wonder if it is intentional that a 0 input accesses the second array entry of f.gnuVersym instead of the first (is there a off-by-one issue hidden here ?).\r\n\r\n### Reproducer, ELF corpus ###\r\n[af27d09108d1449f.gz](https://github.com/golang/go/files/9867682/af27d09108d1449f.gz)\r\n\r\nPassing this file to `elf.Open()` and then calling `DynamicSymbols()` triggers the issue.\r\n","Go\r\nfunc (f *File) gnuVersion(i int) (library string, version string) { \r\n        // Each entry is two bytes.\r\n        i = (i + 1) * 2\r\n        if i >= len(f.gnuVersym) {\r\n                return\r\n        }\r\n        j := int(f.ByteOrder.Uint16(f.gnuVersym[i:])) <--- this line triggers the panic (L1578)\r\n        if j < 2 || j >= len(f.gnuNeed) {\r\n                return\r\n        }\r\n        n := &f.gnuNeed[j]\r\n        return n.File, n.Name\r\n}       \r\n"
56372,"x/pkgsite: Code Block should show line numbers<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\nIf you would like to have your package removed, please file an issue at https://golang.org/s/pkgsite-package-removal.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n Example: https://pkg.go.dev/golang.org/x/sync/errgroup#Group.Wait\r\n \r\n \r\n### What is your user agent?\r\n \r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n [Mozilla/5.0 (X11; Linux x86_64; rv:105.0) Gecko/20100101 Firefox/105.0](https://developers.whatismybrowser.com/useragents/parse/?analyse-my-user-agent=yes)\r\n \r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n![Screenshot from 2022-10-21 17-52-28](https://user-images.githubusercontent.com/11015077/197194705-5b08fd93-aba4-4aea-a8fb-bf776b59129c.png)\r\n \r\n \r\n \r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\nModify the example code, in this case, it was a bad code and panicked.\r\n \r\n\r\n \r\n### What did you expect to see?\r\n Error message\r\n```\r\nOutput:\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x61cb7a]\r\n\r\ngoroutine 7 [running]:\r\nmain.main.func1()\r\n\t/tmp/sandbox1760300329/prog.go:25 +0x7a\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t/tmp/gopath4274196458/pkg/mod/golang.org/x/sync@v0.1.0/errgroup/errgroup.go:75 +0x64\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go\r\n\t/tmp/gopath4274196458/pkg/mod/golang.org/x/sync@v0.1.0/errgroup/errgroup.go:72 +0xa5\r\n\r\n```\r\nIt tells the line on which error occurred. But the code is not numbered, and hence it is difficult to determine the code line that threw error.\r\n \r\nIt would be helpful if the code blocks were numbered.\r\n \r\n### What did you see instead?\r\n\r\n\r\n\r\n",NeedsFix|pkgsite,dle8,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\nIf you would like to have your package removed, please file an issue at https://golang.org/s/pkgsite-package-removal.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n Example: https://pkg.go.dev/golang.org/x/sync/errgroup#Group.Wait\r\n \r\n \r\n### What is your user agent?\r\n \r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n [Mozilla/5.0 (X11; Linux x86_64; rv:105.0) Gecko/20100101 Firefox/105.0](https://developers.whatismybrowser.com/useragents/parse/?analyse-my-user-agent=yes)\r\n \r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n![Screenshot from 2022-10-21 17-52-28](https://user-images.githubusercontent.com/11015077/197194705-5b08fd93-aba4-4aea-a8fb-bf776b59129c.png)\r\n \r\n \r\n \r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\nModify the example code, in this case, it was a bad code and panicked.\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""net/http""\r\n\r\n\t""golang.org/x/sync/errgroup""\r\n)\r\n\r\nfunc main() {\r\n\tg := new(errgroup.Group)\r\n\tvar urls = []string{\r\n\t\t""http://www.golang.org/"",\r\n\t\t""http://www.google.com/"",\r\n\t\t""http://www.somestupidname.com/"",\r\n\t}\r\n\tfor _, url := range urls {\r\n\t\t// Launch a goroutine to fetch the URL.\r\n\t\turl := url // https://golang.org/doc/faq#closures_and_goroutines\r\n\t\tg.Go(func() error {\r\n\t\t\t// Fetch the URL.\r\n\t\t\tresp, err := http.Get(url)\r\n\t\t\tif err != nil {\r\n\t\t\t\tfmt.Println(""error encountered"")\r\n\t\t\t\tresp.Body.Close()\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\t\t\tfmt.Println(""ignoring error if any"")\r\n\t\t\tresp.Body.Close()\r\n\t\t\treturn nil\r\n\t\t})\r\n\t}\r\n\t// Wait for all HTTP fetches to complete.\r\n\tif err := g.Wait(); err == nil {\r\n\t\tfmt.Println(""Successfully fetched all URLs."")\r\n\t}\r\n}\r\n``` \r\n\r\n \r\n### What did you expect to see?\r\n Error message\r\n```\r\nOutput:\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x61cb7a]\r\n\r\ngoroutine 7 [running]:\r\nmain.main.func1()\r\n\t/tmp/sandbox1760300329/prog.go:25 +0x7a\r\ngolang.org/x/sync/errgroup.(*Group).Go.func1()\r\n\t/tmp/gopath4274196458/pkg/mod/golang.org/x/sync@v0.1.0/errgroup/errgroup.go:75 +0x64\r\ncreated by golang.org/x/sync/errgroup.(*Group).Go\r\n\t/tmp/gopath4274196458/pkg/mod/golang.org/x/sync@v0.1.0/errgroup/errgroup.go:72 +0xa5\r\n\r\n```\r\nIt tells the line on which error occurred. But the code is not numbered, and hence it is difficult to determine the code line that threw error.\r\n \r\nIt would be helpful if the code blocks were numbered.\r\n \r\n### What did you see instead?\r\n\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""net/http""\r\n\r\n\t""golang.org/x/sync/errgroup""\r\n)\r\n\r\nfunc main() {\r\n\tg := new(errgroup.Group)\r\n\tvar urls = []string{\r\n\t\t""http://www.golang.org/"",\r\n\t\t""http://www.google.com/"",\r\n\t\t""http://www.somestupidname.com/"",\r\n\t}\r\n\tfor _, url := range urls {\r\n\t\t// Launch a goroutine to fetch the URL.\r\n\t\turl := url // https://golang.org/doc/faq#closures_and_goroutines\r\n\t\tg.Go(func() error {\r\n\t\t\t// Fetch the URL.\r\n\t\t\tresp, err := http.Get(url)\r\n\t\t\tif err != nil {\r\n\t\t\t\tfmt.Println(""error encountered"")\r\n\t\t\t\tresp.Body.Close()\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\t\t\tfmt.Println(""ignoring error if any"")\r\n\t\t\tresp.Body.Close()\r\n\t\t\treturn nil\r\n\t\t})\r\n\t}\r\n\t// Wait for all HTTP fetches to complete.\r\n\tif err := g.Wait(); err == nil {\r\n\t\tfmt.Println(""Successfully fetched all URLs."")\r\n\t}\r\n}\r\n"
56370,"cmd/compile/internal: DATA RACE if `-coverprofile` flag is provided<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$  gotip version\r\ngo version devel go1.20-c75b10b Fri Oct 21 05:28:30 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNot from my experience\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ gotip env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/olegbespalov/.cache/go-build""\r\nGOENV=""/home/olegbespalov/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/olegbespalov/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/olegbespalov/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/olegbespalov/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/olegbespalov/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-c75b10b Fri Oct 21 05:28:30 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/olegbespalov/projects/sandbox/go/race/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build352388576=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun\r\n\r\n```\r\ngotip test --count=1 -race -coverprofile=/tmp/code-coverage.out ./...\r\n```\r\n\r\nOn the package that `filter`\r\n\r\n\r\n`filter.go`\r\n\r\n\r\n`filter_test.go`\r\n\r\n\r\nMy `go.mod`, just in case \r\n```\r\nmodule github.com/olegbespalov/race\r\n\r\ngo 1.19\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo data races\r\n\r\n### What did you see instead?\r\n\r\nA race was detected.\r\n\r\n<details><summary><code>race trace stack</code> </summary>\r\n\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe0 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe0 by goroutine 7:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test1()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:12 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe0 by goroutine 9:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test3()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:24 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe0 by goroutine 10:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test4()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:30 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 9 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 10 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe4 by goroutine 9:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x7c\r\n  github.com/olegbespalov/race/filter_test.Test3()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:24 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe4 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x7c\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 9 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe8 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x92\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe8 by goroutine 10:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x92\r\n  github.com/olegbespalov/race/filter_test.Test4()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:30 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 10 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n--- FAIL: Test1 (0.00s)\r\n--- FAIL: Test2 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\n--- FAIL: Test3 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\n--- FAIL: Test4 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\nFAIL\r\n\tgithub.com/olegbespalov/race/filter\tcoverage: 50.0% of statements\r\nFAIL\tgithub.com/olegbespalov/race/filter\t0.011s\r\nFAIL\r\n```\r\n\r\n</details>\r\n\r\nSo this is around for a week or so in our CI. I tried to `git bisect`, and it showed me that this commit https://github.com/golang/go/commit/4a459cbbad7b9528e5f569157b157800866a4fb8 is the one where it started, but maybe I'm wrong here :shrug: \r\n\r\nIf I run the go test without `-coverprofile` flag, no data race appears.\r\n\r\n",NeedsFix|FrozenDueToAge,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$  gotip version\r\ngo version devel go1.20-c75b10b Fri Oct 21 05:28:30 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNot from my experience\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ gotip env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/olegbespalov/.cache/go-build""\r\nGOENV=""/home/olegbespalov/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/olegbespalov/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/olegbespalov/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/olegbespalov/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/olegbespalov/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-c75b10b Fri Oct 21 05:28:30 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/olegbespalov/projects/sandbox/go/race/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-O2 -g""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-O2 -g""\r\nCGO_FFLAGS=""-O2 -g""\r\nCGO_LDFLAGS=""-O2 -g""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build352388576=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun\r\n\r\n```\r\ngotip test --count=1 -race -coverprofile=/tmp/code-coverage.out ./...\r\n```\r\n\r\nOn the package that `filter`\r\n\r\n\r\n`filter.go`\r\n```go\r\npackage filter\r\n\r\nfunc New() func(error) bool {\r\n\treturn func(error) bool {\r\n\t\treturn false\r\n\t}\r\n}\r\n```\r\n\r\n`filter_test.go`\r\n```go\r\npackage filter_test\r\n\r\nimport (\r\n\t""testing""\r\n\r\n\t""github.com/olegbespalov/race/filter""\r\n)\r\n\r\nfunc Test1(t *testing.T) {\r\n\tt.Parallel()\r\n\r\n\t_ = filter.New()\r\n}\r\n\r\nfunc Test2(t *testing.T) {\r\n\tt.Parallel()\r\n\r\n\t_ = filter.New()\r\n}\r\n\r\nfunc Test3(t *testing.T) {\r\n\tt.Parallel()\r\n\r\n\t_ = filter.New()\r\n}\r\n\r\nfunc Test4(t *testing.T) {\r\n\tt.Parallel()\r\n\r\n\t_ = filter.New()\r\n}\r\n```\r\n\r\nMy `go.mod`, just in case \r\n```\r\nmodule github.com/olegbespalov/race\r\n\r\ngo 1.19\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo data races\r\n\r\n### What did you see instead?\r\n\r\nA race was detected.\r\n\r\n<details><summary><code>race trace stack</code> </summary>\r\n\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe0 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe0 by goroutine 7:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test1()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:12 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 7 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe0 by goroutine 9:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test3()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:24 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe0 by goroutine 10:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x50\r\n  github.com/olegbespalov/race/filter_test.Test4()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:30 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 9 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 10 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe4 by goroutine 9:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x7c\r\n  github.com/olegbespalov/race/filter_test.Test3()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:24 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe4 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x7c\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 9 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x000001692fe8 by goroutine 8:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x92\r\n  github.com/olegbespalov/race/filter_test.Test2()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:18 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nPrevious write at 0x000001692fe8 by goroutine 10:\r\n  github.com/olegbespalov/race/filter.New()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter.go:3 +0x92\r\n  github.com/olegbespalov/race/filter_test.Test4()\r\n      /home/olegbespalov/projects/sandbox/go/race/filter/filter_test.go:30 +0x31\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.(*T).Run.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x47\r\n\r\nGoroutine 8 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n\r\nGoroutine 10 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1548 +0x75d\r\n  testing.runTests.func1()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1913 +0x72\r\n  testing.tRunner()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1501 +0x216\r\n  testing.runTests()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1911 +0x884\r\n  testing.(*M).Run()\r\n      /home/olegbespalov/sdk/gotip/src/testing/testing.go:1783 +0xa84\r\n  main.main()\r\n      _testmain.go:86 +0x2fc\r\n==================\r\n--- FAIL: Test1 (0.00s)\r\n--- FAIL: Test2 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\n--- FAIL: Test3 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\n--- FAIL: Test4 (0.00s)\r\n    testing.go:1374: race detected during execution of test\r\nFAIL\r\n\tgithub.com/olegbespalov/race/filter\tcoverage: 50.0% of statements\r\nFAIL\tgithub.com/olegbespalov/race/filter\t0.011s\r\nFAIL\r\n```\r\n\r\n</details>\r\n\r\nSo this is around for a week or so in our CI. I tried to `git bisect`, and it showed me that this commit https://github.com/golang/go/commit/4a459cbbad7b9528e5f569157b157800866a4fb8 is the one where it started, but maybe I'm wrong here :shrug: \r\n\r\nIf I run the go test without `-coverprofile` flag, no data race appears.\r\n\r\n```bash\r\n$ gotip test --count=1 -race ./...\r\nok      github.com/olegbespalov/race/filter     0.021s\r\n```",go\r\npackage filter\r\n\r\nfunc New() func(error) bool {\r\n\treturn func(error) bool {\r\n\t\treturn false\r\n\t}\r\n}\r\n
56352,"x/net/http2/h2c: ineffective mitigation for unsafe io.ReadAll### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.19\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nIn https://go.dev/cl/407454, an `io.ReadAll(r.Body)` call was added to the h2c handler. This is unsafe for untrusted inputs generally. The CL also adds a comment (https://go-review.googlesource.com/c/net/+/407454/4/http2/h2c/h2c.go) to use `MaxBytesHandler` if this is an issue.\r\n\r\nThere are two issues here:\r\n\r\n1. Not much that can be done now, but this essentially introduced a DOS vector into the http2 library without any release notes. While the comment is helpful, most users probably don't read the full diff of changes in core libraries like this. It would be nice to have more visibility into unsafe changes, or to make them opt-in, in the future.\r\n\r\n2. The mitigation provided isn't useable in many cases\r\n\r\nConsider the following program:\r\n\r\n\r\nI then run the following curls:\r\n```\r\ncurl -X POST -d @output.dat localhost:8888\r\ncurl -X POST -d @output.dat localhost:8888 --http2-prior-knowledge\r\ncurl -X POST -d @output.dat localhost:8888 --http2\r\n```\r\n\r\nUp until the final call, memory usage is ~0. Its only the final call that is an issue.\r\n\r\nHowever, if I add the `MaxBytesHandler`, all of them are broken.\r\n\r\nIts also not possible to just disable H2c upgrade and allow only prior knowledge or http/1.1.\r\n\r\nOne solution _could_ be to try to make a `MaxBytesHandlerForH2CUpdate`, copying the `isH2CUpgrade` and hoping the internal logic never changes. Something like:\r\n\r\n\r\n\r\nHowever, I would expect that it is possible to use h2c in a secure manner without resorting to workarounds like this.\r\n",Security|NeedsFix|FrozenDueToAge,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.19\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nIn https://go.dev/cl/407454, an `io.ReadAll(r.Body)` call was added to the h2c handler. This is unsafe for untrusted inputs generally. The CL also adds a comment (https://go-review.googlesource.com/c/net/+/407454/4/http2/h2c/h2c.go) to use `MaxBytesHandler` if this is an issue.\r\n\r\nThere are two issues here:\r\n\r\n1. Not much that can be done now, but this essentially introduced a DOS vector into the http2 library without any release notes. While the comment is helpful, most users probably don't read the full diff of changes in core libraries like this. It would be nice to have more visibility into unsafe changes, or to make them opt-in, in the future.\r\n\r\n2. The mitigation provided isn't useable in many cases\r\n\r\nConsider the following program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""log""\r\n\t""net/http""\r\n\t""runtime""\r\n\r\n\t""golang.org/x/net/http2""\r\n\t""golang.org/x/net/http2/h2c""\r\n)\r\n\r\nfunc main() {\r\n\th2s := &http2.Server{}\r\n\r\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tPrintMemUsage()\r\n\t\tn, err := io.Copy(io.Discard, r.Body)\r\n\t\tfmt.Fprintf(w, ""http: %v, res: %v/%v\\n"", r.Proto, n, err)\r\n\t\tlog.Printf(""http: %v, res: %v/%v\\n"", r.Proto, n, err)\r\n\t\tPrintMemUsage()\r\n\t})\r\n\r\n\tserver := &http.Server{\r\n\t\tAddr:    ""0.0.0.0:8888"",\r\n\t\tHandler: h2c.NewHandler(handler, h2s),\r\n\t}\r\n\r\n\tfmt.Printf(""Listening [0.0.0.0:8888]...\\n"")\r\n\tlog.Println(server.ListenAndServe())\r\n}\r\nfunc PrintMemUsage() {\r\n\tvar m runtime.MemStats\r\n\truntime.ReadMemStats(&m)\r\n\t// For info on each, see: https://golang.org/pkg/runtime/#MemStats\r\n\tfmt.Printf(""Alloc = %v MiB"", bToMb(m.Alloc))\r\n\tfmt.Printf(""\\tTotalAlloc = %v MiB"", bToMb(m.TotalAlloc))\r\n\tfmt.Printf(""\\tSys = %v MiB"", bToMb(m.Sys))\r\n\tfmt.Printf(""\\tNumGC = %v\\n"", m.NumGC)\r\n}\r\n\r\nfunc bToMb(b uint64) uint64 {\r\n\treturn b / 1024 / 1024\r\n}\r\n```\r\n\r\nI then run the following curls:\r\n```\r\ncurl -X POST -d @output.dat localhost:8888\r\ncurl -X POST -d @output.dat localhost:8888 --http2-prior-knowledge\r\ncurl -X POST -d @output.dat localhost:8888 --http2\r\n```\r\n\r\nUp until the final call, memory usage is ~0. Its only the final call that is an issue.\r\n\r\nHowever, if I add the `MaxBytesHandler`, all of them are broken.\r\n\r\nIts also not possible to just disable H2c upgrade and allow only prior knowledge or http/1.1.\r\n\r\nOne solution _could_ be to try to make a `MaxBytesHandlerForH2CUpdate`, copying the `isH2CUpgrade` and hoping the internal logic never changes. Something like:\r\n\r\n```go\r\n\r\nfunc MaxBytesHandlerForH2CUpdate(h http.Handler, n int64) http.Handler {\r\n\tmbh := http.MaxBytesHandler(h, n)\r\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tif isH2CUpgrade(r.Header) {\r\n\t\t\tmbh.ServeHTTP(w, r)\r\n\t\t}\r\n\t\th.ServeHTTP(w, r)\r\n\t})\r\n}\r\n\r\nfunc isH2CUpgrade(h http.Header) bool {\r\n\treturn httpguts.HeaderValuesContainsToken(h[textproto.CanonicalMIMEHeaderKey(""Upgrade"")], ""h2c"") &&\r\n\t\thttpguts.HeaderValuesContainsToken(h[textproto.CanonicalMIMEHeaderKey(""Connection"")], ""HTTP2-Settings"")\r\n}\r\n```\r\n\r\nHowever, I would expect that it is possible to use h2c in a secure manner without resorting to workarounds like this.\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""io""\r\n\t""log""\r\n\t""net/http""\r\n\t""runtime""\r\n\r\n\t""golang.org/x/net/http2""\r\n\t""golang.org/x/net/http2/h2c""\r\n)\r\n\r\nfunc main() {\r\n\th2s := &http2.Server{}\r\n\r\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tPrintMemUsage()\r\n\t\tn, err := io.Copy(io.Discard, r.Body)\r\n\t\tfmt.Fprintf(w, ""http: %v, res: %v/%v\\n"", r.Proto, n, err)\r\n\t\tlog.Printf(""http: %v, res: %v/%v\\n"", r.Proto, n, err)\r\n\t\tPrintMemUsage()\r\n\t})\r\n\r\n\tserver := &http.Server{\r\n\t\tAddr:    ""0.0.0.0:8888"",\r\n\t\tHandler: h2c.NewHandler(handler, h2s),\r\n\t}\r\n\r\n\tfmt.Printf(""Listening [0.0.0.0:8888]...\\n"")\r\n\tlog.Println(server.ListenAndServe())\r\n}\r\nfunc PrintMemUsage() {\r\n\tvar m runtime.MemStats\r\n\truntime.ReadMemStats(&m)\r\n\t// For info on each, see: https://golang.org/pkg/runtime/#MemStats\r\n\tfmt.Printf(""Alloc = %v MiB"", bToMb(m.Alloc))\r\n\tfmt.Printf(""\\tTotalAlloc = %v MiB"", bToMb(m.TotalAlloc))\r\n\tfmt.Printf(""\\tSys = %v MiB"", bToMb(m.Sys))\r\n\tfmt.Printf(""\\tNumGC = %v\\n"", m.NumGC)\r\n}\r\n\r\nfunc bToMb(b uint64) uint64 {\r\n\treturn b / 1024 / 1024\r\n}\r\n"
56317,"x/net/http2: Race in handler execution results in zero-byte data frame, causing incompatibility with gRPC<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""<scrubbed>""\r\nGOENV=""<scrubbed>""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""<scrubbed>""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""<scrubbed>""\r\nGOPRIVATE=""""\r\nGOPROXY=""<scrubbed>""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/tmp/bug/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3528461531=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a proprietary HTTP + gRPC reverse proxy, when issuing unary gRPC calls, I observe intermittent occurrences of the error:\r\n\r\n```\r\nrpc error: code = Internal desc = server closed the stream without sending trailers\r\n```\r\n\r\nThe occurrence of this error is not deterministically reproducible, and affects only a small percentage of requests. Usually, a client retry of the RPC alleviates the problem.\r\n\r\nSee the investigation notes after the survey questions in this issue.\r\n\r\n### What did you expect to see?\r\n\r\nI expect to see no occurrences of this error under regular operation.\r\n\r\n### What did you see instead?\r\n\r\nI see this error affecting 1 - 5% of requests.\r\n\r\n---\r\n\r\n### Context\r\n\r\nI'm working with a proprietary HTTP reverse proxy with built-in support for gRPC over HTTP/2.\r\n\r\n### Example\r\n\r\nThe proxy is proprietary, but its core logic is demonstrated below.\r\n\r\n\r\n\r\n### Symptom\r\n\r\nClients issuing gRPC calls through the proxy that return gRPC application-level errors intermittently (non-determinstically) observe errors from the grpc-go library `server closed the stream without sending trailers`.\r\n\r\n`GODEBUG=http2debug=2` reveals that the issue manifests only when Go's `http2.Server` writes a `HEADERS` frame with flag `END_HEADERS` followed by a zero-byte `DATA` frame with flag `END_STREAM`.\r\n\r\nThe issue does not manifest (i.e. the application-level error is propagated correctly) when Go's `http2.Server` writes a `HEADERS` frame with flags `END_HEADERS | END_STREAM`.\r\n\r\nNote that there are no trailers included in this message.\r\n\r\n#### Example trace with no errors (RPC returns successfully)\r\n\r\n```\r\n2022/10/18 00:12:57 http2: Transport encoding header "":method"" = ""POST""\r\n2022/10/18 00:12:57 http2: Transport encoding header "":path"" = ""/service/Method""\r\n2022/10/18 00:12:57 http2: Transport encoding header "":scheme"" = ""http""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""te"" = ""trailers""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""grpc-timeout"" = ""998862u""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""user-agent"" = ""grpc-go/1.49.0""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""x-forwarded-for"" = ""127.0.0.1""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote HEADERS flags=END_HEADERS stream=7 len=17\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote DATA stream=7 len=12 data=""\\x00\\x00\\x00\\x00\\a\\n\\x05\\b\\x02\\x12\\x01a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote DATA flags=END_STREAM stream=7 len=0 data=""""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:57 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Transport received PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote PING flags=ACK len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read HEADERS flags=END_STREAM|END_HEADERS stream=7 len=4\r\n2022/10/18 00:12:57 http2: decoded hpack field header field "":status"" = ""200""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""grpc-status"" = ""5""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:57 http2: Transport received HEADERS flags=END_STREAM|END_HEADERS stream=7 len=4\r\n```\r\n\r\n#### Example trace with error (internal error raised by grpc-go)\r\n\r\n```\r\n2022/10/18 00:12:55 http2: Transport encoding header "":method"" = ""POST""\r\n2022/10/18 00:12:55 http2: Transport encoding header "":path"" = ""/service/Method""\r\n2022/10/18 00:12:55 http2: Transport encoding header "":scheme"" = ""http""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""grpc-timeout"" = ""998585u""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""user-agent"" = ""grpc-go/1.49.0""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""te"" = ""trailers""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""x-forwarded-for"" = ""127.0.0.1""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote HEADERS flags=END_HEADERS stream=5 len=18\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote DATA stream=5 len=12 data=""\\x00\\x00\\x00\\x00\\a\\n\\x05\\b\\x02\\x12\\x01a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote DATA flags=END_STREAM stream=5 len=0 data=""""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:55 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Transport received PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote PING flags=ACK len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read HEADERS flags=END_STREAM|END_HEADERS stream=5 len=4\r\n2022/10/18 00:12:55 http2: decoded hpack field header field "":status"" = ""200""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""grpc-status"" = ""5""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:55 http2: Transport received HEADERS flags=END_STREAM|END_HEADERS stream=5 len=4\r\n2022/10/18 00:12:55 http2: server encoding header "":status"" = ""200""\r\n2022/10/18 00:12:55 http2: server encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: server encoding header ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:55 http2: server encoding header ""grpc-status"" = ""5""\r\n2022/10/18 00:12:55 http2: server encoding header ""date"" = ""Tue, 18 Oct 2022 07:12:55 GMT""\r\n2022/10/18 00:12:55 http2: Framer 0xc0003900e0: wrote HEADERS flags=END_HEADERS stream=1 len=89\r\n2022/10/18 00:12:55 http2: Framer 0xc0003900e0: wrote DATA flags=END_STREAM stream=1 len=0 data=""""\r\n```\r\n\r\n### RCA\r\n\r\nI believe this is due to a race caused by [concurrent `http.Handler` execution](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L1958) in `http2/server.go`.\r\n\r\nIn the case that handler execution completes before headers are written, [`rws.handlerDone` is true and Go includes `END_STREAM` in the initial `HEADERS` frame](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L2566). In the case that handler execution is still in-progress when the first write occurs, the `HEADERS` frame is written without `END_STREAM`, and a [subsequent write sends a zero-byte data frame with `END_STREAM`](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L2596), acting purely as a control message.\r\n\r\nUltimately this causes non-determinism where the specific scenario that *unary gRPC methods that return errors quickly* are disproportionately affected.\r\n\r\nAccording to gRPC specification, [`END_STREAM` should be included in the last `HEADERS` frame to indicate termination of the response](https://github.com/grpc/grpc/blob/b8b9fd7235ea820d5d7a3dab2a7ae41f602a11d2/doc/PROTOCOL-HTTP2.md?plain=1#L119). In grpc-go, [encountering `END_STREAM` in a data frame is an explicit error case](https://github.com/grpc/grpc-go/blob/28fae96c98813777d02f25b2aa2d701b468b41c0/internal/transport/http2_client.go#L1119). However, HTTP/2 protocol specification itself doesn't prohibit this.\r\n\r\n### Proposal\r\n\r\nA similar (identical?) issue was identified in nghttp2 (see: https://github.com/nghttp2/nghttp2/issues/588). The submitted fix was to include `END_STREAM` in the `HEADERS` payload if the body is empty and no trailers exist. I'm not sure if a similar approach is feasible in `http2.Server`.",NeedsInvestigation|FrozenDueToAge,neild,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""<scrubbed>""\r\nGOENV=""<scrubbed>""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""<scrubbed>""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""<scrubbed>""\r\nGOPRIVATE=""""\r\nGOPROXY=""<scrubbed>""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/tmp/bug/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3528461531=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a proprietary HTTP + gRPC reverse proxy, when issuing unary gRPC calls, I observe intermittent occurrences of the error:\r\n\r\n```\r\nrpc error: code = Internal desc = server closed the stream without sending trailers\r\n```\r\n\r\nThe occurrence of this error is not deterministically reproducible, and affects only a small percentage of requests. Usually, a client retry of the RPC alleviates the problem.\r\n\r\nSee the investigation notes after the survey questions in this issue.\r\n\r\n### What did you expect to see?\r\n\r\nI expect to see no occurrences of this error under regular operation.\r\n\r\n### What did you see instead?\r\n\r\nI see this error affecting 1 - 5% of requests.\r\n\r\n---\r\n\r\n### Context\r\n\r\nI'm working with a proprietary HTTP reverse proxy with built-in support for gRPC over HTTP/2.\r\n\r\n### Example\r\n\r\nThe proxy is proprietary, but its core logic is demonstrated below.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/tls""\r\n\t""net""\r\n\t""net/http""\r\n\t""net/http/httputil""\r\n\r\n\t""golang.org/x/net/http2""\r\n\t""golang.org/x/net/http2/h2c""\r\n)\r\n\r\nfunc main() {\r\n\ttr := &http2.Transport{\r\n\t\tAllowHTTP: true,\r\n\t\tDialTLS: func(network string, addr string, cfg *tls.Config) (net.Conn, error) {\r\n\t\t\treturn net.Dial(""tcp"", ""localhost:7001"")\r\n\t\t},\r\n\t}\r\n\r\n\trp := &httputil.ReverseProxy{\r\n\t\tTransport:     tr,\r\n\t\tFlushInterval: -1,\r\n\t\tDirector: func(req *http.Request) {\r\n\t\t\treq.URL.Scheme = ""http""\r\n\t\t},\r\n\t}\r\n\r\n\thandler := h2c.NewHandler(rp, &http2.Server{})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    ""localhost:7000"",\r\n\t\tHandler: handler,\r\n\t}\r\n\r\n\tsrv.ListenAndServe()\r\n}\r\n```\r\n\r\n### Symptom\r\n\r\nClients issuing gRPC calls through the proxy that return gRPC application-level errors intermittently (non-determinstically) observe errors from the grpc-go library `server closed the stream without sending trailers`.\r\n\r\n`GODEBUG=http2debug=2` reveals that the issue manifests only when Go's `http2.Server` writes a `HEADERS` frame with flag `END_HEADERS` followed by a zero-byte `DATA` frame with flag `END_STREAM`.\r\n\r\nThe issue does not manifest (i.e. the application-level error is propagated correctly) when Go's `http2.Server` writes a `HEADERS` frame with flags `END_HEADERS | END_STREAM`.\r\n\r\nNote that there are no trailers included in this message.\r\n\r\n#### Example trace with no errors (RPC returns successfully)\r\n\r\n```\r\n2022/10/18 00:12:57 http2: Transport encoding header "":method"" = ""POST""\r\n2022/10/18 00:12:57 http2: Transport encoding header "":path"" = ""/service/Method""\r\n2022/10/18 00:12:57 http2: Transport encoding header "":scheme"" = ""http""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""te"" = ""trailers""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""grpc-timeout"" = ""998862u""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""user-agent"" = ""grpc-go/1.49.0""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""x-forwarded-for"" = ""127.0.0.1""\r\n2022/10/18 00:12:57 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote HEADERS flags=END_HEADERS stream=7 len=17\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote DATA stream=7 len=12 data=""\\x00\\x00\\x00\\x00\\a\\n\\x05\\b\\x02\\x12\\x01a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote DATA flags=END_STREAM stream=7 len=0 data=""""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:57 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Transport received PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: wrote PING flags=ACK len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:57 http2: Framer 0xc000366000: read HEADERS flags=END_STREAM|END_HEADERS stream=7 len=4\r\n2022/10/18 00:12:57 http2: decoded hpack field header field "":status"" = ""200""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""grpc-status"" = ""5""\r\n2022/10/18 00:12:57 http2: decoded hpack field header field ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:57 http2: Transport received HEADERS flags=END_STREAM|END_HEADERS stream=7 len=4\r\n```\r\n\r\n#### Example trace with error (internal error raised by grpc-go)\r\n\r\n```\r\n2022/10/18 00:12:55 http2: Transport encoding header "":method"" = ""POST""\r\n2022/10/18 00:12:55 http2: Transport encoding header "":path"" = ""/service/Method""\r\n2022/10/18 00:12:55 http2: Transport encoding header "":scheme"" = ""http""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""grpc-timeout"" = ""998585u""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""user-agent"" = ""grpc-go/1.49.0""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""te"" = ""trailers""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""x-forwarded-for"" = ""127.0.0.1""\r\n2022/10/18 00:12:55 http2: Transport encoding header ""accept-encoding"" = ""gzip""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote HEADERS flags=END_HEADERS stream=5 len=18\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote DATA stream=5 len=12 data=""\\x00\\x00\\x00\\x00\\a\\n\\x05\\b\\x02\\x12\\x01a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote DATA flags=END_STREAM stream=5 len=0 data=""""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:55 http2: Transport received WINDOW_UPDATE len=4 (conn) incr=12\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Transport received PING len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: wrote PING flags=ACK len=8 ping=""\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a""\r\n2022/10/18 00:12:55 http2: Framer 0xc000366000: read HEADERS flags=END_STREAM|END_HEADERS stream=5 len=4\r\n2022/10/18 00:12:55 http2: decoded hpack field header field "":status"" = ""200""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""grpc-status"" = ""5""\r\n2022/10/18 00:12:55 http2: decoded hpack field header field ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:55 http2: Transport received HEADERS flags=END_STREAM|END_HEADERS stream=5 len=4\r\n2022/10/18 00:12:55 http2: server encoding header "":status"" = ""200""\r\n2022/10/18 00:12:55 http2: server encoding header ""content-type"" = ""application/grpc""\r\n2022/10/18 00:12:55 http2: server encoding header ""grpc-message"" = ""open /tmp/a: no such file or directory""\r\n2022/10/18 00:12:55 http2: server encoding header ""grpc-status"" = ""5""\r\n2022/10/18 00:12:55 http2: server encoding header ""date"" = ""Tue, 18 Oct 2022 07:12:55 GMT""\r\n2022/10/18 00:12:55 http2: Framer 0xc0003900e0: wrote HEADERS flags=END_HEADERS stream=1 len=89\r\n2022/10/18 00:12:55 http2: Framer 0xc0003900e0: wrote DATA flags=END_STREAM stream=1 len=0 data=""""\r\n```\r\n\r\n### RCA\r\n\r\nI believe this is due to a race caused by [concurrent `http.Handler` execution](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L1958) in `http2/server.go`.\r\n\r\nIn the case that handler execution completes before headers are written, [`rws.handlerDone` is true and Go includes `END_STREAM` in the initial `HEADERS` frame](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L2566). In the case that handler execution is still in-progress when the first write occurs, the `HEADERS` frame is written without `END_STREAM`, and a [subsequent write sends a zero-byte data frame with `END_STREAM`](https://github.com/golang/net/blob/cb67ada4b0adbbf3549cd8bdd27e2c23c35ca930/http2/server.go#L2596), acting purely as a control message.\r\n\r\nUltimately this causes non-determinism where the specific scenario that *unary gRPC methods that return errors quickly* are disproportionately affected.\r\n\r\nAccording to gRPC specification, [`END_STREAM` should be included in the last `HEADERS` frame to indicate termination of the response](https://github.com/grpc/grpc/blob/b8b9fd7235ea820d5d7a3dab2a7ae41f602a11d2/doc/PROTOCOL-HTTP2.md?plain=1#L119). In grpc-go, [encountering `END_STREAM` in a data frame is an explicit error case](https://github.com/grpc/grpc-go/blob/28fae96c98813777d02f25b2aa2d701b468b41c0/internal/transport/http2_client.go#L1119). However, HTTP/2 protocol specification itself doesn't prohibit this.\r\n\r\n### Proposal\r\n\r\nA similar (identical?) issue was identified in nghttp2 (see: https://github.com/nghttp2/nghttp2/issues/588). The submitted fix was to include `END_STREAM` in the `HEADERS` payload if the body is empty and no trailers exist. I'm not sure if a similar approach is feasible in `http2.Server`.","go\r\npackage main\r\n\r\nimport (\r\n\t""crypto/tls""\r\n\t""net""\r\n\t""net/http""\r\n\t""net/http/httputil""\r\n\r\n\t""golang.org/x/net/http2""\r\n\t""golang.org/x/net/http2/h2c""\r\n)\r\n\r\nfunc main() {\r\n\ttr := &http2.Transport{\r\n\t\tAllowHTTP: true,\r\n\t\tDialTLS: func(network string, addr string, cfg *tls.Config) (net.Conn, error) {\r\n\t\t\treturn net.Dial(""tcp"", ""localhost:7001"")\r\n\t\t},\r\n\t}\r\n\r\n\trp := &httputil.ReverseProxy{\r\n\t\tTransport:     tr,\r\n\t\tFlushInterval: -1,\r\n\t\tDirector: func(req *http.Request) {\r\n\t\t\treq.URL.Scheme = ""http""\r\n\t\t},\r\n\t}\r\n\r\n\thandler := h2c.NewHandler(rp, &http2.Server{})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    ""localhost:7000"",\r\n\t\tHandler: handler,\r\n\t}\r\n\r\n\tsrv.ListenAndServe()\r\n}\r\n"
56293,"cmd/compile: change in initialization order when using go test -coverm.go:\r\n\r\n\r\n\r\nm_test.go:\r\n\r\n\r\n\r\nWhen run with `go test`, this passes.  When run with `go test -cover` it fails:\r\n\r\n```\r\n--- FAIL: TestBar (0.00s)\r\n    m_test.go:15: \r\nFAIL\r\n\tmain\tcoverage: 100.0% of statements\r\nexit status 1\r\nFAIL\texample.com\t0.003s\r\n```\r\n\r\nThe variables have no initialization dependencies visible to the compiler, so the order of initialization rules say that they should be initialized in declaration order.  That is what happens with `go test`, but it appears to not happen with `go test -cover`.\r\n\r\nThis test passed with `go test -cover` in versions of Go before Go 1.13.\r\n\r\nCC @golang/runtime @thanm ",NeedsInvestigation|compiler/runtime,thanm,"m.go:\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n)\r\n\r\nvar (\r\n\tfooFlag = flag.String(""foo"", """", ""this should be ok"")\r\n\tfoo     = flag.Lookup(""foo"")\r\n\r\n\tbarFlag = flag.String(""bar"", """", ""this should be also ok, but is ""+notOK()+""."")\r\n\tbar     = flag.Lookup(""bar"")\r\n)\r\n\r\nfunc notOK() string {\r\n\treturn ""not OK""\r\n}\r\n```\r\n\r\nm_test.go:\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tif foo == nil {\r\n\t\tt.Fatal()\r\n\t}\r\n}\r\n\r\nfunc TestBar(t *testing.T) {\r\n\tif bar == nil {\r\n\t\tt.Fatal()\r\n\t}\r\n}\r\n```\r\n\r\nWhen run with `go test`, this passes.  When run with `go test -cover` it fails:\r\n\r\n```\r\n--- FAIL: TestBar (0.00s)\r\n    m_test.go:15: \r\nFAIL\r\n\tmain\tcoverage: 100.0% of statements\r\nexit status 1\r\nFAIL\texample.com\t0.003s\r\n```\r\n\r\nThe variables have no initialization dependencies visible to the compiler, so the order of initialization rules say that they should be initialized in declaration order.  That is what happens with `go test`, but it appears to not happen with `go test -cover`.\r\n\r\nThis test passed with `go test -cover` in versions of Go before Go 1.13.\r\n\r\nCC @golang/runtime @thanm ","Go\r\npackage main\r\n\r\nimport (\r\n\t""flag""\r\n)\r\n\r\nvar (\r\n\tfooFlag = flag.String(""foo"", """", ""this should be ok"")\r\n\tfoo     = flag.Lookup(""foo"")\r\n\r\n\tbarFlag = flag.String(""bar"", """", ""this should be also ok, but is ""+notOK()+""."")\r\n\tbar     = flag.Lookup(""bar"")\r\n)\r\n\r\nfunc notOK() string {\r\n\treturn ""not OK""\r\n}\r\n"
56243,"runtime: ""runtime\xb7lock: lock count"" fatal error when cgo is enabled<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ubuntu/.cache/go-build""\r\nGOENV=""/home/ubuntu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ubuntu/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ubuntu/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1867075057=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan tests for containerd/containerd#7513\r\n\r\n\r\n\r\n(Unfortunately, root is required as the test issues many `mount` syscalls. I have not had success creating a more minimal reproducer, but this test case takes only a few seconds to run to completion and reproduces the runtime errors fairly reliably.)\r\n\r\n### What did you expect to see?\r\n\r\nThe test either passes or fails.\r\n\r\n### What did you see instead?\r\n\r\n- Crashes reminiscent of #25128 \r\n\r\n`fatal error: runtime\xb7lock: lock count` followed by hundreds (thousands?) of lines of `fatal error: runtime\xb7unlock: lock count`. Sometimes these are followed by other runtime errors, such as:\r\n\r\n`fatal: morestack on g0`\r\n\r\n`fatal: systemstack called from unexpected goroutineTrace/breakpoint trap`\r\n\r\n<details><summary>An ""impossible"" segfault in perfectly ordinary Go code.</summary>\r\n\r\n```\r\nunexpected fault address 0x0\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x784dcf]\r\n```\r\n\r\n```\r\n(gdb) disass 0x784dcf\r\nDump of assembler code for function github.com/containerd/continuity.(*resource).Path:\r\n   0x0000000000784dc0 <+0>:\tmov    (%rax),%rcx\r\n   0x0000000000784dc3 <+3>:\tcmpq   $0x0,0x8(%rax)\r\n   0x0000000000784dc8 <+8>:\tjne    0x784dcf <github.com/containerd/continuity.(*resource).Path+15>\r\n   0x0000000000784dca <+10>:\txor    %eax,%eax\r\n   0x0000000000784dcc <+12>:\txor    %ebx,%ebx\r\n   0x0000000000784dce <+14>:\tret\r\n   0x0000000000784dcf <+15>:\tmov    (%rcx),%rax\r\n   0x0000000000784dd2 <+18>:\tmov    0x8(%rcx),%rbx\r\n   0x0000000000784dd6 <+22>:\tret\r\nEnd of assembler dump.\r\n```\r\n\r\nhttps://github.com/containerd/continuity/blob/5ad51c7aca47b8e742f5e6e7dc841d50f5f6affd/resource.go#L270\r\n\r\nA slice with length > 0 somehow had a nil data pointer... or `rcx` got clobbered in the middle of the function. No unsafe type-punning is used to construct the slice and `go test -race` does not complain.\r\n\r\n</details>\r\n\r\n<details><summary>\r\n<tt>fatal error: malloc deadlock</tt> / <tt>panic during panic</tt> followed by what appeared to be two interleaved stack dumps</summary>\r\n<pre>\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: malloc deadlock\r\npanic during panic\r\n\r\nruntime stack:\r\nruntime.throw({0x87177d?, 0x7f7d35498848?})\r\n\t/usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7f7d35498820 sp=0x7f7d354987f0 pc=0x4399fd\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498840 sp=0x7f7d35498820 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498858 sp=0x7f7d35498840 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498888 sp=0x7f7d35498858 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354988e0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354988b8 sp=0x7f7d35498888 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354988d8 sp=0x7f7d354988b8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354988f0 sp=0x7f7d354988d8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498920 sp=0x7f7d354988f0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498978?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498950 sp=0x7f7d35498920 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498970 sp=0x7f7d35498950 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498988 sp=0x7f7d35498970 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354989b8 sp=0x7f7d35498988 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498a10?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354989e8 sp=0x7f7d354989b8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498a08 sp=0x7f7d354989e8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498a20 sp=0x7f7d35498a08 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498a50 sp=0x7f7d35498a20 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498aa8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498a80 sp=0x7f7d35498a50 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498aa0 sp=0x7f7d35498a80 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498ab8 sp=0x7f7d35498aa0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498ae8 sp=0x7f7d35498ab8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498b40?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498b18 sp=0x7f7d35498ae8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498b38 sp=0x7f7d35498b18 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498b50 sp=0x7f7d35498b38 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498b80 sp=0x7f7d35498b50 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498bd8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498bb0 sp=0x7f7d35498b80 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498bd0 sp=0x7f7d35498bb0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498be8 sp=0x7f7d35498bd0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498c18 sp=0x7f7d35498be8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498c70?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498c48 sp=0x7f7d35498c18 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498c68 sp=0x7f7d35498c48 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498c80 sp=0x7f7d35498c68 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498cb0 sp=0x7f7d35498c80 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498d08?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498ce0 sp=0x7f7d35498cb0 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498d00 sp=0x7f7d35498ce0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498d18 sp=0x7f7d35498d00 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498d48 sp=0x7f7d35498d18 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498da0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498d78 sp=0x7f7d35498d48 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498d98 sp=0x7f7d35498d78 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498db0 sp=0x7f7d35498d98 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498de0 sp=0x7f7d35498db0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498e38?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498e10 sp=0x7f7d35498de0 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498e30 sp=0x7f7d35498e10 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498e48 sp=0x7f7d35498e30 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498e78 sp=0x7f7d35498e48 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498ed0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498ea8 sp=0x7f7d35498e78 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498ec8 sp=0x7f7d35498ea8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498ee0 sp=0x7f7d35498ec8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498f10 sp=0x7f7d35498ee0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498f68?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498f40 sp=0x7f7d35498f10 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498f60 sp=0x7f7d35498f40 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498f78 sp=0x7f7d35498f60 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498fa8 sp=0x7f7d35498f78 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499000?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498fd8 sp=0x7f7d35498fa8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498ff8 sp=0x7f7d35498fd8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499010 sp=0x7f7d35498ff8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499040 sp=0x7f7d35499010 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499098?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499070 sp=0x7f7d35499040 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499090 sp=0x7f7d35499070 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354990a8 sp=0x7f7d35499090 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354990d8 sp=0x7f7d354990a8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499130?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499108 sp=0x7f7d354990d8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499128 sp=0x7f7d35499108 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499140 sp=0x7f7d35499128 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499170 sp=0x7f7d35499140 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354991c8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354991a0 sp=0x7f7d35499170 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354991c0 sp=0x7f7d354991a0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354991d8 sp=0x7f7d354991c0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499208 sp=0x7f7d354991d8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499260?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499238 sp=0x7f7d35499208 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499258 sp=0x7f7d35499238 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499270 sp=0x7f7d35499258 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354992a0 sp=0x7f7d35499270 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354992f8?})\r\n\t/usr/local/go/src/runtime/panic.go:\r\ngoroutine 8 [running]:\r\nruntime.throw({0x86b044?, 0xc0000b0f30?})\r\n\t/usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0xc0000b0ee8 sp=0xc0000b0eb8 pc=0x4399fd\r\nruntime.mallocgc(0x78, 0x83a4a0, 0x1)\r\n\t/usr/local/go/src/runtime/malloc.go:913 +0x8ac fp=0xc0000b0f60 sp=0xc0000b0ee8 pc=0x40f70c\r\nruntime.newobject(0x136e7fad0?)\r\n\t/usr/local/go/src/runtime/malloc.go:1192 +0x27 fp=0xc0000b0f88 sp=0xc0000b0f60 pc=0x40f847\r\ncrypto/sha256.New()\r\n\t/usr/local/go/src/crypto/sha256/sha256.go:166 +0x25 fp=0xc0000b0fb0 sp=0xc0000b0f88 pc=0x53df45\r\ncrypto.Hash.New(0x7f6820?)\r\n\t/usr/local/go/src/crypto/crypto.go:131 +0x4a fp=0xc0000b0ff8 sp=0xc0000b0fb0 pc=0x53bb2a\r\ngithub.com/opencontainers/go-digest.Algorithm.Hash({0x867270, 0x6})\r\n\t/home/ubuntu/containerd/vendor/github.com/opencontainers/go-digest/algorithm.go:135 +0x97 fp=0xc0000b1040 sp=0xc0000b0ff8 pc=0x77a197\r\ngithub.com/opencontainers/go-digest.Algorithm.Digester(...)\r\n\t/home/ubuntu/containerd/vendor/github.com/opencontainers/go-digest/algorithm.go:112\r\ngithub.com/containerd/continuity.simpleDigester.Digest({{0x867270?, 0x800da0?}}, {0x90bbe0?, 0xc0000143b0?})\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/digests.go:42 +0x3f fp=0xc0000b10c0 sp=0xc0000b1040 pc=0x781c5f\r\ngithub.com/containerd/continuity.(*simpleDigester).Digest(0x40d45d?, {0x90bbe0?, 0xc0000143b01043 +0x46? fp=}0x7f7d354992d0)\r\n sp=0x7f7d354992a0\t pc=<autogenerated>0x4399e6:\r\n1runtime.unlock2 +0x45 fp=(0xc0000b10f00x1b sp=?0xc0000b10c0)\r\n pc=\t0x7862e5/usr/local/go/src/runtime/lock_futex.go\r\n:github.com/containerd/continuity.(*context).digest127 +(0x7a0xc0001a2a50 fp=, 0x7f7d354992f0{ sp=0xc0002faa000x7f7d354992d0,  pc=0xf0x40db9a}\r\n)\r\n\truntime.unlockWithRank(...)\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.go:\t634/usr/local/go/src/runtime/lockrank_off.go +:0x18f32 fp=\r\n0xc0000b1170runtime.unlock sp=(...)\r\n0xc0000b10f0\t pc=/usr/local/go/src/runtime/lock_futex.go0x78190f:\r\n112github.com/containerd/continuity.(*context).Resource\r\nruntime.printunlock(0xc0001a2a50(, )\r\n\t{0xc0002faa00/usr/local/go/src/runtime/print.go, :0xf80} +, 0x3b{ fp=0x90ef680x7f7d35499308,  sp=0xc0000e66800x7f7d354992f0} pc=)\r\n0x43b41b\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.goruntime.throw.func1:(161)\r\n +\t0x1fc/usr/local/go/src/runtime/panic.go fp=:0xc0000b13c81044 sp= +0xc0000b11700x55 pc= fp=0x77d6bc0x7f7d35499338\r\n sp=github.com/containerd/continuity.BuildManifest.func10x7f7d35499308( pc={0x439a750xc0002faa00\r\n, runtime.throw0xf(}{, 0x87177d{?0x90ef68, , 0x7f7d354993900xc0000e6680?}}, )\r\n{\t0x0/usr/local/go/src/runtime/panic.go?:, 10430x0 +?0x46} fp=)\r\n\t0x7f7d35499368 sp=/home/ubuntu/containerd/vendor/github.com/containerd/continuity/manifest.go0x7f7d35499338: pc=950x4399e6 +\r\n0xc7runtime.unlock2 fp=(0xc0000b14580x1b sp=0xc0000b13c8?)\r\n pc=0x783267\r\n/usr/local/go/src/runtime/lock_futex.gogithub.com/containerd/continuity.(*context).Walk.func1:127( +{0x7a0xc00011d740 fp=?0x7f7d35499388,  sp=0xc0000e66800x7f7d35499368? pc=}0x40db9a,\r\n{runtime.unlockWithRank0x90ef68, (...)\r\n\t0xc0000e6680}/usr/local/go/src/runtime/lockrank_off.go, :{320xc0000b14e8\r\n?runtime.unlock, (...)\r\n0x46d747\t?}/usr/local/go/src/runtime/lock_futex.go)\r\n:112\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.goruntime.printunlock:(596)\r\n +0x70\t fp=/usr/local/go/src/runtime/print.go0xc0000b14a0: sp=800xc0000b1458 + pc=0x3b0x781470 fp=\r\n0x7f7d354993a0path/filepath.walk sp=0x7f7d35499388( pc={0x43b41b0xc00011d740\r\n, runtime.throw.func10x3f(})\r\n, {\t0x90ef68/usr/local/go/src/runtime/panic.go, :0xc0000e66801044} +, 0x550xc000183b90 fp=)\r\n\t/usr/local/go/src/path/filepath/path.go:433 +0x123 fp=0xc0000b1568 sp=0xc0000b14a0 pc=0x500e03\r\npath/filepath.walk({0xc0001dbb80, 0x38}, {0x90ef68, 0xc0000cd380}, 0xc000183b90)\r\n\t/usr/local/go/src/path/filepath/path.go:457 +0x285 fp=0xc0000b1630 sp=0xc0000b1568 pc=0x500f65\r\npath/filepath.walk({0x7f7d354993d00xc00002eb10 sp=, 0x7f7d354993a00x30 pc=}0x439a75,\r\n{0x90ef68runtime.throw, (0xc0000cd2b0{}0x87177d, ?0xc000183b90, )\r\n0x7f7d35499428\t?/usr/local/go/src/path/filepath/path.go}:)\r\n457\t +/usr/local/go/src/runtime/panic.go0x285: fp=10430xc0000b16f8 + sp=0xc0000b1630 pc=0x500f65\r\npath/filepath.Walk({0xc00002eb10, 0x300x46 fp=0x7f7d35499400 sp=}0x7f7d354993d0,  pc=0xc000183b900x4399e6)\r\n\r\n\truntime.unlock2/usr/local/go/src/path/filepath/path.go:520 +(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499420 sp=0x7f7d35499400 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499438 sp=0x7f7d35499420 pc=0x6c0x43b41b fp=\r\nruntime.throw.func10xc0000b1748( sp=)\r\n0xc0000b16f8\t pc=/usr/local/go/src/runtime/panic.go0x5010cc:\r\n1044github.com/containerd/continuity/pathdriver.(*pathDriver).Walk +0x55( fp=0x84be400x7f7d35499468,  sp={0x7f7d354994380xc00002eb10 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354994c0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499498 sp=0x7f7d35499468 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354994b8 sp=0x7f7d35499498 pc=0x40db9a\r\nruntime.unlockWithRank?, 0x40f847?}, 0x28?)\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/pathdriver/path_driver.go:88 +0x27 fp=0xc0000b1770 sp=0xc0000b1748 pc=0x779c47\r\ngithub.com/containerd/continuity.(*context).Walk(0xc0001a2a50, 0xc000183b60)\r\n(...)\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.go\t:/usr/local/go/src/runtime/lockrank_off.go594: +320x12b\r\n fp=runtime.unlock0xc0000b17b0 sp=(...)\r\n\t0xc0000b1770 pc=/usr/local/go/src/runtime/lock_futex.go0x7813ab:\r\n112github.com/containerd/continuity.BuildManifest\r\nruntime.printunlock({(0x90e248)\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354994d0 sp=0x7f7d354994b8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499500 sp=0x7f7d354994d0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499558?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499530 sp=0x7f7d35499500 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499550 sp=0x7f7d35499530 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499568 sp=0x7f7d35499550 pc=0x43b41b?\r\n, runtime.throw.func10xc0001a2a50(})\r\n)\r\n\t\t/usr/local/go/src/runtime/panic.go/home/ubuntu/containerd/vendor/github.com/containerd/continuity/manifest.go::104485 + +0x550x111 fp= fp=0x7f7d354995980xc0000b18d8 sp= sp=0x7f7d354995680xc0000b17b0 pc= pc=0x439a750x782ed1\r\n\r\nruntime.throwgithub.com/containerd/continuity/fs/fstest.CheckDirectoryEqual({0x87177d?, 0x7f7d354995f0?})\r\n({\t0xc00011d280/usr/local/go/src/runtime/panic.go, :0x3c1043} +, 0x46{ fp=0xc00002eb100x7f7d354995c8,  sp=0x300x7f7d35499598} pc=)\r\n0x4399e6\r\n\truntime.unlock2/home/ubuntu/containerd/vendor/github.com/containerd/continuity/fs/fstest/compare.go:(440x1b +?0x1ce)\r\n fp=\t0xc0000b1a38/usr/local/go/src/runtime/lock_futex.go sp=:0xc0000b18d8127 pc= +0x786dee0x7a\r\n fp=github.com/containerd/containerd/snapshots/testsuite.check128LayersMount.func10x7f7d354995e8 sp=0x7f7d354995c8( pc={0x40db9a0x90e1d8\r\n, runtime.unlockWithRank0xc00017b350(...)\r\n}\t, /usr/local/go/src/runtime/lockrank_off.go0xc00012eea0, :{320x90ff20\r\n, runtime.unlock0xc0000690e0(...)\r\n}\t, /usr/local/go/src/runtime/lock_futex.go{:0xc00002ea50112,\r\n0x2bruntime.printunlock})\r\n()\r\n\t/home/ubuntu/containerd/snapshots/testsuite/testsuite.go\t:/usr/local/go/src/runtime/print.go942: +800x14d4 + fp=0x3b0xc0000b1df0 fp= sp=0x7f7d354996000xc0000b1a38 sp= pc=0x7f7d354995e80x79fbb4 pc=\r\n0x43b41bgithub.com/containerd/containerd/snapshots/testsuite.makeTest.func1\r\nruntime.throw.func1(()\r\n0xc00012eea0)\r\n\t\t/usr/local/go/src/runtime/panic.go/home/ubuntu/containerd/snapshots/testsuite/testsuite.go:1044: +1170x55 + fp=0x4740x7f7d35499630 fp=0xc0000b1f70 sp=0x7f7d35499600 pc=0x439a75\r\n sp=runtime.throw0xc0000b1df0 pc=(0x794fd4{0x87177d?, 0x7f7d35499688?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499660 sp=0x7f7d35499630 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499680 sp=0x7f7d35499660 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\n\r\nruntime.unlock(...)\r\ntesting.tRunner\t(/usr/local/go/src/runtime/lock_futex.go0xc00012eea0:, 1120xc00017a9c0\r\n)\r\nruntime.printunlock\t(/usr/local/go/src/testing/testing.go)\r\n\t/usr/local/go/src/runtime/print.go::80 +0x3b fp=0x7f7d35499698 sp=14460x7f7d35499680 pc= +0x43b41b0x10b\r\n fp=runtime.throw.func10xc0000b1fc0 sp=(0xc0000b1f70)\r\n pc=0x5137cb\r\n/usr/local/go/src/runtime/panic.gotesting.(*T).Run.func1:(1044 +)\r\n\t0x55 fp=/usr/local/go/src/testing/testing.go0x7f7d354996c8: sp=14930x7f7d35499698 + pc=0x2a0x439a75 fp=\r\n0xc0000b1fe0\r\n sp=0xc0000b1fc0goroutine  pc=80x51466a [\r\nrunningruntime.goexit]:\r\n(runtime.systemstack_switch)\r\n\t(/usr/local/go/src/runtime/asm_amd64.s)\r\n:\t1594/usr/local/go/src/runtime/asm_amd64.s +:0x1459 fp= fp=0xc0000b1fe80xc0000b0e78 sp= sp=0xc0000b1fe00xc0000b0e70 pc= pc=0x46d6010x46b3e0\r\n\r\ncreated by runtime.fatalthrowtesting.(*T).Run(\r\n0xb0ec0\t?)\r\n/usr/local/go/src/testing/testing.go\t:/usr/local/go/src/runtime/panic.go1493: +0x35f1122\r\n</pre></details>\r\n\r\nThe crashes also consistently occur on GitHub Actions CI runners, which rules out hardware as a candidate.\r\n\r\nCompiling with Cgo is a necessary condition to reproduce the issue. There is no user Cgo code in the built test binary, only runtime and std.\r\n\r\nI could not reproduce the issue on a pure-Go build.\r\n\r\nI loaded up some core dumps into gdb and noticed a consistent pattern to the state of the process at the time of the crash.\r\n- Most threads were blocked on a futex, epollwait or usleep\r\n- One thread was blocked on a syscall\r\n- One thread was a freshly `clone3()`'d child, without having executed a single instruction (pc pointed to the instruction following the syscall, `rax = 0` and `rsp` was set to exactly `.stack + .stack_size` of the clone_args struct pointed to by `rdi`.)\r\n- One thread was getting into trouble while in the process of exiting\r\n\r\nI saw no evidence suggesting heap corruption when examining the core dumps. I learned that `curg().m.locks` was always set to -1 when the fatal `runtime.lock` call was made. On a hunch I patched one of the few unguarded and unbalanced decrements of an `m.locks`, `runtime.releasem()`:\r\n```diff\r\n--- a/runtime/runtime1.go\r\n+++ b/runtime/runtime1.go\r\n@@ -482,6 +482,9 @@ func acquirem() *m {\r\n //go:nosplit\r\n func releasem(mp *m) {\r\n        _g_ := getg()\r\n+       if mp.locks == 0 {\r\n+               crash()\r\n+       }\r\n        mp.locks--\r\n        if mp.locks == 0 && _g_.preempt {\r\n                // restore the preemption request in case we've cleared it in newstack\r\n```\r\n\r\nand was able to get clean stack traces without the recursive panicking.\r\n\r\n```\r\n(gdb) bt\r\n#0  runtime.raise () at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n#1  0x0000000000450945 in runtime.dieFromSignal (sig=6)\r\n    at /usr/local/go/src/runtime/signal_unix.go:870\r\n#2  0x000000000045127e in runtime.sigfwdgo (sig=6, info=<optimized out>,\r\n    ctx=<optimized out>, ~r0=<optimized out>)\r\n    at /usr/local/go/src/runtime/signal_unix.go:1086\r\n#3  0x000000000044f5e7 in runtime.sigtrampgo (sig=0, info=0x0,\r\n    ctx=0x46f521 <runtime.raise+33>)\r\n    at /usr/local/go/src/runtime/signal_unix.go:432\r\n#4  0x000000000046f826 in runtime.sigtramp ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:359\r\n#5  <signal handler called>\r\n#6  runtime.raise () at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n#7  0x0000000000450945 in runtime.dieFromSignal (sig=6)\r\n    at /usr/local/go/src/runtime/signal_unix.go:870\r\n#8  0x000000000044b9ac in runtime.crash ()\r\n    at /usr/local/go/src/runtime/signal_unix.go:962\r\n#9  runtime.releasem (mp=0xc000154400)\r\n    at /usr/local/go/src/runtime/runtime1.go:486\r\n#10 0x0000000000440985 in runtime.startm (_p_=0xc000034000, spinning=false)\r\n    at /usr/local/go/src/runtime/proc.go:2339\r\n#11 0x0000000000440cee in runtime.handoffp (_p_=0x0)\r\n    at /usr/local/go/src/runtime/proc.go:2352\r\n#12 0x000000000043f597 in runtime.mexit (osStack=true)\r\n    at /usr/local/go/src/runtime/proc.go:1537\r\n#13 0x000000000043f1e9 in runtime.mstart0 ()\r\n    at /usr/local/go/src/runtime/proc.go:1391\r\n#14 0x000000000046b905 in runtime.mstart ()\r\n    at /usr/local/go/src/runtime/asm_amd64.s:390\r\n#15 0x0000000000401888 in runtime/cgo(.text) ()\r\n#16 0x00007f94950c1920 in ?? ()\r\n#17 0x00007f94bc5eb850 in ?? () at ./nptl/pthread_create.c:321\r\n   from /lib/x86_64-linux-gnu/libc.so.6\r\n#18 0x0000000000000000 in ?? ()\r\n(gdb) info threads\r\n  Id   Target Id                          Frame\r\n* 1    Thread 0x7f9492565640 (LWP 186374) runtime.raise ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n  2    Thread 0x7f94bc554740 (LWP 186359) runtime.futex ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:560\r\n  3    Thread 0x7f949371f640 (LWP 186363) runtime.futex ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:560\r\n  4    Thread 0x7f9494721640 (LWP 186389) runtime.epollwait ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:706\r\n  5    Thread 0x7f94950c2640 (LWP 186360) runtime.usleep ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:140\r\n  6    Thread 0x7f9492d66640 (LWP 186390) runtime/internal/syscall.Syscall6\r\n    () at /usr/local/go/src/runtime/internal/syscall/asm_linux_amd64.s:36\r\n  7    Thread 0x7f9493f20640 (LWP 186391) clone3 ()\r\n    at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:62\r\n```\r\n\r\nEvery core dump I examined has the same traceback in the crashing thread. It's always a pthreads thread in the process of cleaning up and exiting, calling `releasem()` while its `curg().m.locks == -1`.\r\n\r\nThe garbage collector is also seemingly necessary to cause crashes. Setting `GOGC=0` produces more reliable crashes, while I have yet to get a crash with `GOGC=off`. There seems to be some aspect of timing, as well. Turning the test verbosity on or off affects the probability of a crash, and I have yet to get a crash when running a race-enabled build or under `strace`.\r\n\r\n(cc @cpuguy83)",NeedsInvestigation|FrozenDueToAge|release-blocker|compiler/runtime,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ubuntu/.cache/go-build""\r\nGOENV=""/home/ubuntu/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ubuntu/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ubuntu/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1867075057=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan tests for containerd/containerd#7513\r\n\r\n```console\r\n~/containerd$ go test -c ./snapshots/overlay\r\n~/containerd$ sudo ./overlay.test -test.run -test.root TestOverlay/no_opt/128LayersMount\r\n```\r\n\r\n(Unfortunately, root is required as the test issues many `mount` syscalls. I have not had success creating a more minimal reproducer, but this test case takes only a few seconds to run to completion and reproduces the runtime errors fairly reliably.)\r\n\r\n### What did you expect to see?\r\n\r\nThe test either passes or fails.\r\n\r\n### What did you see instead?\r\n\r\n- Crashes reminiscent of #25128 \r\n\r\n`fatal error: runtime\xb7lock: lock count` followed by hundreds (thousands?) of lines of `fatal error: runtime\xb7unlock: lock count`. Sometimes these are followed by other runtime errors, such as:\r\n\r\n`fatal: morestack on g0`\r\n\r\n`fatal: systemstack called from unexpected goroutineTrace/breakpoint trap`\r\n\r\n<details><summary>An ""impossible"" segfault in perfectly ordinary Go code.</summary>\r\n\r\n```\r\nunexpected fault address 0x0\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x784dcf]\r\n```\r\n\r\n```\r\n(gdb) disass 0x784dcf\r\nDump of assembler code for function github.com/containerd/continuity.(*resource).Path:\r\n   0x0000000000784dc0 <+0>:\tmov    (%rax),%rcx\r\n   0x0000000000784dc3 <+3>:\tcmpq   $0x0,0x8(%rax)\r\n   0x0000000000784dc8 <+8>:\tjne    0x784dcf <github.com/containerd/continuity.(*resource).Path+15>\r\n   0x0000000000784dca <+10>:\txor    %eax,%eax\r\n   0x0000000000784dcc <+12>:\txor    %ebx,%ebx\r\n   0x0000000000784dce <+14>:\tret\r\n   0x0000000000784dcf <+15>:\tmov    (%rcx),%rax\r\n   0x0000000000784dd2 <+18>:\tmov    0x8(%rcx),%rbx\r\n   0x0000000000784dd6 <+22>:\tret\r\nEnd of assembler dump.\r\n```\r\n\r\nhttps://github.com/containerd/continuity/blob/5ad51c7aca47b8e742f5e6e7dc841d50f5f6affd/resource.go#L270\r\n\r\nA slice with length > 0 somehow had a nil data pointer... or `rcx` got clobbered in the middle of the function. No unsafe type-punning is used to construct the slice and `go test -race` does not complain.\r\n\r\n</details>\r\n\r\n<details><summary>\r\n<tt>fatal error: malloc deadlock</tt> / <tt>panic during panic</tt> followed by what appeared to be two interleaved stack dumps</summary>\r\n<pre>\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: runtime\xb7unlock: lock count\r\nfatal error: malloc deadlock\r\npanic during panic\r\n\r\nruntime stack:\r\nruntime.throw({0x87177d?, 0x7f7d35498848?})\r\n\t/usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7f7d35498820 sp=0x7f7d354987f0 pc=0x4399fd\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498840 sp=0x7f7d35498820 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498858 sp=0x7f7d35498840 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498888 sp=0x7f7d35498858 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354988e0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354988b8 sp=0x7f7d35498888 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354988d8 sp=0x7f7d354988b8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354988f0 sp=0x7f7d354988d8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498920 sp=0x7f7d354988f0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498978?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498950 sp=0x7f7d35498920 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498970 sp=0x7f7d35498950 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498988 sp=0x7f7d35498970 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354989b8 sp=0x7f7d35498988 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498a10?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354989e8 sp=0x7f7d354989b8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498a08 sp=0x7f7d354989e8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498a20 sp=0x7f7d35498a08 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498a50 sp=0x7f7d35498a20 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498aa8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498a80 sp=0x7f7d35498a50 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498aa0 sp=0x7f7d35498a80 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498ab8 sp=0x7f7d35498aa0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498ae8 sp=0x7f7d35498ab8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498b40?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498b18 sp=0x7f7d35498ae8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498b38 sp=0x7f7d35498b18 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498b50 sp=0x7f7d35498b38 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498b80 sp=0x7f7d35498b50 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498bd8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498bb0 sp=0x7f7d35498b80 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498bd0 sp=0x7f7d35498bb0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498be8 sp=0x7f7d35498bd0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498c18 sp=0x7f7d35498be8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498c70?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498c48 sp=0x7f7d35498c18 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498c68 sp=0x7f7d35498c48 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498c80 sp=0x7f7d35498c68 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498cb0 sp=0x7f7d35498c80 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498d08?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498ce0 sp=0x7f7d35498cb0 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498d00 sp=0x7f7d35498ce0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498d18 sp=0x7f7d35498d00 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498d48 sp=0x7f7d35498d18 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498da0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498d78 sp=0x7f7d35498d48 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498d98 sp=0x7f7d35498d78 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498db0 sp=0x7f7d35498d98 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498de0 sp=0x7f7d35498db0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498e38?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498e10 sp=0x7f7d35498de0 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498e30 sp=0x7f7d35498e10 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498e48 sp=0x7f7d35498e30 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498e78 sp=0x7f7d35498e48 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498ed0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498ea8 sp=0x7f7d35498e78 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498ec8 sp=0x7f7d35498ea8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498ee0 sp=0x7f7d35498ec8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498f10 sp=0x7f7d35498ee0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35498f68?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498f40 sp=0x7f7d35498f10 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498f60 sp=0x7f7d35498f40 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35498f78 sp=0x7f7d35498f60 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35498fa8 sp=0x7f7d35498f78 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499000?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35498fd8 sp=0x7f7d35498fa8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35498ff8 sp=0x7f7d35498fd8 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499010 sp=0x7f7d35498ff8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499040 sp=0x7f7d35499010 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499098?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499070 sp=0x7f7d35499040 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499090 sp=0x7f7d35499070 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354990a8 sp=0x7f7d35499090 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354990d8 sp=0x7f7d354990a8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499130?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499108 sp=0x7f7d354990d8 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499128 sp=0x7f7d35499108 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499140 sp=0x7f7d35499128 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499170 sp=0x7f7d35499140 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354991c8?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d354991a0 sp=0x7f7d35499170 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354991c0 sp=0x7f7d354991a0 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354991d8 sp=0x7f7d354991c0 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499208 sp=0x7f7d354991d8 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499260?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499238 sp=0x7f7d35499208 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499258 sp=0x7f7d35499238 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499270 sp=0x7f7d35499258 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d354992a0 sp=0x7f7d35499270 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354992f8?})\r\n\t/usr/local/go/src/runtime/panic.go:\r\ngoroutine 8 [running]:\r\nruntime.throw({0x86b044?, 0xc0000b0f30?})\r\n\t/usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0xc0000b0ee8 sp=0xc0000b0eb8 pc=0x4399fd\r\nruntime.mallocgc(0x78, 0x83a4a0, 0x1)\r\n\t/usr/local/go/src/runtime/malloc.go:913 +0x8ac fp=0xc0000b0f60 sp=0xc0000b0ee8 pc=0x40f70c\r\nruntime.newobject(0x136e7fad0?)\r\n\t/usr/local/go/src/runtime/malloc.go:1192 +0x27 fp=0xc0000b0f88 sp=0xc0000b0f60 pc=0x40f847\r\ncrypto/sha256.New()\r\n\t/usr/local/go/src/crypto/sha256/sha256.go:166 +0x25 fp=0xc0000b0fb0 sp=0xc0000b0f88 pc=0x53df45\r\ncrypto.Hash.New(0x7f6820?)\r\n\t/usr/local/go/src/crypto/crypto.go:131 +0x4a fp=0xc0000b0ff8 sp=0xc0000b0fb0 pc=0x53bb2a\r\ngithub.com/opencontainers/go-digest.Algorithm.Hash({0x867270, 0x6})\r\n\t/home/ubuntu/containerd/vendor/github.com/opencontainers/go-digest/algorithm.go:135 +0x97 fp=0xc0000b1040 sp=0xc0000b0ff8 pc=0x77a197\r\ngithub.com/opencontainers/go-digest.Algorithm.Digester(...)\r\n\t/home/ubuntu/containerd/vendor/github.com/opencontainers/go-digest/algorithm.go:112\r\ngithub.com/containerd/continuity.simpleDigester.Digest({{0x867270?, 0x800da0?}}, {0x90bbe0?, 0xc0000143b0?})\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/digests.go:42 +0x3f fp=0xc0000b10c0 sp=0xc0000b1040 pc=0x781c5f\r\ngithub.com/containerd/continuity.(*simpleDigester).Digest(0x40d45d?, {0x90bbe0?, 0xc0000143b01043 +0x46? fp=}0x7f7d354992d0)\r\n sp=0x7f7d354992a0\t pc=<autogenerated>0x4399e6:\r\n1runtime.unlock2 +0x45 fp=(0xc0000b10f00x1b sp=?0xc0000b10c0)\r\n pc=\t0x7862e5/usr/local/go/src/runtime/lock_futex.go\r\n:github.com/containerd/continuity.(*context).digest127 +(0x7a0xc0001a2a50 fp=, 0x7f7d354992f0{ sp=0xc0002faa000x7f7d354992d0,  pc=0xf0x40db9a}\r\n)\r\n\truntime.unlockWithRank(...)\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.go:\t634/usr/local/go/src/runtime/lockrank_off.go +:0x18f32 fp=\r\n0xc0000b1170runtime.unlock sp=(...)\r\n0xc0000b10f0\t pc=/usr/local/go/src/runtime/lock_futex.go0x78190f:\r\n112github.com/containerd/continuity.(*context).Resource\r\nruntime.printunlock(0xc0001a2a50(, )\r\n\t{0xc0002faa00/usr/local/go/src/runtime/print.go, :0xf80} +, 0x3b{ fp=0x90ef680x7f7d35499308,  sp=0xc0000e66800x7f7d354992f0} pc=)\r\n0x43b41b\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.goruntime.throw.func1:(161)\r\n +\t0x1fc/usr/local/go/src/runtime/panic.go fp=:0xc0000b13c81044 sp= +0xc0000b11700x55 pc= fp=0x77d6bc0x7f7d35499338\r\n sp=github.com/containerd/continuity.BuildManifest.func10x7f7d35499308( pc={0x439a750xc0002faa00\r\n, runtime.throw0xf(}{, 0x87177d{?0x90ef68, , 0x7f7d354993900xc0000e6680?}}, )\r\n{\t0x0/usr/local/go/src/runtime/panic.go?:, 10430x0 +?0x46} fp=)\r\n\t0x7f7d35499368 sp=/home/ubuntu/containerd/vendor/github.com/containerd/continuity/manifest.go0x7f7d35499338: pc=950x4399e6 +\r\n0xc7runtime.unlock2 fp=(0xc0000b14580x1b sp=0xc0000b13c8?)\r\n pc=0x783267\r\n/usr/local/go/src/runtime/lock_futex.gogithub.com/containerd/continuity.(*context).Walk.func1:127( +{0x7a0xc00011d740 fp=?0x7f7d35499388,  sp=0xc0000e66800x7f7d35499368? pc=}0x40db9a,\r\n{runtime.unlockWithRank0x90ef68, (...)\r\n\t0xc0000e6680}/usr/local/go/src/runtime/lockrank_off.go, :{320xc0000b14e8\r\n?runtime.unlock, (...)\r\n0x46d747\t?}/usr/local/go/src/runtime/lock_futex.go)\r\n:112\r\n/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.goruntime.printunlock:(596)\r\n +0x70\t fp=/usr/local/go/src/runtime/print.go0xc0000b14a0: sp=800xc0000b1458 + pc=0x3b0x781470 fp=\r\n0x7f7d354993a0path/filepath.walk sp=0x7f7d35499388( pc={0x43b41b0xc00011d740\r\n, runtime.throw.func10x3f(})\r\n, {\t0x90ef68/usr/local/go/src/runtime/panic.go, :0xc0000e66801044} +, 0x550xc000183b90 fp=)\r\n\t/usr/local/go/src/path/filepath/path.go:433 +0x123 fp=0xc0000b1568 sp=0xc0000b14a0 pc=0x500e03\r\npath/filepath.walk({0xc0001dbb80, 0x38}, {0x90ef68, 0xc0000cd380}, 0xc000183b90)\r\n\t/usr/local/go/src/path/filepath/path.go:457 +0x285 fp=0xc0000b1630 sp=0xc0000b1568 pc=0x500f65\r\npath/filepath.walk({0x7f7d354993d00xc00002eb10 sp=, 0x7f7d354993a00x30 pc=}0x439a75,\r\n{0x90ef68runtime.throw, (0xc0000cd2b0{}0x87177d, ?0xc000183b90, )\r\n0x7f7d35499428\t?/usr/local/go/src/path/filepath/path.go}:)\r\n457\t +/usr/local/go/src/runtime/panic.go0x285: fp=10430xc0000b16f8 + sp=0xc0000b1630 pc=0x500f65\r\npath/filepath.Walk({0xc00002eb10, 0x300x46 fp=0x7f7d35499400 sp=}0x7f7d354993d0,  pc=0xc000183b900x4399e6)\r\n\r\n\truntime.unlock2/usr/local/go/src/path/filepath/path.go:520 +(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499420 sp=0x7f7d35499400 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499438 sp=0x7f7d35499420 pc=0x6c0x43b41b fp=\r\nruntime.throw.func10xc0000b1748( sp=)\r\n0xc0000b16f8\t pc=/usr/local/go/src/runtime/panic.go0x5010cc:\r\n1044github.com/containerd/continuity/pathdriver.(*pathDriver).Walk +0x55( fp=0x84be400x7f7d35499468,  sp={0x7f7d354994380xc00002eb10 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d354994c0?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499498 sp=0x7f7d35499468 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d354994b8 sp=0x7f7d35499498 pc=0x40db9a\r\nruntime.unlockWithRank?, 0x40f847?}, 0x28?)\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/pathdriver/path_driver.go:88 +0x27 fp=0xc0000b1770 sp=0xc0000b1748 pc=0x779c47\r\ngithub.com/containerd/continuity.(*context).Walk(0xc0001a2a50, 0xc000183b60)\r\n(...)\r\n\t/home/ubuntu/containerd/vendor/github.com/containerd/continuity/context.go\t:/usr/local/go/src/runtime/lockrank_off.go594: +320x12b\r\n fp=runtime.unlock0xc0000b17b0 sp=(...)\r\n\t0xc0000b1770 pc=/usr/local/go/src/runtime/lock_futex.go0x7813ab:\r\n112github.com/containerd/continuity.BuildManifest\r\nruntime.printunlock({(0x90e248)\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d354994d0 sp=0x7f7d354994b8 pc=0x43b41b\r\nruntime.throw.func1()\r\n\t/usr/local/go/src/runtime/panic.go:1044 +0x55 fp=0x7f7d35499500 sp=0x7f7d354994d0 pc=0x439a75\r\nruntime.throw({0x87177d?, 0x7f7d35499558?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499530 sp=0x7f7d35499500 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499550 sp=0x7f7d35499530 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\nruntime.unlock(...)\r\n\t/usr/local/go/src/runtime/lock_futex.go:112\r\nruntime.printunlock()\r\n\t/usr/local/go/src/runtime/print.go:80 +0x3b fp=0x7f7d35499568 sp=0x7f7d35499550 pc=0x43b41b?\r\n, runtime.throw.func10xc0001a2a50(})\r\n)\r\n\t\t/usr/local/go/src/runtime/panic.go/home/ubuntu/containerd/vendor/github.com/containerd/continuity/manifest.go::104485 + +0x550x111 fp= fp=0x7f7d354995980xc0000b18d8 sp= sp=0x7f7d354995680xc0000b17b0 pc= pc=0x439a750x782ed1\r\n\r\nruntime.throwgithub.com/containerd/continuity/fs/fstest.CheckDirectoryEqual({0x87177d?, 0x7f7d354995f0?})\r\n({\t0xc00011d280/usr/local/go/src/runtime/panic.go, :0x3c1043} +, 0x46{ fp=0xc00002eb100x7f7d354995c8,  sp=0x300x7f7d35499598} pc=)\r\n0x4399e6\r\n\truntime.unlock2/home/ubuntu/containerd/vendor/github.com/containerd/continuity/fs/fstest/compare.go:(440x1b +?0x1ce)\r\n fp=\t0xc0000b1a38/usr/local/go/src/runtime/lock_futex.go sp=:0xc0000b18d8127 pc= +0x786dee0x7a\r\n fp=github.com/containerd/containerd/snapshots/testsuite.check128LayersMount.func10x7f7d354995e8 sp=0x7f7d354995c8( pc={0x40db9a0x90e1d8\r\n, runtime.unlockWithRank0xc00017b350(...)\r\n}\t, /usr/local/go/src/runtime/lockrank_off.go0xc00012eea0, :{320x90ff20\r\n, runtime.unlock0xc0000690e0(...)\r\n}\t, /usr/local/go/src/runtime/lock_futex.go{:0xc00002ea50112,\r\n0x2bruntime.printunlock})\r\n()\r\n\t/home/ubuntu/containerd/snapshots/testsuite/testsuite.go\t:/usr/local/go/src/runtime/print.go942: +800x14d4 + fp=0x3b0xc0000b1df0 fp= sp=0x7f7d354996000xc0000b1a38 sp= pc=0x7f7d354995e80x79fbb4 pc=\r\n0x43b41bgithub.com/containerd/containerd/snapshots/testsuite.makeTest.func1\r\nruntime.throw.func1(()\r\n0xc00012eea0)\r\n\t\t/usr/local/go/src/runtime/panic.go/home/ubuntu/containerd/snapshots/testsuite/testsuite.go:1044: +1170x55 + fp=0x4740x7f7d35499630 fp=0xc0000b1f70 sp=0x7f7d35499600 pc=0x439a75\r\n sp=runtime.throw0xc0000b1df0 pc=(0x794fd4{0x87177d?, 0x7f7d35499688?})\r\n\t/usr/local/go/src/runtime/panic.go:1043 +0x46 fp=0x7f7d35499660 sp=0x7f7d35499630 pc=0x4399e6\r\nruntime.unlock2(0x1b?)\r\n\t/usr/local/go/src/runtime/lock_futex.go:127 +0x7a fp=0x7f7d35499680 sp=0x7f7d35499660 pc=0x40db9a\r\nruntime.unlockWithRank(...)\r\n\t/usr/local/go/src/runtime/lockrank_off.go:32\r\n\r\nruntime.unlock(...)\r\ntesting.tRunner\t(/usr/local/go/src/runtime/lock_futex.go0xc00012eea0:, 1120xc00017a9c0\r\n)\r\nruntime.printunlock\t(/usr/local/go/src/testing/testing.go)\r\n\t/usr/local/go/src/runtime/print.go::80 +0x3b fp=0x7f7d35499698 sp=14460x7f7d35499680 pc= +0x43b41b0x10b\r\n fp=runtime.throw.func10xc0000b1fc0 sp=(0xc0000b1f70)\r\n pc=0x5137cb\r\n/usr/local/go/src/runtime/panic.gotesting.(*T).Run.func1:(1044 +)\r\n\t0x55 fp=/usr/local/go/src/testing/testing.go0x7f7d354996c8: sp=14930x7f7d35499698 + pc=0x2a0x439a75 fp=\r\n0xc0000b1fe0\r\n sp=0xc0000b1fc0goroutine  pc=80x51466a [\r\nrunningruntime.goexit]:\r\n(runtime.systemstack_switch)\r\n\t(/usr/local/go/src/runtime/asm_amd64.s)\r\n:\t1594/usr/local/go/src/runtime/asm_amd64.s +:0x1459 fp= fp=0xc0000b1fe80xc0000b0e78 sp= sp=0xc0000b1fe00xc0000b0e70 pc= pc=0x46d6010x46b3e0\r\n\r\ncreated by runtime.fatalthrowtesting.(*T).Run(\r\n0xb0ec0\t?)\r\n/usr/local/go/src/testing/testing.go\t:/usr/local/go/src/runtime/panic.go1493: +0x35f1122\r\n</pre></details>\r\n\r\nThe crashes also consistently occur on GitHub Actions CI runners, which rules out hardware as a candidate.\r\n\r\nCompiling with Cgo is a necessary condition to reproduce the issue. There is no user Cgo code in the built test binary, only runtime and std.\r\n```console\r\n~/containerd$ go test -tags osusergo,netgo ./snapshots/overlay\r\n~/containerd$ ldd overlay.test\r\n\tnot a dynamic executable\r\n```\r\nI could not reproduce the issue on a pure-Go build.\r\n\r\nI loaded up some core dumps into gdb and noticed a consistent pattern to the state of the process at the time of the crash.\r\n- Most threads were blocked on a futex, epollwait or usleep\r\n- One thread was blocked on a syscall\r\n- One thread was a freshly `clone3()`'d child, without having executed a single instruction (pc pointed to the instruction following the syscall, `rax = 0` and `rsp` was set to exactly `.stack + .stack_size` of the clone_args struct pointed to by `rdi`.)\r\n- One thread was getting into trouble while in the process of exiting\r\n\r\nI saw no evidence suggesting heap corruption when examining the core dumps. I learned that `curg().m.locks` was always set to -1 when the fatal `runtime.lock` call was made. On a hunch I patched one of the few unguarded and unbalanced decrements of an `m.locks`, `runtime.releasem()`:\r\n```diff\r\n--- a/runtime/runtime1.go\r\n+++ b/runtime/runtime1.go\r\n@@ -482,6 +482,9 @@ func acquirem() *m {\r\n //go:nosplit\r\n func releasem(mp *m) {\r\n        _g_ := getg()\r\n+       if mp.locks == 0 {\r\n+               crash()\r\n+       }\r\n        mp.locks--\r\n        if mp.locks == 0 && _g_.preempt {\r\n                // restore the preemption request in case we've cleared it in newstack\r\n```\r\n\r\nand was able to get clean stack traces without the recursive panicking.\r\n\r\n```\r\n(gdb) bt\r\n#0  runtime.raise () at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n#1  0x0000000000450945 in runtime.dieFromSignal (sig=6)\r\n    at /usr/local/go/src/runtime/signal_unix.go:870\r\n#2  0x000000000045127e in runtime.sigfwdgo (sig=6, info=<optimized out>,\r\n    ctx=<optimized out>, ~r0=<optimized out>)\r\n    at /usr/local/go/src/runtime/signal_unix.go:1086\r\n#3  0x000000000044f5e7 in runtime.sigtrampgo (sig=0, info=0x0,\r\n    ctx=0x46f521 <runtime.raise+33>)\r\n    at /usr/local/go/src/runtime/signal_unix.go:432\r\n#4  0x000000000046f826 in runtime.sigtramp ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:359\r\n#5  <signal handler called>\r\n#6  runtime.raise () at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n#7  0x0000000000450945 in runtime.dieFromSignal (sig=6)\r\n    at /usr/local/go/src/runtime/signal_unix.go:870\r\n#8  0x000000000044b9ac in runtime.crash ()\r\n    at /usr/local/go/src/runtime/signal_unix.go:962\r\n#9  runtime.releasem (mp=0xc000154400)\r\n    at /usr/local/go/src/runtime/runtime1.go:486\r\n#10 0x0000000000440985 in runtime.startm (_p_=0xc000034000, spinning=false)\r\n    at /usr/local/go/src/runtime/proc.go:2339\r\n#11 0x0000000000440cee in runtime.handoffp (_p_=0x0)\r\n    at /usr/local/go/src/runtime/proc.go:2352\r\n#12 0x000000000043f597 in runtime.mexit (osStack=true)\r\n    at /usr/local/go/src/runtime/proc.go:1537\r\n#13 0x000000000043f1e9 in runtime.mstart0 ()\r\n    at /usr/local/go/src/runtime/proc.go:1391\r\n#14 0x000000000046b905 in runtime.mstart ()\r\n    at /usr/local/go/src/runtime/asm_amd64.s:390\r\n#15 0x0000000000401888 in runtime/cgo(.text) ()\r\n#16 0x00007f94950c1920 in ?? ()\r\n#17 0x00007f94bc5eb850 in ?? () at ./nptl/pthread_create.c:321\r\n   from /lib/x86_64-linux-gnu/libc.so.6\r\n#18 0x0000000000000000 in ?? ()\r\n(gdb) info threads\r\n  Id   Target Id                          Frame\r\n* 1    Thread 0x7f9492565640 (LWP 186374) runtime.raise ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:159\r\n  2    Thread 0x7f94bc554740 (LWP 186359) runtime.futex ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:560\r\n  3    Thread 0x7f949371f640 (LWP 186363) runtime.futex ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:560\r\n  4    Thread 0x7f9494721640 (LWP 186389) runtime.epollwait ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:706\r\n  5    Thread 0x7f94950c2640 (LWP 186360) runtime.usleep ()\r\n    at /usr/local/go/src/runtime/sys_linux_amd64.s:140\r\n  6    Thread 0x7f9492d66640 (LWP 186390) runtime/internal/syscall.Syscall6\r\n    () at /usr/local/go/src/runtime/internal/syscall/asm_linux_amd64.s:36\r\n  7    Thread 0x7f9493f20640 (LWP 186391) clone3 ()\r\n    at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:62\r\n```\r\n\r\nEvery core dump I examined has the same traceback in the crashing thread. It's always a pthreads thread in the process of cleaning up and exiting, calling `releasem()` while its `curg().m.locks == -1`.\r\n\r\nThe garbage collector is also seemingly necessary to cause crashes. Setting `GOGC=0` produces more reliable crashes, while I have yet to get a crash with `GOGC=off`. There seems to be some aspect of timing, as well. Turning the test verbosity on or off affects the probability of a crash, and I have yet to get a crash when running a race-enabled build or under `strace`.\r\n\r\n(cc @cpuguy83)",console\r\n~/containerd$ go test -c ./snapshots/overlay\r\n~/containerd$ sudo ./overlay.test -test.run -test.root TestOverlay/no_opt/128LayersMount\r\n
56188,"x/perf: resource leaks from unclosed objects reported by staticmajor### What did you do?\r\nRan [staticmajor](https://github.com/marketplace/actions/staticmajor-analyzer) within Orijtech Inc, and it produced this manifest of issues\r\n\r\n\r\nin which:\r\n* there are sql.Statements that are unclosed because they were created like this `_, err = tx.Stmt(db.insertUpload).Exec(id, day, num)`\r\n* there is an unclosed sql.DB in case of an error\r\n* a multipart.Writer is unnecessarily created before an HTTP request is constructed and doesn't error\r\n* the `storage/fs.FS` abstraction makes it so that `storage/fs/gcs.NewWriter` creates a Google Cloud Storage client that never gets closed\r\n\r\nthe resource leaks are real and all resource leaks except for the storage.Client resource leak can be fixed by this diff\r\n```diff\r\ndiff --git a/storage/client.go b/storage/client.go\r\nindex 12d6ce2..dee1e49 100644\r\n--- a/storage/client.go\r\n+++ b/storage/client.go\r\n@@ -221,12 +221,13 @@ func (c *Client) NewUpload(ctx context.Context) *Upload {\r\n \thc := c.httpClient()\r\n \r\n \tpr, pw := io.Pipe()\r\n-\tmpw := multipart.NewWriter(pw)\r\n \r\n \treq, err := http.NewRequest(""POST"", c.BaseURL+""/upload"", pr)\r\n \tif err != nil {\r\n \t\treturn &Upload{err: err}\r\n \t}\r\n+\r\n+\tmpw := multipart.NewWriter(pw)\r\n \treq.Header.Set(""Content-Type"", mpw.FormDataContentType())\r\n \treq.Header.Set(""User-Agent"", ""golang.org/x/perf/storage"")\r\n \terrCh := make(chan error)\r\ndiff --git a/storage/db/db.go b/storage/db/db.go\r\nindex 1d92d24..8ed33d2 100644\r\n--- a/storage/db/db.go\r\n+++ b/storage/db/db.go\r\n@@ -42,11 +42,17 @@ type DB struct {\r\n // the same as the parameters for sql.Open. Only mysql and sqlite3 are\r\n // explicitly supported; other database engines will receive MySQL\r\n // query syntax which may or may not be compatible.\r\n-func OpenSQL(driverName, dataSourceName string) (*DB, error) {\r\n+func OpenSQL(driverName, dataSourceName string) (_ *DB, rerr error) {\r\n \tdb, err := sql.Open(driverName, dataSourceName)\r\n \tif err != nil {\r\n \t\treturn nil, err\r\n \t}\r\n+\tdefer func() {\r\n+\t\tif rerr != nil {\r\n+\t\t\tdb.Close()\r\n+\t\t}\r\n+\t}()\r\n+\r\n \tif hook := openHooks[driverName]; hook != nil {\r\n \t\tif err := hook(db); err != nil {\r\n \t\t\treturn nil, err\r\n@@ -229,7 +235,10 @@ func (db *DB) NewUpload(ctx context.Context) (*Upload, error) {\r\n \t\t}\r\n \t}()\r\n \tvar lastID string\r\n-\terr = tx.Stmt(db.lastUpload).QueryRow().Scan(&lastID)\r\n+\tstmt := tx.Stmt(db.lastUpload)\r\n+\terr = stmt.QueryRow().Scan(&lastID)\r\n+\tstmt.Close()\r\n+\r\n \tswitch err {\r\n \tcase sql.ErrNoRows:\r\n \tcase nil:\r\n@@ -247,7 +256,9 @@ func (db *DB) NewUpload(ctx context.Context) (*Upload, error) {\r\n \r\n \tid := fmt.Sprintf(""%s.%d"", day, num)\r\n \r\n-\t_, err = tx.Stmt(db.insertUpload).Exec(id, day, num)\r\n+\tstmt = tx.Stmt(db.insertUpload)\r\n+\t_, err = stmt.Exec(id, day, num)\r\n+\tstmt.Close()\r\n \tif err != nil {\r\n \t\treturn nil, err\r\n \t}\r\n```\r\n\r\nKind FYI for @kirbyquerby @elias-orijtech @willpoint @jhusdero\r\n",NeedsFix|compiler/runtime,odeke-em,"### What did you do?\r\nRan [staticmajor](https://github.com/marketplace/actions/staticmajor-analyzer) within Orijtech Inc, and it produced this manifest of issues\r\n```shell\r\n/go/src/golang.org/x/perf/storage/client.go:228:3: leaking resource created on line 224\r\n/go/src/golang.org/x/perf/storage/db/db.go:57:3: leaking resource created on line 55\r\n/go/src/golang.org/x/perf/storage/db/db.go:60:3: leaking resource created on line 55\r\n/go/src/golang.org/x/perf/storage/db/db.go:250:18: leaking resource\r\n/go/src/golang.org/x/perf/storage/db/db.go:232:15: leaking resource\r\n/go/src/golang.org/x/perf/storage/fs/gcs/gcs.go:22:34: leaking resource\r\n```\r\n\r\nin which:\r\n* there are sql.Statements that are unclosed because they were created like this `_, err = tx.Stmt(db.insertUpload).Exec(id, day, num)`\r\n* there is an unclosed sql.DB in case of an error\r\n* a multipart.Writer is unnecessarily created before an HTTP request is constructed and doesn't error\r\n* the `storage/fs.FS` abstraction makes it so that `storage/fs/gcs.NewWriter` creates a Google Cloud Storage client that never gets closed\r\n\r\nthe resource leaks are real and all resource leaks except for the storage.Client resource leak can be fixed by this diff\r\n```diff\r\ndiff --git a/storage/client.go b/storage/client.go\r\nindex 12d6ce2..dee1e49 100644\r\n--- a/storage/client.go\r\n+++ b/storage/client.go\r\n@@ -221,12 +221,13 @@ func (c *Client) NewUpload(ctx context.Context) *Upload {\r\n \thc := c.httpClient()\r\n \r\n \tpr, pw := io.Pipe()\r\n-\tmpw := multipart.NewWriter(pw)\r\n \r\n \treq, err := http.NewRequest(""POST"", c.BaseURL+""/upload"", pr)\r\n \tif err != nil {\r\n \t\treturn &Upload{err: err}\r\n \t}\r\n+\r\n+\tmpw := multipart.NewWriter(pw)\r\n \treq.Header.Set(""Content-Type"", mpw.FormDataContentType())\r\n \treq.Header.Set(""User-Agent"", ""golang.org/x/perf/storage"")\r\n \terrCh := make(chan error)\r\ndiff --git a/storage/db/db.go b/storage/db/db.go\r\nindex 1d92d24..8ed33d2 100644\r\n--- a/storage/db/db.go\r\n+++ b/storage/db/db.go\r\n@@ -42,11 +42,17 @@ type DB struct {\r\n // the same as the parameters for sql.Open. Only mysql and sqlite3 are\r\n // explicitly supported; other database engines will receive MySQL\r\n // query syntax which may or may not be compatible.\r\n-func OpenSQL(driverName, dataSourceName string) (*DB, error) {\r\n+func OpenSQL(driverName, dataSourceName string) (_ *DB, rerr error) {\r\n \tdb, err := sql.Open(driverName, dataSourceName)\r\n \tif err != nil {\r\n \t\treturn nil, err\r\n \t}\r\n+\tdefer func() {\r\n+\t\tif rerr != nil {\r\n+\t\t\tdb.Close()\r\n+\t\t}\r\n+\t}()\r\n+\r\n \tif hook := openHooks[driverName]; hook != nil {\r\n \t\tif err := hook(db); err != nil {\r\n \t\t\treturn nil, err\r\n@@ -229,7 +235,10 @@ func (db *DB) NewUpload(ctx context.Context) (*Upload, error) {\r\n \t\t}\r\n \t}()\r\n \tvar lastID string\r\n-\terr = tx.Stmt(db.lastUpload).QueryRow().Scan(&lastID)\r\n+\tstmt := tx.Stmt(db.lastUpload)\r\n+\terr = stmt.QueryRow().Scan(&lastID)\r\n+\tstmt.Close()\r\n+\r\n \tswitch err {\r\n \tcase sql.ErrNoRows:\r\n \tcase nil:\r\n@@ -247,7 +256,9 @@ func (db *DB) NewUpload(ctx context.Context) (*Upload, error) {\r\n \r\n \tid := fmt.Sprintf(""%s.%d"", day, num)\r\n \r\n-\t_, err = tx.Stmt(db.insertUpload).Exec(id, day, num)\r\n+\tstmt = tx.Stmt(db.insertUpload)\r\n+\t_, err = stmt.Exec(id, day, num)\r\n+\tstmt.Close()\r\n \tif err != nil {\r\n \t\treturn nil, err\r\n \t}\r\n```\r\n\r\nKind FYI for @kirbyquerby @elias-orijtech @willpoint @jhusdero\r\n",shell\r\n/go/src/golang.org/x/perf/storage/client.go:228:3: leaking resource created on line 224\r\n/go/src/golang.org/x/perf/storage/db/db.go:57:3: leaking resource created on line 55\r\n/go/src/golang.org/x/perf/storage/db/db.go:60:3: leaking resource created on line 55\r\n/go/src/golang.org/x/perf/storage/db/db.go:250:18: leaking resource\r\n/go/src/golang.org/x/perf/storage/db/db.go:232:15: leaking resource\r\n/go/src/golang.org/x/perf/storage/fs/gcs/gcs.go:22:34: leaking resource\r\n
56150,"runtime/cgo: incorrectly handle SIGPIPE(and other signals) from non-Go thread<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/secret/.cache/go-build""\r\nGOENV=""/home/secret/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/secret/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/secret/go""\r\nGOPROXY=""https://goproxy.cn|https://proxy.golang.org|direct""\r\nGOROOT=""/data00/home/secret/go1.19""\r\nGOSUMDB=""sum.golang.google.cn""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/data00/home/secret/go1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build457638227=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nFollowing code is a minimal example. SIGPIPE raised from linux socket write, but can be reproduced by the following form.\r\n\r\nAccording to the [document](https://pkg.go.dev/os/signal#hdr-SIGPIPE), SIGPIPE should be caught by default, without affect program, just like the kill line in `test` function. But in sub-thread created by pthread, the SIGPIPE trigger the runtime.raisebadsignal, and make program exit, like kill line in `subThread` function (uncomment it).\r\n\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nGo runtime catch the SIGPIPE from thread created by pthread, and everything works fine.\r\n\r\n### What did you see instead?\r\n(uncomment kill function in `subThread`)\r\nkill in `subThread` make program exit, kill in `test` make program continue running.",Documentation|NeedsFix|FrozenDueToAge|compiler/runtime,ianlancetaylor,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/secret/.cache/go-build""\r\nGOENV=""/home/secret/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/secret/go/pkg/mod""\r\nGOOS=""linux""\r\nGOPATH=""/home/secret/go""\r\nGOPROXY=""https://goproxy.cn|https://proxy.golang.org|direct""\r\nGOROOT=""/data00/home/secret/go1.19""\r\nGOSUMDB=""sum.golang.google.cn""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/data00/home/secret/go1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build457638227=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nFollowing code is a minimal example. SIGPIPE raised from linux socket write, but can be reproduced by the following form.\r\n\r\nAccording to the [document](https://pkg.go.dev/os/signal#hdr-SIGPIPE), SIGPIPE should be caught by default, without affect program, just like the kill line in `test` function. But in sub-thread created by pthread, the SIGPIPE trigger the runtime.raisebadsignal, and make program exit, like kill line in `subThread` function (uncomment it).\r\n\r\n\r\n```go\r\npackage main\r\n\r\n/*\r\n#include <pthread.h>\r\n#include <signal.h>\r\n#include <unistd.h>\r\n#include <sys/syscall.h>\r\n#define gettid() syscall(SYS_gettid)\r\n\r\nvoid *subThread(void *_)\r\n{\r\n    // kill(gettid(), SIGPIPE); // kill by thread id\r\n    return NULL;\r\n}\r\n\r\nvoid test()\r\n{\r\n    pthread_t thread_id;\r\n    pthread_create(&thread_id, NULL, subThread, NULL);\r\n    pthread_join(thread_id, NULL);\r\n\r\n    kill(gettid(), SIGPIPE);\r\n}\r\n*/\r\nimport ""C""\r\n\r\nfunc main() {\r\n\tC.test()\r\n\r\n\t// should not exit\r\n\tselect {}\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nGo runtime catch the SIGPIPE from thread created by pthread, and everything works fine.\r\n\r\n### What did you see instead?\r\n(uncomment kill function in `subThread`)\r\nkill in `subThread` make program exit, kill in `test` make program continue running.","go\r\npackage main\r\n\r\n/*\r\n#include <pthread.h>\r\n#include <signal.h>\r\n#include <unistd.h>\r\n#include <sys/syscall.h>\r\n#define gettid() syscall(SYS_gettid)\r\n\r\nvoid *subThread(void *_)\r\n{\r\n    // kill(gettid(), SIGPIPE); // kill by thread id\r\n    return NULL;\r\n}\r\n\r\nvoid test()\r\n{\r\n    pthread_t thread_id;\r\n    pthread_create(&thread_id, NULL, subThread, NULL);\r\n    pthread_join(thread_id, NULL);\r\n\r\n    kill(gettid(), SIGPIPE);\r\n}\r\n*/\r\nimport ""C""\r\n\r\nfunc main() {\r\n\tC.test()\r\n\r\n\t// should not exit\r\n\tselect {}\r\n}\r\n"
56105,"internal/fuzz: array literal initialization causes ICE ""unhandled stmt ASOP"" while fuzzing### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes:\r\n\r\n<pre>\r\n$ gotip version\r\ngo version devel go1.20-40c7e94cc5 Fri Oct 7 20:20:51 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/arm64, linux/arm64\r\n\r\n### What did you do?\r\n\r\nRun `go test -fuzz .` in a package containing this file:\r\n\r\nhttps://go.dev/play/p/T2-Smn6iHXV\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNothing.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go1.19.2 test -fuzz .\r\n# asop [asop.test]\r\n./asop_test.go:8:16: internal compiler error: 'TestSomething': unhandled stmt ASOP\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL\tasop [build failed]\r\n```\r\n\r\n```\r\n$ gotip test -fuzz .\r\n# asop [asop.test]\r\n./asop_test.go:8:16: internal compiler error: 'TestSomething': unhandled stmt ASOP\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/Users/adam/go/gos/tip/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x3ee948?, 0x140?}, {0x140003ee920, 0x17}, {0x140007064a0, 0x2, 0x2})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/base/print.go:227 +0x224\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/base/print.go:196\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x4a66328?, 0x1?}, {0x104c49b61, 0x11}, {0x14000097d60, 0x1, 0x1400048d301?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:7843 +0x154\r\ncmd/compile/internal/ssagen.(*state).Fatalf(0x140000a4700?, {0x104c49b61?, 0x1400048d3f0?}, {0x14000097d60?, 0x14000800000?, 0x1044905d0?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:938 +0x78\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3dfa0, 0x1400006ea80?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:2006 +0x2bcc\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3ee00, 0x14000705dc0?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1754 +0x363c\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3e058, 0x14000491590?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1438 +0x108\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.buildssa(0x1400048b900, 0x0)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:554 +0x1b88\r\ncmd/compile/internal/ssagen.Compile(0x1400048b900, 0x140007063a0?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/pgen.go:187 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x105678101?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:171 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x0?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:125 +0x28\r\ncmd/compile/internal/gc.compileFunctions.func5({0x140000aef58, 0x1, 0x1?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:170 +0x54\r\ncmd/compile/internal/gc.compileFunctions()\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:181 +0x22c\r\ncmd/compile/internal/gc.Main(0x104e334f0)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/main.go:311 +0x1368\r\nmain.main()\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/main.go:57 +0xf4\r\n\r\nFAIL\tasop [build failed]\r\n```\r\n\r\n### Notes\r\n\r\n* This is reduced from a larger table-driven test case in a package that had not previously had `go fuzz` run against it.\r\n* `go build` and `go test` have no problem with this code.\r\n* Four or fewer inner slices do not trigger the bug.\r\n* The bug is not present in 1.18.7, but is in 1.19.\r\n* Bisecting traces this back to 0bd7408f901f33c6f0a5a542f8de6bf17c901e79 (https://go-review.googlesource.com/c/go/+/403995)",NeedsFix|FrozenDueToAge,cuonglm,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.2 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes:\r\n\r\n<pre>\r\n$ gotip version\r\ngo version devel go1.20-40c7e94cc5 Fri Oct 7 20:20:51 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/arm64, linux/arm64\r\n\r\n### What did you do?\r\n\r\nRun `go test -fuzz .` in a package containing this file:\r\n\r\nhttps://go.dev/play/p/T2-Smn6iHXV\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc TestSomething(t *testing.T) {\r\n\t_ = [...][]int{{}, {}, {}, {}, {}}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNothing.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go1.19.2 test -fuzz .\r\n# asop [asop.test]\r\n./asop_test.go:8:16: internal compiler error: 'TestSomething': unhandled stmt ASOP\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://go.dev/issue/new\r\nFAIL\tasop [build failed]\r\n```\r\n\r\n```\r\n$ gotip test -fuzz .\r\n# asop [asop.test]\r\n./asop_test.go:8:16: internal compiler error: 'TestSomething': unhandled stmt ASOP\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/Users/adam/go/gos/tip/src/runtime/debug/stack.go:24 +0x64\r\ncmd/compile/internal/base.FatalfAt({0x3ee948?, 0x140?}, {0x140003ee920, 0x17}, {0x140007064a0, 0x2, 0x2})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/base/print.go:227 +0x224\r\ncmd/compile/internal/base.Fatalf(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/base/print.go:196\r\ncmd/compile/internal/ssagen.(*ssafn).Fatalf(0x0?, {0x4a66328?, 0x1?}, {0x104c49b61, 0x11}, {0x14000097d60, 0x1, 0x1400048d301?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:7843 +0x154\r\ncmd/compile/internal/ssagen.(*state).Fatalf(0x140000a4700?, {0x104c49b61?, 0x1400048d3f0?}, {0x14000097d60?, 0x14000800000?, 0x1044905d0?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:938 +0x78\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3dfa0, 0x1400006ea80?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:2006 +0x2bcc\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3ee00, 0x14000705dc0?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1754 +0x363c\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.(*state).stmt(0x140000a4700, {0x104e3e058, 0x14000491590?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1438 +0x108\r\ncmd/compile/internal/ssagen.(*state).stmtList(...)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:1423\r\ncmd/compile/internal/ssagen.buildssa(0x1400048b900, 0x0)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/ssa.go:554 +0x1b88\r\ncmd/compile/internal/ssagen.Compile(0x1400048b900, 0x140007063a0?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/ssagen/pgen.go:187 +0x30\r\ncmd/compile/internal/gc.compileFunctions.func5.1(0x105678101?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:171 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x0?)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:125 +0x28\r\ncmd/compile/internal/gc.compileFunctions.func5({0x140000aef58, 0x1, 0x1?})\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:170 +0x54\r\ncmd/compile/internal/gc.compileFunctions()\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/compile.go:181 +0x22c\r\ncmd/compile/internal/gc.Main(0x104e334f0)\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/internal/gc/main.go:311 +0x1368\r\nmain.main()\r\n\t/Users/adam/go/gos/tip/src/cmd/compile/main.go:57 +0xf4\r\n\r\nFAIL\tasop [build failed]\r\n```\r\n\r\n### Notes\r\n\r\n* This is reduced from a larger table-driven test case in a package that had not previously had `go fuzz` run against it.\r\n* `go build` and `go test` have no problem with this code.\r\n* Four or fewer inner slices do not trigger the bug.\r\n* The bug is not present in 1.18.7, but is in 1.19.\r\n* Bisecting traces this back to 0bd7408f901f33c6f0a5a542f8de6bf17c901e79 (https://go-review.googlesource.com/c/go/+/403995)","go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc TestSomething(t *testing.T) {\r\n\t_ = [...][]int{{}, {}, {}, {}, {}}\r\n}\r\n"
56103,"spec: disallow anonymous interface cyclesTL;DR: We should disallow declarations like `type I interface { m() interface { I } }`. They cause a lot of trouble for tools, and no one uses them in practice.\r\n\r\n# Background\r\n\r\nThe Go spec allows interface types to [embed](https://go.dev/ref/spec#Embedded_interfaces) other declared interfaces. For example, package io declares [ReadCloser](https://pkg.go.dev/io#ReadCloser) using the type literal `interface { Reader; Closer }`. This type literal is [identical](https://go.dev/ref/spec#Type_identity) to `interface { Read([]byte) (int, error); Close() error }`, but also to `interface { Reader; Close() error }` and `interface { Read([]byte) (int, error); Closer }`.\r\n\r\nType identity is a core concept of the Go language, and it's useful for tools (e.g., type checkers, compilers, static analysis passes) to have a canonical representation that types can be referred to with (e.g., to ensure runtime type descriptors representing identical types in separate compilation units are deduplicated by the linker). For interface types, the natural canonical representation is the fully expanded form without any embedded interfaces.\r\n\r\nHowever, this causes problems for some self-referential interface types. The simplest example is:\r\n\r\n\r\n\r\nTools would like to expand the `interface { I }` to a canonical, embedding-free representation. However, expanding it produces `interface { m() interface { I } }`, which again contains `interface { I }` and requires expansion. Handled naively, this process never terminates.\r\n\r\nThe (accepted) type aliases proposal [stated](https://go.googlesource.com/proposal/+/master/design/18130-type-alias.md#type-cycles): ""In contrast, aliases must be possible to \u201cexpand out\u201d, and there is no way to expand out an alias like `type T = *T`.""\r\n\r\nThe issue there was the same: given `type T = U`, we want to replace (expand) all occurrences of `T` with `U` to find a canonical type description. But if `U` is `*T`, then this process never terminates either.\r\n\r\n**Proposal:** I propose the same principle should apply to interface embedding: it should be possible to finitely expand all embedded interfaces, and we should disallow declarations like `type I interface { m() interface { I } }`.\r\n\r\n# Unused\r\n\r\nAnonymous, cyclic interfaces appear unused in practice. I ran an analysis of every unique module path indexed by index.golang.org, and I found only 2 occurrences of cyclic interfaces:\r\n\r\n* https://github.com/gozelus/zelus_rest/blob/master/core/db/db.go#L20\r\n* https://github.com/vetcher/go-astra/blob/master/test/assets/interfaces/source.go#L52\r\n\r\nHowever, neither of these packages appear to be imported anywhere, even within their own modules.\r\n\r\nThe first use case could be addressed by introducing a second named interface type like `type MySQLTx interface { MySQLDb; Rollback(); Commit() }`. (This would also allow https://github.com/gozelus/zelus_rest/blob/master/core/db/db.go#L48 to be changed to `func (d *dbImp) Begin() MySQLTx { ... }`, instead of requiring the interface type literal to be repeated.)\r\n\r\nThe second appears like it's meant to be a testdata file instead.\r\n\r\n# Broken\r\n\r\nIn the past, anonymous, cyclic interfaces have been a recurring issue that we've struggled to support: #10222, #16369, #25262, #29312.\r\n\r\nNotably, packages whose package export data contained an anonymous interface cycle couldn't be imported prior to Go 1.7, because the old textual export data format couldn't handle them. (See https://github.com/golang/go/issues/16369#issuecomment-232746915.)\r\n\r\nx/tools/go/ssa.Hasher has been known to mishandle them since 2018 (#26863), yet no end users have clamored for it to be fixed. This feature underpins many x/tools features like callgraph construction, points-to analysis, SSA building, gopls completion suggestions, and staticcheck. Moreover, [CL 439117](https://go-review.git.corp.google.com/c/tools/+/439117) was started to fix this issue, but has stalled as yet more failure cases are identified. The options at the moment are either: (1) continue to ignore the issue, (2) simplify interface hashing (at the risk of introducing collisions in realistic Go code), or (3) implement a considerably more complex algorithm.\r\n\r\nFinally, while waiting for my module analysis code to execute, I manually discovered many more implementation issues with anonymous, cyclic interfaces: #56045, #56046, #56055, #56056, #56057, #56059, #56061, #56062, #56063, #56065.\r\n\r\n# Why not tie to go.mod `go` version?\r\n\r\nIn #3939, it's been proposed to remove `int`->`string` conversions, because the semantics are surprising to new users. One recurring suggestion has been to tie this to the `go` line in go.mod files: old modules would continue to compile successfully, whereas new modules would get an error instead to protect users from misuse.\r\n\r\nCould we do the same for anonymous interface cycles?\r\n\r\nI argue no: the issue with anonymous interface cycles isn't that users accidentally use them (like `int`->`string` conversions), but that tools authors have to deal with them at all. As long as anonymous interface cycles are allowed anywhere, all tools authors have to deal with them (e.g., CL 439117 above). Users are better served by letting tools authors focus on features that users actually care about and use.",Documentation|Proposal|Proposal-Accepted,griesemer,"TL;DR: We should disallow declarations like `type I interface { m() interface { I } }`. They cause a lot of trouble for tools, and no one uses them in practice.\r\n\r\n# Background\r\n\r\nThe Go spec allows interface types to [embed](https://go.dev/ref/spec#Embedded_interfaces) other declared interfaces. For example, package io declares [ReadCloser](https://pkg.go.dev/io#ReadCloser) using the type literal `interface { Reader; Closer }`. This type literal is [identical](https://go.dev/ref/spec#Type_identity) to `interface { Read([]byte) (int, error); Close() error }`, but also to `interface { Reader; Close() error }` and `interface { Read([]byte) (int, error); Closer }`.\r\n\r\nType identity is a core concept of the Go language, and it's useful for tools (e.g., type checkers, compilers, static analysis passes) to have a canonical representation that types can be referred to with (e.g., to ensure runtime type descriptors representing identical types in separate compilation units are deduplicated by the linker). For interface types, the natural canonical representation is the fully expanded form without any embedded interfaces.\r\n\r\nHowever, this causes problems for some self-referential interface types. The simplest example is:\r\n\r\n```go\r\ntype I interface { m() interface { I } }\r\n```\r\n\r\nTools would like to expand the `interface { I }` to a canonical, embedding-free representation. However, expanding it produces `interface { m() interface { I } }`, which again contains `interface { I }` and requires expansion. Handled naively, this process never terminates.\r\n\r\nThe (accepted) type aliases proposal [stated](https://go.googlesource.com/proposal/+/master/design/18130-type-alias.md#type-cycles): ""In contrast, aliases must be possible to \u201cexpand out\u201d, and there is no way to expand out an alias like `type T = *T`.""\r\n\r\nThe issue there was the same: given `type T = U`, we want to replace (expand) all occurrences of `T` with `U` to find a canonical type description. But if `U` is `*T`, then this process never terminates either.\r\n\r\n**Proposal:** I propose the same principle should apply to interface embedding: it should be possible to finitely expand all embedded interfaces, and we should disallow declarations like `type I interface { m() interface { I } }`.\r\n\r\n# Unused\r\n\r\nAnonymous, cyclic interfaces appear unused in practice. I ran an analysis of every unique module path indexed by index.golang.org, and I found only 2 occurrences of cyclic interfaces:\r\n\r\n* https://github.com/gozelus/zelus_rest/blob/master/core/db/db.go#L20\r\n* https://github.com/vetcher/go-astra/blob/master/test/assets/interfaces/source.go#L52\r\n\r\nHowever, neither of these packages appear to be imported anywhere, even within their own modules.\r\n\r\nThe first use case could be addressed by introducing a second named interface type like `type MySQLTx interface { MySQLDb; Rollback(); Commit() }`. (This would also allow https://github.com/gozelus/zelus_rest/blob/master/core/db/db.go#L48 to be changed to `func (d *dbImp) Begin() MySQLTx { ... }`, instead of requiring the interface type literal to be repeated.)\r\n\r\nThe second appears like it's meant to be a testdata file instead.\r\n\r\n# Broken\r\n\r\nIn the past, anonymous, cyclic interfaces have been a recurring issue that we've struggled to support: #10222, #16369, #25262, #29312.\r\n\r\nNotably, packages whose package export data contained an anonymous interface cycle couldn't be imported prior to Go 1.7, because the old textual export data format couldn't handle them. (See https://github.com/golang/go/issues/16369#issuecomment-232746915.)\r\n\r\nx/tools/go/ssa.Hasher has been known to mishandle them since 2018 (#26863), yet no end users have clamored for it to be fixed. This feature underpins many x/tools features like callgraph construction, points-to analysis, SSA building, gopls completion suggestions, and staticcheck. Moreover, [CL 439117](https://go-review.git.corp.google.com/c/tools/+/439117) was started to fix this issue, but has stalled as yet more failure cases are identified. The options at the moment are either: (1) continue to ignore the issue, (2) simplify interface hashing (at the risk of introducing collisions in realistic Go code), or (3) implement a considerably more complex algorithm.\r\n\r\nFinally, while waiting for my module analysis code to execute, I manually discovered many more implementation issues with anonymous, cyclic interfaces: #56045, #56046, #56055, #56056, #56057, #56059, #56061, #56062, #56063, #56065.\r\n\r\n# Why not tie to go.mod `go` version?\r\n\r\nIn #3939, it's been proposed to remove `int`->`string` conversions, because the semantics are surprising to new users. One recurring suggestion has been to tie this to the `go` line in go.mod files: old modules would continue to compile successfully, whereas new modules would get an error instead to protect users from misuse.\r\n\r\nCould we do the same for anonymous interface cycles?\r\n\r\nI argue no: the issue with anonymous interface cycles isn't that users accidentally use them (like `int`->`string` conversions), but that tools authors have to deal with them at all. As long as anonymous interface cycles are allowed anywhere, all tools authors have to deal with them (e.g., CL 439117 above). Users are better served by letting tools authors focus on features that users actually care about and use.",go\r\ntype I interface { m() interface { I } }\r\n
56046,cmd/compile: wrong type reported for generic cyclic interface\r\nreports the wrong type when [run](https://go.dev/play/p/vZXbzyWQ6Oz?v=gotip):\r\n```\r\nfunc(main.J) interface {}\r\n```\r\n(reported by @mdempsky),NeedsInvestigation|compiler/runtime,griesemer|findleyr,"```Go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype I[R any] interface{ m() R }\r\ntype J interface{ I[interface{ J }] }\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%T\\n"", J.m)\r\n}\r\n```\r\nreports the wrong type when [run](https://go.dev/play/p/vZXbzyWQ6Oz?v=gotip):\r\n```\r\nfunc(main.J) interface {}\r\n```\r\n(reported by @mdempsky)","Go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype I[R any] interface{ m() R }\r\ntype J interface{ I[interface{ J }] }\r\n\r\nfunc main() {\r\n\tfmt.Printf(""%T\\n"", J.m)\r\n}\r\n"
56045,"cmd/compile: panic for cyclic generic interfaces\r\ncauses a type-checker panic:\r\n```\r\n$ go tool compile testdata/manual.go \r\n<unknown line number>: internal compiler error: panic: nil underlying\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n        /Users/gri/goroot/src/runtime/debug/stack.go:24 +0x65\r\ncmd/compile/internal/base.FatalfAt({0x0?, 0x0?}, {0x1980893, 0x9}, {0xc0000c9d98, 0x1, 0x1})\r\n        /Users/gri/goroot/src/cmd/compile/internal/base/print.go:227 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n        /Users/gri/goroot/src/cmd/compile/internal/base/print.go:196\r\ncmd/compile/internal/gc.handlePanic()\r\n        /Users/gri/goroot/src/cmd/compile/internal/gc/main.go:49 +0x95\r\npanic({0x18eab80, 0x1aa3cc8})\r\n        /Users/gri/goroot/src/runtime/panic.go:884 +0x213\r\ncmd/compile/internal/types2.(*Checker).handleBailout(0xc0003be000, 0xc0000cb0d8)\r\n        /Users/gri/goroot/src/cmd/compile/internal/types2/check.go:294 +0x8b\r\npanic({0x18eab80, 0x1aa3cc8})\r\n        /Users/gri/goroot/src/runtime/panic.go:884 +0x213\r\ncmd/compile/internal/types2.(*Named).under(0xc00039b7a0)\r\n        /Users/gri/goroot/src/cmd/compile/internal/types2/named.go:494 +0x3a5\r\n...\r\n```\r\n(reported by @mdempsky)",NeedsInvestigation|compiler/runtime,griesemer|findleyr,"```Go\r\npackage p\r\n\r\ntype I[R any] interface{ m() R }\r\ntype J I[interface{ J }]\r\n```\r\ncauses a type-checker panic:\r\n```\r\n$ go tool compile testdata/manual.go \r\n<unknown line number>: internal compiler error: panic: nil underlying\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n        /Users/gri/goroot/src/runtime/debug/stack.go:24 +0x65\r\ncmd/compile/internal/base.FatalfAt({0x0?, 0x0?}, {0x1980893, 0x9}, {0xc0000c9d98, 0x1, 0x1})\r\n        /Users/gri/goroot/src/cmd/compile/internal/base/print.go:227 +0x1d7\r\ncmd/compile/internal/base.Fatalf(...)\r\n        /Users/gri/goroot/src/cmd/compile/internal/base/print.go:196\r\ncmd/compile/internal/gc.handlePanic()\r\n        /Users/gri/goroot/src/cmd/compile/internal/gc/main.go:49 +0x95\r\npanic({0x18eab80, 0x1aa3cc8})\r\n        /Users/gri/goroot/src/runtime/panic.go:884 +0x213\r\ncmd/compile/internal/types2.(*Checker).handleBailout(0xc0003be000, 0xc0000cb0d8)\r\n        /Users/gri/goroot/src/cmd/compile/internal/types2/check.go:294 +0x8b\r\npanic({0x18eab80, 0x1aa3cc8})\r\n        /Users/gri/goroot/src/runtime/panic.go:884 +0x213\r\ncmd/compile/internal/types2.(*Named).under(0xc00039b7a0)\r\n        /Users/gri/goroot/src/cmd/compile/internal/types2/named.go:494 +0x3a5\r\n...\r\n```\r\n(reported by @mdempsky)",Go\r\npackage p\r\n\r\ntype I[R any] interface{ m() R }\r\ntype J I[interface{ J }]\r\n
56022,"cmd/compile: confusing message for syntax errorBug mentioned by @apparentlymart in #55863.\r\n\r\nWith tip, compiling\r\n\r\n\r\n\r\nproduces the error messages\r\n\r\n```\r\nfoo.go:5:15: syntax error: unexpected (, expected name or (\r\nfoo.go:6:9: syntax error: unexpected { after top level declaration\r\n```\r\n\r\nThe first error makes no sense: it is saying that it found an unexpected left parenthesis when it expected a left parenthesis.\r\n\r\nI think the error is in `(*parser).funcDeclOrNil`: it should not say that it expects a left parenthesis if it already found a receiver.\r\n\r\nCC @griesemer ",NeedsFix|FrozenDueToAge|compiler/runtime,hopehook|griesemer,"Bug mentioned by @apparentlymart in #55863.\r\n\r\nWith tip, compiling\r\n\r\n```Go\r\npackage main\r\n\r\ntype Foo struct{}\r\n\r\nfunc (f *Foo) (\r\n\tBlah() {}\r\n)\r\n```\r\n\r\nproduces the error messages\r\n\r\n```\r\nfoo.go:5:15: syntax error: unexpected (, expected name or (\r\nfoo.go:6:9: syntax error: unexpected { after top level declaration\r\n```\r\n\r\nThe first error makes no sense: it is saying that it found an unexpected left parenthesis when it expected a left parenthesis.\r\n\r\nI think the error is in `(*parser).funcDeclOrNil`: it should not say that it expects a left parenthesis if it already found a receiver.\r\n\r\nCC @griesemer ",Go\r\npackage main\r\n\r\ntype Foo struct{}\r\n\r\nfunc (f *Foo) (\r\n\tBlah() {}\r\n)\r\n
55982,"x/tools/imports: Process do not remove used but duplicated imports### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/QEVFgl-HPhb\r\n\r\n### What did you expect to see?\r\n\r\n\r\nFor all cases.\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nP.S. Related to https://github.com/golang/go/issues/37689, because fix for my issue is to add import aliases.\r\n\r\n",NeedsInvestigation|FrozenDueToAge|Tools,findleyr,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What did you do?\r\n\r\nhttps://go.dev/play/p/QEVFgl-HPhb\r\n\r\n### What did you expect to see?\r\n\r\n```go\r\nimport (\r\n    ""fmt""\r\n)\r\n```\r\nFor all cases.\r\n\r\n### What did you see instead?\r\n\r\n```go\r\nimport (\r\n    ""fmt""\r\n)\r\n```\r\n\r\n```go\r\nimport (\r\n    ""fmt""\r\n\r\n    ""fmt""\r\n)\r\n```\r\n\r\n```go\r\nimport (\r\n    ""fmt""\r\n\r\n    ""fmt""\r\n\r\n    ""fmt""\r\n)\r\n```\r\n\r\n```go\r\nimport (\r\n    ""fmt""\r\n\r\n    ""fmt""\r\n\r\n    ""fmt""\r\n)\r\n```\r\n\r\nP.S. Related to https://github.com/golang/go/issues/37689, because fix for my issue is to add import aliases.\r\n\r\n","go\r\nimport (\r\n    ""fmt""\r\n)\r\n"
55930,"runtime: reuse map string key instead of allocatingConsider the following benchmark:\r\n\r\nThis currently prints:\r\n```\r\nBenchmark    \t37319388\t        29.83 ns/op\t      16 B/op\t       1 allocs/op\r\n```\r\nI expect this to not allocate since it is reusing the same map entry every time.\r\nThe very first `mapassign` will need to allocate the string on heap, but subsequent operations should not need to.\r\nThis is related to #45045, which made this optimization harder.\r\n\r\n\\cc @randall77 @cuonglm",Performance|NeedsInvestigation|compiler/runtime,mdempsky|randall77,"Consider the following benchmark:\r\n```go\r\nfunc Benchmark(b *testing.B) {\r\n\tm := map[string]int{}\r\n\tk := []byte(""hello, world"")\r\n\r\n\tb.ReportAllocs()\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tm[string(k)] = 1\r\n\t}\r\n}\r\n```\r\nThis currently prints:\r\n```\r\nBenchmark    \t37319388\t        29.83 ns/op\t      16 B/op\t       1 allocs/op\r\n```\r\nI expect this to not allocate since it is reusing the same map entry every time.\r\nThe very first `mapassign` will need to allocate the string on heap, but subsequent operations should not need to.\r\nThis is related to #45045, which made this optimization harder.\r\n\r\n\\cc @randall77 @cuonglm","go\r\nfunc Benchmark(b *testing.B) {\r\n\tm := map[string]int{}\r\n\tk := []byte(""hello, world"")\r\n\r\n\tb.ReportAllocs()\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tm[string(k)] = 1\r\n\t}\r\n}\r\n"
55254,"cmd/compile: internal compiler error: bad live variable at entry<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ntip commit - 1eeb257b88\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes, master branch\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```\r\n$ git clone https://github.com/kubernetes/kubernetes.git\r\n$ cd kubernetes\r\n$ make test\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nTests should be successful\r\n\r\n### What did you see instead?\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,erifan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ntip commit - 1eeb257b88\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes, master branch\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```\r\n$ git clone https://github.com/kubernetes/kubernetes.git\r\n$ cd kubernetes\r\n$ make test\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nTests should be successful\r\n\r\n### What did you see instead?\r\n\r\n```shell\r\n+ make test\r\n+++ [0920 02:22:47] Building go targets for linux/ppc64le\r\n    k8s.io/kubernetes/hack/make-rules/helpers/go2make (non-static)\r\n+++ [0920 02:23:44] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/prerelease-lifecycle-gen (non-static)\r\n+++ [0920 02:24:19] Generating prerelease lifecycle code for 28 targets\r\n+++ [0920 02:24:32] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/deepcopy-gen (non-static)\r\n+++ [0920 02:24:49] Generating deepcopy code for 243 targets\r\n+++ [0920 02:25:24] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/defaulter-gen (non-static)\r\n+++ [0920 02:25:35] Generating defaulter code for 96 targets\r\n+++ [0920 02:26:18] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/conversion-gen (non-static)\r\n+++ [0920 02:26:29] Generating conversion code for 133 targets\r\n+++ [0920 02:28:03] Building go targets for linux/ppc64le\r\n    k8s.io/kube-openapi/cmd/openapi-gen (non-static)\r\n+++ [0920 02:29:26] Generating openapi code for KUBE\r\n+++ [0920 02:30:35] Generating openapi code for AGGREGATOR\r\n+++ [0920 02:30:43] Generating openapi code for APIEXTENSIONS\r\n+++ [0920 02:30:50] Generating openapi code for CODEGEN\r\n+++ [0920 02:30:59] Generating openapi code for SAMPLEAPISERVER\r\n+++ [0920 02:31:15] Running tests without code coverage and with -race\r\n# k8s.io/kubernetes/vendor/k8s.io/client-go/kubernetes/typed/core/v1\r\nvendor/k8s.io/client-go/kubernetes/typed/core/v1/event_expansion.go:120:2: internal compiler error: bad live variable at entry of (*events).Search: stringRefUID (type string)\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/root/go/src/runtime/debug/stack.go:24 +0x6c\r\ncmd/compile/internal/base.FatalfAt({0x1e66c80?, 0xc0?}, {0x9317b8, 0x24}, {0xc002d350d8, 0x2, 0x2})\r\n\t/root/go/src/cmd/compile/internal/base/print.go:227 +0x270\r\ncmd/compile/internal/liveness.(*liveness).epilogue(0xc001e66c80)\r\n\t/root/go/src/cmd/compile/internal/liveness/plive.go:830 +0xa2c\r\ncmd/compile/internal/liveness.Compute(0xc001b5a8c0, 0xc001d77860, 0x258e10?, 0x259408?)\r\n\t/root/go/src/cmd/compile/internal/liveness/plive.go:1340 +0x90\r\ncmd/compile/internal/ssagen.genssa(0xc001d77860, 0xc001e00e00)\r\n\t/root/go/src/cmd/compile/internal/ssagen/ssa.go:6906 +0xac\r\ncmd/compile/internal/ssagen.Compile(0xc001b5a8c0, 0xc000076800?)\r\n\t/root/go/src/cmd/compile/internal/ssagen/pgen.go:197 +0x278\r\ncmd/compile/internal/gc.compileFunctions.func4.1(0x1?)\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:153 +0x4c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x7fff8b7a0a68?)\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:125 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func4({0xc002e73000, 0x1c5, 0x200?})\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:152 +0x7c\r\ncmd/compile/internal/gc.compileFunctions()\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:163 +0x188\r\ncmd/compile/internal/gc.Main(0x948570)\r\n\t/root/go/src/cmd/compile/internal/gc/main.go:301 +0x13a4\r\nmain.main()\r\n\t/root/go/src/cmd/compile/main.go:57 +0xfc\r\n```\r\n","shell\r\n+ make test\r\n+++ [0920 02:22:47] Building go targets for linux/ppc64le\r\n    k8s.io/kubernetes/hack/make-rules/helpers/go2make (non-static)\r\n+++ [0920 02:23:44] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/prerelease-lifecycle-gen (non-static)\r\n+++ [0920 02:24:19] Generating prerelease lifecycle code for 28 targets\r\n+++ [0920 02:24:32] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/deepcopy-gen (non-static)\r\n+++ [0920 02:24:49] Generating deepcopy code for 243 targets\r\n+++ [0920 02:25:24] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/defaulter-gen (non-static)\r\n+++ [0920 02:25:35] Generating defaulter code for 96 targets\r\n+++ [0920 02:26:18] Building go targets for linux/ppc64le\r\n    k8s.io/code-generator/cmd/conversion-gen (non-static)\r\n+++ [0920 02:26:29] Generating conversion code for 133 targets\r\n+++ [0920 02:28:03] Building go targets for linux/ppc64le\r\n    k8s.io/kube-openapi/cmd/openapi-gen (non-static)\r\n+++ [0920 02:29:26] Generating openapi code for KUBE\r\n+++ [0920 02:30:35] Generating openapi code for AGGREGATOR\r\n+++ [0920 02:30:43] Generating openapi code for APIEXTENSIONS\r\n+++ [0920 02:30:50] Generating openapi code for CODEGEN\r\n+++ [0920 02:30:59] Generating openapi code for SAMPLEAPISERVER\r\n+++ [0920 02:31:15] Running tests without code coverage and with -race\r\n# k8s.io/kubernetes/vendor/k8s.io/client-go/kubernetes/typed/core/v1\r\nvendor/k8s.io/client-go/kubernetes/typed/core/v1/event_expansion.go:120:2: internal compiler error: bad live variable at entry of (*events).Search: stringRefUID (type string)\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack()\r\n\t/root/go/src/runtime/debug/stack.go:24 +0x6c\r\ncmd/compile/internal/base.FatalfAt({0x1e66c80?, 0xc0?}, {0x9317b8, 0x24}, {0xc002d350d8, 0x2, 0x2})\r\n\t/root/go/src/cmd/compile/internal/base/print.go:227 +0x270\r\ncmd/compile/internal/liveness.(*liveness).epilogue(0xc001e66c80)\r\n\t/root/go/src/cmd/compile/internal/liveness/plive.go:830 +0xa2c\r\ncmd/compile/internal/liveness.Compute(0xc001b5a8c0, 0xc001d77860, 0x258e10?, 0x259408?)\r\n\t/root/go/src/cmd/compile/internal/liveness/plive.go:1340 +0x90\r\ncmd/compile/internal/ssagen.genssa(0xc001d77860, 0xc001e00e00)\r\n\t/root/go/src/cmd/compile/internal/ssagen/ssa.go:6906 +0xac\r\ncmd/compile/internal/ssagen.Compile(0xc001b5a8c0, 0xc000076800?)\r\n\t/root/go/src/cmd/compile/internal/ssagen/pgen.go:197 +0x278\r\ncmd/compile/internal/gc.compileFunctions.func4.1(0x1?)\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:153 +0x4c\r\ncmd/compile/internal/gc.compileFunctions.func2(0x7fff8b7a0a68?)\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:125 +0x3c\r\ncmd/compile/internal/gc.compileFunctions.func4({0xc002e73000, 0x1c5, 0x200?})\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:152 +0x7c\r\ncmd/compile/internal/gc.compileFunctions()\r\n\t/root/go/src/cmd/compile/internal/gc/compile.go:163 +0x188\r\ncmd/compile/internal/gc.Main(0x948570)\r\n\t/root/go/src/cmd/compile/internal/gc/main.go:301 +0x13a4\r\nmain.main()\r\n\t/root/go/src/cmd/compile/main.go:57 +0xfc\r\n"
55154,x/tools/gopls: add a method snippet to postfix completion**Is your feature request related to a problem? Please describe.**\r\nTyping out methods is tedious because one always has to fill the receiver field. The `meth` snippet is great but this would be even better.\r\n\r\n**Describe the solution you'd like**\r\nIt would be real slick to have a completion from:\r\n\r\n\r\nto\r\n\r\n\r\n,help wanted|FeatureRequest|gopls|Tools,SpikeWong,**Is your feature request related to a problem? Please describe.**\r\nTyping out methods is tedious because one always has to fill the receiver field. The `meth` snippet is great but this would be even better.\r\n\r\n**Describe the solution you'd like**\r\nIt would be real slick to have a completion from:\r\n\r\n```go\r\ntype X struct {}\r\n\r\nX.meth!\r\n```\r\nto\r\n```go\r\ntype X struct {}\r\n\r\nfunc (x X) _() {\r\n}\r\n```\r\n\r\n,go\r\ntype X struct {}\r\n\r\nX.meth!\r\n
55100,"runtime: GODEBUG=memprofilerate=1 does not take effect.<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/robert/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/Users/r/workspace/testgo/go1.19.1/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/workspace/testgo/go1.19.1/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build2412819877=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\ngo build main.go\r\nGODEBUG=memprofilerate=1  ./main\r\n\r\n\r\n### What did you expect to see?\r\nExpect output\uff0cignore the second value which may be change every time:\r\n`1 0x10029a650`\r\n\r\n\r\n### What did you see instead?\r\n`524288 0x10029a650`\r\n\r\n### more\r\nI also test this on linux-amd64 and it does not work either.\r\nI also test this with different go version. go1.17 and go1.18 and go1.19 all failed. go1.16 works as expect.\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,prattmic|cherrymui,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/r/Library/Caches/go-build""\r\nGOENV=""/Users/r/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/r/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/robert/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/Users/r/workspace/testgo/go1.19.1/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/r/workspace/testgo/go1.19.1/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j_/rq9ph2cd3h50w468sgv34lwh0000gn/T/go-build2412819877=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n```go\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""runtime""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(runtime.MemProfileRate, runtime.MemProfile)\r\n}\r\n```\r\ngo build main.go\r\nGODEBUG=memprofilerate=1  ./main\r\n\r\n\r\n### What did you expect to see?\r\nExpect output\uff0cignore the second value which may be change every time:\r\n`1 0x10029a650`\r\n\r\n\r\n### What did you see instead?\r\n`524288 0x10029a650`\r\n\r\n### more\r\nI also test this on linux-amd64 and it does not work either.\r\nI also test this with different go version. go1.17 and go1.18 and go1.19 all failed. go1.16 works as expect.\r\n\r\n\r\n","go\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""runtime""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(runtime.MemProfileRate, runtime.MemProfile)\r\n}\r\n"
55081,"all: resource leaks due to missing .Close() calls in various conditions<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nIrrelevant\r\n\r\n\r\n### What did you do?\r\nRan a static analyzer developed at Orijtech Inc called ""staticmajor"" and available on Github actions  per https://github.com/marketplace/actions/staticmajor-analyzer and it produced a laundry list of leaking resources like for example\r\nhttps://github.com/golang/go/blob/972870da11bb4ddd3df393473c494bd2b546cc56/src/compress/flate/deflate.go#L665-L670\r\n\r\nin which  the return on line 668 doesn't invoke `dw.Close()` which leaks the Writer\r\n\r\nor \r\nhttps://github.com/golang/go/blob/972870da11bb4ddd3df393473c494bd2b546cc56/src/encoding/pem/pem.go#L291-L294\r\n\r\nin which the return on line 293 doesn't invoke `b64.Close()`\r\n\r\n\r\n### What did you expect to see?\r\nNo resource leaks\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe laundry list is\r\n\r\n\r\n\r\nJust an FYI to @eliasnaur @kirbyquerby @willpoint @jhusdero\r\n\r\n",NeedsInvestigation,odeke-em,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nIrrelevant\r\n\r\n\r\n### What did you do?\r\nRan a static analyzer developed at Orijtech Inc called ""staticmajor"" and available on Github actions  per https://github.com/marketplace/actions/staticmajor-analyzer and it produced a laundry list of leaking resources like for example\r\nhttps://github.com/golang/go/blob/972870da11bb4ddd3df393473c494bd2b546cc56/src/compress/flate/deflate.go#L665-L670\r\n\r\nin which  the return on line 668 doesn't invoke `dw.Close()` which leaks the Writer\r\n\r\nor \r\nhttps://github.com/golang/go/blob/972870da11bb4ddd3df393473c494bd2b546cc56/src/encoding/pem/pem.go#L291-L294\r\n\r\nin which the return on line 293 doesn't invoke `b64.Close()`\r\n\r\n\r\n### What did you expect to see?\r\nNo resource leaks\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe laundry list is\r\n\r\n```shell\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/flate/deflate.go:668:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/archive/zip/reader.go:77:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/gzip/gunzip.go:95:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/zlib/reader.go:86:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/zlib/writer.go:132:42: leaking resource\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/pem/pem.go:293:3: leaking resource created on line 291\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:65:5: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:67:4: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:72:3: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:74:2: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/udpsock_posix.go:235:4: leaking resource created on line 226\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/crypto/tls/tls.go:159:3: leaking resource created on line 156\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/macho/file.go:227:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/macho/file.go:239:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/pe/file.go:70:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/pe/file.go:78:4: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/xcoff/ar.go:120:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/xcoff/ar.go:122:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/xml/marshal.go:84:3: leaking resource created on line 82\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/xml/marshal.go:135:3: leaking resource created on line 132\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/build/build.go:1170:5: leaking resource created on line 1159\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/ar.go:119:24: leaking resource\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/ar.go:145:4: leaking resource created on line 139\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/gccgoinstallation.go:40:3: leaking resource created on line 33\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 63\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 63\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:75:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:75:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:889:3: leaking resource created on line 882\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:893:3: leaking resource created on line 882\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:893:3: leaking resource created on line 887\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/http/cgi/host.go:249:3: leaking resource created on line 240\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/smtp/smtp.go:369:3: leaking resource created on line 363\r\n```\r\n\r\nJust an FYI to @eliasnaur @kirbyquerby @willpoint @jhusdero\r\n\r\n",shell\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/flate/deflate.go:668:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/archive/zip/reader.go:77:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/gzip/gunzip.go:95:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/zlib/reader.go:86:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/compress/zlib/writer.go:132:42: leaking resource\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/pem/pem.go:293:3: leaking resource created on line 291\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:65:5: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:67:4: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:72:3: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/sock_posix.go:74:2: leaking resource created on line 27\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/udpsock_posix.go:235:4: leaking resource created on line 226\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/crypto/tls/tls.go:159:3: leaking resource created on line 156\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/macho/file.go:227:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/macho/file.go:239:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/pe/file.go:70:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/debug/pe/file.go:78:4: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/xcoff/ar.go:120:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/xcoff/ar.go:122:3: leaking resource created on line 0\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/xml/marshal.go:84:3: leaking resource created on line 82\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/encoding/xml/marshal.go:135:3: leaking resource created on line 132\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/build/build.go:1170:5: leaking resource created on line 1159\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/ar.go:119:24: leaking resource\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/ar.go:145:4: leaking resource created on line 139\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/go/internal/gccgoimporter/gccgoinstallation.go:40:3: leaking resource created on line 33\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:66:3: leaking resource created on line 63\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:70:3: leaking resource created on line 63\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:75:3: leaking resource created on line 61\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/fuzz/sys_posix.go:75:3: leaking resource created on line 62\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:889:3: leaking resource created on line 882\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:893:3: leaking resource created on line 882\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/internal/trace/parser.go:893:3: leaking resource created on line 887\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/http/cgi/host.go:249:3: leaking resource created on line 240\r\n/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/net/smtp/smtp.go:369:3: leaking resource created on line 363\r\n
55061,"cmd/objdump: does not decode `VPUNPCK*` AVX2 instructions### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hugo/.cache/go-build""\r\nGOENV=""/home/hugo/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hugo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hugo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/home/hugo/Documents/Scripts/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hugo/Documents/Scripts/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2806241209=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n  amd64enc.s:9975\t0x12088\t\t\tc4e1316813\t\tVPUNPCKHBW (BX), X9, X2\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n  amd64enc.s:9975\t0x12088\t\t\tb168\t\t\tMOVL $0x68, CL\t\t\t\t\r\n  amd64enc.s:9975\t0x1208a\t\t\t13c4\t\t\tADCL SP, AX\r\n```",help wanted|NeedsInvestigation|FrozenDueToAge|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hugo/.cache/go-build""\r\nGOENV=""/home/hugo/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hugo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hugo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/home/hugo/Documents/Scripts/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hugo/Documents/Scripts/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a813be86df Tue Sep 13 17:43:40 2022 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2806241209=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```console\r\ngo/src$ go tool asm cmd/asm/internal/asm/testdata/amd64enc.s\r\ngo/src$ go tool objdump amd64enc.o | grep amd64enc.s:9975\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n  amd64enc.s:9975\t0x12088\t\t\tc4e1316813\t\tVPUNPCKHBW (BX), X9, X2\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n  amd64enc.s:9975\t0x12088\t\t\tb168\t\t\tMOVL $0x68, CL\t\t\t\t\r\n  amd64enc.s:9975\t0x1208a\t\t\t13c4\t\t\tADCL SP, AX\r\n```",console\r\ngo/src$ go tool asm cmd/asm/internal/asm/testdata/amd64enc.s\r\ngo/src$ go tool objdump amd64enc.o | grep amd64enc.s:9975\r\n
54959,"cmd/compile: unnamed functions missing FuncInfoContext: I am adding additional information to `runtime.inlinedCall` (function start line), which I am plumbing via the `FuncInfo`. In the linker, [this](https://cs.opensource.google/go/go/+/master:src/cmd/link/internal/ld/pcln.go;l=172) `FuncInfo.Valid()` got me thinking that (IMO) inlined functions ought to always have a `FuncInfo`, since they must be Go functions, so I switched the check to panic if it is missing.\r\n\r\nThis program fails that check:\r\n\r\n\r\n\r\n```\r\npanic: inlined function main.main.func2 missing func info\r\n\r\ngoroutine 1 [running]:\r\ncmd/link/internal/ld.genInlTreeSym(0xc000510000?, 0x200000010?, {0xc000510000, 0xc000166080, {0xc00016888d, 0x48, 0x48}, {0x1, 0x10, 0x2, ...}}, ...)\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:172 +0x419\r\ncmd/link/internal/ld.makeInlSyms(0xc000158000, {0xc000a5a000, 0x40c, 0x40c?}, 0x20?)\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:194 +0x245\r\ncmd/link/internal/ld.(*Link).pclntab(0xc000158000, {0xc000105900?, 0x1?, 0xf?})\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:786 +0x1e6\r\ncmd/link/internal/ld.Main(_, {0x20, 0x20, 0x1, 0x7, 0x10, 0x0, {0x0, 0x0}, {0x6886dd, ...}, ...})\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/main.go:328 +0x144a\r\nmain.main()\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/main.go:72 +0xedb\r\n```\r\n\r\nThe first closure (`fn`) has a `FuncInfo`, but the second does not. This seems like a bug to me, though it probably had low impact before because `FuncID` would default to `FuncID_normal` anyways.\r\n\r\nI am still digging, but it looks like this is somewhere in the compiler, as func2 never makes it to `ssagen.InitLSym`, which sets up the `FuncInfo`.\r\n\r\ncc @golang/compiler @cherrymui ",FrozenDueToAge|compiler/runtime,prattmic,"Context: I am adding additional information to `runtime.inlinedCall` (function start line), which I am plumbing via the `FuncInfo`. In the linker, [this](https://cs.opensource.google/go/go/+/master:src/cmd/link/internal/ld/pcln.go;l=172) `FuncInfo.Valid()` got me thinking that (IMO) inlined functions ought to always have a `FuncInfo`, since they must be Go functions, so I switched the check to panic if it is missing.\r\n\r\nThis program fails that check:\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n        var i int\r\n        fn := func() { i++ }\r\n        fn()\r\n\r\n        func() { i++ }()\r\n}\r\n```\r\n\r\n```\r\npanic: inlined function main.main.func2 missing func info\r\n\r\ngoroutine 1 [running]:\r\ncmd/link/internal/ld.genInlTreeSym(0xc000510000?, 0x200000010?, {0xc000510000, 0xc000166080, {0xc00016888d, 0x48, 0x48}, {0x1, 0x10, 0x2, ...}}, ...)\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:172 +0x419\r\ncmd/link/internal/ld.makeInlSyms(0xc000158000, {0xc000a5a000, 0x40c, 0x40c?}, 0x20?)\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:194 +0x245\r\ncmd/link/internal/ld.(*Link).pclntab(0xc000158000, {0xc000105900?, 0x1?, 0xf?})\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/pcln.go:786 +0x1e6\r\ncmd/link/internal/ld.Main(_, {0x20, 0x20, 0x1, 0x7, 0x10, 0x0, {0x0, 0x0}, {0x6886dd, ...}, ...})\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/internal/ld/main.go:328 +0x144a\r\nmain.main()\r\n        /usr/local/google/home/mpratt/src/go/src/cmd/link/main.go:72 +0xedb\r\n```\r\n\r\nThe first closure (`fn`) has a `FuncInfo`, but the second does not. This seems like a bug to me, though it probably had low impact before because `FuncID` would default to `FuncID_normal` anyways.\r\n\r\nI am still digging, but it looks like this is somewhere in the compiler, as func2 never makes it to `ssagen.InitLSym`, which sets up the `FuncInfo`.\r\n\r\ncc @golang/compiler @cherrymui ",go\r\npackage main\r\n\r\nfunc main() {\r\n        var i int\r\n        fn := func() { i++ }\r\n        fn()\r\n\r\n        func() { i++ }()\r\n}\r\n
54908,"cmd/go: install -mod=readonly pkg@version uses -lang=go1.16<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build19723161=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI created a repository to illustrate the problem.\r\n\r\nhttps://github.com/ldez/go-install/commit/5fca274bdce3e0aac69eefcc3dcaf867c7c8d9dc\r\n\r\n`go install -mod=readonly .` and `go install -mod=readonly <module>` don't have the same behavior.\r\n\r\nThe go version seems badly guessed.\r\n\r\nThe problem has been detected here https://github.com/golangci/golangci-lint/discussions/3177\r\n\r\n### What did you expect to see?\r\n\r\nThe same behavior locally and with a ""remote"" module.\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|GoCommand|modules,bcmills|matloob,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build19723161=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI created a repository to illustrate the problem.\r\n\r\nhttps://github.com/ldez/go-install/commit/5fca274bdce3e0aac69eefcc3dcaf867c7c8d9dc\r\n\r\n`go install -mod=readonly .` and `go install -mod=readonly <module>` don't have the same behavior.\r\n\r\nThe go version seems badly guessed.\r\n\r\nThe problem has been detected here https://github.com/golangci/golangci-lint/discussions/3177\r\n\r\n### What did you expect to see?\r\n\r\nThe same behavior locally and with a ""remote"" module.\r\n\r\n### What did you see instead?\r\n\r\n```console\r\n$ docker run --rm -it golang:1.19 sh\r\n# go install -mod=readonly github.com/ldez/go-install@5fca274bdce3e0aac69eefcc3dcaf867c7c8d9dc\r\ngo: downloading github.com/ldez/go-install v0.0.0-20220906210438-5fca274bdce3\r\ngo: downloading golang.org/x/exp v0.0.0-20220906200021-fcb1a314c389\r\n# golang.org/x/exp/constraints\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:13:2: embedding interface element ~int|~int8|~int16|~int32|~int64 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:20:2: embedding interface element ~uint|~uint8|~uint16|~uint32|~uint64|~uintptr requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n    pkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:27:2: embedding interface element Signed|Unsigned requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:34:2: embedding interface element ~float32|~float64 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:41:2: embedding interface element ~complex64|~complex128 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:49:2: embedding interface element Integer|Float|~string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n# \r\n```\r\n\r\n```console\r\n$ docker run --rm -it golang:1.19 sh\r\n# git clone https://github.com/ldez/go-install.git\r\nCloning into 'go-install'...\r\nremote: Enumerating objects: 8, done.\r\nremote: Counting objects: 100% (8/8), done.\r\nremote: Compressing objects: 100% (6/6), done.\r\nremote: Total 8 (delta 0), reused 8 (delta 0), pack-reused 0\r\nReceiving objects: 100% (8/8), done.\r\n# cd go-install\r\n# go install -mod=readonly .\r\ngo: downloading golang.org/x/exp v0.0.0-20220906200021-fcb1a314c389\r\n#\r\n```\r\n\r\n",console\r\n$ docker run --rm -it golang:1.19 sh\r\n# go install -mod=readonly github.com/ldez/go-install@5fca274bdce3e0aac69eefcc3dcaf867c7c8d9dc\r\ngo: downloading github.com/ldez/go-install v0.0.0-20220906210438-5fca274bdce3\r\ngo: downloading golang.org/x/exp v0.0.0-20220906200021-fcb1a314c389\r\n# golang.org/x/exp/constraints\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:13:2: embedding interface element ~int|~int8|~int16|~int32|~int64 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:20:2: embedding interface element ~uint|~uint8|~uint16|~uint32|~uint64|~uintptr requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n    pkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:27:2: embedding interface element Signed|Unsigned requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:34:2: embedding interface element ~float32|~float64 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:41:2: embedding interface element ~complex64|~complex128 requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\npkg/mod/golang.org/x/exp@v0.0.0-20220906200021-fcb1a314c389/constraints/constraints.go:49:2: embedding interface element Integer|Float|~string requires go1.18 or later (-lang was set to go1.16; check go.mod)\r\n# \r\n
54895,"x/vuln: fails to run in monorepo with non-go programming language files<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\nTo add a new vulnerability to the Go vulnerability database\r\n(https://vuln.go.dev), see https://go.dev/s/vulndb-report-new.\r\n\r\nTo report an issue about a report, see https://go.dev/s/vulndb-report-feedback.\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/<user>/.cache/go-build""\r\nGOENV=""/home/<user>/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/<user>/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/<user>/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/usr/lib/golang""\r\nGOSUMDB=""off""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/<user>/<code>/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3715058208=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\nIn my monorepo most of the code is separated by language, but some of it isn't (code generated from protobufs live next to the protos used to generate them). When I attempt to run with a more limited scope to only hit my go code dir, I still run into the same issue. go vuln check walks the directory to where those generated sources are, but chokes on the c++ files there. Those c++ files aren't used by any of the go programs. \r\n",WaitingForInfo|NeedsInvestigation|FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\nTo add a new vulnerability to the Go vulnerability database\r\n(https://vuln.go.dev), see https://go.dev/s/vulndb-report-new.\r\n\r\nTo report an issue about a report, see https://go.dev/s/vulndb-report-feedback.\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce at the latest version of golang.org/x/vuln?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/<user>/.cache/go-build""\r\nGOENV=""/home/<user>/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/<user>/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/<user>/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/usr/lib/golang""\r\nGOSUMDB=""off""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/golang/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.5""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/<user>/<code>/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3715058208=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```shell\r\ncd <repo root>\r\novulncheck ./...\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\ngovulncheck: Packages contain errors:\r\n-: C++ source files not allowed when not using cgo or SWIG: \r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```shell\r\ngovulncheck ./...\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\nNo vulnerabilities found.\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```shell\r\ncd <repo root>\r\novulncheck ./...\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\ngovulncheck: Packages contain errors:\r\n-: C++ source files not allowed when not using cgo or SWIG: <cpp files>\r\n```\r\n\r\nIn my monorepo most of the code is separated by language, but some of it isn't (code generated from protobufs live next to the protos used to generate them). When I attempt to run with a more limited scope to only hit my go code dir, I still run into the same issue. go vuln check walks the directory to where those generated sources are, but chokes on the c++ files there. Those c++ files aren't used by any of the go programs. \r\n```shell\r\ngovulncheck ./<gocode>/...\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\ngovulncheck: Packages contain errors:\r\n-: C++ source files not allowed when not using cgo or SWIG: ...\r\n```",shell\r\ncd <repo root>\r\novulncheck ./...\r\ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\r\n\r\nScanning for dependencies with known vulnerabilities...\r\ngovulncheck: Packages contain errors:\r\n-: C++ source files not allowed when not using cgo or SWIG: \r\n
54840,"cmd/vet: false positive of self-assignment<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/username/Library/Caches/go-build""\r\nGOENV=""/Users/username/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/username/go/pkg/mod""\r\nGONOPROXY=""gitlab.com/orgname""\r\nGONOSUMDB=""gitlab.com/orgname""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/username/go""\r\nGOPRIVATE=""gitlab.com/orgname""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/username/Code/project/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/r3/9d9f8ggn5t1_vd8ht7425w9c0000gn/T/go-build3919061805=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nhttps://go.dev/play/p/TBs0FGA9Ry8\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nnothing\r\n\r\n### What did you see instead?\r\n./main.go:5:2: self-assignment of m[""s""] to m[""s""]\r\n\r\nI thought this is supposed to be fixed. Looks similar to https://github.com/golang/go/issues/22174",NeedsFix|FrozenDueToAge|Analysis,timothy-king,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/username/Library/Caches/go-build""\r\nGOENV=""/Users/username/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/username/go/pkg/mod""\r\nGONOPROXY=""gitlab.com/orgname""\r\nGONOSUMDB=""gitlab.com/orgname""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/username/go""\r\nGOPRIVATE=""gitlab.com/orgname""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/username/Code/project/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/r3/9d9f8ggn5t1_vd8ht7425w9c0000gn/T/go-build3919061805=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nhttps://go.dev/play/p/TBs0FGA9Ry8\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\tm := make(map[string][]string)\r\n\tm[""s""] = m[""s""]\r\n}\r\n```\r\n```console\r\n$ go vet\r\n# test\r\n./main.go:5:2: self-assignment of m[""s""] to m[""s""]\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nnothing\r\n\r\n### What did you see instead?\r\n./main.go:5:2: self-assignment of m[""s""] to m[""s""]\r\n\r\nI thought this is supposed to be fixed. Looks similar to https://github.com/golang/go/issues/22174","go\r\npackage main\r\n\r\nfunc main() {\r\n\tm := make(map[string][]string)\r\n\tm[""s""] = m[""s""]\r\n}\r\n"
54836,"x/tools/gopls: struct filling breaks with generic items<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n$ gopls version\r\ngolang.org/x/tools/gopls v0.9.4\r\n    golang.org/x/tools/gopls@v0.9.4 h1:YhHOxVi++ILnY+QnH9FGtRKZZrunSaR7OW8/dCp7bBk=\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nOpen a main.go file and try autofilling these structs:\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI did expect `gopls` to autofill these structs without problem when the generic type is provided.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nError on the first case in my lsp client, no action suggested in the other case.\r\n",NeedsInvestigation|FeatureRequest|FrozenDueToAge|gopls|Tools,adonovan,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n$ gopls version\r\ngolang.org/x/tools/gopls v0.9.4\r\n    golang.org/x/tools/gopls@v0.9.4 h1:YhHOxVi++ILnY+QnH9FGtRKZZrunSaR7OW8/dCp7bBk=\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nOpen a main.go file and try autofilling these structs:\r\n\r\n```go\r\npackage main\r\n\r\ntype GenericUser[T any] struct {\r\n\tName  string\r\n\tAge   int\r\n\tValue T\r\n}\r\n\r\ntype StructUsingAGeneric struct {\r\n\tUser GenericUser[string]\r\n\tAge  int\r\n}\r\n\r\nfunc main() {\r\n\t// Fill anonymous struct breaks here.\r\n\t_ = GenericUser[string]{\r\n\t}\r\n\r\n\t// Here it isn't even an option.\r\n\t_ = StructUsingAGeneric{\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI did expect `gopls` to autofill these structs without problem when the generic type is provided.\r\n\r\n```go\r\npackage main\r\n\r\ntype GenericUser[T any] struct {\r\n\tName  string\r\n\tAge   int\r\n\tValue T\r\n}\r\n\r\ntype StructUsingAGeneric struct {\r\n\tUser GenericUser[string]\r\n\tAge  int\r\n}\r\n\r\nfunc main() {\r\n\t// Fill anonymous struct breaks here.\r\n\t_ = GenericUser[string]{\r\n\t\tAge: 0,\r\n\t\tValue: """",\r\n\t}\r\n\r\n\t// Here it isn't even an option.\r\n\t_ = StructUsingAGeneric{\r\n\t\tUser: GenericUser[string]{},\r\n\t\tAge: 0,\r\n\t}\r\n}\r\n```\r\n\r\n### What did you see instead?\r\n\r\nError on the first case in my lsp client, no action suggested in the other case.\r\n",go\r\npackage main\r\n\r\ntype GenericUser[T any] struct {\r\n\tName  string\r\n\tAge   int\r\n\tValue T\r\n}\r\n\r\ntype StructUsingAGeneric struct {\r\n\tUser GenericUser[string]\r\n\tAge  int\r\n}\r\n\r\nfunc main() {\r\n\t// Fill anonymous struct breaks here.\r\n\t_ = GenericUser[string]{\r\n\t}\r\n\r\n\t// Here it isn't even an option.\r\n\t_ = StructUsingAGeneric{\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n
54816,"x/tools/gopls: extract function action doesn't work if the first line is a comment### gopls version\r\n\r\n```sh\r\ngopls -v version\r\n```\r\n\r\n<details>\r\n\r\n```none\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.9.4\r\n    golang.org/x/tools/gopls@v0.9.4 h1:YhHOxVi++ILnY+QnH9FGtRKZZrunSaR7OW8/dCp7bBk=\r\n    github.com/BurntSushi/toml@v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=\r\n    github.com/google/go-cmp@v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp/typeparams@v0.0.0-20220722155223-a9213eeb770e h1:7Xs2YCOpMlNqSQSmrrnhlzBXIE/bpMecZplbLePTJvE=\r\n    golang.org/x/mod@v0.6.0-dev.0.20220419223038-86c51ed26bb4 h1:6zppjxzCulZykYSLyVDYbneBfbaBIQPYMevg0bEwv2s=\r\n    golang.org/x/sync@v0.0.0-20220722155255-886fb9371eb4 h1:uVc8UZUe6tr40fFVnUP5Oj+veunVezqYl9z7DYw9xzw=\r\n    golang.org/x/sys@v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\r\n    golang.org/x/text@v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\r\n    golang.org/x/tools@v0.1.13-0.20220812184215-3f9b119300de h1:b68wxF4nfQjj1XTRHtjVjCximbhAwjztuzDEFGU+n9o=\r\n    golang.org/x/vuln@v0.0.0-20220725105440-4151a5aca1df h1:BkeW9/QJhcigekDUPS9N9bIb0v7gPKKmLYeczVAqr2s=\r\n    honnef.co/go/tools@v0.3.2 h1:ytYb4rOqyp1TSa2EPvNVwtPQJctSELKaMyLfqNP4+34=\r\n    mvdan.cc/gofumpt@v0.3.1 h1:avhhrOmv0IuvQVK7fvwV91oFSGAk5/6Po8GXTzICeu8=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n### go env\r\n\r\n<details>\r\n\r\n```none\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ainar/.cache/go-build""\r\nGOENV=""/home/ainar/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ainar/go/pkg/mod""\r\nGONOPROXY=""[REMOVED]""\r\nGONOSUMDB=""[REMOVED]""\r\nGOOS=""linux""\r\nGOPATH=""/home/ainar/go""\r\nGOPRIVATE=""[REMOVED]""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ainar/go/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ainar/go/go1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ainar/dev/tmp/go/tmp/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build421931401=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nSelect the line with `// Do other things.` and two others below it.  Show range code actions (`vim.lsp.buf.range_code_action()` in my case).\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe `Extract function` action being available.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n`No code actions available`\r\n\r\nIf I only select the two code lines, it works as expected.\r\n\r\n\r\n\r\n### Editor and settings\r\n\r\n`NVIM v0.7.2` with the latest `nvim-lspconfig`.\r\n\r\n\r\n\r\n### Logs\r\n\r\n<details>\r\n\r\n```none\r\n[START][2022-09-01 17:54:13] LSP logging initiated\r\n[WARN][2022-09-01 17:54:13] ...lsp/handlers.lua:110\t""The language server gopls triggers a registerCapability handler despite dynamicRegistration set to false. Report upstream, this warning is harmless""\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../lua/vim/lsp.lua:1023\t""LSP[gopls]""\t""client.request""\t1\t""textDocument/codeAction""\t{  context = {    diagnostics = {}  },  range = {    end = {      character = 20,      line = 8    },    start = {      character = 0,      line = 6    }  },  textDocument = {    uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""  }}\t<function 1>\t1\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 2,  jsonrpc = ""2.0"",  method = ""textDocument/codeAction"",  params = {    context = {      diagnostics = {}    },    range = {      end = {        character = 20,        line = 8      },      start = {        character = 0,        line = 6      }    },    textDocument = {      uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""    }  }}\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:28 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n',    type = 3  }}\r\n[INFO][2022-09-01 17:54:28] ...lsp/handlers.lua:459\t'2022/09/01 17:54:28 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:28 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n',    type = 1  }}\r\n[ERROR][2022-09-01 17:54:28] ...lsp/handlers.lua:455\t'2022/09/01 17:54:28 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 2,  jsonrpc = ""2.0""}\r\n[DEBUG][2022-09-01 17:54:31] .../lua/vim/lsp.lua:1023\t""LSP[gopls]""\t""client.request""\t1\t""textDocument/codeAction""\t{  context = {    diagnostics = {}  },  range = {    end = {      character = 20,      line = 8    },    start = {      character = 0,      line = 7    }  },  textDocument = {    uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""  }}\t<function 1>\t1\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 3,  jsonrpc = ""2.0"",  method = ""textDocument/codeAction"",  params = {    context = {      diagnostics = {}    },    range = {      end = {        character = 20,        line = 8      },      start = {        character = 0,        line = 7      }    },    textDocument = {      uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""    }  }}\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:31 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n',    type = 3  }}\r\n[INFO][2022-09-01 17:54:31] ...lsp/handlers.lua:459\t'2022/09/01 17:54:31 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n'\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 3,  jsonrpc = ""2.0"",  result = { {      command = {        arguments = { {            Fix = ""extract_function"",            Range = {              end = {                character = 20,                line = 8              },              start = {                character = 0,                line = 7              }            },            URI = ""file:///home/ainar/dev/tmp/go/tmp/main.go""          } },        command = ""gopls.apply_fix"",        title = ""Extract function""      },      edit = vim.empty_dict(),      kind = ""refactor.extract"",      title = ""Extract function""    } }}\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:31 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n',    type = 1  }}\r\n[ERROR][2022-09-01 17:54:32] ...lsp/handlers.lua:455\t'2022/09/01 17:54:31 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[INFO][2022-09-01 17:54:34] .../lua/vim/lsp.lua:1392\t""exit_handler""\t{ {    _on_attach = <function 1>,    attached_buffers = { true },    cancel_request = <function 2>,    commands = {},    config = {      autostart = true,      capabilities = {        callHierarchy = {          dynamicRegistration = false        },        textDocument = {          codeAction = {            codeActionLiteralSupport = {              codeActionKind = {                valueSet = { """", ""Empty"", ""QuickFix"", ""Refactor"", ""RefactorExtract"", ""RefactorInline"", ""RefactorRewrite"", ""Source"", ""SourceOrganizeImports"", ""quickfix"", ""refactor"", ""refactor.extract"", ""refactor.inline"", ""refactor.rewrite"", ""source"", ""source.organizeImports"" }              }            },            dataSupport = true,            dynamicRegistration = false,            resolveSupport = {              properties = { ""edit"" }            }          },          completion = {            completionItem = {              commitCharactersSupport = false,              deprecatedSupport = false,              documentationFormat = { ""markdown"", ""plaintext"" },              preselectSupport = false,              snippetSupport = false            },            completionItemKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }            },            contextSupport = false,            dynamicRegistration = false          },          declaration = {            linkSupport = true          },          definition = {            linkSupport = true          },          documentHighlight = {            dynamicRegistration = false          },          documentSymbol = {            dynamicRegistration = false,            hierarchicalDocumentSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }            }          },          hover = {            contentFormat = { ""markdown"", ""plaintext"" },            dynamicRegistration = false          },          implementation = {            linkSupport = true          },          publishDiagnostics = {            relatedInformation = true,            tagSupport = {              valueSet = { 1, 2 }            }          },          references = {            dynamicRegistration = false          },          rename = {            dynamicRegistration = false,            prepareSupport = true          },          signatureHelp = {            dynamicRegistration = false,            signatureInformation = {              activeParameterSupport = true,              documentationFormat = { ""markdown"", ""plaintext"" },              parameterInformation = {                labelOffsetSupport = true              }            }          },          synchronization = {            didSave = true,            dynamicRegistration = false,            willSave = false,            willSaveWaitUntil = false          },          typeDefinition = {            linkSupport = true          }        },        window = {          showDocument = {            support = false          },          showMessage = {            messageActionItem = {              additionalPropertiesSupport = false            }          },          workDoneProgress = true        },        workspace = {          applyEdit = true,          configuration = true,          symbol = {            dynamicRegistration = false,            hierarchicalWorkspaceSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }            }          },          workspaceEdit = {            resourceOperations = { ""rename"", ""create"", ""delete"" }          },          workspaceFolders = true        }      },      cmd = { ""gopls"" },      cmd_cwd = ""/home/ainar/dev/tmp/go/tmp"",      filetypes = { ""go"", ""gomod"", ""gowork"", ""gotmpl"" },      flags = {},      get_language_id = <function 3>,      handlers = <1>{},      init_options = vim.empty_dict(),      log_level = 2,      message_level = 2,      name = ""gopls"",      on_attach = <function 4>,      on_exit = <function 5>,      on_init = <function 6>,      root_dir = ""/home/ainar/dev/tmp/go/tmp"",      settings = {        gopls = {          analyses = {            fieldalignment = true,            nilness = true,            shadow = true,            unusedparams = true,            unusedwrite = true          },          annotations = {            bounds = true,            escape = true,            inline = true,            nil = true          },          [""build.directoryFilters""] = { ""-client"", ""-client2"", ""-node_modules"" },          [""formatting.gofumpt""] = true,          staticcheck = true,          [""ui.semanticTokens""] = true,          [""ui.verboseOutput""] = true        }      },      single_file_support = true,      workspace_folders = <2>{ {          name = ""/home/ainar/dev/tmp/go/tmp"",          uri = ""file:///home/ainar/dev/tmp/go/tmp""        } },      <metatable> = <3>{        __tostring = <function 7>      }    },    handlers = <table 1>,    id = 1,    initialized = true,    is_stopped = <function 8>,    messages = {      messages = {},      name = ""gopls"",      progress = {        [""5577006791947779410""] = {          done = true,          message = ""Finished loading packages."",          title = ""Setting up workspace""        }      },      status = {}    },    name = ""gopls"",    notify = <function 9>,    offset_encoding = ""utf-16"",    request = <function 10>,    request_sync = <function 11>,    requests = {},    resolved_capabilities = {      call_hierarchy = true,      code_action = <4>{        codeActionKinds = { ""quickfix"", ""refactor.extract"", ""refactor.rewrite"", ""source.fixAll"", ""source.organizeImports"" }      },      code_lens = true,      code_lens_resolve = false,      completion = true,      declaration = false,      document_formatting = true,      document_highlight = true,      document_range_formatting = false,      document_symbol = true,      execute_command = true,      find_references = true,      goto_definition = true,      hover = true,      implementation = true,      rename = true,      signature_help = true,      signature_help_trigger_characters = <5>{ ""("", "","" },      text_document_did_change = 2,      text_document_open_close = true,      text_document_save = <6>vim.empty_dict(),      text_document_save_include_text = false,      text_document_will_save = false,      text_document_will_save_wait_until = false,      type_definition = true,      workspace_folder_properties = {        changeNotifications = ""workspace/didChangeWorkspaceFolders"",        supported = true      },      workspace_symbol = true    },    rpc = {      handle = <userdata 1>,      notify = <function 12>,      pid = 479364,      request = <function 13>    },    server_capabilities = {      callHierarchyProvider = true,      codeActionProvider = <table 4>,      codeLensProvider = vim.empty_dict(),      completionProvider = {        completionItem = vim.empty_dict(),        triggerCharacters = { ""."" }      },      definitionProvider = true,      documentFormattingProvider = true,      documentHighlightProvider = true,      documentLinkProvider = vim.empty_dict(),      documentOnTypeFormattingProvider = {        firstTriggerCharacter = """"      },      documentSymbolProvider = true,      executeCommandProvider = {        commands = { ""gopls.add_dependency"", ""gopls.add_import"", ""gopls.apply_fix"", ""gopls.check_upgrades"", ""gopls.edit_go_directive"", ""gopls.gc_details"", ""gopls.generate"", ""gopls.generate_gopls_mod"", ""gopls.go_get_package"", ""gopls.list_imports"", ""gopls.list_known_packages"", ""gopls.regenerate_cgo"", ""gopls.remove_dependency"", ""gopls.run_tests"", ""gopls.run_vulncheck_exp"", ""gopls.start_debugging"", ""gopls.test"", ""gopls.tidy"", ""gopls.toggle_gc_details"", ""gopls.update_go_sum"", ""gopls.upgrade_dependency"", ""gopls.vendor"" }      },      foldingRangeProvider = true,      hoverProvider = true,      implementationProvider = true,      inlayHintProvider = vim.empty_dict(),      referencesProvider = true,      renameProvider = {        prepareProvider = true      },      signatureHelpProvider = {        triggerCharacters = <table 5>      },      textDocumentSync = {        change = 2,        openClose = true,        save = <table 6>      },      typeDefinitionProvider = true,      workspace = {        workspaceFolders = {          changeNotifications = ""workspace/didChangeWorkspaceFolders"",          supported = true        }      },      workspaceSymbolProvider = true    },    stop = <function 14>,    supports_method = <function 15>,    workspaceFolders = <table 2>,    workspace_did_change_configuration = <function 16>,    workspace_folders = <table 2>  } }\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 4,  jsonrpc = ""2.0"",  method = ""shutdown""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 4,  jsonrpc = ""2.0""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  jsonrpc = ""2.0"",  method = ""exit""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = ""2022/09/01 17:54:34 Shutdown session\\n\\tshutdown_session=1\\n"",    type = 3  }}\r\n[INFO][2022-09-01 17:54:34] ...lsp/handlers.lua:459\t""2022/09/01 17:54:34 Shutdown session\\n\\tshutdown_session=1\\n""\r\n```\r\n\r\n</details>",FrozenDueToAge|gopls|Tools,suzmue,"### gopls version\r\n\r\n```sh\r\ngopls -v version\r\n```\r\n\r\n<details>\r\n\r\n```none\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.9.4\r\n    golang.org/x/tools/gopls@v0.9.4 h1:YhHOxVi++ILnY+QnH9FGtRKZZrunSaR7OW8/dCp7bBk=\r\n    github.com/BurntSushi/toml@v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=\r\n    github.com/google/go-cmp@v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/exp/typeparams@v0.0.0-20220722155223-a9213eeb770e h1:7Xs2YCOpMlNqSQSmrrnhlzBXIE/bpMecZplbLePTJvE=\r\n    golang.org/x/mod@v0.6.0-dev.0.20220419223038-86c51ed26bb4 h1:6zppjxzCulZykYSLyVDYbneBfbaBIQPYMevg0bEwv2s=\r\n    golang.org/x/sync@v0.0.0-20220722155255-886fb9371eb4 h1:uVc8UZUe6tr40fFVnUP5Oj+veunVezqYl9z7DYw9xzw=\r\n    golang.org/x/sys@v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\r\n    golang.org/x/text@v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\r\n    golang.org/x/tools@v0.1.13-0.20220812184215-3f9b119300de h1:b68wxF4nfQjj1XTRHtjVjCximbhAwjztuzDEFGU+n9o=\r\n    golang.org/x/vuln@v0.0.0-20220725105440-4151a5aca1df h1:BkeW9/QJhcigekDUPS9N9bIb0v7gPKKmLYeczVAqr2s=\r\n    honnef.co/go/tools@v0.3.2 h1:ytYb4rOqyp1TSa2EPvNVwtPQJctSELKaMyLfqNP4+34=\r\n    mvdan.cc/gofumpt@v0.3.1 h1:avhhrOmv0IuvQVK7fvwV91oFSGAk5/6Po8GXTzICeu8=\r\n    mvdan.cc/xurls/v2@v2.4.0 h1:tzxjVAj+wSBmDcF6zBB7/myTy3gX9xvi8Tyr28AuQgc=\r\ngo: go1.19\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n### go env\r\n\r\n<details>\r\n\r\n```none\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ainar/.cache/go-build""\r\nGOENV=""/home/ainar/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ainar/go/pkg/mod""\r\nGONOPROXY=""[REMOVED]""\r\nGONOSUMDB=""[REMOVED]""\r\nGOOS=""linux""\r\nGOPATH=""/home/ainar/go""\r\nGOPRIVATE=""[REMOVED]""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ainar/go/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ainar/go/go1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/ainar/dev/tmp/go/tmp/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build421931401=/tmp/go-build -gno-record-gcc-switches""\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\t// Do one thing.\r\n\tprintln(""thing 1"")\r\n\r\n\t// Do other things.\r\n\tprintln(""thing 2"")\r\n\tprintln(""thing 3"")\r\n}\r\n```\r\n\r\nSelect the line with `// Do other things.` and two others below it.  Show range code actions (`vim.lsp.buf.range_code_action()` in my case).\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe `Extract function` action being available.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\n`No code actions available`\r\n\r\nIf I only select the two code lines, it works as expected.\r\n\r\n\r\n\r\n### Editor and settings\r\n\r\n`NVIM v0.7.2` with the latest `nvim-lspconfig`.\r\n\r\n\r\n\r\n### Logs\r\n\r\n<details>\r\n\r\n```none\r\n[START][2022-09-01 17:54:13] LSP logging initiated\r\n[WARN][2022-09-01 17:54:13] ...lsp/handlers.lua:110\t""The language server gopls triggers a registerCapability handler despite dynamicRegistration set to false. Report upstream, this warning is harmless""\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[ERROR][2022-09-01 17:54:13] ...lsp/handlers.lua:455\t'2022/09/01 17:54:13 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../lua/vim/lsp.lua:1023\t""LSP[gopls]""\t""client.request""\t1\t""textDocument/codeAction""\t{  context = {    diagnostics = {}  },  range = {    end = {      character = 20,      line = 8    },    start = {      character = 0,      line = 6    }  },  textDocument = {    uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""  }}\t<function 1>\t1\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 2,  jsonrpc = ""2.0"",  method = ""textDocument/codeAction"",  params = {    context = {      diagnostics = {}    },    range = {      end = {        character = 20,        line = 8      },      start = {        character = 0,        line = 6      }    },    textDocument = {      uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""    }  }}\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:28 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n',    type = 3  }}\r\n[INFO][2022-09-01 17:54:28] ...lsp/handlers.lua:459\t'2022/09/01 17:54:28 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:28 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n',    type = 1  }}\r\n[ERROR][2022-09-01 17:54:28] ...lsp/handlers.lua:455\t'2022/09/01 17:54:28 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[DEBUG][2022-09-01 17:54:28] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 2,  jsonrpc = ""2.0""}\r\n[DEBUG][2022-09-01 17:54:31] .../lua/vim/lsp.lua:1023\t""LSP[gopls]""\t""client.request""\t1\t""textDocument/codeAction""\t{  context = {    diagnostics = {}  },  range = {    end = {      character = 20,      line = 8    },    start = {      character = 0,      line = 7    }  },  textDocument = {    uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""  }}\t<function 1>\t1\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 3,  jsonrpc = ""2.0"",  method = ""textDocument/codeAction"",  params = {    context = {      diagnostics = {}    },    range = {      end = {        character = 20,        line = 8      },      start = {        character = 0,        line = 7      }    },    textDocument = {      uri = ""file:///home/ainar/dev/tmp/go/tmp/main.go""    }  }}\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:31 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n',    type = 3  }}\r\n[INFO][2022-09-01 17:54:31] ...lsp/handlers.lua:459\t'2022/09/01 17:54:31 fixImports(filename=""/home/ainar/dev/tmp/go/tmp/main.go""), abs=""/home/ainar/dev/tmp/go/tmp/main.go"", srcDir=""/home/ainar/dev/tmp/go/tmp"" ...\\n'\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 3,  jsonrpc = ""2.0"",  result = { {      command = {        arguments = { {            Fix = ""extract_function"",            Range = {              end = {                character = 20,                line = 8              },              start = {                character = 0,                line = 7              }            },            URI = ""file:///home/ainar/dev/tmp/go/tmp/main.go""          } },        command = ""gopls.apply_fix"",        title = ""Extract function""      },      edit = vim.empty_dict(),      kind = ""refactor.extract"",      title = ""Extract function""    } }}\r\n[DEBUG][2022-09-01 17:54:31] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = '2022/09/01 17:54:31 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n',    type = 1  }}\r\n[ERROR][2022-09-01 17:54:32] ...lsp/handlers.lua:455\t'2022/09/01 17:54:31 analyzer ""SA4023"" failed: analysis SA4023 for package bitbucket.org/ainar-g/tmp/go/tmp panicked: interface conversion: interface {} is nil, not *nilness.Result\\n'\r\n[INFO][2022-09-01 17:54:34] .../lua/vim/lsp.lua:1392\t""exit_handler""\t{ {    _on_attach = <function 1>,    attached_buffers = { true },    cancel_request = <function 2>,    commands = {},    config = {      autostart = true,      capabilities = {        callHierarchy = {          dynamicRegistration = false        },        textDocument = {          codeAction = {            codeActionLiteralSupport = {              codeActionKind = {                valueSet = { """", ""Empty"", ""QuickFix"", ""Refactor"", ""RefactorExtract"", ""RefactorInline"", ""RefactorRewrite"", ""Source"", ""SourceOrganizeImports"", ""quickfix"", ""refactor"", ""refactor.extract"", ""refactor.inline"", ""refactor.rewrite"", ""source"", ""source.organizeImports"" }              }            },            dataSupport = true,            dynamicRegistration = false,            resolveSupport = {              properties = { ""edit"" }            }          },          completion = {            completionItem = {              commitCharactersSupport = false,              deprecatedSupport = false,              documentationFormat = { ""markdown"", ""plaintext"" },              preselectSupport = false,              snippetSupport = false            },            completionItemKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }            },            contextSupport = false,            dynamicRegistration = false          },          declaration = {            linkSupport = true          },          definition = {            linkSupport = true          },          documentHighlight = {            dynamicRegistration = false          },          documentSymbol = {            dynamicRegistration = false,            hierarchicalDocumentSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }            }          },          hover = {            contentFormat = { ""markdown"", ""plaintext"" },            dynamicRegistration = false          },          implementation = {            linkSupport = true          },          publishDiagnostics = {            relatedInformation = true,            tagSupport = {              valueSet = { 1, 2 }            }          },          references = {            dynamicRegistration = false          },          rename = {            dynamicRegistration = false,            prepareSupport = true          },          signatureHelp = {            dynamicRegistration = false,            signatureInformation = {              activeParameterSupport = true,              documentationFormat = { ""markdown"", ""plaintext"" },              parameterInformation = {                labelOffsetSupport = true              }            }          },          synchronization = {            didSave = true,            dynamicRegistration = false,            willSave = false,            willSaveWaitUntil = false          },          typeDefinition = {            linkSupport = true          }        },        window = {          showDocument = {            support = false          },          showMessage = {            messageActionItem = {              additionalPropertiesSupport = false            }          },          workDoneProgress = true        },        workspace = {          applyEdit = true,          configuration = true,          symbol = {            dynamicRegistration = false,            hierarchicalWorkspaceSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }            }          },          workspaceEdit = {            resourceOperations = { ""rename"", ""create"", ""delete"" }          },          workspaceFolders = true        }      },      cmd = { ""gopls"" },      cmd_cwd = ""/home/ainar/dev/tmp/go/tmp"",      filetypes = { ""go"", ""gomod"", ""gowork"", ""gotmpl"" },      flags = {},      get_language_id = <function 3>,      handlers = <1>{},      init_options = vim.empty_dict(),      log_level = 2,      message_level = 2,      name = ""gopls"",      on_attach = <function 4>,      on_exit = <function 5>,      on_init = <function 6>,      root_dir = ""/home/ainar/dev/tmp/go/tmp"",      settings = {        gopls = {          analyses = {            fieldalignment = true,            nilness = true,            shadow = true,            unusedparams = true,            unusedwrite = true          },          annotations = {            bounds = true,            escape = true,            inline = true,            nil = true          },          [""build.directoryFilters""] = { ""-client"", ""-client2"", ""-node_modules"" },          [""formatting.gofumpt""] = true,          staticcheck = true,          [""ui.semanticTokens""] = true,          [""ui.verboseOutput""] = true        }      },      single_file_support = true,      workspace_folders = <2>{ {          name = ""/home/ainar/dev/tmp/go/tmp"",          uri = ""file:///home/ainar/dev/tmp/go/tmp""        } },      <metatable> = <3>{        __tostring = <function 7>      }    },    handlers = <table 1>,    id = 1,    initialized = true,    is_stopped = <function 8>,    messages = {      messages = {},      name = ""gopls"",      progress = {        [""5577006791947779410""] = {          done = true,          message = ""Finished loading packages."",          title = ""Setting up workspace""        }      },      status = {}    },    name = ""gopls"",    notify = <function 9>,    offset_encoding = ""utf-16"",    request = <function 10>,    request_sync = <function 11>,    requests = {},    resolved_capabilities = {      call_hierarchy = true,      code_action = <4>{        codeActionKinds = { ""quickfix"", ""refactor.extract"", ""refactor.rewrite"", ""source.fixAll"", ""source.organizeImports"" }      },      code_lens = true,      code_lens_resolve = false,      completion = true,      declaration = false,      document_formatting = true,      document_highlight = true,      document_range_formatting = false,      document_symbol = true,      execute_command = true,      find_references = true,      goto_definition = true,      hover = true,      implementation = true,      rename = true,      signature_help = true,      signature_help_trigger_characters = <5>{ ""("", "","" },      text_document_did_change = 2,      text_document_open_close = true,      text_document_save = <6>vim.empty_dict(),      text_document_save_include_text = false,      text_document_will_save = false,      text_document_will_save_wait_until = false,      type_definition = true,      workspace_folder_properties = {        changeNotifications = ""workspace/didChangeWorkspaceFolders"",        supported = true      },      workspace_symbol = true    },    rpc = {      handle = <userdata 1>,      notify = <function 12>,      pid = 479364,      request = <function 13>    },    server_capabilities = {      callHierarchyProvider = true,      codeActionProvider = <table 4>,      codeLensProvider = vim.empty_dict(),      completionProvider = {        completionItem = vim.empty_dict(),        triggerCharacters = { ""."" }      },      definitionProvider = true,      documentFormattingProvider = true,      documentHighlightProvider = true,      documentLinkProvider = vim.empty_dict(),      documentOnTypeFormattingProvider = {        firstTriggerCharacter = """"      },      documentSymbolProvider = true,      executeCommandProvider = {        commands = { ""gopls.add_dependency"", ""gopls.add_import"", ""gopls.apply_fix"", ""gopls.check_upgrades"", ""gopls.edit_go_directive"", ""gopls.gc_details"", ""gopls.generate"", ""gopls.generate_gopls_mod"", ""gopls.go_get_package"", ""gopls.list_imports"", ""gopls.list_known_packages"", ""gopls.regenerate_cgo"", ""gopls.remove_dependency"", ""gopls.run_tests"", ""gopls.run_vulncheck_exp"", ""gopls.start_debugging"", ""gopls.test"", ""gopls.tidy"", ""gopls.toggle_gc_details"", ""gopls.update_go_sum"", ""gopls.upgrade_dependency"", ""gopls.vendor"" }      },      foldingRangeProvider = true,      hoverProvider = true,      implementationProvider = true,      inlayHintProvider = vim.empty_dict(),      referencesProvider = true,      renameProvider = {        prepareProvider = true      },      signatureHelpProvider = {        triggerCharacters = <table 5>      },      textDocumentSync = {        change = 2,        openClose = true,        save = <table 6>      },      typeDefinitionProvider = true,      workspace = {        workspaceFolders = {          changeNotifications = ""workspace/didChangeWorkspaceFolders"",          supported = true        }      },      workspaceSymbolProvider = true    },    stop = <function 14>,    supports_method = <function 15>,    workspaceFolders = <table 2>,    workspace_did_change_configuration = <function 16>,    workspace_folders = <table 2>  } }\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  id = 4,  jsonrpc = ""2.0"",  method = ""shutdown""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  id = 4,  jsonrpc = ""2.0""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:347\t""rpc.send""\t{  jsonrpc = ""2.0"",  method = ""exit""}\r\n[DEBUG][2022-09-01 17:54:34] .../vim/lsp/rpc.lua:454\t""rpc.receive""\t{  jsonrpc = ""2.0"",  method = ""window/logMessage"",  params = {    message = ""2022/09/01 17:54:34 Shutdown session\\n\\tshutdown_session=1\\n"",    type = 3  }}\r\n[INFO][2022-09-01 17:54:34] ...lsp/handlers.lua:459\t""2022/09/01 17:54:34 Shutdown session\\n\\tshutdown_session=1\\n""\r\n```\r\n\r\n</details>","go\r\npackage main\r\n\r\nfunc main() {\r\n\t// Do one thing.\r\n\tprintln(""thing 1"")\r\n\r\n\t// Do other things.\r\n\tprintln(""thing 2"")\r\n\tprintln(""thing 3"")\r\n}\r\n"
54714,"x/sys/unix: add ParseOneSocketControlMessage**Note, Oct 12 2022** Current proposal is https://github.com/golang/go/issues/54714#issuecomment-1229484429\r\n\r\n- - -\r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.19 linux/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/parallels/.cache/go-build""\r\nGOENV=""/home/parallels/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/parallels/src/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/parallels/src/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/parallels/bin/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/parallels/bin/go/pkg/tool/linux_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/parallels/src/go/src/golang.org/x/sys/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1413276320=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn quic-go, we read control messages to read the ECN bits from the IP header, and to read the network interface index.\r\nWe parse the OOB bytes using `unix.ParseSocketControlMessage`. See https://github.com/lucas-clemente/quic-go/blob/07412be8a02ef0e55580ebf8db9c38a759c0a0e5/sys_conn_oob.go#L166-L206 for the respective control message processing logic.\r\n\r\n### What did you expect to see?\r\n\r\nIdeally, `unix.ParseSocketControlMessage` would not allocate.\r\n\r\n### What did you see instead?\r\n\r\nReceiving 1 GB of data using QUIC creates a huge amount of allocations (as determined using the `allocs` function of pprof). Roughly 100 MB of those allocations come from `unix.ParseSocketControlMessage`.\r\n\r\nA simple back-of-the-envelope shows that this is roughly what we'd expect:\r\nA data transfer of 1 GB requires receiving roughly 860,000 received packets, assuming a payload size of 1250 bytes per QUIC packet.\r\nThe `[]SocketControlMessage` slice allocates 24 bytes, and the size of each control message is 40 bytes. There are two control messages per packet (`unix.IP_TOS` and `unix.IP_PKTINFO`). Parsing the control messages therefore allocates of 104 bytes per packet, or 89 MB in total for the 1 GB transfer.\r\n\r\n### Proposal\r\n\r\nIt would be nice to have an API that allows parsing socket control message that doesn't allocate at all.\r\n\r\nThe following API would fulfill that property:\r\n\r\n\r\nUPDATE: Submitted a fix https://go-review.googlesource.com/c/sys/+/425916.\r\n",Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod|compiler/runtime,marten-seemann,"**Note, Oct 12 2022** Current proposal is https://github.com/golang/go/issues/54714#issuecomment-1229484429\r\n\r\n- - -\r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.19 linux/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/home/parallels/.cache/go-build""\r\nGOENV=""/home/parallels/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/parallels/src/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/parallels/src/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/parallels/bin/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/parallels/bin/go/pkg/tool/linux_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/parallels/src/go/src/golang.org/x/sys/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1413276320=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn quic-go, we read control messages to read the ECN bits from the IP header, and to read the network interface index.\r\nWe parse the OOB bytes using `unix.ParseSocketControlMessage`. See https://github.com/lucas-clemente/quic-go/blob/07412be8a02ef0e55580ebf8db9c38a759c0a0e5/sys_conn_oob.go#L166-L206 for the respective control message processing logic.\r\n\r\n### What did you expect to see?\r\n\r\nIdeally, `unix.ParseSocketControlMessage` would not allocate.\r\n\r\n### What did you see instead?\r\n\r\nReceiving 1 GB of data using QUIC creates a huge amount of allocations (as determined using the `allocs` function of pprof). Roughly 100 MB of those allocations come from `unix.ParseSocketControlMessage`.\r\n\r\nA simple back-of-the-envelope shows that this is roughly what we'd expect:\r\nA data transfer of 1 GB requires receiving roughly 860,000 received packets, assuming a payload size of 1250 bytes per QUIC packet.\r\nThe `[]SocketControlMessage` slice allocates 24 bytes, and the size of each control message is 40 bytes. There are two control messages per packet (`unix.IP_TOS` and `unix.IP_PKTINFO`). Parsing the control messages therefore allocates of 104 bytes per packet, or 89 MB in total for the 1 GB transfer.\r\n\r\n### Proposal\r\n\r\nIt would be nice to have an API that allows parsing socket control message that doesn't allocate at all.\r\n\r\nThe following API would fulfill that property:\r\n```go\r\nfunc ParseSocketControlMessageWithHandler(b []byte, handler func(message SocketControlMessage)) error\r\n```\r\n\r\nUPDATE: Submitted a fix https://go-review.googlesource.com/c/sys/+/425916.\r\n","go\r\nfunc ParseSocketControlMessageWithHandler(b []byte, handler func(message SocketControlMessage)) error\r\n"
54649,"runtime:  imperfection in gc trace lines<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nIt looks, unlike Go 1.18, Go 1.19 uses the real stack sizes in calculating target memory.\r\nBut the `# MB stacks` items in the gc trace lines still show the 2<sup>n</sup> stack memory block sizes.\r\n\r\nBTW, in the runtime docs, https://pkg.go.dev/runtime, `# MB stacks` and `# MB globals` are listed but not shown in the format line.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 1 @0.016s 19%: 0.053+36+0.016 ms clock, 0.21+36/4.9/39+0.066 ms cpu, 3->3->3 MB, 4 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|compiler/runtime,mknyszek,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""math/rand""\r\n\t""time""\r\n)\r\n\r\nvar x [512][]*int\r\n\r\nfunc garbageProducer() {\r\n\trand.Seed(time.Now().UnixNano())\r\n\r\n\tfor i := 0; ; i++ {\r\n\t\tn := 6 + rand.Intn(6)\r\n\t\tfor j := range x {\r\n\t\t\tx[j] = make([]*int, 1<<n)\r\n\t\t\tfor k := range x[j] {\r\n\t\t\t\tx[j][k] = new(int)\r\n\t\t\t}\r\n\t\t}\r\n\t\ttime.Sleep(time.Second / 1000)\r\n\t}\r\n}\r\n\r\nfunc bigStack(c chan int, v byte) byte {\r\n\tdefer func() {\r\n\t\tc <- 1\r\n\t}()\r\n\tvar s = []byte{33 << 20: 0} // on stack\r\n\tfor i := range s { s[i] = v }\r\n\t\t\r\n\treturn s[v]\r\n}\r\n\r\nfunc main() {\r\n\tgo bigStack(nil, 123)\r\n\tgo bigStack(nil, 123)\r\n\tgarbageProducer()\r\n}\r\n```\r\n\r\nIt looks, unlike Go 1.18, Go 1.19 uses the real stack sizes in calculating target memory.\r\nBut the `# MB stacks` items in the gc trace lines still show the 2<sup>n</sup> stack memory block sizes.\r\n\r\nBTW, in the runtime docs, https://pkg.go.dev/runtime, `# MB stacks` and `# MB globals` are listed but not shown in the format line.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 1 @0.016s 19%: 0.053+36+0.016 ms clock, 0.21+36/4.9/39+0.066 ms cpu, 3->3->3 MB, 4 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 66 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n$ GODEBUG=gctrace=1  ./main\r\ngc 2 @0.184s 7%: 0.019+24+0.013 ms clock, 0.076+0.083/24/0.063+0.052 ms cpu, 70->74->16 MB, 73 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 3 @0.442s 4%: 0.036+9.3+0.029 ms clock, 0.14+0.17/9.1/6.2+0.11 ms cpu, 94->95->5 MB, 98 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 4 @0.678s 3%: 0.069+27+0.033 ms clock, 0.27+0.74/26/37+0.13 ms cpu, 56->57->12 MB, 77 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\ngc 5 @1.057s 3%: 0.061+54+0.053 ms clock, 0.24+0.17/54/4.0+0.21 ms cpu, 86->92->16 MB, 92 MB goal, 128 MB stacks, 0 MB globals, 4 P\r\n...\r\n```\r\n\r\n\r\n","Go\r\npackage main\r\n\r\nimport (\r\n\t""math/rand""\r\n\t""time""\r\n)\r\n\r\nvar x [512][]*int\r\n\r\nfunc garbageProducer() {\r\n\trand.Seed(time.Now().UnixNano())\r\n\r\n\tfor i := 0; ; i++ {\r\n\t\tn := 6 + rand.Intn(6)\r\n\t\tfor j := range x {\r\n\t\t\tx[j] = make([]*int, 1<<n)\r\n\t\t\tfor k := range x[j] {\r\n\t\t\t\tx[j][k] = new(int)\r\n\t\t\t}\r\n\t\t}\r\n\t\ttime.Sleep(time.Second / 1000)\r\n\t}\r\n}\r\n\r\nfunc bigStack(c chan int, v byte) byte {\r\n\tdefer func() {\r\n\t\tc <- 1\r\n\t}()\r\n\tvar s = []byte{33 << 20: 0} // on stack\r\n\tfor i := range s { s[i] = v }\r\n\t\t\r\n\treturn s[v]\r\n}\r\n\r\nfunc main() {\r\n\tgo bigStack(nil, 123)\r\n\tgo bigStack(nil, 123)\r\n\tgarbageProducer()\r\n}\r\n"
54628,"reflect: Value.SetIterXXX allows setting values that are unexportedConsider [the following snippet](https://go.dev/play/p/0ThKKlGEhYf):\r\n\r\nThe newer `Value.SetIterXXX` APIs added in Go 1.18 provide a way to circumvent the unexported field checks, thus allowing users to obtain an interfaceable value of an unexported field without the use of `unsafe`.",NeedsFix|FrozenDueToAge|compiler/runtime,dsnet,"Consider [the following snippet](https://go.dev/play/p/0ThKKlGEhYf):\r\n```go\r\nv := reflect.ValueOf(struct {\r\n\tm map[string]string // m is exported, we should never be able to get an interfaceable value of it or any sub-elements of it\r\n}{m: map[string]string{""hello"": ""goodbye""}})\r\nvm := v.FieldByName(""m"")\r\nfmt.Println(vm.CanInterface()) // correctly prints false\r\n\r\nve := vm.MapIndex(reflect.ValueOf(""hello""))\r\nfmt.Println(ve.CanInterface()) // correctly prints false\r\n\r\nve = reflect.New(reflect.TypeOf("""")).Elem()\r\nfor iter := vm.MapRange(); iter.Next(); {\r\n\tve.SetIterValue(iter)          // incorrectly succeeds; expect panic due to read-only bit being false\r\n\r\n\tvv := iter.Value()             // older API for obtain a map value; it propagates the read-only bit check\r\n\tfmt.Println(vv.CanInterface()) // correctly prints false\r\n\tve.Set(vv)                     // correctly panics\r\n}\r\n```\r\nThe newer `Value.SetIterXXX` APIs added in Go 1.18 provide a way to circumvent the unexported field checks, thus allowing users to obtain an interfaceable value of an unexported field without the use of `unsafe`.","go\r\nv := reflect.ValueOf(struct {\r\n\tm map[string]string // m is exported, we should never be able to get an interfaceable value of it or any sub-elements of it\r\n}{m: map[string]string{""hello"": ""goodbye""}})\r\nvm := v.FieldByName(""m"")\r\nfmt.Println(vm.CanInterface()) // correctly prints false\r\n\r\nve := vm.MapIndex(reflect.ValueOf(""hello""))\r\nfmt.Println(ve.CanInterface()) // correctly prints false\r\n\r\nve = reflect.New(reflect.TypeOf("""")).Elem()\r\nfor iter := vm.MapRange(); iter.Next(); {\r\n\tve.SetIterValue(iter)          // incorrectly succeeds; expect panic due to read-only bit being false\r\n\r\n\tvv := iter.Value()             // older API for obtain a map value; it propagates the read-only bit check\r\n\tfmt.Println(vv.CanInterface()) // correctly prints false\r\n\tve.Set(vv)                     // correctly panics\r\n}\r\n"
54590,"crypto/x509: SecPolicyCreateSSL returns null when binary is called with strange path<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/william/Library/Caches/go-build""\r\nGOENV=""/Users/william/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/william/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/william/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.19/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.19/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/william/dev/oss/repro-go-1/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/go-build670127871=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRunning a compiled Go binary with a strange path causes crashes that are very similar to #51759, so perhaps the crash is rather in `crypto/x509` than in `net/http`.\r\n\r\nI can only reproduce it when calling the Go binary with a path that includes a double slash `//` and a directory that starts with a dot `.`. I have no idea why this is or how to further debug is.\r\n\r\nThis reproducing script sets up a minimal folder structure, build the tool and runs it in a way that causes crashes:\r\n\r\n\r\nCalling it e.g. with `$(pwd)/dir/../.dot/repro`, `$(pwd)//.dot/repro`,  or `$(pwd)/.dot/repro` does not cause the same crash.\r\n\r\n### What did you expect to see?\r\n\r\nHTML output from https://google.com.\r\n\r\n### What did you see instead?\r\n\r\nPanic, see hidden long panic text below:\r\n<details><summary>Full panic output</summary><br>\r\n<pre>\r\ngo: creating new go.mod: module repro\r\nSIGTRAP: trace trap\r\nPC=0x197eb5458 m=5 sigcode=0\r\n\r\ngoroutine 0 [idle]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 34 [syscall]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 1 [select]:\r\nruntime.gopark(0x1400013f7b0?, 0x4?, 0xe8?, 0xf4?, 0x1400013f658?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400013f4c0 sp=0x1400013f4a0 pc=0x1027db014\r\nruntime.selectgo(0x1400013f7b0, 0x1400013f650, 0x1400011ad20?, 0x0, 0x1400013f628?, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/select.go:328 +0x688 fp=0x1400013f5e0 sp=0x1400013f4c0 pc=0x1027ead78\r\nnet/http.(*Transport).getConn(0x102bbb7c0, 0x140001581c0, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1376 +0x448 fp=0x1400013f800 sp=0x1400013f5e0 pc=0x10296b588\r\nnet/http.(*Transport).roundTrip(0x102bbb7c0, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:582 +0x658 fp=0x1400013fa30 sp=0x1400013f800 pc=0x102967978\r\nnet/http.(*Transport).RoundTrip(0x10?, 0x102a5ab80?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/roundtrip.go:17 +0x1c fp=0x1400013fa50 sp=0x1400013fa30 pc=0x10295f12c\r\nnet/http.send(0x1400017a000, {0x102a5ab80, 0x102bbb7c0}, {0x10293fd8c?, 0x8?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:251 +0x4f4 fp=0x1400013fc50 sp=0x1400013fa50 pc=0x10293e634\r\nnet/http.(*Client).send(0x102bc0d40, 0x1400017a000, {0x1400013fd08?, 0x1027b118c?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:175 +0x98 fp=0x1400013fcd0 sp=0x1400013fc50 pc=0x10293dfd8\r\nnet/http.(*Client).do(0x102bc0d40, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:715 +0x6e8 fp=0x1400013fed0 sp=0x1400013fcd0 pc=0x10293fde8\r\nnet/http.(*Client).Do(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:581\r\nnet/http.(*Client).Get(0x1027a5514?, {0x102980a38?, 0x1400004a768?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:479 +0x78 fp=0x1400013ff30 sp=0x1400013fed0 pc=0x10293f5f8\r\nnet/http.Get(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:448\r\nmain.main()\r\n\t/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/tmp.ycttMIXQ/main.go:10 +0x34 fp=0x1400013ff70 sp=0x1400013ff30 pc=0x10297c834\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:250 +0x24c fp=0x1400013ffd0 sp=0x1400013ff70 pc=0x1027dac4c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013ffd0 sp=0x1400013ffd0 pc=0x102807164\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004afa0 sp=0x1400004af80 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:302 +0xac fp=0x1400004afd0 sp=0x1400004afa0 pc=0x1027daeac\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004afd0 sp=0x1400004afd0 pc=0x102807164\r\ncreated by runtime.init.6\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:290 +0x24\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004b770 sp=0x1400004b750 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.bgsweep(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcsweep.go:278 +0xa4 fp=0x1400004b7b0 sp=0x1400004b770 pc=0x1027c8534\r\nruntime.gcenable.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x28 fp=0x1400004b7d0 sp=0x1400004b7b0 pc=0x1027bcd78\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004b7d0 sp=0x1400004b7d0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x74\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x1029f1850?, 0x1?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004bf50 sp=0x1400004bf30 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.(*scavengerState).park(0x102bc1060)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:389 +0x5c fp=0x1400004bf80 sp=0x1400004bf50 pc=0x1027c64ec\r\nruntime.bgscavenge(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:617 +0x44 fp=0x1400004bfb0 sp=0x1400004bf80 pc=0x1027c6a94\r\nruntime.gcenable.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0x28 fp=0x1400004bfd0 sp=0x1400004bfb0 pc=0x1027bcd18\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004bfd0 sp=0x1400004bfd0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0xb8\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x14000046580 sp=0x14000046560 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:180 +0x120 fp=0x140000467d0 sp=0x14000046580 pc=0x1027bbfa0\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x140000467d0 sp=0x140000467d0 pc=0x102807164\r\ncreated by runtime.createfing\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:157 +0x84\r\n\r\ngoroutine 19 [chan receive]:\r\nruntime.gopark(0x102bf1c60?, 0x102cfc5e0?, 0x78?, 0x17?, 0x1027b133c?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x140001416f0 sp=0x140001416d0 pc=0x1027db014\r\nruntime.chanrecv(0x14000090060, 0x140001418d8, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:583 +0x454 fp=0x14000141780 sp=0x140001416f0 pc=0x1027aaa54\r\nruntime.chanrecv1(0x1400017e000?, 0x1400009a010?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:442 +0x14 fp=0x140001417b0 sp=0x14000141780 pc=0x1027aa5f4\r\nnet/http.(*persistConn).addTLS(0x1400014c480, {0x102a5cab0?, 0x1400012e008}, {0x1400012e290, 0xa}, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1544 +0x2dc fp=0x140001419a0 sp=0x140001417b0 pc=0x10296c93c\r\nnet/http.(*Transport).dialConn(0x102bbb7c0, {0x102a5cab0, 0x1400012e008}, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1618 +0x780 fp=0x14000141ec0 sp=0x140001419a0 pc=0x10296d3f0\r\nnet/http.(*Transport).dialConnFor(0x0?, 0x1400015c2c0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1450 +0x80 fp=0x14000141fb0 sp=0x14000141ec0 pc=0x10296bfd0\r\nnet/http.(*Transport).queueForDial.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x2c fp=0x14000141fd0 sp=0x14000141fb0 pc=0x10296bf1c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x14000141fd0 sp=0x14000141fd0 pc=0x102807164\r\ncreated by net/http.(*Transport).queueForDial\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x398\r\n\r\nr0      0x0\r\nr1      0x0\r\nr2      0x0\r\nr3      0x0\r\nr4      0x0\r\nr5      0x14000102f30\r\nr6      0x102bf0db1\r\nr7      0x1\r\nr8      0x1980dee91\r\nr9      0x1edebb000\r\nr10     0x6000137d1968\r\nr11     0x1\r\nr12     0x1028e0540\r\nr13     0x16d886f00\r\nr14     0x1029f1850\r\nr15     0x1f06ed8d8\r\nr16     0x102b84000\r\nr17     0x197ce8290\r\nr18     0x0\r\nr19     0xc\r\nr20     0x1400013b230\r\nr21     0x3\r\nr22     0xd\r\nr23     0x5a\r\nr24     0x4e7b8f8b91b24de2\r\nr25     0xd265af7a4013c97f\r\nr26     0x1400013b2e8\r\nr27     0x848\r\nr28     0x140001021a0\r\nr29     0x16d886ed0\r\nlr      0x197ce839c\r\nsp      0x16d886ed0\r\npc      0x197eb5458\r\nfault   0x197eb5458\r\n</pre>\r\n</details>\r\n\r\n/cc @bradfitz \r\nas you reported the very similar ticket #51759, would be interesting to see if you can reproduce this the same way.",NeedsFix,rolandshoemaker,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/william/Library/Caches/go-build""\r\nGOENV=""/Users/william/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/william/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/william/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.19/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.19/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/william/dev/oss/repro-go-1/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/go-build670127871=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRunning a compiled Go binary with a strange path causes crashes that are very similar to #51759, so perhaps the crash is rather in `crypto/x509` than in `net/http`.\r\n\r\nI can only reproduce it when calling the Go binary with a path that includes a double slash `//` and a directory that starts with a dot `.`. I have no idea why this is or how to further debug is.\r\n\r\nThis reproducing script sets up a minimal folder structure, build the tool and runs it in a way that causes crashes:\r\n```shell\r\n#!/bin/sh\r\n\r\ncd $(mktemp -d)\r\ngo mod init repro\r\n\r\ncat > main.go <<EOF\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""net/http""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tres, err := http.Get(""https://google.com"")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tres.Write(os.Stdout)\r\n}\r\nEOF\r\n\r\nmkdir -p dir .dot\r\ngo build -o ./.dot/repro .\r\n$(pwd)/dir//../.dot/repro\r\n```\r\n\r\nCalling it e.g. with `$(pwd)/dir/../.dot/repro`, `$(pwd)//.dot/repro`,  or `$(pwd)/.dot/repro` does not cause the same crash.\r\n\r\n### What did you expect to see?\r\n\r\nHTML output from https://google.com.\r\n\r\n### What did you see instead?\r\n\r\nPanic, see hidden long panic text below:\r\n<details><summary>Full panic output</summary><br>\r\n<pre>\r\ngo: creating new go.mod: module repro\r\nSIGTRAP: trace trap\r\nPC=0x197eb5458 m=5 sigcode=0\r\n\r\ngoroutine 0 [idle]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 34 [syscall]:\r\ncrypto/x509/internal/macos.syscall(0x14000100000?, 0x140000ba1e0?, 0x1400013b1e8?, 0x1027d7378?, 0x1400013b1b8?, 0x1028dfd20?, 0x102a34420?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/sys_darwin.go:99 +0x5c fp=0x1400013b150 sp=0x1400013b0b0 pc=0x102803d1c\r\ncrypto/x509/internal/macos.CFRelease(0x140000ba1e0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:156 +0x40 fp=0x1400013b1a0 sp=0x1400013b150 pc=0x1028df930\r\ncrypto/x509/internal/macos.ReleaseCFArray(0x1400013b228?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/internal/macos/corefoundation.go:211 +0x30 fp=0x1400013b1d0 sp=0x1400013b1a0 pc=0x1028dfbc0\r\ncrypto/x509.(*Certificate).systemVerify.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:34 +0x28 fp=0x1400013b1f0 sp=0x1400013b1d0 pc=0x1028e77a8\r\nruntime.deferreturn()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/panic.go:476 +0x34 fp=0x1400013b230 sp=0x1400013b1f0 pc=0x1027d7384\r\ncrypto/x509.(*Certificate).systemVerify(0x140000d8000, 0x1400013b5f0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/root_darwin.go:40 +0x360 fp=0x1400013b490 sp=0x1400013b230 pc=0x1028e72a0\r\ncrypto/x509.(*Certificate).Verify(0x140000d8000, {{0x1400012e290, 0xa}, 0x140000927e0, 0x0, {0xc0b906432398fdc8, 0x327a142, 0x102bc0fe0}, {0x0, 0x0, ...}, ...})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/x509/verify.go:768 +0x474 fp=0x1400013b5e0 sp=0x1400013b490 pc=0x1028eaca4\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x14000098000, {0x140000914a0, 0x3, 0x4})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:874 +0x4fc fp=0x1400013b870 sp=0x1400013b5e0 pc=0x1029001ac\r\ncrypto/tls.(*clientHandshakeStateTLS13).readServerCertificate(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:461 +0x274 fp=0x1400013ba80 sp=0x1400013b870 pc=0x102902754\r\ncrypto/tls.(*clientHandshakeStateTLS13).handshake(0x1400013bc78)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client_tls13.go:91 +0x1bc fp=0x1400013bac0 sp=0x1400013ba80 pc=0x102900b7c\r\ncrypto/tls.(*Conn).clientHandshake(0x14000098000, {0x102a5ca78, 0x140000a0040})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/handshake_client.go:224 +0x440 fp=0x1400013bd50 sp=0x1400013bac0 pc=0x1028fc7e0\r\ncrypto/tls.(*Conn).clientHandshake-fm({0x102a5ca78?, 0x140000a0040?})\r\n\t<autogenerated>:1 +0x3c fp=0x1400013bd80 sp=0x1400013bd50 pc=0x10291d9dc\r\ncrypto/tls.(*Conn).handshakeContext(0x14000098000, {0x102a5cab0, 0x1400012e008})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1462 +0x2dc fp=0x1400013bf60 sp=0x1400013bd80 pc=0x1028faf0c\r\ncrypto/tls.(*Conn).HandshakeContext(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/crypto/tls/conn.go:1405\r\nnet/http.(*persistConn).addTLS.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1538 +0x6c fp=0x1400013bfd0 sp=0x1400013bf60 pc=0x10296cb8c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013bfd0 sp=0x1400013bfd0 pc=0x102807164\r\ncreated by net/http.(*persistConn).addTLS\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1534 +0x2cc\r\n\r\ngoroutine 1 [select]:\r\nruntime.gopark(0x1400013f7b0?, 0x4?, 0xe8?, 0xf4?, 0x1400013f658?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400013f4c0 sp=0x1400013f4a0 pc=0x1027db014\r\nruntime.selectgo(0x1400013f7b0, 0x1400013f650, 0x1400011ad20?, 0x0, 0x1400013f628?, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/select.go:328 +0x688 fp=0x1400013f5e0 sp=0x1400013f4c0 pc=0x1027ead78\r\nnet/http.(*Transport).getConn(0x102bbb7c0, 0x140001581c0, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1376 +0x448 fp=0x1400013f800 sp=0x1400013f5e0 pc=0x10296b588\r\nnet/http.(*Transport).roundTrip(0x102bbb7c0, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:582 +0x658 fp=0x1400013fa30 sp=0x1400013f800 pc=0x102967978\r\nnet/http.(*Transport).RoundTrip(0x10?, 0x102a5ab80?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/roundtrip.go:17 +0x1c fp=0x1400013fa50 sp=0x1400013fa30 pc=0x10295f12c\r\nnet/http.send(0x1400017a000, {0x102a5ab80, 0x102bbb7c0}, {0x10293fd8c?, 0x8?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:251 +0x4f4 fp=0x1400013fc50 sp=0x1400013fa50 pc=0x10293e634\r\nnet/http.(*Client).send(0x102bc0d40, 0x1400017a000, {0x1400013fd08?, 0x1027b118c?, 0x0?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:175 +0x98 fp=0x1400013fcd0 sp=0x1400013fc50 pc=0x10293dfd8\r\nnet/http.(*Client).do(0x102bc0d40, 0x1400017a000)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:715 +0x6e8 fp=0x1400013fed0 sp=0x1400013fcd0 pc=0x10293fde8\r\nnet/http.(*Client).Do(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:581\r\nnet/http.(*Client).Get(0x1027a5514?, {0x102980a38?, 0x1400004a768?})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:479 +0x78 fp=0x1400013ff30 sp=0x1400013fed0 pc=0x10293f5f8\r\nnet/http.Get(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/client.go:448\r\nmain.main()\r\n\t/var/folders/cy/3r4j16gn1zv67w4pxmf7kwjr0000gn/T/tmp.ycttMIXQ/main.go:10 +0x34 fp=0x1400013ff70 sp=0x1400013ff30 pc=0x10297c834\r\nruntime.main()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:250 +0x24c fp=0x1400013ffd0 sp=0x1400013ff70 pc=0x1027dac4c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400013ffd0 sp=0x1400013ffd0 pc=0x102807164\r\n\r\ngoroutine 2 [force gc (idle)]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004afa0 sp=0x1400004af80 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.forcegchelper()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:302 +0xac fp=0x1400004afd0 sp=0x1400004afa0 pc=0x1027daeac\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004afd0 sp=0x1400004afd0 pc=0x102807164\r\ncreated by runtime.init.6\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:290 +0x24\r\n\r\ngoroutine 3 [GC sweep wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004b770 sp=0x1400004b750 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.bgsweep(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcsweep.go:278 +0xa4 fp=0x1400004b7b0 sp=0x1400004b770 pc=0x1027c8534\r\nruntime.gcenable.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x28 fp=0x1400004b7d0 sp=0x1400004b7b0 pc=0x1027bcd78\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004b7d0 sp=0x1400004b7d0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:178 +0x74\r\n\r\ngoroutine 4 [GC scavenge wait]:\r\nruntime.gopark(0x14000072000?, 0x1029f1850?, 0x1?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x1400004bf50 sp=0x1400004bf30 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.(*scavengerState).park(0x102bc1060)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:389 +0x5c fp=0x1400004bf80 sp=0x1400004bf50 pc=0x1027c64ec\r\nruntime.bgscavenge(0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgcscavenge.go:617 +0x44 fp=0x1400004bfb0 sp=0x1400004bf80 pc=0x1027c6a94\r\nruntime.gcenable.func2()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0x28 fp=0x1400004bfd0 sp=0x1400004bfb0 pc=0x1027bcd18\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x1400004bfd0 sp=0x1400004bfd0 pc=0x102807164\r\ncreated by runtime.gcenable\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mgc.go:179 +0xb8\r\n\r\ngoroutine 18 [finalizer wait]:\r\nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x14000046580 sp=0x14000046560 pc=0x1027db014\r\nruntime.goparkunlock(...)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:369\r\nruntime.runfinq()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:180 +0x120 fp=0x140000467d0 sp=0x14000046580 pc=0x1027bbfa0\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x140000467d0 sp=0x140000467d0 pc=0x102807164\r\ncreated by runtime.createfing\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/mfinal.go:157 +0x84\r\n\r\ngoroutine 19 [chan receive]:\r\nruntime.gopark(0x102bf1c60?, 0x102cfc5e0?, 0x78?, 0x17?, 0x1027b133c?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/proc.go:363 +0xe4 fp=0x140001416f0 sp=0x140001416d0 pc=0x1027db014\r\nruntime.chanrecv(0x14000090060, 0x140001418d8, 0x1)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:583 +0x454 fp=0x14000141780 sp=0x140001416f0 pc=0x1027aaa54\r\nruntime.chanrecv1(0x1400017e000?, 0x1400009a010?)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/chan.go:442 +0x14 fp=0x140001417b0 sp=0x14000141780 pc=0x1027aa5f4\r\nnet/http.(*persistConn).addTLS(0x1400014c480, {0x102a5cab0?, 0x1400012e008}, {0x1400012e290, 0xa}, 0x0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1544 +0x2dc fp=0x140001419a0 sp=0x140001417b0 pc=0x10296c93c\r\nnet/http.(*Transport).dialConn(0x102bbb7c0, {0x102a5cab0, 0x1400012e008}, {{}, 0x0, {0x102980a38, 0x5}, {0x1400012e290, 0xe}, 0x0})\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1618 +0x780 fp=0x14000141ec0 sp=0x140001419a0 pc=0x10296d3f0\r\nnet/http.(*Transport).dialConnFor(0x0?, 0x1400015c2c0)\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1450 +0x80 fp=0x14000141fb0 sp=0x14000141ec0 pc=0x10296bfd0\r\nnet/http.(*Transport).queueForDial.func1()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x2c fp=0x14000141fd0 sp=0x14000141fb0 pc=0x10296bf1c\r\nruntime.goexit()\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/runtime/asm_arm64.s:1165 +0x4 fp=0x14000141fd0 sp=0x14000141fd0 pc=0x102807164\r\ncreated by net/http.(*Transport).queueForDial\r\n\t/opt/homebrew/Cellar/go/1.19/libexec/src/net/http/transport.go:1419 +0x398\r\n\r\nr0      0x0\r\nr1      0x0\r\nr2      0x0\r\nr3      0x0\r\nr4      0x0\r\nr5      0x14000102f30\r\nr6      0x102bf0db1\r\nr7      0x1\r\nr8      0x1980dee91\r\nr9      0x1edebb000\r\nr10     0x6000137d1968\r\nr11     0x1\r\nr12     0x1028e0540\r\nr13     0x16d886f00\r\nr14     0x1029f1850\r\nr15     0x1f06ed8d8\r\nr16     0x102b84000\r\nr17     0x197ce8290\r\nr18     0x0\r\nr19     0xc\r\nr20     0x1400013b230\r\nr21     0x3\r\nr22     0xd\r\nr23     0x5a\r\nr24     0x4e7b8f8b91b24de2\r\nr25     0xd265af7a4013c97f\r\nr26     0x1400013b2e8\r\nr27     0x848\r\nr28     0x140001021a0\r\nr29     0x16d886ed0\r\nlr      0x197ce839c\r\nsp      0x16d886ed0\r\npc      0x197eb5458\r\nfault   0x197eb5458\r\n</pre>\r\n</details>\r\n\r\n/cc @bradfitz \r\nas you reported the very similar ticket #51759, would be interesting to see if you can reproduce this the same way.","shell\r\n#!/bin/sh\r\n\r\ncd $(mktemp -d)\r\ngo mod init repro\r\n\r\ncat > main.go <<EOF\r\npackage main\r\n\r\nimport (\r\n\t""log""\r\n\t""net/http""\r\n\t""os""\r\n)\r\n\r\nfunc main() {\r\n\tres, err := http.Get(""https://google.com"")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tres.Write(os.Stdout)\r\n}\r\nEOF\r\n\r\nmkdir -p dir .dot\r\ngo build -o ./.dot/repro .\r\n$(pwd)/dir//../.dot/repro\r\n"
54563,"cmd/compile: possible append inside a method escape analysis optimization\r\n\r\n`BenchmarkEscapes-4              48139129                37.46 ns/op           16 B/op          1 allocs/op`\r\n\r\n`BenchmarkDoesNotEscape-4       1000000000               0.3443 ns/op          0 B/op          0 allocs/op`\r\n\r\nI think we might just mark the append function implicitly in compiler as noescaping.\r\nDoing so, but explicitly, removes the allocation: \r\n\r\n`BenchmarkNoescapeAppend-4              170689034                7.031 ns/op           0 B/op          0 allocs/op`\r\n\r\nI think it is safe to do so. I can't think of any case where the slice passed to append must be forced to be heap allocated.",NeedsInvestigation|compiler/runtime,mdempsky,"```go\r\ntype Builder struct {\r\n\tbuf []byte\r\n}\r\n\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append(b.buf, 1)\r\n}\r\n\r\nfunc escapes() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.DoSth()\r\n}\r\n```\r\n\r\n`BenchmarkEscapes-4              48139129                37.46 ns/op           16 B/op          1 allocs/op`\r\n```go\r\nfunc doesNotEscape() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.buf = append(b.buf, 1)\r\n\t_ = b\r\n}\r\n```\r\n`BenchmarkDoesNotEscape-4       1000000000               0.3443 ns/op          0 B/op          0 allocs/op`\r\n\r\nI think we might just mark the append function implicitly in compiler as noescaping.\r\nDoing so, but explicitly, removes the allocation: \r\n```go\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append2(b.buf, 1)\r\n}\r\n\r\n//go:noescape\r\n//go:linkname append2 aa.append2helper\r\nfunc append2(buf []byte, elems ...byte) []byte\r\n\r\nfunc append2helper(buf []byte, elems ...byte) []byte {\r\n\treturn append(buf, elems...)\r\n}\r\n```\r\n`BenchmarkNoescapeAppend-4              170689034                7.031 ns/op           0 B/op          0 allocs/op`\r\n\r\nI think it is safe to do so. I can't think of any case where the slice passed to append must be forced to be heap allocated.","go\r\ntype Builder struct {\r\n\tbuf []byte\r\n}\r\n\r\nfunc (b *Builder) DoSth() {\r\n\tb.buf = append(b.buf, 1)\r\n}\r\n\r\nfunc escapes() {\r\n\tb := Builder{make([]byte, 0, 10)}\r\n\tb.DoSth()\r\n}\r\n"
54535,"cmd/compile: failed to compile some recursive generic type<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ntip only\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitsuoheijo/Library/Caches/go-build""\r\nGOENV=""/Users/mitsuoheijo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitsuoheijo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitsuoheijo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/mitsuoheijo/ghq/github.com/golang/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/mitsuoheijo/ghq/github.com/golang/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitsuoheijo/ghq/github.com/johejo/sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bq/s3vkkxm17jq79lx5qy3856zh0000gn/T/go-build3085638013=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ go run .\r\nhello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ gotip run .\r\n# github.com/johejo/sandbox\r\n./main.go:9:22: n.children[i].items undefined (type go.shape.*uint8 has no field or method items)\r\n```\r\n\r\nThis might be some regression.\r\nI found this problem while using google/btree.\r\nhttps://github.com/google/btree",NeedsFix|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ntip only\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitsuoheijo/Library/Caches/go-build""\r\nGOENV=""/Users/mitsuoheijo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitsuoheijo/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitsuoheijo/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/mitsuoheijo/ghq/github.com/golang/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/mitsuoheijo/ghq/github.com/golang/go/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.20-a719a78c1b Fri Aug 19 00:29:18 2022 +0000""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitsuoheijo/ghq/github.com/johejo/sandbox/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bq/s3vkkxm17jq79lx5qy3856zh0000gn/T/go-build3085638013=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```go\r\npackage main\r\n\r\ntype node[T any] struct {\r\n\titems    items[T]\r\n\tchildren items[*node[T]]\r\n}\r\n\r\nfunc (n *node[T]) f(i int, j int) bool {\r\n\tif len(n.children[i].items) < j {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\ntype items[T any] []T\r\n\r\nfunc main() {\r\n\t_ = node[int]{}\r\n\tprintln(""hello"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ go run .\r\nhello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ gotip run .\r\n# github.com/johejo/sandbox\r\n./main.go:9:22: n.children[i].items undefined (type go.shape.*uint8 has no field or method items)\r\n```\r\n\r\nThis might be some regression.\r\nI found this problem while using google/btree.\r\nhttps://github.com/google/btree","go\r\npackage main\r\n\r\ntype node[T any] struct {\r\n\titems    items[T]\r\n\tchildren items[*node[T]]\r\n}\r\n\r\nfunc (n *node[T]) f(i int, j int) bool {\r\n\tif len(n.children[i].items) < j {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\ntype items[T any] []T\r\n\r\nfunc main() {\r\n\t_ = node[int]{}\r\n\tprintln(""hello"")\r\n}\r\n"
54482,"cmd/link: cgo generates incorrect symbols on macOS 13 beta 5<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n% go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kevin/Library/Caches/go-build""\r\nGOENV=""/Users/kevin/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kevin/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kevin/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/9s/xwtpw2qs21163sxc3_s54_cw0000gn/T/go-build1102081114=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n<pre>\r\n% sw_vers\r\nProductName:            macOS\r\nProductVersion:         13.0\r\nBuildVersion:           22A5321d\r\n</pre>\r\n### What did you do?\r\n\r\ncpoc.go\r\n\r\n\r\n\r\ncpoc.c\r\n\r\n```\r\n#include ""cpoc.h""\r\n\r\nvoid cLogger(void)\r\n{\r\n    printf(""cLogger\\n"");\r\n    goLogger();\r\n}\r\n```\r\n\r\ncpoc.h\r\n\r\n```\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nextern void goLogger(void);\r\n\r\nvoid cLogger(void);\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrectly compiled cgo binary.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n% go run cpoc.go \r\n# command-line-arguments\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: warning: -no_pie is deprecated when targeting new OS versions\r\nld: warning: non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later\r\nUndefined symbols for architecture x86_64:\r\n  ""_cLogger"", referenced from:\r\n      __cgo_267e1da4216b_Cfunc_cLogger in 000001.o\r\n     (maybe you meant: __cgo_267e1da4216b_Cfunc_cLogger)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nI'm guessing this is due to the beta-ness of the OS. Happy to provide more debug info to get this working.",WaitingForInfo|compiler/runtime,cherrymui,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n% go version\r\ngo version go1.19 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n% go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kevin/Library/Caches/go-build""\r\nGOENV=""/Users/kevin/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kevin/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kevin/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/9s/xwtpw2qs21163sxc3_s54_cw0000gn/T/go-build1102081114=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n<pre>\r\n% sw_vers\r\nProductName:            macOS\r\nProductVersion:         13.0\r\nBuildVersion:           22A5321d\r\n</pre>\r\n### What did you do?\r\n\r\ncpoc.go\r\n\r\n```go\r\npackage main\r\n\r\n// #include ""cpoc.h""\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n//export goLogger\r\nfunc goLogger() {\r\n\tfmt.Println(""goLogger"")\r\n}\r\n\r\nfunc main() {\r\n\tC.cLogger()\r\n}\r\n```\r\n\r\ncpoc.c\r\n\r\n```\r\n#include ""cpoc.h""\r\n\r\nvoid cLogger(void)\r\n{\r\n    printf(""cLogger\\n"");\r\n    goLogger();\r\n}\r\n```\r\n\r\ncpoc.h\r\n\r\n```\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n\r\nextern void goLogger(void);\r\n\r\nvoid cLogger(void);\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrectly compiled cgo binary.\r\n\r\n\r\n### What did you see instead?\r\n\r\n```\r\n% go run cpoc.go \r\n# command-line-arguments\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: warning: -no_pie is deprecated when targeting new OS versions\r\nld: warning: non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later\r\nUndefined symbols for architecture x86_64:\r\n  ""_cLogger"", referenced from:\r\n      __cgo_267e1da4216b_Cfunc_cLogger in 000001.o\r\n     (maybe you meant: __cgo_267e1da4216b_Cfunc_cLogger)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nI'm guessing this is due to the beta-ness of the OS. Happy to provide more debug info to get this working.","go\r\npackage main\r\n\r\n// #include ""cpoc.h""\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\n//export goLogger\r\nfunc goLogger() {\r\n\tfmt.Println(""goLogger"")\r\n}\r\n\r\nfunc main() {\r\n\tC.cLogger()\r\n}\r\n"
54456,"cmd/compile: Type confusion vulnerability on identically named generic structs### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis issue affects the latest version. I have tested Go 1.18 and Go 1.18.5, in addition to Go 1.19, both of which are affected as well.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mce-gabrielp/.cache/go-build""\r\nGOENV=""/home/mce-gabrielp/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mce-gabrielp/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mce-gabrielp/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3251415554=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile and execute the following program: https://go.dev/play/p/54u9Z1S7oUZ\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe following output:\r\n```\r\n$ go run repro.go \r\n{0 []}\r\n{0}\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run repro.go \r\n{0 []}\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x1 pc=0x45dd49]\r\n\r\ngoroutine 1 [running]:\r\nreflect.typedmemmove(0xc0000061a0?, 0x487de0?, 0x47de01?)\r\n\t/usr/local/go/src/runtime/mbarrier.go:191 +0x19\r\nreflect.packEface({0x488ae0?, 0x1?, 0x0?})\r\n\t/usr/local/go/src/reflect/value.go:123 +0x65\r\nreflect.valueInterface({0x488ae0?, 0x1?, 0x0?}, 0x30?)\r\n\t/usr/local/go/src/reflect/value.go:1508 +0xbb\r\nreflect.Value.Interface(...)\r\n\t/usr/local/go/src/reflect/value.go:1478\r\nfmt.(*pp).printValue(0xc00010c270, {0x488ae0?, 0x1?, 0x4?}, 0x76, 0x2)\r\n\t/usr/local/go/src/fmt/print.go:753 +0xa5\r\nfmt.(*pp).printValue(0xc00010c270, {0x487de0?, 0x51c7a8?, 0x441186?}, 0x76, 0x1)\r\n\t/usr/local/go/src/fmt/print.go:896 +0x16b2\r\nfmt.(*pp).printValue(0xc00010c270, {0x48e280?, 0x51c7a0?, 0x7?}, 0x76, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:837 +0x12b4\r\nfmt.(*pp).printArg(0xc00010c270, {0x48e280?, 0x51c7a0}, 0x76)\r\n\t/usr/local/go/src/fmt/print.go:743 +0x756\r\nfmt.(*pp).doPrintln(0xc00010c270, {0xc000104f50?, 0x1, 0x0?})\r\n\t/usr/local/go/src/fmt/print.go:1200 +0x150\r\nfmt.Fprintln({0x4b8008, 0xc000012018}, {0xc000104f50, 0x1, 0x1})\r\n\t/usr/local/go/src/fmt/print.go:284 +0x4f\r\nfmt.Println(...)\r\n\t/usr/local/go/src/fmt/print.go:294\r\nmain.bar()\r\n\t/home/mce-gabrielp/repro.go:23 +0x5e\r\nmain.main()\r\n\t/home/mce-gabrielp/repro.go:28 +0x1c\r\nexit status 2\r\n```\r\n",NeedsFix|FrozenDueToAge|generics|compiler/runtime,mdempsky,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis issue affects the latest version. I have tested Go 1.18 and Go 1.18.5, in addition to Go 1.19, both of which are affected as well.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/mce-gabrielp/.cache/go-build""\r\nGOENV=""/home/mce-gabrielp/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/mce-gabrielp/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/mce-gabrielp/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3251415554=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile and execute the following program: https://go.dev/play/p/54u9Z1S7oUZ\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t\tB []T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc bar() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n\tbar()\r\n}\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe following output:\r\n```\r\n$ go run repro.go \r\n{0 []}\r\n{0}\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n$ go run repro.go \r\n{0 []}\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x1 pc=0x45dd49]\r\n\r\ngoroutine 1 [running]:\r\nreflect.typedmemmove(0xc0000061a0?, 0x487de0?, 0x47de01?)\r\n\t/usr/local/go/src/runtime/mbarrier.go:191 +0x19\r\nreflect.packEface({0x488ae0?, 0x1?, 0x0?})\r\n\t/usr/local/go/src/reflect/value.go:123 +0x65\r\nreflect.valueInterface({0x488ae0?, 0x1?, 0x0?}, 0x30?)\r\n\t/usr/local/go/src/reflect/value.go:1508 +0xbb\r\nreflect.Value.Interface(...)\r\n\t/usr/local/go/src/reflect/value.go:1478\r\nfmt.(*pp).printValue(0xc00010c270, {0x488ae0?, 0x1?, 0x4?}, 0x76, 0x2)\r\n\t/usr/local/go/src/fmt/print.go:753 +0xa5\r\nfmt.(*pp).printValue(0xc00010c270, {0x487de0?, 0x51c7a8?, 0x441186?}, 0x76, 0x1)\r\n\t/usr/local/go/src/fmt/print.go:896 +0x16b2\r\nfmt.(*pp).printValue(0xc00010c270, {0x48e280?, 0x51c7a0?, 0x7?}, 0x76, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:837 +0x12b4\r\nfmt.(*pp).printArg(0xc00010c270, {0x48e280?, 0x51c7a0}, 0x76)\r\n\t/usr/local/go/src/fmt/print.go:743 +0x756\r\nfmt.(*pp).doPrintln(0xc00010c270, {0xc000104f50?, 0x1, 0x0?})\r\n\t/usr/local/go/src/fmt/print.go:1200 +0x150\r\nfmt.Fprintln({0x4b8008, 0xc000012018}, {0xc000104f50, 0x1, 0x1})\r\n\t/usr/local/go/src/fmt/print.go:284 +0x4f\r\nfmt.Println(...)\r\n\t/usr/local/go/src/fmt/print.go:294\r\nmain.bar()\r\n\t/home/mce-gabrielp/repro.go:23 +0x5e\r\nmain.main()\r\n\t/home/mce-gabrielp/repro.go:28 +0x1c\r\nexit status 2\r\n```\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc foo() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t\tB []T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc bar() {\r\n\ttype data[T any] struct {\r\n\t\tA T\r\n\t}\r\n\r\n\tv := data[int]{}\r\n\tfmt.Println(v)\r\n}\r\n\r\nfunc main() {\r\n\tfoo()\r\n\tbar()\r\n}\r\n"
54444,"runtime: wasm GC causes stop the world for a very long time### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/.go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/.go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go-1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go-1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build306969192=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am working on a hobby game engine that has both Native (OpenGL) and WASM (WebGL2) support.\r\n\r\nWhen running a larger scene in WebAssembly I notice that whenever a GC is triggered it causes everything to freeze for about a second or more.\r\n\r\nActually, it happens with smaller scenes too but just less often (due to GC triggering less often). I think that the duration of the freeze is proportional to the number of active pointer references but this needs more testing to verify.\r\n\r\nI try not to allocate much memory but it happens that once a frame I might allocate a few KBs here and there (I have a custom react-style Go UI framework that is hard to make allocation-free due to tree invalidation logic and besides, one should be able to make use of Go's memory management). This means that after 15s-60s everything just freezes.\r\n\r\nI managed to write a dummy program that reproduces the issue:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSmooth and consistent logging in the Browser Console.\r\n\r\n### What did you see instead?\r\n\r\nA stop the world situation once in a while (every 2 seconds or so). The `Total` counter (indicating the number of GC runs) always increases immediatelly after the freeze, showing that it is related to GC.\r\n\r\nWhat's interesting is that none of the stats (even the frame time) indicate that GC took more time than indicated but the fact is that the Browser freezes. Could it be that Go is doing something that JS or the Browser does not like and needs to adjust to once setInterval callback has completed (e.g. memory shuffling or something of the kind)?\r\n\r\nThis is reproducible with both Chrome and Firefox. Have not tried other browsers.\r\n",Performance|NeedsInvestigation|arch-wasm|compiler/runtime,mknyszek,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/.go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/.go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go-1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go-1.19/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build306969192=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI am working on a hobby game engine that has both Native (OpenGL) and WASM (WebGL2) support.\r\n\r\nWhen running a larger scene in WebAssembly I notice that whenever a GC is triggered it causes everything to freeze for about a second or more.\r\n\r\nActually, it happens with smaller scenes too but just less often (due to GC triggering less often). I think that the duration of the freeze is proportional to the number of active pointer references but this needs more testing to verify.\r\n\r\nI try not to allocate much memory but it happens that once a frame I might allocate a few KBs here and there (I have a custom react-style Go UI framework that is hard to make allocation-free due to tree invalidation logic and besides, one should be able to make use of Go's memory management). This means that after 15s-60s everything just freezes.\r\n\r\nI managed to write a dummy program that reproduces the issue:\r\n\r\n```go\r\nvar (\r\n\tstatsRunning int32\r\n\tgcStats      = new(debug.GCStats)\r\n\tcached       []byte\r\n)\r\n\r\nfunc main() {\r\n\t// Force the GC to trigger more often. If you remove this, you might need\r\n\t// to wait up to a minute in some cases.\r\n\tdebug.SetGCPercent(5)\r\n\r\n\taLotOfData := make([]int, 20_000_000)\r\n\taLotOfRefData := make([]*int, 20_000_000)\r\n\tfor i := range aLotOfRefData {\r\n\t\taLotOfRefData[i] = &aLotOfData[i]\r\n\t}\r\n\r\n\tcallbackFunc := js.FuncOf(func(this js.Value, args []js.Value) any {\r\n\t\tframeStart := time.Now()\r\n\r\n\t\t// Check stats once in a while.\r\n\t\tif atomic.CompareAndSwapInt32(&statsRunning, 0, 1) {\r\n\t\t\tgo func() {\r\n\t\t\t\tdebug.ReadGCStats(gcStats)\r\n\t\t\t\tif len(gcStats.Pause) > 0 {\r\n\t\t\t\t\tlog.Printf(""GC STATS! Total: %d; Time since last GC: %s; Pause total: %s; Pause last: %s"",\r\n\t\t\t\t\t\tgcStats.NumGC,\r\n\t\t\t\t\t\ttime.Since(gcStats.LastGC),\r\n\t\t\t\t\t\tgcStats.PauseTotal,\r\n\t\t\t\t\t\tgcStats.Pause[0],\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tatomic.StoreInt32(&statsRunning, 0)\r\n\t\t\t}()\r\n\t\t}\r\n\r\n\t\tprocessingTime := time.Now()\r\n\r\n\t\t// Do some processing so that the frame takes some time and so that the\r\n\t\t// runtime is forced to go through a lot of pointers (not sure if relevant).\r\n\t\tfor i := 0; i < len(aLotOfRefData); i++ {\r\n\t\t\t*aLotOfRefData[i]++\r\n\t\t}\r\n\r\n\t\t// Couldn't figure out a better way to force the compiler not to optimize\r\n\t\t// the slice allocation. Hence keep it in a variable and use it next frame.\r\n\t\tif cached == nil {\r\n\t\t\tcached = make([]byte, 1_000_000)\r\n\t\t} else {\r\n\t\t\tfor j := range cached {\r\n\t\t\t\tcached[j]++\r\n\t\t\t}\r\n\t\t\tcached = nil\r\n\t\t}\r\n\r\n\t\tprocessingDuration := time.Since(processingTime)\r\n\r\n\t\tlog.Printf(""Frame time: %s (processing: %s)"", time.Since(frameStart), processingDuration)\r\n\t\treturn nil\r\n\t})\r\n\r\n\tintervalFunc := js.Global().Get(""setInterval"")\r\n\tintervalFunc.Invoke(callbackFunc, 1)\r\n\r\n\t<-make(chan struct{})\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSmooth and consistent logging in the Browser Console.\r\n\r\n### What did you see instead?\r\n\r\nA stop the world situation once in a while (every 2 seconds or so). The `Total` counter (indicating the number of GC runs) always increases immediatelly after the freeze, showing that it is related to GC.\r\n\r\nWhat's interesting is that none of the stats (even the frame time) indicate that GC took more time than indicated but the fact is that the Browser freezes. Could it be that Go is doing something that JS or the Browser does not like and needs to adjust to once setInterval callback has completed (e.g. memory shuffling or something of the kind)?\r\n\r\nThis is reproducible with both Chrome and Firefox. Have not tried other browsers.\r\n","go\r\nvar (\r\n\tstatsRunning int32\r\n\tgcStats      = new(debug.GCStats)\r\n\tcached       []byte\r\n)\r\n\r\nfunc main() {\r\n\t// Force the GC to trigger more often. If you remove this, you might need\r\n\t// to wait up to a minute in some cases.\r\n\tdebug.SetGCPercent(5)\r\n\r\n\taLotOfData := make([]int, 20_000_000)\r\n\taLotOfRefData := make([]*int, 20_000_000)\r\n\tfor i := range aLotOfRefData {\r\n\t\taLotOfRefData[i] = &aLotOfData[i]\r\n\t}\r\n\r\n\tcallbackFunc := js.FuncOf(func(this js.Value, args []js.Value) any {\r\n\t\tframeStart := time.Now()\r\n\r\n\t\t// Check stats once in a while.\r\n\t\tif atomic.CompareAndSwapInt32(&statsRunning, 0, 1) {\r\n\t\t\tgo func() {\r\n\t\t\t\tdebug.ReadGCStats(gcStats)\r\n\t\t\t\tif len(gcStats.Pause) > 0 {\r\n\t\t\t\t\tlog.Printf(""GC STATS! Total: %d; Time since last GC: %s; Pause total: %s; Pause last: %s"",\r\n\t\t\t\t\t\tgcStats.NumGC,\r\n\t\t\t\t\t\ttime.Since(gcStats.LastGC),\r\n\t\t\t\t\t\tgcStats.PauseTotal,\r\n\t\t\t\t\t\tgcStats.Pause[0],\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tatomic.StoreInt32(&statsRunning, 0)\r\n\t\t\t}()\r\n\t\t}\r\n\r\n\t\tprocessingTime := time.Now()\r\n\r\n\t\t// Do some processing so that the frame takes some time and so that the\r\n\t\t// runtime is forced to go through a lot of pointers (not sure if relevant).\r\n\t\tfor i := 0; i < len(aLotOfRefData); i++ {\r\n\t\t\t*aLotOfRefData[i]++\r\n\t\t}\r\n\r\n\t\t// Couldn't figure out a better way to force the compiler not to optimize\r\n\t\t// the slice allocation. Hence keep it in a variable and use it next frame.\r\n\t\tif cached == nil {\r\n\t\t\tcached = make([]byte, 1_000_000)\r\n\t\t} else {\r\n\t\t\tfor j := range cached {\r\n\t\t\t\tcached[j]++\r\n\t\t\t}\r\n\t\t\tcached = nil\r\n\t\t}\r\n\r\n\t\tprocessingDuration := time.Since(processingTime)\r\n\r\n\t\tlog.Printf(""Frame time: %s (processing: %s)"", time.Since(frameStart), processingDuration)\r\n\t\treturn nil\r\n\t})\r\n\r\n\tintervalFunc := js.Global().Get(""setInterval"")\r\n\tintervalFunc.Invoke(callbackFunc, 1)\r\n\r\n\t<-make(chan struct{})\r\n}\r\n"
54424,"go/types: fix implementation of assignability check[edited]\r\n\r\n\r\nis currently not permitted:\r\n```\r\ncannot use p (variable of type P constrained by ~*T) as type *T in assignment:\r\n\tP does not implement *T (type *T is pointer to interface, not interface)\r\n```\r\n~because type parameters are following the rules for interfaces in this assignment (their constraints are interfaces). This ties in with the question of what the underlying type of a type parameter is (currently it's the constraint interface); the rest follows from that.~\r\n\r\n~This may not be the right approach for type parameters; or at least not the most user-friendly approach.~\r\n\r\nThis appears to be just a bug in the assignment check.\r\n\r\ncc: @rsc (who raised the issue)\r\ncc: @findleyr @ianlancetaylor \r\n",NeedsFix|release-blocker,griesemer,"[edited]\r\n\r\n```Go\r\nfunc f[P ~*T, T any]() {\r\n\tvar p P\r\n\tvar tp *T\r\n\ttp = p // <<< ERROR HERE\r\n}\r\n```\r\nis currently not permitted:\r\n```\r\ncannot use p (variable of type P constrained by ~*T) as type *T in assignment:\r\n\tP does not implement *T (type *T is pointer to interface, not interface)\r\n```\r\n~because type parameters are following the rules for interfaces in this assignment (their constraints are interfaces). This ties in with the question of what the underlying type of a type parameter is (currently it's the constraint interface); the rest follows from that.~\r\n\r\n~This may not be the right approach for type parameters; or at least not the most user-friendly approach.~\r\n\r\nThis appears to be just a bug in the assignment check.\r\n\r\ncc: @rsc (who raised the issue)\r\ncc: @findleyr @ianlancetaylor \r\n","Go\r\nfunc f[P ~*T, T any]() {\r\n\tvar p P\r\n\tvar tp *T\r\n\ttp = p // <<< ERROR HERE\r\n}\r\n"
54291,"cmd/compile: nosplit stack overflow with -gcflags ""all=-N -l"" -race (darwin/arm64 | Goland debug cmd)### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (go 1.19)\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ghostiam/Library/Caches/go-build""\r\nGOENV=""/Users/ghostiam/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ghostiam/projects/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ghostiam/projects/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""http://localhost:8123""\r\nGOROOT=""/Users/ghostiam/projects/golang/sdk/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ghostiam/projects/golang/sdk/go1.19/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ghostiam/Desktop/test/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pc/st46ghc9375gx_q1ktbvpq900000gn/T/go-build1017110940=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n2 lines of code:\r\nhttps://go.dev/play/p/v-LC84qDHo4\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful build and debug\r\n\r\n### What did you see instead?\r\n\r\n<details><summary>go 1.18.5 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\ntest\r\n# test\r\nruntime.fatalthrow: nosplit stack overflow\r\n\t792\tassumed on entry to syscall.ptrace<1> (nosplit)\r\n\t664\tafter syscall.ptrace<1> (nosplit) uses 128\r\n\t456\tafter syscall.ptrace1<1> (nosplit) uses 208\r\n\t264\tafter syscall.syscall6<1> (nosplit) uses 192\r\n\t232\tafter runtime.entersyscall<1> (nosplit) uses 32\r\n\t168\tafter runtime.reentersyscall<1> (nosplit) uses 64\r\n\t136\tafter runtime.save<1> (nosplit) uses 32\r\n\t104\tafter runtime.badctxt<1> (nosplit) uses 32\r\n\t56\tafter runtime.throw<1> (nosplit) uses 48\r\n\t-8\tafter runtime.fatalthrow<1> (nosplit) uses 64\r\n</pre></details>\r\n\r\n<details><summary>go 1.19 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\nunicode/utf8\r\nmath/bits\r\ninternal/itoa\r\ninternal/unsafeheader\r\ninternal/goos\r\ninternal/goarch\r\nunicode\r\ninternal/goexperiment\r\nruntime/internal/math\r\nruntime/internal/sys\r\ninternal/abi\r\nsync/atomic\r\ninternal/cpu\r\nmath\r\nruntime/internal/atomic\r\ninternal/bytealg\r\nruntime\r\ninternal/reflectlite\r\ninternal/race\r\nsync\r\ninternal/testlog\r\nerrors\r\nsort\r\ninternal/oserror\r\npath\r\nio\r\nstrconv\r\nsyscall\r\nbytes\r\nstrings\r\ninternal/syscall/execenv\r\ninternal/syscall/unix\r\ntime\r\nruntime/cgo\r\ncontext\r\nio/fs\r\ninternal/poll\r\nos\r\ninternal/godebug\r\npath/filepath\r\nos/exec\r\nruntime/race\r\ntest\r\n# test\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 128 bytes, calls syscall.ptrace1<1>\r\n        grows 208 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.entersyscall<1>\r\n                grows 32 bytes, calls runtime.reentersyscall<1>\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.casgstatus<1>\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.osyield<1>\r\n                            grows 32 bytes, calls runtime.usleep<0>\r\n                                grows 32 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    40 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 64 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                grows 64 bytes, calls runtime.casgstatus<1>\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.osyield<1>\r\n                        grows 32 bytes, calls runtime.usleep<0>\r\n                            grows 32 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                8 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.throw<1>\r\n                        grows 48 bytes, calls runtime.fatalthrow<1>\r\n                            grows 64 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n</pre></details>\r\n\r\nWithout `-race` everything compiles fine.",NeedsInvestigation|FrozenDueToAge|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.5 darwin/arm64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (go 1.19)\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 darwin/arm64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ghostiam/Library/Caches/go-build""\r\nGOENV=""/Users/ghostiam/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/ghostiam/projects/golang/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/ghostiam/projects/golang""\r\nGOPRIVATE=""""\r\nGOPROXY=""http://localhost:8123""\r\nGOROOT=""/Users/ghostiam/projects/golang/sdk/go1.19""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ghostiam/projects/golang/sdk/go1.19/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/ghostiam/Desktop/test/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pc/st46ghc9375gx_q1ktbvpq900000gn/T/go-build1017110940=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go build  -gcflags ""all=-N -l"" -race -v```\r\n\r\n2 lines of code:\r\nhttps://go.dev/play/p/v-LC84qDHo4\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""os/exec""\r\n)\r\n\r\nfunc main() {\r\n\tcmd := exec.Command(""echo"", ""test"")\r\n\t_ = cmd.Start()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful build and debug\r\n\r\n### What did you see instead?\r\n\r\n<details><summary>go 1.18.5 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\ntest\r\n# test\r\nruntime.fatalthrow: nosplit stack overflow\r\n\t792\tassumed on entry to syscall.ptrace<1> (nosplit)\r\n\t664\tafter syscall.ptrace<1> (nosplit) uses 128\r\n\t456\tafter syscall.ptrace1<1> (nosplit) uses 208\r\n\t264\tafter syscall.syscall6<1> (nosplit) uses 192\r\n\t232\tafter runtime.entersyscall<1> (nosplit) uses 32\r\n\t168\tafter runtime.reentersyscall<1> (nosplit) uses 64\r\n\t136\tafter runtime.save<1> (nosplit) uses 32\r\n\t104\tafter runtime.badctxt<1> (nosplit) uses 32\r\n\t56\tafter runtime.throw<1> (nosplit) uses 48\r\n\t-8\tafter runtime.fatalthrow<1> (nosplit) uses 64\r\n</pre></details>\r\n\r\n<details><summary>go 1.19 Output</summary><br><pre>\r\n$ go build  -gcflags ""all=-N -l"" -race -v\r\nunicode/utf8\r\nmath/bits\r\ninternal/itoa\r\ninternal/unsafeheader\r\ninternal/goos\r\ninternal/goarch\r\nunicode\r\ninternal/goexperiment\r\nruntime/internal/math\r\nruntime/internal/sys\r\ninternal/abi\r\nsync/atomic\r\ninternal/cpu\r\nmath\r\nruntime/internal/atomic\r\ninternal/bytealg\r\nruntime\r\ninternal/reflectlite\r\ninternal/race\r\nsync\r\ninternal/testlog\r\nerrors\r\nsort\r\ninternal/oserror\r\npath\r\nio\r\nstrconv\r\nsyscall\r\nbytes\r\nstrings\r\ninternal/syscall/execenv\r\ninternal/syscall/unix\r\ntime\r\nruntime/cgo\r\ncontext\r\nio/fs\r\ninternal/poll\r\nos\r\ninternal/godebug\r\npath/filepath\r\nos/exec\r\nruntime/race\r\ntest\r\n# test\r\nsyscall.ptrace: nosplit stack over 792 byte limit\r\nsyscall.ptrace<1>\r\n    grows 128 bytes, calls syscall.ptrace1<1>\r\n        grows 208 bytes, calls syscall.syscall6<1>\r\n            grows 192 bytes, calls runtime.entersyscall<1>\r\n                grows 32 bytes, calls runtime.reentersyscall<1>\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.casgstatus<1>\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.osyield<1>\r\n                            grows 32 bytes, calls runtime.usleep<0>\r\n                                grows 32 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    40 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        56 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            56 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.nanotime<1>\r\n                            grows 32 bytes, calls runtime.nanotime1<0>\r\n                                grows 48 bytes, calls runtime.libcCall<1>\r\n                                    grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                    56 bytes over limit\r\n                                    grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        72 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            72 bytes over limit\r\n                        grows 80 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                    grows 64 bytes, calls runtime.save<1>\r\n                        grows 32 bytes, calls runtime.badctxt<1>\r\n                            grows 32 bytes, calls runtime.throw<1>\r\n                                grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                    grows 64 bytes, calls runtime.systemstack<0>\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                            grows 0 bytes, calls runtime.abort<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n                                        grows 16 bytes, calls indirect\r\n                                            grows 0 bytes, calls runtime.morestack<0>\r\n                                            24 bytes over limit\r\n                                        grows 16 bytes, calls runtime.save_g<0>\r\n                                        24 bytes over limit\r\n            grows 192 bytes, calls runtime.exitsyscall<1>\r\n                grows 64 bytes, calls runtime.exitsyscallfast<1>\r\n                    grows 80 bytes, calls runtime.wirep<1>\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                        grows 64 bytes, calls runtime.throw<1>\r\n                            grows 48 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                            grows 48 bytes, calls runtime.fatalthrow<1>\r\n                                grows 64 bytes, calls runtime.systemstack<0>\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.abort<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        72 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    72 bytes over limit\r\n                grows 64 bytes, calls runtime.casgstatus<1>\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.osyield<1>\r\n                        grows 32 bytes, calls runtime.usleep<0>\r\n                            grows 32 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                8 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    24 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        24 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.nanotime<1>\r\n                        grows 32 bytes, calls runtime.nanotime1<0>\r\n                            grows 48 bytes, calls runtime.libcCall<1>\r\n                                grows 64 bytes, calls runtime.(*guintptr).set<1>\r\n                                24 bytes over limit\r\n                                grows 64 bytes, calls runtime.asmcgocall<0>\r\n                                    grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                        grows 0 bytes, calls runtime.abort<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                                    grows 16 bytes, calls runtime.save_g<0>\r\n                                    40 bytes over limit\r\n                                    grows 16 bytes, calls indirect\r\n                                        grows 0 bytes, calls runtime.morestack<0>\r\n                                        40 bytes over limit\r\n                    grows 80 bytes, calls runtime.throw<1>\r\n                        grows 48 bytes, calls runtime.fatalthrow<1>\r\n                            grows 64 bytes, calls runtime.systemstack<0>\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.abort<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls gosave_systemstack_switch<21>\r\n                                    grows 0 bytes, calls runtime.abort<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n                                grows 16 bytes, calls indirect\r\n                                    grows 0 bytes, calls runtime.morestack<0>\r\n                                    8 bytes over limit\r\n                                grows 16 bytes, calls runtime.save_g<0>\r\n                                8 bytes over limit\r\n</pre></details>\r\n\r\nWithout `-race` everything compiles fine.","go build  -gcflags ""all=-N -l"" -race -v"
54238,"cmd/compile: Go 1.19 might make generic types slower<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt reproduces on the 1.19\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ksco/.cache/go-build""\r\nGOENV=""/home/ksco/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ksco/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ksco/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3292360144=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nplayground: https://go.dev/play/p/6UxOn6pftVs\r\n\r\nmain_test.go\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n1.19 should be similar to the 1.18 benchmark test, not much slower.\r\n\r\n\r\n### What did you see instead?\r\ngoversion: 1.19\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t71445846\t        16.49 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t32776173\t        36.30 ns/op\r\nPASS\r\n</pre>\r\n\r\ngoversion: 1.18\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t64931702\t        16.91 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t70497928\t        17.01 ns/op\r\nPASS\r\n</pre>\r\n\r\nThe assembly generated by 1.19 is found to have more\r\n\r\n`main..dict.add[int](SB), AX` \r\n`main..dict.add[string](SB), AX`\r\n\r\nThese lines are directly inlined in 1.18.\r\n\r\n/cc @ianlancetaylor\r\n",Performance|NeedsInvestigation|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.19 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt reproduces on the 1.19\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""on""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ksco/.cache/go-build""\r\nGOENV=""/home/ksco/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ksco/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ksco/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.19""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3292360144=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\nplayground: https://go.dev/play/p/6UxOn6pftVs\r\n\r\nmain_test.go\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc addInt(a, b int) int {\r\n\treturn a + b\r\n}\r\n\r\nfunc addString(a, b string) string {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithoutGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = addInt(1, 2)\r\n\t\t_ = addString(""foo"", ""bar"")\r\n\t}\r\n}\r\n\r\ntype Addable interface {\r\n\tint | string\r\n}\r\n\r\nfunc add[T Addable](a, b T) T {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = add(1, 2)\r\n\t\t_ = add(""foo"", ""bar"")\r\n\t}\r\n}\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n1.19 should be similar to the 1.18 benchmark test, not much slower.\r\n\r\n\r\n### What did you see instead?\r\ngoversion: 1.19\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t71445846\t        16.49 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t32776173\t        36.30 ns/op\r\nPASS\r\n</pre>\r\n\r\ngoversion: 1.18\r\n<pre>\r\ngoos: linux\r\ngoarch: amd64\r\npkg: generics/ch13\r\ncpu: AMD Ryzen 7 5800H with Radeon Graphics         \r\nBenchmarkWithoutGenerics\r\nBenchmarkWithoutGenerics-16    \t64931702\t        16.91 ns/op\r\nBenchmarkWithGenerics\r\nBenchmarkWithGenerics-16       \t70497928\t        17.01 ns/op\r\nPASS\r\n</pre>\r\n\r\nThe assembly generated by 1.19 is found to have more\r\n\r\n`main..dict.add[int](SB), AX` \r\n`main..dict.add[string](SB), AX`\r\n\r\nThese lines are directly inlined in 1.18.\r\n\r\n/cc @ianlancetaylor\r\n","Go\r\npackage main\r\n\r\nimport (\r\n\t""testing""\r\n)\r\n\r\nfunc addInt(a, b int) int {\r\n\treturn a + b\r\n}\r\n\r\nfunc addString(a, b string) string {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithoutGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = addInt(1, 2)\r\n\t\t_ = addString(""foo"", ""bar"")\r\n\t}\r\n}\r\n\r\ntype Addable interface {\r\n\tint | string\r\n}\r\n\r\nfunc add[T Addable](a, b T) T {\r\n\treturn a + b\r\n}\r\n\r\nfunc BenchmarkWithGenerics(b *testing.B) {\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\t_ = add(1, 2)\r\n\t\t_ = add(""foo"", ""bar"")\r\n\t}\r\n}\r\n"
54237,"x/time/rate: add Sometimes typeThis proposal makes acting on simple rate throttlers more ergonomic. It adds an API that we use internally (I'm not the author). Adding it will ease open-sourcing a project I'm involved in.\r\n\r\n\r\n\r\n// 2022-08-21 Edited: moved from ""x/time/rate"".Sometimes -> ""x/time/some"".Times based on feedback.\r\n// 2022-08-31 Edited: moved back to ""x/time/rate"".Sometimes.\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,Sajmani,"This proposal makes acting on simple rate throttlers more ergonomic. It adds an API that we use internally (I'm not the author). Adding it will ease open-sourcing a project I'm involved in.\r\n\r\n```go\r\npackage rate // import ""golang.org/x/time/rate""\r\n\r\nimport ""time""\r\n\r\n// Sometimes performs an action occasionally.\r\n// The public fields govern the behavior of Do, which performs the action.\r\n// A zero Sometimes performs the action exactly once.\r\n//\r\n// C++ users familiar with the glog package can use this mechanism instead\r\n// of LOG_FIRST_N, LOG_EVERY_N, LOG_EVERY_N_SEC:\r\n//\r\n//\tvar sometimes = rate.Sometimes{First: 3, Interval: 10*time.Second}\r\n//\tfunc Spammy() {\r\n//\t  sometimes.Do(func() { log.Info(""here I am!"") })\r\n//\t}\r\ntype Sometimes struct {\r\n\tFirst    int           // if non-zero, the first N calls to Do will run f.\r\n\tEvery    int           // if non-zero, every Nth call to Do will run f.\r\n\tInterval time.Duration // if non-zero and Interval has elapsed since f's last run, Do will run f.\r\n}\r\n\r\n// Do runs f, as governed by First, Every, and Interval.\r\n//\r\n// The model is is a union of filters. The first call to Do\r\n// always runs f. Subsequent calls run f if allowed by any\r\n// one of the Sometimes fields.\r\n//\r\n// If Do is called multiple times simultaneously, calls will block\r\n// and run serially. It is therefore intended for lightweight operations.\r\n//\r\n// Because a call to Do may block until f returns, if f causes Do\r\n// to be called, it will deadlock.\r\nfunc (s *Sometimes) Do(f func())\r\n```\r\n\r\n// 2022-08-21 Edited: moved from ""x/time/rate"".Sometimes -> ""x/time/some"".Times based on feedback.\r\n// 2022-08-31 Edited: moved back to ""x/time/rate"".Sometimes.\r\n","go\r\npackage rate // import ""golang.org/x/time/rate""\r\n\r\nimport ""time""\r\n\r\n// Sometimes performs an action occasionally.\r\n// The public fields govern the behavior of Do, which performs the action.\r\n// A zero Sometimes performs the action exactly once.\r\n//\r\n// C++ users familiar with the glog package can use this mechanism instead\r\n// of LOG_FIRST_N, LOG_EVERY_N, LOG_EVERY_N_SEC:\r\n//\r\n//\tvar sometimes = rate.Sometimes{First: 3, Interval: 10*time.Second}\r\n//\tfunc Spammy() {\r\n//\t  sometimes.Do(func() { log.Info(""here I am!"") })\r\n//\t}\r\ntype Sometimes struct {\r\n\tFirst    int           // if non-zero, the first N calls to Do will run f.\r\n\tEvery    int           // if non-zero, every Nth call to Do will run f.\r\n\tInterval time.Duration // if non-zero and Interval has elapsed since f's last run, Do will run f.\r\n}\r\n\r\n// Do runs f, as governed by First, Every, and Interval.\r\n//\r\n// The model is is a union of filters. The first call to Do\r\n// always runs f. Subsequent calls run f if allowed by any\r\n// one of the Sometimes fields.\r\n//\r\n// If Do is called multiple times simultaneously, calls will block\r\n// and run serially. It is therefore intended for lightweight operations.\r\n//\r\n// Because a call to Do may block until f returns, if f causes Do\r\n// to be called, it will deadlock.\r\nfunc (s *Sometimes) Do(f func())\r\n"
54219,"cmd/go: internal/mmap/mmap.go:30:9: undefined: mmapFile on js-wasm<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.4 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, on 2 different operating systems\r\n\r\n- FreeBSD 13.1 with Go 1.18.4 from packages\r\n- Arch Linux with Go 1.19 from packages - the error messages are exactly the same, didn't copy output twice.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""freebsd""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""freebsd""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go118""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go118/pkg/tool/freebsd_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3287959224=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n# cmd/go/internal/mmap\r\ncmd/go/internal/mmap/mmap.go:30:9: undefined: mmapFile\r\n\r\nBuild(s) failed.\r\n```\r\n",help wanted|NeedsFix|FrozenDueToAge|GoCommand|arch-wasm|OS-JS,tklauser,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.4 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, on 2 different operating systems\r\n\r\n- FreeBSD 13.1 with Go 1.18.4 from packages\r\n- Arch Linux with Go 1.19 from packages - the error messages are exactly the same, didn't copy output twice.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/root/.cache/go-build""\r\nGOENV=""/root/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""freebsd""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/root/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""freebsd""\r\nGOPATH=""/root/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go118""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go118/pkg/tool/freebsd_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""cc""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3287959224=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```bash\r\n> git describe --tags --long --all\r\ntags/go1.19-0-g43456202a1\r\n\r\n> ./buildall.bash '(freebsd|linux|js)-(amd64|arm64|wasm)'\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nBuilding Go cmd/dist using /usr/local/go118. (go1.18.4 freebsd/amd64)\r\nBuilding Go toolchain1 using /usr/local/go118.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for freebsd/amd64.\r\n---\r\nInstalled Go for freebsd/amd64 in /home/pawel/.go\r\nInstalled commands in /home/pawel/.go/bin\r\n\r\n### Building linux-amd64\r\n\r\n### Building linux-arm64\r\n\r\n### Building freebsd-amd64\r\n\r\n### Building freebsd-arm64\r\n\r\n### Building js-wasm\r\n# cmd/go/internal/mmap\r\ncmd/go/internal/mmap/mmap.go:30:9: undefined: mmapFile\r\n\r\nBuild(s) failed.\r\n```\r\n",bash\r\n> git describe --tags --long --all\r\ntags/go1.19-0-g43456202a1\r\n\r\n> ./buildall.bash '(freebsd|linux|js)-(amd64|arm64|wasm)'\r\n
54105,"cmd/pprof: graphviz node names are funny with genericsGo 1.18.3.\r\n\r\nNot sure what I expect when I use `go tool pprof's web mode to see the graphviz SVG output on a node using generics, but not this:\r\n\r\n<img width=""335"" alt=""Screen Shot 2022-07-27 at 6 25 02 PM"" src=""https://user-images.githubusercontent.com/2621/181400334-4871be6b-e57b-468e-9b53-2525a9df941b.png"">\r\n\r\nEither without the newlines, or with the concrete types (if/when available)?\r\n\r\nFWIW, that's from:\r\n\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,prattmic,"Go 1.18.3.\r\n\r\nNot sure what I expect when I use `go tool pprof's web mode to see the graphviz SVG output on a node using generics, but not this:\r\n\r\n<img width=""335"" alt=""Screen Shot 2022-07-27 at 6 25 02 PM"" src=""https://user-images.githubusercontent.com/2621/181400334-4871be6b-e57b-468e-9b53-2525a9df941b.png"">\r\n\r\nEither without the newlines, or with the concrete types (if/when available)?\r\n\r\nFWIW, that's from:\r\n\r\n```go\r\n// Set populates an entry in a map, making the map if necessary.\r\n//\r\n// That is, it assigns (*m)[k] = v, making *m if it was nil.\r\nfunc Set[K comparable, V any, T ~map[K]V](m *T, k K, v V) {\r\n\tif *m == nil {\r\n\t\t*m = make(map[K]V)\r\n\t}\r\n\t(*m)[k] = v\r\n}\r\n```\r\n","go\r\n// Set populates an entry in a map, making the map if necessary.\r\n//\r\n// That is, it assigns (*m)[k] = v, making *m if it was nil.\r\nfunc Set[K comparable, V any, T ~map[K]V](m *T, k K, v V) {\r\n\tif *m == nil {\r\n\t\t*m = make(map[K]V)\r\n\t}\r\n\t(*m)[k] = v\r\n}\r\n"
53958,"runtime/cgo: C.CString causes index out of range when parameter is too long<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNot sure, only tested on go1.18.3 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hoyhbx/.cache/go-build""\r\nGOENV=""/home/hoyhbx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hoyhbx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hoyhbx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org/,direct""\r\nGOROOT=""/home/hoyhbx/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hoyhbx/.local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build756945598=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nWe tried to build a go function that utilizes a k8s function to parse quantites. Then, we wanted to call the go function we built from C code to test whether it would work. However, we found that when the number we parsed had a very large absolute value (e.g. `-92743e6047801799`), the go function crashed with index out of range. The index out of range happens on the line `return C.CString(q.AsDec().String())`, we suspect this is caused because the parameter of the `C.CString` is too long.\r\n\r\n[reproduce.zip](https://github.com/golang/go/files/9144211/reproduce.zip)\r\n\r\nThe Go file and C file we created are as follows. Note that `k8sutil.h` we used was generated by cmd/cgo.\r\n\r\n<details><summary>Go file</summary><br>\r\n\r\n\r\n</details>\r\n\r\n<details><summary>C file</summary><br>\r\n\r\n\r\n</details>\r\n\r\nWe compiled the code by running the following commands:\r\n\r\n\r\nThen, we ran the program by running `./test`.\r\n\r\n### What did you expect to see?\r\nWe expected to see the long string gets returned correctly and the program does not crash.\r\n\r\n### What did you see instead?\r\nThe program crashed with the following error:\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNot sure, only tested on go1.18.3 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/hoyhbx/.cache/go-build""\r\nGOENV=""/home/hoyhbx/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/hoyhbx/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/hoyhbx/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org/,direct""\r\nGOROOT=""/home/hoyhbx/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/hoyhbx/.local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build756945598=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nWe tried to build a go function that utilizes a k8s function to parse quantites. Then, we wanted to call the go function we built from C code to test whether it would work. However, we found that when the number we parsed had a very large absolute value (e.g. `-92743e6047801799`), the go function crashed with index out of range. The index out of range happens on the line `return C.CString(q.AsDec().String())`, we suspect this is caused because the parameter of the `C.CString` is too long.\r\n\r\n[reproduce.zip](https://github.com/golang/go/files/9144211/reproduce.zip)\r\n\r\nThe Go file and C file we created are as follows. Note that `k8sutil.h` we used was generated by cmd/cgo.\r\n\r\n<details><summary>Go file</summary><br>\r\n\r\n```go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""k8s.io/apimachinery/pkg/api/resource""\r\n)\r\n\r\n//export parse\r\nfunc parse(valuePtr *C.char) *C.char {\r\n\tvalue := C.GoString(valuePtr)\r\n\tq, err := resource.ParseQuantity(value)\r\n\tif err != nil {\r\n\t\treturn C.CString(""INVALID"")\r\n\t}\r\n\treturn C.CString(q.AsDec().String())\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, world."")\r\n}\r\n\r\n```\r\n</details>\r\n\r\n<details><summary>C file</summary><br>\r\n\r\n```c\r\n#include <stdio.h>\r\n#include ""k8sutil.h""\r\n\r\nint main(){\r\n    char *name = ""-92743e6047801799"";\r\n    printf(parse(name));\r\n    return 0;\r\n}\r\n```\r\n</details>\r\n\r\nWe compiled the code by running the following commands:\r\n```shell\r\ngo build -buildmode=c-shared -o k8sutil.so k8sutil.go\r\ngcc test.c -o test ./k8sutil.so\r\n```\r\n\r\nThen, we ran the program by running `./test`.\r\n\r\n### What did you expect to see?\r\nWe expected to see the long string gets returned correctly and the program does not crash.\r\n\r\n### What did you see instead?\r\nThe program crashed with the following error:\r\n\r\n```shell\r\npanic: runtime error: index out of range [1752834508] with length 1073741824\r\n\r\ngoroutine 17 [running, locked to thread]:\r\nmain._Cfunc_CString({0xc000680000, 0x687a21cc})\r\n        _cgo_gotypes.go:49 +0xab\r\nmain.parse(0x0?)\r\n        /home/hoyhbx/k8sutil.go:18 +0xba\r\nAborted (core dumped)\r\n```","go\r\npackage main\r\n\r\nimport ""C""\r\nimport (\r\n\t""fmt""\r\n\t""k8s.io/apimachinery/pkg/api/resource""\r\n)\r\n\r\n//export parse\r\nfunc parse(valuePtr *C.char) *C.char {\r\n\tvalue := C.GoString(valuePtr)\r\n\tq, err := resource.ParseQuantity(value)\r\n\tif err != nil {\r\n\t\treturn C.CString(""INVALID"")\r\n\t}\r\n\treturn C.CString(q.AsDec().String())\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(""Hello, world."")\r\n}\r\n\r\n"
53856,"cmd/go: buildmode is not set in build settings<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 18.4\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/capnspacehook/.cache/go-build""\r\nGOENV=""/home/capnspacehook/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/capnspacehook/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/capnspacehook/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4110434964=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```sh\r\ngo build -o hello hello.go\r\ngo version -m hello\r\ngo build -buildmode pie -o hello-pie hello.go\r\ngo version -m hello-pie\r\n```\r\n\r\nhello.go:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=exe\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=pie\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\nI expected to see the `-buildmode` flag in the build settings. I can see that it is not added here: https://github.com/golang/go/blob/f956941b0f5a5a841827bd3e84401d32916bb73e/src/cmd/go/internal/load/pkg.go#L2349",NeedsFix|FrozenDueToAge|GoCommand,capnspacehook,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 18.4\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/capnspacehook/.cache/go-build""\r\nGOENV=""/home/capnspacehook/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/capnspacehook/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/capnspacehook/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.4""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v3""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4110434964=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```sh\r\ngo build -o hello hello.go\r\ngo version -m hello\r\ngo build -buildmode pie -o hello-pie hello.go\r\ngo version -m hello-pie\r\n```\r\n\r\nhello.go:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n        fmt.Println(""yo"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=exe\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   -buildmode=pie\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nhello: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n\r\nhello-pie: go1.18.4\r\n        path    command-line-arguments\r\n        build   -compiler=gc\r\n        build   CGO_ENABLED=1\r\n        build   CGO_CFLAGS=\r\n        build   CGO_CPPFLAGS=\r\n        build   CGO_CXXFLAGS=\r\n        build   CGO_LDFLAGS=\r\n        build   GOARCH=amd64\r\n        build   GOOS=linux\r\n        build   GOAMD64=v3\r\n```\r\n\r\nI expected to see the `-buildmode` flag in the build settings. I can see that it is not added here: https://github.com/golang/go/blob/f956941b0f5a5a841827bd3e84401d32916bb73e/src/cmd/go/internal/load/pkg.go#L2349","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\nfunc main() {\r\n        fmt.Println(""yo"")\r\n}\r\n"
53741,"x/vuln/cmd/govulncheck: CVEs are not detected in GOPATH modeReopening #51591 because the issue is still present.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.11 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/tmp/.gocache""\r\nGOENV=""/Users/rittneje/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/rittneje/test/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/rittneje/test""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/rittneje/go1.17.11""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/rittneje/go1.17.11/pkg/tool/darwin_amd64""\r\nGOVCS=""REDACTED""\r\nGOVERSION=""go1.17.11""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/kf/kr7_s3xx0l12zbj3jrn082hmzy5gvy/T/go-build1950822096=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule cvetest\r\n\r\ngo 1.16\r\n\r\nrequire (\r\n\tgolang.org/x/text v0.3.0\r\n)\r\n```\r\n\r\nmain.go\r\n\r\n\r\nThese files are located under $GOPATH/src/cvetest.\r\n\r\nI then ran `govulncheck cvetest` in $GOPATH.\r\n\r\n### What did you expect to see?\r\n\r\nEither it should report the vulnerability, or at least it should fail with an appropriate error message if this mode of operation is not supported.\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nFound 1 known vulnerability.\r\n-------------------------------------------------------\r\n\r\nGO-2021-0113\r\nDue to improper index calculation, an incorrectly formatted language tag can cause Parse\r\nto panic via an out of bounds read. If Parse is used to process untrusted user inputs,\r\nthis may be used as a vector for a denial of service attack.\r\n\r\nCall stacks in your code:\r\n cvetest.main calls golang.org/x/text/language.Parse\r\n\r\nFound in:  golang.org/x/text/language@v0.3.0\r\nFixed in:  golang.org/x/text/language@v0.3.7\r\nMore info: https://pkg.go.dev/vuln/GO-2021-0113\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nNo vulnerabilities found.\r\n```\r\n\r\nIf I run the same command in $GOPATH/src/cvetest then it works.",WaitingForInfo|NeedsFix|FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"Reopening #51591 because the issue is still present.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.11 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/tmp/.gocache""\r\nGOENV=""/Users/rittneje/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/rittneje/test/pkg/mod""\r\nGONOPROXY=""REDACTED""\r\nGONOSUMDB=""REDACTED""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/rittneje/test""\r\nGOPRIVATE=""REDACTED""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/Users/rittneje/go1.17.11""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/rittneje/go1.17.11/pkg/tool/darwin_amd64""\r\nGOVCS=""REDACTED""\r\nGOVERSION=""go1.17.11""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/kf/kr7_s3xx0l12zbj3jrn082hmzy5gvy/T/go-build1950822096=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ngo.mod\r\n```\r\nmodule cvetest\r\n\r\ngo 1.16\r\n\r\nrequire (\r\n\tgolang.org/x/text v0.3.0\r\n)\r\n```\r\n\r\nmain.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/text/language""\r\n)\r\n\r\nfunc main() {\r\n\tlanguage.Parse("""")\r\n}\r\n```\r\n\r\nThese files are located under $GOPATH/src/cvetest.\r\n\r\nI then ran `govulncheck cvetest` in $GOPATH.\r\n\r\n### What did you expect to see?\r\n\r\nEither it should report the vulnerability, or at least it should fail with an appropriate error message if this mode of operation is not supported.\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nFound 1 known vulnerability.\r\n-------------------------------------------------------\r\n\r\nGO-2021-0113\r\nDue to improper index calculation, an incorrectly formatted language tag can cause Parse\r\nto panic via an out of bounds read. If Parse is used to process untrusted user inputs,\r\nthis may be used as a vector for a denial of service attack.\r\n\r\nCall stacks in your code:\r\n cvetest.main calls golang.org/x/text/language.Parse\r\n\r\nFound in:  golang.org/x/text/language@v0.3.0\r\nFixed in:  golang.org/x/text/language@v0.3.7\r\nMore info: https://pkg.go.dev/vuln/GO-2021-0113\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nScanning for dependencies with known vulnerabilities...\r\nNo vulnerabilities found.\r\n```\r\n\r\nIf I run the same command in $GOPATH/src/cvetest then it works.","go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/text/language""\r\n)\r\n\r\nfunc main() {\r\n\tlanguage.Parse("""")\r\n}\r\n"
53692,"cmd/compile: inconsistent error messages based on type constraints### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip as of today\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sethvargo/Library/Caches/go-build""\r\nGOENV=""/Users/sethvargo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sethvargo/Development/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sethvargo/Development/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build4094322222=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI _suspect_ the root cause of my actual issue is https://github.com/golang/go/issues/41176, but it would be great if @ianlancetaylor can confirm for me :smile:.\r\n\r\nPlayground link for the code: https://go.dev/play/p/RqzqQxNapkw. Note this code does not compile.\r\n\r\nCode:\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAs shown in the comments, the error messages are all subtly different depending on the type declarations on the function. I would expect the same error messages here.\r\n\r\n\r\n### What did you see instead?\r\n\r\nDifferent error messages.\r\n\r\n\r\n### Aside\r\n\r\nAs an aside, it's unclear to me what the ""correct"" authorship is here. I really appreciate Go's ""do one thing"", but there seems to be multiple ways to define generics, all of which are subtly different with unknown consequences.",NeedsInvestigation|FrozenDueToAge|TypeInference|compiler/runtime,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, including tip as of today\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""on""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/sethvargo/Library/Caches/go-build""\r\nGOENV=""/Users/sethvargo/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/sethvargo/Development/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/sethvargo/Development/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cp/qb9vbbkx4w36f6dclng481br00gy5b/T/go-build4094322222=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI _suspect_ the root cause of my actual issue is https://github.com/golang/go/issues/41176, but it would be great if @ianlancetaylor can confirm for me :smile:.\r\n\r\nPlayground link for the code: https://go.dev/play/p/RqzqQxNapkw. Note this code does not compile.\r\n\r\nCode:\r\n\r\n```go\r\npackage main\r\n\r\n// Cache is a generic cache implementation.\r\ntype Cache[K comparable, V any] interface {\r\n\tGet(K)\r\n\tSet(K, V)\r\n}\r\n\r\n// LRU is a cache.\r\ntype LRU[K comparable, V any] struct{}\r\n\r\nfunc (l *LRU[K, V]) Get(key K)        {}\r\nfunc (l *LRU[K, V]) Set(key K, val V) {}\r\n\r\n// WithLocking1 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking1[K comparable, V any, C Cache[K, V]](cache C) {}\r\n\r\n// WithLocking2 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking2[K comparable, V any](cache Cache[K, V]) {}\r\n\r\n// WithLocking3 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking3[K comparable](cache Cache[K, any]) {}\r\n\r\nfunc main() {\r\n\tvar lru LRU[string, int]\r\n\r\n\tWithLocking1[string, int](&lru) // ok\r\n\tWithLocking1[string](&lru)      // nok: cannot infer V\r\n\tWithLocking1(&lru)              // nok: cannot infer K\r\n\r\n\tWithLocking2[string, int](&lru) // ok\r\n\tWithLocking2[string](&lru)      // nok: does not match Cache[string, V]\r\n\tWithLocking2(&lru)              // nok: cannot infer K and V\r\n\r\n\tWithLocking3[string](&lru) // nok: does not implement Cache[string, any] (wrong type for method Set)\r\n\t                           //   have Set(key string, val int)\r\n\t                           //   want Set(string, any)\r\n\tWithLocking3(&lru) // nok: cannot infer K\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAs shown in the comments, the error messages are all subtly different depending on the type declarations on the function. I would expect the same error messages here.\r\n\r\n\r\n### What did you see instead?\r\n\r\nDifferent error messages.\r\n\r\n\r\n### Aside\r\n\r\nAs an aside, it's unclear to me what the ""correct"" authorship is here. I really appreciate Go's ""do one thing"", but there seems to be multiple ways to define generics, all of which are subtly different with unknown consequences.","go\r\npackage main\r\n\r\n// Cache is a generic cache implementation.\r\ntype Cache[K comparable, V any] interface {\r\n\tGet(K)\r\n\tSet(K, V)\r\n}\r\n\r\n// LRU is a cache.\r\ntype LRU[K comparable, V any] struct{}\r\n\r\nfunc (l *LRU[K, V]) Get(key K)        {}\r\nfunc (l *LRU[K, V]) Set(key K, val V) {}\r\n\r\n// WithLocking1 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking1[K comparable, V any, C Cache[K, V]](cache C) {}\r\n\r\n// WithLocking2 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking2[K comparable, V any](cache Cache[K, V]) {}\r\n\r\n// WithLocking3 returns a cache that wraps operations in a mutex.\r\nfunc WithLocking3[K comparable](cache Cache[K, any]) {}\r\n\r\nfunc main() {\r\n\tvar lru LRU[string, int]\r\n\r\n\tWithLocking1[string, int](&lru) // ok\r\n\tWithLocking1[string](&lru)      // nok: cannot infer V\r\n\tWithLocking1(&lru)              // nok: cannot infer K\r\n\r\n\tWithLocking2[string, int](&lru) // ok\r\n\tWithLocking2[string](&lru)      // nok: does not match Cache[string, V]\r\n\tWithLocking2(&lru)              // nok: cannot infer K and V\r\n\r\n\tWithLocking3[string](&lru) // nok: does not implement Cache[string, any] (wrong type for method Set)\r\n\t                           //   have Set(key string, val int)\r\n\t                           //   want Set(string, any)\r\n\tWithLocking3(&lru) // nok: cannot infer K\r\n}\r\n"
53650,spec: constraint type inference should proceed even if an individual unification step failsEdit: See https://github.com/golang/go/issues/53650#issuecomment-1334495063 for a summary of the problem.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 windows/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCompile success\r\n\r\n### What did you see instead?\r\n\r\nerror:  \r\n```\r\nTBase does not match int\r\nTBase does not match int\r\n```\r\n,Documentation|NeedsFix|FrozenDueToAge|TypeInference|compiler/runtime,griesemer,"Edit: See https://github.com/golang/go/issues/53650#issuecomment-1334495063 for a summary of the problem.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 windows/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n```go\r\n\r\ntype BaseT interface {\r\n\tType1 | Type2\r\n}\r\ntype BaseType int\r\ntype Type1 BaseType\r\ntype Type2 BaseType // float64\r\n\r\ntype ValueT[T BaseT] struct {\r\n\tA1 T\r\n}\r\n\r\nfunc NewType1() *ValueT[Type1] {\r\n\tr := NewT[Type1]()\r\n\treturn r\r\n}\r\nfunc NewType2() *ValueT[Type2] {\r\n\tr := NewT[Type2]()\r\n\treturn r\r\n}\r\n\r\nfunc NewT[TBase BaseT, TVal ValueT[TBase]]() *TVal {\r\n\tret := TVal{}\r\n\treturn &ret\r\n}\r\nfunc TestGoType(t *testing.T) {\r\n\tr1 := NewType1()\r\n\tr2 := NewType2()\r\n\tt.Log(r1, r2)\r\n\tt.Log(reflect.TypeOf(r1), reflect.TypeOf(r2))\r\n\tfooT1(r1.A1)\r\n\tfooT2(r2.A1)\r\n}\r\n\r\nfunc fooT1(t1 Type1) {\r\n\r\n}\r\nfunc fooT2(t2 Type2) {\r\n\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCompile success\r\n\r\n### What did you see instead?\r\n\r\nerror:  \r\n```\r\nTBase does not match int\r\nTBase does not match int\r\n```\r\n","go\r\n\r\ntype BaseT interface {\r\n\tType1 | Type2\r\n}\r\ntype BaseType int\r\ntype Type1 BaseType\r\ntype Type2 BaseType // float64\r\n\r\ntype ValueT[T BaseT] struct {\r\n\tA1 T\r\n}\r\n\r\nfunc NewType1() *ValueT[Type1] {\r\n\tr := NewT[Type1]()\r\n\treturn r\r\n}\r\nfunc NewType2() *ValueT[Type2] {\r\n\tr := NewT[Type2]()\r\n\treturn r\r\n}\r\n\r\nfunc NewT[TBase BaseT, TVal ValueT[TBase]]() *TVal {\r\n\tret := TVal{}\r\n\treturn &ret\r\n}\r\nfunc TestGoType(t *testing.T) {\r\n\tr1 := NewType1()\r\n\tr2 := NewType2()\r\n\tt.Log(r1, r2)\r\n\tt.Log(reflect.TypeOf(r1), reflect.TypeOf(r2))\r\n\tfooT1(r1.A1)\r\n\tfooT2(r2.A1)\r\n}\r\n\r\nfunc fooT1(t1 Type1) {\r\n\r\n}\r\nfunc fooT2(t2 Type2) {\r\n\r\n}\r\n\r\n"
53569,"x/build/maintner/maintnerd: /logs endpoint fails to serve 304 successfully during long poll, ends up serving 502 insteadThe /logs endpoint supports long polling via `waitsizenot` parameter. To avoid being flagged as a timeout, it tries to serve a 304 in just under a minute (55 seconds specifically):\r\n\r\n\r\n\r\n_(Source: [x/build/maintner/maintnerd/gcslog/gcslog.go#243-253](https://cs.opensource.google/go/x/build/+/master:maintner/maintnerd/gcslog/gcslog.go;l=243-253;drc=14e3e09d6b1042c8c076c684ae2352962ded3591).)_\r\n\r\nI think this worked fine before, but in practice it seems not to work at all now. Instead it always serves a 502 after 60 seconds:\r\n\r\n```\r\n$ time curl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'\r\nHTTP/2 502 \r\ncontent-type: text/html; charset=UTF-8\r\nreferrer-policy: no-referrer\r\ncontent-length: 332\r\ndate: Mon, 27 Jun 2022 02:56:31 GMT\r\nalt-svc: h3="":443""; ma=2592000,h3-29="":443""; ma=2592000\r\n\r\n\r\n<html><head>\r\n<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">\r\n<title>502 Server Error</title>\r\n</head>\r\n<body text=#000000 bgcolor=#ffffff>\r\n<h1>Error: Server Error</h1>\r\n<h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>\r\n<h2></h2>\r\n</body></html>\r\ncurl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'  0.02s user 0.02s system 0% cpu 1:00.14 total\r\n```\r\n\r\nCan be reproduced during quiet times (i.e., need 60 seconds+ of inactivity) by manually computing the current corpus size, or by running [maintwatch](https://pkg.go.dev/golang.org/x/build/maintner/maintwatch).\r\n\r\nMaybe 55 seconds has become too short because of new internal timeouts on the load balancing side. Can trivially try something like 45-50 or 20-25 seconds.\r\n\r\nThis isn't a big deal for functionality because most callers retry both 502 no differently than a correctly served 304, but adds some noise and inefficiency.",Builders|NeedsFix|FrozenDueToAge,dmitshur,"The /logs endpoint supports long polling via `waitsizenot` parameter. To avoid being flagged as a timeout, it tries to serve a 304 in just under a minute (55 seconds specifically):\r\n\r\n```Go\r\n// Return a 304 if there's no activity in just under a minute.\r\n// This keeps some occasional activity on the TCP connection\r\n// so we (and any proxies) know it's alive, and can fit\r\n// within reason read/write deadlines on either side.\r\nctx, cancel := context.WithTimeout(r.Context(), 55*time.Second)\r\ndefer cancel()\r\nchanged := gl.waitSizeNot(ctx, oldSize)\r\nif !changed {\r\n\tw.WriteHeader(http.StatusNotModified)\r\n\treturn\r\n}\r\n```\r\n\r\n_(Source: [x/build/maintner/maintnerd/gcslog/gcslog.go#243-253](https://cs.opensource.google/go/x/build/+/master:maintner/maintnerd/gcslog/gcslog.go;l=243-253;drc=14e3e09d6b1042c8c076c684ae2352962ded3591).)_\r\n\r\nI think this worked fine before, but in practice it seems not to work at all now. Instead it always serves a 502 after 60 seconds:\r\n\r\n```\r\n$ time curl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'\r\nHTTP/2 502 \r\ncontent-type: text/html; charset=UTF-8\r\nreferrer-policy: no-referrer\r\ncontent-length: 332\r\ndate: Mon, 27 Jun 2022 02:56:31 GMT\r\nalt-svc: h3="":443""; ma=2592000,h3-29="":443""; ma=2592000\r\n\r\n\r\n<html><head>\r\n<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">\r\n<title>502 Server Error</title>\r\n</head>\r\n<body text=#000000 bgcolor=#ffffff>\r\n<h1>Error: Server Error</h1>\r\n<h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>\r\n<h2></h2>\r\n</body></html>\r\ncurl -i 'https://maintner.golang.org/logs?waitsizenot=2270415713'  0.02s user 0.02s system 0% cpu 1:00.14 total\r\n```\r\n\r\nCan be reproduced during quiet times (i.e., need 60 seconds+ of inactivity) by manually computing the current corpus size, or by running [maintwatch](https://pkg.go.dev/golang.org/x/build/maintner/maintwatch).\r\n\r\nMaybe 55 seconds has become too short because of new internal timeouts on the load balancing side. Can trivially try something like 45-50 or 20-25 seconds.\r\n\r\nThis isn't a big deal for functionality because most callers retry both 502 no differently than a correctly served 304, but adds some noise and inefficiency.","Go\r\n// Return a 304 if there's no activity in just under a minute.\r\n// This keeps some occasional activity on the TCP connection\r\n// so we (and any proxies) know it's alive, and can fit\r\n// within reason read/write deadlines on either side.\r\nctx, cancel := context.WithTimeout(r.Context(), 55*time.Second)\r\ndefer cancel()\r\nchanged := gl.waitSizeNot(ctx, oldSize)\r\nif !changed {\r\n\tw.WriteHeader(http.StatusNotModified)\r\n\treturn\r\n}\r\n"
53542,"runtime/metrics: data race detected in Read### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, still reproducible with 1.19beta1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cristian/Library/Caches/go-build""\r\nGOENV=""/Users/cristian/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cristian/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cristian/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/98/fgzhqvmx7x1d61fqsvw9cg9m0000gn/T/go-build1308397819=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.18.3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.18.3\r\nuname -v: Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101\r\nProductName:\tmacOS\r\nProductVersion:\t12.4\r\nBuildVersion:\t21F79\r\nlldb --version: lldb-1316.0.9.46\r\nApple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`runtime/metrics` says that ""It is safe to execute multiple Read calls concurrently"". However, running the following code with race detector enabled suggests a data race. Unsure whether this is a false positive (`metrics.Read` uses a semaphore lock).\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.\r\n\r\n### What did you see instead?\r\n\r\nData race detected.\r\n\r\n```\r\n$ go run -race main.go\r\nbytes allocated: 511392\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000100030 by goroutine 8:\r\n  runtime.evacuate_fast64()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_fast64.go:376 +0x3fc\r\n  runtime/metrics.runtime_readMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:563 +0xc0\r\n\r\nPrevious write at 0x00c000100030 by goroutine 7:\r\n  runtime.mapaccess2_faststr()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_faststr.go:108 +0x43c\r\n  runtime.initMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:67 +0x254\r\n\r\nGoroutine 8 (running) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n\r\nGoroutine 7 (finished) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n==================\r\nbytes allocated: 552264\r\nFound 1 data race(s)\r\nexit status 66\r\n```",NeedsFix|FrozenDueToAge|release-blocker,mknyszek|prattmic,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, still reproducible with 1.19beta1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cristian/Library/Caches/go-build""\r\nGOENV=""/Users/cristian/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cristian/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cristian/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.3/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.3/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/98/fgzhqvmx7x1d61fqsvw9cg9m0000gn/T/go-build1308397819=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.18.3 darwin/arm64\r\nGOROOT/bin/go tool compile -V: compile version go1.18.3\r\nuname -v: Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101\r\nProductName:\tmacOS\r\nProductVersion:\t12.4\r\nBuildVersion:\t21F79\r\nlldb --version: lldb-1316.0.9.46\r\nApple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`runtime/metrics` says that ""It is safe to execute multiple Read calls concurrently"". However, running the following code with race detector enabled suggests a data race. Unsure whether this is a false positive (`metrics.Read` uses a semaphore lock).\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""runtime/metrics""\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        var wg sync.WaitGroup\r\n\r\n        for i := 0; i < 2; i++ {\r\n                wg.Add(1)\r\n                go func() {\r\n                        sample := make([]metrics.Sample, 1)\r\n                        sample[0].Name = ""/gc/heap/allocs:bytes""\r\n                        metrics.Read(sample)\r\n                        fmt.Printf(""bytes allocated: %d\\n"", sample[0].Value.Uint64())\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo race detected.\r\n\r\n### What did you see instead?\r\n\r\nData race detected.\r\n\r\n```\r\n$ go run -race main.go\r\nbytes allocated: 511392\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000100030 by goroutine 8:\r\n  runtime.evacuate_fast64()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_fast64.go:376 +0x3fc\r\n  runtime/metrics.runtime_readMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:563 +0xc0\r\n\r\nPrevious write at 0x00c000100030 by goroutine 7:\r\n  runtime.mapaccess2_faststr()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/map_faststr.go:108 +0x43c\r\n  runtime.initMetrics()\r\n      /opt/homebrew/Cellar/go/1.18.3/libexec/src/runtime/metrics.go:67 +0x254\r\n\r\nGoroutine 8 (running) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n\r\nGoroutine 7 (finished) created at:\r\n  main.main()\r\n      /Users/cristian/Desktop/main.go:14 +0x50\r\n==================\r\nbytes allocated: 552264\r\nFound 1 data race(s)\r\nexit status 66\r\n```","go\r\npackage main\r\n\r\nimport (\r\n        ""fmt""\r\n        ""runtime/metrics""\r\n        ""sync""\r\n)\r\n\r\nfunc main() {\r\n        var wg sync.WaitGroup\r\n\r\n        for i := 0; i < 2; i++ {\r\n                wg.Add(1)\r\n                go func() {\r\n                        sample := make([]metrics.Sample, 1)\r\n                        sample[0].Name = ""/gc/heap/allocs:bytes""\r\n                        metrics.Read(sample)\r\n                        fmt.Printf(""bytes allocated: %d\\n"", sample[0].Value.Uint64())\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n}\r\n"
53473,"flag: UnquoteUsage checks for IsBoolFlag() method presence but doesn't actually call it### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nnot relevant (but apple silicon M1 macos)\r\n\r\n### What did you do?\r\n\r\nImplemented a generic set of flag extension and part of the generic includes:\r\n\r\n\r\nYet despite returning false for the non bool, flag.PrintDefaults through UnquoteUsage thinks all my types are booleans (don't require a `value`) and thus my usage output regressed from for instance\r\n\r\n```diff\r\n-  -loglevel value\r\n+  -loglevel\r\n         loglevel, one of [Debug Verbose Info Warning Error Critical Fatal]\r\n (default Info)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`value` still output\r\n\r\n### What did you see instead?\r\n\r\nnothing\r\n\r\nps: I can workaround by making the bool type special but it's unfortunate\r\n",NeedsFix|FrozenDueToAge,robpike,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nnot relevant (but apple silicon M1 macos)\r\n\r\n### What did you do?\r\n\r\nImplemented a generic set of flag extension and part of the generic includes:\r\n```golang\r\nfunc (d *DynValue[T]) IsBoolFlag() bool {\r\n\tvar v T\r\n\tswitch any(v).(type) {\r\n\tcase bool:\r\n\t\treturn true\r\n\tdefault:\r\n\t\treturn false\r\n\t}\r\n}\r\n```\r\n\r\nYet despite returning false for the non bool, flag.PrintDefaults through UnquoteUsage thinks all my types are booleans (don't require a `value`) and thus my usage output regressed from for instance\r\n\r\n```diff\r\n-  -loglevel value\r\n+  -loglevel\r\n         loglevel, one of [Debug Verbose Info Warning Error Critical Fatal]\r\n (default Info)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`value` still output\r\n\r\n### What did you see instead?\r\n\r\nnothing\r\n\r\nps: I can workaround by making the bool type special but it's unfortunate\r\n",golang\r\nfunc (d *DynValue[T]) IsBoolFlag() bool {\r\n\tvar v T\r\n\tswitch any(v).(type) {\r\n\tcase bool:\r\n\t\treturn true\r\n\tdefault:\r\n\t\treturn false\r\n\t}\r\n}\r\n
53472,"net/http: EOF returned from http.Transport### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitr/Library/Caches/go-build""\r\nGOENV=""/Users/mitr/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitr/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitr/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitr/Go/src/github.com/containers/image/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tp/yfcwvlb55vx8lkv5gppb43cm0000gn/T/go-build3737075247=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a HTTP server that reads the request, but (cleanly) closes the connection without producing any response:\r\n\r\n\r\n### What did you expect to see?\r\nAn error saying something about an unexpectedly closed connection.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n2022/06/21 02:28:30 127.0.0.1:64135: Accepted\r\n2022/06/21 02:28:30 127.0.0.1:64135: Read 96\r\n2022/06/21 02:28:30 127.0.0.1:64135: Closed\r\nres=(*http.Response)(nil), err=Get ""http://127.0.0.1:64134/"": EOF (&url.Error{Op:""Get"", URL:""http://127.0.0.1:64134/"", Err:(*errors.errorString)(0xc000098060)})\r\n```\r\ni.e. the error is `io.EOF`, which seems inconsistent with the official definition of that value:\r\n> Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.\r\n\r\n### Notes\r\nI appreciate that this might not be possible to change due to the compatibility promise.\r\n\r\nThe immediate cause is https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2092 ; if that returns `io.EOF`, it is wrapped in https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2109 , but later only unwrapped to become raw `io.EOF` again, with no logic anywhere to turn it into an \u201cthis was unexpected\u201d error.\r\n\r\n\r\n",NeedsInvestigation,neild,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/mitr/Library/Caches/go-build""\r\nGOENV=""/Users/mitr/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/mitr/Go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/mitr/Go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.3""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/mitr/Go/src/github.com/containers/image/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tp/yfcwvlb55vx8lkv5gppb43cm0000gn/T/go-build3737075247=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nGiven a HTTP server that reads the request, but (cleanly) closes the connection without producing any response:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""log""\r\n\t""net""\r\n\t""net/http""\r\n)\r\n\r\nfunc server(ln net.Listener) {\r\n\tfor {\r\n\t\tconn, err := ln.Accept()\r\n\t\tif err != nil {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlog.Printf(""%v: Accepted"", conn.RemoteAddr())\r\n\t\tvar buf [4096]byte          // Hopefully enough for a full header\r\n\t\tn, err := conn.Read(buf[:]) // Completely read and ignore the header\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Read %d"", conn.RemoteAddr(), n)\r\n\t\terr = conn.Close()\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Closed"", conn.RemoteAddr())\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tln, err := net.Listen(""tcp"", ""127.0.0.1:0"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tgo server(ln)\r\n\r\n\tres, err := http.Get(fmt.Sprintf(""http://%s/"", ln.Addr().String()))\r\n\tfmt.Printf(""res=%#v, err=%v (%#v)"", res, err, err)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nAn error saying something about an unexpectedly closed connection.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n2022/06/21 02:28:30 127.0.0.1:64135: Accepted\r\n2022/06/21 02:28:30 127.0.0.1:64135: Read 96\r\n2022/06/21 02:28:30 127.0.0.1:64135: Closed\r\nres=(*http.Response)(nil), err=Get ""http://127.0.0.1:64134/"": EOF (&url.Error{Op:""Get"", URL:""http://127.0.0.1:64134/"", Err:(*errors.errorString)(0xc000098060)})\r\n```\r\ni.e. the error is `io.EOF`, which seems inconsistent with the official definition of that value:\r\n> Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.\r\n\r\n### Notes\r\nI appreciate that this might not be possible to change due to the compatibility promise.\r\n\r\nThe immediate cause is https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2092 ; if that returns `io.EOF`, it is wrapped in https://github.com/golang/go/blob/3fcbfb07a82c5332e6b50cddba333af6e6e3e488/src/net/http/transport.go#L2109 , but later only unwrapped to become raw `io.EOF` again, with no logic anywhere to turn it into an \u201cthis was unexpected\u201d error.\r\n\r\n\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""log""\r\n\t""net""\r\n\t""net/http""\r\n)\r\n\r\nfunc server(ln net.Listener) {\r\n\tfor {\r\n\t\tconn, err := ln.Accept()\r\n\t\tif err != nil {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlog.Printf(""%v: Accepted"", conn.RemoteAddr())\r\n\t\tvar buf [4096]byte          // Hopefully enough for a full header\r\n\t\tn, err := conn.Read(buf[:]) // Completely read and ignore the header\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Read %d"", conn.RemoteAddr(), n)\r\n\t\terr = conn.Close()\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tlog.Printf(""%v: Closed"", conn.RemoteAddr())\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tln, err := net.Listen(""tcp"", ""127.0.0.1:0"")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tgo server(ln)\r\n\r\n\tres, err := http.Get(fmt.Sprintf(""http://%s/"", ln.Addr().String()))\r\n\tfmt.Printf(""res=%#v, err=%v (%#v)"", res, err, err)\r\n}\r\n"
53419,"cmd/compile: ambiguous selector with generic interface & embedded types<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\nhttps://go.dev/play/p/Jyws-pz9k5X\r\n\r\n\r\n### What did you expect to see?\r\nsuccessful compilation\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:26:10: ambiguous selector c.Concat\r\n\r\nGo build failed.\r\n```\r\n\r\nThe error is with the `Both` type (as if I remove it, the issue goes away). However on `Both`, `Concat` is not ambiguous. `Both` has it's own `Concat` method, and should not be trying to fall through to either of the embedded types.\r\n",NeedsFix|FrozenDueToAge|generics,mdempsky|griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=""amd64""\r\nGOOS=""linux""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype MyString string\r\ntype MyByteSlice []byte\r\ntype Both struct {\r\n\tMyString\r\n\tMyByteSlice\r\n}\r\n\r\nfunc (s1 MyString) Concat(s2 MyString) MyString            { return s1 + s2 }\r\nfunc (bs1 MyByteSlice) Concat(bs2 MyByteSlice) MyByteSlice { return append(bs1, bs2...) }\r\nfunc (b1 Both) Concat(b2 Both) Both {\r\n\treturn Both{\r\n\t\tb1.MyString.Concat(b2.MyString),\r\n\t\tb1.MyByteSlice.Concat(b2.MyByteSlice),\r\n\t}\r\n}\r\n\r\ntype Concatable[T any] interface {\r\n\tConcat(T) T\r\n}\r\n\r\nfunc Repeat[T Concatable[T]](c T) T {\r\n\treturn c.Concat(c)\r\n}\r\n\r\nfunc main() {\r\n\ts := MyString(""foo"")\r\n\tbs := MyByteSlice(""foo"")\r\n\tb := Both{MyString(""foo""), MyByteSlice(""foo"")}\r\n\tfmt.Println(Repeat(s))\r\n\tfmt.Println(Repeat(bs))\r\n\tfmt.Println(Repeat(b))\r\n}\r\n```\r\nhttps://go.dev/play/p/Jyws-pz9k5X\r\n\r\n\r\n### What did you expect to see?\r\nsuccessful compilation\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:26:10: ambiguous selector c.Concat\r\n\r\nGo build failed.\r\n```\r\n\r\nThe error is with the `Both` type (as if I remove it, the issue goes away). However on `Both`, `Concat` is not ambiguous. `Both` has it's own `Concat` method, and should not be trying to fall through to either of the embedded types.\r\n","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype MyString string\r\ntype MyByteSlice []byte\r\ntype Both struct {\r\n\tMyString\r\n\tMyByteSlice\r\n}\r\n\r\nfunc (s1 MyString) Concat(s2 MyString) MyString            { return s1 + s2 }\r\nfunc (bs1 MyByteSlice) Concat(bs2 MyByteSlice) MyByteSlice { return append(bs1, bs2...) }\r\nfunc (b1 Both) Concat(b2 Both) Both {\r\n\treturn Both{\r\n\t\tb1.MyString.Concat(b2.MyString),\r\n\t\tb1.MyByteSlice.Concat(b2.MyByteSlice),\r\n\t}\r\n}\r\n\r\ntype Concatable[T any] interface {\r\n\tConcat(T) T\r\n}\r\n\r\nfunc Repeat[T Concatable[T]](c T) T {\r\n\treturn c.Concat(c)\r\n}\r\n\r\nfunc main() {\r\n\ts := MyString(""foo"")\r\n\tbs := MyByteSlice(""foo"")\r\n\tb := Both{MyString(""foo""), MyByteSlice(""foo"")}\r\n\tfmt.Println(Repeat(s))\r\n\tfmt.Println(Repeat(bs))\r\n\tfmt.Println(Repeat(b))\r\n}\r\n"
53389,"cmd/compile: ""type does not match inferred type"" even though it compiles when the inferred type is explicitly provided as type argument<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3440234987=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI tried compiling the below program.\r\n\r\nhttps://go.dev/play/p/QcWycysXf-F?v=gotip\r\n\r\n\r\n\r\n### What did you expect to see?\r\nI expected `F(x, Y{})` to be equivalent to `F[any](x, Y{})`, and thus compile without issue.\r\n\r\n\r\n### What did you see instead?\r\n`F(x, Y{})` failed to compile with the following error:\r\n```\r\ntype Y of Y{} does not match inferred type any for T\r\n```\r\n\r\n",Thinking|NeedsDecision|FrozenDueToAge|early-in-cycle|TypeInference,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18.2 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/user/.cache/go-build""\r\nGOENV=""/home/user/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/user/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/user/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/lib/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3440234987=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\nI tried compiling the below program.\r\n\r\nhttps://go.dev/play/p/QcWycysXf-F?v=gotip\r\n```go\r\npackage main\r\n\r\ntype X[T any] struct{}\r\n\r\ntype Y struct{}\r\n\r\nfunc F[T any](x X[T], y T) {}\r\n\r\nfunc main() {\r\n\tx := X[any]{}\r\n\tF(x, any(Y{})) // works\r\n\tF[any](x, Y{}) // works\r\n\tF(x, Y{})      // error: type Y of Y{} does not match inferred type any for T\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nI expected `F(x, Y{})` to be equivalent to `F[any](x, Y{})`, and thus compile without issue.\r\n\r\n\r\n### What did you see instead?\r\n`F(x, Y{})` failed to compile with the following error:\r\n```\r\ntype Y of Y{} does not match inferred type any for T\r\n```\r\n\r\n","go\r\npackage main\r\n\r\ntype X[T any] struct{}\r\n\r\ntype Y struct{}\r\n\r\nfunc F[T any](x X[T], y T) {}\r\n\r\nfunc main() {\r\n\tx := X[any]{}\r\n\tF(x, any(Y{})) // works\r\n\tF[any](x, Y{}) // works\r\n\tF(x, Y{})      // error: type Y of Y{} does not match inferred type any for T\r\n}\r\n"
53324,"cmd/compile: missing combine constant store cases on amd64### What version of Go are you using (`go version`)?\r\ngotip\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```asm\r\nMOVQ $123, (AX)(DX*1)\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```asm\r\nMOVB $123, (AX)(DI*1)\r\nMOVB $0, 1(AX)(DI*1)\r\nMOVB $0, 2(AX)(DI*1)\r\nMOVB $0, 3(AX)(DI*1)\r\nMOVB $0, 4(AX)(DI*1)\r\nMOVB $0, 5(AX)(DI*1)\r\nMOVB $0, 6(AX)(DI*1)\r\nMOVB $0, 7(AX)(DI*1)\r\n```\r\n\r\n",Performance|NeedsInvestigation|FeatureRequest|FrozenDueToAge|compiler/runtime,randall77,"### What version of Go are you using (`go version`)?\r\ngotip\r\n\r\n### What did you do?\r\n\r\n```go\r\nfunc a(b []byte, idx int) {\r\n\tbinary.LittleEndian.PutUint64(b[idx:], 123)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```asm\r\nMOVQ $123, (AX)(DX*1)\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```asm\r\nMOVB $123, (AX)(DI*1)\r\nMOVB $0, 1(AX)(DI*1)\r\nMOVB $0, 2(AX)(DI*1)\r\nMOVB $0, 3(AX)(DI*1)\r\nMOVB $0, 4(AX)(DI*1)\r\nMOVB $0, 5(AX)(DI*1)\r\nMOVB $0, 6(AX)(DI*1)\r\nMOVB $0, 7(AX)(DI*1)\r\n```\r\n\r\n","go\r\nfunc a(b []byte, idx int) {\r\n\tbinary.LittleEndian.PutUint64(b[idx:], 123)\r\n}\r\n"
53105,"gollvm: build aborted when creating a self-referential ArrayT type in TypeManager::buildDITypeTypeManager::buildDIType does not create a replacement type for ArrayT type, and the build will be aborted when creating a self-referential ArrayT type.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngollvm master \r\n\r\nDCMAKE_BUILD_TYPE=Debug\r\n\r\n<pre>\r\n$ go version\r\ngo version unknown linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe issue may be reproduced with the following sample:\r\n\r\ngo run a.go \r\n\r\nFile a.go\r\n\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo error, successful build.\r\n\r\n### What did you see instead?\r\n\r\n\r\n\r\n",NeedsInvestigation,thanm,"TypeManager::buildDIType does not create a replacement type for ArrayT type, and the build will be aborted when creating a self-referential ArrayT type.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngollvm master \r\n\r\nDCMAKE_BUILD_TYPE=Debug\r\n\r\n<pre>\r\n$ go version\r\ngo version unknown linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe issue may be reproduced with the following sample:\r\n\r\ngo run a.go \r\n\r\nFile a.go\r\n\r\n```go\r\npackage a\r\n\r\nconst size = 1\r\n\r\ntype S struct {\r\n\tArray [size]*S\r\n}\r\n\r\n// not pass\r\ntype S1 struct {\r\n\tArray [size]*S\r\n}\r\n// type S1 S // not pass\r\n// type S1 = S // pass\r\n\r\nfunc (p *S1) Init() {\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nNo error, successful build.\r\n\r\n### What did you see instead?\r\n\r\n```bash\r\n[root@kwephis525702 test]# go run a.go \r\n# command-line-arguments\r\nllvm-goc: /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1889: llvm::DIType* TypeManager::buildDIType(Btype*, DIBuildHelper&): Assertion `tcit->second != nullptr' failed.\r\n #0 0x0000000002c53ad9 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:0\r\n #1 0x0000000002c53b90 PrintStackTraceSignalHandler(void*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:0\r\n #2 0x0000000002c51b55 llvm::sys::RunSignalHandlers() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Signals.cpp:97:0\r\n #3 0x0000000002c5351d SignalHandler(int) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:0\r\n #4 0x00007fe7e07fd5a0 (/usr/lib64/libpthread.so.0+0x135a0)\r\n #5 0x00007fe7e00f078b raise (/usr/lib64/libc.so.6+0x3978b)\r\n #6 0x00007fe7e00f1ab1 abort (/usr/lib64/libc.so.6+0x3aab1)\r\n #7 0x00007fe7e00e904a (/usr/lib64/libc.so.6+0x3204a)\r\n #8 0x00007fe7e00e90c2 (/usr/lib64/libc.so.6+0x320c2)\r\n #9 0x000000000064bf55 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1890:0\r\n#10 0x000000000064ba31 TypeManager::buildStructDIType(BStructType*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1834:0\r\n#11 0x000000000064c7e9 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1988:0\r\n#12 0x000000000064c4f8 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1968:0\r\n#13 0x000000000064c5df TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1975:0\r\n#14 0x000000000064ba31 TypeManager::buildStructDIType(BStructType*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1834:0\r\n#15 0x000000000064c7e9 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1988:0\r\n#16 0x000000000064c4f8 TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1968:0\r\n#17 0x000000000064c88f TypeManager::buildDIType(Btype*, DIBuildHelper&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-typemanager.cpp:1996:0\r\n#18 0x00000000006241a6 DIBuildHelper::beginFunction(Bfunction*, Bnode*, llvm::BasicBlock*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm-dibuildhelper.cpp:108:0\r\n#19 0x0000000000542b04 GenBlocks::GenBlocks(llvm::LLVMContext&, Llvm_backend*, Bfunction*, Bnode*, DIBuildHelper*, llvm::BasicBlock*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm.cpp:2991:0\r\n#20 0x0000000000547199 Llvm_backend::function_set_body(Bfunction*, Bstatement*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/bridge/go-llvm.cpp:4052:0\r\n#21 0x000000000045b760 Function::build(Gogo*, Named_object*) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:6686:0\r\n#22 0x00000000004620cd Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:8880:0\r\n#23 0x000000000044c4ed Gogo::write_globals() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/gogo.cc:1595:0\r\n#24 0x000000000044494c go_write_globals() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/gofrontend/go/go.cc:198:0\r\n#25 0x0000000000428ca6 gollvm::driver::CompileGoImpl::invokeFrontEnd() /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:790:0\r\n#26 0x000000000042628e gollvm::driver::CompileGoImpl::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:192:0\r\n#27 0x0000000000429a76 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/CompileGo.cpp:1005:0\r\n#28 0x000000000041a06d gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/Driver.cpp:706:0\r\n#29 0x000000000041a1ee gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver/Driver.cpp:729:0\r\n#30 0x000000000040e41e main /usr1/ywq/code/gollvm-workarea/llvm-project/llvm/tools/gollvm/driver-main/llvm-goc.cpp:228:0\r\n#31 0x00007fe7e00dcc67 __libc_start_main (/usr/lib64/libc.so.6+0x25c67)\r\n#32 0x000000000040d8ea _start (/usr1/ywq/code/gollvm-workarea/gollvm-install-debug/bin/llvm-goc+0x40d8ea)\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr1/ywq/code/gollvm-workarea/gollvm-install-debug/bin/llvm-goc -c -O2 -g -m64 -fdebug-prefix-map=/usr1/tmp/go-build3317449572=/tmp/go-build -gno-record-gcc-switches -o $WORK/b001/_go_.o -I $WORK/b001/_importcfgroot_ ./a.go $WORK/b001/_gomod_.go\r\n```\r\n\r\n",go\r\npackage a\r\n\r\nconst size = 1\r\n\r\ntype S struct {\r\n\tArray [size]*S\r\n}\r\n\r\n// not pass\r\ntype S1 struct {\r\n\tArray [size]*S\r\n}\r\n// type S1 S // not pass\r\n// type S1 = S // pass\r\n\r\nfunc (p *S1) Init() {\r\n\r\n}\r\n
53087,"cmd/compile: generic code seems to produce duplicate type descriptor<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nTested on 1.18 and 1.18.2.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vscode/.cache/go-build""\r\nGOENV=""/home/vscode/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/workspaces/azure-service-operator/v2/tools/generator/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1336644465=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nAfter using `maps.Clone`, values retrieved from the (copied) map fail to typecast correctly.\r\n\r\n~~I\u2019m still working on a minimal repro, but here is what I\u2019m seeing.~~\r\n\r\nSee small repro below.\r\n\r\n----\r\n\r\nThe original code in question looks like this:\r\n\r\n\r\nThe expectation is that this prints `true` four times as the values retrieved from the map are the same as those put into it. However, it does not; the first value retrieved from the map fails to cast correctly.\r\n\r\nOutput:\r\n```\r\nfrom ok: true\r\nto ok: true\r\nfrom ok: false\r\nto ok: true\r\n```\r\n\r\nThe implementation of `With` looks like this:\r\n\r\n\r\n\r\nI narrowed down the problem to `maps.Clone`. If I copy it as a local function then this continues to fail:\r\n\r\n\r\n\r\nHowever, if the `M` parameter is replaced with `map[K]V` directly, then it works as expected:\r\n\r\n\r\n\r\nNote that this also happens if the same value is input as both ""a"" and ""b""; whichever value was in the map before it was `maps.Clone`d is the one that fails to cast correctly.\r\n\r\n----\r\n\r\n# Repro\r\n\r\nSwitch between `CloneBad` (a copy of `maps.Clone`) and `CloneGood` to see the behaviour change.\r\n\r\n",NeedsFix|FrozenDueToAge|compiler/runtime,randall77,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nTested on 1.18 and 1.18.2.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vscode/.cache/go-build""\r\nGOENV=""/home/vscode/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.2""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/workspaces/azure-service-operator/v2/tools/generator/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1336644465=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nAfter using `maps.Clone`, values retrieved from the (copied) map fail to typecast correctly.\r\n\r\n~~I\u2019m still working on a minimal repro, but here is what I\u2019m seeing.~~\r\n\r\nSee small repro below.\r\n\r\n----\r\n\r\nThe original code in question looks like this:\r\n```go\r\nvar fromF astmodel.Function = convertFrom\r\n_, ok := fromF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""from ok: %v\\n"", ok)\r\n\r\nvar toF astmodel.Function = convertTo\r\n_, ok = toF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""to ok: %v\\n"", ok)\r\n\r\nm := readonly.EmptyMap[string, astmodel.Function]()\r\nm = m.With(""a"", convertFrom)\r\nm = m.With(""b"", convertTo)\r\n\r\nit, found := m.Get(""a"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""from ok: %v\\n"", ok)\r\n}\r\n\r\nit, found = m.Get(""b"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""to ok: %v\\n"", ok)\r\n}\r\n```\r\n\r\nThe expectation is that this prints `true` four times as the values retrieved from the map are the same as those put into it. However, it does not; the first value retrieved from the map fails to cast correctly.\r\n\r\nOutput:\r\n```\r\nfrom ok: true\r\nto ok: true\r\nfrom ok: false\r\nto ok: true\r\n```\r\n\r\nThe implementation of `With` looks like this:\r\n\r\n```go\r\nfunc (m Map[K, V]) With(key K, value V) Map[K, V] {\r\n\tresult := maps.Clone(m.inner)\r\n\tresult[key] = value\r\n\treturn CreateMapUnsafe(result)\r\n}\r\n```\r\n\r\nI narrowed down the problem to `maps.Clone`. If I copy it as a local function then this continues to fail:\r\n\r\n```go\r\nfunc CloneBad[M ~map[K]V, K comparable, V any](m M) M {\r\n\tr := make(M, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n```\r\n\r\nHowever, if the `M` parameter is replaced with `map[K]V` directly, then it works as expected:\r\n\r\n```go \r\nfunc CloneGood[K comparable, V any](m map[K]V) map[K]V {\r\n\tr := make(map[K]V, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n```\r\n\r\nNote that this also happens if the same value is input as both ""a"" and ""b""; whichever value was in the map before it was `maps.Clone`d is the one that fails to cast correctly.\r\n\r\n----\r\n\r\n# Repro\r\n\r\nSwitch between `CloneBad` (a copy of `maps.Clone`) and `CloneGood` to see the behaviour change.\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n)\r\n\r\ntype I interface {\r\n\tRun() string\r\n}\r\n\r\ntype S struct {\r\n\tstr string\r\n}\r\n\r\nfunc (s *S) Run() string {\r\n\treturn s.str\r\n}\r\n\r\nvar _ I = &S{}\r\n\r\ntype CloningMap[K comparable, V any] struct {\r\n\tinner map[K]V\r\n}\r\n\r\nfunc (cm CloningMap[K, V]) With(key K, value V) CloningMap[K, V] {\r\n\tresult := CloneBad(cm.inner)\r\n\tresult[key] = value\r\n\treturn CloningMap[K, V]{result}\r\n}\r\n\r\nfunc CloneGood[K comparable, V any](m map[K]V) map[K]V {\r\n\tr := make(map[K]V, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n\r\nfunc CloneBad[M ~map[K]V, K comparable, V any](m M) M {\r\n\tr := make(M, len(m))\r\n\tfor k, v := range m {\r\n\t\tr[k] = v\r\n\t}\r\n\treturn r\r\n}\r\n\r\nfunc main() {\r\n\ts1 := &S{""one""}\r\n\ts2 := &S{""two""}\r\n\r\n\tm := CloningMap[string, I]{inner: make(map[string]I)}\r\n\tm = m.With(""a"", s1)\r\n\tm = m.With(""b"", s2)\r\n\r\n\tit, found := m.inner[""a""]\r\n\tif found {\r\n\t\t_, ok := it.(*S)\r\n\t\tfmt.Printf(""from ok: %v\\n"", ok)\r\n\t}\r\n\r\n\tit, found = m.inner[""b""]\r\n\tif found {\r\n\t\t_, ok := it.(*S)\r\n\t\tfmt.Printf(""to ok: %v\\n"", ok)\r\n\t}\r\n}\r\n```","go\r\nvar fromF astmodel.Function = convertFrom\r\n_, ok := fromF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""from ok: %v\\n"", ok)\r\n\r\nvar toF astmodel.Function = convertTo\r\n_, ok = toF.(*functions.PropertyAssignmentFunction)\r\nfmt.Printf(""to ok: %v\\n"", ok)\r\n\r\nm := readonly.EmptyMap[string, astmodel.Function]()\r\nm = m.With(""a"", convertFrom)\r\nm = m.With(""b"", convertTo)\r\n\r\nit, found := m.Get(""a"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""from ok: %v\\n"", ok)\r\n}\r\n\r\nit, found = m.Get(""b"")\r\nif found {\r\n\t_, ok = it.(*functions.PropertyAssignmentFunction)\r\n\tfmt.Printf(""to ok: %v\\n"", ok)\r\n}\r\n"
52861,"gollvm: cannot use unsafe.Pointer as map key typeGOLLVM has a miscompilation bug that can be reproduced with the following test case.\r\n\r\nThe bug can be reproduced with trunk:\r\n\r\n1. gollvm: https://go.googlesource.com/gollvm/+/0e34e09fc15cde73f1b9974f2a657360abb94b4f\r\n2. gofrontend: https://go.googlesource.com/gofrontend/+/6a33e7e30c89edc12340dc470b44791bb1066feb\r\n\r\nIn the following test case, `m` is a map with `unsafe.Pointer` as key type. Method `test` simply adds key `p` into map `m` and returns true if the key is not present in the map. So `ok1` should be `true` and `ok2` should be `false`. The `gc` compiler can produce the correct output whereas GOLLVM miscompiles and leads to wrong output, i.e., both `ok1` and `ok2` are true.\r\n\r\n\r\n\r\nBelow is the LLVM IR obtained via option `-tracelevel=1`.\r\n\r\n```llvm\r\ndefine internal i8 @main.test(i8* nest %nest.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, i8* %p) #0 !dbg !5 {\r\nentry:\r\n  %m.addr = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8\r\n  %p.addr = alloca i8*, align 8\r\n  %""$ret0"" = alloca i8, align 1\r\n  %ok = alloca i8, align 1\r\n  %tmpv.0 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.1 = alloca {}*, align 8\r\n  %tmpv.2 = alloca i8, align 1\r\n  %tmpv.3 = alloca { i8*, i8 }, align 8\r\n  %sret.actual.0 = alloca { i8*, i8 }, align 8\r\n  %tmpv.4 = alloca i8*, align 8\r\n  %tmpv.5 = alloca i8, align 1\r\n  %tmpv.6 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.7 = alloca {}, align 1\r\n  %tmpv.8 = alloca i8*, align 8\r\n  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8\r\n  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, metadata !32, metadata !DIExpression()), !dbg !33\r\n  store i8* %p, i8** %p.addr, align 8\r\n  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %""$ret0"")\r\n  store i8 0, i8* %""$ret0"", align 1\r\n  call void @llvm.dbg.declare(metadata i8* %""$ret0"", metadata !36, metadata !DIExpression()), !dbg !37\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)\r\n  store i8 0, i8* %ok, align 1\r\n  call void @llvm.dbg.declare(metadata i8* %ok, metadata !38, metadata !DIExpression()), !dbg !40\r\n  %p.ld.0 = load i8*, i8** %p.addr, align 8, !dbg !41\r\n  store i8* %p.ld.0, i8** %tmpv.0, align 8\r\n  %m.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8, !dbg !42\r\n  %tmpv.0.ld.0 = load i8*, i8** %tmpv.0, align 8, !dbg !43 # <----- additional load\r\n  %cast.22 = bitcast i8* %tmpv.0.ld.0 to i64*, !dbg !43 # <----- following cast\r\n  %deref.ld.0 = load i64, i64* %cast.22, align 8, !dbg !43\r\n  %call.0 = call { i8*, i8 } @runtime.mapaccess2__fast64(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6unsafe_0Pointer_7struct_4_5, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m.ld.0, i64 %deref.ld.0), !dbg !43\r\n...\r\n```\r\n\r\n\r\nWe can find that there is an additional load that converts `i8**` into `i8*` and then `i8*` is converted into `i64*`,\r\nwhich means not the address of `p` (i.e., type `i8**`) is converted into `i64*` but the `p` (i.e., type `i8*`) itself is converted into `i64*` (). \r\n\r\n\r\n\r\nIt seems that there is something wrong with the propagation of `VarContext`. Additional load operations are generated during materialization.\r\n",NeedsFix,thanm,"GOLLVM has a miscompilation bug that can be reproduced with the following test case.\r\n\r\nThe bug can be reproduced with trunk:\r\n\r\n1. gollvm: https://go.googlesource.com/gollvm/+/0e34e09fc15cde73f1b9974f2a657360abb94b4f\r\n2. gofrontend: https://go.googlesource.com/gofrontend/+/6a33e7e30c89edc12340dc470b44791bb1066feb\r\n\r\nIn the following test case, `m` is a map with `unsafe.Pointer` as key type. Method `test` simply adds key `p` into map `m` and returns true if the key is not present in the map. So `ok1` should be `true` and `ok2` should be `false`. The `gc` compiler can produce the correct output whereas GOLLVM miscompiles and leads to wrong output, i.e., both `ok1` and `ok2` are true.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nfunc test(m map[unsafe.Pointer]struct{}, p unsafe.Pointer) bool {\r\n\tif _, ok := m[p]; ok {\r\n\t\treturn false\r\n\t}\r\n\tm[p] = struct{}{}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tm := make(map[unsafe.Pointer]struct{})\r\n\tp := unsafe.Pointer(&m)\r\n\tok1 := test(m, p)\r\n\tok2 := test(m, p)\r\n\tif !ok1 || ok2 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n```\r\n\r\nBelow is the LLVM IR obtained via option `-tracelevel=1`.\r\n\r\n```llvm\r\ndefine internal i8 @main.test(i8* nest %nest.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, i8* %p) #0 !dbg !5 {\r\nentry:\r\n  %m.addr = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8\r\n  %p.addr = alloca i8*, align 8\r\n  %""$ret0"" = alloca i8, align 1\r\n  %ok = alloca i8, align 1\r\n  %tmpv.0 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.1 = alloca {}*, align 8\r\n  %tmpv.2 = alloca i8, align 1\r\n  %tmpv.3 = alloca { i8*, i8 }, align 8\r\n  %sret.actual.0 = alloca { i8*, i8 }, align 8\r\n  %tmpv.4 = alloca i8*, align 8\r\n  %tmpv.5 = alloca i8, align 1\r\n  %tmpv.6 = alloca i8*, align 8, !go_addrtaken !31\r\n  %tmpv.7 = alloca {}, align 1\r\n  %tmpv.8 = alloca i8*, align 8\r\n  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8\r\n  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, metadata !32, metadata !DIExpression()), !dbg !33\r\n  store i8* %p, i8** %p.addr, align 8\r\n  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %""$ret0"")\r\n  store i8 0, i8* %""$ret0"", align 1\r\n  call void @llvm.dbg.declare(metadata i8* %""$ret0"", metadata !36, metadata !DIExpression()), !dbg !37\r\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)\r\n  store i8 0, i8* %ok, align 1\r\n  call void @llvm.dbg.declare(metadata i8* %ok, metadata !38, metadata !DIExpression()), !dbg !40\r\n  %p.ld.0 = load i8*, i8** %p.addr, align 8, !dbg !41\r\n  store i8* %p.ld.0, i8** %tmpv.0, align 8\r\n  %m.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %m.addr, align 8, !dbg !42\r\n  %tmpv.0.ld.0 = load i8*, i8** %tmpv.0, align 8, !dbg !43 # <----- additional load\r\n  %cast.22 = bitcast i8* %tmpv.0.ld.0 to i64*, !dbg !43 # <----- following cast\r\n  %deref.ld.0 = load i64, i64* %cast.22, align 8, !dbg !43\r\n  %call.0 = call { i8*, i8 } @runtime.mapaccess2__fast64(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6unsafe_0Pointer_7struct_4_5, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %m.ld.0, i64 %deref.ld.0), !dbg !43\r\n...\r\n```\r\n\r\n\r\nWe can find that there is an additional load that converts `i8**` into `i8*` and then `i8*` is converted into `i64*`,\r\nwhich means not the address of `p` (i.e., type `i8**`) is converted into `i64*` but the `p` (i.e., type `i8*`) itself is converted into `i64*` (). \r\n\r\n\r\n\r\nIt seems that there is something wrong with the propagation of `VarContext`. Additional load operations are generated during materialization.\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""unsafe""\r\n)\r\n\r\nfunc test(m map[unsafe.Pointer]struct{}, p unsafe.Pointer) bool {\r\n\tif _, ok := m[p]; ok {\r\n\t\treturn false\r\n\t}\r\n\tm[p] = struct{}{}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tm := make(map[unsafe.Pointer]struct{})\r\n\tp := unsafe.Pointer(&m)\r\n\tok1 := test(m, p)\r\n\tok2 := test(m, p)\r\n\tif !ok1 || ok2 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n"
52846,"gollvm/gofrontend: missing hash functions for alias types`Gogo::write_specific_type_functions` traverses all types to write `hash_function` for the key type of each map type.\r\nThe trouble is that `Type::needs_specific_type_functions` returns false if the key type is an aliased type. Here we need to delegate the check to the real type (or indeed base type) to see whether we need a hash function for the base type.\r\n\r\n\r\n\r\n```\r\n# command-line-arguments\r\nllvm-goc: llvm-project/llvm/tools/gollvm/gofrontend/go/types.cc:1977: void Type::write_hash_function(Gogo*, int64_t, const Backend_name*, Function_type*): assertion 'saw_errors()' failed.\r\nNamed_object_func: .main.makeMap\r\n #0 0x000055b6708c69cf PrintStackTraceSignalHandler(void*) (bin/llvm-goc+0x1f629cf)\r\n #1 0x000055b6708c4b8c SignalHandler(int) (bin/llvm-goc+0x1f60b8c)\r\n #2 0x00007f52b259a0e0 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x110e0)\r\n #3 0x00007f52b112ffff raise /build/glibc-77giwP/glibc-2.24/signal/../sysdeps/unix/sysv/linux/raise.c:51:0\r\n #4 0x00007f52b113142a abort /build/glibc-77giwP/glibc-2.24/stdlib/abort.c:91:0\r\n #5 0x000055b66f06a0d6 (bin/llvm-goc+0x7060d6)\r\n #6 0x000055b66f059377 Type::write_hash_function(Gogo*, long, Backend_name const*, Function_type*) (.localalias.182) (bin/llvm-goc+0x6f5377)\r\n #7 0x000055b66f0595f3 Type::build_hash_function(Gogo*, long, Function_type*) (.localalias.183) (bin/llvm-goc+0x6f55f3)\r\n #8 0x000055b66f058535 Type::hash_function(Gogo*, Function_type*) (.localalias.184) (bin/llvm-goc+0x6f4535)\r\n #9 0x000055b66f060c6d Map_type::do_type_descriptor(Gogo*, Named_type*) (.localalias.286) (bin/llvm-goc+0x6fcc6d)\r\n#10 0x000055b66f053f5e Type::make_type_descriptor_var(Gogo*) (.localalias.193) (bin/llvm-goc+0x6eff5e)\r\n#11 0x000055b66f054620 Type::type_descriptor_pointer(Gogo*, Location) (bin/llvm-goc+0x6f0620)\r\n#12 0x000055b66f0a3113 Type_descriptor_expression::do_get_backend(Translate_context*) (bin/llvm-goc+0x73f113)\r\n#13 0x000055b66f0d7397 Call_expression::do_get_backend(Translate_context*) (.localalias.377) (bin/llvm-goc+0x773397)\r\n#14 0x000055b66f02776b Temporary_statement::do_get_backend(Translate_context*) (.localalias.129) (bin/llvm-goc+0x6c376b)\r\n#15 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#16 0x000055b66f02421d Block_statement::do_get_backend(Translate_context*) (.localalias.166) (bin/llvm-goc+0x6c021d)\r\n#17 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#18 0x000055b66efe3784 Function::build(Gogo*, Named_object*) (.localalias.95) (bin/llvm-goc+0x67f784)\r\n#19 0x000055b66efe5991 Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) (.localalias.30) (bin/llvm-goc+0x681991)\r\n#20 0x000055b66eff0c2d Gogo::write_globals() (bin/llvm-goc+0x68cc2d)\r\n#21 0x000055b66efb5388 gollvm::driver::CompileGoImpl::invokeFrontEnd() (.localalias.4) (bin/llvm-goc+0x651388)\r\n#22 0x000055b66efbd448 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) (.localalias.13) (bin/llvm-goc+0x659448)\r\n#23 0x000055b66efae875 gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) (.localalias.0) (bin/llvm-goc+0x64a875)\r\n#24 0x000055b66efae97f gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) (bin/llvm-goc+0x64a97f)\r\n#25 0x000055b66eedced1 main (bin/llvm-goc+0x578ed1)\r\n#26 0x00007f52b111d2e1 __libc_start_main /build/glibc-77giwP/glibc-2.24/csu/../csu/libc-start.c:325:0\r\n#27 0x000055b66efa5f1a _start (bin/llvm-goc+0x641f1a)\r\n```\r\n\r\n\r\n",NeedsFix|FrozenDueToAge,thanm,"`Gogo::write_specific_type_functions` traverses all types to write `hash_function` for the key type of each map type.\r\nThe trouble is that `Type::needs_specific_type_functions` returns false if the key type is an aliased type. Here we need to delegate the check to the real type (or indeed base type) to see whether we need a hash function for the base type.\r\n\r\n```go\r\npackage main\r\n\r\ntype RealKey struct {\r\n\tType int64\r\n\tKey string\r\n}\r\n\r\ntype AliasKey = RealKey\r\n\r\nfunc makeMap() map[AliasKey]interface{} {\r\n\tm := make(map[AliasKey]interface{})\r\n\tk := AliasKey{1, """"}\r\n\tm[k] = k\r\n\treturn m\r\n}\r\n\r\nfunc main() {\r\n\tif len(makeMap()) != 1 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n```\r\n\r\n```\r\n# command-line-arguments\r\nllvm-goc: llvm-project/llvm/tools/gollvm/gofrontend/go/types.cc:1977: void Type::write_hash_function(Gogo*, int64_t, const Backend_name*, Function_type*): assertion 'saw_errors()' failed.\r\nNamed_object_func: .main.makeMap\r\n #0 0x000055b6708c69cf PrintStackTraceSignalHandler(void*) (bin/llvm-goc+0x1f629cf)\r\n #1 0x000055b6708c4b8c SignalHandler(int) (bin/llvm-goc+0x1f60b8c)\r\n #2 0x00007f52b259a0e0 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x110e0)\r\n #3 0x00007f52b112ffff raise /build/glibc-77giwP/glibc-2.24/signal/../sysdeps/unix/sysv/linux/raise.c:51:0\r\n #4 0x00007f52b113142a abort /build/glibc-77giwP/glibc-2.24/stdlib/abort.c:91:0\r\n #5 0x000055b66f06a0d6 (bin/llvm-goc+0x7060d6)\r\n #6 0x000055b66f059377 Type::write_hash_function(Gogo*, long, Backend_name const*, Function_type*) (.localalias.182) (bin/llvm-goc+0x6f5377)\r\n #7 0x000055b66f0595f3 Type::build_hash_function(Gogo*, long, Function_type*) (.localalias.183) (bin/llvm-goc+0x6f55f3)\r\n #8 0x000055b66f058535 Type::hash_function(Gogo*, Function_type*) (.localalias.184) (bin/llvm-goc+0x6f4535)\r\n #9 0x000055b66f060c6d Map_type::do_type_descriptor(Gogo*, Named_type*) (.localalias.286) (bin/llvm-goc+0x6fcc6d)\r\n#10 0x000055b66f053f5e Type::make_type_descriptor_var(Gogo*) (.localalias.193) (bin/llvm-goc+0x6eff5e)\r\n#11 0x000055b66f054620 Type::type_descriptor_pointer(Gogo*, Location) (bin/llvm-goc+0x6f0620)\r\n#12 0x000055b66f0a3113 Type_descriptor_expression::do_get_backend(Translate_context*) (bin/llvm-goc+0x73f113)\r\n#13 0x000055b66f0d7397 Call_expression::do_get_backend(Translate_context*) (.localalias.377) (bin/llvm-goc+0x773397)\r\n#14 0x000055b66f02776b Temporary_statement::do_get_backend(Translate_context*) (.localalias.129) (bin/llvm-goc+0x6c376b)\r\n#15 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#16 0x000055b66f02421d Block_statement::do_get_backend(Translate_context*) (.localalias.166) (bin/llvm-goc+0x6c021d)\r\n#17 0x000055b66efe2a2b Block::get_backend(Translate_context*) (.localalias.82) (bin/llvm-goc+0x67ea2b)\r\n#18 0x000055b66efe3784 Function::build(Gogo*, Named_object*) (.localalias.95) (bin/llvm-goc+0x67f784)\r\n#19 0x000055b66efe5991 Named_object::get_backend(Gogo*, std::vector<Bexpression*, std::allocator<Bexpression*> >&, std::vector<Btype*, std::allocator<Btype*> >&, std::vector<Bfunction*, std::allocator<Bfunction*> >&) (.localalias.30) (bin/llvm-goc+0x681991)\r\n#20 0x000055b66eff0c2d Gogo::write_globals() (bin/llvm-goc+0x68cc2d)\r\n#21 0x000055b66efb5388 gollvm::driver::CompileGoImpl::invokeFrontEnd() (.localalias.4) (bin/llvm-goc+0x651388)\r\n#22 0x000055b66efbd448 gollvm::driver::CompileGo::performAction(gollvm::driver::Compilation&, gollvm::driver::Action const&, llvm::SmallVector<gollvm::driver::Artifact*, 3u> const&, gollvm::driver::Artifact const&) (.localalias.13) (bin/llvm-goc+0x659448)\r\n#23 0x000055b66efae875 gollvm::driver::Driver::processAction(gollvm::driver::Action*, gollvm::driver::Compilation&, bool) (.localalias.0) (bin/llvm-goc+0x64a875)\r\n#24 0x000055b66efae97f gollvm::driver::Driver::processActions(gollvm::driver::Compilation&) (bin/llvm-goc+0x64a97f)\r\n#25 0x000055b66eedced1 main (bin/llvm-goc+0x578ed1)\r\n#26 0x00007f52b111d2e1 __libc_start_main /build/glibc-77giwP/glibc-2.24/csu/../csu/libc-start.c:325:0\r\n#27 0x000055b66efa5f1a _start (bin/llvm-goc+0x641f1a)\r\n```\r\n\r\n\r\n","go\r\npackage main\r\n\r\ntype RealKey struct {\r\n\tType int64\r\n\tKey string\r\n}\r\n\r\ntype AliasKey = RealKey\r\n\r\nfunc makeMap() map[AliasKey]interface{} {\r\n\tm := make(map[AliasKey]interface{})\r\n\tk := AliasKey{1, """"}\r\n\tm[k] = k\r\n\treturn m\r\n}\r\n\r\nfunc main() {\r\n\tif len(makeMap()) != 1 {\r\n\t\tpanic(""Oops"")\r\n\t}\r\n}\r\n"
52542,"cmd/cgo: C.* cannot be used for type constraints<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/hajimehoshi/Library/Caches/go-build""\r\nGOENV=""/Users/hajimehoshi/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/hajimehoshi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/hajimehoshi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/hajimehoshi/test/generics/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/60/khbk2xqn1c5bml1byjn89dwc0000gn/T/go-build3847202091=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nTry compiling:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nThe compilation succeeds\r\n\r\n### What did you see instead?\r\n\r\nThe compilation failed\r\n\r\n```\r\n$ go build main.go\r\n# command-line-arguments\r\n./main.go:5:13: undefined: C\r\n```\r\n",NeedsFix|FeatureRequest|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/hajimehoshi/Library/Caches/go-build""\r\nGOENV=""/Users/hajimehoshi/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/hajimehoshi/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/hajimehoshi/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/hajimehoshi/test/generics/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/60/khbk2xqn1c5bml1byjn89dwc0000gn/T/go-build3847202091=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nTry compiling:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""C""\r\n\r\nfunc Foo[T ~C.int](x T) T {\r\n        return x\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe compilation succeeds\r\n\r\n### What did you see instead?\r\n\r\nThe compilation failed\r\n\r\n```\r\n$ go build main.go\r\n# command-line-arguments\r\n./main.go:5:13: undefined: C\r\n```\r\n","go\r\npackage main\r\n\r\nimport ""C""\r\n\r\nfunc Foo[T ~C.int](x T) T {\r\n        return x\r\n}\r\n\r\nfunc main() {\r\n}\r\n"
52508,"cmd/go: go get ./... loops infinitely with specific go.mod, go.sum<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.18.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, built from source on `master` and latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/dylan/Library/Caches/go-build""\r\nGOENV=""/Users/dylan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/dylan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/dylan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/dylan/src/github.com/arbourd/test-go-broke/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xz/1jqk4k092tv32h4b0v53wym00000gn/T/go-build1295850106=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRuning `go get ./...` on a specific `go.sum` and `go.mod` which I have provided here: https://github.com/arbourd/test-go-broke/tree/ac80f1816b6fa7b6ca7509c3e2fcf2f502003d19\r\n\r\n### What did you expect to see?\r\n\r\n`go get ./...` to resolve packages or an error.\r\n\r\n### What did you see instead?\r\n\r\nCommand will hang indefinitely.\r\n\r\n### Some sleuthing\r\n\r\nThe infinite loop seems to have origins here: https://github.com/golang/go/blob/go1.18.1/src/cmd/go/internal/modget/get.go#L350-L353\r\n\r\nI built my own `go` binary with some `fmt.Println`, and it seems that `changed` is always true.\r\n\r\n",NeedsInvestigation|GoCommand|modules,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.18.1 darwin/arm64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, built from source on `master` and latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""arm64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/dylan/Library/Caches/go-build""\r\nGOENV=""/Users/dylan/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""arm64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/dylan/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/dylan/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/opt/homebrew/Cellar/go/1.18.1/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/opt/homebrew/Cellar/go/1.18.1/libexec/pkg/tool/darwin_arm64""\r\nGOVCS=""""\r\nGOVERSION=""go1.18.1""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/dylan/src/github.com/arbourd/test-go-broke/go.mod""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xz/1jqk4k092tv32h4b0v53wym00000gn/T/go-build1295850106=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRuning `go get ./...` on a specific `go.sum` and `go.mod` which I have provided here: https://github.com/arbourd/test-go-broke/tree/ac80f1816b6fa7b6ca7509c3e2fcf2f502003d19\r\n\r\n### What did you expect to see?\r\n\r\n`go get ./...` to resolve packages or an error.\r\n\r\n### What did you see instead?\r\n\r\nCommand will hang indefinitely.\r\n\r\n### Some sleuthing\r\n\r\nThe infinite loop seems to have origins here: https://github.com/golang/go/blob/go1.18.1/src/cmd/go/internal/modget/get.go#L350-L353\r\n\r\nI built my own `go` binary with some `fmt.Println`, and it seems that `changed` is always true.\r\n\r\n```go\r\n// Upgrades variable will always return this first\r\n// [{github.com/suborbital/sat [{github.com/suborbital/sat v0.1.2}] { } <nil>} {github.com/suborbital/subo [{github.com/suborbital/subo v0.4.2}] { } <nil>}]\r\n// The second iteration will return\r\n// []\r\n// and the cycle will repeat infinitely\r\nupgrades := r.findAndUpgradeImports(ctx, queries)\r\nif changed := r.applyUpgrades(ctx, upgrades); changed {\r\n\t// This will always be true\r\n\tcontinue\r\n}\r\n```","go\r\n// Upgrades variable will always return this first\r\n// [{github.com/suborbital/sat [{github.com/suborbital/sat v0.1.2}] { } <nil>} {github.com/suborbital/subo [{github.com/suborbital/subo v0.4.2}] { } <nil>}]\r\n// The second iteration will return\r\n// []\r\n// and the cycle will repeat infinitely\r\nupgrades := r.findAndUpgradeImports(ctx, queries)\r\nif changed := r.applyUpgrades(ctx, upgrades); changed {\r\n\t// This will always be true\r\n\tcontinue\r\n}\r\n"
52459,"net/http: HTTP/2 retry loop broken when net/http manages dials`http2.Transport.RoundTripOpt` retries requests under some circumstances ([transport.go#492](https://go.googlesource.com/net/+/refs/heads/master/http2/transport.go#492)):\r\n\r\n\r\n\r\nWhen using the bundled HTTP/2 support in `net/http`, however, `GetClientConn` does not dial connections when none are available. Instead, it returns `ErrNoCachedConn` and `net/http` handles the dial.\r\n\r\nThis results in an infinite retry loop  when the server immediately hangs up on a retryable request.",NeedsInvestigation,neild,"`http2.Transport.RoundTripOpt` retries requests under some circumstances ([transport.go#492](https://go.googlesource.com/net/+/refs/heads/master/http2/transport.go#492)):\r\n\r\n```go\r\nfor retry := 0; ; retry++ {\r\n  cc, err := t.connPool().GetClientConn(req, addr)\r\n   if err != nil {\r\n    t.vlogf(""http2: Transport failed to get client conn for %s: %v"", addr, err)\r\n    return nil, err\r\n  }\r\n  // ...\r\n```\r\n\r\nWhen using the bundled HTTP/2 support in `net/http`, however, `GetClientConn` does not dial connections when none are available. Instead, it returns `ErrNoCachedConn` and `net/http` handles the dial.\r\n\r\nThis results in an infinite retry loop  when the server immediately hangs up on a retryable request.","go\r\nfor retry := 0; ; retry++ {\r\n  cc, err := t.connPool().GetClientConn(req, addr)\r\n   if err != nil {\r\n    t.vlogf(""http2: Transport failed to get client conn for %s: %v"", addr, err)\r\n    return nil, err\r\n  }\r\n  // ...\r\n"
52080,"go/types, types2: error reported for valid shiftsExtracted `from test/shift1.go` which is currently not passing (excluded) in 1.18:\r\n\r\nreports\r\n```\r\nx.go:4:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\nx.go:5:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\n```\r\nThese should probably be valid. Regression.\r\n\r\ncc @findleyr ",NeedsInvestigation,griesemer,"Extracted `from test/shift1.go` which is currently not passing (excluded) in 1.18:\r\n```Go\r\npackage p\r\n\r\nfunc _(x int, s uint) {\r\n\tx = (1. << s) << (1 << s)\r\n\tx = (1. << s) << (1. << s)\r\n}\r\n```\r\nreports\r\n```\r\nx.go:4:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\nx.go:5:6: invalid operation: shifted operand (1. << s) (untyped float value) must be integer\r\n```\r\nThese should probably be valid. Regression.\r\n\r\ncc @findleyr ","Go\r\npackage p\r\n\r\nfunc _(x int, s uint) {\r\n\tx = (1. << s) << (1 << s)\r\n\tx = (1. << s) << (1. << s)\r\n}\r\n"
52072,"cmd/compile: devirtualization changes program behavior<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nMoved from https://github.com/golang/go/issues/38634#issuecomment-1084040645.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 linux/amd64\r\n</pre>\r\n\r\nIt looks this problem started from Go 1.16.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n[edit]: another example:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSame return results.\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n\r\nChanging the `i` variable to global makes this inconsistency gone.",NeedsFix|FrozenDueToAge|compiler/runtime,mdempsky,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\nMoved from https://github.com/golang/go/issues/38634#issuecomment-1084040645.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18 linux/amd64\r\n</pre>\r\n\r\nIt looks this problem started from Go 1.16.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{}\r\n\r\nfunc (T) M() {}\r\n\r\nvar pt *T\r\n\r\nfunc f() (r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tdefer i.M()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc g()(r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tf := i.M\r\n\tdefer f()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tprintln(f()) // 0\r\n\tprintln(g()) // 1\r\n}\r\n```\r\n\r\n[edit]: another example:\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{\r\n\tx int\r\n}\r\n\r\nfunc (t T) M() {\r\n\tprintln(t.x)\r\n}\r\n\r\nfunc f() {\r\n\tvar t = &T{1}\r\n\tvar i I = t\r\n\tdefer i.M()\r\n\tt.x = 2\r\n\treturn\r\n}\r\n\r\nfunc g() {\r\n\tvar t = &T{1}\r\n\tvar i I = t\r\n\tf := i.M\r\n\tdefer f()\r\n\tt.x = 2\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tf() // 1\r\n\tg() // 2\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSame return results.\r\n\r\n### What did you see instead?\r\n\r\nDifferent results.\r\n\r\nChanging the `i` variable to global makes this inconsistency gone.",Go\r\npackage main\r\n\r\ntype I interface{ M() }\r\n\r\ntype T struct{}\r\n\r\nfunc (T) M() {}\r\n\r\nvar pt *T\r\n\r\nfunc f() (r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tdefer i.M()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc g()(r int) {\r\n\tdefer func(){recover()}()\r\n\r\n\tvar i I = pt\r\n\tf := i.M\r\n\tdefer f()\r\n\tr = 1\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tprintln(f()) // 0\r\n\tprintln(g()) // 1\r\n}\r\n
51972,"sync: add new Map methods CompareAndSwap, CompareAndDelete, SwapI propose adding a new method on `sync.Map` similar to `atomic.Value`'s `Swap()` method. I think either the name `LoadAndStore()` to match the existing LoadOrStore or `Swap()` to match `atomic.Value` would make sense. The function signature would look something like this\r\n\r\n\r\nI think the fact that this already exists in `atomic.Value` is a good argument that there is a use case for it. The same thing could be achieved by creating a `sync.Map` of `atomic.Value`s, but that is a lot of type-assertion, and I have to stare at it pretty hard to make sure it's free of race conditions. My specific use case is basically de-bouncing abuse reports. If a worker detects abuse from a client it would\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|compiler/runtime,changkun,"I propose adding a new method on `sync.Map` similar to `atomic.Value`'s `Swap()` method. I think either the name `LoadAndStore()` to match the existing LoadOrStore or `Swap()` to match `atomic.Value` would make sense. The function signature would look something like this\r\n```go\r\nfunc (m *Map) LoadAndStore(key, newValue any) (previous any, loaded bool)\r\n```\r\n\r\nI think the fact that this already exists in `atomic.Value` is a good argument that there is a use case for it. The same thing could be achieved by creating a `sync.Map` of `atomic.Value`s, but that is a lot of type-assertion, and I have to stare at it pretty hard to make sure it's free of race conditions. My specific use case is basically de-bouncing abuse reports. If a worker detects abuse from a client it would\r\n```go\r\nlastReport, hasReportHistory := lastReportTimes.LoadAndStore(clientIP, time.Now())\r\nif hasReportHistory && time.Since(lastReport.(time.Time)) < time.Hour {\r\n    log(""not re-sending abuse report"")\r\n    return\r\n}\r\nsendAbuseReport(clientIP)\r\n```","go\r\nfunc (m *Map) LoadAndStore(key, newValue any) (previous any, loaded bool)\r\n"
51913,"cmd/compile: global variable initialization done in unexpected order<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/joao/Library/Caches/go-build""\r\nGOENV=""/Users/joao/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/joao/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/joao/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.16.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.16.4/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2d/wcw2b3c57jz69cl5tg_s2fx00000gn/T/go-build3928827666=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.16.4 darwin/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.16.4\r\nuname -v: Darwin Kernel Version 21.3.0: Wed Jan  5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_X86_64\r\nProductName:\tmacOS\r\nProductVersion:\t12.2.1\r\nBuildVersion:\t21D62\r\nlldb --version: lldb-1103.0.22.10\r\nApple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nI have a package consisting of the following two files:\r\n\r\n**f1.go**\r\n\r\n\r\n**f2.go**\r\n\r\n\r\n### What did you expect to see?\r\nAccording to the Go language specification, ""package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables"".\r\n\r\nAs such, I would expect two possible orders in which the global variables can be initialized:\r\n1. A < B < C < D - happens when you compile the project by passing f1.go first to the compiler, followed by f2.go . In this case, the output is ""1 4 3""\r\n2. A < D < B < C - happens when f2.go is passed first to the compiler. In this case, the expected output would be ""1 2 1"".\r\n\r\n### What did you see instead?\r\nFor the second case (when f2.go is passed first), the actual output is ""1 2 3"". If instead I rewrite file f1.go to the following, I get the expected output for case 2.\r\n\r\n**Rewritten f2.go**\r\n\r\n\r\n**Output**\r\n```\r\nInit A\r\nInit B\r\nInit C\r\n1 2 1\r\n```\r\n\r\n### Additional Information\r\nThis issue was first discussed in the golang-nuts Google Group ([link](https://groups.google.com/g/golang-nuts/c/56XOwY6Wz9I)).",NeedsFix|early-in-cycle|compiler/runtime,mdempsky,"<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/joao/Library/Caches/go-build""\r\nGOENV=""/Users/joao/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/joao/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/joao/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.16.4/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.16.4/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.4""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2d/wcw2b3c57jz69cl5tg_s2fx00000gn/T/go-build3928827666=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\nGOROOT/bin/go version: go version go1.16.4 darwin/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.16.4\r\nuname -v: Darwin Kernel Version 21.3.0: Wed Jan  5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_X86_64\r\nProductName:\tmacOS\r\nProductVersion:\t12.2.1\r\nBuildVersion:\t21D62\r\nlldb --version: lldb-1103.0.22.10\r\nApple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nI have a package consisting of the following two files:\r\n\r\n**f1.go**\r\n```go\r\npackage main    \r\n   \r\nvar A int = 3    \r\nvar B int = A + 1    \r\nvar C int = A\r\n```\r\n\r\n**f2.go**\r\n```go\r\npackage main    \r\n   \r\nimport ""fmt""    \r\n                     \r\nvar D = f()      \r\n   \r\nfunc f() int {    \r\n  A = 1    \r\n  return 1    \r\n}    \r\n   \r\nfunc main() {    \r\n  fmt.Println(A, B, C)    \r\n}  \r\n```\r\n\r\n### What did you expect to see?\r\nAccording to the Go language specification, ""package-level variable initialization proceeds stepwise, with each step selecting the variable earliest in declaration order which has no dependencies on uninitialized variables"".\r\n\r\nAs such, I would expect two possible orders in which the global variables can be initialized:\r\n1. A < B < C < D - happens when you compile the project by passing f1.go first to the compiler, followed by f2.go . In this case, the output is ""1 4 3""\r\n2. A < D < B < C - happens when f2.go is passed first to the compiler. In this case, the expected output would be ""1 2 1"".\r\n\r\n### What did you see instead?\r\nFor the second case (when f2.go is passed first), the actual output is ""1 2 3"". If instead I rewrite file f1.go to the following, I get the expected output for case 2.\r\n\r\n**Rewritten f2.go**\r\n```go\r\npackage main    \r\n   \r\nimport ""fmt""    \r\n   \r\nvar A int = initA()    \r\nvar B int = initB()    \r\nvar C int = initC()    \r\n     \r\nfunc initA() int {    \r\n  fmt.Println(""Init A"")    \r\n  return 3    \r\n}    \r\n     \r\nfunc initB() int {    \r\n  fmt.Println(""Init B"")    \r\n  return A + 1    \r\n}    \r\n \r\nfunc initC() int {    \r\n  fmt.Println(""Init C"")    \r\n  return A    \r\n} \r\n```\r\n\r\n**Output**\r\n```\r\nInit A\r\nInit B\r\nInit C\r\n1 2 1\r\n```\r\n\r\n### Additional Information\r\nThis issue was first discussed in the golang-nuts Google Group ([link](https://groups.google.com/g/golang-nuts/c/56XOwY6Wz9I)).",go\r\npackage main    \r\n   \r\nvar A int = 3    \r\nvar B int = A + 1    \r\nvar C int = A\r\n
51803,"go/types: need best effort generic func instantiationOn Go 1.18, I don't seem to get an Instances entry for ""foo"" in:\r\n\r\n\r\n\r\nIt seems to be unhappy because the parameter is absent, however the type parameter is specified which seems like it should be enough to fill in Instances. Without the Instances entry it is difficult for gopls to offer regular parameter completions since gopls can't resolve the instantiated type signature to get the parameter type (unless there is another way?).\r\n\r\n/cc @findleyr ",NeedsInvestigation|FrozenDueToAge,findleyr,"On Go 1.18, I don't seem to get an Instances entry for ""foo"" in:\r\n\r\n```go\r\nfunc foo[T int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tfoo[int]() // <-- no Instances entry for this foo\r\n}\r\n```\r\n\r\nIt seems to be unhappy because the parameter is absent, however the type parameter is specified which seems like it should be enough to fill in Instances. Without the Instances entry it is difficult for gopls to offer regular parameter completions since gopls can't resolve the instantiated type signature to get the parameter type (unless there is another way?).\r\n\r\n/cc @findleyr ",go\r\nfunc foo[T int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tfoo[int]() // <-- no Instances entry for this foo\r\n}\r\n
51783,"x/tools/gopls: completion gives unneeded generic type instantiation snippet \r\n\r\nCompleting to ""foo"" at <> inserts ""int(foo[T float64|int](a T))"" (ignore the extra type conversion), but most likely the type argument can be inferred so gopls should offer just ""foo(a int)"" instead.\r\n",gopls|Tools|gopls/completion|gopls/generics,adonovan,"```go\r\nfunc foo[T float64 | int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tvar _ int = fo<>\r\n}\r\n```\r\n\r\nCompleting to ""foo"" at <> inserts ""int(foo[T float64|int](a T))"" (ignore the extra type conversion), but most likely the type argument can be inferred so gopls should offer just ""foo(a int)"" instead.\r\n",go\r\nfunc foo[T float64 | int](a T) T {\r\n\treturn a\r\n}\r\n\r\nfunc main() {\r\n\tvar _ int = fo<>\r\n}\r\n
51777,"net/netip: add IPv6LoopbackWe already have `net.IPv6loopback` today, but lack an equivalent in `net/netip`. I'd like to propose adding `netip.IPv6Loopback` specifically; IPv6 defines exactly one loopback address: `::1`. \r\n\r\nIPv4 assigns the entire `127.0.0.0/8` and thus should be out of scope for this proposal.\r\n\r\nConcretely:\r\n\r\n\r\n\r\nSee also #51766 for a similar addition and rationale. Thanks!\r\n\r\n/cc @bradfitz @danderson @josharian",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,mdlayher,"We already have `net.IPv6loopback` today, but lack an equivalent in `net/netip`. I'd like to propose adding `netip.IPv6Loopback` specifically; IPv6 defines exactly one loopback address: `::1`. \r\n\r\nIPv4 assigns the entire `127.0.0.0/8` and thus should be out of scope for this proposal.\r\n\r\nConcretely:\r\n\r\n```go\r\n// IPv6Loopback returns the IPv6 loopback address ::1.\r\nfunc IPv6Loopback() Addr { return AddrFrom16([16]byte{15: 0x01}) }\r\n```\r\n\r\nSee also #51766 for a similar addition and rationale. Thanks!\r\n\r\n/cc @bradfitz @danderson @josharian",go\r\n// IPv6Loopback returns the IPv6 loopback address ::1.\r\nfunc IPv6Loopback() Addr { return AddrFrom16([16]byte{15: 0x01}) }\r\n
51766,"net/netip: add IPv6LinkLocalAllRouters<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nI'm working on porting some of my networking packages to Go 1.18's `net/netip`, but it seems that I had forgotten about my uses of `net.IPv6linklocalallrouters` when I was making regular additions to inet.af/netaddr.\r\n\r\nI'd like to suggest adding exactly the following to `net/netip`, akin to what already exists as `netip.IPv6LinkLocalAllNodes`:\r\n\r\n\r\n\r\nAlong with link-local all nodes, this is one of the most fundamental IPv6 multicast group addresses. Package `net` exposes it today as a variable: https://pkg.go.dev/net#pkg-variables\r\n\r\nThanks!\r\n\r\n/cc @bradfitz @danderson @josharian",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,mdlayher,"<!--\r\nOur proposal process is documented here:\r\nhttps://go.dev/s/proposal-process\r\n-->\r\n\r\nI'm working on porting some of my networking packages to Go 1.18's `net/netip`, but it seems that I had forgotten about my uses of `net.IPv6linklocalallrouters` when I was making regular additions to inet.af/netaddr.\r\n\r\nI'd like to suggest adding exactly the following to `net/netip`, akin to what already exists as `netip.IPv6LinkLocalAllNodes`:\r\n\r\n```go\r\n// IPv6LinkLocalAllRouters returns the IPv6 link-local all routers multicast\r\n// address ff02::2.\r\nfunc IPv6LinkLocalAllRouters() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x02}) }\r\n```\r\n\r\nAlong with link-local all nodes, this is one of the most fundamental IPv6 multicast group addresses. Package `net` exposes it today as a variable: https://pkg.go.dev/net#pkg-variables\r\n\r\nThanks!\r\n\r\n/cc @bradfitz @danderson @josharian","go\r\n// IPv6LinkLocalAllRouters returns the IPv6 link-local all routers multicast\r\n// address ff02::2.\r\nfunc IPv6LinkLocalAllRouters() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x02}) }\r\n"
51668,"fmt: add FormatString(State) stringI'm currently working with a custom fmt.Formatter implementation. Similar to the request in https://github.com/golang/go/issues/51195, I would like to implement some methods and then ""fall back"" to the default `fmt` implementation for unimplemented verbs.\r\n\r\nIt's difficult to do this because State does not allow you to reconstruct the original format string, unless you enumerate all of the possible characters in a format string and call `Flag(char)` on each one. This is lengthy and error prone. \r\n\r\nI would like to formally propose what @bcmills suggested in https://github.com/golang/go/issues/25150, which is to add a String() api to `fmt.State`. \r\n\r\n\r\n\r\nI doubt that there are many implementations of the API, which would limit the amount of breakage from adding a new method. \r\n\r\nIn the standard library, there is currently only one implementation of `fmt.State` - in the `pp` struct. \r\n\r\nIf someone can give me pointers on how to do a search across all of Github, I would be happy to check whether there are in-the-wild implementations of fmt.State. I'd also appreciate if someone could do the same inside of Google.\r\n\r\nThanks to Bryan Mills, Github user seebs and Eric Lagergren for initial suggestions and discussion.",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,robpike,"I'm currently working with a custom fmt.Formatter implementation. Similar to the request in https://github.com/golang/go/issues/51195, I would like to implement some methods and then ""fall back"" to the default `fmt` implementation for unimplemented verbs.\r\n\r\nIt's difficult to do this because State does not allow you to reconstruct the original format string, unless you enumerate all of the possible characters in a format string and call `Flag(char)` on each one. This is lengthy and error prone. \r\n\r\nI would like to formally propose what @bcmills suggested in https://github.com/golang/go/issues/25150, which is to add a String() api to `fmt.State`. \r\n\r\n```go\r\n// State represents the printer state passed to custom formatters.\r\n// It provides access to the io.Writer interface plus information about\r\n// the flags and options for the operand's format specifier.\r\ntype State interface {\r\n\t// Write is the function to call to emit formatted output to be printed.\r\n\tWrite(b []byte) (n int, err error)\r\n\t// Width returns the value of the width option and whether it has been set.\r\n\tWidth() (wid int, ok bool)\r\n\t// Precision returns the value of the precision option and whether it has been set.\r\n\tPrecision() (prec int, ok bool)\r\n\r\n\t// Flag reports whether the flag c, a character, has been set.\r\n\tFlag(c int) bool\r\n\r\n         // String returns the original format string that was used to create this State (e.g. ""%#v"")\r\n         String() string\r\n}\r\n```\r\n\r\nI doubt that there are many implementations of the API, which would limit the amount of breakage from adding a new method. \r\n\r\nIn the standard library, there is currently only one implementation of `fmt.State` - in the `pp` struct. \r\n\r\nIf someone can give me pointers on how to do a search across all of Github, I would be happy to check whether there are in-the-wild implementations of fmt.State. I'd also appreciate if someone could do the same inside of Google.\r\n\r\nThanks to Bryan Mills, Github user seebs and Eric Lagergren for initial suggestions and discussion.","go\r\n// State represents the printer state passed to custom formatters.\r\n// It provides access to the io.Writer interface plus information about\r\n// the flags and options for the operand's format specifier.\r\ntype State interface {\r\n\t// Write is the function to call to emit formatted output to be printed.\r\n\tWrite(b []byte) (n int, err error)\r\n\t// Width returns the value of the width option and whether it has been set.\r\n\tWidth() (wid int, ok bool)\r\n\t// Precision returns the value of the precision option and whether it has been set.\r\n\tPrecision() (prec int, ok bool)\r\n\r\n\t// Flag reports whether the flag c, a character, has been set.\r\n\tFlag(c int) bool\r\n\r\n         // String returns the original format string that was used to create this State (e.g. ""%#v"")\r\n         String() string\r\n}\r\n"
51653,"x/vuln/cmd/govulncheck: report stdlib CVEsThe Go Vulnerability Database has a bunch of CVEs associated to the standard library which are not reported by `govulncheck`.\r\nAdditionally, I would like to have my own database containing std packages and symbols sanctioned from secure applications, such as [crypto/rc4](https://pkg.go.dev/crypto/rc4).\r\n\r\nMy proposal is to add a new optional command line flag to `govulncheck` which specifies the Go version that should be vetted, i.e. `-go=1.17.3`. When this flag is set, `govulncheck` will load all the standard library vulnerabilities and filter them out by the provided Go version. Any std vulnerability finding would be treated and reported as if it were a normal module vulnerability.\r\n\r\nExample:\r\n\r\nGiven the following main.go:\r\n\r\n\r\n\r\nCurrently `govulncheck` does not report any vulnerability.\r\nWith this proposal, it would report one when selecting an old Go version:\r\n\r\n\r\n\r\nI leave out of this proposal to decide if the std check should be executed by default or not. AFAIU `govulncheck` would require the complete Go semantic version, which is not provided by `go.mod`, and this additional check would make `govulncheck` run slower.\r\n\r\ncc @jba ",NeedsInvestigation|FrozenDueToAge|vulncheck or vulndb,zpavlinovic,"The Go Vulnerability Database has a bunch of CVEs associated to the standard library which are not reported by `govulncheck`.\r\nAdditionally, I would like to have my own database containing std packages and symbols sanctioned from secure applications, such as [crypto/rc4](https://pkg.go.dev/crypto/rc4).\r\n\r\nMy proposal is to add a new optional command line flag to `govulncheck` which specifies the Go version that should be vetted, i.e. `-go=1.17.3`. When this flag is set, `govulncheck` will load all the standard library vulnerabilities and filter them out by the provided Go version. Any std vulnerability finding would be treated and reported as if it were a normal module vulnerability.\r\n\r\nExample:\r\n\r\nGiven the following main.go:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""crypto/elliptic""\r\n\r\nfunc main() {\r\n\tprintln(elliptic.P224().IsOnCurve(nil, nil))\r\n}\r\n```\r\n\r\nCurrently `govulncheck` does not report any vulnerability.\r\nWith this proposal, it would report one when selecting an old Go version:\r\n\r\n```bash\r\ngovulncheck -go=1.13.0 .\r\nFindings for vulnerability: GO-2021-0235 (CVE-2021-3114):\r\n\r\nTrace:\r\ncrypto/elliptic.p224Contract (C:\\Program Files\\Go\\src\\crypto\\elliptic\\p224.go:67:14)\r\ncrypto/elliptic.Curve.IsOnCurve(...) [approx. resolved to (crypto/elliptic.p224Curve).IsOnCurve] (C:\\Users\\*\\code\\gotest\\main.go:6:35)\r\ngotest.main(...) (C:\\Users\\*\\code\\gotest\\main.go:5:6)\r\n```\r\n\r\nI leave out of this proposal to decide if the std check should be executed by default or not. AFAIU `govulncheck` would require the complete Go semantic version, which is not provided by `go.mod`, and this additional check would make `govulncheck` run slower.\r\n\r\ncc @jba ","go\r\npackage main\r\n\r\nimport ""crypto/elliptic""\r\n\r\nfunc main() {\r\n\tprintln(elliptic.P224().IsOnCurve(nil, nil))\r\n}\r\n"
51593,"go/types, types2: type inference should unify interface types### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.19-5a040c5a36 Thu Mar 10 09:12:04 2022 +0000\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nProbably also with 1.18rc1, haven't had a chance to test it yet.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGotip Playground.\r\n\r\n### What did you do?\r\nExperimenting with type inference and anonymous interface types as constraints and/or inference inputs.\r\n\r\n\r\n\r\nhttps://gotipplay.golang.org/p/lJOnm9LexpD\r\n\r\n### What did you expect to see?\r\nEither a compiler error, or a successful compilation.\r\n\r\n### What did you see instead?\r\nA compiler crash due to an assertion failure in `(*cycleFinder).typ` on this line:\r\n\r\n\r\n\r\nThe assumption made in the comment is obviously not true with respect to interface method types, for which `(*Signature).Recv()` is set to the declaring interface's type.",NeedsFix|TypeInference,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.19-5a040c5a36 Thu Mar 10 09:12:04 2022 +0000\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nProbably also with 1.18rc1, haven't had a chance to test it yet.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGotip Playground.\r\n\r\n### What did you do?\r\nExperimenting with type inference and anonymous interface types as constraints and/or inference inputs.\r\n\r\n```go\r\npackage main\r\n\r\ntype BasicAnon = interface {\r\n\tM() int\r\n}\r\n\r\nfunc InferAnon[I interface{ M() R }, R any](arg I) {\r\n}\r\n\r\nfunc main() {\r\n\tvar a BasicAnon\r\n\tInferAnon(a) // crash due to this line\r\n\t_ = a\r\n}\r\n```\r\n\r\nhttps://gotipplay.golang.org/p/lJOnm9LexpD\r\n\r\n### What did you expect to see?\r\nEither a compiler error, or a successful compilation.\r\n\r\n### What did you see instead?\r\nA compiler crash due to an assertion failure in `(*cycleFinder).typ` on this line:\r\n\r\n```go\r\ncase *Signature:\r\n\t// There are no ""method types"" so we should never see a recv.\r\n\tassert(t.recv == nil)\r\n\t...\r\n```\r\n\r\nThe assumption made in the comment is obviously not true with respect to interface method types, for which `(*Signature).Recv()` is set to the declaring interface's type.","go\r\npackage main\r\n\r\ntype BasicAnon = interface {\r\n\tM() int\r\n}\r\n\r\nfunc InferAnon[I interface{ M() R }, R any](arg I) {\r\n}\r\n\r\nfunc main() {\r\n\tvar a BasicAnon\r\n\tInferAnon(a) // crash due to this line\r\n\t_ = a\r\n}\r\n"
51525,"go/types, types2: report better errors when type sets are emptyError messages are confusing when type sets are empty. For instance, for:\r\n\r\nthe error doesn't say why the comparison is not possible. The root cause is that `T`'s type set is empty.\r\n\r\nThe same applies to other operations, such as `+` in this case.\r\n\r\ncc: @findleyr ",NeedsFix|FrozenDueToAge,griesemer,"Error messages are confusing when type sets are empty. For instance, for:\r\n```Go\r\nfunc _[T interface{comparable; ~int; ~string}](x T) {\r\n        _ = x == x // ERROR cannot compare x == x\r\n}\r\n```\r\nthe error doesn't say why the comparison is not possible. The root cause is that `T`'s type set is empty.\r\n\r\nThe same applies to other operations, such as `+` in this case.\r\n\r\ncc: @findleyr ",Go\r\nfunc _[T interface{comparable; ~int; ~string}](x T) {\r\n        _ = x == x // ERROR cannot compare x == x\r\n}\r\n
51503,"types2, go/types: the scope of a type parameter identifier in a method of a generic type is too large<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18rc1 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCompiles okay.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\nHonestly, the behavior conforms to the tip spec:\r\n\r\n> The scope of an identifier denoting a type parameter of a generic function or declared by a method receiver is the function body and all parameter lists of the function. \r\n\r\nHowever, I think , for a method of a generic type, the scope should begin after the name of the generic type in the receiver, instead of beginning the start of receiver part.\r\n\r\n",NeedsFix,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.18rc1 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\n```Go\r\ntype T[T any] struct {} // okay\r\n\r\nfunc (T[T]) Bar() {} // error: T is not a generic type\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCompiles okay.\r\n\r\n### What did you see instead?\r\n\r\nFails to compile.\r\n\r\nHonestly, the behavior conforms to the tip spec:\r\n\r\n> The scope of an identifier denoting a type parameter of a generic function or declared by a method receiver is the function body and all parameter lists of the function. \r\n\r\nHowever, I think , for a method of a generic type, the scope should begin after the name of the generic type in the receiver, instead of beginning the start of receiver part.\r\n\r\n",Go\r\ntype T[T any] struct {} // okay\r\n\r\nfunc (T[T]) Bar() {} // error: T is not a generic type\r\n
51486,"fmt: `%#v` does not print \u201ca Go-syntax representation\u201d for NaN values### What version of Go are you using (`go version`)?\r\n\r\n```\r\ndevel go1.19-c9b60632eb Fri Mar 4 14:10:38 2022 +0000\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What did you do?\r\n\r\nFormat a floating-point NaN value with `%#v` (https://go.dev/play/p/zlxs4NzQ0bl?v=gotip):\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nPer https://pkg.go.dev/fmt#hdr-Printing, \u201ca Go-syntax representation of the value\u201d \u2014 that is, valid Go syntax for the value.\r\n\r\nPerhaps a line like:\r\n```\r\n\tx := float32(math.NaN())\r\n```\r\nor\r\n```\r\n\tx := float32(math.Float32frombits(0x7fc00000))\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe string `NaN`:\r\n```\r\nx := float32(NaN)\r\n```\r\nwhich is not \u201ca Go-syntax representation\u201d. Feeding it back into the program gives (https://go.dev/play/p/908uCl2KbVN?v=gotip):\r\n```\r\n./prog.go:13:15: undefined: NaN\r\n\r\nGo build failed.\r\n```\r\n\r\nThis problem is especially acute if the NaN value is not the same bits as `math.NaN()` (https://go.dev/play/p/Xl13miTI7pe?v=gotip), since there is no indication that there is anything unusual about it.",NeedsFix|FixPending,robpike,"### What version of Go are you using (`go version`)?\r\n\r\n```\r\ndevel go1.19-c9b60632eb Fri Mar 4 14:10:38 2022 +0000\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What did you do?\r\n\r\nFormat a floating-point NaN value with `%#v` (https://go.dev/play/p/zlxs4NzQ0bl?v=gotip):\r\n\r\n```go\r\n\tx := float32(math.NaN())\r\n\tfmt.Printf(""x := %T(%#v)"", x, x)\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPer https://pkg.go.dev/fmt#hdr-Printing, \u201ca Go-syntax representation of the value\u201d \u2014 that is, valid Go syntax for the value.\r\n\r\nPerhaps a line like:\r\n```\r\n\tx := float32(math.NaN())\r\n```\r\nor\r\n```\r\n\tx := float32(math.Float32frombits(0x7fc00000))\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe string `NaN`:\r\n```\r\nx := float32(NaN)\r\n```\r\nwhich is not \u201ca Go-syntax representation\u201d. Feeding it back into the program gives (https://go.dev/play/p/908uCl2KbVN?v=gotip):\r\n```\r\n./prog.go:13:15: undefined: NaN\r\n\r\nGo build failed.\r\n```\r\n\r\nThis problem is especially acute if the NaN value is not the same bits as `math.NaN()` (https://go.dev/play/p/Xl13miTI7pe?v=gotip), since there is no indication that there is anything unusual about it.","go\r\n\tx := float32(math.NaN())\r\n\tfmt.Printf(""x := %T(%#v)"", x, x)\r\n"
51455,"x/build/cmd/coordinator: switch to ""./..."" import path pattern for testing packages in a moduleBack when GOPATH mode was default, assuming one GOPATH workspace, running ""go test ./..."" in $GOPATH/src/root had the same effect as running ""go test {root}/..."". The latter was more explicit and did the stated thing even if it was accidentally run from the wrong directory. Maybe that's why it was chosen, or maybe it was chosen arbitrarily, since both worked and did the same thing.\r\n\r\nThat invocation persisted to today, when module mode is used, and for each module to be tested the coordinator runs ""go test {module-root}/..."" invocations at the module root to test packages contained inside that module:\r\n\r\n\r\n([source](https://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1065-1076;drc=75546d97733421ec185edcd9a085f1087a483cf8))\r\n\r\nFrom #51283 I've learned there's a difference in that ""{module-root}/..."" may select a package with import path ""{module-root}"" even if that package is in another module, but ""./..."" won't do that.\r\n\r\nSince there's no need for the pattern to match any packages outside of the very module it's meant to cover, we could consider switching. It would not fail if a go.sum entry that `go mod tidy` doesn't currently insert isn't added in some cases (see #51283), remove possibility of unintentional duplicate coverage of packages in nested modules, and least importantly it is shorter visually.\r\n\r\nCC @golang/release, @bcmills, @matloob.",Builders|NeedsFix|FrozenDueToAge,dmitshur,"Back when GOPATH mode was default, assuming one GOPATH workspace, running ""go test ./..."" in $GOPATH/src/root had the same effect as running ""go test {root}/..."". The latter was more explicit and did the stated thing even if it was accidentally run from the wrong directory. Maybe that's why it was chosen, or maybe it was chosen arbitrarily, since both worked and did the same thing.\r\n\r\nThat invocation persisted to today, when module mode is used, and for each module to be tested the coordinator runs ""go test {module-root}/..."" invocations at the module root to test packages contained inside that module:\r\n\r\n```Go\r\n// A goTestRun represents a single invocation of the 'go test' command.\r\ntype goTestRun struct {\r\n\tDir      string   // Directory where 'go test' should be executed.\r\n\tPatterns []string // Import path patterns to provide to 'go test'.\r\n}\r\n// The default behavior is to test the pattern ""golang.org/x/{repo}/...""\r\n// in the repository root.\r\nrepoPath := importPathOfRepo(st.SubName)\r\ntestRuns := []goTestRun{{\r\n\tDir:      ""gopath/src/"" + repoPath,\r\n\tPatterns: []string{repoPath + ""/...""},\r\n}}\r\n```\r\n([source](https://cs.opensource.google/go/x/build/+/master:cmd/coordinator/buildstatus.go;l=1065-1076;drc=75546d97733421ec185edcd9a085f1087a483cf8))\r\n\r\nFrom #51283 I've learned there's a difference in that ""{module-root}/..."" may select a package with import path ""{module-root}"" even if that package is in another module, but ""./..."" won't do that.\r\n\r\nSince there's no need for the pattern to match any packages outside of the very module it's meant to cover, we could consider switching. It would not fail if a go.sum entry that `go mod tidy` doesn't currently insert isn't added in some cases (see #51283), remove possibility of unintentional duplicate coverage of packages in nested modules, and least importantly it is shorter visually.\r\n\r\nCC @golang/release, @bcmills, @matloob.","Go\r\n// A goTestRun represents a single invocation of the 'go test' command.\r\ntype goTestRun struct {\r\n\tDir      string   // Directory where 'go test' should be executed.\r\n\tPatterns []string // Import path patterns to provide to 'go test'.\r\n}\r\n// The default behavior is to test the pattern ""golang.org/x/{repo}/...""\r\n// in the repository root.\r\nrepoPath := importPathOfRepo(st.SubName)\r\ntestRuns := []goTestRun{{\r\n\tDir:      ""gopath/src/"" + repoPath,\r\n\tPatterns: []string{repoPath + ""/...""},\r\n}}\r\n"
51430,"cmd/cover: extend coverage testing to include applications# Proposal: extend code coverage testing to include applications\r\n\r\nAuthor(s): Than McIntosh\r\n\r\nLast updated: 2022-03-02\r\n\r\nDetailed design document: [markdown](https://go.googlesource.com/proposal/+/master/design/51430-revamp-code-coverage.md), [CL 388857](https://go-review.googlesource.com/c/proposal/+/388857)\r\n\r\n## Abstract\r\n\r\nThis document contains a proposal for improving/revamping the system used in Go for code coverage testing.\r\n\r\n## Background\r\n\r\n### Current support for coverage testing\r\n\r\nThe Go toolchain currently includes support for collecting and reporting\r\ncoverage data for Golang unit tests; this facility is made available via the ""go\r\ntest -cover"" and ""go tool cover"" commands.\r\n\r\nThe current workflow for collecting coverage data is baked into ""go test""\r\ncommand; the assumption is that the source code of interest is a Go package\r\nor set of packages with associated tests.\r\n\r\nTo request coverage data for a package test run, a user can invoke the test(s)\r\nvia:\r\n\r\n```\r\n  go test -coverprofile=<filename> [package target(s)]\r\n```\r\n\r\nThis command will build the specified packages with coverage instrumentation,\r\nexecute the package tests, and write an output file to ""filename"" with the\r\ncoverage results of the run.\r\n\r\nThe resulting output file can be viewed/examined using commands such as\r\n\r\n```\r\n  go tool cover -func=<covdatafile>\r\n  go tool cover -html=<covdatafile>\r\n```\r\n\r\nUnder the hood, the implementation works by source rewriting: when ""go test"" is\r\nbuilding the specified set of package tests, it runs each package source file\r\nof interest through a source-to-source translation tool that produces an\r\ninstrumented/augmented equivalent, with instrumentation that records which\r\nportions of the code execute as the test runs.\r\n\r\nA function such as\r\n\r\n\r\n\r\nis rewritten to something like\r\n\r\n\r\n\r\nwhere ""GoCover_0_343662613637653164643337"" is a tool-generated structure with\r\nexecution counters and source position information.\r\n\r\nThe ""go test"" command also emits boilerplate code into the generated\r\n""_testmain.go"" to register each instrumented source file and unpack the coverage\r\ndata structures into something that can be easily accessed at runtime.\r\nFinally, the modified ""_testmain.go"" has code to call runtime routines that\r\nemit the coverage output file when the test completes.\r\n\r\n### Strengths and weaknesses of what we currently provide\r\n\r\nThe current implementation is simple and easy to use, and provides a good user\r\nexperience for the use case of collecting coverage data for package unit tests.\r\nSince ""go test"" is performing both the build and the invocation/execution of the\r\ntest, it can provide a nice seamless ""single command"" user experience.\r\n\r\nA key weakness of the current implementation is that it does not scale well-- it\r\nis difficult or impossible to gather coverage data for **applications** as opposed\r\nto collections of packages, and for testing scenarios involving multiple\r\nruns/executions.\r\n\r\nFor example, consider a medium-sized application such as the Go compiler (""gc"").\r\nWhile the various packages in the compiler source tree have unit tests, and one\r\ncan use ""go test"" to obtain coverage data for those tests, the unit tests by\r\nthemselves only exercise a small fraction of the code paths in the compiler that\r\none would get from actually running the compiler binary itself on a large\r\ncollection of Go source files.\r\n\r\nFor such applications, one would like to build a coverage-instrumented copy of\r\nthe entire application (""gc""), then run that instrumented application over many\r\ninputs (say, all the Go source files compiled as part of a ""make.bash"" run for\r\nmultiple GOARCH values), producing a collection of coverage data output files,\r\nand finally merge together the results to produce a report or provide a\r\nvisualization.\r\n\r\nMany folks in the Golang community have run into this problem; there are large\r\nnumbers of blog posts and other pages describing the issue, and recommending\r\nworkarounds (or providing add-on tools that help); doing a web search for\r\n""golang integration code coverage"" will turn up many pages of links.\r\n\r\nAn additional weakness in the current Go toolchain offering relates to the way\r\nin which coverage data is presented to the user from the ""go tool cover"")\r\ncommands. The reports produced are ""flat"" and not hierarchical (e.g. a flat list of\r\nfunctions, or a flat list of source files within the instrumented packages).\r\nThis way of structuring a report works well when the number of instrumented\r\npackages is small, but becomes less attractive if there are hundreds or\r\nthousands of source files being instrumented. For larger applications, it would make\r\nsense to create reports with a more hierarchical structure: first a summary by module,\r\nthen package within module, then source file within package, and so on.\r\n\r\nFinally, there are a number of long-standing problems that arise due to the use\r\nof source-to-source rewriting used by cmd/cover and the go command, including\r\n\r\n  [#23883](https://github.com/golang/go/issues/23883)\r\n  ""cmd/go: -coverpkg=all gives different coverage value when run on a\r\n      package list vs ./...""\r\n\r\n  [#23910](https://github.com/golang/go/issues/23910)\r\n  ""cmd/go: -coverpkg packages imported by all tests, even ones that\r\n      otherwise do not use it""\r\n\r\n  [#27336](https://github.com/golang/go/issues/27336)\r\n  ""cmd/go: test coverpkg panics when defining the same flag in\r\n      multiple packages""\r\n\r\nMost of these problems arise because of the introduction of additional imports\r\nin the `_testmain.go` shim created by the Go command when carrying out a coverage\r\ntest run in combination with the ""-coverpkg"" option.\r\n\r\n## Proposed changes\r\n\r\n### Building for coverage\r\n\r\nWhile the existing ""go test"" based coverage workflow will continue to be\r\nsupported, the proposal is to add coverage as a new build mode for ""go build"".\r\nIn the same way that users can build a race-detector instrumented executable\r\nusing ""go build -race"", it will be possible to build a coverage-instrumented\r\nexecutable using ""go build -cover"".\r\n\r\nTo support this goal, the plan will be to migrate the support for coverage\r\ninstrumentation into the compiler, moving away from the source-to-source\r\ntranslation approach.\r\n\r\n### Running instrumented applications\r\n\r\nApplications are deployed and run in many different ways, ranging from very\r\nsimple (direct invocation of a single executable) to very complex (e.g. gangs of\r\ncooperating processes involving multiple distinct executables). To allow for more\r\ncomplex execution/invocation scenarios, it doesn't make sense\r\nto try to serialize updates to a single coverage output data file during the\r\nrun, since this would require introducing synchronization or some other\r\nmechanism to ensure mutually exclusive access.\r\n\r\nFor non-test applications built for coverage, users will instead select an\r\noutput directory as opposed to a single file; each run of the instrumented\r\nexecutable will emit data files within that directory. Example:\r\n\r\n```\r\n$ go build -o myapp.exe -cover ...\r\n$ mkdir /tmp/mycovdata\r\n$ export GOCOVERDIR=/tmp/mycovdata\r\n$ <run test suite, resulting in multiple invocations of myapp.exe>\r\n$ go tool cover -html=/tmp/mycovdata\r\n$\r\n```\r\n\r\nFor coverage runs in the context of ""go test"", the default will continue to be\r\nemitting a single named output file when the test is run.\r\n\r\nFile names within the output directory will be chosen at runtime so as to\r\nminimize the possibility of collisions, e.g. possibly something to the effect of\r\n\r\n```\r\n  covdata.<metafilehash>.<processid>.<nanotimevalue>.out\r\n```\r\n\r\nWhen invoked for reporting, the coverage tool itself will test its input\r\nargument to see whether it is a file or a directory; in the latter case, it will\r\nread and process all of the files in the specified directory.\r\n\r\n### Programs that call os.Exit(), or never terminate\r\n\r\nWith the current coverage tooling, if a Go unit test invokes `os.Exit()` passing a\r\nnon-zero exit status, the instrumented test binary will terminate immediately\r\nwithout writing an output data file. If a test invokes `os.Exit()` passing a zero exit\r\nstatus, this will result in a panic.\r\n\r\nFor unit tests, this is perfectly acceptable-- people writing tests generally\r\nhave no incentive or need to call `os.Exit`, it simply would not add anything in\r\nterms of test functionality. Real applications routinely finish by calling `os.Exit`,\r\nhowever, including cases where a non-zero exit status is reported.\r\nIntegration test suites nearly always include tests that ensure an application\r\nfails properly (e.g. returns with non-zero exit status) if the application\r\nencounters an invalid input. The Go project's `all.bash` test suite has many of these sorts of tests,\r\nincluding test cases that are expected to cause compiler or linker errors (and\r\nto ensure that the proper error paths in the tool are covered).\r\n\r\nTo support collecting coverage data from such programs, the Go runtime will need\r\nto be extended to detect `os.Exit` calls from instrumented programs and ensure (in\r\nsome form) that coverage data is written out before the program terminates.\r\nThis could be accomplished either by introducing new hooks into the `os.Exit`\r\ncode, or possibly by opening and mmap'ing the coverage output file earlier in\r\nthe run, then letting writes to counter variables go directly to an mmap'd\r\nregion, which would eliminated the need to close the file on exit (credit to\r\nAustin for this idea).\r\n\r\nTo handle server programs (which in many cases run forever and may not call\r\nexit), APIs will be provided for writing out a coverage profile under user\r\ncontrol, e.g. something along the lines of\r\n\r\n\r\n \r\nIn addition to OpenCoverageOutputFile() and Emit() as above, an Emit() function\r\nwill be provided that accepts an io.Writer (to allow coverage profiles to be\r\nwritten to a network connection or pipe, in case writing to a file is not\r\npossible).\r\n\r\n### Coverage and modules\r\n\r\nMost modern Go programs make extensive use of dependent third-party packages;\r\nwith the advent of Go modules, we now have systems in place to explicitly\r\nidentify and track these dependencies.\r\n\r\nWhen application writers add a third-party dependency, in most cases the authors\r\nwill not be interested in having that dependency's code count towards the\r\n""percent of lines covered"" metric for their application (there will definitely\r\nbe exceptions to this rule, but it should hold in most cases).\r\n\r\nIt makes sense to leverage information from the Go module system when collecting\r\ncode coverage data. Within the context of the module system, a given package feeding\r\ninto the build of an application will have one of the three following dispositions (relative to\r\nthe main module):\r\n\r\n* Contained: package is part of the module itself (not a dependency)\r\n* Dependent: package is a direct or indirect dependency of the module (appearing in go.mod)\r\n* Stdlib: package is part of the Go standard library / runtime\r\n\r\nWith this in mind, the proposal when building an application for coverage will\r\nbe to instrument every package that feeds into the build, but record the\r\ndisposition for each package (as above), then allow the user to select the\r\nproper granularity or treatment of dependencies when viewing or reporting.\r\n\r\nAs an example, consider the [Delve](https://github.com/go-delve/delve) debugger\r\n(a Go application). One entry in the Delve V1.8 go.mod file is:\r\n\r\n        github.com/cosiner/argv v0.1.0\r\n\r\nThis package (""argv"") has about 500 lines of Go code and a couple dozen Go\r\nfunctions; Delve uses only a single exported function. For a developer trying to\r\ngenerate a coverage report for Delve, it seems unlikely that they would want to\r\ninclude ""argv"" as part of the coverage statistics (percent lines/functions executed),\r\ngiven the secondary and very modest role that the dependency plays.\r\n\r\nOn the other hand, it's possible to imagine scenarios in which a specific\r\ndependency plays an integral or important role for a given application, meaning\r\nthat a developer might want to include the package in the applications coverage\r\nstatistics.\r\n\r\n### Merging coverage data output files\r\n\r\nAs part of this work the proposal to enhance the ""go tool cover"" command to\r\nprovide a profile merging facility, so that collection of coverage data files\r\n(emitted from multiple runs of an instrumented executable) can be merged into a\r\nsingle summary output file. Example usage:\r\n\r\n```\r\n  $ go tool cover -merge -coveragedir=/tmp/mycovdata -o finalprofile.out\r\n  $\r\n```\r\n\r\nThe merge tool will be capable of writing files in the existing (legacy)\r\ncoverage output file format, if requested by the user.\r\n\r\nIn addition to a ""merge"" facility, it may also be interesting to support other\r\noperations such as intersect and subtract (more on this later).\r\n\r\n### Differential coverage\r\n\r\nWhen fixing a bug in an application, it is common practice to add a new unit\r\ntest in addition to the code change that comprises the actual fix.\r\nWhen using code coverage, users may want to learn how many of the changed lines\r\nin their code are actually covered when the new test runs.\r\n\r\nAssuming we have a set of N coverage data output files (corresponding to those\r\ngenerated when running the existing set of tests for a package) and a new\r\ncoverage data file generated from a new testpoint, it would be useful to provide\r\na tool to ""subtract"" out the coverage information from the first set from the\r\nsecond file. This would leave just the set of new lines / regions that the new test causes to\r\nbe covered above and beyond what is already there.\r\n\r\nThis feature (profile subtraction) would make it much easier to write tooling\r\nthat would provide feedback to developers on whether newly written unit tests\r\nare covering new code in the way that the developer intended.\r\n\r\n## Design details\r\n\r\nPlease see the design document for details on proposed changes to the compiler, etc.\r\n\r\n## Implementation timetable\r\n\r\nPlan is for thanm@ to implement this in go 1.19 time frame.\r\n\r\n## Prerequisite Changes\r\n\r\nN/A\r\n\r\n## Preliminary Results\r\n\r\nNo data available yet.\r\n\r\n",Proposal|Proposal-Accepted|compiler/runtime,thanm,"# Proposal: extend code coverage testing to include applications\r\n\r\nAuthor(s): Than McIntosh\r\n\r\nLast updated: 2022-03-02\r\n\r\nDetailed design document: [markdown](https://go.googlesource.com/proposal/+/master/design/51430-revamp-code-coverage.md), [CL 388857](https://go-review.googlesource.com/c/proposal/+/388857)\r\n\r\n## Abstract\r\n\r\nThis document contains a proposal for improving/revamping the system used in Go for code coverage testing.\r\n\r\n## Background\r\n\r\n### Current support for coverage testing\r\n\r\nThe Go toolchain currently includes support for collecting and reporting\r\ncoverage data for Golang unit tests; this facility is made available via the ""go\r\ntest -cover"" and ""go tool cover"" commands.\r\n\r\nThe current workflow for collecting coverage data is baked into ""go test""\r\ncommand; the assumption is that the source code of interest is a Go package\r\nor set of packages with associated tests.\r\n\r\nTo request coverage data for a package test run, a user can invoke the test(s)\r\nvia:\r\n\r\n```\r\n  go test -coverprofile=<filename> [package target(s)]\r\n```\r\n\r\nThis command will build the specified packages with coverage instrumentation,\r\nexecute the package tests, and write an output file to ""filename"" with the\r\ncoverage results of the run.\r\n\r\nThe resulting output file can be viewed/examined using commands such as\r\n\r\n```\r\n  go tool cover -func=<covdatafile>\r\n  go tool cover -html=<covdatafile>\r\n```\r\n\r\nUnder the hood, the implementation works by source rewriting: when ""go test"" is\r\nbuilding the specified set of package tests, it runs each package source file\r\nof interest through a source-to-source translation tool that produces an\r\ninstrumented/augmented equivalent, with instrumentation that records which\r\nportions of the code execute as the test runs.\r\n\r\nA function such as\r\n\r\n```Go\r\n  func ABC(x int) {\r\n    if x < 0 {\r\n      bar()\r\n    }\r\n  }\r\n```\r\n\r\nis rewritten to something like\r\n\r\n```Go\r\n  func ABC(x int) {GoCover_0_343662613637653164643337.Count[9] = 1;\r\n    if x < 0 {GoCover_0_343662613637653164643337.Count[10] = 1;\r\n      bar()\r\n    }\r\n  }\r\n```\r\n\r\nwhere ""GoCover_0_343662613637653164643337"" is a tool-generated structure with\r\nexecution counters and source position information.\r\n\r\nThe ""go test"" command also emits boilerplate code into the generated\r\n""_testmain.go"" to register each instrumented source file and unpack the coverage\r\ndata structures into something that can be easily accessed at runtime.\r\nFinally, the modified ""_testmain.go"" has code to call runtime routines that\r\nemit the coverage output file when the test completes.\r\n\r\n### Strengths and weaknesses of what we currently provide\r\n\r\nThe current implementation is simple and easy to use, and provides a good user\r\nexperience for the use case of collecting coverage data for package unit tests.\r\nSince ""go test"" is performing both the build and the invocation/execution of the\r\ntest, it can provide a nice seamless ""single command"" user experience.\r\n\r\nA key weakness of the current implementation is that it does not scale well-- it\r\nis difficult or impossible to gather coverage data for **applications** as opposed\r\nto collections of packages, and for testing scenarios involving multiple\r\nruns/executions.\r\n\r\nFor example, consider a medium-sized application such as the Go compiler (""gc"").\r\nWhile the various packages in the compiler source tree have unit tests, and one\r\ncan use ""go test"" to obtain coverage data for those tests, the unit tests by\r\nthemselves only exercise a small fraction of the code paths in the compiler that\r\none would get from actually running the compiler binary itself on a large\r\ncollection of Go source files.\r\n\r\nFor such applications, one would like to build a coverage-instrumented copy of\r\nthe entire application (""gc""), then run that instrumented application over many\r\ninputs (say, all the Go source files compiled as part of a ""make.bash"" run for\r\nmultiple GOARCH values), producing a collection of coverage data output files,\r\nand finally merge together the results to produce a report or provide a\r\nvisualization.\r\n\r\nMany folks in the Golang community have run into this problem; there are large\r\nnumbers of blog posts and other pages describing the issue, and recommending\r\nworkarounds (or providing add-on tools that help); doing a web search for\r\n""golang integration code coverage"" will turn up many pages of links.\r\n\r\nAn additional weakness in the current Go toolchain offering relates to the way\r\nin which coverage data is presented to the user from the ""go tool cover"")\r\ncommands. The reports produced are ""flat"" and not hierarchical (e.g. a flat list of\r\nfunctions, or a flat list of source files within the instrumented packages).\r\nThis way of structuring a report works well when the number of instrumented\r\npackages is small, but becomes less attractive if there are hundreds or\r\nthousands of source files being instrumented. For larger applications, it would make\r\nsense to create reports with a more hierarchical structure: first a summary by module,\r\nthen package within module, then source file within package, and so on.\r\n\r\nFinally, there are a number of long-standing problems that arise due to the use\r\nof source-to-source rewriting used by cmd/cover and the go command, including\r\n\r\n  [#23883](https://github.com/golang/go/issues/23883)\r\n  ""cmd/go: -coverpkg=all gives different coverage value when run on a\r\n      package list vs ./...""\r\n\r\n  [#23910](https://github.com/golang/go/issues/23910)\r\n  ""cmd/go: -coverpkg packages imported by all tests, even ones that\r\n      otherwise do not use it""\r\n\r\n  [#27336](https://github.com/golang/go/issues/27336)\r\n  ""cmd/go: test coverpkg panics when defining the same flag in\r\n      multiple packages""\r\n\r\nMost of these problems arise because of the introduction of additional imports\r\nin the `_testmain.go` shim created by the Go command when carrying out a coverage\r\ntest run in combination with the ""-coverpkg"" option.\r\n\r\n## Proposed changes\r\n\r\n### Building for coverage\r\n\r\nWhile the existing ""go test"" based coverage workflow will continue to be\r\nsupported, the proposal is to add coverage as a new build mode for ""go build"".\r\nIn the same way that users can build a race-detector instrumented executable\r\nusing ""go build -race"", it will be possible to build a coverage-instrumented\r\nexecutable using ""go build -cover"".\r\n\r\nTo support this goal, the plan will be to migrate the support for coverage\r\ninstrumentation into the compiler, moving away from the source-to-source\r\ntranslation approach.\r\n\r\n### Running instrumented applications\r\n\r\nApplications are deployed and run in many different ways, ranging from very\r\nsimple (direct invocation of a single executable) to very complex (e.g. gangs of\r\ncooperating processes involving multiple distinct executables). To allow for more\r\ncomplex execution/invocation scenarios, it doesn't make sense\r\nto try to serialize updates to a single coverage output data file during the\r\nrun, since this would require introducing synchronization or some other\r\nmechanism to ensure mutually exclusive access.\r\n\r\nFor non-test applications built for coverage, users will instead select an\r\noutput directory as opposed to a single file; each run of the instrumented\r\nexecutable will emit data files within that directory. Example:\r\n\r\n```\r\n$ go build -o myapp.exe -cover ...\r\n$ mkdir /tmp/mycovdata\r\n$ export GOCOVERDIR=/tmp/mycovdata\r\n$ <run test suite, resulting in multiple invocations of myapp.exe>\r\n$ go tool cover -html=/tmp/mycovdata\r\n$\r\n```\r\n\r\nFor coverage runs in the context of ""go test"", the default will continue to be\r\nemitting a single named output file when the test is run.\r\n\r\nFile names within the output directory will be chosen at runtime so as to\r\nminimize the possibility of collisions, e.g. possibly something to the effect of\r\n\r\n```\r\n  covdata.<metafilehash>.<processid>.<nanotimevalue>.out\r\n```\r\n\r\nWhen invoked for reporting, the coverage tool itself will test its input\r\nargument to see whether it is a file or a directory; in the latter case, it will\r\nread and process all of the files in the specified directory.\r\n\r\n### Programs that call os.Exit(), or never terminate\r\n\r\nWith the current coverage tooling, if a Go unit test invokes `os.Exit()` passing a\r\nnon-zero exit status, the instrumented test binary will terminate immediately\r\nwithout writing an output data file. If a test invokes `os.Exit()` passing a zero exit\r\nstatus, this will result in a panic.\r\n\r\nFor unit tests, this is perfectly acceptable-- people writing tests generally\r\nhave no incentive or need to call `os.Exit`, it simply would not add anything in\r\nterms of test functionality. Real applications routinely finish by calling `os.Exit`,\r\nhowever, including cases where a non-zero exit status is reported.\r\nIntegration test suites nearly always include tests that ensure an application\r\nfails properly (e.g. returns with non-zero exit status) if the application\r\nencounters an invalid input. The Go project's `all.bash` test suite has many of these sorts of tests,\r\nincluding test cases that are expected to cause compiler or linker errors (and\r\nto ensure that the proper error paths in the tool are covered).\r\n\r\nTo support collecting coverage data from such programs, the Go runtime will need\r\nto be extended to detect `os.Exit` calls from instrumented programs and ensure (in\r\nsome form) that coverage data is written out before the program terminates.\r\nThis could be accomplished either by introducing new hooks into the `os.Exit`\r\ncode, or possibly by opening and mmap'ing the coverage output file earlier in\r\nthe run, then letting writes to counter variables go directly to an mmap'd\r\nregion, which would eliminated the need to close the file on exit (credit to\r\nAustin for this idea).\r\n\r\nTo handle server programs (which in many cases run forever and may not call\r\nexit), APIs will be provided for writing out a coverage profile under user\r\ncontrol, e.g. something along the lines of\r\n\r\n```Go\r\n  import ""<someOfficialPath>/cover""\r\n\r\n  var *coverageoutdir flag.String(...)\r\n\r\n  func server() {\r\n    ...\r\n    if *coverageoutdir != """" {\r\n        f, err := cover.OpenCoverageOutputFile(...)\r\n        if err != nil {\r\n            log.Fatal(""..."")\r\n\t   }\r\n    }\r\n    for {\r\n      ...\r\n      if <received signal to emit coverage data> {\r\n        err := f.Emit()\r\n        if err != nil {\r\n            log.Fatalf(""error %v emitting ..."", err)\r\n        }\r\n      }\r\n    }\r\n\r\n```\r\n \r\nIn addition to OpenCoverageOutputFile() and Emit() as above, an Emit() function\r\nwill be provided that accepts an io.Writer (to allow coverage profiles to be\r\nwritten to a network connection or pipe, in case writing to a file is not\r\npossible).\r\n\r\n### Coverage and modules\r\n\r\nMost modern Go programs make extensive use of dependent third-party packages;\r\nwith the advent of Go modules, we now have systems in place to explicitly\r\nidentify and track these dependencies.\r\n\r\nWhen application writers add a third-party dependency, in most cases the authors\r\nwill not be interested in having that dependency's code count towards the\r\n""percent of lines covered"" metric for their application (there will definitely\r\nbe exceptions to this rule, but it should hold in most cases).\r\n\r\nIt makes sense to leverage information from the Go module system when collecting\r\ncode coverage data. Within the context of the module system, a given package feeding\r\ninto the build of an application will have one of the three following dispositions (relative to\r\nthe main module):\r\n\r\n* Contained: package is part of the module itself (not a dependency)\r\n* Dependent: package is a direct or indirect dependency of the module (appearing in go.mod)\r\n* Stdlib: package is part of the Go standard library / runtime\r\n\r\nWith this in mind, the proposal when building an application for coverage will\r\nbe to instrument every package that feeds into the build, but record the\r\ndisposition for each package (as above), then allow the user to select the\r\nproper granularity or treatment of dependencies when viewing or reporting.\r\n\r\nAs an example, consider the [Delve](https://github.com/go-delve/delve) debugger\r\n(a Go application). One entry in the Delve V1.8 go.mod file is:\r\n\r\n        github.com/cosiner/argv v0.1.0\r\n\r\nThis package (""argv"") has about 500 lines of Go code and a couple dozen Go\r\nfunctions; Delve uses only a single exported function. For a developer trying to\r\ngenerate a coverage report for Delve, it seems unlikely that they would want to\r\ninclude ""argv"" as part of the coverage statistics (percent lines/functions executed),\r\ngiven the secondary and very modest role that the dependency plays.\r\n\r\nOn the other hand, it's possible to imagine scenarios in which a specific\r\ndependency plays an integral or important role for a given application, meaning\r\nthat a developer might want to include the package in the applications coverage\r\nstatistics.\r\n\r\n### Merging coverage data output files\r\n\r\nAs part of this work the proposal to enhance the ""go tool cover"" command to\r\nprovide a profile merging facility, so that collection of coverage data files\r\n(emitted from multiple runs of an instrumented executable) can be merged into a\r\nsingle summary output file. Example usage:\r\n\r\n```\r\n  $ go tool cover -merge -coveragedir=/tmp/mycovdata -o finalprofile.out\r\n  $\r\n```\r\n\r\nThe merge tool will be capable of writing files in the existing (legacy)\r\ncoverage output file format, if requested by the user.\r\n\r\nIn addition to a ""merge"" facility, it may also be interesting to support other\r\noperations such as intersect and subtract (more on this later).\r\n\r\n### Differential coverage\r\n\r\nWhen fixing a bug in an application, it is common practice to add a new unit\r\ntest in addition to the code change that comprises the actual fix.\r\nWhen using code coverage, users may want to learn how many of the changed lines\r\nin their code are actually covered when the new test runs.\r\n\r\nAssuming we have a set of N coverage data output files (corresponding to those\r\ngenerated when running the existing set of tests for a package) and a new\r\ncoverage data file generated from a new testpoint, it would be useful to provide\r\na tool to ""subtract"" out the coverage information from the first set from the\r\nsecond file. This would leave just the set of new lines / regions that the new test causes to\r\nbe covered above and beyond what is already there.\r\n\r\nThis feature (profile subtraction) would make it much easier to write tooling\r\nthat would provide feedback to developers on whether newly written unit tests\r\nare covering new code in the way that the developer intended.\r\n\r\n## Design details\r\n\r\nPlease see the design document for details on proposed changes to the compiler, etc.\r\n\r\n## Implementation timetable\r\n\r\nPlan is for thanm@ to implement this in go 1.19 time frame.\r\n\r\n## Prerequisite Changes\r\n\r\nN/A\r\n\r\n## Preliminary Results\r\n\r\nNo data available yet.\r\n\r\n",Go\r\n  func ABC(x int) {\r\n    if x < 0 {\r\n      bar()\r\n    }\r\n  }\r\n
51195,"proposal: fmt: add Formatter fallbackImplementing `fmt.Formatter` overrides all other formatting. This makes it difficult to selectively implement verbs: you must either implement every verb and flag combination (including width, etc.) or leave them unimplemented.\r\n\r\nFor example, I have a `UUID` type. Its `String` method defaults to the 36-byte encoding with hyphens. I also want to add support for `%x` so users can encode it as a 32-byte hexadecimal string. Because `UUID` implements `fmt.Stringer`, I have to add `%x` support via `fmt.Formatter` (otherwise `%x` will incorrectly encode the 36-byte encoding as hexadecimal). But this means I lose `%q`, `%X`, `%v`, etc. support. If I want those, I have to implement them myself. See https://go.dev/play/p/lb8mkyhN3-L\r\n\r\nIdeally, the `fmt` package would allow me to write something like\r\n\r\n\r\n\r\nAs another example, I wrote this code (which admittedly I am not very proud of, but hey) to work around the same issue: https://github.com/ericlagergren/decimal/blob/aca2edc11f73e28a0e93d592cc6c3de4a352a81c/big.go#L895\r\n\r\n## Proposal Template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\nExperienced (have been writing Go since 1.3 or so).\r\n\r\n- What other languages do you have experience with?\r\nVarying degrees of familiarity with C, Java, Python, JavaScript, Bash, Assembly, etc.\r\n\r\n- Would this change make Go easier or harder to learn, and why?\r\nN/A\r\n\r\n- Has this idea, or one like it, been proposed before?\r\nDid not immediately find anything.\r\n\r\n- Who does this proposal help, and why?\r\nMe and other users of the `fmt` package.\r\n\r\n- What is the proposed change?\r\n\r\nAdd a mechanism to the `fmt` package to allow `Formatter` implementations to ""fall back"" to the default formatting. For example, an API _similar to_\r\n\r\n\r\n\r\nThe specific API is mostly unimportant to me.\r\n\r\n- Is this change backward compatible?\r\nYep.\r\n\r\n- Show example code before and after the change.\r\nSee above.\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n  Very likely none.\r\n  - What is the compile time cost?\r\n  N/A\r\n  - What is the run time cost?\r\n  Depends on how it's implemented.\r\n\r\n- Can you describe a possible implementation?\r\nSee above.\r\n\r\n- How would the language spec change?\r\nN/A\r\n\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\nIt augments `fmt.Formatter`. It does not duplicate any existing functionality.\r\n\r\n- Is the goal of this change a performance improvement?\r\nNope.\r\n\r\n- Does this affect error handling?\r\nNope.\r\n\r\n- Is this about generics?\r\nNope.",Proposal,robpike,"Implementing `fmt.Formatter` overrides all other formatting. This makes it difficult to selectively implement verbs: you must either implement every verb and flag combination (including width, etc.) or leave them unimplemented.\r\n\r\nFor example, I have a `UUID` type. Its `String` method defaults to the 36-byte encoding with hyphens. I also want to add support for `%x` so users can encode it as a 32-byte hexadecimal string. Because `UUID` implements `fmt.Stringer`, I have to add `%x` support via `fmt.Formatter` (otherwise `%x` will incorrectly encode the 36-byte encoding as hexadecimal). But this means I lose `%q`, `%X`, `%v`, etc. support. If I want those, I have to implement them myself. See https://go.dev/play/p/lb8mkyhN3-L\r\n\r\nIdeally, the `fmt` package would allow me to write something like\r\n\r\n```go\r\n// func Fallback(s State, v rune, arg interface{}) Formatter\r\n\r\nfunc (u UUID) Format(s fmt.State, v rune) {\r\n    switch v {\r\n    case 'x', 'X':\r\n        fmt.Fprintf(s, ""%""+string(v), u[:])\r\n    default:\r\n        fmt.Fprintf(s, fmt.Fallback(s, v, u))\r\n    }\r\n}\r\n```\r\n\r\nAs another example, I wrote this code (which admittedly I am not very proud of, but hey) to work around the same issue: https://github.com/ericlagergren/decimal/blob/aca2edc11f73e28a0e93d592cc6c3de4a352a81c/big.go#L895\r\n\r\n## Proposal Template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\nExperienced (have been writing Go since 1.3 or so).\r\n\r\n- What other languages do you have experience with?\r\nVarying degrees of familiarity with C, Java, Python, JavaScript, Bash, Assembly, etc.\r\n\r\n- Would this change make Go easier or harder to learn, and why?\r\nN/A\r\n\r\n- Has this idea, or one like it, been proposed before?\r\nDid not immediately find anything.\r\n\r\n- Who does this proposal help, and why?\r\nMe and other users of the `fmt` package.\r\n\r\n- What is the proposed change?\r\n\r\nAdd a mechanism to the `fmt` package to allow `Formatter` implementations to ""fall back"" to the default formatting. For example, an API _similar to_\r\n\r\n```go\r\n// Fallback returns a Formatter that formats arg\r\n// using the default formatting for the State and\r\n// verb.\r\nfunc Fallback(s State, v rune, arg interface{}) Formatter {\r\n   return fallback{v: arg}\r\n}\r\n\r\ntype fallback struct {\r\n    v interface{}\r\n}\r\n\r\nfunc (p *pp) handleMethods(verb rune) (handled bool0 {\r\n    [...]\r\n    if f, ok := v.(fallback); ok {\r\n        p.arg = f.arg\r\n    } else if formatter, ok := v.(Formatter); ok {\r\n        [...]\r\n    }\r\n}\r\n```\r\n\r\nThe specific API is mostly unimportant to me.\r\n\r\n- Is this change backward compatible?\r\nYep.\r\n\r\n- Show example code before and after the change.\r\nSee above.\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n  Very likely none.\r\n  - What is the compile time cost?\r\n  N/A\r\n  - What is the run time cost?\r\n  Depends on how it's implemented.\r\n\r\n- Can you describe a possible implementation?\r\nSee above.\r\n\r\n- How would the language spec change?\r\nN/A\r\n\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\nIt augments `fmt.Formatter`. It does not duplicate any existing functionality.\r\n\r\n- Is the goal of this change a performance improvement?\r\nNope.\r\n\r\n- Does this affect error handling?\r\nNope.\r\n\r\n- Is this about generics?\r\nNope.","go\r\n// func Fallback(s State, v rune, arg interface{}) Formatter\r\n\r\nfunc (u UUID) Format(s fmt.State, v rune) {\r\n    switch v {\r\n    case 'x', 'X':\r\n        fmt.Fprintf(s, ""%""+string(v), u[:])\r\n    default:\r\n        fmt.Fprintf(s, fmt.Fallback(s, v, u))\r\n    }\r\n}\r\n"
51139,"go/types, types2: explore ""interleaved"" type inference by combining function argument type inference with constraint type inferenceThis is extracted from an [old comment](https://go-review.googlesource.com/c/go/+/294469/33..109/doc/go_spec.html#b4458) by @rsc on the behavior of type inference as described in the spec (and as currently implemented). Given the following code:\r\n\r\nType inference passes in _separate_ phases of function argument type inference and constraint type inference: In the first phase (function arguments) the following matches are established: `S -> []MyPtr` and `T -> *int`. At this point we have all type arguments and we're done. After instantiation of `Append` we have the non-generic function:\r\n\r\nand now `[]MyPtr` doesn't implement `~[]*int` (`MyPtr` is not identical to `*int`).\r\n\r\nPer the comment by @rsc, this could work if function argument type inference and constraint type inference were interleaved (and inference using typed function arguments would stop as soon as all type arguments are known).\r\n\r\nIn such an interleaved world, as soon as we have established the mapping `S -> []MyPtr` constraint type inference would match `[]MyPtr` against `[]T` and establish the mapping `T -> MyPtr`. At this point all type arguments are inferred and upon instantiation of `Append` we would get:\r\n\r\nCalling this version of `Append` would work because the unnamed type `*int` can be assigned to the named type `MyPtr`.\r\n\r\nIt might even be possible to apply constraint type inference to constraints that don't have a single specific type: As soon as we have a type argument inferred from a function argument it could be matched against every specific type in the constraint.\r\n\r\nThe interleaved type inference behavior is more powerful in this specific case (and thus we could change this in a backward-compatible way).\r\n\r\n@rsc, @ianlancetaylor, @findleyr for comments.\r\n",NeedsInvestigation|FrozenDueToAge|early-in-cycle|generics|TypeInference,griesemer,"This is extracted from an [old comment](https://go-review.googlesource.com/c/go/+/294469/33..109/doc/go_spec.html#b4458) by @rsc on the behavior of type inference as described in the spec (and as currently implemented). Given the following code:\r\n```Go\r\n// user-defined implementation of append\r\nfunc Append[S ~[]T, T any](s S, x ...T) S { /* implementation of append */ return s }\r\n\r\nfunc _() {\r\n        type MyPtr *int\r\n        var x []MyPtr\r\n        _ = append(x, new(int))  // built-in append: ok\r\n        _ = Append(x, new(int))  // user-defined append, not ok: []MyPtr does not implement ~[]*int\r\n}\r\n```\r\nType inference passes in _separate_ phases of function argument type inference and constraint type inference: In the first phase (function arguments) the following matches are established: `S -> []MyPtr` and `T -> *int`. At this point we have all type arguments and we're done. After instantiation of `Append` we have the non-generic function:\r\n```Go\r\nfunc Append(s []*int, x ...*int) []MyPtr\r\n```\r\nand now `[]MyPtr` doesn't implement `~[]*int` (`MyPtr` is not identical to `*int`).\r\n\r\nPer the comment by @rsc, this could work if function argument type inference and constraint type inference were interleaved (and inference using typed function arguments would stop as soon as all type arguments are known).\r\n\r\nIn such an interleaved world, as soon as we have established the mapping `S -> []MyPtr` constraint type inference would match `[]MyPtr` against `[]T` and establish the mapping `T -> MyPtr`. At this point all type arguments are inferred and upon instantiation of `Append` we would get:\r\n```Go\r\nfunc Append(s []MyPtr, x ...MyPtr) []MyPtr\r\n```\r\nCalling this version of `Append` would work because the unnamed type `*int` can be assigned to the named type `MyPtr`.\r\n\r\nIt might even be possible to apply constraint type inference to constraints that don't have a single specific type: As soon as we have a type argument inferred from a function argument it could be matched against every specific type in the constraint.\r\n\r\nThe interleaved type inference behavior is more powerful in this specific case (and thus we could change this in a backward-compatible way).\r\n\r\n@rsc, @ianlancetaylor, @findleyr for comments.\r\n","Go\r\n// user-defined implementation of append\r\nfunc Append[S ~[]T, T any](s S, x ...T) S { /* implementation of append */ return s }\r\n\r\nfunc _() {\r\n        type MyPtr *int\r\n        var x []MyPtr\r\n        _ = append(x, new(int))  // built-in append: ok\r\n        _ = Append(x, new(int))  // user-defined append, not ok: []MyPtr does not implement ~[]*int\r\n}\r\n"
51025,"cmd/compile: missing `T.m is a field, not a method` error upon assignments to interfacesThe 1.17 compiler did report this extra error. See `fixedbugs/bug231.go` for a test case.\r\n\r\n\r\n\r\ncc: @findleyr \r\n",NeedsFix|FrozenDueToAge|compiler/runtime,griesemer,"The 1.17 compiler did report this extra error. See `fixedbugs/bug231.go` for a test case.\r\n\r\n```Go\r\npackage main\r\n\r\ntype I interface{ m() }\r\ntype T struct{ m func() }\r\ntype M struct{}\r\n\r\nfunc (M) m() {}\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar m M\r\n\tvar i I\r\n\r\n\ti = m\r\n\t// types2 does not give extra error ""T.m is a field, not a method""\r\n\ti = t // ERROR ""not a method|has no methods|does not implement I""\r\n\t_ = i\r\n}\r\n```\r\n\r\ncc: @findleyr \r\n","Go\r\npackage main\r\n\r\ntype I interface{ m() }\r\ntype T struct{ m func() }\r\ntype M struct{}\r\n\r\nfunc (M) m() {}\r\n\r\nfunc main() {\r\n\tvar t T\r\n\tvar m M\r\n\tvar i I\r\n\r\n\ti = m\r\n\t// types2 does not give extra error ""T.m is a field, not a method""\r\n\ti = t // ERROR ""not a method|has no methods|does not implement I""\r\n\t_ = i\r\n}\r\n"
51014,"x/tools: analysis does not work if there's a type error even with `RunDespiteErrors: true`\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. The [problematic code](https://github.com/golang/tools/blob/4da8ceb6f1ad02b6af00ed2d8d62df1d56a07d2f/go/analysis/internal/checker/checker.go#L156-L167) is latest.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kdy1/Library/Caches/go-build""\r\nGOENV=""/Users/kdy1/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kdy1/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kdy1/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pw/7l7d6f6s6ngb9z17pc912mtc0000gn/T/go-build3641127775=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n\r\n\r\nWhere slicefix is\r\n```\r\npackage slicefix\r\n\r\nimport (\r\n\t""log""\r\n\r\n\t""golang.org/x/tools/go/analysis""\r\n)\r\n\r\nvar (\r\n\tSliceFix = analysis.Analyzer{\r\n\t\tName:             ""slicefix"",\r\n\t\tDoc:              ""Auto dereference of slices"",\r\n\t\tRun:              run,\r\n\t\tRunDespiteErrors: true,\r\n\t}\r\n)\r\n\r\nfunc run(pass *analysis.Pass) (interface{}, error) {\r\n\tlog.Fatalf(""Run"")\r\n\r\n\treturn nil, nil\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected the analysis to be run, because I set `RunDespiteErrors` to true.\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n/Users/kdy1/projects/tsc/codemap/loc.go:27:23: invalid argument: arr (variable of type *[]string) for len\r\nfixer: error during loading\r\n```",NeedsInvestigation|FrozenDueToAge|Tools|Analysis,zpavlinovic,"\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n\r\n\r\n<pre>\r\n\u276f go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes. The [problematic code](https://github.com/golang/tools/blob/4da8ceb6f1ad02b6af00ed2d8d62df1d56a07d2f/go/analysis/internal/checker/checker.go#L156-L167) is latest.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/kdy1/Library/Caches/go-build""\r\nGOENV=""/Users/kdy1/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/kdy1/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/kdy1/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pw/7l7d6f6s6ngb9z17pc912mtc0000gn/T/go-build3641127775=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/tools/go/analysis/multichecker""\r\n\t""my.pkg/internal/devtools/fixer/slicefix""\r\n)\r\n\r\nfunc main() {\r\n\t//singlechecker.Main(&slicefix.SliceFix)\r\n\tmultichecker.Main(&slicefix.SliceFix)\r\n}\r\n\r\n```\r\n\r\nWhere slicefix is\r\n```\r\npackage slicefix\r\n\r\nimport (\r\n\t""log""\r\n\r\n\t""golang.org/x/tools/go/analysis""\r\n)\r\n\r\nvar (\r\n\tSliceFix = analysis.Analyzer{\r\n\t\tName:             ""slicefix"",\r\n\t\tDoc:              ""Auto dereference of slices"",\r\n\t\tRun:              run,\r\n\t\tRunDespiteErrors: true,\r\n\t}\r\n)\r\n\r\nfunc run(pass *analysis.Pass) (interface{}, error) {\r\n\tlog.Fatalf(""Run"")\r\n\r\n\treturn nil, nil\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected the analysis to be run, because I set `RunDespiteErrors` to true.\r\n\r\n\r\n### What did you see instead?\r\n\r\n\r\n```\r\n/Users/kdy1/projects/tsc/codemap/loc.go:27:23: invalid argument: arr (variable of type *[]string) for len\r\nfixer: error during loading\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t""golang.org/x/tools/go/analysis/multichecker""\r\n\t""my.pkg/internal/devtools/fixer/slicefix""\r\n)\r\n\r\nfunc main() {\r\n\t//singlechecker.Main(&slicefix.SliceFix)\r\n\tmultichecker.Main(&slicefix.SliceFix)\r\n}\r\n\r\n"
51006,"go/types, types2: allow choice between reg. expression or not in ERROR test comments`go/types` and `types2` (and the `syntax` package) rely on `ERROR` comments in test cases. Such a comment accepts a regular expression pattern that is then matched against the expected error:\r\n\r\nOften we just want to see if the error string appears verbatim (as a substring) in the error output, we don't need reg. expression matching. If we could choose a non-regexp string in those cases, we wouldn't need to escape various characters, which would make these `ERROR` comments more readable.\r\n\r\nExample:\r\n\r\nwould become\r\n\r\nThe non-regexp pattern might be the more common case. Maybe we could have `ERROR` and `ERRORx` (the latter is for regexp. matching).\r\n\r\ncc: @findleyr ",NeedsFix|FrozenDueToAge,griesemer,"`go/types` and `types2` (and the `syntax` package) rely on `ERROR` comments in test cases. Such a comment accepts a regular expression pattern that is then matched against the expected error:\r\n```Go\r\n// ERROR regexp pattern\r\n```\r\nOften we just want to see if the error string appears verbatim (as a substring) in the error output, we don't need reg. expression matching. If we could choose a non-regexp string in those cases, we wouldn't need to escape various characters, which would make these `ERROR` comments more readable.\r\n\r\nExample:\r\n```Go\r\n// ERROR \\*T2 does not implement I1 \\(wrong type for method foo\\)\\n\\t\\thave foo\\(x int\\)\\n\\t\\twant foo\\(\\)\r\n```\r\nwould become\r\n```Go\r\n// ERROR *T2 does not implement I1 (wrong type for method foo)\\n\\t\\thave foo(x int)\\n\\t\\twant foo()\r\n```\r\nThe non-regexp pattern might be the more common case. Maybe we could have `ERROR` and `ERRORx` (the latter is for regexp. matching).\r\n\r\ncc: @findleyr ",Go\r\n// ERROR regexp pattern\r\n
50932,"go/types, types2: superfluous extra error message when type inference fails\r\nproduces two errors:\r\n```\r\ntestdata/manual.go2:13:16: cannot infer B (testdata/manual.go2:10:11)\r\ntestdata/manual.go2:13:16: got 1 arguments but 2 type parameters\r\n```\r\nOne would suffice.",NeedsFix|FrozenDueToAge,griesemer,"```Go\r\npackage p\r\n\r\ntype T[A, B any] struct{}\r\n\r\nfunc _() {\r\n        type _ T[int]\r\n}\r\n```\r\nproduces two errors:\r\n```\r\ntestdata/manual.go2:13:16: cannot infer B (testdata/manual.go2:10:11)\r\ntestdata/manual.go2:13:16: got 1 arguments but 2 type parameters\r\n```\r\nOne would suffice.","Go\r\npackage p\r\n\r\ntype T[A, B any] struct{}\r\n\r\nfunc _() {\r\n        type _ T[int]\r\n}\r\n"
50837,"cmd/compile: improve error message for invalid use of interface with type constraints\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://gotipplay.golang.org/p/K_OPRyt5aJo\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n./prog.go:8:21: interface with type constraints used as function parameter\r\n./prog.go:11:4: interface with type constraints cannot be used as field\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:8:21: interface contains type constraints\r\n./prog.go:11:4: interface contains type constraints\r\n```\r\n\r\n",help wanted|NeedsFix|FrozenDueToAge,griesemer,"\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on go.dev/play is best.\r\n-->\r\n\r\nhttps://gotipplay.golang.org/p/K_OPRyt5aJo\r\n\r\n```golang\r\npackage main\r\n\r\ntype C interface {\r\n\t~int\r\n\tFn()\r\n}\r\n\r\nfunc UseInterface(c C) {}\r\n\r\ntype Foo struct {\r\n\tI C\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n./prog.go:8:21: interface with type constraints used as function parameter\r\n./prog.go:11:4: interface with type constraints cannot be used as field\r\n```\r\n\r\n\r\n\r\n### What did you see instead?\r\n```\r\n./prog.go:8:21: interface contains type constraints\r\n./prog.go:11:4: interface contains type constraints\r\n```\r\n\r\n",golang\r\npackage main\r\n\r\ntype C interface {\r\n\t~int\r\n\tFn()\r\n}\r\n\r\nfunc UseInterface(c C) {}\r\n\r\ntype Foo struct {\r\n\tI C\r\n}\r\n
50773,"proposal: crypto/tls: make maxHandshake configurable### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/awnumar/Library/Caches/go-build""\r\nGOENV=""/Users/awnumar/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/awnumar/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/awnumar""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/fftr5j0n443f4z2sm11wlxv40000gn/T/go-build2260917661=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Generate a very large certificate. I passed mkcert many short SANs to get this.\r\n2. Start a Go TLS server.\r\n3. Connect to it with a Go TLS client.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the connection to succeed.\r\n\r\n### What did you see instead?\r\n\r\n`tls: handshake message of length 110013 bytes exceeds maximum of 65536 bytes`\r\n\r\nThe limit is defined [here](https://cs.opensource.google/go/go/+/master:src/crypto/tls/common.go;l=45;bpv=1;bpt=1?q=65536%20tls&ss=go%2Fgo):\r\n\r\n\r\n\r\nand it says that the protocol max is 16 MB, not 64 KiB. I assume this hard limit is to mitigate resource exhaustion attacks, but it would be preferable if it was configurable.\r\n\r\n### Context\r\n\r\nWe dynamically generate certificates for mTLS within and across clusters and configure which services are allowed to open connections between each other using Subject Alternative Names. In extreme cases a service that needs to communicate with many other services could have a certificate that's larger than this limit.\r\n\r\nThis isn't a problem right now but a limit of 64 KiB provides a fairly small and uncomfortable safety buffer. Is there a reason that this limit is not configurable?\r\n\r\nThis issue is related to #35153 where @FiloSottile says ""Documenting something makes it a backwards compatibility promise"". Is making it configurable still possible while preserving backwards compatibility in the future?",Proposal|NeedsInvestigation|Proposal-Crypto,FiloSottile,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/awnumar/Library/Caches/go-build""\r\nGOENV=""/Users/awnumar/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/awnumar/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/awnumar""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.17.6/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.17.6/libexec/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.17.6""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s2/fftr5j0n443f4z2sm11wlxv40000gn/T/go-build2260917661=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n1. Generate a very large certificate. I passed mkcert many short SANs to get this.\r\n2. Start a Go TLS server.\r\n3. Connect to it with a Go TLS client.\r\n\r\n### What did you expect to see?\r\n\r\nI expected the connection to succeed.\r\n\r\n### What did you see instead?\r\n\r\n`tls: handshake message of length 110013 bytes exceeds maximum of 65536 bytes`\r\n\r\nThe limit is defined [here](https://cs.opensource.google/go/go/+/master:src/crypto/tls/common.go;l=45;bpv=1;bpt=1?q=65536%20tls&ss=go%2Fgo):\r\n\r\n```go\r\nconst maxHandshake = 65536 // maximum handshake we support (protocol max is 16 MB)\r\n```\r\n\r\nand it says that the protocol max is 16 MB, not 64 KiB. I assume this hard limit is to mitigate resource exhaustion attacks, but it would be preferable if it was configurable.\r\n\r\n### Context\r\n\r\nWe dynamically generate certificates for mTLS within and across clusters and configure which services are allowed to open connections between each other using Subject Alternative Names. In extreme cases a service that needs to communicate with many other services could have a certificate that's larger than this limit.\r\n\r\nThis isn't a problem right now but a limit of 64 KiB provides a fairly small and uncomfortable safety buffer. Is there a reason that this limit is not configurable?\r\n\r\nThis issue is related to #35153 where @FiloSottile says ""Documenting something makes it a backwards compatibility promise"". Is making it configurable still possible while preserving backwards compatibility in the future?",go\r\nconst maxHandshake = 65536 // maximum handshake we support (protocol max is 16 MB)\r\n
50729,"cmd/compile: handle alias types in recursive types more consistentlyThe following code\r\n\r\nreports an error when we use `B` in a recursive type definition due to the way type aliases are handled inside the type checker. In this (and possibly many other similar) cases, the error can be avoided by restructuring the code slightly. This version compiles without error (declaration of `x` moved past the type declarations):\r\n\r\nThe compiler should be able to avoid this error on its own.\r\n\r\nRoot cause: Currently, the type checker doesn't have a ""forwarding mechanism"" for type aliases that are being ""used"" before their respective type is fully known. To solve this problem in general, a forwarding mechanism/type needs to be introduced. This is only an issue with some recursive type definitions involving type aliases.\r\n\r\ncc: @findleyr ",NeedsInvestigation|compiler/runtime,griesemer,"The following code\r\n```Go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B /* ERROR invalid use of type alias */ ]\r\ntype B = T[A]\r\n```\r\nreports an error when we use `B` in a recursive type definition due to the way type aliases are handled inside the type checker. In this (and possibly many other similar) cases, the error can be avoided by restructuring the code slightly. This version compiles without error (declaration of `x` moved past the type declarations):\r\n```Go\r\npackage p\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B]\r\ntype B = T[A]\r\n\r\nvar x T[B]\r\n```\r\nThe compiler should be able to avoid this error on its own.\r\n\r\nRoot cause: Currently, the type checker doesn't have a ""forwarding mechanism"" for type aliases that are being ""used"" before their respective type is fully known. To solve this problem in general, a forwarding mechanism/type needs to be introduced. This is only an issue with some recursive type definitions involving type aliases.\r\n\r\ncc: @findleyr ",Go\r\npackage p\r\n\r\nvar x T[B]\r\n\r\ntype T[_ any] struct{}\r\ntype A T[B /* ERROR invalid use of type alias */ ]\r\ntype B = T[A]\r\n
50588,cmd/compile: no need to complain about missing type arguments after type inference error\r\nproduces two error messages:\r\n```\r\nfilename.go:5:17: cannot infer B (filename:go:3:11)\r\nfilename.go:5:17: got 1 arguments but 2 type parameters\r\n```\r\nThere's no need to report the 2nd error.\r\n\r\nFollow-up on #49541.\r\n,NeedsFix|FrozenDueToAge,griesemer|findleyr,"```Go\r\npackage p\r\n\r\ntype S[A, B any] struct {}\r\n\r\nfunc _[A any](s S /* ERROR cannot infer B */ /* ERROR got 1 arguments but 2 type parameters */ [A]) {}\r\n```\r\nproduces two error messages:\r\n```\r\nfilename.go:5:17: cannot infer B (filename:go:3:11)\r\nfilename.go:5:17: got 1 arguments but 2 type parameters\r\n```\r\nThere's no need to report the 2nd error.\r\n\r\nFollow-up on #49541.\r\n","Go\r\npackage p\r\n\r\ntype S[A, B any] struct {}\r\n\r\nfunc _[A any](s S /* ERROR cannot infer B */ /* ERROR got 1 arguments but 2 type parameters */ [A]) {}\r\n"
50436,"os/exec: add fields for managing termination signals and pipes### Background\r\n\r\n#23019 (accepted but not yet implemented; CC @ianlancetaylor @bradfitz) proposed to change `exec.Cmd.Wait` to stop the goroutines that are copying I/O to and from a completed `exec.Cmd`; see that proposal for further background on the problem it aims to address. However, as noted in https://github.com/golang/go/issues/23019#issuecomment-396372555 and https://github.com/golang/go/issues/23019#issuecomment-558416418, any feasible implementation of the proposal requires the use of an arbitrary timeout, and the proposal does not include a mechanism to adjust that timeout. (Given our history with the Go project's builders, I am extremely skeptical that any particular hard-coded timeout can strike an appropriate balance between robustness and latency.)\r\n\r\n#31774, #22757, and #21135 proposed to allow users of `exec.CommandContext` to customize the signal sent to the command when the context is canceled. They were all declined due to lack of concrete demand for the feature (https://github.com/golang/go/issues/21135#issuecomment-332006025, https://github.com/golang/go/issues/22757#issuecomment-345034265, https://github.com/golang/go/issues/31774#issuecomment-490246274). We have since accrued a number of copies of functions that work around the feature's absence. In the Go project alone, we have:\r\n* https://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l=1233-1292;drc=af3b8cf5026a9d74a53ac5d3fec2bba35a96ad91\r\n* https://cs.opensource.google/go/go/+/master:src/internal/testenv/testenv.go;l=312-366;drc=cc795a01dcec7c97044b31571af88ac98310f2b3 (added for #37405)\r\n* https://cs.opensource.google/go/x/build/+/master:internal/internal.go;l=28-86;drc=fa5c6e87e680b621066712172cd92426fb206416\r\n* https://cs.opensource.google/go/x/playground/+/master:internal/internal.go;l=14-70;drc=ccdf1e5d22bc9653f3a3b58016d2c9914ebaad48\r\n\r\nI'm attempting to add yet another variation (in [CL 373005](https://go.dev/cl/373005)) in order to help diagnose #50014. However, for this variation (prompted by discussions with @aclements and @prattmic) I have tried to make this variation a minimally-invasive change on top of the `exec.Cmd` API.\r\n\r\nI believe I have achieved that goal: the API requires the addition of only 2\u20133 new fields and no new methods or top-level functions. You can view (and try out) a prototype as [`github.com/bcmills/more/os/moreexec`](https://pkg.go.dev/github.com/bcmills/more/os/moreexec), which provides a drop-in replacement for a subset of the `exec.Cmd` API.\r\n\r\n### Proposal\r\n\r\nI propose the addition of the following fields to the `exec.Cmd` struct, along with their corresponding implementation:\r\n\r\n\r\n\r\nThe new `Context` field is exported only in order to simplify the documentation for the `Interrupt` and `WaitDelay` fields. (It was requested and rejected in #46699, but the objection there was my own \u2014 due to concerns about the interactions with the API in <em>this</em> proposal. It could be excised from this proposal without damaging anything but documentation clarity.)\r\n\r\nThe new `Interrupt` field sets the signal to be sent when the `Context` is done. `exec.CommandContext` explicitly sets it to `os.Kill` in order to maintain the existing behavior of `exec.CommandContext`, but I expect many users on Unix platforms will want to set it to `os.Interrupt` or `syscall.SIGQUIT` instead.\r\n\r\nThe new `WaitDelay` field sets the interval to wait for input and output after process termination or an interrupt signal. That interval turns out to be important for many testing applications (such as the Go Playground implementation and the `cmd/go` test suite). It also generalizes nicely to the use-cases in #23019: setting `WaitDelay` without `Context` provides bounded I/O wait times without sending a preceding signal.\r\n\r\n### Compatibility\r\n\r\nI believe that this proposal is entirely backward-compatible (in contrast with #23019). The zero-values for the new fields provide exactly the same behavior as a `Cmd` returned by `exec.Command` or `exec.CommandContext` today.\r\n\r\n### Caveats\r\n\r\nThis proposal does not address graceful shutdown on Windows (https://github.com/golang/go/issues/22757#issuecomment-773581159; CC @mvdan). However, it may be possible to extend it to do so by providing special-case Windows behavior when the `Interrupt` field is set to `os.Interrupt`, or by adding an `InterruptFunc func(*Cmd)` callback that would also be invoked when `Context` is done.\r\n\r\nThe proposed API also does not provide a mechanism to send an `Interrupt` signal followed by `os.Kill` after a delay <em>but still wait for subprocesses</em> to close all I/O pipes. I believe the use-cases for that scenario are sufficiently niche to be provided only by third-party libraries: sending `SIGKILL` to the parent process makes it likely that subprocesses will not know to shut down, so in the vast majority of cases users should either not send `SIGKILL` at all (`WaitDelay` == 0), forcibly terminate the pipes to try to kill the subprocesses with `SIGPIPE` (`WaitDelay` > 0), or do something platform-specific to try to forcibly shut down an entire process group (outside the scope of this proposal).\r\n\r\n### Alternatives considered\r\n\r\nIn https://github.com/golang/go/issues/31774#issuecomment-488320719, @bradfitz suggested a field `Kill func(*os.Process)`, which would presumably be added instead of the `Interrupt` field in this proposal. However, I believe that such a field would be simultaneously too complex and not powerful enough:\r\n\r\n* The `Kill` field would be too complex for most Unix applications, which overwhelmingly only need to send one of `SIGTERM`, `SIGINT`, `SIGQUIT`, or `SIGKILL` \u2014 why pass a whole callback when you really just want to say which signal you need?\r\n\r\n* A `*os.Process` callback would still not be powerful enough for Windows applications. If I understand the discussion in #6720 correctly (CC @alexbrainman), `CTRL_BREAK_EVENT` is sent to an entire process group, not a single `*os.Process`, so Windows users would also need a mechanism for creating (or determining) such a group, or some completely separate out-of-band way to request that the process terminate (such as by sending it a particular input or IPC message).\r\n\r\nGiven the above, the `Interrupt` field seems more ergonomic: it gives the right behavior for Unix users, and if Windows users want to do something more complex they can set `Interrupt` to `nil` and start a separate goroutine in between the calls to `(*Cmd).Start` and `(*Cmd).Wait` to implement whatever custom logic they want.",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod,bcmills,"### Background\r\n\r\n#23019 (accepted but not yet implemented; CC @ianlancetaylor @bradfitz) proposed to change `exec.Cmd.Wait` to stop the goroutines that are copying I/O to and from a completed `exec.Cmd`; see that proposal for further background on the problem it aims to address. However, as noted in https://github.com/golang/go/issues/23019#issuecomment-396372555 and https://github.com/golang/go/issues/23019#issuecomment-558416418, any feasible implementation of the proposal requires the use of an arbitrary timeout, and the proposal does not include a mechanism to adjust that timeout. (Given our history with the Go project's builders, I am extremely skeptical that any particular hard-coded timeout can strike an appropriate balance between robustness and latency.)\r\n\r\n#31774, #22757, and #21135 proposed to allow users of `exec.CommandContext` to customize the signal sent to the command when the context is canceled. They were all declined due to lack of concrete demand for the feature (https://github.com/golang/go/issues/21135#issuecomment-332006025, https://github.com/golang/go/issues/22757#issuecomment-345034265, https://github.com/golang/go/issues/31774#issuecomment-490246274). We have since accrued a number of copies of functions that work around the feature's absence. In the Go project alone, we have:\r\n* https://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l=1233-1292;drc=af3b8cf5026a9d74a53ac5d3fec2bba35a96ad91\r\n* https://cs.opensource.google/go/go/+/master:src/internal/testenv/testenv.go;l=312-366;drc=cc795a01dcec7c97044b31571af88ac98310f2b3 (added for #37405)\r\n* https://cs.opensource.google/go/x/build/+/master:internal/internal.go;l=28-86;drc=fa5c6e87e680b621066712172cd92426fb206416\r\n* https://cs.opensource.google/go/x/playground/+/master:internal/internal.go;l=14-70;drc=ccdf1e5d22bc9653f3a3b58016d2c9914ebaad48\r\n\r\nI'm attempting to add yet another variation (in [CL 373005](https://go.dev/cl/373005)) in order to help diagnose #50014. However, for this variation (prompted by discussions with @aclements and @prattmic) I have tried to make this variation a minimally-invasive change on top of the `exec.Cmd` API.\r\n\r\nI believe I have achieved that goal: the API requires the addition of only 2\u20133 new fields and no new methods or top-level functions. You can view (and try out) a prototype as [`github.com/bcmills/more/os/moreexec`](https://pkg.go.dev/github.com/bcmills/more/os/moreexec), which provides a drop-in replacement for a subset of the `exec.Cmd` API.\r\n\r\n### Proposal\r\n\r\nI propose the addition of the following fields to the `exec.Cmd` struct, along with their corresponding implementation:\r\n\r\n```go\r\n\t// Context is the context that controls the lifetime of the command\r\n\t// (typically the one passed to CommandContext).\r\n\tContext context.Context\r\n\r\n\t// If Interrupt is non-nil, Context must also be non-nil and Interrupt will be\r\n\t// sent to the child process when Context is done.\r\n\t//\r\n\t// If the command exits with a success code after the Interrupt signal has\r\n\t// been sent, Wait and similar methods will return Context.Err()\r\n\t// instead of nil.\r\n\t//\r\n\t// If the Interrupt signal is not supported on the current platform\r\n\t// (for example, if it is os.Interrupt on Windows), Start may fail\r\n\t// (and return a non-nil error).\r\n\tInterrupt os.Signal\r\n\r\n\t// If WaitDelay is non-zero, the command's I/O pipes will be closed after\r\n\t// WaitDelay has elapsed after either the command's process has exited or\r\n\t// (if Context is non-nil) Context is done, whichever occurs first.\r\n\t// If the command's process is still running after WaitDelay has elapsed,\r\n\t// it will be terminated with os.Kill before the pipes are closed.\r\n\t//\r\n\t// If the command exits with a success code after pipes are closed due to\r\n\t// WaitDelay and no Interrupt signal has been sent, Wait and similar methods\r\n\t// will return ErrWaitDelay instead of nil.\r\n\t//\r\n\t// If WaitDelay is zero (the default), I/O pipes will be read until EOF,\r\n\t// which might not occur until orphaned subprocesses of the command have\r\n\t// also closed their descriptors for the pipes.\r\n\tWaitDelay time.Duration\r\n```\r\n\r\nThe new `Context` field is exported only in order to simplify the documentation for the `Interrupt` and `WaitDelay` fields. (It was requested and rejected in #46699, but the objection there was my own \u2014 due to concerns about the interactions with the API in <em>this</em> proposal. It could be excised from this proposal without damaging anything but documentation clarity.)\r\n\r\nThe new `Interrupt` field sets the signal to be sent when the `Context` is done. `exec.CommandContext` explicitly sets it to `os.Kill` in order to maintain the existing behavior of `exec.CommandContext`, but I expect many users on Unix platforms will want to set it to `os.Interrupt` or `syscall.SIGQUIT` instead.\r\n\r\nThe new `WaitDelay` field sets the interval to wait for input and output after process termination or an interrupt signal. That interval turns out to be important for many testing applications (such as the Go Playground implementation and the `cmd/go` test suite). It also generalizes nicely to the use-cases in #23019: setting `WaitDelay` without `Context` provides bounded I/O wait times without sending a preceding signal.\r\n\r\n### Compatibility\r\n\r\nI believe that this proposal is entirely backward-compatible (in contrast with #23019). The zero-values for the new fields provide exactly the same behavior as a `Cmd` returned by `exec.Command` or `exec.CommandContext` today.\r\n\r\n### Caveats\r\n\r\nThis proposal does not address graceful shutdown on Windows (https://github.com/golang/go/issues/22757#issuecomment-773581159; CC @mvdan). However, it may be possible to extend it to do so by providing special-case Windows behavior when the `Interrupt` field is set to `os.Interrupt`, or by adding an `InterruptFunc func(*Cmd)` callback that would also be invoked when `Context` is done.\r\n\r\nThe proposed API also does not provide a mechanism to send an `Interrupt` signal followed by `os.Kill` after a delay <em>but still wait for subprocesses</em> to close all I/O pipes. I believe the use-cases for that scenario are sufficiently niche to be provided only by third-party libraries: sending `SIGKILL` to the parent process makes it likely that subprocesses will not know to shut down, so in the vast majority of cases users should either not send `SIGKILL` at all (`WaitDelay` == 0), forcibly terminate the pipes to try to kill the subprocesses with `SIGPIPE` (`WaitDelay` > 0), or do something platform-specific to try to forcibly shut down an entire process group (outside the scope of this proposal).\r\n\r\n### Alternatives considered\r\n\r\nIn https://github.com/golang/go/issues/31774#issuecomment-488320719, @bradfitz suggested a field `Kill func(*os.Process)`, which would presumably be added instead of the `Interrupt` field in this proposal. However, I believe that such a field would be simultaneously too complex and not powerful enough:\r\n\r\n* The `Kill` field would be too complex for most Unix applications, which overwhelmingly only need to send one of `SIGTERM`, `SIGINT`, `SIGQUIT`, or `SIGKILL` \u2014 why pass a whole callback when you really just want to say which signal you need?\r\n\r\n* A `*os.Process` callback would still not be powerful enough for Windows applications. If I understand the discussion in #6720 correctly (CC @alexbrainman), `CTRL_BREAK_EVENT` is sent to an entire process group, not a single `*os.Process`, so Windows users would also need a mechanism for creating (or determining) such a group, or some completely separate out-of-band way to request that the process terminate (such as by sending it a particular input or IPC message).\r\n\r\nGiven the above, the `Interrupt` field seems more ergonomic: it gives the right behavior for Unix users, and if Windows users want to do something more complex they can set `Interrupt` to `nil` and start a separate goroutine in between the calls to `(*Cmd).Start` and `(*Cmd).Wait` to implement whatever custom logic they want.","go\r\n\t// Context is the context that controls the lifetime of the command\r\n\t// (typically the one passed to CommandContext).\r\n\tContext context.Context\r\n\r\n\t// If Interrupt is non-nil, Context must also be non-nil and Interrupt will be\r\n\t// sent to the child process when Context is done.\r\n\t//\r\n\t// If the command exits with a success code after the Interrupt signal has\r\n\t// been sent, Wait and similar methods will return Context.Err()\r\n\t// instead of nil.\r\n\t//\r\n\t// If the Interrupt signal is not supported on the current platform\r\n\t// (for example, if it is os.Interrupt on Windows), Start may fail\r\n\t// (and return a non-nil error).\r\n\tInterrupt os.Signal\r\n\r\n\t// If WaitDelay is non-zero, the command's I/O pipes will be closed after\r\n\t// WaitDelay has elapsed after either the command's process has exited or\r\n\t// (if Context is non-nil) Context is done, whichever occurs first.\r\n\t// If the command's process is still running after WaitDelay has elapsed,\r\n\t// it will be terminated with os.Kill before the pipes are closed.\r\n\t//\r\n\t// If the command exits with a success code after pipes are closed due to\r\n\t// WaitDelay and no Interrupt signal has been sent, Wait and similar methods\r\n\t// will return ErrWaitDelay instead of nil.\r\n\t//\r\n\t// If WaitDelay is zero (the default), I/O pipes will be read until EOF,\r\n\t// which might not occur until orphaned subprocesses of the command have\r\n\t// also closed their descriptors for the pipes.\r\n\tWaitDelay time.Duration\r\n"
50272,"spec: function type inference ignores type parameter constraints<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, generics are required\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vlad/.cache/go-build""\r\nGOENV=""/home/vlad/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vlad/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/vlad/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vlad/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vlad/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3350654881=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile this code:\r\n\r\n\r\n### What did you expect to see?\r\nThe code should compile successfully\r\n\r\n\r\n### What did you see instead?\r\nCompilation failed with `type S of s does not match []T (cannot infer T)` error message\r\n\r\nThis code compiles fine:\r\n\r\n\r\n",NeedsInvestigation|FrozenDueToAge|generics|TypeInference,griesemer|findleyr,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, generics are required\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/vlad/.cache/go-build""\r\nGOENV=""/home/vlad/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/vlad/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/vlad/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/vlad/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/vlad/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-87b2a548 Sun Dec 19 20:16:45 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/dev/null""\r\nGOWORK=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3350654881=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCompile this code:\r\n```go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b(s)\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nThe code should compile successfully\r\n\r\n\r\n### What did you see instead?\r\nCompilation failed with `type S of s does not match []T (cannot infer T)` error message\r\n\r\nThis code compiles fine:\r\n```go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b([]T(s))\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n```\r\n\r\n","go\r\nfunc a[T any, S []T](s S) int {\r\n\treturn b(s)\r\n}\r\n\r\nfunc b[T any](s []T) int {\r\n\treturn len(s)\r\n}\r\n\r\nfunc main() {\r\n\ta(make([]int, 0))\r\n}\r\n"
50249,"syscall: NewCallback triggers data race on Windows when used from different goroutine<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\knutz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\knutz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\knutz\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\knutz\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.17.4\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\knutz\\AppData\\Local\\Temp\\go-build2788134738=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""syscall""\r\n)\r\n\r\nfunc foo() {\r\n\tsyscall.NewCallback(func(callerContext uintptr, iface uintptr, notificationType uint32) uintptr {\r\n\t\treturn 0\r\n\t})\r\n}\r\n\r\nfunc main() {\r\n\tgo foo()\r\n\tfoo()\r\n}\r\n\r\n```\r\nBuilt and run using:\r\n\r\n\r\n### What did you expect to see?\r\nNothing\r\n### What did you see instead?\r\n```==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000028000 by goroutine 6:\r\n  runtime.mapaccess2()\r\n      C:/Program Files/Go/src/runtime/map.go:452 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:308 +0x244\r\n\r\nPrevious write at 0x00c000028000 by main goroutine:\r\n  runtime.mapassign()\r\n      C:/Program Files/Go/src/runtime/map.go:571 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:324 +0x392\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:15 +0x30\r\n\r\nGoroutine 6 (running) created at:\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:14 +0x2b\r\n==================\r\nFound 1 data race(s)```\r\n\r\n",OS-Windows|NeedsFix|FrozenDueToAge,prattmic,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.17.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\knutz\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\knutz\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOEXPERIMENT=\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GOMODCACHE=C:\\Users\\knutz\\go\\pkg\\mod\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\knutz\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Program Files\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\r\nset GOVCS=\r\nset GOVERSION=go1.17.4\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=NUL\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\knutz\\AppData\\Local\\Temp\\go-build2788134738=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t""syscall""\r\n)\r\n\r\nfunc foo() {\r\n\tsyscall.NewCallback(func(callerContext uintptr, iface uintptr, notificationType uint32) uintptr {\r\n\t\treturn 0\r\n\t})\r\n}\r\n\r\nfunc main() {\r\n\tgo foo()\r\n\tfoo()\r\n}\r\n\r\n```\r\nBuilt and run using:\r\n```go build -race && ./main.exe```\r\n\r\n### What did you expect to see?\r\nNothing\r\n### What did you see instead?\r\n```==================\r\nWARNING: DATA RACE\r\nRead at 0x00c000028000 by goroutine 6:\r\n  runtime.mapaccess2()\r\n      C:/Program Files/Go/src/runtime/map.go:452 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:308 +0x244\r\n\r\nPrevious write at 0x00c000028000 by main goroutine:\r\n  runtime.mapassign()\r\n      C:/Program Files/Go/src/runtime/map.go:571 +0x0\r\n  syscall.compileCallback()\r\n      C:/Program Files/Go/src/runtime/syscall_windows.go:324 +0x392\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:15 +0x30\r\n\r\nGoroutine 6 (running) created at:\r\n  main.main()\r\n      C:/code/fd/hack/compile_syscall_race/main.go:14 +0x2b\r\n==================\r\nFound 1 data race(s)```\r\n\r\n",go build -race && ./main.exe
50101,"net: make LookupCNAME consistent between Unix and Windows, documentLookupCNAME is pretty weird right now.\r\n\r\nDespite the name, it entirely ignores CNAME records on Unix. It launches `A` and `AAAA` record lookups to recursive resolvers and returns the first response name found in the `A` and `AAAA`, skipping over any `CNAME`. (and not even asking for a `CNAME`)\r\n\r\nBut it documents that it does that...\r\n\r\nhttps://pkg.go.dev/net#LookupCNAME\r\n\r\n> A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS ""CNAME"" records, as long as host resolves to address records.\r\n\r\nOTOH, on Windows, it does what you would expect from the name itself: it looks up CNAME records:\r\n\r\n\r\n\r\nHere's a demo of a program behaving differently:\r\n\r\n\r\n\r\nOn Linux/Mac:\r\n\r\n```\r\n2021/12/10 21:19:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:19:45 cname = """", lookup cname-to-txt.go4.org: no such host\r\n```\r\n\r\nOn Windows:\r\n\r\n```\r\n2021/12/10 21:11:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:11:45 cname = ""test-txt-record.go4.org."", <nil>\r\n```\r\n\r\nI like the Windows behavior better, FWIW. That's what I was looking for, but apparently it doesn't exist.\r\n\r\nCan we either:\r\n\r\n1. add `LookupCNAMERecord` that actually looks up a CNAME record\r\n2. redefine `LookupCNAME` to be like Windows, perhaps adding a `LookupCanonicalName` with the current weird Unix behavior of `LookupCNAME`?\r\n\r\nBut at minimum: document whatever the rules are and make Unix and Windows match? At least in `Resolver.PreferGo` mode?",Documentation|OS-Windows|Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod,rsc,"LookupCNAME is pretty weird right now.\r\n\r\nDespite the name, it entirely ignores CNAME records on Unix. It launches `A` and `AAAA` record lookups to recursive resolvers and returns the first response name found in the `A` and `AAAA`, skipping over any `CNAME`. (and not even asking for a `CNAME`)\r\n\r\nBut it documents that it does that...\r\n\r\nhttps://pkg.go.dev/net#LookupCNAME\r\n\r\n> A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS ""CNAME"" records, as long as host resolves to address records.\r\n\r\nOTOH, on Windows, it does what you would expect from the name itself: it looks up CNAME records:\r\n\r\n```go\r\nfunc (*Resolver) lookupCNAME(ctx context.Context, name string) (string, error) {\r\n        // TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.\r\n        acquireThread()\r\n        defer releaseThread()\r\n        var r *syscall.DNSRecord\r\n        e := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\r\n```\r\n\r\nHere's a demo of a program behaving differently:\r\n\r\n```go\r\nfunc main() {\r\n\ttxt, err := net.LookupTXT(""cname-to-txt.go4.org"")\r\n\tlog.Printf(""LookupTXT = %q, %v"", txt, err)\r\n\r\n\tcname, err := net.LookupCNAME(""cname-to-txt.go4.org"")\r\n\tlog.Printf(""cname = %q, %v"", cname, err)\r\n}\r\n```\r\n\r\nOn Linux/Mac:\r\n\r\n```\r\n2021/12/10 21:19:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:19:45 cname = """", lookup cname-to-txt.go4.org: no such host\r\n```\r\n\r\nOn Windows:\r\n\r\n```\r\n2021/12/10 21:11:45 LookupTXT = [""foo=bar""], <nil>\r\n2021/12/10 21:11:45 cname = ""test-txt-record.go4.org."", <nil>\r\n```\r\n\r\nI like the Windows behavior better, FWIW. That's what I was looking for, but apparently it doesn't exist.\r\n\r\nCan we either:\r\n\r\n1. add `LookupCNAMERecord` that actually looks up a CNAME record\r\n2. redefine `LookupCNAME` to be like Windows, perhaps adding a `LookupCanonicalName` with the current weird Unix behavior of `LookupCNAME`?\r\n\r\nBut at minimum: document whatever the rules are and make Unix and Windows match? At least in `Resolver.PreferGo` mode?","go\r\nfunc (*Resolver) lookupCNAME(ctx context.Context, name string) (string, error) {\r\n        // TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.\r\n        acquireThread()\r\n        defer releaseThread()\r\n        var r *syscall.DNSRecord\r\n        e := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\r\n"
49150,"cmd/compile, runtime: initialization order within a file appears to have changed### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.17.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, with 1.17.1 and .2. It has not been a problem prior to 1.17.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cnicolaou/Library/Caches/go-build""\r\nGOENV=""/Users/cnicolaou/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cnicolaou/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cnicolaou/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.7""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/cnicolaou/go-bug-report/bug/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1h/54rm9zd51ddcs0pt8j_l7d2m0000gn/T/go-build3841401253=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nNothing new! The code that encountered the problem has been in use since 2014/15.\r\n\r\nIt is my understanding that for the code snippet below, the initializeMe function will always\r\nbe called first and before any other initialization. This has been been the case prior to\r\ngo 1.17\r\n\r\n\r\n\r\nHowever, with go 1.17, this behavior appears to have changed, and ```initializeMe``` is no longer\r\ncalled before other initialization and in my case is not called before initialization that depends\r\non it. I understand that there is no dependency analysis going on but there shouldn't need\r\nsince by my reading of the spec initializeMe should always be called first. I have attached\r\ncode snippets to repro the problem.\r\n\r\nThe code that seems to defeat the expected initialization involves an additional variable initialization\r\nvia an other package.\r\n\r\n```\r\nvar breaksIfThisExists = struct {\r\n        vals    []int\r\n} {\r\n        []int{indirect.GetVal(d)},\r\n}\r\n```\r\n\r\nwhere ```indirect.GetVal(d)``` calls a method on ```d``` whose implementation accesses a variable that\r\nis initialized by ```initializeMe```.\r\n\r\n### What did you expect to see?\r\n\r\nno panic.\r\n\r\n### What did you see instead?\r\na panic\r\n\r\n[bug.tar.gz](https://github.com/golang/go/files/7412516/bug.tar.gz)\r\n\r\n\r\n",NeedsInvestigation|compiler/runtime,mdempsky,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.17.2 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, with 1.17.1 and .2. It has not been a problem prior to 1.17.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/cnicolaou/Library/Caches/go-build""\r\nGOENV=""/Users/cnicolaou/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/cnicolaou/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/cnicolaou/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""\r\nGOVCS=""""\r\nGOVERSION=""go1.16.7""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/Users/cnicolaou/go-bug-report/bug/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1h/54rm9zd51ddcs0pt8j_l7d2m0000gn/T/go-build3841401253=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nNothing new! The code that encountered the problem has been in use since 2014/15.\r\n\r\nIt is my understanding that for the code snippet below, the initializeMe function will always\r\nbe called first and before any other initialization. This has been been the case prior to\r\ngo 1.17\r\n\r\n```go\r\npackage foo\r\n// no other code here.\r\nvar _ = initializeMe()\r\n// other code here, which really should not matter\r\n```\r\n\r\nHowever, with go 1.17, this behavior appears to have changed, and ```initializeMe``` is no longer\r\ncalled before other initialization and in my case is not called before initialization that depends\r\non it. I understand that there is no dependency analysis going on but there shouldn't need\r\nsince by my reading of the spec initializeMe should always be called first. I have attached\r\ncode snippets to repro the problem.\r\n\r\nThe code that seems to defeat the expected initialization involves an additional variable initialization\r\nvia an other package.\r\n\r\n```\r\nvar breaksIfThisExists = struct {\r\n        vals    []int\r\n} {\r\n        []int{indirect.GetVal(d)},\r\n}\r\n```\r\n\r\nwhere ```indirect.GetVal(d)``` calls a method on ```d``` whose implementation accesses a variable that\r\nis initialized by ```initializeMe```.\r\n\r\n### What did you expect to see?\r\n\r\nno panic.\r\n\r\n### What did you see instead?\r\na panic\r\n\r\n[bug.tar.gz](https://github.com/golang/go/files/7412516/bug.tar.gz)\r\n\r\n\r\n","go\r\npackage foo\r\n// no other code here.\r\nvar _ = initializeMe()\r\n// other code here, which really should not matter\r\n"
49126,"crypto/tls: support ECDHE key exchanges when ec_point_formats is missing in ClientHello extension<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nPer [rfc8422#section-5.1.2](https://datatracker.ietf.org/doc/html/rfc8422#section-5.1.2), \r\n\r\n> For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).  RFC 4492 specified that if this extension is missing, it means that only the uncompressed point format is supported, so interoperability with implementations that support the uncompressed format should work with or without the extension\r\n\r\nWe are seeing TLS handshake failure (client and server failed to agree on ECDHE_ECDSA key exchange algorithem) when `ec_point_formats` is missing because we expect it to be listed in [tls/handshake_server.go](https://github.com/golang/go/blob/dc00dc6c6bf3b5554e37f60799aec092276ff807/src/crypto/tls/handshake_server.go#L317-L323)\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nIf `ec_point_formats` is missing in ClientHello, we will allow ECDHE key exchanges because  `it means that only the uncompressed point format is supported`\r\n",NeedsInvestigation|FrozenDueToAge,FiloSottile,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nPer [rfc8422#section-5.1.2](https://datatracker.ietf.org/doc/html/rfc8422#section-5.1.2), \r\n\r\n> For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).  RFC 4492 specified that if this extension is missing, it means that only the uncompressed point format is supported, so interoperability with implementations that support the uncompressed format should work with or without the extension\r\n\r\nWe are seeing TLS handshake failure (client and server failed to agree on ECDHE_ECDSA key exchange algorithem) when `ec_point_formats` is missing because we expect it to be listed in [tls/handshake_server.go](https://github.com/golang/go/blob/dc00dc6c6bf3b5554e37f60799aec092276ff807/src/crypto/tls/handshake_server.go#L317-L323)\r\n\r\n```go\r\n// supportsECDHE returns whether ECDHE key exchanges can be used with this\r\n// pre-TLS 1.3 client.\r\nfunc supportsECDHE(c *Config, supportedCurves []CurveID, supportedPoints []uint8) bool {\r\n...\r\n\tsupportsPointFormat := false\r\n\tfor _, pointFormat := range supportedPoints {\r\n\t\tif pointFormat == pointFormatUncompressed {\r\n\t\t\tsupportsPointFormat = true\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn supportsCurve && supportsPointFormat\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nIf `ec_point_formats` is missing in ClientHello, we will allow ECDHE key exchanges because  `it means that only the uncompressed point format is supported`\r\n","go\r\n// supportsECDHE returns whether ECDHE key exchanges can be used with this\r\n// pre-TLS 1.3 client.\r\nfunc supportsECDHE(c *Config, supportedCurves []CurveID, supportedPoints []uint8) bool {\r\n...\r\n\tsupportsPointFormat := false\r\n\tfor _, pointFormat := range supportedPoints {\r\n\t\tif pointFormat == pointFormatUncompressed {\r\n\t\t\tsupportsPointFormat = true\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn supportsCurve && supportsPointFormat\r\n}\r\n"
49104,"x/tools/gopls: spurious errors reported with go1.17 and mage\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.17.2 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.3\r\n    golang.org/x/tools/gopls@v0.7.3 h1:Lru57ht8vtDMouRskFC085VAjBAZRAISd/lwvwOOV0Q=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210809222454-d867a43fc93e h1:WUoyKPm6nCo1BnNUvPGnFG3T5DUVem42yDJZZ4CNxMA=\r\n    golang.org/x/text@v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\r\n    golang.org/x/tools@v0.1.8-0.20211014194737-fc98fb2abd48 h1:hk7xRoeg0CG1nRLsd5BZLDUgVpA9bnKylGk1p2/BPH0=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.3.0 h1:59Olnbt67UKpxF1EwVBopJvkSUBmgtb468E4GVWIZ1I=\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.61.2\r\n6cba118ac49a1b88332f312a8f67186f7f3c1643\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- \r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n<details><summary>Settings</summary><br>\r\n   ""gopls"": {\r\n        ""buildFlags"": [\r\n            ""-tags=mage""\r\n        ]\r\n    },\r\n    ""go.testFlags"": [\r\n        ""-count=1""\r\n    ],\r\n    ""go-template.patterns"": [\r\n        ""*.tpl"",\r\n        ""*.go.tpl"",\r\n        ""**/*.tpl""\r\n    ],\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n</details>\r\n### Describe the bug\r\n\r\nBriefly, the problem is that vscode reports a slew of errors even though the code in the repo builds and runs with no errors or warnings from `mage`, `go vet` or `go build`.\r\n![vscodescreenshot](https://user-images.githubusercontent.com/6699301/138325524-17c7fd96-a5b3-4edb-9325-3df58671739b.png)\r\n\r\n\r\n\r\nThe problem appears to be that `vscode` (via `gopls`)  isn't honoring the `//go:build mage` directive in `mypkg/magefile.go`. \r\n\r\nThe complaints seems to originate because magefiles want to have `package main` specified. \r\n\r\nI can make the `vscode` complaints go away by changing that to `package mypkg`, but then mage is no longer able to run.\r\n\r\nI've used mage in this manner prior to the advent of `go1.17` in large projects requiring extensive code generation without getting vscode complaints.\r\n\r\n### Steps to reproduce the behavior:\r\nI've created a minimal example that reproduces the problem in a public repo.\r\n\r\n\r\n1. Observe list of errors in the `vscode` Problems tab.\r\n2. Open terminal and run `go vet`. Observe no problems reported.\r\n3. If you have [mage](https://magefile.org) installed, run `mage -v`\r\n4. Observe that the code builds and runs with output similar to the following:\r\n```\r\nexec: mage -v generate\r\nRunning target: Generate\r\nexec: go build\r\nexec: ./magegopls\r\nGenerated at 2021-10-21 13:23:28.031119 -0400 EDT m=+0.000218297\r\n```\r\n\r\n",NeedsInvestigation|FrozenDueToAge|gopls|Tools|gopls/metadata,findleyr,"\r\n\r\n### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go version go1.17.2 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.3\r\n    golang.org/x/tools/gopls@v0.7.3 h1:Lru57ht8vtDMouRskFC085VAjBAZRAISd/lwvwOOV0Q=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210809222454-d867a43fc93e h1:WUoyKPm6nCo1BnNUvPGnFG3T5DUVem42yDJZZ4CNxMA=\r\n    golang.org/x/text@v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\r\n    golang.org/x/tools@v0.1.8-0.20211014194737-fc98fb2abd48 h1:hk7xRoeg0CG1nRLsd5BZLDUgVpA9bnKylGk1p2/BPH0=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.3.0 h1:59Olnbt67UKpxF1EwVBopJvkSUBmgtb468E4GVWIZ1I=\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.61.2\r\n6cba118ac49a1b88332f312a8f67186f7f3c1643\r\nx64\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t- \r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n<details><summary>Settings</summary><br>\r\n   ""gopls"": {\r\n        ""buildFlags"": [\r\n            ""-tags=mage""\r\n        ]\r\n    },\r\n    ""go.testFlags"": [\r\n        ""-count=1""\r\n    ],\r\n    ""go-template.patterns"": [\r\n        ""*.tpl"",\r\n        ""*.go.tpl"",\r\n        ""**/*.tpl""\r\n    ],\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n</details>\r\n### Describe the bug\r\n\r\nBriefly, the problem is that vscode reports a slew of errors even though the code in the repo builds and runs with no errors or warnings from `mage`, `go vet` or `go build`.\r\n![vscodescreenshot](https://user-images.githubusercontent.com/6699301/138325524-17c7fd96-a5b3-4edb-9325-3df58671739b.png)\r\n\r\n\r\n\r\nThe problem appears to be that `vscode` (via `gopls`)  isn't honoring the `//go:build mage` directive in `mypkg/magefile.go`. \r\n\r\nThe complaints seems to originate because magefiles want to have `package main` specified. \r\n\r\nI can make the `vscode` complaints go away by changing that to `package mypkg`, but then mage is no longer able to run.\r\n\r\nI've used mage in this manner prior to the advent of `go1.17` in large projects requiring extensive code generation without getting vscode complaints.\r\n\r\n### Steps to reproduce the behavior:\r\nI've created a minimal example that reproduces the problem in a public repo.\r\n```bash\r\ngit clone https://github.com/Michael-F-Ellis/magegopls\r\ncd magegopls\r\ncode .\r\n```\r\n\r\n1. Observe list of errors in the `vscode` Problems tab.\r\n2. Open terminal and run `go vet`. Observe no problems reported.\r\n3. If you have [mage](https://magefile.org) installed, run `mage -v`\r\n4. Observe that the code builds and runs with output similar to the following:\r\n```\r\nexec: mage -v generate\r\nRunning target: Generate\r\nexec: go build\r\nexec: ./magegopls\r\nGenerated at 2021-10-21 13:23:28.031119 -0400 EDT m=+0.000218297\r\n```\r\n\r\n",bash\r\ngit clone https://github.com/Michael-F-Ellis/magegopls\r\ncd magegopls\r\ncode .\r\n
48738,"x/tools/gopls: compute analysis facts for non-workspace packages### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go1.17 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.60.2\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t-\tgopkgs:\t/Users/{username}/go/bin/gopkgs: go1.17\r\n\t-\tgo-outline:\t/Users/{username}/go/bin/go-outline: go1.17\r\n\t-\tgotests:\t/Users/{username}/go/bin/gotests: go1.17\r\n\t-\tgomodifytags:\t/Users/{username}/go/bin/gomodifytags: go1.17\r\n\t-\timpl:\t/Users/{username}/go/bin/impl: go1.17\r\n\t-\tgoplay:\t/Users/{username}/go/bin/goplay: go1.17\r\n\t-\tdlv:\t/Users/{username}/go/bin/dlv: go1.17\r\n\t-\tdlv-dap:\t/Users/{username}/go/bin/dlv-dap: go1.17\r\n\t-\tgolint:\t/Users/{username}/go/bin/golint: go1.17\r\n\t-\tgopls:\t/Users/{username}/go/bin/gopls: go1.17\r\n \r\n\t\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```json\r\n{\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.lintTool"": ""golint"",\r\n    ""go.vetOnSave"": ""workspace""\r\n}\r\n```\r\n\r\n### Describe the bug\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then no error squiggles appear in the editor to show that there is a vet error.\r\n\r\n### Required behavior\r\n\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then error squiggles MUST appear in the editor to show that there is a vet error.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. given a go file `testvet.go` with the following code\r\n\r\n\r\n\r\n2. When I edit any text in this file that changes something, for example a space or comment\r\n3. Then the editor should highlight the same lines of code containing vet errors, that the command line `go vet ./...` picks up as having an error. \r\n```\r\npkg/testvet/testvet.go:14:13: call of printit copies lock value: sync.WaitGroup contains sync.noCopy\r\npkg/testvet/testvet.go:24:17: printit passes lock by value: sync.WaitGroup contains sync.noCopy\r\n```\r\n4. Manually running the command , Go:vet workspace does work and causes the editor to report the correct errors and squigglies. (see screenshot below)\r\n\r\n### Screenshots or recordings\r\n\r\nTo be clear, the screenshot below is the behaviour that we WANT to happen and be triggered on save, this is currently not happening and only happens when you manually run the command `Go;vet workspace`\r\n\r\n![Screenshot 2021-10-01 at 19 33 36](https://user-images.githubusercontent.com/1073487/135670971-bebc680d-6657-43f3-a1d5-af7cd6c141d9.png)\r\n\r\nIn addition to this functionality not working, the user interface helptext in VSCode settings does not make sense. The setting helptext has this text, which refers to functionality that I believe is not longer valid.\r\n\r\n![Screenshot 2021-10-01 at 19 45 06](https://user-images.githubusercontent.com/1073487/135671472-20f0c8ed-5e0b-480f-b73d-ad7fb7840aba.png)\r\n\r\nI have tried all variations of this setting value; both `package` and `workspace`. Neither works. ",FrozenDueToAge|gopls|Tools|gopls/performance|gopls/analysis,adonovan,"### What version of Go, VS Code & VS Code Go extension are you using?\r\n<details><summary>Version Information</summary><br>\r\n\r\n* Run `go version` to get version of Go from _the VS Code integrated terminal_.\r\n\t- go1.17 darwin/amd64\r\n* Run `gopls -v version` to get version of Gopls from _the VS Code integrated terminal_.\r\n\t- golang.org/x/tools/gopls v0.7.2\r\n* Run `code -v` or `code-insiders -v` to get version of VS Code or VS Code Insiders.\r\n\t- 1.60.2\r\n* Check your installed extensions to get the version of the VS Code Go extension\r\n\t- v0.28.1\r\n* Run Ctrl+Shift+P (Cmd+Shift+P on Mac OS) > `Go: Locate Configured Go Tools` command.\r\n\t-\tgopkgs:\t/Users/{username}/go/bin/gopkgs: go1.17\r\n\t-\tgo-outline:\t/Users/{username}/go/bin/go-outline: go1.17\r\n\t-\tgotests:\t/Users/{username}/go/bin/gotests: go1.17\r\n\t-\tgomodifytags:\t/Users/{username}/go/bin/gomodifytags: go1.17\r\n\t-\timpl:\t/Users/{username}/go/bin/impl: go1.17\r\n\t-\tgoplay:\t/Users/{username}/go/bin/goplay: go1.17\r\n\t-\tdlv:\t/Users/{username}/go/bin/dlv: go1.17\r\n\t-\tdlv-dap:\t/Users/{username}/go/bin/dlv-dap: go1.17\r\n\t-\tgolint:\t/Users/{username}/go/bin/golint: go1.17\r\n\t-\tgopls:\t/Users/{username}/go/bin/gopls: go1.17\r\n \r\n\t\r\n</details>\r\n\r\n### Share the Go related settings you have added/edited\r\n\r\nRun `Preferences: Open Settings (JSON)` command to open your settings.json file.\r\nShare all the settings with the `go.` or `[""go""]` or `gopls` prefixes.\r\n\r\n```json\r\n{\r\n    ""go.toolsManagement.autoUpdate"": true,\r\n    ""go.lintTool"": ""golint"",\r\n    ""go.vetOnSave"": ""workspace""\r\n}\r\n```\r\n\r\n### Describe the bug\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then no error squiggles appear in the editor to show that there is a vet error.\r\n\r\n### Required behavior\r\n\r\nWhen ""Go:vet On Save is enabled in settings; and a go file is edited and saved (containing an error that `go vet ./...` does pick up), then error squiggles MUST appear in the editor to show that there is a vet error.\r\n\r\n### Steps to reproduce the behavior:\r\n\r\n1. given a go file `testvet.go` with the following code\r\n\r\n```go\r\npackage testvet\r\n\r\nimport (\r\n\t""fmt""\r\n\t""sync""\r\n)\r\n\r\n// TestThatVetRunsOnSave minimal code to show vet not running on save in VS code\r\nfunc TestThatVetRunsOnSave() {\r\n\r\n\tch := make(chan string)\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo printit(wg, ch)\r\n\r\n\tch <- ""one""\r\n\tch <- ""two""\r\n\tclose(ch)\r\n\twg.Wait()\r\n\tfmt.Println(""done."")\r\n\r\n}\r\n\r\nfunc printit(wg sync.WaitGroup, ch chan string) {\r\n\tdefer wg.Done()\r\n\tfor t := range ch {\r\n\t\tfmt.Println(t)\r\n\t}\r\n}\r\n```\r\n\r\n2. When I edit any text in this file that changes something, for example a space or comment\r\n3. Then the editor should highlight the same lines of code containing vet errors, that the command line `go vet ./...` picks up as having an error. \r\n```\r\npkg/testvet/testvet.go:14:13: call of printit copies lock value: sync.WaitGroup contains sync.noCopy\r\npkg/testvet/testvet.go:24:17: printit passes lock by value: sync.WaitGroup contains sync.noCopy\r\n```\r\n4. Manually running the command , Go:vet workspace does work and causes the editor to report the correct errors and squigglies. (see screenshot below)\r\n\r\n### Screenshots or recordings\r\n\r\nTo be clear, the screenshot below is the behaviour that we WANT to happen and be triggered on save, this is currently not happening and only happens when you manually run the command `Go;vet workspace`\r\n\r\n![Screenshot 2021-10-01 at 19 33 36](https://user-images.githubusercontent.com/1073487/135670971-bebc680d-6657-43f3-a1d5-af7cd6c141d9.png)\r\n\r\nIn addition to this functionality not working, the user interface helptext in VSCode settings does not make sense. The setting helptext has this text, which refers to functionality that I believe is not longer valid.\r\n\r\n![Screenshot 2021-10-01 at 19 45 06](https://user-images.githubusercontent.com/1073487/135671472-20f0c8ed-5e0b-480f-b73d-ad7fb7840aba.png)\r\n\r\nI have tried all variations of this setting value; both `package` and `workspace`. Neither works. ","go\r\npackage testvet\r\n\r\nimport (\r\n\t""fmt""\r\n\t""sync""\r\n)\r\n\r\n// TestThatVetRunsOnSave minimal code to show vet not running on save in VS code\r\nfunc TestThatVetRunsOnSave() {\r\n\r\n\tch := make(chan string)\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo printit(wg, ch)\r\n\r\n\tch <- ""one""\r\n\tch <- ""two""\r\n\tclose(ch)\r\n\twg.Wait()\r\n\tfmt.Println(""done."")\r\n\r\n}\r\n\r\nfunc printit(wg sync.WaitGroup, ch chan string) {\r\n\tdefer wg.Done()\r\n\tfor t := range ch {\r\n\t\tfmt.Println(t)\r\n\t}\r\n}\r\n"
48606,"testing: fuzzed function can corrupt internal state of fuzzer<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/stevie/.cache/go-build""\r\nGOENV=""/home/stevie/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/stevie/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/stevie/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/stevie/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/stevie/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/stevie/code/corrupt/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1167654317=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nRan the following:\r\n\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nfuzz: minimizing 50-byte crash input...\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 745 (16223/sec), interesting: 2\r\n--- FAIL: FuzzCorrupt (0.05s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.052s\r\n$ cat testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f \r\ngo test fuzz v1\r\n[]byte(""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"")\r\n\r\n```\r\nThe ""crasher"" in the `testdata` directory does not cause a crash. \r\n\r\nRunning with minimization disabled also reveals an issue:\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt -fuzzminimizetime=0\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nFAIL\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 45 (1354/sec), interesting: 4\r\n--- FAIL: FuzzCorrupt (0.03s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 0 0 0 0 0 0 0 0 0 208 230 47 47 47 47 47 47 47 208 208 208 128 0 0]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.040s\r\n$ gotip test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nok  \tcorrupt\t0.003s\r\n$ cat testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f \r\ngo test fuzz v1\r\n[]byte(""\\v\\x01\\x00\\x00\\x00G\\xea\\x10\\x00\\x01\\v\\xba\\xd0\\xe6///////\\xd0\\xd0\u0400\\x00\\xe5"")\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCrashers stored in `testdata` should trigger crashes.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nCorpus entry was not a crasher.\r\n",NeedsDecision|FeatureRequest|fuzz,katiehockman,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/stevie/.cache/go-build""\r\nGOENV=""/home/stevie/.config/go/env""\r\nGOEXE=""""\r\nGOEXPERIMENT=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/stevie/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/stevie/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/stevie/sdk/gotip""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/stevie/sdk/gotip/pkg/tool/linux_amd64""\r\nGOVCS=""""\r\nGOVERSION=""devel go1.18-d4139083204 Fri Sep 24 07:22:13 2021 +0000""\r\nGCCGO=""gccgo""\r\nGOAMD64=""v1""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/home/stevie/code/corrupt/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1167654317=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nRan the following:\r\n```golang\r\npackage corrupt\r\n\r\nimport ""testing""\r\n\r\nfunc FuzzCorrupt(f *testing.F) {\r\n\tf.Fuzz(func(t *testing.T, input []byte) {\r\n\t\tdefer func() {\r\n\t\t\tfor i := range input {\r\n\t\t\t\tinput[i] = 0\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\tif len(input) >= 2 && input[0] == 0 && input[1] == 1 {\r\n\t\t\tt.Fatalf(""input %v"", input)\r\n\t\t}\r\n\r\n\t})\r\n}\r\n```\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nfuzz: minimizing 50-byte crash input...\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 745 (16223/sec), interesting: 2\r\n--- FAIL: FuzzCorrupt (0.05s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 84 84 84 0 174]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.052s\r\n$ cat testdata/fuzz/FuzzCorrupt/3be4f06197d4ae9580e884318bf125a616a7cd7eac35346c1e5c943218d8d00f \r\ngo test fuzz v1\r\n[]byte(""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"")\r\n\r\n```\r\nThe ""crasher"" in the `testdata` directory does not cause a crash. \r\n\r\nRunning with minimization disabled also reveals an issue:\r\n\r\n```\r\n$ gotip test -fuzz=FuzzCorrupt -fuzzminimizetime=0\r\nwarning: starting with empty corpus\r\nfuzz: elapsed: 0s, execs: 0 (0/sec), interesting: 0\r\nFAIL\r\nFAIL\r\nfuzz: elapsed: 0s, execs: 45 (1354/sec), interesting: 4\r\n--- FAIL: FuzzCorrupt (0.03s)\r\n        --- FAIL: FuzzCorrupt (0.00s)\r\n            fuzz_test.go:14: input [0 1 0 0 0 0 0 0 0 0 0 0 208 230 47 47 47 47 47 47 47 208 208 208 128 0 0]\r\n    \r\n    Crash written to testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\n    To re-run:\r\n    go test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nFAIL\r\nexit status 1\r\nFAIL\tcorrupt\t0.040s\r\n$ gotip test corrupt -run=FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f\r\nok  \tcorrupt\t0.003s\r\n$ cat testdata/fuzz/FuzzCorrupt/c0e98f376324bb6d09edf7d1d9d054ca8bd1af158ba4ce46fafd5f96daa76e9f \r\ngo test fuzz v1\r\n[]byte(""\\v\\x01\\x00\\x00\\x00G\\xea\\x10\\x00\\x01\\v\\xba\\xd0\\xe6///////\\xd0\\xd0\u0400\\x00\\xe5"")\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCrashers stored in `testdata` should trigger crashes.\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nCorpus entry was not a crasher.\r\n","golang\r\npackage corrupt\r\n\r\nimport ""testing""\r\n\r\nfunc FuzzCorrupt(f *testing.F) {\r\n\tf.Fuzz(func(t *testing.T, input []byte) {\r\n\t\tdefer func() {\r\n\t\t\tfor i := range input {\r\n\t\t\t\tinput[i] = 0\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\tif len(input) >= 2 && input[0] == 0 && input[1] == 1 {\r\n\t\t\tt.Fatalf(""input %v"", input)\r\n\t\t}\r\n\r\n\t})\r\n}\r\n"
48522,"proposal: spec: permit referring to a field shared by all elements of a type set<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n/tmp/golang-tip/bin/go version                                                                                                                      \r\ngo version devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, it is a generics issue, therefore tested with a recent tip only.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n<pre>\r\n</pre>\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE="""" \r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/me/.cache/go-build""\r\nGOENV=""/home/me/.config/go/env""            \r\nGOEXE=""""                                                                                                                                                                             GOEXPERIMENT=""""                                                                                                                                                                      GOFLAGS=""""                                                                                                                                                                           GOHOSTARCH=""amd64""                                                                                                                                                                   GOHOSTOS=""linux""                                                                                                                                                                     GOINSECURE=""""                                                                                                                                                                        GOMODCACHE=""/home/me/src/go/pkg/mod""                                                                                                                                           GONOPROXY=""k8s.io/*""\r\nGONOSUMDB=""""                                                                                                                                                                         GOOS=""linux""                                                                                                                                                                         GOPATH=""/home/me/src/go""                                                                                                                                                       GOPRIVATE=""""                                                                                                                                                                         GOPROXY=""""                                                                                                                                 \r\nGOROOT=""/tmp/golang-tip""                                                                                                                                                             GOSUMDB=""off""                                                                                                                                                                        GOTMPDIR=""""                                                                                                                                                                          GOTOOLDIR=""/tmp/golang-tip/pkg/tool/linux_amd64""                                                                                                                                     GOVCS=""""                                                                                                                                                                             GOVERSION=""devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000""                                                                                                                   GCCGO=""gccgo"" \r\nGOAMD64=""v1""                                                                                                                                                                         AR=""ar""                                                                                                                                                                              \r\nCC=""gcc""                                                                                                                                                                             CXX=""g++""                                                                                                                                                                            CGO_ENABLED=""1""                                                                                                                                                                      GOMOD=""/home/me/src/gocrtp/go.mod""                                                                                                                                             CGO_CFLAGS=""-g -O2""                                                                                                                                                                  CGO_CPPFLAGS=""""                                                                                                                                                                      CGO_CXXFLAGS=""-g -O2""                                                                                                                                                                CGO_FFLAGS=""-g -O2""                                                                                                                                                                  CGO_LDFLAGS=""-g -O2""                                                                                                                                                                 PKG_CONFIG=""pkg-config""                                                                                                                                                              GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1474680903=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile this  program (crtp.go) with generics: \r\n\r\nwith `tmp/golang-tip/bin/go build`\r\n\r\n### What did you expect to see?\r\nProgram compiles, runs and outputs `X: 1 2 4`\r\n\r\n### What did you see instead?\r\n`./crtp.go:19:11: p.X undefined (type bound for P has no method X)`\r\n\r\nAll three structs in the type bound have an identical X /field/, so I think this is wrong. Of course there is no method but I don't think that matters here. I feel I should be able to use the public field X of p since p can only be one of the three Point, Rect, or Elli.",Proposal|generics,griesemer,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n/tmp/golang-tip/bin/go version                                                                                                                      \r\ngo version devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo, it is a generics issue, therefore tested with a recent tip only.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n<pre>\r\n</pre>\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE="""" \r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/me/.cache/go-build""\r\nGOENV=""/home/me/.config/go/env""            \r\nGOEXE=""""                                                                                                                                                                             GOEXPERIMENT=""""                                                                                                                                                                      GOFLAGS=""""                                                                                                                                                                           GOHOSTARCH=""amd64""                                                                                                                                                                   GOHOSTOS=""linux""                                                                                                                                                                     GOINSECURE=""""                                                                                                                                                                        GOMODCACHE=""/home/me/src/go/pkg/mod""                                                                                                                                           GONOPROXY=""k8s.io/*""\r\nGONOSUMDB=""""                                                                                                                                                                         GOOS=""linux""                                                                                                                                                                         GOPATH=""/home/me/src/go""                                                                                                                                                       GOPRIVATE=""""                                                                                                                                                                         GOPROXY=""""                                                                                                                                 \r\nGOROOT=""/tmp/golang-tip""                                                                                                                                                             GOSUMDB=""off""                                                                                                                                                                        GOTMPDIR=""""                                                                                                                                                                          GOTOOLDIR=""/tmp/golang-tip/pkg/tool/linux_amd64""                                                                                                                                     GOVCS=""""                                                                                                                                                                             GOVERSION=""devel go1.18-986f8ea6b4 Tue Sep 21 00:59:42 2021 +0000""                                                                                                                   GCCGO=""gccgo"" \r\nGOAMD64=""v1""                                                                                                                                                                         AR=""ar""                                                                                                                                                                              \r\nCC=""gcc""                                                                                                                                                                             CXX=""g++""                                                                                                                                                                            CGO_ENABLED=""1""                                                                                                                                                                      GOMOD=""/home/me/src/gocrtp/go.mod""                                                                                                                                             CGO_CFLAGS=""-g -O2""                                                                                                                                                                  CGO_CPPFLAGS=""""                                                                                                                                                                      CGO_CXXFLAGS=""-g -O2""                                                                                                                                                                CGO_FFLAGS=""-g -O2""                                                                                                                                                                  CGO_LDFLAGS=""-g -O2""                                                                                                                                                                 PKG_CONFIG=""pkg-config""                                                                                                                                                              GOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1474680903=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI tried to compile this  program (crtp.go) with generics: \r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype Point struct {\r\n\tX, Y int\r\n}\r\n\r\ntype Rect struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\ntype Elli struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\nfunc GetX[P interface { Point | Rect | Elli }] (p P) int {\r\n\treturn p.X\r\n}\r\n\r\nfunc main() {\r\n\tp := Point { 1, 2}\r\n\tr := Rect {2, 3, 7, 8}\r\n\te := Elli {4, 5, 9, 10}\r\n\tfmt.Printf(""X: %d %d %d\\n"", GetX(p), GetX(r), GetX(e))\r\n}\r\n```\r\nwith `tmp/golang-tip/bin/go build`\r\n\r\n### What did you expect to see?\r\nProgram compiles, runs and outputs `X: 1 2 4`\r\n\r\n### What did you see instead?\r\n`./crtp.go:19:11: p.X undefined (type bound for P has no method X)`\r\n\r\nAll three structs in the type bound have an identical X /field/, so I think this is wrong. Of course there is no method but I don't think that matters here. I feel I should be able to use the public field X of p since p can only be one of the three Point, Rect, or Elli.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype Point struct {\r\n\tX, Y int\r\n}\r\n\r\ntype Rect struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\ntype Elli struct {\r\n\tX, Y, W, H int\r\n}\r\n\r\nfunc GetX[P interface { Point | Rect | Elli }] (p P) int {\r\n\treturn p.X\r\n}\r\n\r\nfunc main() {\r\n\tp := Point { 1, 2}\r\n\tr := Rect {2, 3, 7, 8}\r\n\te := Elli {4, 5, 9, 10}\r\n\tfmt.Printf(""X: %d %d %d\\n"", GetX(p), GetX(r), GetX(e))\r\n}\r\n"
48295,"go/types, types2: error messages don't distinguish between different types with the same names\r\nproduces:\r\n```\r\nx.go:8:12: incompatible type: cannot use GlobalT(0) (constant 0 of type T) as T value\r\n```\r\nThe error message reports the same type (`T`) for the variable and the constant, which is confusing.\r\n\r\nMaybe we can detect cases like these and provide additional information, such as where the types are declared.\r\n\r\nNot urgent as this is a rare scenario.",NeedsInvestigation,griesemer,"```Go\r\npackage p\r\n\r\ntype T int\r\n\r\nfunc _() {\r\n\ttype GlobalT = T\r\n\ttype T int\r\n\tvar _ T = GlobalT(0)\r\n}\r\n```\r\nproduces:\r\n```\r\nx.go:8:12: incompatible type: cannot use GlobalT(0) (constant 0 of type T) as T value\r\n```\r\nThe error message reports the same type (`T`) for the variable and the constant, which is confusing.\r\n\r\nMaybe we can detect cases like these and provide additional information, such as where the types are declared.\r\n\r\nNot urgent as this is a rare scenario.",Go\r\npackage p\r\n\r\ntype T int\r\n\r\nfunc _() {\r\n\ttype GlobalT = T\r\n\ttype T int\r\n\tvar _ T = GlobalT(0)\r\n}\r\n
47938,"x/tools/go/analysis/passes/nilness: false negative with pointers and type assertionsCurrently, as of `golang.org/x/tools v0.1.6-0.20210820212750-d4cc65f0b2ff` and `go1.17`, `nilness` doesn't mark the following code as invalid despite `tt` being provably nil:\r\n\r\n\r\n\r\nIf `ok` is false then `tt` is nil, since that is the default value for pointers.\r\n\r\nPlayground: https://play.golang.org/p/0ni1nXpLBFK.",NeedsDecision|Tools|Analysis,adonovan,"Currently, as of `golang.org/x/tools v0.1.6-0.20210820212750-d4cc65f0b2ff` and `go1.17`, `nilness` doesn't mark the following code as invalid despite `tt` being provably nil:\r\n\r\n```go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype T struct {\r\n\ta int\r\n}\r\n\r\nfunc main() {\r\n\tn := 0\r\n\tvar v interface{} = &n\r\n\r\n\ttt, ok := v.(*T)\r\n\tif ok {\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(tt.a)\r\n}\r\n```\r\n\r\nIf `ok` is false then `tt` is nil, since that is the default value for pointers.\r\n\r\nPlayground: https://play.golang.org/p/0ni1nXpLBFK.","go\r\npackage main\r\n\r\nimport ""fmt""\r\n\r\ntype T struct {\r\n\ta int\r\n}\r\n\r\nfunc main() {\r\n\tn := 0\r\n\tvar v interface{} = &n\r\n\r\n\ttt, ok := v.(*T)\r\n\tif ok {\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(tt.a)\r\n}\r\n"
47672,"crypto/tls: TLS connections use small buffer size that results in small syscalls and ignore HTTP client transport buffer sizes### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n`go1.16 darwin/amd6`\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nCOMP12013:dd-go richard.artoul$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/richard.artoul/Library/Caches/go-build""\r\nGOENV=""/Users/richard.artoul/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/richard.artoul/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/richard.artoul/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.15/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.15/libexec/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/t2/02qzh_vs4cn57ctvc7dwcsc80000gn/T/go-build075316343=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n</pre></details>\r\n\r\n### What did you do?\r\nI'm using this library: https://github.com/google/go-cloud to read files from S3 in a streaming fashion.\r\n\r\nI noticed that a lot of time was being spent in syscalls:\r\n![Screen Shot 2021-08-12 at 2 48 00 PM](https://user-images.githubusercontent.com/9171254/129263129-4a091d74-2eb0-4b48-8a8f-b7fb559c5b97.png)\r\n\r\n\r\nI was aware of this issue: https://github.com/golang/go/issues/22618\r\n\r\nSo I tuned my http client read/write buffer transport sizes to be 256kib instead of 64kib but this had no impact on time spent in syscalls which made me suspicious that somehow the way the reads were being performed that reads were not actually being buffered as I expected.\r\n\r\nI wrote a small program to download a file from S3 in a streaming fashion using large 1mib reads, like this:\r\n\r\n\r\n\r\nI couldn't get dtrace to work properly on OS X, but luckily my application uses a custom dialer for setting write/read deadlines on every socket read so I was able to instrument the actual socket read sizes like this:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nLarge syscall reads (in the range of 256KiB)\r\n\r\n### What did you see instead?\r\n\r\nExtremely small sys call reads:\r\n\r\n```\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nread size 28361\r\nread size 26929\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 5449\r\nn: 1024\r\nread size 56415\r\nread size 47823\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 23479\r\n```\r\n\r\n### What did you do after?\r\n\r\nI made a small change in `tls.go` to instantiate the TLS client with a much larger `rawInput` buffer:\r\n\r\n\r\n\r\nAs expected I began to observe much larger syscall reads:\r\n\r\n```\r\nread size 1034019\r\nread size 1024035\r\nread size 1022603\r\nread size 1003987\r\nread size 993963\r\nread size 991099\r\nread size 985371\r\nread size 982507\r\nread size 981075\r\nread size 965323\r\nread size 963891\r\nread size 955299\r\nread size 945275\r\nread size 935251\r\n```\r\n\r\nI haven't tried deploying my fork to production, and measuring performance on my laptop is not interesting since I have a terrible connection to S3, but I think its well understood that a 10x increase in syscalls (especially with such a small read size of 64kib) has a dramatic impact on performance.\r\n\r\n### Proposal\r\n\r\nI'm not 100% sure what the best approach is here, but I think we should do something since this issue means that streaming large amounts of data over TLS is much more CPU intensive than it needs to be which is a big deal for applications that process large volumes of data over the network like distributed databases.\r\n\r\nThe `tls` package already has a `Config` struct. It seems like it would be straightforward to add buffer size configuration there like has already been done for the HTTP transport. In addition, it seems reasonable that the HTTP client transport buffer sizes should be automatically propagated as the values for the TLS buffer size if the user doesn't specify a specific override.\r\n\r\n",NeedsInvestigation,rolandshoemaker,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\n`go1.16 darwin/amd6`\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n```\r\nCOMP12013:dd-go richard.artoul$ go env\r\nGO111MODULE=""auto""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/richard.artoul/Library/Caches/go-build""\r\nGOENV=""/Users/richard.artoul/Library/Application Support/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/Users/richard.artoul/go/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""darwin""\r\nGOPATH=""/Users/richard.artoul/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/Cellar/go/1.15/libexec""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/Cellar/go/1.15/libexec/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/t2/02qzh_vs4cn57ctvc7dwcsc80000gn/T/go-build075316343=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n</pre></details>\r\n\r\n### What did you do?\r\nI'm using this library: https://github.com/google/go-cloud to read files from S3 in a streaming fashion.\r\n\r\nI noticed that a lot of time was being spent in syscalls:\r\n![Screen Shot 2021-08-12 at 2 48 00 PM](https://user-images.githubusercontent.com/9171254/129263129-4a091d74-2eb0-4b48-8a8f-b7fb559c5b97.png)\r\n\r\n\r\nI was aware of this issue: https://github.com/golang/go/issues/22618\r\n\r\nSo I tuned my http client read/write buffer transport sizes to be 256kib instead of 64kib but this had no impact on time spent in syscalls which made me suspicious that somehow the way the reads were being performed that reads were not actually being buffered as I expected.\r\n\r\nI wrote a small program to download a file from S3 in a streaming fashion using large 1mib reads, like this:\r\n\r\n```golang\r\nstream, err := store.GetStream(ctx, *bucket, *path)\r\nif err != nil {\r\n    log.Fatalf(""error getting: %s, err: %v"", *path, err)\r\n}\r\ndefer stream.Close()\r\n\r\nbuf := make([]byte, 1<<20)\r\n    for {\r\n        n, err := bufio.NewReaderSize(stream, 1<<20).Read(buf)\r\n        if err == io.EOF {\r\n            break\r\n        }\r\n        if err != nil {\r\n            log.Fatal(err)\r\n        }\r\n\tfmt.Println(""n:"", n)\r\n}\r\n```\r\n\r\nI couldn't get dtrace to work properly on OS X, but luckily my application uses a custom dialer for setting write/read deadlines on every socket read so I was able to instrument the actual socket read sizes like this:\r\n\r\n```golang\r\nfunc (d *deadlineConn) Read(p []byte) (int, error) {\r\n\td.Conn.SetReadDeadline(time.Now().Add(d.readDeadline))\r\n\tfmt.Println(""read size"", len(p))\r\n\tn, err := d.Conn.Read(p)\r\n\terr = maybeWrapErr(err)\r\n\treturn n, err\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nLarge syscall reads (in the range of 256KiB)\r\n\r\n### What did you see instead?\r\n\r\nExtremely small sys call reads:\r\n\r\n```\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nn: 1024\r\nread size 52398\r\nn: 16384\r\nn: 1024\r\nread size 28361\r\nread size 26929\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 5449\r\nn: 1024\r\nread size 56415\r\nread size 47823\r\nn: 16384\r\nn: 1024\r\nn: 16384\r\nread size 23479\r\n```\r\n\r\n### What did you do after?\r\n\r\nI made a small change in `tls.go` to instantiate the TLS client with a much larger `rawInput` buffer:\r\n\r\n```golang\r\n// Client returns a new TLS client side connection\r\n// using conn as the underlying transport.\r\n// The config cannot be nil: users must set either ServerName or\r\n// InsecureSkipVerify in the config.\r\nfunc Client(conn net.Conn, config *Config) *Conn {\r\n\tc := &Conn{\r\n\t\trawInput: *bytes.NewBuffer(make([]byte, 0, 1<<20)),\r\n\t\tconn:     conn,\r\n\t\tconfig:   config,\r\n\t\tisClient: true,\r\n\t}\r\n\tc.handshakeFn = c.clientHandshake\r\n\treturn c\r\n}\r\n```\r\n\r\nAs expected I began to observe much larger syscall reads:\r\n\r\n```\r\nread size 1034019\r\nread size 1024035\r\nread size 1022603\r\nread size 1003987\r\nread size 993963\r\nread size 991099\r\nread size 985371\r\nread size 982507\r\nread size 981075\r\nread size 965323\r\nread size 963891\r\nread size 955299\r\nread size 945275\r\nread size 935251\r\n```\r\n\r\nI haven't tried deploying my fork to production, and measuring performance on my laptop is not interesting since I have a terrible connection to S3, but I think its well understood that a 10x increase in syscalls (especially with such a small read size of 64kib) has a dramatic impact on performance.\r\n\r\n### Proposal\r\n\r\nI'm not 100% sure what the best approach is here, but I think we should do something since this issue means that streaming large amounts of data over TLS is much more CPU intensive than it needs to be which is a big deal for applications that process large volumes of data over the network like distributed databases.\r\n\r\nThe `tls` package already has a `Config` struct. It seems like it would be straightforward to add buffer size configuration there like has already been done for the HTTP transport. In addition, it seems reasonable that the HTTP client transport buffer sizes should be automatically propagated as the values for the TLS buffer size if the user doesn't specify a specific override.\r\n\r\n","golang\r\nstream, err := store.GetStream(ctx, *bucket, *path)\r\nif err != nil {\r\n    log.Fatalf(""error getting: %s, err: %v"", *path, err)\r\n}\r\ndefer stream.Close()\r\n\r\nbuf := make([]byte, 1<<20)\r\n    for {\r\n        n, err := bufio.NewReaderSize(stream, 1<<20).Read(buf)\r\n        if err == io.EOF {\r\n            break\r\n        }\r\n        if err != nil {\r\n            log.Fatal(err)\r\n        }\r\n\tfmt.Println(""n:"", n)\r\n}\r\n"
47656,"runtime: scavenger not freeing all possible memory on darwinThis is effectively a follow-up to #29844. I am attempting to reduce our memory usage on iOS, where we are severely memory-constrained.\r\n\r\nOn darwin, `sysUnused` calls `madvise(v, n, _MADV_FREE_REUSABLE)`. This marks the pages as reclaimable by the OS. However, unexpectedly, it does not mark _all_ the pages as reclaimable. I do not understand why, but here's a way to reproduce it.\r\n\r\nThe following program makes and then frees a single large byte slice. It pauses three times: before the allocation, after the allocation, and after the allocation has been freed.\r\n\r\n\r\n\r\nRunning this on macOS, I use `footprint` to measure the app's footprint and `vmmap` to get the memory usage details, at each pause point. Concretely, I run `go build -o jjj x.go && GODEBUG=allocfreetrace=1 ./jjj` to run it and `footprint jjj && vmmap -pages -interleaved -submap jjj` to measure it.\r\n\r\nBefore the alloc, for the Go heap, `footprint` reports:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5344 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n4192 KB        0 B      1344 KB         40    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nNote that 4192KB-1344KB=2848KB, which is considerably higher than the 1168KB we began with.\r\n\r\n(The exact numbers vary slightly from run to run.)\r\n\r\n\r\nWe can get a glimpse into the details of the accounting using `vmmap` (with flags listed above). For the Go heap, before the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      200      200        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      202      202        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nThis lines up with what tracealloc said:\r\n\r\n```\r\ntracealloc(0x14000180000, 0x3d2000, uint8)\r\n```\r\n\r\nand then\r\n\r\n```\r\ntracefree(0x14000180000, 0x3d2000)\r\n```\r\n\r\nThe large byte slice spans the 14000000000-14000400000 and the 14000400000-14000800000 regions. However, the free appears only to have marked the pages in the 14000400000-14000800000 region as reclaimable. (84 pages = 1344KB, which is exactly what `footprint` reported as reclaimable.) The pages in the 14000000000-14000400000 region are still marked as dirty.\r\n\r\n\r\nAs an experiment, I changed `sysUnused` to also call `mprotect(v, n, _PROT_NONE)` then `mprotect(v, n, _PROT_READ|_PROT_WRITE)`. See https://github.com/tailscale/go/commit/38ab03e1b4bd0699759860fb9235ae382470b623.\r\n\r\nRunning again with this change, the unreclaimable space reported by `footprint` disappears. At the three pause points:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         37    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5328 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1584 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nWe're not back down to 1168KB (I wish I knew why), but it's considerably better than 2848KB. `vmmap` shows more or less the same pattern as before:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      188      188       12   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      197      197        5   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n(Note that if you add the dirty and swapped pages together in the `mprotect` run, they match the `madvise` run dirty pages count exactly.)\r\n\r\nI don't know how to interpret all of this. But it looks a bit like `madvise(v, n, _MADV_FREE_REUSABLE)` isn't sufficient to fully return memory to the OS, perhaps because of something having to do with allocation regions.\r\n\r\nI'm out of ideas for what/how to investigate from here, but I'm happy to follow up on suggestions.\r\n\r\ncc @mknyszek @bradfitz @randall77 \r\n",NeedsInvestigation|compiler/runtime,mknyszek,"This is effectively a follow-up to #29844. I am attempting to reduce our memory usage on iOS, where we are severely memory-constrained.\r\n\r\nOn darwin, `sysUnused` calls `madvise(v, n, _MADV_FREE_REUSABLE)`. This marks the pages as reclaimable by the OS. However, unexpectedly, it does not mark _all_ the pages as reclaimable. I do not understand why, but here's a way to reproduce it.\r\n\r\nThe following program makes and then frees a single large byte slice. It pauses three times: before the allocation, after the allocation, and after the allocation has been freed.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""runtime/debug""\r\n\t""time""\r\n)\r\n\r\nvar b []byte\r\n\r\nfunc main() {\r\n\t// Call time.Sleep and debug.FreeOSMemory once up front,\r\n\t// so that all basic runtime structures get set up\r\n\t// and all relevant pages get dirtied.\r\n\ttime.Sleep(time.Millisecond)\r\n\tdebug.FreeOSMemory()\r\n\tprintln(""start"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = make([]byte, 4_000_000)\r\n\tfor i := range b {\r\n\t\tb[i] = 1\r\n\t}\r\n\tprintln(""allocated"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = nil\r\n\tdebug.FreeOSMemory()\r\n\ttime.Sleep(3 * time.Second) // wait for the scavenger's effects to be visible\r\n\tprintln(""freed"")\r\n\ttime.Sleep(3 * time.Hour)\r\n}\r\n```\r\n\r\nRunning this on macOS, I use `footprint` to measure the app's footprint and `vmmap` to get the memory usage details, at each pause point. Concretely, I run `go build -o jjj x.go && GODEBUG=allocfreetrace=1 ./jjj` to run it and `footprint jjj && vmmap -pages -interleaved -submap jjj` to measure it.\r\n\r\nBefore the alloc, for the Go heap, `footprint` reports:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5344 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n4192 KB        0 B      1344 KB         40    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nNote that 4192KB-1344KB=2848KB, which is considerably higher than the 1168KB we began with.\r\n\r\n(The exact numbers vary slightly from run to run.)\r\n\r\n\r\nWe can get a glimpse into the details of the accounting using `vmmap` (with flags listed above). For the Go heap, before the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the alloc:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      200      200        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nAfter the free:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      202      202        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\nThis lines up with what tracealloc said:\r\n\r\n```\r\ntracealloc(0x14000180000, 0x3d2000, uint8)\r\n```\r\n\r\nand then\r\n\r\n```\r\ntracefree(0x14000180000, 0x3d2000)\r\n```\r\n\r\nThe large byte slice spans the 14000000000-14000400000 and the 14000400000-14000800000 regions. However, the free appears only to have marked the pages in the 14000400000-14000800000 region as reclaimable. (84 pages = 1344KB, which is exactly what `footprint` reported as reclaimable.) The pages in the 14000000000-14000400000 region are still marked as dirty.\r\n\r\n\r\nAs an experiment, I changed `sysUnused` to also call `mprotect(v, n, _PROT_NONE)` then `mprotect(v, n, _PROT_READ|_PROT_WRITE)`. See https://github.com/tailscale/go/commit/38ab03e1b4bd0699759860fb9235ae382470b623.\r\n\r\nRunning again with this change, the unreclaimable space reported by `footprint` disappears. At the three pause points:\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1168 KB        0 B          0 B         37    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n5328 KB        0 B          0 B         38    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\n```\r\n  Dirty      Clean  Reclaimable    Regions    Category\r\n    ---        ---          ---        ---    ---\r\n1584 KB        0 B          0 B         39    untagged (""VM_ALLOCATE"")\r\n```\r\n\r\nWe're not back down to 1168KB (I wish I knew why), but it's considerably better than 2848KB. `vmmap` shows more or less the same pattern as before:\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256       40       40        0   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14004000000  [ 3840        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      188      188       12   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85       85        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n```\r\nREGION TYPE                    START - END         [   VSIZE    RSDNT    DIRTY     SWAP] PRT/MAX SHRMOD PURGE    REGION DETAIL\r\nVM_ALLOCATE               14000000000-14000400000  [  256      197      197        5   ] rw-/rwx SM=ZER  \r\nVM_ALLOCATE               14000400000-14000800000  [  256       85        1        0   ] rw-/rwx SM=PRV  \r\nVM_ALLOCATE               14000800000-14004000000  [ 3584        0        0        0   ] ---/rwx SM=NUL  \r\n```\r\n\r\n(Note that if you add the dirty and swapped pages together in the `mprotect` run, they match the `madvise` run dirty pages count exactly.)\r\n\r\nI don't know how to interpret all of this. But it looks a bit like `madvise(v, n, _MADV_FREE_REUSABLE)` isn't sufficient to fully return memory to the OS, perhaps because of something having to do with allocation regions.\r\n\r\nI'm out of ideas for what/how to investigate from here, but I'm happy to follow up on suggestions.\r\n\r\ncc @mknyszek @bradfitz @randall77 \r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""runtime/debug""\r\n\t""time""\r\n)\r\n\r\nvar b []byte\r\n\r\nfunc main() {\r\n\t// Call time.Sleep and debug.FreeOSMemory once up front,\r\n\t// so that all basic runtime structures get set up\r\n\t// and all relevant pages get dirtied.\r\n\ttime.Sleep(time.Millisecond)\r\n\tdebug.FreeOSMemory()\r\n\tprintln(""start"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = make([]byte, 4_000_000)\r\n\tfor i := range b {\r\n\t\tb[i] = 1\r\n\t}\r\n\tprintln(""allocated"")\r\n\ttime.Sleep(5 * time.Second)\r\n\r\n\tb = nil\r\n\tdebug.FreeOSMemory()\r\n\ttime.Sleep(3 * time.Second) // wait for the scavenger's effects to be visible\r\n\tprintln(""freed"")\r\n\ttime.Sleep(3 * time.Hour)\r\n}\r\n"
47538,"x/tools/gopls: error loading workspace when go.mod is directly updated to include a new dependency### What version of Go/Gopls are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.16.6\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.7.1\r\n    golang.org/x/tools/gopls@v0.7.1 h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\r\n    golang.org/x/tools@v0.1.6-0.20210802203754-9b21a8868e16 h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nmac\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Ran `go clean -modcache` to empty the module cache. (clean state)\r\n* Cloned vscode-go repo.\r\n* Opened vscode and waited until the initial workspace loading is complete.\r\n* Cherry-picked a gerrit cl that adds a new dependency to go.mod\r\n```\r\n   git fetch https://go.googlesource.com/vscode-go refs/changes/95/337495/3 && git cherry-pick FETCH_HEAD\r\n```  \r\n\r\n### What did you expect to see?\r\n\r\nThe new dependency is picked up automatically.\r\nOr gopls sends diagnostics with code actions or codelens that downloads the new dependency.\r\n\r\n### What did you see instead?\r\n\r\nStuck in workspace loading, without any action or helpful info to address the issue.\r\n\r\nI found multiple ways to get out of this broken state, and would be nice if gopls suggests one of them or other:\r\n - Restart gopls so the initial workspace loading downloads necessary dependency, or\r\n - Run `go mod tidy`  or\r\n - Run `go get` ...\r\n\r\nThe following is the gopls log - \r\n<details><summary>gopls log</summary>\r\n<pre>\r\n[Trace - 18:53:14.115 PM] Sending request 'initialize - (0)'.\r\nParams: {""processId"":6803,""clientInfo"":{""name"":""Visual Studio Code - Insiders"",""version"":""1.59.0-insider""},""locale"":""en-us"",""rootPath"":""/Users/hakim/projects/google/vscode-go"",""rootUri"":""file:///Users/hakim/projects/google/vscode-go"",""capabilities"":{""workspace"":{""applyEdit"":true,""workspaceEdit"":{""documentChanges"":true,""resourceOperations"":[""create"",""rename"",""delete""],""failureHandling"":""textOnlyTransactional"",""normalizesLineEndings"":true,""changeAnnotationSupport"":{""groupsOnLabel"":true}},""didChangeConfiguration"":{""dynamicRegistration"":true},""didChangeWatchedFiles"":{""dynamicRegistration"":true},""symbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""tagSupport"":{""valueSet"":[1]}},""codeLens"":{""refreshSupport"":true},""executeCommand"":{""dynamicRegistration"":true},""configuration"":true,""workspaceFolders"":true,""semanticTokens"":{""refreshSupport"":true},""fileOperations"":{""dynamicRegistration"":true,""didCreate"":true,""didRename"":true,""didDelete"":true,""willCreate"":true,""willRename"":true,""willDelete"":true}},""textDocument"":{""publishDiagnostics"":{""relatedInformation"":true,""versionSupport"":false,""tagSupport"":{""valueSet"":[1,2]},""codeDescriptionSupport"":true,""dataSupport"":true},""synchronization"":{""dynamicRegistration"":true,""willSave"":true,""willSaveWaitUntil"":true,""didSave"":true},""completion"":{""dynamicRegistration"":true,""contextSupport"":true,""completionItem"":{""snippetSupport"":true,""commitCharactersSupport"":true,""documentationFormat"":[""markdown"",""plaintext""],""deprecatedSupport"":true,""preselectSupport"":true,""tagSupport"":{""valueSet"":[1]},""insertReplaceSupport"":true,""resolveSupport"":{""properties"":[""documentation"",""detail"",""additionalTextEdits""]},""insertTextModeSupport"":{""valueSet"":[1,2]}},""completionItemKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},""hover"":{""dynamicRegistration"":true,""contentFormat"":[""markdown"",""plaintext""]},""signatureHelp"":{""dynamicRegistration"":true,""signatureInformation"":{""documentationFormat"":[""markdown"",""plaintext""],""parameterInformation"":{""labelOffsetSupport"":true},""activeParameterSupport"":true},""contextSupport"":true},""definition"":{""dynamicRegistration"":true,""linkSupport"":true},""references"":{""dynamicRegistration"":true},""documentHighlight"":{""dynamicRegistration"":true},""documentSymbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""hierarchicalDocumentSymbolSupport"":true,""tagSupport"":{""valueSet"":[1]},""labelSupport"":true},""codeAction"":{""dynamicRegistration"":true,""isPreferredSupport"":true,""disabledSupport"":true,""dataSupport"":true,""resolveSupport"":{""properties"":[""edit""]},""codeActionLiteralSupport"":{""codeActionKind"":{""valueSet"":["""",""quickfix"",""refactor"",""refactor.extract"",""refactor.inline"",""refactor.rewrite"",""source"",""source.organizeImports""]}},""honorsChangeAnnotations"":false},""codeLens"":{""dynamicRegistration"":true},""formatting"":{""dynamicRegistration"":true},""rangeFormatting"":{""dynamicRegistration"":true},""onTypeFormatting"":{""dynamicRegistration"":true},""rename"":{""dynamicRegistration"":true,""prepareSupport"":true,""prepareSupportDefaultBehavior"":1,""honorsChangeAnnotations"":true},""documentLink"":{""dynamicRegistration"":true,""tooltipSupport"":true},""typeDefinition"":{""dynamicRegistration"":true,""linkSupport"":true},""implementation"":{""dynamicRegistration"":true,""linkSupport"":true},""colorProvider"":{""dynamicRegistration"":true},""foldingRange"":{""dynamicRegistration"":true,""rangeLimit"":5000,""lineFoldingOnly"":true},""declaration"":{""dynamicRegistration"":true,""linkSupport"":true},""selectionRange"":{""dynamicRegistration"":true},""callHierarchy"":{""dynamicRegistration"":true},""semanticTokens"":{""dynamicRegistration"":true,""tokenTypes"":[""namespace"",""type"",""class"",""enum"",""interface"",""struct"",""typeParameter"",""parameter"",""variable"",""property"",""enumMember"",""event"",""function"",""method"",""macro"",""keyword"",""modifier"",""comment"",""string"",""number"",""regexp"",""operator""],""tokenModifiers"":[""declaration"",""definition"",""readonly"",""static"",""deprecated"",""abstract"",""async"",""modification"",""documentation"",""defaultLibrary""],""formats"":[""relative""],""requests"":{""range"":true,""full"":{""delta"":true}},""multilineTokenSupport"":false,""overlappingTokenSupport"":false},""linkedEditingRange"":{""dynamicRegistration"":true}},""window"":{""showMessage"":{""messageActionItem"":{""additionalPropertiesSupport"":true}},""showDocument"":{""support"":true},""workDoneProgress"":true},""general"":{""regularExpressions"":{""engine"":""ECMAScript"",""version"":""ES2020""},""markdown"":{""parser"":""marked"",""version"":""1.1.0""}}},""initializationOptions"":{""verboseOutput"":true},""trace"":""verbose"",""workspaceFolders"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go"",""name"":""vscode-go""}]}\r\n\r\n\r\n[Trace - 18:53:14.117 PM] Received response 'initialize - (0)' in 2ms.\r\nResult: {""capabilities"":{""textDocumentSync"":{""openClose"":true,""change"":2,""save"":{}},""completionProvider"":{""triggerCharacters"":["".""],""completionItem"":{}},""hoverProvider"":true,""signatureHelpProvider"":{""triggerCharacters"":[""("","",""]},""definitionProvider"":true,""typeDefinitionProvider"":true,""implementationProvider"":true,""referencesProvider"":true,""documentHighlightProvider"":true,""documentSymbolProvider"":true,""codeActionProvider"":{""codeActionKinds"":[""quickfix"",""refactor.extract"",""refactor.rewrite"",""source.fixAll"",""source.organizeImports""]},""codeLensProvider"":{},""documentLinkProvider"":{},""workspaceSymbolProvider"":true,""documentFormattingProvider"":true,""documentOnTypeFormattingProvider"":{""firstTriggerCharacter"":""""},""renameProvider"":{""prepareProvider"":true},""foldingRangeProvider"":true,""executeCommandProvider"":{""commands"":[""gopls.add_dependency"",""gopls.add_import"",""gopls.apply_fix"",""gopls.check_upgrades"",""gopls.gc_details"",""gopls.generate"",""gopls.generate_gopls_mod"",""gopls.go_get_package"",""gopls.list_known_packages"",""gopls.regenerate_cgo"",""gopls.remove_dependency"",""gopls.run_tests"",""gopls.start_debugging"",""gopls.test"",""gopls.tidy"",""gopls.toggle_gc_details"",""gopls.update_go_sum"",""gopls.upgrade_dependency"",""gopls.vendor"",""gopls.workspace_metadata""]},""callHierarchyProvider"":true,""workspace"":{""workspaceFolders"":{""supported"":true,""changeNotifications"":""workspace/didChangeWorkspaceFolders""}}},""serverInfo"":{""name"":""gopls"",""version"":""{\\""path\\"":\\""golang.org/x/tools/gopls\\"",\\""version\\"":\\""v0.7.1\\"",\\""sum\\"":\\""h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\\"",\\""deps\\"":[{\\""path\\"":\\""github.com/BurntSushi/toml\\"",\\""version\\"":\\""v0.3.1\\"",\\""sum\\"":\\""h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\\""},{\\""path\\"":\\""github.com/google/go-cmp\\"",\\""version\\"":\\""v0.5.5\\"",\\""sum\\"":\\""h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\\""},{\\""path\\"":\\""github.com/sergi/go-diff\\"",\\""version\\"":\\""v1.1.0\\"",\\""sum\\"":\\""h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\\""},{\\""path\\"":\\""golang.org/x/mod\\"",\\""version\\"":\\""v0.4.2\\"",\\""sum\\"":\\""h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\\""},{\\""path\\"":\\""golang.org/x/sync\\"",\\""version\\"":\\""v0.0.0-20210220032951-036812b2e83c\\"",\\""sum\\"":\\""h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\\""},{\\""path\\"":\\""golang.org/x/sys\\"",\\""version\\"":\\""v0.0.0-20210510120138-977fb7262007\\"",\\""sum\\"":\\""h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\\""},{\\""path\\"":\\""golang.org/x/tools\\"",\\""version\\"":\\""v0.1.6-0.20210802203754-9b21a8868e16\\"",\\""sum\\"":\\""h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\\""},{\\""path\\"":\\""golang.org/x/xerrors\\"",\\""version\\"":\\""v0.0.0-20200804184101-5ec99f83aff1\\"",\\""sum\\"":\\""h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\\""},{\\""path\\"":\\""honnef.co/go/tools\\"",\\""version\\"":\\""v0.2.0\\"",\\""sum\\"":\\""h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\\""},{\\""path\\"":\\""mvdan.cc/gofumpt\\"",\\""version\\"":\\""v0.1.1\\"",\\""sum\\"":\\""h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\\""},{\\""path\\"":\\""mvdan.cc/xurls/v2\\"",\\""version\\"":\\""v2.2.0\\"",\\""sum\\"":\\""h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\\""}]}""}}\r\n\r\n\r\n[Trace - 18:53:14.152 PM] Sending notification 'initialized'.\r\nParams: {}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Received request 'window/workDoneProgress/create - (1)'.\r\nParams: {""token"":""5577006791947779410""}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Sending notification 'textDocument/didOpen'.\r\nParams: {...}}\r\n\r\n\r\n[Trace - 18:53:14.171 PM] Sending response 'window/workDoneProgress/create - (1)' in 18ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:14.171 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""begin"",""title"":""Setting up workspace"",""message"":""Loading packages...""}}\r\n\r\n\r\n[Trace - 18:53:14.172 PM] Received request 'workspace/configuration - (2)'.\r\nParams: {""items"":[{""scopeUri"":""file:///Users/hakim/projects/google/vscode-go"",""section"":""gopls""}]}\r\n\r\n\r\n[Trace - 18:53:14.230 PM] Sending response 'workspace/configuration - (2)' in 58ms.\r\nResult: [{""verboseOutput"":true}]\r\n\r\n\r\n[Trace - 18:53:14.734 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\\n(root /Users/hakim/projects/google/vscode-go)\\n(go version go version go1.16.6 darwin/amd64)\\n(valid build configuration = true)\\n(build flags: [])\\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\\nGOPATH=/Users/hakim/go\\nGOSUMDB=sum.golang.org\\nGOMODCACHE=/Users/hakim/go/pkg/mod\\nGONOSUMDB=\\nGOPROXY=https://proxy.golang.org,direct\\nGOCACHE=/Users/hakim/Library/Caches/go-build\\nGOFLAGS=\\nGOINSECURE=\\nGO111MODULE=\\nGONOPROXY=\\nGOPRIVATE=\\nGOROOT=/Users/hakim/sdk/go1.16.6\\n\\n""}\r\n\r\n\r\n[Trace - 18:53:14.758 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:14.763 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/documentSymbol - (1)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/codeAction - (2)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""range"":{""start"":{""line"":67,""character"":12},""end"":{""line"":67,""character"":12}},""context"":{""diagnostics"":[]}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\r\n(root /Users/hakim/projects/google/vscode-go)\r\n(go version go version go1.16.6 darwin/amd64)\r\n(valid build configuration = true)\r\n(build flags: [])\r\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\r\nGOPATH=/Users/hakim/go\r\nGOSUMDB=sum.golang.org\r\nGOMODCACHE=/Users/hakim/go/pkg/mod\r\nGONOSUMDB=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOCACHE=/Users/hakim/Library/Caches/go-build\r\nGOFLAGS=\r\nGOINSECURE=\r\nGO111MODULE=\r\nGONOPROXY=\r\nGOPRIVATE=\r\nGOROOT=/Users/hakim/sdk/go1.16.6\r\n\r\n\r\n[Trace - 18:53:15.038 PM] Sending request 'textDocument/documentLink - (3)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/foldingRange - (4)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/codeLens - (5)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.563 PM] Sending request 'textDocument/documentLink - (6)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":6}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending request 'textDocument/documentLink - (7)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.915 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":4}\r\n\r\n\r\n[Trace - 18:53:18.142 PM] Sending request 'textDocument/foldingRange - (8)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.369 PM] Sending request 'textDocument/documentLink - (9)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.879 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":5}\r\n\r\n\r\n[Trace - 18:53:19.432 PM] Sending request 'textDocument/codeLens - (10)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.459 PM] Sending request 'textDocument/codeLens - (11)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.598 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":9}\r\n\r\n\r\n[Trace - 18:53:19.601 PM] Sending request 'textDocument/documentLink - (12)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:31.288 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:53:31.343 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:53:31.344 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:53:31.425 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:53:31.426 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:53:31.431 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""end"",""message"":""Finished loading packages.""}}\r\n\r\n\r\n[Trace - 18:53:31.434 PM] Received request 'client/registerCapability - (3)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeWatchedFiles-0"",""method"":""workspace/didChangeWatchedFiles"",""registerOptions"":{""watchers"":[{""globPattern"":""**/*.{go,mod,sum}"",""kind"":7},{""globPattern"":""**/*.*tmpl"",""kind"":7},{""globPattern"":""{/Users/hakim/projects/google/vscode-go/tools,/Users/hakim/projects/google/vscode-go/tools/goplssetting,/Users/hakim/projects/google/vscode-go/tools/relnotes}"",""kind"":7}]}}]}\r\n\r\n\r\n[Trace - 18:53:31.455 PM] Sending response 'client/registerCapability - (3)' in 21ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.460 PM] Received request 'client/registerCapability - (4)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeConfiguration"",""method"":""workspace/didChangeConfiguration""},{""id"":""workspace/didChangeWorkspaceFolders"",""method"":""workspace/didChangeWorkspaceFolders""}]}\r\n\r\n\r\n[Trace - 18:53:31.468 PM] Sending response 'client/registerCapability - (4)' in 8ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.712 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\\n\\tpackage=\\""runtime\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\r\n\tpackage=""runtime""\r\n\r\n[Trace - 18:53:31.831 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:53:31.856 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\\n\\tpackage=\\""vendor/golang.org/x/text/unicode/bidi\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\r\n\tpackage=""vendor/golang.org/x/text/unicode/bidi""\r\n\r\n[Trace - 18:53:31.869 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\\n\\tpackage=\\""os/user\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\r\n\tpackage=""os/user""\r\n\r\n[Trace - 18:53:31.965 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\\n\\tpackage=\\""github.com/google/go-github/github\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\r\n\tpackage=""github.com/google/go-github/github""\r\n\r\n[Trace - 18:53:32.046 PM] Received response 'textDocument/documentSymbol - (1)' in 17021ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.048 PM] Received response 'textDocument/codeAction - (2)' in 17023ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.050 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:32 fixImports(filename=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\""), abs=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\"", srcDir=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes\\"" ...\\n""}\r\n\r\n\r\n[Trace - 18:53:32.052 PM] Received response 'textDocument/documentLink - (3)' in 17014ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #4 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #5 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #6 JSON RPC cancelled\r\n\r\n\r\n[Info  - 6:53:32 PM] 2021/08/04 18:53:32 fixImports(filename=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""), abs=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"", srcDir=""/Users/hakim/projects/google/vscode-go/tools/relnotes"" ...\r\n\r\n[Trace - 18:53:32.056 PM] Received response 'textDocument/documentLink - (7)' in 14141ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.067 PM] Received response 'textDocument/foldingRange - (8)' in 13925ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.068 PM #9 JSON RPC cancelled\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (10)' in 12636ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (11)' in 12609ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.070 PM] Received response 'textDocument/documentLink - (12)' in 12470ms.\r\nResult: [{...}]\r\n\r\n</pre>\r\n\r\n* Now I ran `git fetch`.\r\n\r\n<pre>\r\n[Trace - 18:53:48.172 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":22,""character"":0},""end"":{""line"":296,""character"":0}},""rangeLength"":7095,""text"":""\\t\\""github.com/stamblerre/work-stats/generic\\""\\n\\t\\""github.com/stamblerre/work-stats/golang\\""\\n\\t\\""golang.org/x/build/maintner\\""\\n\\t\\""golang.org/x/build/maintner/godata\\""\\n)\\n\\nvar (\\n\\tmilestone  = flag.String(\\""milestone\\"", \\""\\"", \\""milestone associated with the release\\"")\\n\\tfilterDirs = flag.String(\\""dirs\\"", \\""\\"", \\""comma-separated list of directories that should be touched for a CL to be considered relevant\\"")\\n\\tsinceCL    = flag.Int(\\""cl\\"", -1, \\""the gerrit change number of the first CL to include in the output. Only changes submitted more recently than 'cl' will be included.\\"")\\n\\tproject    = flag.String(\\""project\\"", \\""vscode-go\\"", \\""name of the golang project\\"")\\n\\tmdMode     = flag.Bool(\\""md\\"", false, \\""write MD output\\"")\\n\\texclFile   = flag.String(\\""exclude-from\\"", \\""\\"", \\""optional path to changelog MD file. If specified, any 'CL NNNN' occurence in the content will cause that CL to be excluded from this tool's output.\\"")\\n)\\n\\nfunc main() {\\n\\tflag.Parse()\\n\\n\\tvar existingMD []byte\\n\\tif *exclFile != \\""\\"" {\\n\\t\\tvar err error\\n\\t\\texistingMD, err = ioutil.ReadFile(*exclFile)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatal(err)\\n\\t\\t}\\n\\t}\\n\\n\\tcorpus, err := godata.Get(context.Background())\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\n\\tvar dirs []string\\n\\tfor _, dir := range strings.FieldsFunc(*filterDirs, func(r rune) bool {\\n\\t\\treturn unicode.IsSpace(r) || r == ','\\n\\t}) {\\n\\t\\tdirs = append(dirs, filepath.ToSlash(dir))\\n\\t}\\n\\n\\tger := corpus.Gerrit()\\n\\n\\t// Find the cutoff time for changes to include.\\n\\tstart := time.Date(2020, time.August, 1, 00, 00, 00, 0, time.UTC)\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif *sinceCL >= 0 {\\n\\t\\t\\t\\tif int(cl.Number) == *sinceCL {\\n\\t\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if cl.Branch() == \\""release\\"" && cl.Commit.CommitTime.After(start) {\\n\\t\\t\\t\\t// Try to figure out when the last release was\\n\\t\\t\\t\\tfmt.Println(cl.Commit.CommitTime)\\n\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t}\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tvar changes []*generic.Changelist\\n\\tauthors := map[*maintner.GitPerson]bool{}\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\t// Only include 'master'\\n\\t\\t\\tif cl.Branch() != \\""master\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Commit.CommitTime.Before(start) {\\n\\t\\t\\t\\t// Was in a previous release; not for this one.\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\tif bytes.Contains(existingMD, []byte(fmt.Sprintf(\\""CL %d \\"", cl.Number))) {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that at least one file is in a relevant directory before\\n\\t\\t\\t// adding the CL.\\n\\t\\t\\tif len(dirs) > 0 {\\n\\t\\t\\t\\tvar found bool\\n\\t\\t\\t\\tfor _, file := range cl.Commit.Files {\\n\\t\\t\\t\\t\\tfor _, dir := range dirs {\\n\\t\\t\\t\\t\\t\\tif strings.Contains(file.File, dir) {\\n\\t\\t\\t\\t\\t\\t\\tfound = true\\n\\t\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif !found {\\n\\t\\t\\t\\t\\treturn nil\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tchanges = append(changes, golang.GerritToGenericCL(cl))\\n\\t\\t\\tauthors[cl.Owner()] = true\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tsort.Slice(changes, func(i, j int) bool {\\n\\t\\treturn changes[i].Number < changes[j].Number\\n\\t})\\n\\n\\tif *mdMode {\\n\\t\\tfmt.Printf(\\""## TODO: version - \\"")\\n\\t\\tnow := time.Now()\\n\\t\\tfmt.Printf(\\""%s\\\\n\\\\n\\"", now.Format(\\""2 Jan, 2006\\""))\\n\\t\\tfmt.Printf(\\""### Changes\\\\n\\\\n\\"")\\n\\t\\tmdPrintChanges(changes, true)\\n\\n\\t\\tfmt.Printf(\\""### Issues\\\\n\\\\n\\"")\\n\\t\\tmdPrintIssues(changes, *milestone)\\n\\n\\t\\tfmt.Printf(\\""\\\\n### Thanks\\\\n\\\\n\\"")\\n\\t\\tmdPrintContributors(authors)\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tfmt.Printf(\\""  %s\\\\n\\"", change.Subject)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintChanges(changes []*generic.Changelist, byCategory bool) {\\n\\tprintChange := func(change *generic.Changelist) {\\n\\t\\tfmt.Printf(\\""- \\"")\\n\\t\\tcontent := change.Subject\\n\\t\\tnote := releaseNote(change)\\n\\t\\tif note != \\""\\"" && note != \\""yes\\"" && note != \\""y\\"" {\\n\\t\\t\\t// The release note contains content.\\n\\t\\t\\tcontent = note\\n\\t\\t}\\n\\n\\t\\tfmt.Printf(\\""%s\\"", content)\\n\\t\\tif len(change.AssociatedIssues) > 0 {\\n\\t\\t\\tfmt.Printf(\\"" (\\"")\\n\\t\\t\\tfor i, issue := range change.AssociatedIssues {\\n\\t\\t\\t\\tif i == 0 {\\n\\t\\t\\t\\t\\tfmt.Printf(\\""[Issue %d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfmt.Printf(\\"", [%d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfmt.Printf(\\"")\\"")\\n\\t\\t}\\n\\t\\tfmt.Printf(\\"" <!-- CL %d -->\\\\n\\"", change.Number)\\n\\t}\\n\\t// Group CLs by category or by number order.\\n\\tif byCategory {\\n\\t\\tpkgMap := map[string][]*generic.Changelist{}\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tpkgMap[change.Category()] = append(pkgMap[change.Category()], change)\\n\\t\\t}\\n\\t\\tfor _, changes := range pkgMap {\\n\\t\\t\\tfor _, change := range changes {\\n\\t\\t\\t\\tprintChange(change)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tprintChange(change)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintIssues(changes []*generic.Changelist, milestone string) {\\n\\tvar issues []*generic.Issue\\n\\tfor _, change := range changes {\\n\\t\\tissues = append(issues, change.AssociatedIssues...)\\n\\t}\\n\\tsort.Slice(issues, func(i, j int) bool {\\n\\t\\treturn issues[i].Link < issues[j].Link\\n\\t})\\n\\tfor _, issue := range issues {\\n\\t\\tif !issue.Closed() {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tfmt.Printf(\\""%s: %s\\\\n\\"", issue.Link, issue.Milestone)\\n\\t}\\n}\\n\\n// clPackage returns the package name from the CL's commit message,\\n// or \\""??\\"" if it's formatted unconventionally.\\nfunc clPackage(cl *maintner.GerritCL) string {\\n\\tsubj := cl.Subject()\\n\\tif i := strings.Index(subj, \\"":\\""); i != -1 {\\n\\t\\treturn subj[:i]\\n\\t}\\n\\treturn \\""??\\""\\n}\\n\\nvar relNoteRx = regexp.MustCompile(`RELNOTES?=(.+)`)\\n\\nfunc parseRelNote(s string) string {\\n\\tif m := relNoteRx.FindStringSubmatch(s); m != nil {\\n\\t\\treturn m[1]\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc releaseNote(cl *generic.Changelist) string {\\n\\tif strings.Contains(cl.Message, \\""RELNOTE\\"") {\\n\\t\\treturn parseRelNote(cl.Message)\\n\\t}\\n\\tfor _, comment := range cl.Comments {\\n\\t\\tif strings.Contains(comment, \\""RELNOTE\\"") {\\n\\t\\t\\treturn parseRelNote(comment)\\n\\t\\t}\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc mdPrintContributors(authors map[*maintner.GitPerson]bool) {\\n\\tvar names []string\\n\\tfor author := range authors {\\n\\t\\t// It would be great to look up the GitHub username by using:\\n\\t\\t// https://pkg.go.dev/golang.org/x/build/internal/gophers#GetPerson.\\n""}]}\r\n\r\n\r\n[Trace - 18:53:48.206 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.357 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.379 PM] Sending request 'textDocument/foldingRange - (13)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:48.390 PM] Received response 'textDocument/foldingRange - (13)' in 11ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:48.410 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:53:48.421 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.444 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.446 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.463 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.478 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\n""}\r\n\r\n\r\n[Trace - 18:53:48.480 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.771 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:48.774 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:49.163 PM] Sending request 'textDocument/documentLink - (14)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:49.178 PM] Received response 'textDocument/documentLink - (14)' in 14ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received request 'window/workDoneProgress/create - (5)'.\r\nParams: {""token"":""8674665223082153551""}\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n\\tsnapshot=3\\n\\tdirectory=file:///Users/hakim/projects/google/vscode-go\\n""}\r\n\r\n\r\n[Error - 6:53:49 PM] 2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\tsnapshot=3\r\n\tdirectory=file:///Users/hakim/projects/google/vscode-go\r\n\r\n[Trace - 18:53:49.705 PM] Sending response 'window/workDoneProgress/create - (5)' in 1ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""begin"",""title"":""Error loading workspace"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off : packages.Load error""}}\r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[{""range"":{""start"":{""line"":0,""character"":0},""end"":{""line"":0,""character"":34}},""severity"":1,""source"":""go list"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error""}]}\r\n\r\n\r\n[Trace - 18:53:50.672 PM] Sending request 'textDocument/codeLens - (15)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.673 PM] Received response 'textDocument/codeLens - (15)' in 1ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/codeLens - (16)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/documentSymbol - (17)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Received response 'textDocument/codeLens - (16)' in 0ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.677 PM] Received response 'textDocument/documentSymbol - (17)' in 0ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:54:02.090 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\r\n\r\n[Trace - 18:54:02.092 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background imports cache refresh starting\r\n\r\n[Trace - 18:54:02.189 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f \\""{{.Path}}\\\\n{{.Dir}}\\\\n{{.GoMod}}\\\\n{{.GoVersion}}\\\\n{{range context.ReleaseTags}}{{if eq . \\\\\\""go1.14\\\\\\""}}{{.}}{{end}}{{end}}\\\\n\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f ""{{.Path}}\\n{{.Dir}}\\n{{.GoMod}}\\n{{.GoVersion}}\\n{{range context.ReleaseTags}}{{if eq . \\""go1.14\\""}}{{.}}{{end}}{{end}}\\n""\r\n\r\n[Trace - 18:54:02.207 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\r\n\r\n[Trace - 18:54:02.229 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\\n""}\r\n\r\n\r\n[Trace - 18:54:02.230 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\r\n[Trace - 18:54:57.318 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:54:57.604 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:54:57.676 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:54:59.200 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:54:59.250 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:54:59.251 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:54:59.278 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:54:59.308 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\\n\\tpackage=\\""google.golang.org/protobuf/internal/impl\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\r\n\tpackage=""google.golang.org/protobuf/internal/impl""\r\n\r\n[Trace - 18:55:00.133 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""end"",""message"":""Done.""}}\r\n\r\n\r\n[Trace - 18:55:00.135 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 18:55:00.426 PM] Sending request 'textDocument/hover - (18)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""position"":{""line"":227,""character"":23}}\r\n\r\n\r\n[Trace - 18:55:00.443 PM] Received response 'textDocument/hover - (18)' in 17ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""\\n\\n[`(regexp.Regexp).FindStringSubmatch` on pkg.go.dev](https://pkg.go.dev/regexp?utm_source=gopls#Regexp.FindStringSubmatch)\\n\\nFindStringSubmatch returns a slice of strings holding the text of the\\nleftmost match of the regular expression in s and the matches, if any, of\\nits subexpressions, as defined by the \\\\'Submatch\\\\' description in the\\npackage comment\\\\.\\nA return value of nil indicates no match\\\\.\\n""},""range"":{""start"":{""line"":227,""character"":19},""end"":{""line"":227,""character"":37}}}\r\n</pre>\r\n</details>\r\n\r\nThis was the only diagnostic message presented in `go.mod`.\r\n![Screen Shot 2021-08-04 at 6 54 21 PM](https://user-images.githubusercontent.com/4999471/128267424-4a45f03a-9e2c-4f2d-8ee1-9f5cd311bc31.png)\r\n\r\nSorry that I didn't report with a simpler repro case. Probably it's easy enough (just adding a change that adds a new module to go.mod and the code) but want to check if this is a known issue.\r\n",NeedsInvestigation|FrozenDueToAge|gopls|Tools|gopls/metadata,findleyr,"### What version of Go/Gopls are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.16.6\r\n$ gopls -v version\r\nBuild info\r\n----------\r\ngolang.org/x/tools/gopls v0.7.1\r\n    golang.org/x/tools/gopls@v0.7.1 h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\r\n    golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\r\n    golang.org/x/sys@v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\r\n    golang.org/x/tools@v0.1.6-0.20210802203754-9b21a8868e16 h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.2.0 h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\r\n    mvdan.cc/gofumpt@v0.1.1 h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nmac\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n* Ran `go clean -modcache` to empty the module cache. (clean state)\r\n* Cloned vscode-go repo.\r\n* Opened vscode and waited until the initial workspace loading is complete.\r\n* Cherry-picked a gerrit cl that adds a new dependency to go.mod\r\n```\r\n   git fetch https://go.googlesource.com/vscode-go refs/changes/95/337495/3 && git cherry-pick FETCH_HEAD\r\n```  \r\n\r\n### What did you expect to see?\r\n\r\nThe new dependency is picked up automatically.\r\nOr gopls sends diagnostics with code actions or codelens that downloads the new dependency.\r\n\r\n### What did you see instead?\r\n\r\nStuck in workspace loading, without any action or helpful info to address the issue.\r\n\r\nI found multiple ways to get out of this broken state, and would be nice if gopls suggests one of them or other:\r\n - Restart gopls so the initial workspace loading downloads necessary dependency, or\r\n - Run `go mod tidy`  or\r\n - Run `go get` ...\r\n\r\nThe following is the gopls log - \r\n<details><summary>gopls log</summary>\r\n<pre>\r\n[Trace - 18:53:14.115 PM] Sending request 'initialize - (0)'.\r\nParams: {""processId"":6803,""clientInfo"":{""name"":""Visual Studio Code - Insiders"",""version"":""1.59.0-insider""},""locale"":""en-us"",""rootPath"":""/Users/hakim/projects/google/vscode-go"",""rootUri"":""file:///Users/hakim/projects/google/vscode-go"",""capabilities"":{""workspace"":{""applyEdit"":true,""workspaceEdit"":{""documentChanges"":true,""resourceOperations"":[""create"",""rename"",""delete""],""failureHandling"":""textOnlyTransactional"",""normalizesLineEndings"":true,""changeAnnotationSupport"":{""groupsOnLabel"":true}},""didChangeConfiguration"":{""dynamicRegistration"":true},""didChangeWatchedFiles"":{""dynamicRegistration"":true},""symbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""tagSupport"":{""valueSet"":[1]}},""codeLens"":{""refreshSupport"":true},""executeCommand"":{""dynamicRegistration"":true},""configuration"":true,""workspaceFolders"":true,""semanticTokens"":{""refreshSupport"":true},""fileOperations"":{""dynamicRegistration"":true,""didCreate"":true,""didRename"":true,""didDelete"":true,""willCreate"":true,""willRename"":true,""willDelete"":true}},""textDocument"":{""publishDiagnostics"":{""relatedInformation"":true,""versionSupport"":false,""tagSupport"":{""valueSet"":[1,2]},""codeDescriptionSupport"":true,""dataSupport"":true},""synchronization"":{""dynamicRegistration"":true,""willSave"":true,""willSaveWaitUntil"":true,""didSave"":true},""completion"":{""dynamicRegistration"":true,""contextSupport"":true,""completionItem"":{""snippetSupport"":true,""commitCharactersSupport"":true,""documentationFormat"":[""markdown"",""plaintext""],""deprecatedSupport"":true,""preselectSupport"":true,""tagSupport"":{""valueSet"":[1]},""insertReplaceSupport"":true,""resolveSupport"":{""properties"":[""documentation"",""detail"",""additionalTextEdits""]},""insertTextModeSupport"":{""valueSet"":[1,2]}},""completionItemKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},""hover"":{""dynamicRegistration"":true,""contentFormat"":[""markdown"",""plaintext""]},""signatureHelp"":{""dynamicRegistration"":true,""signatureInformation"":{""documentationFormat"":[""markdown"",""plaintext""],""parameterInformation"":{""labelOffsetSupport"":true},""activeParameterSupport"":true},""contextSupport"":true},""definition"":{""dynamicRegistration"":true,""linkSupport"":true},""references"":{""dynamicRegistration"":true},""documentHighlight"":{""dynamicRegistration"":true},""documentSymbol"":{""dynamicRegistration"":true,""symbolKind"":{""valueSet"":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},""hierarchicalDocumentSymbolSupport"":true,""tagSupport"":{""valueSet"":[1]},""labelSupport"":true},""codeAction"":{""dynamicRegistration"":true,""isPreferredSupport"":true,""disabledSupport"":true,""dataSupport"":true,""resolveSupport"":{""properties"":[""edit""]},""codeActionLiteralSupport"":{""codeActionKind"":{""valueSet"":["""",""quickfix"",""refactor"",""refactor.extract"",""refactor.inline"",""refactor.rewrite"",""source"",""source.organizeImports""]}},""honorsChangeAnnotations"":false},""codeLens"":{""dynamicRegistration"":true},""formatting"":{""dynamicRegistration"":true},""rangeFormatting"":{""dynamicRegistration"":true},""onTypeFormatting"":{""dynamicRegistration"":true},""rename"":{""dynamicRegistration"":true,""prepareSupport"":true,""prepareSupportDefaultBehavior"":1,""honorsChangeAnnotations"":true},""documentLink"":{""dynamicRegistration"":true,""tooltipSupport"":true},""typeDefinition"":{""dynamicRegistration"":true,""linkSupport"":true},""implementation"":{""dynamicRegistration"":true,""linkSupport"":true},""colorProvider"":{""dynamicRegistration"":true},""foldingRange"":{""dynamicRegistration"":true,""rangeLimit"":5000,""lineFoldingOnly"":true},""declaration"":{""dynamicRegistration"":true,""linkSupport"":true},""selectionRange"":{""dynamicRegistration"":true},""callHierarchy"":{""dynamicRegistration"":true},""semanticTokens"":{""dynamicRegistration"":true,""tokenTypes"":[""namespace"",""type"",""class"",""enum"",""interface"",""struct"",""typeParameter"",""parameter"",""variable"",""property"",""enumMember"",""event"",""function"",""method"",""macro"",""keyword"",""modifier"",""comment"",""string"",""number"",""regexp"",""operator""],""tokenModifiers"":[""declaration"",""definition"",""readonly"",""static"",""deprecated"",""abstract"",""async"",""modification"",""documentation"",""defaultLibrary""],""formats"":[""relative""],""requests"":{""range"":true,""full"":{""delta"":true}},""multilineTokenSupport"":false,""overlappingTokenSupport"":false},""linkedEditingRange"":{""dynamicRegistration"":true}},""window"":{""showMessage"":{""messageActionItem"":{""additionalPropertiesSupport"":true}},""showDocument"":{""support"":true},""workDoneProgress"":true},""general"":{""regularExpressions"":{""engine"":""ECMAScript"",""version"":""ES2020""},""markdown"":{""parser"":""marked"",""version"":""1.1.0""}}},""initializationOptions"":{""verboseOutput"":true},""trace"":""verbose"",""workspaceFolders"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go"",""name"":""vscode-go""}]}\r\n\r\n\r\n[Trace - 18:53:14.117 PM] Received response 'initialize - (0)' in 2ms.\r\nResult: {""capabilities"":{""textDocumentSync"":{""openClose"":true,""change"":2,""save"":{}},""completionProvider"":{""triggerCharacters"":["".""],""completionItem"":{}},""hoverProvider"":true,""signatureHelpProvider"":{""triggerCharacters"":[""("","",""]},""definitionProvider"":true,""typeDefinitionProvider"":true,""implementationProvider"":true,""referencesProvider"":true,""documentHighlightProvider"":true,""documentSymbolProvider"":true,""codeActionProvider"":{""codeActionKinds"":[""quickfix"",""refactor.extract"",""refactor.rewrite"",""source.fixAll"",""source.organizeImports""]},""codeLensProvider"":{},""documentLinkProvider"":{},""workspaceSymbolProvider"":true,""documentFormattingProvider"":true,""documentOnTypeFormattingProvider"":{""firstTriggerCharacter"":""""},""renameProvider"":{""prepareProvider"":true},""foldingRangeProvider"":true,""executeCommandProvider"":{""commands"":[""gopls.add_dependency"",""gopls.add_import"",""gopls.apply_fix"",""gopls.check_upgrades"",""gopls.gc_details"",""gopls.generate"",""gopls.generate_gopls_mod"",""gopls.go_get_package"",""gopls.list_known_packages"",""gopls.regenerate_cgo"",""gopls.remove_dependency"",""gopls.run_tests"",""gopls.start_debugging"",""gopls.test"",""gopls.tidy"",""gopls.toggle_gc_details"",""gopls.update_go_sum"",""gopls.upgrade_dependency"",""gopls.vendor"",""gopls.workspace_metadata""]},""callHierarchyProvider"":true,""workspace"":{""workspaceFolders"":{""supported"":true,""changeNotifications"":""workspace/didChangeWorkspaceFolders""}}},""serverInfo"":{""name"":""gopls"",""version"":""{\\""path\\"":\\""golang.org/x/tools/gopls\\"",\\""version\\"":\\""v0.7.1\\"",\\""sum\\"":\\""h1:Mh3Z8Xcoq3Zy7ksSlwDV/nzQSbjFf06A+L+F8YHq55U=\\"",\\""deps\\"":[{\\""path\\"":\\""github.com/BurntSushi/toml\\"",\\""version\\"":\\""v0.3.1\\"",\\""sum\\"":\\""h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\\""},{\\""path\\"":\\""github.com/google/go-cmp\\"",\\""version\\"":\\""v0.5.5\\"",\\""sum\\"":\\""h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\\""},{\\""path\\"":\\""github.com/sergi/go-diff\\"",\\""version\\"":\\""v1.1.0\\"",\\""sum\\"":\\""h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\\""},{\\""path\\"":\\""golang.org/x/mod\\"",\\""version\\"":\\""v0.4.2\\"",\\""sum\\"":\\""h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\\""},{\\""path\\"":\\""golang.org/x/sync\\"",\\""version\\"":\\""v0.0.0-20210220032951-036812b2e83c\\"",\\""sum\\"":\\""h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\\""},{\\""path\\"":\\""golang.org/x/sys\\"",\\""version\\"":\\""v0.0.0-20210510120138-977fb7262007\\"",\\""sum\\"":\\""h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\\""},{\\""path\\"":\\""golang.org/x/tools\\"",\\""version\\"":\\""v0.1.6-0.20210802203754-9b21a8868e16\\"",\\""sum\\"":\\""h1:ZC/gVBZl8poJyKzWLxxlsmhayVGosF4mohR35szD5Bg=\\""},{\\""path\\"":\\""golang.org/x/xerrors\\"",\\""version\\"":\\""v0.0.0-20200804184101-5ec99f83aff1\\"",\\""sum\\"":\\""h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\\""},{\\""path\\"":\\""honnef.co/go/tools\\"",\\""version\\"":\\""v0.2.0\\"",\\""sum\\"":\\""h1:ws8AfbgTX3oIczLPNPCu5166oBg9ST2vNs0rcht+mDE=\\""},{\\""path\\"":\\""mvdan.cc/gofumpt\\"",\\""version\\"":\\""v0.1.1\\"",\\""sum\\"":\\""h1:bi/1aS/5W00E2ny5q65w9SnKpWEF/UIOqDYBILpo9rA=\\""},{\\""path\\"":\\""mvdan.cc/xurls/v2\\"",\\""version\\"":\\""v2.2.0\\"",\\""sum\\"":\\""h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\\""}]}""}}\r\n\r\n\r\n[Trace - 18:53:14.152 PM] Sending notification 'initialized'.\r\nParams: {}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Received request 'window/workDoneProgress/create - (1)'.\r\nParams: {""token"":""5577006791947779410""}\r\n\r\n\r\n[Trace - 18:53:14.153 PM] Sending notification 'textDocument/didOpen'.\r\nParams: {...}}\r\n\r\n\r\n[Trace - 18:53:14.171 PM] Sending response 'window/workDoneProgress/create - (1)' in 18ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:14.171 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""begin"",""title"":""Setting up workspace"",""message"":""Loading packages...""}}\r\n\r\n\r\n[Trace - 18:53:14.172 PM] Received request 'workspace/configuration - (2)'.\r\nParams: {""items"":[{""scopeUri"":""file:///Users/hakim/projects/google/vscode-go"",""section"":""gopls""}]}\r\n\r\n\r\n[Trace - 18:53:14.230 PM] Sending response 'workspace/configuration - (2)' in 58ms.\r\nResult: [{""verboseOutput"":true}]\r\n\r\n\r\n[Trace - 18:53:14.734 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\\n(root /Users/hakim/projects/google/vscode-go)\\n(go version go version go1.16.6 darwin/amd64)\\n(valid build configuration = true)\\n(build flags: [])\\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\\nGOPATH=/Users/hakim/go\\nGOSUMDB=sum.golang.org\\nGOMODCACHE=/Users/hakim/go/pkg/mod\\nGONOSUMDB=\\nGOPROXY=https://proxy.golang.org,direct\\nGOCACHE=/Users/hakim/Library/Caches/go-build\\nGOFLAGS=\\nGOINSECURE=\\nGO111MODULE=\\nGONOPROXY=\\nGOPRIVATE=\\nGOROOT=/Users/hakim/sdk/go1.16.6\\n\\n""}\r\n\r\n\r\n[Trace - 18:53:14.758 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:14.763 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/documentSymbol - (1)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.024 PM] Sending request 'textDocument/codeAction - (2)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""range"":{""start"":{""line"":67,""character"":12},""end"":{""line"":67,""character"":12}},""context"":{""diagnostics"":[]}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 go env for /Users/hakim/projects/google/vscode-go\r\n(root /Users/hakim/projects/google/vscode-go)\r\n(go version go version go1.16.6 darwin/amd64)\r\n(valid build configuration = true)\r\n(build flags: [])\r\nGOMOD=/Users/hakim/projects/google/vscode-go/go.mod\r\nGOPATH=/Users/hakim/go\r\nGOSUMDB=sum.golang.org\r\nGOMODCACHE=/Users/hakim/go/pkg/mod\r\nGONOSUMDB=\r\nGOPROXY=https://proxy.golang.org,direct\r\nGOCACHE=/Users/hakim/Library/Caches/go-build\r\nGOFLAGS=\r\nGOINSECURE=\r\nGO111MODULE=\r\nGONOPROXY=\r\nGOPRIVATE=\r\nGOROOT=/Users/hakim/sdk/go1.16.6\r\n\r\n\r\n[Trace - 18:53:15.038 PM] Sending request 'textDocument/documentLink - (3)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 31.492827ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Info  - 6:53:15 PM] 2021/08/04 18:53:14 49.655209ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/foldingRange - (4)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:15.534 PM] Sending request 'textDocument/codeLens - (5)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.563 PM] Sending request 'textDocument/documentLink - (6)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":6}\r\n\r\n\r\n[Trace - 18:53:17.914 PM] Sending request 'textDocument/documentLink - (7)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:17.915 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":4}\r\n\r\n\r\n[Trace - 18:53:18.142 PM] Sending request 'textDocument/foldingRange - (8)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.369 PM] Sending request 'textDocument/documentLink - (9)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:18.879 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":5}\r\n\r\n\r\n[Trace - 18:53:19.432 PM] Sending request 'textDocument/codeLens - (10)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.459 PM] Sending request 'textDocument/codeLens - (11)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:19.598 PM] Sending notification '$/cancelRequest'.\r\nParams: {""id"":9}\r\n\r\n\r\n[Trace - 18:53:19.601 PM] Sending request 'textDocument/documentLink - (12)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:31.288 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 16.545495047s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=https://proxy.golang.org,direct PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.2881188682.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Trace - 18:53:31.301 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:53:31.343 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:53:31.344 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:53:31.425 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:53:31.426 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 go/packages.Load\\n\\tsnapshot=0\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 go/packages.Load\r\n\tsnapshot=0\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:53:31.431 PM] Received notification '$/progress'.\r\nParams: {""token"":""5577006791947779410"",""value"":{""kind"":""end"",""message"":""Finished loading packages.""}}\r\n\r\n\r\n[Trace - 18:53:31.434 PM] Received request 'client/registerCapability - (3)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeWatchedFiles-0"",""method"":""workspace/didChangeWatchedFiles"",""registerOptions"":{""watchers"":[{""globPattern"":""**/*.{go,mod,sum}"",""kind"":7},{""globPattern"":""**/*.*tmpl"",""kind"":7},{""globPattern"":""{/Users/hakim/projects/google/vscode-go/tools,/Users/hakim/projects/google/vscode-go/tools/goplssetting,/Users/hakim/projects/google/vscode-go/tools/relnotes}"",""kind"":7}]}}]}\r\n\r\n\r\n[Trace - 18:53:31.455 PM] Sending response 'client/registerCapability - (3)' in 21ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.460 PM] Received request 'client/registerCapability - (4)'.\r\nParams: {""registrations"":[{""id"":""workspace/didChangeConfiguration"",""method"":""workspace/didChangeConfiguration""},{""id"":""workspace/didChangeWorkspaceFolders"",""method"":""workspace/didChangeWorkspaceFolders""}]}\r\n\r\n\r\n[Trace - 18:53:31.468 PM] Sending response 'client/registerCapability - (4)' in 8ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:31.712 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\\n\\tpackage=\\""runtime\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[memRecordCycle:true pageBits:true]\r\n\tpackage=""runtime""\r\n\r\n[Trace - 18:53:31.831 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:53:31.856 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\\n\\tpackage=\\""vendor/golang.org/x/text/unicode/bidi\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[options:true]\r\n\tpackage=""vendor/golang.org/x/text/unicode/bidi""\r\n\r\n[Trace - 18:53:31.869 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\\n\\tpackage=\\""os/user\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 falling back to safe trimming due to type errors: [/Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:198:19: int not declared by package C /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:201:16: bufferKind(C._SC_GETPW_R_SIZE_MAX) (value of type bufferKind) is not constant /Users/hakim/sdk/go1.16.6/src/os/user/cgo_lookup_unix.go:202:16: bufferKind(C._SC_GETGR_R_SIZE_MAX) (value of type bufferKind) is not constant] or still-missing identifiers: map[]\r\n\tpackage=""os/user""\r\n\r\n[Trace - 18:53:31.965 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\\n\\tpackage=\\""github.com/google/go-github/github\\""\\n""}\r\n\r\n\r\n[Info  - 6:53:31 PM] 2021/08/04 18:53:31 discovered missing identifiers: map[service:true]\r\n\tpackage=""github.com/google/go-github/github""\r\n\r\n[Trace - 18:53:32.046 PM] Received response 'textDocument/documentSymbol - (1)' in 17021ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.048 PM] Received response 'textDocument/codeAction - (2)' in 17023ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.050 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:32 fixImports(filename=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\""), abs=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\"", srcDir=\\""/Users/hakim/projects/google/vscode-go/tools/relnotes\\"" ...\\n""}\r\n\r\n\r\n[Trace - 18:53:32.052 PM] Received response 'textDocument/documentLink - (3)' in 17014ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #4 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #5 JSON RPC cancelled\r\n\r\n\r\n[Error - Received] 18:53:32.052 PM #6 JSON RPC cancelled\r\n\r\n\r\n[Info  - 6:53:32 PM] 2021/08/04 18:53:32 fixImports(filename=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""), abs=""/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"", srcDir=""/Users/hakim/projects/google/vscode-go/tools/relnotes"" ...\r\n\r\n[Trace - 18:53:32.056 PM] Received response 'textDocument/documentLink - (7)' in 14141ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:32.067 PM] Received response 'textDocument/foldingRange - (8)' in 13925ms.\r\nResult: [{...}]\r\n\r\n\r\n[Error - Received] 18:53:32.068 PM #9 JSON RPC cancelled\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (10)' in 12636ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.068 PM] Received response 'textDocument/codeLens - (11)' in 12609ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:32.070 PM] Received response 'textDocument/documentLink - (12)' in 12470ms.\r\nResult: [{...}]\r\n\r\n</pre>\r\n\r\n* Now I ran `git fetch`.\r\n\r\n<pre>\r\n[Trace - 18:53:48.172 PM] Sending notification 'textDocument/didChange'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""version"":2},""contentChanges"":[{""range"":{""start"":{""line"":22,""character"":0},""end"":{""line"":296,""character"":0}},""rangeLength"":7095,""text"":""\\t\\""github.com/stamblerre/work-stats/generic\\""\\n\\t\\""github.com/stamblerre/work-stats/golang\\""\\n\\t\\""golang.org/x/build/maintner\\""\\n\\t\\""golang.org/x/build/maintner/godata\\""\\n)\\n\\nvar (\\n\\tmilestone  = flag.String(\\""milestone\\"", \\""\\"", \\""milestone associated with the release\\"")\\n\\tfilterDirs = flag.String(\\""dirs\\"", \\""\\"", \\""comma-separated list of directories that should be touched for a CL to be considered relevant\\"")\\n\\tsinceCL    = flag.Int(\\""cl\\"", -1, \\""the gerrit change number of the first CL to include in the output. Only changes submitted more recently than 'cl' will be included.\\"")\\n\\tproject    = flag.String(\\""project\\"", \\""vscode-go\\"", \\""name of the golang project\\"")\\n\\tmdMode     = flag.Bool(\\""md\\"", false, \\""write MD output\\"")\\n\\texclFile   = flag.String(\\""exclude-from\\"", \\""\\"", \\""optional path to changelog MD file. If specified, any 'CL NNNN' occurence in the content will cause that CL to be excluded from this tool's output.\\"")\\n)\\n\\nfunc main() {\\n\\tflag.Parse()\\n\\n\\tvar existingMD []byte\\n\\tif *exclFile != \\""\\"" {\\n\\t\\tvar err error\\n\\t\\texistingMD, err = ioutil.ReadFile(*exclFile)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatal(err)\\n\\t\\t}\\n\\t}\\n\\n\\tcorpus, err := godata.Get(context.Background())\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\n\\tvar dirs []string\\n\\tfor _, dir := range strings.FieldsFunc(*filterDirs, func(r rune) bool {\\n\\t\\treturn unicode.IsSpace(r) || r == ','\\n\\t}) {\\n\\t\\tdirs = append(dirs, filepath.ToSlash(dir))\\n\\t}\\n\\n\\tger := corpus.Gerrit()\\n\\n\\t// Find the cutoff time for changes to include.\\n\\tstart := time.Date(2020, time.August, 1, 00, 00, 00, 0, time.UTC)\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif *sinceCL >= 0 {\\n\\t\\t\\t\\tif int(cl.Number) == *sinceCL {\\n\\t\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if cl.Branch() == \\""release\\"" && cl.Commit.CommitTime.After(start) {\\n\\t\\t\\t\\t// Try to figure out when the last release was\\n\\t\\t\\t\\tfmt.Println(cl.Commit.CommitTime)\\n\\t\\t\\t\\tstart = cl.Commit.CommitTime\\n\\t\\t\\t}\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tvar changes []*generic.Changelist\\n\\tauthors := map[*maintner.GitPerson]bool{}\\n\\tger.ForeachProjectUnsorted(func(gp *maintner.GerritProject) error {\\n\\t\\tif gp.Server() != \\""go.googlesource.com\\"" || gp.Project() != *project {\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\t\\tgp.ForeachCLUnsorted(func(cl *maintner.GerritCL) error {\\n\\t\\t\\t// Only include 'master'\\n\\t\\t\\tif cl.Branch() != \\""master\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Status != \\""merged\\"" {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\t\\t\\tif cl.Commit.CommitTime.Before(start) {\\n\\t\\t\\t\\t// Was in a previous release; not for this one.\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\tif bytes.Contains(existingMD, []byte(fmt.Sprintf(\\""CL %d \\"", cl.Number))) {\\n\\t\\t\\t\\treturn nil\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that at least one file is in a relevant directory before\\n\\t\\t\\t// adding the CL.\\n\\t\\t\\tif len(dirs) > 0 {\\n\\t\\t\\t\\tvar found bool\\n\\t\\t\\t\\tfor _, file := range cl.Commit.Files {\\n\\t\\t\\t\\t\\tfor _, dir := range dirs {\\n\\t\\t\\t\\t\\t\\tif strings.Contains(file.File, dir) {\\n\\t\\t\\t\\t\\t\\t\\tfound = true\\n\\t\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif !found {\\n\\t\\t\\t\\t\\treturn nil\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tchanges = append(changes, golang.GerritToGenericCL(cl))\\n\\t\\t\\tauthors[cl.Owner()] = true\\n\\t\\t\\treturn nil\\n\\t\\t})\\n\\t\\treturn nil\\n\\t})\\n\\n\\tsort.Slice(changes, func(i, j int) bool {\\n\\t\\treturn changes[i].Number < changes[j].Number\\n\\t})\\n\\n\\tif *mdMode {\\n\\t\\tfmt.Printf(\\""## TODO: version - \\"")\\n\\t\\tnow := time.Now()\\n\\t\\tfmt.Printf(\\""%s\\\\n\\\\n\\"", now.Format(\\""2 Jan, 2006\\""))\\n\\t\\tfmt.Printf(\\""### Changes\\\\n\\\\n\\"")\\n\\t\\tmdPrintChanges(changes, true)\\n\\n\\t\\tfmt.Printf(\\""### Issues\\\\n\\\\n\\"")\\n\\t\\tmdPrintIssues(changes, *milestone)\\n\\n\\t\\tfmt.Printf(\\""\\\\n### Thanks\\\\n\\\\n\\"")\\n\\t\\tmdPrintContributors(authors)\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tfmt.Printf(\\""  %s\\\\n\\"", change.Subject)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintChanges(changes []*generic.Changelist, byCategory bool) {\\n\\tprintChange := func(change *generic.Changelist) {\\n\\t\\tfmt.Printf(\\""- \\"")\\n\\t\\tcontent := change.Subject\\n\\t\\tnote := releaseNote(change)\\n\\t\\tif note != \\""\\"" && note != \\""yes\\"" && note != \\""y\\"" {\\n\\t\\t\\t// The release note contains content.\\n\\t\\t\\tcontent = note\\n\\t\\t}\\n\\n\\t\\tfmt.Printf(\\""%s\\"", content)\\n\\t\\tif len(change.AssociatedIssues) > 0 {\\n\\t\\t\\tfmt.Printf(\\"" (\\"")\\n\\t\\t\\tfor i, issue := range change.AssociatedIssues {\\n\\t\\t\\t\\tif i == 0 {\\n\\t\\t\\t\\t\\tfmt.Printf(\\""[Issue %d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfmt.Printf(\\"", [%d](%s)\\"", issue.Number, issue.Link)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfmt.Printf(\\"")\\"")\\n\\t\\t}\\n\\t\\tfmt.Printf(\\"" <!-- CL %d -->\\\\n\\"", change.Number)\\n\\t}\\n\\t// Group CLs by category or by number order.\\n\\tif byCategory {\\n\\t\\tpkgMap := map[string][]*generic.Changelist{}\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tpkgMap[change.Category()] = append(pkgMap[change.Category()], change)\\n\\t\\t}\\n\\t\\tfor _, changes := range pkgMap {\\n\\t\\t\\tfor _, change := range changes {\\n\\t\\t\\t\\tprintChange(change)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tfor _, change := range changes {\\n\\t\\t\\tprintChange(change)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc mdPrintIssues(changes []*generic.Changelist, milestone string) {\\n\\tvar issues []*generic.Issue\\n\\tfor _, change := range changes {\\n\\t\\tissues = append(issues, change.AssociatedIssues...)\\n\\t}\\n\\tsort.Slice(issues, func(i, j int) bool {\\n\\t\\treturn issues[i].Link < issues[j].Link\\n\\t})\\n\\tfor _, issue := range issues {\\n\\t\\tif !issue.Closed() {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tfmt.Printf(\\""%s: %s\\\\n\\"", issue.Link, issue.Milestone)\\n\\t}\\n}\\n\\n// clPackage returns the package name from the CL's commit message,\\n// or \\""??\\"" if it's formatted unconventionally.\\nfunc clPackage(cl *maintner.GerritCL) string {\\n\\tsubj := cl.Subject()\\n\\tif i := strings.Index(subj, \\"":\\""); i != -1 {\\n\\t\\treturn subj[:i]\\n\\t}\\n\\treturn \\""??\\""\\n}\\n\\nvar relNoteRx = regexp.MustCompile(`RELNOTES?=(.+)`)\\n\\nfunc parseRelNote(s string) string {\\n\\tif m := relNoteRx.FindStringSubmatch(s); m != nil {\\n\\t\\treturn m[1]\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc releaseNote(cl *generic.Changelist) string {\\n\\tif strings.Contains(cl.Message, \\""RELNOTE\\"") {\\n\\t\\treturn parseRelNote(cl.Message)\\n\\t}\\n\\tfor _, comment := range cl.Comments {\\n\\t\\tif strings.Contains(comment, \\""RELNOTE\\"") {\\n\\t\\t\\treturn parseRelNote(comment)\\n\\t\\t}\\n\\t}\\n\\treturn \\""\\""\\n}\\n\\nfunc mdPrintContributors(authors map[*maintner.GitPerson]bool) {\\n\\tvar names []string\\n\\tfor author := range authors {\\n\\t\\t// It would be great to look up the GitHub username by using:\\n\\t\\t// https://pkg.go.dev/golang.org/x/build/internal/gophers#GetPerson.\\n""}]}\r\n\r\n\r\n[Trace - 18:53:48.206 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 22.419353ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.357 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 176.817281ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.379 PM] Sending request 'textDocument/foldingRange - (13)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:48.390 PM] Received response 'textDocument/foldingRange - (13)' in 11ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:48.410 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2},{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:53:48.421 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 217.177757ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.1807217489.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.444 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.264481ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.446 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 16.761442ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.463 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 17.154868ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes\r\n\r\n[Trace - 18:53:48.478 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\\n""}\r\n\r\n\r\n[Trace - 18:53:48.480 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 13.270385ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4146129579.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- /Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[file=/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 14.869644ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:53:48.755 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.264557ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:53:48.771 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:53:48 PM] 2021/08/04 18:53:48 15.607766ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.4275863688.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n\\tsnapshot=3\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=0\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 go/packages.Load: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\tsnapshot=3\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=0\r\n\r\n[Trace - 18:53:48.772 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 initial workspace load failed: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:48.774 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n""}\r\n\r\n\r\n[Error - 6:53:48 PM] 2021/08/04 18:53:48 workspace packages: diagnosing file:///Users/hakim/projects/google/vscode-go/go.mod: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\r\n[Trace - 18:53:49.163 PM] Sending request 'textDocument/documentLink - (14)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:49.178 PM] Received response 'textDocument/documentLink - (14)' in 14ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received request 'window/workDoneProgress/create - (5)'.\r\nParams: {""token"":""8674665223082153551""}\r\n\r\n\r\n[Trace - 18:53:49.704 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":1,""message"":""2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error\\n\\tsnapshot=3\\n\\tdirectory=file:///Users/hakim/projects/google/vscode-go\\n""}\r\n\r\n\r\n[Error - 6:53:49 PM] 2021/08/04 18:53:49 errors loading workspace: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n: packages.Load error\r\n\tsnapshot=3\r\n\tdirectory=file:///Users/hakim/projects/google/vscode-go\r\n\r\n[Trace - 18:53:49.705 PM] Sending response 'window/workDoneProgress/create - (5)' in 1ms.\r\nResult: \r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""begin"",""title"":""Error loading workspace"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off : packages.Load error""}}\r\n\r\n\r\n[Trace - 18:53:49.705 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[{""range"":{""start"":{""line"":0,""character"":0},""end"":{""line"":0,""character"":34}},""severity"":1,""source"":""go list"",""message"":""err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n: packages.Load error""}]}\r\n\r\n\r\n[Trace - 18:53:50.672 PM] Sending request 'textDocument/codeLens - (15)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.673 PM] Received response 'textDocument/codeLens - (15)' in 1ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/codeLens - (16)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Sending request 'textDocument/documentSymbol - (17)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""}}\r\n\r\n\r\n[Trace - 18:53:50.676 PM] Received response 'textDocument/codeLens - (16)' in 0ms.\r\nResult: null\r\n\r\n\r\n[Trace - 18:53:50.677 PM] Received response 'textDocument/documentSymbol - (17)' in 0ms.\r\nResult: [{...}]\r\n\r\n\r\n[Trace - 18:54:02.090 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 15.415608ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env -json GO111MODULE GOFLAGS GOINSECURE GOMOD GOMODCACHE GONOPROXY GONOSUMDB GOPATH GOPROXY GOROOT GOSUMDB\r\n\r\n[Trace - 18:54:02.092 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background imports cache refresh starting\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background imports cache refresh starting\r\n\r\n[Trace - 18:54:02.189 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f \\""{{.Path}}\\\\n{{.Dir}}\\\\n{{.GoMod}}\\\\n{{.GoVersion}}\\\\n{{range context.ReleaseTags}}{{if eq . \\\\\\""go1.14\\\\\\""}}{{.}}{{end}}{{end}}\\\\n\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 96.209801ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.942536254.mod -mod=readonly -m -f ""{{.Path}}\\n{{.Dir}}\\n{{.GoMod}}\\n{{.GoVersion}}\\n{{range context.ReleaseTags}}{{if eq . \\""go1.14\\""}}{{.}}{{end}}{{end}}\\n""\r\n\r\n[Trace - 18:54:02.207 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 14.934502ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go env GOFLAGS\r\n\r\n[Trace - 18:54:02.229 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\\n""}\r\n\r\n\r\n[Trace - 18:54:02.230 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\\n\\n""}\r\n\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 21.223897ms for GOROOT=/Users/hakim/sdk/go1.16.6 GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -m -e -json ...\r\n\r\n[Info  - 6:54:02 PM] 2021/08/04 18:54:02 background refresh finished after 158.089005ms: err: exit status 1: stderr: go: github.com/stamblerre/work-stats@v0.0.0-20210726215650-a14fc877fae7: module lookup disabled by GOPROXY=off\r\n\r\n\r\n[Trace - 18:54:57.318 PM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {""changes"":[{""uri"":""file:///Users/hakim/projects/google/vscode-go/go.sum"",""type"":2}]}\r\n\r\n\r\n[Trace - 18:54:57.604 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 17.112973ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=off GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -e -f {{context.ReleaseTags}} -- unsafe\r\n\r\n[Trace - 18:54:57.676 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f \\""{{context.GOARCH}} {{context.Compiler}}\\"" -- unsafe\\n""}\r\n\r\n\r\n[Info  - 6:54:57 PM] 2021/08/04 18:54:57 90.590232ms for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -f ""{{context.GOARCH}} {{context.Compiler}}"" -- unsafe\r\n\r\n[Trace - 18:54:59.200 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 1.597049496s for GOROOT= GOPATH=/Users/hakim/go GO111MODULE=auto GOPROXY=off PWD=/Users/hakim/projects/google/vscode-go go list -modfile=/var/folders/bw/6r6k9d113sv1_vvzk_1kfxbm001py5/T/go.db5eccd4f280859c12cae76647b6f1cb9a5a3bf3ab805090944248e9016b96f3.682507636.mod -mod=readonly -e -json -compiled=true -test=true -export=false -deps=true -find=false -- builtin github.com/golang/vscode-go/...\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""builtin\\""\\n\\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\\n""}\r\n\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tdirectory=/Users/hakim/projects/google/vscode-go\\n\\tquery=[builtin github.com/golang/vscode-go/...]\\n\\tpackages=6\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""builtin""\r\n\tfiles=[/Users/hakim/sdk/go1.16.6/src/builtin/builtin.go]\r\n\r\n[Trace - 18:54:59.215 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tdirectory=/Users/hakim/projects/google/vscode-go\r\n\tquery=[builtin github.com/golang/vscode-go/...]\r\n\tpackages=6\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/generate.go]\r\n\r\n[Trace - 18:54:59.221 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/relnotes\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/relnotes""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go]\r\n\r\n[Trace - 18:54:59.250 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]\\""\\n\\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting [github.com/golang/vscode-go/tools/goplssetting.test]""\r\n\tfiles=[/Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting.go /Users/hakim/projects/google/vscode-go/tools/goplssetting/goplssetting_test.go]\r\n\r\n[Trace - 18:54:59.251 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 go/packages.Load\\n\\tsnapshot=4\\n\\tpackage=\\""github.com/golang/vscode-go/tools/goplssetting.test\\""\\n\\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 go/packages.Load\r\n\tsnapshot=4\r\n\tpackage=""github.com/golang/vscode-go/tools/goplssetting.test""\r\n\tfiles=[/Users/hakim/Library/Caches/go-build/60/60a68027560e5f9bca6b2555391b981793f56c2ea1767d8c251375f05d47a5c3-d]\r\n\r\n[Trace - 18:54:59.278 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\\n\\tpackage=\\""google.golang.org/protobuf/reflect/protoreflect\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[cardinality:true kind:true syntax:true value:true]\r\n\tpackage=""google.golang.org/protobuf/reflect/protoreflect""\r\n\r\n[Trace - 18:54:59.308 PM] Received notification 'window/logMessage'.\r\nParams: {""type"":3,""message"":""2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\\n\\tpackage=\\""google.golang.org/protobuf/internal/impl\\""\\n""}\r\n\r\n\r\n[Info  - 6:54:59 PM] 2021/08/04 18:54:59 discovered missing identifiers: map[unknownFieldsA:true]\r\n\tpackage=""google.golang.org/protobuf/internal/impl""\r\n\r\n[Trace - 18:55:00.133 PM] Received notification '$/progress'.\r\nParams: {""token"":""8674665223082153551"",""value"":{""kind"":""end"",""message"":""Done.""}}\r\n\r\n\r\n[Trace - 18:55:00.135 PM] Received notification 'textDocument/publishDiagnostics'.\r\nParams: {""uri"":""file:///Users/hakim/projects/google/vscode-go/go.mod"",""diagnostics"":[]}\r\n\r\n\r\n[Trace - 18:55:00.426 PM] Sending request 'textDocument/hover - (18)'.\r\nParams: {""textDocument"":{""uri"":""file:///Users/hakim/projects/google/vscode-go/tools/relnotes/relnotes.go""},""position"":{""line"":227,""character"":23}}\r\n\r\n\r\n[Trace - 18:55:00.443 PM] Received response 'textDocument/hover - (18)' in 17ms.\r\nResult: {""contents"":{""kind"":""markdown"",""value"":""```go\\nfunc (*regexp.Regexp).FindStringSubmatch(s string) []string\\n```\\n\\n[`(regexp.Regexp).FindStringSubmatch` on pkg.go.dev](https://pkg.go.dev/regexp?utm_source=gopls#Regexp.FindStringSubmatch)\\n\\nFindStringSubmatch returns a slice of strings holding the text of the\\nleftmost match of the regular expression in s and the matches, if any, of\\nits subexpressions, as defined by the \\\\'Submatch\\\\' description in the\\npackage comment\\\\.\\nA return value of nil indicates no match\\\\.\\n""},""range"":{""start"":{""line"":227,""character"":19},""end"":{""line"":227,""character"":37}}}\r\n</pre>\r\n</details>\r\n\r\nThis was the only diagnostic message presented in `go.mod`.\r\n![Screen Shot 2021-08-04 at 6 54 21 PM](https://user-images.githubusercontent.com/4999471/128267424-4a45f03a-9e2c-4f2d-8ee1-9f5cd311bc31.png)\r\n\r\nSorry that I didn't report with a simpler repro case. Probably it's easy enough (just adding a change that adds a new module to go.mod and the code) but want to check if this is a known issue.\r\n",go\\nfunc (*regexp.Regexp).FindStringSubmatch(s string) []string\\n
47410,"types2: adjust types reported for shift expressions with constant RHS to match `go/types`As discussed in #47243, go/types should preserve the type of untyped constants on the RHS of a shift expression.\r\n\r\nHowever, it does this inconsistently for integral vs non-integral types. Consider\r\n\r\nIn 1.16 (and probably earlier), go/types reports the type of `1` as `untyped int`, but the type of `2.` as `uint`. It should preserve the type of `2.` as `untyped float`.\r\n\r\nhttps://play.golang.org/p/aZZ48onPW2z\r\n\r\nWe're going to preserve this behavior for 1.17, but should try to fix it for 1.18.\r\n\r\nCC @griesemer ",NeedsFix,griesemer,"As discussed in #47243, go/types should preserve the type of untyped constants on the RHS of a shift expression.\r\n\r\nHowever, it does this inconsistently for integral vs non-integral types. Consider\r\n```go\r\n  var s int\r\n  var _ = s << 1\r\n  var _ = s << 2.\r\n```\r\nIn 1.16 (and probably earlier), go/types reports the type of `1` as `untyped int`, but the type of `2.` as `uint`. It should preserve the type of `2.` as `untyped float`.\r\n\r\nhttps://play.golang.org/p/aZZ48onPW2z\r\n\r\nWe're going to preserve this behavior for 1.17, but should try to fix it for 1.18.\r\n\r\nCC @griesemer ",go\r\n  var s int\r\n  var _ = s << 1\r\n  var _ = s << 2.\r\n
47276,"strings: copying but not using a Builder after first use leads to runtime crash (generates heap -> stack pointer)<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.6\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://play.golang.org/p/RRI3-srzVrR\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI don't see any error message\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--\r\nruntime: pointer 0xc035a7bc78 to unused region of span span.base()=0xc0001de000 span.limit=0xc0001dff80 span.state=1\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | runtime: found in object at *(0xc0026a6000+0x0)\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | object=0xc0026a6000 s.base()=0xc0026a6000 s.limit=0xc0026a8000 s.spanclass=36 s.elemsize=256 s.state=mSpanInUse\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+0) = 0xc035a7bc78 <==\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+8) = 0xc002700000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+16) = 0x113a6c\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+24) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+32) = 0xc035a7bc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+40) = 0xc0017ce000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+48) = 0x1100aa\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+56) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+64) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+72) = 0xc002300000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+80) = 0x115fcc\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+88) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+96) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+104) = 0xc0018f6000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+112) = 0x115de0\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+120) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+128) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+136) = 0xc002992000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+144) = 0x114359\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+152) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+160) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+168) = 0xc001a1e000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+176) = 0x11aa0e\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+184) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+192) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+200) = 0xc001f80000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+208) = 0x113b9b\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+216) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+224) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+232) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+240) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+248) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | fatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime stack:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.throw(0x98583e, 0x3e)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/panic.go:1117 +0x72 fp=0xc000049e28 sp=0xc000049df8 pc=0x435db2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.badPointer(0x7f0421f06050, 0xc035a7bc78, 0xc0026a6000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:351 +0x235 fp=0xc000049e70 sp=0xc000049e28 pc=0x415335\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.findObject(0xc035a7bc78, 0xc0026a6000, 0x0, 0x0, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:387 +0x9b fp=0xc000049ea8 sp=0xc000049e70 pc=0x4153fb\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.scanobject(0xc0026a6000, 0xc000027698)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1286 +0x24a fp=0xc000049f38 sp=0xc000049ea8 pc=0x42138a\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcDrain(0xc000027698, 0x3)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1048 +0x22b fp=0xc000049f90 sp=0xc000049f38 pc=0x420b0b\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker.func2()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1980 +0x88 fp=0xc000049fd0 sp=0xc000049f90 pc=0x461f28\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack(0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:379 +0x66 fp=0xc000049fd8 sp=0xc000049fd0 pc=0x4693e6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mstart()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:1246 fp=0xc000049fe0 sp=0xc000049fd8 pc=0x43b080\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 34 [GC worker (idle)]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack_switch()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:339 fp=0xc000030f60 sp=0xc000030f58 pc=0x469360\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1967 +0x1c7 fp=0xc000030fe0 sp=0xc000030f60 pc=0x41d627\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.goexit()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:1371 +0x1 fp=0xc000030fe8 sp=0xc000030fe0 pc=0x46b061\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | created by runtime.gcBgMarkStartWorkers\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1835 +0x37\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 1 [runnable]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.Gosched(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:292\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcAssistAlloc(0xc000000180)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:469 +0x1bc fp=0xc00008faa0 sp=0xc00008fa40 pc=0x41f55c\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mallocgc(0xbc000, 0x0, 0xc0032c7000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/malloc.go:961 +0x996 fp=0xc00008fb28 sp=0xc00008faa0 pc=0x40ddb6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.growslice(0x8b9ec0, 0xc003100000, 0x95dcc, 0x96000, 0x96199, 0xc0032cd000, 0x3cd, 0x400)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/slice.go:224 +0x154 fp=0xc00008fb90 sp=0xc00008fb28 pc=0x44d6d4\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | strings.(*Builder).WriteString(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/strings/builder.go:123\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).changeTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x9798ab, 0x17, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:71 +0x392 fp=0xc00008fcc8 sp=0xc00008fb90 pc=0x8666b2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).ChangeAllTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:19 +0x5e fp=0xc00008fd18 sp=0xc00008fcc8 pc=0x86623e\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/services.(*service).SetEsElasticsearch(0xc000024360, 0xa0aef0, 0xc00001a040, 0xc00006ba00, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/services/es_elasticsearch.go:40 +0x439 fp=0xc00008fe18 sp=0xc00008fd18 pc=0x871739\r\n\xa0```\r\n",NeedsDecision|compiler/runtime,dr2chase,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.6\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://play.golang.org/p/RRI3-srzVrR\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc f(myList []string) error {\r\n\tconst (\r\n\t\tThreshold = 1000\r\n\t)\r\n\r\n\tvar (\r\n\t\tbuilderList = []strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tbullder = strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tcount uint64 = 0\r\n\t)\r\n\tfor _, _ = range myList {\r\n\t\tif count > Threshold {\r\n\t\t\tbuilderList = append(builderList, bullder)\r\n\t\t\tbullder = strings.Builder{}\r\n\t\t\tcount = 0\r\n\t\t}\r\n\t\tbullder.WriteString(""123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"")\r\n\t\tcount++\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tmyList := make([]string, 1000000)\r\n\terr := f(myList)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(""success"")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI don't see any error message\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--\r\nruntime: pointer 0xc035a7bc78 to unused region of span span.base()=0xc0001de000 span.limit=0xc0001dff80 span.state=1\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | runtime: found in object at *(0xc0026a6000+0x0)\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | object=0xc0026a6000 s.base()=0xc0026a6000 s.limit=0xc0026a8000 s.spanclass=36 s.elemsize=256 s.state=mSpanInUse\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+0) = 0xc035a7bc78 <==\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+8) = 0xc002700000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+16) = 0x113a6c\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+24) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+32) = 0xc035a7bc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+40) = 0xc0017ce000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+48) = 0x1100aa\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+56) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+64) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+72) = 0xc002300000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+80) = 0x115fcc\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+88) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+96) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+104) = 0xc0018f6000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+112) = 0x115de0\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+120) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+128) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.012+09:00 | *(object+136) = 0xc002992000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+144) = 0x114359\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+152) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+160) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+168) = 0xc001a1e000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+176) = 0x11aa0e\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+184) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+192) = 0xc00008fc78\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+200) = 0xc001f80000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+208) = 0x113b9b\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+216) = 0x128000\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+224) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+232) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+240) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | *(object+248) = 0x0\r\n\xa0 | 2021-07-19T12:43:00.013+09:00 | fatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime stack:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.throw(0x98583e, 0x3e)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/panic.go:1117 +0x72 fp=0xc000049e28 sp=0xc000049df8 pc=0x435db2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.badPointer(0x7f0421f06050, 0xc035a7bc78, 0xc0026a6000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:351 +0x235 fp=0xc000049e70 sp=0xc000049e28 pc=0x415335\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.findObject(0xc035a7bc78, 0xc0026a6000, 0x0, 0x0, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mbitmap.go:387 +0x9b fp=0xc000049ea8 sp=0xc000049e70 pc=0x4153fb\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.scanobject(0xc0026a6000, 0xc000027698)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1286 +0x24a fp=0xc000049f38 sp=0xc000049ea8 pc=0x42138a\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcDrain(0xc000027698, 0x3)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:1048 +0x22b fp=0xc000049f90 sp=0xc000049f38 pc=0x420b0b\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker.func2()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1980 +0x88 fp=0xc000049fd0 sp=0xc000049f90 pc=0x461f28\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack(0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:379 +0x66 fp=0xc000049fd8 sp=0xc000049fd0 pc=0x4693e6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mstart()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:1246 fp=0xc000049fe0 sp=0xc000049fd8 pc=0x43b080\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 34 [GC worker (idle)]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.systemstack_switch()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:339 fp=0xc000030f60 sp=0xc000030f58 pc=0x469360\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcBgMarkWorker()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1967 +0x1c7 fp=0xc000030fe0 sp=0xc000030f60 pc=0x41d627\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.goexit()\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/asm_amd64.s:1371 +0x1 fp=0xc000030fe8 sp=0xc000030fe0 pc=0x46b061\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | created by runtime.gcBgMarkStartWorkers\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgc.go:1835 +0x37\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | goroutine 1 [runnable]:\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.Gosched(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/proc.go:292\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.gcAssistAlloc(0xc000000180)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/mgcmark.go:469 +0x1bc fp=0xc00008faa0 sp=0xc00008fa40 pc=0x41f55c\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.mallocgc(0xbc000, 0x0, 0xc0032c7000, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/malloc.go:961 +0x996 fp=0xc00008fb28 sp=0xc00008faa0 pc=0x40ddb6\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | runtime.growslice(0x8b9ec0, 0xc003100000, 0x95dcc, 0x96000, 0x96199, 0xc0032cd000, 0x3cd, 0x400)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/runtime/slice.go:224 +0x154 fp=0xc00008fb90 sp=0xc00008fb28 pc=0x44d6d4\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | strings.(*Builder).WriteString(...)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /usr/local/go/src/strings/builder.go:123\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).changeTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x9798ab, 0x17, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:71 +0x392 fp=0xc00008fcc8 sp=0xc00008fb90 pc=0x8666b2\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch.(*elasticSearch).ChangeAllTutor(0xc00000e0c0, 0xc034e46000, 0x9727, 0x9727, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/repositories/eselasticsearch/tutors.go:19 +0x5e fp=0xc00008fd18 sp=0xc00008fcc8 pc=0x86623e\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | git.rarejob.com/rarejob-platform/event-search-polling-batch/src/services.(*service).SetEsElasticsearch(0xc000024360, 0xa0aef0, 0xc00001a040, 0xc00006ba00, 0x0, 0x0)\r\n\xa0 | 2021-07-19T12:43:00.016+09:00 | /builds/rarejob-platform/event-search-polling-batch/src/services/es_elasticsearch.go:40 +0x439 fp=0xc00008fe18 sp=0xc00008fd18 pc=0x871739\r\n\xa0```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""strings""\r\n)\r\n\r\nfunc f(myList []string) error {\r\n\tconst (\r\n\t\tThreshold = 1000\r\n\t)\r\n\r\n\tvar (\r\n\t\tbuilderList = []strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tbullder = strings.Builder{}\r\n\t)\r\n\tvar (\r\n\t\tcount uint64 = 0\r\n\t)\r\n\tfor _, _ = range myList {\r\n\t\tif count > Threshold {\r\n\t\t\tbuilderList = append(builderList, bullder)\r\n\t\t\tbullder = strings.Builder{}\r\n\t\t\tcount = 0\r\n\t\t}\r\n\t\tbullder.WriteString(""123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"")\r\n\t\tcount++\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tmyList := make([]string, 1000000)\r\n\terr := f(myList)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(""success"")\r\n}\r\n"
46825,"cmd/cover: treats empty lambdas as being executed even when not executed### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nThis problem came to my attention because I was surprised the coverage reported by `go test -coverprofile=cover` was significantly higher than that reported by the Codecov service. After carefully looking at a couple of files in the project which should have had identical coverage I came to the conclusion there appears to be an off by one bug, or something akin to it, in the go coverage calculations.\r\n\r\nCreate a directory with the following two files, run `go mod example.com/coverage` then `go test -coverprofile=cover ./...`.\r\n\r\nFile *x.go*:\r\n\r\n\r\n\r\nFile *x_test.go*:\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nCorrect coverage of 66.7%.\r\n\r\n### What did you see instead?\r\n\r\nIncorrect coverage of 80% due to treating the lambda in the `BadCoverage` function as if it had been executed. Changing the body of the lambda to do anything at all ""fixes"" the coverage. Interestingly, the HTML produced by `go tool cover -html=cover` highlights the right-paren in red in the `BadCoverage` case. Which suggests a disconnect between the code highlighting and coverage calculation. Also, the incorrect value of 80% is also wrong, it seems to me, since it is treating the code as if 5/6 of the lines were executed which is 83.3%. It looks like it is treating the incorrect case as if 4/5 of the lines were executed. Which is another clue how the coverage data is being misinterpreted.\r\n\r\nFor the record, the *cover* data is (compare lines 3 and 5):\r\n\r\n```\r\nmode: set\r\nexample.com/t/x.go:9.20,10.15 1 1\r\nexample.com/t/x.go:10.16,10.17 0 0\r\nexample.com/t/x.go:13.22,14.15 1 1\r\nexample.com/t/x.go:14.15,14.32 1 0\r\nexample.com/t/x.go:17.22,18.15 1 1\r\nexample.com/t/x.go:19.2,19.7 1 1\r\nexample.com/t/x.go:18.16,18.17 0 1\r\n```",NeedsInvestigation|compiler/runtime,thanm,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nThis problem came to my attention because I was surprised the coverage reported by `go test -coverprofile=cover` was significantly higher than that reported by the Codecov service. After carefully looking at a couple of files in the project which should have had identical coverage I came to the conclusion there appears to be an off by one bug, or something akin to it, in the go coverage calculations.\r\n\r\nCreate a directory with the following two files, run `go mod example.com/coverage` then `go test -coverprofile=cover ./...`.\r\n\r\nFile *x.go*:\r\n\r\n```go\r\npackage coverage\r\n\r\ntype covered struct {\r\n        f func()\r\n}\r\n\r\nvar c covered\r\n\r\nfunc BadCoverage() {\r\n        c.f = func() {}\r\n}\r\n\r\nfunc GoodCoverage1() {\r\n        c.f = func() { c = covered{} }\r\n}\r\n\r\nfunc GoodCoverage2() {\r\n        c.f = func() {}\r\n        c.f()\r\n}\r\n```\r\n\r\nFile *x_test.go*:\r\n\r\n```go\r\npackage coverage\r\n\r\nimport ""testing""\r\n\r\nfunc TestCoverage(t *testing.T) {\r\n        BadCoverage()\r\n        GoodCoverage1()\r\n        GoodCoverage2()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nCorrect coverage of 66.7%.\r\n\r\n### What did you see instead?\r\n\r\nIncorrect coverage of 80% due to treating the lambda in the `BadCoverage` function as if it had been executed. Changing the body of the lambda to do anything at all ""fixes"" the coverage. Interestingly, the HTML produced by `go tool cover -html=cover` highlights the right-paren in red in the `BadCoverage` case. Which suggests a disconnect between the code highlighting and coverage calculation. Also, the incorrect value of 80% is also wrong, it seems to me, since it is treating the code as if 5/6 of the lines were executed which is 83.3%. It looks like it is treating the incorrect case as if 4/5 of the lines were executed. Which is another clue how the coverage data is being misinterpreted.\r\n\r\nFor the record, the *cover* data is (compare lines 3 and 5):\r\n\r\n```\r\nmode: set\r\nexample.com/t/x.go:9.20,10.15 1 1\r\nexample.com/t/x.go:10.16,10.17 0 0\r\nexample.com/t/x.go:13.22,14.15 1 1\r\nexample.com/t/x.go:14.15,14.32 1 0\r\nexample.com/t/x.go:17.22,18.15 1 1\r\nexample.com/t/x.go:19.2,19.7 1 1\r\nexample.com/t/x.go:18.16,18.17 0 1\r\n```",go\r\npackage coverage\r\n\r\ntype covered struct {\r\n        f func()\r\n}\r\n\r\nvar c covered\r\n\r\nfunc BadCoverage() {\r\n        c.f = func() {}\r\n}\r\n\r\nfunc GoodCoverage1() {\r\n        c.f = func() { c = covered{} }\r\n}\r\n\r\nfunc GoodCoverage2() {\r\n        c.f = func() {}\r\n        c.f()\r\n}\r\n
46787,"runtime: provide Pinner API for object pinning**Update**, 2021-10-20: the latest proposal is the API in https://github.com/golang/go/issues/46787#issuecomment-942547949.\r\n\r\n- - - \r\n\r\n## Problem Statement\r\n\r\nThe [pointer passing rules](https://golang.org/cmd/cgo/#hdr-Passing_pointers) state:\r\n\r\n> Go code may pass a Go pointer to C provided the Go memory to which it points does not contain any Go pointers. \r\n\r\nand\r\n> Go code may not store a Go pointer in C memory.\r\n\r\nThere are C APIs, most notably the `iovec` based ones for [vectored I/O](https://en.wikipedia.org/wiki/Vectored_I/O) which expect an array of structs that describe buffers to read to or write from. The naive approach would be to allocate both the array and the buffers with `C.malloc()` and then either work on the C buffers directly or copy the content to Go buffers. In the case of Go bindings for a C API, which is assumably the most common use case for Cgo, the users of the bindings shouldn't have to deal with C types, which means that all data has to be copied into Go allocated buffers. This of course impairs the performance, especially for larger buffers. Therefore it would be desirable to have a safe possibility to let the C API write directly into the Go buffers. This, however, is not possible because\r\n\r\n* either the buffer array is allocated in C memory, but then the pointers of the Go buffers can't be stored in it. (Storing Go pointers in C memory is forbidden.)\r\n* or the buffer array is allocated in Go memory and the Go buffer pointers are stored in it. But then the pointer to that buffer array can't be passed  to a C function. (Passing a Go pointer that points to memory containing other Go pointers to a C function is forbidden.)\r\n\r\nObviously, what is missing is a safe way to pin an arbitrary number of Go pointers in order to store them in C memory or in passed-to-C Go memory for the duration of a C call.\r\n \r\n## Workarounds\r\n\r\n### Break the rules and store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n\r\n\r\nbut `GODEBUG=cgocheck=2` would catch that.\r\n\r\nHowever, you can circumvent cgocheck=2 with this casting trick: \r\n\r\n\r\nThis might work, as long as the GC is not moving the pointers, which might be a fact as of now, but is not guaranteed. \r\n\r\n</details>\r\n\r\n### Break the rules and hide the Go pointer in  Go memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n\r\nAgain: This might work, as long as the GC is not moving the pointers. `GODEBUG=cgocheck=2` wouldn't complain about this.\r\n\r\n</details>\r\n\r\n### Break the rules and temporarily disable `cgocheck`\r\n<details><summary>(click)</summary>\r\n\r\nIf hiding the Go pointer as a uintptr like in the last workaround is not possible, passing Go memory that contains Go pointers usually bails out because of the default `cgocheck=1` setting. It is possible to disable temporarily `cgocheck` during a C call, which can especially useful, when the pointer have been ""pinned"" with one of the later workarounds. For example the `_cgoCheckPtr()` function, that is used in the generated Cgo code, can be  shadowed in the local scope, which disables the check for the following C calls in the scope:\r\n\r\n\r\n\r\nMaybe slightly more robust, is to export the runtime.dbgvars list:\r\n\r\n\r\n\r\n</details>\r\n\r\n### Use a C function to store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nThe rules allow that a C function stores a Go pointer in C memory for the duration of the call. So, for each Go pointer a C function can be called in a Go routine, that stores the Go pointer in C memory and then calls a Go function callback that waits for a release signal. After the release signal is received, the Go callback returns to the C function, the C function clears the C memory from the Go pointer, and returns as well, finishing the Go routine.\r\n\r\nThis approach fully complies with the rules, but is quite expensive, because each Go routine that calls a C function creates a new thread, that means one thread per stored Go pointer.\r\n\r\n</details>\r\n\r\n### Use the `//go:uintptrescapes` compiler directive\r\n<details><summary>(click)</summary>\r\n\r\n`//go:uintptrescapes` is a compiler directive that\r\n\r\n> specifies that the function's uintptr arguments may be pointer values that have been converted to uintptr and must be treated as such by the garbage collector.\r\n\r\nSo, similar to the workaround before, a Go function with this directive can be called in a Go routine, which simply waits for a release signal. When the signal is received, the function returns and sets the pointer free.\r\n\r\nThis seems already almost like a proper solution, so that I implemented a package with this approach, that allows to `Pin()` a Go pointer and `Poke()` it into C memory: [PtrGuard](https://github.com/ansiwen/ptrguard)\r\n\r\nBut there are still caveats. The compiler and the runtime (cgocheck=2) don't seem to know about which pointers are protected by the directive, because they still don't allow to pass Go memory containing these Go pointers to a C function, or to store the pointers in C memory. Therefore the two first workarounds are additionally necessary. Also there is the small overhead for the Go routine and the release signalling.\r\n\r\n</details>\r\n\r\n## Proposal\r\n\r\nIt would make Cgo a lot more usable for C APIs with more complex pointer handling like `iovec`, if there would be a programmatic way to provide what `//go:uintptrescapes` provides already through the backdoor. There should be a possibility to pin an arbitrary amount of Go pointers in the current scope, so that they are allowed to be stored in C memory or be contained in Go memory that is passed to a C function within this scope, for example with a `runtime.PtrEscapes()` function. It's cumbersome, that it's required to abuse Go routines, channels and casting tricks in order provide bindings to such C APIs. As long as the Go GC is not moving pointers, it could be a trivial implementation, but it would encapsulate this knowledge and would give users a guarantee.\r\n\r\nI know from the other issues and discussions around this topic that it's seen as dangerous if it is possible to pin an arbitrary amount of pointers. But\r\n\r\n1. it is possible to call an arbitrary amount of C or `//go:uintptrescapes` functions, therefore it is also possible to pin arbitrary amount of Go pointers already.\r\n2. it is necessary for some C APIs\r\n\r\nRelated issues: #32115, #40431\r\n\r\n/cc @ianlancetaylor @rsc @seebs \r\n\r\n**edit:** the first workaround had an incorrect statement.\r\n**edit 2:** add workarounds for disabling cgocheck",Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod|compiler/runtime,ansiwen,"**Update**, 2021-10-20: the latest proposal is the API in https://github.com/golang/go/issues/46787#issuecomment-942547949.\r\n\r\n- - - \r\n\r\n## Problem Statement\r\n\r\nThe [pointer passing rules](https://golang.org/cmd/cgo/#hdr-Passing_pointers) state:\r\n\r\n> Go code may pass a Go pointer to C provided the Go memory to which it points does not contain any Go pointers. \r\n\r\nand\r\n> Go code may not store a Go pointer in C memory.\r\n\r\nThere are C APIs, most notably the `iovec` based ones for [vectored I/O](https://en.wikipedia.org/wiki/Vectored_I/O) which expect an array of structs that describe buffers to read to or write from. The naive approach would be to allocate both the array and the buffers with `C.malloc()` and then either work on the C buffers directly or copy the content to Go buffers. In the case of Go bindings for a C API, which is assumably the most common use case for Cgo, the users of the bindings shouldn't have to deal with C types, which means that all data has to be copied into Go allocated buffers. This of course impairs the performance, especially for larger buffers. Therefore it would be desirable to have a safe possibility to let the C API write directly into the Go buffers. This, however, is not possible because\r\n\r\n* either the buffer array is allocated in C memory, but then the pointers of the Go buffers can't be stored in it. (Storing Go pointers in C memory is forbidden.)\r\n* or the buffer array is allocated in Go memory and the Go buffer pointers are stored in it. But then the pointer to that buffer array can't be passed  to a C function. (Passing a Go pointer that points to memory containing other Go pointers to a C function is forbidden.)\r\n\r\nObviously, what is missing is a safe way to pin an arbitrary number of Go pointers in order to store them in C memory or in passed-to-C Go memory for the duration of a C call.\r\n \r\n## Workarounds\r\n\r\n### Break the rules and store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n\r\n```go\r\nIovecCPtr.iov_base = unsafe.Pointer(myGoPtr)\r\n```\r\n\r\nbut `GODEBUG=cgocheck=2` would catch that.\r\n\r\nHowever, you can circumvent cgocheck=2 with this casting trick: \r\n\r\n```go\r\n*(*uintptr)(unsafe.Pointer(&IovecCPtr.iov_base)) = uintptr(myGoPtr)\r\n```\r\nThis might work, as long as the GC is not moving the pointers, which might be a fact as of now, but is not guaranteed. \r\n\r\n</details>\r\n\r\n### Break the rules and hide the Go pointer in  Go memory\r\n<details><summary>(click)</summary>\r\n\r\nwith something like\r\n```go\r\ntype iovecT struct {\r\n  iov_base uintptr\r\n  iov_len  C.size_t\r\n}\r\niovec := make([]iovecT, numberOfBuffers)\r\nfor i := range iovec {\r\n  bufferPtr := unsafe.Pointer(&bufferArray[i][0])\r\n  iovec[i].iov_base = uintptr(bufferPtr)\r\n  iovec[i].iov_len = C.size_t(len(bufferArray[i]))\r\n}\r\nn := C.my_iovec_read((*C.struct_iovec)(unsafe.Pointer(&iovec[0])), C.int(numberOfBuffers))\r\n```\r\n\r\nAgain: This might work, as long as the GC is not moving the pointers. `GODEBUG=cgocheck=2` wouldn't complain about this.\r\n\r\n</details>\r\n\r\n### Break the rules and temporarily disable `cgocheck`\r\n<details><summary>(click)</summary>\r\n\r\nIf hiding the Go pointer as a uintptr like in the last workaround is not possible, passing Go memory that contains Go pointers usually bails out because of the default `cgocheck=1` setting. It is possible to disable temporarily `cgocheck` during a C call, which can especially useful, when the pointer have been ""pinned"" with one of the later workarounds. For example the `_cgoCheckPtr()` function, that is used in the generated Cgo code, can be  shadowed in the local scope, which disables the check for the following C calls in the scope:\r\n\r\n```go\r\nfunc ... {\r\n  _cgoCheckPointer := func(interface{}, interface{}) {}\r\n  C.my_c_function(x, y)\r\n}\r\n```\r\n\r\nMaybe slightly more robust, is to export the runtime.dbgvars list:\r\n\r\n```go\r\ntype dbgVar struct {\r\n\tname  string\r\n\tvalue *int32\r\n}\r\n\r\n//go:linkname dbgvars runtime.dbgvars\r\nvar dbgvars []dbgVar\r\n\r\nvar cgocheck = func() *int32 {\r\n\tfor i := range dbgvars {\r\n\t\tif dbgvars[i].name == ""cgocheck"" {\r\n\t\t\treturn dbgvars[i].value\r\n\t\t}\r\n\t}\r\n\tpanic(""Couln't find cgocheck debug variable"")\r\n}()\r\n\r\nfunc ... {\r\n\tbefore := *cgocheck\r\n\t*cgocheck = 0\r\n\tC.my_c_function(x, y)\r\n\t*cgocheck = before\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Use a C function to store the Go pointer in C memory\r\n<details><summary>(click)</summary>\r\n\r\nThe rules allow that a C function stores a Go pointer in C memory for the duration of the call. So, for each Go pointer a C function can be called in a Go routine, that stores the Go pointer in C memory and then calls a Go function callback that waits for a release signal. After the release signal is received, the Go callback returns to the C function, the C function clears the C memory from the Go pointer, and returns as well, finishing the Go routine.\r\n\r\nThis approach fully complies with the rules, but is quite expensive, because each Go routine that calls a C function creates a new thread, that means one thread per stored Go pointer.\r\n\r\n</details>\r\n\r\n### Use the `//go:uintptrescapes` compiler directive\r\n<details><summary>(click)</summary>\r\n\r\n`//go:uintptrescapes` is a compiler directive that\r\n\r\n> specifies that the function's uintptr arguments may be pointer values that have been converted to uintptr and must be treated as such by the garbage collector.\r\n\r\nSo, similar to the workaround before, a Go function with this directive can be called in a Go routine, which simply waits for a release signal. When the signal is received, the function returns and sets the pointer free.\r\n\r\nThis seems already almost like a proper solution, so that I implemented a package with this approach, that allows to `Pin()` a Go pointer and `Poke()` it into C memory: [PtrGuard](https://github.com/ansiwen/ptrguard)\r\n\r\nBut there are still caveats. The compiler and the runtime (cgocheck=2) don't seem to know about which pointers are protected by the directive, because they still don't allow to pass Go memory containing these Go pointers to a C function, or to store the pointers in C memory. Therefore the two first workarounds are additionally necessary. Also there is the small overhead for the Go routine and the release signalling.\r\n\r\n</details>\r\n\r\n## Proposal\r\n\r\nIt would make Cgo a lot more usable for C APIs with more complex pointer handling like `iovec`, if there would be a programmatic way to provide what `//go:uintptrescapes` provides already through the backdoor. There should be a possibility to pin an arbitrary amount of Go pointers in the current scope, so that they are allowed to be stored in C memory or be contained in Go memory that is passed to a C function within this scope, for example with a `runtime.PtrEscapes()` function. It's cumbersome, that it's required to abuse Go routines, channels and casting tricks in order provide bindings to such C APIs. As long as the Go GC is not moving pointers, it could be a trivial implementation, but it would encapsulate this knowledge and would give users a guarantee.\r\n\r\nI know from the other issues and discussions around this topic that it's seen as dangerous if it is possible to pin an arbitrary amount of pointers. But\r\n\r\n1. it is possible to call an arbitrary amount of C or `//go:uintptrescapes` functions, therefore it is also possible to pin arbitrary amount of Go pointers already.\r\n2. it is necessary for some C APIs\r\n\r\nRelated issues: #32115, #40431\r\n\r\n/cc @ianlancetaylor @rsc @seebs \r\n\r\n**edit:** the first workaround had an incorrect statement.\r\n**edit 2:** add workarounds for disabling cgocheck",go\r\nIovecCPtr.iov_base = unsafe.Pointer(myGoPtr)\r\n
46746,"reflect: add Value.Equal, Value.ComparableIn Go 1.17 we have introduced a conversion that can panic (#395).  This is the first case in which a conversion can panic.  This means that code that calls `reflect.Type.ConvertibleTo` and then, if that returns `true`, calls `reflect.Value.Convert`, can see an unexpected panic.  (See #46730.)\r\n\r\nSeparately, for a long time now it has been possible for a comparison to panic, when comparing two interface values that have the same dynamic type but for which the dynamic type is not comparable.  Therefore, for a long time code that calls `reflect.Type.Comparable` and then, if that returns true, uses the `==` operator can see an unexpected panic.  (This is a fairly uncommon case as the problem only arises when working with indirectly accessed interface types, such as pointers to interfaces.)\r\n\r\nI propose adding two new methods to `reflect.Value`.\r\n\r\n\r\n",Proposal|Proposal-Accepted|FrozenDueToAge|Proposal-FinalCommentPeriod|compiler/runtime,ianlancetaylor|hopehook,"In Go 1.17 we have introduced a conversion that can panic (#395).  This is the first case in which a conversion can panic.  This means that code that calls `reflect.Type.ConvertibleTo` and then, if that returns `true`, calls `reflect.Value.Convert`, can see an unexpected panic.  (See #46730.)\r\n\r\nSeparately, for a long time now it has been possible for a comparison to panic, when comparing two interface values that have the same dynamic type but for which the dynamic type is not comparable.  Therefore, for a long time code that calls `reflect.Type.Comparable` and then, if that returns true, uses the `==` operator can see an unexpected panic.  (This is a fairly uncommon case as the problem only arises when working with indirectly accessed interface types, such as pointers to interfaces.)\r\n\r\nI propose adding two new methods to `reflect.Value`.\r\n\r\n```Go\r\n// ConvertibleTo reports whether v can be converted to type t.\r\n// If this reports true then v.Convert(t) will not panic.\r\nfunc (v Value) ConvertibleTo(t Type) bool\r\n\r\n// Comparable reports whether the type of v is comparable.\r\n// If the type of v is an interface, this checks the dynamic type.\r\n// If this reports true then v.Interface() == x will not panic for any x.\r\nfunc (v Value) Comparable() bool\r\n```\r\n","Go\r\n// ConvertibleTo reports whether v can be converted to type t.\r\n// If this reports true then v.Convert(t) will not panic.\r\nfunc (v Value) ConvertibleTo(t Type) bool\r\n\r\n// Comparable reports whether the type of v is comparable.\r\n// If the type of v is an interface, this checks the dynamic type.\r\n// If this reports true then v.Interface() == x will not panic for any x.\r\nfunc (v Value) Comparable() bool\r\n"
46505,"spec: allow conversion from slice to arrayI recently tried to use the new #395 feature (for converting a slice to an array pointer: https://golang.org/cl/216424) in:\r\n\r\nhttps://go-review.googlesource.com/c/go/+/322329\r\n\r\nBut in review, it was pointed out that it was a little ugly, as what I wanted to return was an array, which required a dereference:\r\n\r\n\r\n\r\nIt would've been nicer if I could've just converted to an array instead:\r\n\r\n\r\n\r\nTalking to @ianlancetaylor and @griesemer, we couldn't remember great reasons for not also allowing this as part of #395. It does mean there's an subtle copy, but arguably the `*` dereference above is also a somewhat subtle copy.\r\n\r\nCould we also add support for converting to the array?\r\n\r\n/cc @katiehockman @josharian @rogpeppe  @mdempsky ",LanguageChange|Proposal|Proposal-Accepted|FrozenDueToAge|early-in-cycle|Proposal-FinalCommentPeriod,mdempsky|timothy-king,"I recently tried to use the new #395 feature (for converting a slice to an array pointer: https://golang.org/cl/216424) in:\r\n\r\nhttps://go-review.googlesource.com/c/go/+/322329\r\n\r\nBut in review, it was pointed out that it was a little ugly, as what I wanted to return was an array, which required a dereference:\r\n\r\n```go\r\n\treturn *(*[Size224]byte)(sum[:Size224])\r\n```\r\n\r\nIt would've been nicer if I could've just converted to an array instead:\r\n\r\n```go\r\n\treturn ([Size224]byte)(sum[:Size224])\r\n```\r\n\r\nTalking to @ianlancetaylor and @griesemer, we couldn't remember great reasons for not also allowing this as part of #395. It does mean there's an subtle copy, but arguably the `*` dereference above is also a somewhat subtle copy.\r\n\r\nCould we also add support for converting to the array?\r\n\r\n/cc @katiehockman @josharian @rogpeppe  @mdempsky ",go\r\n\treturn *(*[Size224]byte)(sum[:Size224])\r\n
46159,"regexp: support encoding.TextMarshaler### What did you do?\r\n\r\nMarshaling a compiled regular expression, for example as part of a JSON object, results in an empty object. Example:\r\n\r\n\r\nProduces:\r\n```\r\n{""foo"":{}}\r\n```\r\n([Playground](https://play.golang.org/p/gRl2CkOS7pm))\r\n\r\n### What did you expect to see?\r\n\r\nIt would seem more intuitive for a compiled regexp to marshal to its string representation, as if `.String()` were called. Example:\r\n\r\n```\r\n{""foo"":""foo?""}\r\n```\r\n\r\nI propose we implement the `encoding.TextMarshaler` interface to return the value produced by the `String()` method.\r\n\r\nStrictly speaking, this would be a breaking change, so may need to be targeted to Go 2.  On the other hand, in a practical sense, the current behavior is completely useless, so anyone depending on the current behavior probably already has a bug in their program.  \U0001f937\u200d\u2642\ufe0f",Proposal|Proposal-Accepted|Proposal-FinalCommentPeriod,rsc,"### What did you do?\r\n\r\nMarshaling a compiled regular expression, for example as part of a JSON object, results in an empty object. Example:\r\n\r\n```golang\r\nre := regexp.MustCompile(""foo?"")\r\ndata, _ := json.Marshal(map[string]interface{}{""foo"":re})\r\nfmt.Println(string(data))\r\n```\r\nProduces:\r\n```\r\n{""foo"":{}}\r\n```\r\n([Playground](https://play.golang.org/p/gRl2CkOS7pm))\r\n\r\n### What did you expect to see?\r\n\r\nIt would seem more intuitive for a compiled regexp to marshal to its string representation, as if `.String()` were called. Example:\r\n\r\n```\r\n{""foo"":""foo?""}\r\n```\r\n\r\nI propose we implement the `encoding.TextMarshaler` interface to return the value produced by the `String()` method.\r\n\r\nStrictly speaking, this would be a breaking change, so may need to be targeted to Go 2.  On the other hand, in a practical sense, the current behavior is completely useless, so anyone depending on the current behavior probably already has a bug in their program.  \U0001f937\u200d\u2642\ufe0f","golang\r\nre := regexp.MustCompile(""foo?"")\r\ndata, _ := json.Marshal(map[string]interface{}{""foo"":re})\r\nfmt.Println(string(data))\r\n"
45609,"cmd/go: improve handling of symlinked module root for `go mod (tidy)`<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n(not relevant)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nFor easy navigation between projects, I have a ""jump"" directory on my machine,\r\nin which I keep symlinks to frequently used projects. `go mod tidy` ignores\r\nsymlinks (and warns about ignoring them), which is generally ok, but in situations\r\nwhere the whole module is detected to be in a ""symlinked"" path, it can be more\r\ndisruptive.\r\n\r\nTo reproduce this situation (you can run this inside a container to not clutter\r\nup your host);\r\n\r\n\r\n1. have a Go project on your machine\r\n\r\n    \r\n\r\n2. Create a ""projects"" directory with a symlink to the project\r\n\r\n    \r\n3. Navigate to the project using the symlink\r\n\r\n    \r\n\r\n4. Notice that `pwd` shows the path of the _symlink_\r\n\r\n    \r\n\r\n    (This is expected, and could be avoided by using `cd -P` instead of `cd`)\r\n\r\n5. Run `go mod tidy` (usually, this would be _after_ updating `go.mod` to update some dependencies)\r\n\r\n    \r\n\r\n6. Find out that all dependencies were removed from `go.mod`, and `go.sum` tobe emptied\r\n\r\n    \r\n    ```patch\r\n    diff --git a/go.mod b/go.mod\r\n    index d9b9ad5..ce733f8 100644\r\n    --- a/go.mod\r\n    +++ b/go.mod\r\n    @@ -1,5 +1,3 @@\r\n     module github.com/moby/spdystream\r\n    \r\n     go 1.13\r\n    -\r\n    -require github.com/gorilla/websocket v1.4.2\r\n    diff --git a/go.sum b/go.sum\r\n    index 85efffd..e69de29 100644\r\n    --- a/go.sum\r\n    +++ b/go.sum\r\n    @@ -1,2 +0,0 @@\r\n    -github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\r\n    -github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\n    ```\r\n\r\n\r\nWhile it's generally ok to ignore symlinks _within_ the project/module (there must be [reasons for that](https://github.com/golang/go/blob/954879d6d19175a5f0066c0ac0df0edda7f731b3/src/cmd/go/internal/modload/search.go#L88-L95)), it's somewhat disruptive in this situation; especially in situations where you just edited `go.mod`, and then see your changes being wiped.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhat I _expected_ to see for step `5.`, is `go mod (tidy)` to either:\r\n\r\n- follow the symlink to `/go/src/github.com/moby/spdystream/` and resolve modules from inside that context\r\n- or `go mod tidy` to produce an _error_ instead of a _warning_, and terminate _before_ modifying `go.mod` and `go.sum`\r\n\r\n\r\n### What did you see instead?\r\n\r\nAll dependencies removed from `go.mod`, and `go.sum` emptied\r\n",NeedsInvestigation|FrozenDueToAge|GoCommand,bcmills,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.3 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n(not relevant)\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nFor easy navigation between projects, I have a ""jump"" directory on my machine,\r\nin which I keep symlinks to frequently used projects. `go mod tidy` ignores\r\nsymlinks (and warns about ignoring them), which is generally ok, but in situations\r\nwhere the whole module is detected to be in a ""symlinked"" path, it can be more\r\ndisruptive.\r\n\r\nTo reproduce this situation (you can run this inside a container to not clutter\r\nup your host);\r\n\r\n\r\n1. have a Go project on your machine\r\n\r\n    ```bash\r\n    git clone https://github.com/moby/spdystream /go/src/github.com/moby/spdystream\r\n    ```\r\n\r\n2. Create a ""projects"" directory with a symlink to the project\r\n\r\n    ```bash\r\n    mkdir -p /projects \\\r\n      && ln -s /go/src/github.com/moby/spdystream/ /projects/spdystream\r\n    ```\r\n3. Navigate to the project using the symlink\r\n\r\n    ```bash\r\n    cd /projects/spdystream\r\n    ```\r\n\r\n4. Notice that `pwd` shows the path of the _symlink_\r\n\r\n    ```bash\r\n    pwd\r\n    /projects/spdystream\r\n    ```\r\n\r\n    (This is expected, and could be avoided by using `cd -P` instead of `cd`)\r\n\r\n5. Run `go mod tidy` (usually, this would be _after_ updating `go.mod` to update some dependencies)\r\n\r\n    ```bash\r\n    go mod tidy\r\n    warning: ignoring symlink /projects/spdystream\r\n    go: warning: ""all"" matched no packages\r\n    ```\r\n\r\n6. Find out that all dependencies were removed from `go.mod`, and `go.sum` tobe emptied\r\n\r\n    ```bash\r\n    git diff\r\n    ```\r\n    ```patch\r\n    diff --git a/go.mod b/go.mod\r\n    index d9b9ad5..ce733f8 100644\r\n    --- a/go.mod\r\n    +++ b/go.mod\r\n    @@ -1,5 +1,3 @@\r\n     module github.com/moby/spdystream\r\n    \r\n     go 1.13\r\n    -\r\n    -require github.com/gorilla/websocket v1.4.2\r\n    diff --git a/go.sum b/go.sum\r\n    index 85efffd..e69de29 100644\r\n    --- a/go.sum\r\n    +++ b/go.sum\r\n    @@ -1,2 +0,0 @@\r\n    -github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\r\n    -github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\n    ```\r\n\r\n\r\nWhile it's generally ok to ignore symlinks _within_ the project/module (there must be [reasons for that](https://github.com/golang/go/blob/954879d6d19175a5f0066c0ac0df0edda7f731b3/src/cmd/go/internal/modload/search.go#L88-L95)), it's somewhat disruptive in this situation; especially in situations where you just edited `go.mod`, and then see your changes being wiped.\r\n\r\n\r\n### What did you expect to see?\r\n\r\nWhat I _expected_ to see for step `5.`, is `go mod (tidy)` to either:\r\n\r\n- follow the symlink to `/go/src/github.com/moby/spdystream/` and resolve modules from inside that context\r\n- or `go mod tidy` to produce an _error_ instead of a _warning_, and terminate _before_ modifying `go.mod` and `go.sum`\r\n\r\n\r\n### What did you see instead?\r\n\r\nAll dependencies removed from `go.mod`, and `go.sum` emptied\r\n",bash\r\n    git clone https://github.com/moby/spdystream /go/src/github.com/moby/spdystream\r\n    
45424,"gollvm: can't find some C std pthread_xxx  functions<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16 gollvm LLVM 13.0.0git linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""off""\r\nGOARCH=""amd64""\r\nGOBIN=""/home/jxzhang/workspace/gowork/bin""\r\nGOCACHE=""/home/jxzhang/.cache/go-build""\r\nGOENV=""/home/jxzhang/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/jxzhang/workspace/gowork/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/jxzhang/workspace/gowork""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/jxzhang/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/jxzhang/.local/gollvm/tools""\r\nGOVCS=""""\r\nGOVERSION=""go1.16 gollvm LLVM 13.0.0git""\r\nGCCGO=""/home/jxzhang/.local/gollvm/bin/llvm-goc""\r\nAR=""ar""\r\nCC=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang""\r\nCXX=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4207555597=/tmp/go-build -gno-record-gcc-switches -funwind-tables""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nI wrote a cgo demo which call pthread std functions and tried to compile it with gollvm\r\nHere is a link on [play.golang- https://play.golang.org/p/PiaY0AIGprl](https://play.golang.org/p/PiaY0AIGprl)\r\nThough the code can't run on play.golang for some reason...\r\n\r\n\r\n### What did you expect to see?\r\nCompile succeed with gollvm\r\n\r\n\r\n### What did you see instead?\r\nAn error caused by an undefined reference occured \r\n```\r\nccode.c:11: error: undefined reference to 'pthread_join'\r\n```\r\nIn addition to this function, there are some other functions that also have this error:\r\n`pthread_once`, `pthread_mutexattr_init`, `pthread_mutexattr_settype`, `pthread_key_create`, `pthread_getspecific`, `pthread_mutexattr_destroy` ...\r\n\r\n### Some extra observations\r\nThese functions above seems different between `pthread_create` which can be referenced normally\r\n\r\n\r\n\r\n",NeedsInvestigation,thanm,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16 gollvm LLVM 13.0.0git linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""off""\r\nGOARCH=""amd64""\r\nGOBIN=""/home/jxzhang/workspace/gowork/bin""\r\nGOCACHE=""/home/jxzhang/.cache/go-build""\r\nGOENV=""/home/jxzhang/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/jxzhang/workspace/gowork/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/jxzhang/workspace/gowork""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://goproxy.cn,direct""\r\nGOROOT=""/home/jxzhang/.local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/jxzhang/.local/gollvm/tools""\r\nGOVCS=""""\r\nGOVERSION=""go1.16 gollvm LLVM 13.0.0git""\r\nGCCGO=""/home/jxzhang/.local/gollvm/bin/llvm-goc""\r\nAR=""ar""\r\nCC=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang""\r\nCXX=""/home/jxzhang/workspace/llvm_area/llvm-project/build/bin/clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build4207555597=/tmp/go-build -gno-record-gcc-switches -funwind-tables""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nI wrote a cgo demo which call pthread std functions and tried to compile it with gollvm\r\nHere is a link on [play.golang- https://play.golang.org/p/PiaY0AIGprl](https://play.golang.org/p/PiaY0AIGprl)\r\nThough the code can't run on play.golang for some reason...\r\n\r\n\r\n### What did you expect to see?\r\nCompile succeed with gollvm\r\n\r\n\r\n### What did you see instead?\r\nAn error caused by an undefined reference occured \r\n```\r\nccode.c:11: error: undefined reference to 'pthread_join'\r\n```\r\nIn addition to this function, there are some other functions that also have this error:\r\n`pthread_once`, `pthread_mutexattr_init`, `pthread_mutexattr_settype`, `pthread_key_create`, `pthread_getspecific`, `pthread_mutexattr_destroy` ...\r\n\r\n### Some extra observations\r\nThese functions above seems different between `pthread_create` which can be referenced normally\r\n\r\n```shell\r\njx $  nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_create           \r\n00000000010831e0 t __wrap_pthread_create\r\n                 w pthread_create\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_join\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_once  \r\n                 w pthread_once\r\n\r\n```\r\n\r\n",shell\r\njx $  nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_create           \r\n00000000010831e0 t __wrap_pthread_create\r\n                 w pthread_create\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_join\r\njx $ nm /home/jx/.local/gollvm/lib64/libgo.so.13git | grep pthread_once  \r\n                 w pthread_once\r\n\r\n
44410,"go/types, types2: type-checker internal type printing doesn't print embedded fields that are alias types correctlyGiven\r\n\r\nthe struct `S` will be printed with an embedded field named `map[string]int` because we have lost information about its alias name.\r\n\r\nThis affects debugging and test cases, e.g., `src/go/internal/gccgoimporter/importer_test.go:97` wants `""type S struct{b int; A2""` but we only have `""type S struct{b int; map[Y]Z}""`.\r\n\r\nThe relevant printing code is in `go/types/typestring.go`, function `writeType`.",NeedsFix,griesemer,"Given\r\n```Go\r\ntype E = map[string]int\r\ntype S struct {\r\n   E\r\n}\r\n```\r\nthe struct `S` will be printed with an embedded field named `map[string]int` because we have lost information about its alias name.\r\n\r\nThis affects debugging and test cases, e.g., `src/go/internal/gccgoimporter/importer_test.go:97` wants `""type S struct{b int; A2""` but we only have `""type S struct{b int; map[Y]Z}""`.\r\n\r\nThe relevant printing code is in `go/types/typestring.go`, function `writeType`.",Go\r\ntype E = map[string]int\r\ntype S struct {\r\n   E\r\n}\r\n
43163,"x/tools/cmd/ssadump: interpreting causes a crash### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15.5 linux/amd64\r\n</pre>\r\n\r\nI've tested both Go 1.15.5 and Go 1.14.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, in the latest major release and with x/tools commit d93e913c1a5829629e8005c31b45b96a7b143a16.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke:/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build217519519=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code in a directory named `const`:\r\n\r\n\r\n\r\nI run it with `ssadump -run .` when I'm in that directory (or alternatively `ssadump -interp=RT -run .`).\r\n\r\n### What did you expect to see?\r\n\r\nI expect it to print ""test"".\r\n\r\n### What did you see instead?\r\n\r\nIt crashes:\r\n\r\n```\r\n$ ssadump -run .\r\nRunning: _/home/ayke/tmp/const\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n```\r\n$ ssadump -interp=RT -run .\r\nRunning: _/home/ayke/tmp/const\r\nEntering _/home/ayke/tmp/const.init.\r\n.0:\r\n\t t0 = *init$guard\r\n\t if t0 goto 2 else 1\r\n.1:\r\n\t *init$guard = true:bool\r\n\t t1 = runtime.init()\r\nEntering runtime.init.\r\n[... removed excessive log messages...]\r\nEntering runtime.float64frombits at /usr/local/go/src/runtime/float.go:51:6.\r\n.0:\r\n\t t0 = new uint64 (b)\r\n\t *t0 = b\r\n\t t1 = convert unsafe.Pointer <- *uint64 (t0)\r\n\t t2 = convert *float64 <- unsafe.Pointer (t1)\r\n\t t3 = *t2\r\nLeaving runtime.float64frombits, resuming runtime.init at /usr/local/go/src/runtime/float.go:9:26.\r\nLeaving runtime.init, resuming _/home/ayke/tmp/const.init.\r\nLeaving _/home/ayke/tmp/const.init.\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x689fa6]\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/ssa/interp.load(0x767420, 0x8cf9c0, 0x0, 0x400000c000487040, 0x3)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/value.go:338 +0x1a6\r\ngolang.org/x/tools/go/ssa/interp.unop(0xc0036288a0, 0x6a6860, 0x0, 0x6a6860, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/ops.go:847 +0x739\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d43500, 0x76dd00, 0xc0036288a0, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:195 +0x745\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d43500)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42f00, 0x18600a, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42f00, 0x18600a, 0x7053c0, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42f00, 0x76c740, 0xc000a2ac80, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42f00)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42e80, 0x0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42e80, 0x0, 0x7053c0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x18, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42e80, 0x76c740, 0xc001265080, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42e80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0x0, 0x0, 0xc00153e500, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0x0, 0x0, 0x7053c0, 0xc00153e500, 0x0, 0x0, 0x0, 0xc000605bf8, 0x1f)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.Interpret(0xc001cbd620, 0x3, 0x76ad20, 0xc00018c080, 0xc0000cbdc0, 0x15, 0x0, 0x0, 0x0, 0x2)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:701 +0x5ec\r\nmain.doMain(0x0, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:170 +0x78c\r\nmain.main()\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:64 +0x26\r\n```\r\n\r\n---\r\n\r\nWhat I _really_ wanted to report was what appears to be a bug in either go/constant or x/tools/go/ssa, but I'm not sure how to reproduce this in an easy way with `ssadump` crashing on any program that I feed it.",Unfortunate|FrozenDueToAge|Tools,timothy-king,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15.5 linux/amd64\r\n</pre>\r\n\r\nI've tested both Go 1.15.5 and Go 1.14.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, in the latest major release and with x/tools commit d93e913c1a5829629e8005c31b45b96a7b143a16.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ayke/.cache/go-build""\r\nGOENV=""/home/ayke/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOINSECURE=""""\r\nGOMODCACHE=""/home/ayke/pkg/mod""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/home/ayke:/home/ayke""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/usr/local/go""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build217519519=/tmp/go-build -gno-record-gcc-switches""\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI have the following code in a directory named `const`:\r\n\r\n```go\r\npackage main\r\n\r\nimport _ ""runtime""\r\n\r\nfunc main() {\r\n\tprintln(""test"")\r\n}\r\n```\r\n\r\nI run it with `ssadump -run .` when I'm in that directory (or alternatively `ssadump -interp=RT -run .`).\r\n\r\n### What did you expect to see?\r\n\r\nI expect it to print ""test"".\r\n\r\n### What did you see instead?\r\n\r\nIt crashes:\r\n\r\n```\r\n$ ssadump -run .\r\nRunning: _/home/ayke/tmp/const\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n```\r\n\r\n```\r\n$ ssadump -interp=RT -run .\r\nRunning: _/home/ayke/tmp/const\r\nEntering _/home/ayke/tmp/const.init.\r\n.0:\r\n\t t0 = *init$guard\r\n\t if t0 goto 2 else 1\r\n.1:\r\n\t *init$guard = true:bool\r\n\t t1 = runtime.init()\r\nEntering runtime.init.\r\n[... removed excessive log messages...]\r\nEntering runtime.float64frombits at /usr/local/go/src/runtime/float.go:51:6.\r\n.0:\r\n\t t0 = new uint64 (b)\r\n\t *t0 = b\r\n\t t1 = convert unsafe.Pointer <- *uint64 (t0)\r\n\t t2 = convert *float64 <- unsafe.Pointer (t1)\r\n\t t3 = *t2\r\nLeaving runtime.float64frombits, resuming runtime.init at /usr/local/go/src/runtime/float.go:9:26.\r\nLeaving runtime.init, resuming _/home/ayke/tmp/const.init.\r\nLeaving _/home/ayke/tmp/const.init.\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x689fa6]\r\n\r\ngoroutine 1 [running]:\r\ngolang.org/x/tools/go/ssa/interp.load(0x767420, 0x8cf9c0, 0x0, 0x400000c000487040, 0x3)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/value.go:338 +0x1a6\r\ngolang.org/x/tools/go/ssa/interp.unop(0xc0036288a0, 0x6a6860, 0x0, 0x6a6860, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/ops.go:847 +0x739\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d43500, 0x76dd00, 0xc0036288a0, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:195 +0x745\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d43500)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42f00, 0x18600a, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42f00, 0x18600a, 0x7053c0, 0xc0005a92c0, 0xc004e754c0, 0x1, 0x1, 0x0, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42f00, 0x76c740, 0xc000a2ac80, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42f00)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0xc004d42e80, 0x0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0xc004d42e80, 0x0, 0x7053c0, 0xc0015fbb80, 0x0, 0x0, 0x0, 0x18, 0x80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.visitInstr(0xc004d42e80, 0x76c740, 0xc001265080, 0x4)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:202 +0x886\r\ngolang.org/x/tools/go/ssa/interp.runFrame(0xc004d42e80)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:579 +0xdc\r\ngolang.org/x/tools/go/ssa/interp.callSSA(0xc004d219d0, 0x0, 0x0, 0xc00153e500, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:524 +0x5da\r\ngolang.org/x/tools/go/ssa/interp.call(0xc004d219d0, 0x0, 0x0, 0x7053c0, 0xc00153e500, 0x0, 0x0, 0x0, 0xc000605bf8, 0x1f)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:462 +0xd5\r\ngolang.org/x/tools/go/ssa/interp.Interpret(0xc001cbd620, 0x3, 0x76ad20, 0xc00018c080, 0xc0000cbdc0, 0x15, 0x0, 0x0, 0x0, 0x2)\r\n\t/home/ayke/src/golang.org/x/tools/go/ssa/interp/interp.go:701 +0x5ec\r\nmain.doMain(0x0, 0x0)\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:170 +0x78c\r\nmain.main()\r\n\t/home/ayke/src/golang.org/x/tools/cmd/ssadump/main.go:64 +0x26\r\n```\r\n\r\n---\r\n\r\nWhat I _really_ wanted to report was what appears to be a bug in either go/constant or x/tools/go/ssa, but I'm not sure how to reproduce this in an easy way with `ssadump` crashing on any program that I feed it.","go\r\npackage main\r\n\r\nimport _ ""runtime""\r\n\r\nfunc main() {\r\n\tprintln(""test"")\r\n}\r\n"
43058,"x/tools/gopls: cannot navigate unsafe package from vscode thru gopls#### What did you do?\r\nedit below golang code in vscode with gopls used, try navigate Sizeof function to open unsafe.go\r\n\r\n\r\n#### What did you expect to see?\r\nnavigate from unsafe usage to unsafe.go in `vscode` when using gopls. if gopls is not used, vscode works to navigate on unsafe package\r\n\r\n#### What did you see instead?\r\nfail to navigate, showing ""No definition found for 'Sizeof'"", open unsafe.go in the same vscode window, will see the following problem on package line\r\n![image](https://user-images.githubusercontent.com/2386133/101446413-44dd6080-395e-11eb-9d30-2b843cde04ed.png)\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.5.5\r\n    golang.org/x/tools/gopls@v0.5.5 h1:YBLs2WCwxx6mBF98Y6/mDIpKhP4Dt4Dz2q6LnMRBpDw=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.1 h1:JFrFEBb2xKufg6XkJsJr+WbKb4FQlURi5RUcBveYu9k=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=\r\n    golang.org/x/sync@v0.0.0-20201020160332-67f06af15bc9 h1:SQFwaSi55rU7vdNs9Yr0Z324VNlrF+0wMqRXT4St8ck=\r\n    golang.org/x/tools@v0.0.0-20201204180437-c46b611624b3 h1:uxH+MECLNmX/vsPe4txyeQ1LCmhdUxf7p4hjkHexg+c=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.0.1-2020.1.6 h1:W18jzjh8mfPez+AwGLxmOImucz/IFjpNlrKVnaj2YVc=\r\n    mvdan.cc/gofumpt@v0.0.0-20200927160801-5bfeb2e70dd6 h1:z+/YqapuV7VZPvBb3GYmuEJbA88M3PFUxaHilHYVCpQ=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n```\r\n",NeedsInvestigation|gopls|Tools,adonovan,"#### What did you do?\r\nedit below golang code in vscode with gopls used, try navigate Sizeof function to open unsafe.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc main() {\r\n\taccount := 100\r\n\tfmt.Println(unsafe.Sizeof(account))\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\nnavigate from unsafe usage to unsafe.go in `vscode` when using gopls. if gopls is not used, vscode works to navigate on unsafe package\r\n\r\n#### What did you see instead?\r\nfail to navigate, showing ""No definition found for 'Sizeof'"", open unsafe.go in the same vscode window, will see the following problem on package line\r\n![image](https://user-images.githubusercontent.com/2386133/101446413-44dd6080-395e-11eb-9d30-2b843cde04ed.png)\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.5.5\r\n    golang.org/x/tools/gopls@v0.5.5 h1:YBLs2WCwxx6mBF98Y6/mDIpKhP4Dt4Dz2q6LnMRBpDw=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/google/go-cmp@v0.5.1 h1:JFrFEBb2xKufg6XkJsJr+WbKb4FQlURi5RUcBveYu9k=\r\n    github.com/sergi/go-diff@v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\r\n    golang.org/x/mod@v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=\r\n    golang.org/x/sync@v0.0.0-20201020160332-67f06af15bc9 h1:SQFwaSi55rU7vdNs9Yr0Z324VNlrF+0wMqRXT4St8ck=\r\n    golang.org/x/tools@v0.0.0-20201204180437-c46b611624b3 h1:uxH+MECLNmX/vsPe4txyeQ1LCmhdUxf7p4hjkHexg+c=\r\n    golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\n    honnef.co/go/tools@v0.0.1-2020.1.6 h1:W18jzjh8mfPez+AwGLxmOImucz/IFjpNlrKVnaj2YVc=\r\n    mvdan.cc/gofumpt@v0.0.0-20200927160801-5bfeb2e70dd6 h1:z+/YqapuV7VZPvBb3GYmuEJbA88M3PFUxaHilHYVCpQ=\r\n    mvdan.cc/xurls/v2@v2.2.0 h1:NSZPykBXJFCetGZykLAxaL6SIpvbVy/UFEniIfHAa8A=\r\n```\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\t""unsafe""\r\n)\r\n\r\nfunc main() {\r\n\taccount := 100\r\n\tfmt.Println(unsafe.Sizeof(account))\r\n}\r\n"
42563,"make.{bash,bat,rc}, cmd/dist: important note to place right go binary in PATH is not printed via make.bash### What did you do?\r\n\r\n```\r\n$ git clone https://go.googlesource.com/go $HOME/gotip\r\n$ cd $HOME/gotip/src\r\nsrc $ ./make.bash\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n*** You need to add /Users/gopher/gotip/bin to your PATH.\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n```\r\n\r\nNote the ""*** You need to add /Users/gopher/gotip/bin to your PATH."" line is missing.\r\n\r\nThat line is important because if it isn't done, and there happens to be another `go` binary in PATH (quite likely for Go developers), the wrong `go` binary will be used.\r\n\r\n### Cause\r\n\r\n`make.bash` includes these lines:\r\n\r\n```\r\n# -e doesn't propagate out of eval, so check success by hand.\r\neval $(./cmd/dist/dist env -p || echo FAIL=true)\r\nif [ ""$FAIL"" = true ]; then\r\n\texit 1\r\nfi\r\n```\r\n\r\n`dist env -p` includes a modified version of PATH in its output, which is then `eval`ed.\r\n\r\nThe banner is printed afterwards with a check for whether PATH contains GOROOT/bin:\r\n\r\n\r\n\r\nWhere `os.Getenv(""PATH"")` ends up containing `gobin`, but only because `make.bash` added it temporarily.\r\n\r\nAs far as I can tell, this same problem affected `all.bash` 8 years ago in #3699, and it was fixed in [CL 6272048](https://golang.org/cl/6272048) and [CL 6525049](https://golang.org/cl/6525049), so this is a matter of resolving this for when `make.bash` (or make.bat, make.rc) is invoked directly.",NeedsFix|DevExp,dmitshur,"### What did you do?\r\n\r\n```\r\n$ git clone https://go.googlesource.com/go $HOME/gotip\r\n$ cd $HOME/gotip/src\r\nsrc $ ./make.bash\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n*** You need to add /Users/gopher/gotip/bin to your PATH.\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nsrc $ ./make.bash\r\nBuilding Go cmd/dist using /usr/local/go. (go1.15.4 darwin/amd64)\r\nBuilding Go toolchain1 using /usr/local/go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for darwin/amd64.\r\n---\r\nInstalled Go for darwin/amd64 in /Users/gopher/gotip\r\nInstalled commands in /Users/gopher/gotip/bin\r\n```\r\n\r\nNote the ""*** You need to add /Users/gopher/gotip/bin to your PATH."" line is missing.\r\n\r\nThat line is important because if it isn't done, and there happens to be another `go` binary in PATH (quite likely for Go developers), the wrong `go` binary will be used.\r\n\r\n### Cause\r\n\r\n`make.bash` includes these lines:\r\n\r\n```\r\n# -e doesn't propagate out of eval, so check success by hand.\r\neval $(./cmd/dist/dist env -p || echo FAIL=true)\r\nif [ ""$FAIL"" = true ]; then\r\n\texit 1\r\nfi\r\n```\r\n\r\n`dist env -p` includes a modified version of PATH in its output, which is then `eval`ed.\r\n\r\nThe banner is printed afterwards with a check for whether PATH contains GOROOT/bin:\r\n\r\n```Go\r\nif !strings.Contains(pathsep+os.Getenv(""PATH"")+pathsep, pathsep+gobin+pathsep) {\r\n\txprintf(""*** You need to add %s to your PATH.\\n"", gobin)\r\n}\r\n```\r\n\r\nWhere `os.Getenv(""PATH"")` ends up containing `gobin`, but only because `make.bash` added it temporarily.\r\n\r\nAs far as I can tell, this same problem affected `all.bash` 8 years ago in #3699, and it was fixed in [CL 6272048](https://golang.org/cl/6272048) and [CL 6525049](https://golang.org/cl/6525049), so this is a matter of resolving this for when `make.bash` (or make.bat, make.rc) is invoked directly.","Go\r\nif !strings.Contains(pathsep+os.Getenv(""PATH"")+pathsep, pathsep+gobin+pathsep) {\r\n\txprintf(""*** You need to add %s to your PATH.\\n"", gobin)\r\n}\r\n"
41988,cmd/compile: not inlined closures can't inline inner closures### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\nWrote code:\r\n\r\n\r\n</details>\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`getInt` is inlined into `outer`. `outer` escapes to the heap.\r\n\r\n### What did you see instead?\r\n\r\n`getInt` isn't inlined into `outer`. Both `outer` and `getInt` escape to the heap.,Performance|NeedsInvestigation|compiler/runtime,danscales,### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What did you do?\r\n\r\nWrote code:\r\n\r\n```go\r\npackage go_closures\r\n\r\nfunc callInt(val int) int {\r\n\tgetInt := func() int { return val }\r\n\treturn callFn(getInt)\r\n}\r\n\r\nfunc callFn(getInt func() int) int {\r\n\touter := func() int { return getInt() }\r\n\treturn globalFunc(outer)\r\n}\r\n\r\nvar globalFunc = func(f func() int) int {\r\n\treturn f()\r\n}\r\n```\r\n</details>\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`getInt` is inlined into `outer`. `outer` escapes to the heap.\r\n\r\n### What did you see instead?\r\n\r\n`getInt` isn't inlined into `outer`. Both `outer` and `getInt` escape to the heap.,go\r\npackage go_closures\r\n\r\nfunc callInt(val int) int {\r\n\tgetInt := func() int { return val }\r\n\treturn callFn(getInt)\r\n}\r\n\r\nfunc callFn(getInt func() int) int {\r\n\touter := func() int { return getInt() }\r\n\treturn globalFunc(outer)\r\n}\r\n\r\nvar globalFunc = func(f func() int) int {\r\n\treturn f()\r\n}\r\n
40882,"spec: document that recursive type declarations through type parameters are not permittedHere's a type:\r\n\r\n\r\nCurrently `go2go` complains with confusing errors; the first declaration fails with `Rec is not a generic type` (it obviously is) and the equivalent `type Rec[type T Rec] interface{ r(T) }` fails with `Rec is not an interface` (it also obviously is).\r\n\r\nI assume this shouldn't be allowed: to know if `Rec[T]` is a valid type for `T` to implement, we need to know if `T` implements `Rec[T]`, which is circular.  But I can't find anything in the draft design that would prohibit it.\r\n\r\n([playground for convenience](https://go2goplay.golang.org/p/TsopGuR9oFR))",Documentation|FrozenDueToAge,griesemer,"Here's a type:\r\n```go\r\ntype Rec[type T Rec[T]] interface{ r(T) }\r\n```\r\n\r\nCurrently `go2go` complains with confusing errors; the first declaration fails with `Rec is not a generic type` (it obviously is) and the equivalent `type Rec[type T Rec] interface{ r(T) }` fails with `Rec is not an interface` (it also obviously is).\r\n\r\nI assume this shouldn't be allowed: to know if `Rec[T]` is a valid type for `T` to implement, we need to know if `T` implements `Rec[T]`, which is circular.  But I can't find anything in the draft design that would prohibit it.\r\n\r\n([playground for convenience](https://go2goplay.golang.org/p/TsopGuR9oFR))",go\r\ntype Rec[type T Rec[T]] interface{ r(T) }\r\n
39742,"go/types, types2: better error message for failing type inference### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +0a030888da Sat Jun 20 04:46:40 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\nI felt upon this while toying with `go2go`.\r\nThis is the minimal reproducible example illustrating what I think is a bug/problem.\r\n\r\n\r\nhttps://go2goplay.golang.org/p/TBApH4WbSxk\r\n\r\n### What did you expect to see?\r\n\r\nFirst, I think  `int` should not have to be provided explicitly since it can be inferred from `v`.\r\nAlso `v` does match `iterable(T)` since `iterable` is the empty constraint.",NeedsInvestigation|FrozenDueToAge,griesemer,"### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +0a030888da Sat Jun 20 04:46:40 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\nI felt upon this while toying with `go2go`.\r\nThis is the minimal reproducible example illustrating what I think is a bug/problem.\r\n\r\n```go\r\ntype (\r\n\titerable(type T)   interface{} // empty constraint\r\n\tbinaryTree(type T) struct{}\r\n)\r\n\r\nfunc forEach(type T)(t iterable(T)) {}\r\n\r\nfunc main() {\r\n\tv := binaryTree(int){}\r\n\r\n\tforEach(v) // error: type binaryTree(int) of v does not match iterable(T)\r\n\t// forEach(int)(v) // ok\r\n}\r\n```\r\nhttps://go2goplay.golang.org/p/TBApH4WbSxk\r\n\r\n### What did you expect to see?\r\n\r\nFirst, I think  `int` should not have to be provided explicitly since it can be inferred from `v`.\r\nAlso `v` does match `iterable(T)` since `iterable` is the empty constraint.",go\r\ntype (\r\n\titerable(type T)   interface{} // empty constraint\r\n\tbinaryTree(type T) struct{}\r\n)\r\n\r\nfunc forEach(type T)(t iterable(T)) {}\r\n\r\nfunc main() {\r\n\tv := binaryTree(int){}\r\n\r\n\tforEach(v) // error: type binaryTree(int) of v does not match iterable(T)\r\n\t// forEach(int)(v) // ok\r\n}\r\n
38931,"runtime: preemption in startTemplateThread may cause infinite hangSummary:\r\n\r\nIf a call to `startTemplateThread` is preempted by a gcstop before creating the new thread, then newmHandoff looks initialized even though it is not. When other locked Ms stop they may handoff their (now _Pidle) P to a new M. Creation of that new M will never occur because the template thread is not running, and stopTheWorldWithSema will hang forever waiting for the P to enter _Pgcstop.\r\n\r\nDetails:\r\n\r\nWhen a locked M wants to start a new M, it hands off to the template thread to actually call clone and start the thread. The template thread is lazily created the first time a thread is locked (or if cgo is in use).\r\n\r\nstoplockedm will release the P (_Pidle), then call handoffp to give the P to another M. In the case of a pending STW, one of two things can happen:\r\n\r\n1. handoffp starts an M, which does acquirep followed by schedule, which will finally enter _Pgcstop.\r\n\r\n2. handoffp immediately enters _Pgcstop. This only occurs if the P has no local work, GC work, and no spinning M is required.\r\n\r\nIf handoffp starts an M, and must create a new M to do so, then newm simply queue the M on newmHandoff for the template thread to do the clone.\r\n\r\nIf the template thread was never fully created because startTemplateThread is stopped, then that thread will never get created, and the handoff P will never enter _Pgcstop.\r\n\r\nTo visualize, consider two threads running when a STW occurs:\r\n\r\n```\r\n  T1                                        T2\r\n--------------------------------         -----------------------------\r\n\r\nLockOSThread                             LockOSThread\r\n  haveTemplateThread == 0\r\n  startTemplateThread\r\n    haveTemplateThread = 1\r\n    newm                                   haveTemplateThread == 1\r\n      preempt -> schedule                  g.m.lockedExt++\r\n        gcstopm -> _Pgcstop                g.m.lockedg = ...\r\n        park                               g.lockedm = ...\r\n                                           return\r\n\r\n                                        ... (any code)\r\n                                          preempt -> schedule\r\n                                            stoplockedm\r\n                                              releasep -> _Pidle\r\n                                              handoffp\r\n                                                startm (one of first three handoffp cases)\r\n                                                 newm\r\n                                                   g.m.lockedExt != 0\r\n                                                   Add to newmHandoff, return\r\n                                              park\r\n```\r\n\r\nNote that T2's P is sitting in _Pidle. It expects the template thread to clone the new M, which would then acquirep, schedule, and gcstopm. Since the template thread doesn't exist yet, this never happens, and stopTheWorldWithSema waits forever for the last P to enter stop.\r\n\r\nI believe the best fix for this is to disable preemption in startTemplateThread (acquirem) so we can guarantee that the template thread will eventually exist after haveTemplateThread = 1.\r\n\r\nI've reproduced this issue with an internal program, and the suggested acquirem fixes that case. This should be reproducible with something like the below program, but I haven't quite managed to get that to trigger the bug:\r\n\r\n\r\n\r\ncc @aclements ",NeedsFix|FrozenDueToAge,prattmic,"Summary:\r\n\r\nIf a call to `startTemplateThread` is preempted by a gcstop before creating the new thread, then newmHandoff looks initialized even though it is not. When other locked Ms stop they may handoff their (now _Pidle) P to a new M. Creation of that new M will never occur because the template thread is not running, and stopTheWorldWithSema will hang forever waiting for the P to enter _Pgcstop.\r\n\r\nDetails:\r\n\r\nWhen a locked M wants to start a new M, it hands off to the template thread to actually call clone and start the thread. The template thread is lazily created the first time a thread is locked (or if cgo is in use).\r\n\r\nstoplockedm will release the P (_Pidle), then call handoffp to give the P to another M. In the case of a pending STW, one of two things can happen:\r\n\r\n1. handoffp starts an M, which does acquirep followed by schedule, which will finally enter _Pgcstop.\r\n\r\n2. handoffp immediately enters _Pgcstop. This only occurs if the P has no local work, GC work, and no spinning M is required.\r\n\r\nIf handoffp starts an M, and must create a new M to do so, then newm simply queue the M on newmHandoff for the template thread to do the clone.\r\n\r\nIf the template thread was never fully created because startTemplateThread is stopped, then that thread will never get created, and the handoff P will never enter _Pgcstop.\r\n\r\nTo visualize, consider two threads running when a STW occurs:\r\n\r\n```\r\n  T1                                        T2\r\n--------------------------------         -----------------------------\r\n\r\nLockOSThread                             LockOSThread\r\n  haveTemplateThread == 0\r\n  startTemplateThread\r\n    haveTemplateThread = 1\r\n    newm                                   haveTemplateThread == 1\r\n      preempt -> schedule                  g.m.lockedExt++\r\n        gcstopm -> _Pgcstop                g.m.lockedg = ...\r\n        park                               g.lockedm = ...\r\n                                           return\r\n\r\n                                        ... (any code)\r\n                                          preempt -> schedule\r\n                                            stoplockedm\r\n                                              releasep -> _Pidle\r\n                                              handoffp\r\n                                                startm (one of first three handoffp cases)\r\n                                                 newm\r\n                                                   g.m.lockedExt != 0\r\n                                                   Add to newmHandoff, return\r\n                                              park\r\n```\r\n\r\nNote that T2's P is sitting in _Pidle. It expects the template thread to clone the new M, which would then acquirep, schedule, and gcstopm. Since the template thread doesn't exist yet, this never happens, and stopTheWorldWithSema waits forever for the last P to enter stop.\r\n\r\nI believe the best fix for this is to disable preemption in startTemplateThread (acquirem) so we can guarantee that the template thread will eventually exist after haveTemplateThread = 1.\r\n\r\nI've reproduced this issue with an internal program, and the suggested acquirem fixes that case. This should be reproducible with something like the below program, but I haven't quite managed to get that to trigger the bug:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n        ""runtime""\r\n        ""sync""\r\n        ""time""\r\n)\r\n\r\n//go:noinline\r\nfunc work() int {\r\n        // Do something complicated on the stack so this function gets a morestack call.\r\n\r\n        var arr [10000]int\r\n        for i := 0; i < 10000; i++ {\r\n                arr[i] = i\r\n        }\r\n\r\n        var sum int\r\n        for i := 0; i < 10000; i++ {\r\n                sum += arr[i]\r\n        }\r\n\r\n        return sum\r\n}\r\n\r\nfunc main() {\r\n        // Try to synchronize STW and LockOSThreads.\r\n        start := time.Now().Add(50*time.Millisecond)\r\n\r\n        go func() {\r\n                // The goroutines below are a bit slower. Add a fudge factor.\r\n                for time.Now().Before(start.Add(10*time.Microsecond)) {\r\n                }\r\n\r\n                // Stop the world.\r\n                var m runtime.MemStats\r\n                runtime.ReadMemStats(&m)\r\n        }()\r\n\r\n        var wg sync.WaitGroup\r\n        wg.Add(2)\r\n\r\n        for i := 0; i < 2; i++ {\r\n                go func() {\r\n                        for time.Now().Before(start) {\r\n                        }\r\n\r\n                        // Add work to the local runq to trigger early startm\r\n                        // in handoffp.\r\n                        go func(){}()\r\n\r\n                        runtime.LockOSThread()\r\n                        work()  // add a preemption point.\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n        // If both LockOSThreads completed then we did not hit the race.\r\n}\r\n```\r\n\r\ncc @aclements ","go\r\npackage main\r\n\r\nimport (\r\n        ""runtime""\r\n        ""sync""\r\n        ""time""\r\n)\r\n\r\n//go:noinline\r\nfunc work() int {\r\n        // Do something complicated on the stack so this function gets a morestack call.\r\n\r\n        var arr [10000]int\r\n        for i := 0; i < 10000; i++ {\r\n                arr[i] = i\r\n        }\r\n\r\n        var sum int\r\n        for i := 0; i < 10000; i++ {\r\n                sum += arr[i]\r\n        }\r\n\r\n        return sum\r\n}\r\n\r\nfunc main() {\r\n        // Try to synchronize STW and LockOSThreads.\r\n        start := time.Now().Add(50*time.Millisecond)\r\n\r\n        go func() {\r\n                // The goroutines below are a bit slower. Add a fudge factor.\r\n                for time.Now().Before(start.Add(10*time.Microsecond)) {\r\n                }\r\n\r\n                // Stop the world.\r\n                var m runtime.MemStats\r\n                runtime.ReadMemStats(&m)\r\n        }()\r\n\r\n        var wg sync.WaitGroup\r\n        wg.Add(2)\r\n\r\n        for i := 0; i < 2; i++ {\r\n                go func() {\r\n                        for time.Now().Before(start) {\r\n                        }\r\n\r\n                        // Add work to the local runq to trigger early startm\r\n                        // in handoffp.\r\n                        go func(){}()\r\n\r\n                        runtime.LockOSThread()\r\n                        work()  // add a preemption point.\r\n                        wg.Done()\r\n                }()\r\n        }\r\n\r\n        wg.Wait()\r\n        // If both LockOSThreads completed then we did not hit the race.\r\n}\r\n"
38571,"cmd/go: 'go mod vendor' does not fail on case-insensitive import collision### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.14.2 linux/amd64\r\n</pre>\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n### What did you do?\r\nDuring the investigation of #38342, I discovered the following ux quirk:\r\n\r\nOn a case insensitive filesystem: (I am using `vfat`)\r\n\r\n```sh\r\ngo mod vendor\r\n```\r\n### What did you expect to see?\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```\r\n\r\n### What did you see instead?\r\n`go mod vendor` succeeds, but `go build` fails, and one must flush `vendor` to fix things:\r\n```sh\r\ngo build\r\n```\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```",Vendoring|modules|FixPending,samthanawalla,"### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.14.2 linux/amd64\r\n</pre>\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n### What did you do?\r\nDuring the investigation of #38342, I discovered the following ux quirk:\r\n\r\nOn a case insensitive filesystem: (I am using `vfat`)\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t_ ""example.com/Foo""\r\n\t_ ""example.com/foo""\r\n)\r\n\r\nfunc main() {}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.14\r\n\r\nrequire (\r\n\texample.com/foo v0.1.0\r\n\texample.com/Foo v0.1.0\r\n)\r\n\r\nreplace (\r\n\texample.com/foo => ./foo\r\n\texample.com/Foo => ./!foo\r\n)\r\n-- foo/go.mod --\r\nmodule example.com/foo\r\n-- foo/foo.go --\r\npackage foo\r\n-- !foo/go.mod --\r\nmodule example.com/Foo\r\n-- !foo/foo.go --\r\npackage Foo\r\n```\r\n```sh\r\ngo mod vendor\r\n```\r\n### What did you expect to see?\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```\r\n\r\n### What did you see instead?\r\n`go mod vendor` succeeds, but `go build` fails, and one must flush `vendor` to fix things:\r\n```sh\r\ngo build\r\n```\r\n```\r\nmain.go:5:2: case-insensitive import collision: ""example.com/foo"" and ""example.com/FOO""\r\n```","go\r\npackage main\r\n\r\nimport (\r\n\t_ ""example.com/Foo""\r\n\t_ ""example.com/foo""\r\n)\r\n\r\nfunc main() {}\r\n-- go.mod --\r\nmodule play.ground\r\n\r\ngo 1.14\r\n\r\nrequire (\r\n\texample.com/foo v0.1.0\r\n\texample.com/Foo v0.1.0\r\n)\r\n\r\nreplace (\r\n\texample.com/foo => ./foo\r\n\texample.com/Foo => ./!foo\r\n)\r\n-- foo/go.mod --\r\nmodule example.com/foo\r\n-- foo/foo.go --\r\npackage foo\r\n-- !foo/go.mod --\r\nmodule example.com/Foo\r\n-- !foo/foo.go --\r\npackage Foo\r\n"
36819,"net/http: graceful shutdown race condition<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n**Update**: I have found a super trivial way to reproduce it, see the step at the very bottom\r\n\r\nPreamble: I think it's relevant to https://github.com/golang/go/issues/23829\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go _version_\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ivan/.cache/go-build""\r\nGOENV=""/home/ivan/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/srv/work/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ivan/.local/share/umake/go/go-lang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ivan/.local/share/umake/go/go-lang/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build903857222=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\nWith the following code it's possible to get a case when the _new_ connection in accepted, then closed within milliseconds, which makes the shutdown not graceful\r\n\r\n\r\n### What did you expect to see?\r\nA graceful shutdown\r\n\r\n\r\n### What did you see instead?\r\n![Screenshot from 2020-01-28 11-29-15](https://user-images.githubusercontent.com/302295/73224371-29e28180-41ce-11ea-9478-f8a0063f98a5.png)\r\n\r\n![Screenshot from 2020-01-28 13-04-16](https://user-images.githubusercontent.com/302295/73224546-b2f9b880-41ce-11ea-8209-a03b0e1e2692.png)\r\n\r\nHow to reproduce:\r\n\r\nJust `ab -t 20 -c 5 -A foo:foo http://localhost:8080/` is enough to capture the case. The former is much more rare, the latter is quite frequent.\r\n\r\nWhat you can see on screenshots: the connection is accepted, then as per https://go-review.googlesource.com/c/go/+/121419/ it should be treated as ""new"" (but it's not due to race), and is closed.\r\nIn first case the client had chance to send a request.\r\nIn second - it was closed even before that.\r\n\r\nIn both cases it happens with the `Connection reset by peer` on the client side, which should never be the case with non-keepalived connections and graceful termination.\r\n\r\nBoth pcap files are available at: https://www.dropbox.com/s/2co7wkucfey90zz/bug.tgz?dl=0\r\n\r\nMy assumption on why it's the race and how it happens:\r\n\r\n1. the connection is accepted with `rw, e := l.Accept()` successfully\r\n2. A moment later a shutdown request is made\r\n3. Before the `c.setState(c.rwc, StateNew)` statement is reached the server completes shutdown\r\n4. Because the connection is not tracked - `http.Server` is not aware of it\r\n5. The process quits, network sockets are closed by kernel\r\n\r\n**UPDATE**:\r\n\r\nIt can be easier reproducible by adding `time.Sleep(3 * time.Second)` right before `c := srv.newConn(rw)`\r\n\r\nSteps:\r\n\r\n1. Patch the `http/server.go` with `time.Sleep(3 * time.Second)` before `c := srv.newConn(rw)`\r\n2. Start the app\r\n3. Make a request\r\n4. Send ctrl-c\r\n\r\nExpected: the request should complete\r\nActual:\r\n\r\n```\r\n\u279c curl -v --user foo:foo http://localhost:8080\r\n* Rebuilt URL to: http://localhost:8080/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n* Server auth using Basic with user 'foo'\r\n> GET / HTTP/1.1\r\n> Host: localhost:8080\r\n> Authorization: Basic Zm9vOmZvbw==\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> \r\n* Recv failure: Connection reset by peer\r\n* stopped the pause stream!\r\n* Closing connection 0\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAnd a corresponding pcap: https://www.dropbox.com/s/5vsvwoow4ydcs3f/with-timeout.tgz?dl=0\r\n\r\nAnd a corresponding wireshark screenshot:\r\n\r\n![Screenshot from 2020-01-28 14-02-22](https://user-images.githubusercontent.com/302295/73226992-dfb1ce00-41d6-11ea-961f-f752ad1da55f.png)\r\n",NeedsInvestigation|FrozenDueToAge,odeke-em,"<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n**Update**: I have found a super trivial way to reproduce it, see the step at the very bottom\r\n\r\nPreamble: I think it's relevant to https://github.com/golang/go/issues/23829\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go _version_\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=""""\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/home/ivan/.cache/go-build""\r\nGOENV=""/home/ivan/.config/go/env""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGONOPROXY=""""\r\nGONOSUMDB=""""\r\nGOOS=""linux""\r\nGOPATH=""/srv/work/go""\r\nGOPRIVATE=""""\r\nGOPROXY=""https://proxy.golang.org,direct""\r\nGOROOT=""/home/ivan/.local/share/umake/go/go-lang""\r\nGOSUMDB=""sum.golang.org""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/home/ivan/.local/share/umake/go/go-lang/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nAR=""ar""\r\nCC=""gcc""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build903857222=/tmp/go-build -gno-record-gcc-switches""\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""net/http""\r\n\t""os""\r\n\t""os/signal""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tsig := make(chan os.Signal, 1)\r\n\tsignal.Notify(sig, syscall.SIGTERM, os.Interrupt)\r\n\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    "":8080"",\r\n\t\tHandler: mux,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(srv.ListenAndServe())\r\n\t}()\r\n\r\n\t<-sig\r\n\tfmt.Println(srv.Shutdown(context.Background()))\r\n}\r\n```\r\n\r\nWith the following code it's possible to get a case when the _new_ connection in accepted, then closed within milliseconds, which makes the shutdown not graceful\r\n\r\n\r\n### What did you expect to see?\r\nA graceful shutdown\r\n\r\n\r\n### What did you see instead?\r\n![Screenshot from 2020-01-28 11-29-15](https://user-images.githubusercontent.com/302295/73224371-29e28180-41ce-11ea-9478-f8a0063f98a5.png)\r\n\r\n![Screenshot from 2020-01-28 13-04-16](https://user-images.githubusercontent.com/302295/73224546-b2f9b880-41ce-11ea-8209-a03b0e1e2692.png)\r\n\r\nHow to reproduce:\r\n\r\nJust `ab -t 20 -c 5 -A foo:foo http://localhost:8080/` is enough to capture the case. The former is much more rare, the latter is quite frequent.\r\n\r\nWhat you can see on screenshots: the connection is accepted, then as per https://go-review.googlesource.com/c/go/+/121419/ it should be treated as ""new"" (but it's not due to race), and is closed.\r\nIn first case the client had chance to send a request.\r\nIn second - it was closed even before that.\r\n\r\nIn both cases it happens with the `Connection reset by peer` on the client side, which should never be the case with non-keepalived connections and graceful termination.\r\n\r\nBoth pcap files are available at: https://www.dropbox.com/s/2co7wkucfey90zz/bug.tgz?dl=0\r\n\r\nMy assumption on why it's the race and how it happens:\r\n\r\n1. the connection is accepted with `rw, e := l.Accept()` successfully\r\n2. A moment later a shutdown request is made\r\n3. Before the `c.setState(c.rwc, StateNew)` statement is reached the server completes shutdown\r\n4. Because the connection is not tracked - `http.Server` is not aware of it\r\n5. The process quits, network sockets are closed by kernel\r\n\r\n**UPDATE**:\r\n\r\nIt can be easier reproducible by adding `time.Sleep(3 * time.Second)` right before `c := srv.newConn(rw)`\r\n\r\nSteps:\r\n\r\n1. Patch the `http/server.go` with `time.Sleep(3 * time.Second)` before `c := srv.newConn(rw)`\r\n2. Start the app\r\n3. Make a request\r\n4. Send ctrl-c\r\n\r\nExpected: the request should complete\r\nActual:\r\n\r\n```\r\n\u279c curl -v --user foo:foo http://localhost:8080\r\n* Rebuilt URL to: http://localhost:8080/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n* Server auth using Basic with user 'foo'\r\n> GET / HTTP/1.1\r\n> Host: localhost:8080\r\n> Authorization: Basic Zm9vOmZvbw==\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> \r\n* Recv failure: Connection reset by peer\r\n* stopped the pause stream!\r\n* Closing connection 0\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAnd a corresponding pcap: https://www.dropbox.com/s/5vsvwoow4ydcs3f/with-timeout.tgz?dl=0\r\n\r\nAnd a corresponding wireshark screenshot:\r\n\r\n![Screenshot from 2020-01-28 14-02-22](https://user-images.githubusercontent.com/302295/73226992-dfb1ce00-41d6-11ea-961f-f752ad1da55f.png)\r\n","go\r\npackage main\r\n\r\nimport (\r\n\t""context""\r\n\t""fmt""\r\n\t""net/http""\r\n\t""os""\r\n\t""os/signal""\r\n\t""syscall""\r\n)\r\n\r\nfunc main() {\r\n\tsig := make(chan os.Signal, 1)\r\n\tsignal.Notify(sig, syscall.SIGTERM, os.Interrupt)\r\n\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    "":8080"",\r\n\t\tHandler: mux,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(srv.ListenAndServe())\r\n\t}()\r\n\r\n\t<-sig\r\n\tfmt.Println(srv.Shutdown(context.Background()))\r\n}\r\n"
34806,"x/tools/go/packages: IgnoreFuncBodies implementation and comment mismatchhttps://github.com/golang/tools/blob/567d1c21dc5f922038933aa862c0719a9768eb83/go/packages/packages.go#L827-L830\r\n\r\n\r\nThe comment and the given example is self-contradictory. The implementation is actually `type-check bodies of functions only in initial packages`.\r\n\r\n---\r\n\r\nFor my use case, I would appreciate if `IgnoreFuncBodies` could be somehow controlled by `packages.Config`.\r\n\r\nI have a script (invoked by `go generate`) parsing source code, harvesting struct definition and generating serialization-related code for those structs. Due to lack of serialization-related code, the type-checking for function bodies always fail because those structs does not implement my serialization interface yet.\r\n\r\nI don't have any assertions like `var _ MySerializationInterface = MyStruct{}`. So as long as I can turn `IgnoreFuncBodies` on, everything works for me.",NeedsInvestigation|FrozenDueToAge|Tools,adonovan,"https://github.com/golang/tools/blob/567d1c21dc5f922038933aa862c0719a9768eb83/go/packages/packages.go#L827-L830\r\n```go\r\n// Type-check bodies of functions only in non-initial packages.\r\n// Example: for import graph A->B->C and initial packages {A,C},\r\n// we can ignore function bodies in B.\r\nIgnoreFuncBodies: ld.Mode&NeedDeps == 0 && !lpkg.initial,\r\n```\r\n\r\nThe comment and the given example is self-contradictory. The implementation is actually `type-check bodies of functions only in initial packages`.\r\n\r\n---\r\n\r\nFor my use case, I would appreciate if `IgnoreFuncBodies` could be somehow controlled by `packages.Config`.\r\n\r\nI have a script (invoked by `go generate`) parsing source code, harvesting struct definition and generating serialization-related code for those structs. Due to lack of serialization-related code, the type-checking for function bodies always fail because those structs does not implement my serialization interface yet.\r\n\r\nI don't have any assertions like `var _ MySerializationInterface = MyStruct{}`. So as long as I can turn `IgnoreFuncBodies` on, everything works for me.","go\r\n// Type-check bodies of functions only in non-initial packages.\r\n// Example: for import graph A->B->C and initial packages {A,C},\r\n// we can ignore function bodies in B.\r\nIgnoreFuncBodies: ld.Mode&NeedDeps == 0 && !lpkg.initial,\r\n"
31897,"x/tools/go/analysis: provide driver for running analysis programmaticallyCurrently there is no driver suitable for running analyzers from a go test (or from code, in general). The multichecker and singlechecker drivers are meant for cli tools and call os.Exit(), so they cannot be used.\r\n\r\nWe want to be able to run analysis from a go test rather than a separate binary. It is easier to integrate into our CI system if is a normal test.\r\n\r\nMy first thought was something that looks like this:\r\n\r\n\r\nReturning Diagnostic is not quite right though since the user doesn't have the FileSet to translate the diagnostics' token.Pos. I also assume something would have to be done for passing analyzer flags programatically.\r\n\r\n/cc @ianthehat since you responded briefly in Slack regarding this feature request",NeedsInvestigation|Tools|Analysis,adonovan,"Currently there is no driver suitable for running analyzers from a go test (or from code, in general). The multichecker and singlechecker drivers are meant for cli tools and call os.Exit(), so they cannot be used.\r\n\r\nWe want to be able to run analysis from a go test rather than a separate binary. It is easier to integrate into our CI system if is a normal test.\r\n\r\nMy first thought was something that looks like this:\r\n```go\r\nfunc Run(args []string, analyzers []*analysis.Analyzer) ([]analysis.Diagnostic, error)\r\n```\r\n\r\nReturning Diagnostic is not quite right though since the user doesn't have the FileSet to translate the diagnostics' token.Pos. I also assume something would have to be done for passing analyzer flags programatically.\r\n\r\n/cc @ianthehat since you responded briefly in Slack regarding this feature request","go\r\nfunc Run(args []string, analyzers []*analysis.Analyzer) ([]analysis.Diagnostic, error)\r\n"
29785,"cmd/compile: eliminate memory allocation for non-int n in slice extension idiomThe slice extension idiom from #21266 doesn't work in go tip for non-int `n` in `append(a, make([]T, n)...)`:\r\n\r\n\r\n\r\nBenchmark results:\r\n```\r\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\r\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\r\n```\r\n\r\nAs you can see, if `n` has a type other than `int`, go doesn't remove the allocation.",Performance|NeedsFix|compiler/runtime,martisch,"The slice extension idiom from #21266 doesn't work in go tip for non-int `n` in `append(a, make([]T, n)...)`:\r\n\r\n```go\r\nfunc BenchmarkExtendInt(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := int(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n\r\nfunc BenchmarkExtendUint64(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := uint64(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n```\r\n\r\nBenchmark results:\r\n```\r\nBenchmarkExtendInt-4      \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\r\nBenchmarkExtendUint64-4   \t 1000000\t      1576 ns/op\t   13568 B/op\t       1 allocs/op\r\n```\r\n\r\nAs you can see, if `n` has a type other than `int`, go doesn't remove the allocation.","go\r\nfunc BenchmarkExtendInt(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := int(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n\r\nfunc BenchmarkExtendUint64(b *testing.B) {\r\n        var buf []byte\r\n        b.ReportAllocs()\r\n        n := uint64(12345)\r\n        for i := 0; i < b.N; i++ {\r\n                buf = append(buf[:0], make([]byte, n)...)\r\n        }\r\n}\r\n"
29037,"x/build/cmd/gomote: configure instance by an environment variableI've been doing a fair amount of `gomote`-based debugging for the `cmd/go` file-locking changes, and wrote the following script to improve the ergonomics of gomote commands:\r\n\r\n`~/bin/mote`:\r\n\r\n\r\nThat allows me to eliminate stutter in `gomote` commands and still keep them repeatable.\r\nInstead of:\r\n\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ gomote push $GOMOTE && gomote run $GOMOTE go/src/make.bash\r\n$ gomote run $GOMOTE go/bin/go test -short cmd/go\r\n```\r\n\r\nI can run:\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ mote push && mote run go/src/make.bash\r\n$ mote run go/bin/go test -short cmd/go\r\n```\r\n\r\nHowever, there is no fundamental reason why this should be a separate bash script.\r\n@bradfitz, @dmitshur, @aclements: what do you think of pulling this into `gomote` proper?",Builders|FeatureRequest,mknyszek,"I've been doing a fair amount of `gomote`-based debugging for the `cmd/go` file-locking changes, and wrote the following script to improve the ergonomics of gomote commands:\r\n\r\n`~/bin/mote`:\r\n```bash\r\n#!/bin/sh\r\n\r\nSUBCMD=$1\r\nshift\r\ngomote ""${SUBCMD}"" ""${GOMOTE}"" ""$@""\r\n```\r\n\r\nThat allows me to eliminate stutter in `gomote` commands and still keep them repeatable.\r\nInstead of:\r\n\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ gomote push $GOMOTE && gomote run $GOMOTE go/src/make.bash\r\n$ gomote run $GOMOTE go/bin/go test -short cmd/go\r\n```\r\n\r\nI can run:\r\n```\r\n$ export GOMOTE=$(gomote create darwin-amd64-10_12)\r\n$ mote push && mote run go/src/make.bash\r\n$ mote run go/bin/go test -short cmd/go\r\n```\r\n\r\nHowever, there is no fundamental reason why this should be a separate bash script.\r\n@bradfitz, @dmitshur, @aclements: what do you think of pulling this into `gomote` proper?","bash\r\n#!/bin/sh\r\n\r\nSUBCMD=$1\r\nshift\r\ngomote ""${SUBCMD}"" ""${GOMOTE}"" ""$@""\r\n"
28089,"go/ast: add func IsGenerated(*File) boolGiven that #13560 has been accepted, resolved, and by now, widely accepted by the Go community, I think it can be helpful to have a Go parser for it that tools written in Go could use (if desired).\r\n\r\nIt's relatively easy to write an ad hoc parser using the `regexp` package, but it's also possible to write a more specialized one that has less overhead.\r\n\r\nI already wrote one a while ago, and it currently lives at [`github.com/shurcooL/go/generated`](https://godoc.org/github.com/shurcooL/go/generated).\r\n\r\nI want to move it out of the repository it's currently in, which contains [many miscellaneous Go packages](https://github.com/shurcooL/go#directories) of lower utility and quality. I was originally planning to move it out into a standalone repository on my personal site, but then I thought it might be a good fit under `x/tools` subrepo, specifically, in the [`x/tools/go` directory](https://godoc.org/golang.org/x/tools/go), since it deals with Go code. The proposed import path would be:\r\n\r\n\r\n\r\nHence this proposal. If accepted, I'm happy to maintain it/be the owner. The scope is very narrow, so it should be very low volume of work.\r\n\r\nNot sure how this intersects with #17244.\r\n\r\nIf not accepted, I would likely move it here instead:\r\n\r\n\r\n\r\n(The code is currently MIT licensed, but in either case, I'd relicense it under the [Go license](https://golang.org/LICENSE).)\r\n\r\n/cc @andybons @bradfitz @alandonovan @matloob @ianthehat",Proposal|Proposal-Accepted|NeedsFix|Proposal-FinalCommentPeriod,adonovan,"Given that #13560 has been accepted, resolved, and by now, widely accepted by the Go community, I think it can be helpful to have a Go parser for it that tools written in Go could use (if desired).\r\n\r\nIt's relatively easy to write an ad hoc parser using the `regexp` package, but it's also possible to write a more specialized one that has less overhead.\r\n\r\nI already wrote one a while ago, and it currently lives at [`github.com/shurcooL/go/generated`](https://godoc.org/github.com/shurcooL/go/generated).\r\n\r\nI want to move it out of the repository it's currently in, which contains [many miscellaneous Go packages](https://github.com/shurcooL/go#directories) of lower utility and quality. I was originally planning to move it out into a standalone repository on my personal site, but then I thought it might be a good fit under `x/tools` subrepo, specifically, in the [`x/tools/go` directory](https://godoc.org/golang.org/x/tools/go), since it deals with Go code. The proposed import path would be:\r\n\r\n```Go\r\nimport ""golang.org/x/tools/go/generated""\r\n```\r\n\r\nHence this proposal. If accepted, I'm happy to maintain it/be the owner. The scope is very narrow, so it should be very low volume of work.\r\n\r\nNot sure how this intersects with #17244.\r\n\r\nIf not accepted, I would likely move it here instead:\r\n\r\n```Go\r\nimport ""dmitri.shuralyov.com/go/generated""\r\n```\r\n\r\n(The code is currently MIT licensed, but in either case, I'd relicense it under the [Go license](https://golang.org/LICENSE).)\r\n\r\n/cc @andybons @bradfitz @alandonovan @matloob @ianthehat","Go\r\nimport ""golang.org/x/tools/go/generated""\r\n"
27631,"x/build/internal/gophers: improve internal package design## Problem\r\n\r\n> _Total mess, but a functional mess, and a starting point for the future._\r\n> \u2014 Commit [`891b12dc`](https://github.com/golang/build/commit/891b12dcbdd4ee448d573a78681b2e785daa71ca)\r\n\r\nThe `gophers` package is currently hard to use and hard to modify. It's not easy to read its [documentation](https://godoc.org/golang.org/x/build/internal/gophers) and start using it:\r\n\r\n\r\n\r\nI've used and modified it multiple times, and each time, I had to read its internal code to figure out:\r\n\r\n- what kind of value can ""id"" be?\r\n- what is its exact format?\r\n    - is leading '@' required for GH usernames? optional? unneeded?\r\n- is it case sensitive or not?\r\n- in what order/what type of information to add to the `addPerson(...)` lines?\r\n\r\nDespite being an internal package, `gophers` is an important package providing value to 4 other packages, and potentially becoming used in more places. It's no longer just for computing stats, but also for tracking package owners and assigning reviews. Being internal means we can change it easily (even break the API if needed) if we come to agreement on an improved design.\r\n\r\n## Proposed Solution\r\n\r\nI think it can be made easier to use by:\r\n\r\n-\tdocumenting it (so its [godoc](https://godoc.org/golang.org/x/build/internal/gophers) is all you need to use it, no need to read code)\r\n\r\n\tFor example:\r\n\r\n\t\r\n\r\n\t@bradfitz If you prefer not to be used as an example, let me know, and we can use someone else (I'm happy to volunteer) or use a generic name. But I think a well known real user makes for a better example.\r\n\r\nMade easier to modify by:\r\n\r\n-\tmaking its internal `addPerson` logic more explicit rather than implicit\r\n\r\n\tFor example, instead of what we have now:\r\n\r\n\t\r\n\r\n\tIt could be something more explicit, along the lines of:\r\n\r\n\t\r\n\r\n\tThe intention is to make it easy for people to manually add and modify their entries, with predictable results, while still being able to to use code generation (ala `gopherstats -mode=find-gerrit-gophers`) to add missing entries.\r\n\r\nThis is just a quick draft proposal, not necessarily the final API design. If the general direction is well received but there are concerns or improvement suggestions, I'm happy to flesh it out and incorporate feedback. I wouldn't send a CL until I have a solid design.\r\n\r\n/cc @bradfitz @andybons",Documentation|Builders|NeedsFix,dmitshur,"## Problem\r\n\r\n> _Total mess, but a functional mess, and a starting point for the future._\r\n> \u2014 Commit [`891b12dc`](https://github.com/golang/build/commit/891b12dcbdd4ee448d573a78681b2e785daa71ca)\r\n\r\nThe `gophers` package is currently hard to use and hard to modify. It's not easy to read its [documentation](https://godoc.org/golang.org/x/build/internal/gophers) and start using it:\r\n\r\n```Go\r\n// (no documentation)\r\nfunc GetPerson(id string) *Person\r\n```\r\n\r\nI've used and modified it multiple times, and each time, I had to read its internal code to figure out:\r\n\r\n- what kind of value can ""id"" be?\r\n- what is its exact format?\r\n    - is leading '@' required for GH usernames? optional? unneeded?\r\n- is it case sensitive or not?\r\n- in what order/what type of information to add to the `addPerson(...)` lines?\r\n\r\nDespite being an internal package, `gophers` is an important package providing value to 4 other packages, and potentially becoming used in more places. It's no longer just for computing stats, but also for tracking package owners and assigning reviews. Being internal means we can change it easily (even break the API if needed) if we come to agreement on an improved design.\r\n\r\n## Proposed Solution\r\n\r\nI think it can be made easier to use by:\r\n\r\n-\tdocumenting it (so its [godoc](https://godoc.org/golang.org/x/build/internal/gophers) is all you need to use it, no need to read code)\r\n\r\n\tFor example:\r\n\r\n\t```Go\r\n\t// GetPerson looks up a person by id and returns one if found, or nil otherwise.\r\n\t//\r\n\t// The id is case insensitive, and may be one of:\r\n\t// \t- full name (""Brad Fitzpatrick"")\r\n\t// \t- GitHub username (""@bradfitz"")\r\n\t// \t- Gerrit <account ID>@<instance ID> (""5065@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\t// \t- email (""bradfitz@golang.org"")\r\n\tfunc GetPerson(id string) *Person\r\n\t```\r\n\r\n\t@bradfitz If you prefer not to be used as an example, let me know, and we can use someone else (I'm happy to volunteer) or use a generic name. But I think a well known real user makes for a better example.\r\n\r\nMade easier to modify by:\r\n\r\n-\tmaking its internal `addPerson` logic more explicit rather than implicit\r\n\r\n\tFor example, instead of what we have now:\r\n\r\n\t```Go\r\n\taddPerson(""Filippo Valsorda"", """", ""6195@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@cloudflare.com"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@golang.org"", ""11715@62eb7196-b449-3ce5-99f1-c037f21e1705"")\r\n\taddPerson(""Filippo Valsorda"", ""filippo@golang.org"", ""hi@filippo.io"", ""@FiloSottile"")\r\n\r\n\t// what kind of changes should be done to modify the end result Person struct?\r\n\t```\r\n\r\n\tIt could be something more explicit, along the lines of:\r\n\r\n\t```Go\r\n\tadd(Person{\r\n\t\tName:      ""Filippo Valsorda"",\r\n\t\tGitHub:    ""FiloSottile"",\r\n\t\tGerrit:    ""filippo@golang.org"",\r\n\t\tGerritIDs: []int{6195, 11715}, // Gerrit account IDs.\r\n\t\tGitEmails: []string{\r\n\t\t\t""filippo@golang.org"",\r\n\t\t\t""filippo@cloudflare.com"",\r\n\t\t\t""hi@filippo.io"",\r\n\t\t},\r\n\t\tgomote: ""valsorda"", // Gomote user.\r\n\t})\r\n\t```\r\n\r\n\tThe intention is to make it easy for people to manually add and modify their entries, with predictable results, while still being able to to use code generation (ala `gopherstats -mode=find-gerrit-gophers`) to add missing entries.\r\n\r\nThis is just a quick draft proposal, not necessarily the final API design. If the general direction is well received but there are concerns or improvement suggestions, I'm happy to flesh it out and incorporate feedback. I wouldn't send a CL until I have a solid design.\r\n\r\n/cc @bradfitz @andybons",Go\r\n// (no documentation)\r\nfunc GetPerson(id string) *Person\r\n
27585,"cmd/compile: BCE optimizes less for string than slicePlease answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.11 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nFor `T` is either `string` or `[]int`,  the bounds check for `y[i]` at line 25 should be eliminated.\r\nBut this is only true for `T` is `[]int`.\r\n\r\n### What did you see instead?\r\n\r\nWhen `T` is `string`, the bounds check for y[i] at line 25 is still needed.\r\n\r\n```\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n# command-line-arguments\r\n./main.go:11:15: Found IsInBounds\r\n./main.go:23:7: Found IsSliceInBounds\r\n./main.go:25:15: Found IsInBounds\r\n```\r\n\r\n",Performance|NeedsInvestigation|compiler/runtime,rasky,"Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.11 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n```golang\r\npackage main\r\n\r\ntype T = string\r\n// type T = []int\r\n\r\nfunc NumSameBytes_1(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] needs bound check\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_2(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\t\r\n\ty = y[:len(x)] // this line doesn't work\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] still needs bound check (line 25)\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_3(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tif len(x) <= len(y) { // this line works\r\n\t\tfor i := 0; i < len(x); i++ {\r\n\t\t\tif x[i] != y[i] { // bound check elimated for y[i]\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc main() {}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nFor `T` is either `string` or `[]int`,  the bounds check for `y[i]` at line 25 should be eliminated.\r\nBut this is only true for `T` is `[]int`.\r\n\r\n### What did you see instead?\r\n\r\nWhen `T` is `string`, the bounds check for y[i] at line 25 is still needed.\r\n\r\n```\r\n$ go build -gcflags=""-d=ssa/check_bce/debug=1"" main.go\r\n# command-line-arguments\r\n./main.go:11:15: Found IsInBounds\r\n./main.go:23:7: Found IsSliceInBounds\r\n./main.go:25:15: Found IsInBounds\r\n```\r\n\r\n","golang\r\npackage main\r\n\r\ntype T = string\r\n// type T = []int\r\n\r\nfunc NumSameBytes_1(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] needs bound check\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_2(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\t\r\n\ty = y[:len(x)] // this line doesn't work\r\n\tfor i := 0; i < len(x); i++ {\r\n\t\tif x[i] != y[i] { // y[i] still needs bound check (line 25)\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc NumSameBytes_3(x, y T) int {\r\n\tif len(x) > len(y) {\r\n\t\tx, y = y, x\r\n\t}\r\n\tif len(x) <= len(y) { // this line works\r\n\t\tfor i := 0; i < len(x); i++ {\r\n\t\t\tif x[i] != y[i] { // bound check elimated for y[i]\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn len(x)\r\n}\r\n\r\nfunc main() {}\r\n"
27540,"runtime: crash with ""invalid pc-encoded table"" in TSAN mode### What version of Go are you using (`go version`)?\r\ngo 1.11\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n\r\n### What did you do?\r\nI am running a fairly run-of-the-mill production api server. I have observed one crash so far on this code since upgrading to go1.11 with `fatal error: invalid runtime symbol table`. I am running a library in this server code that periodically captures a cpu, block, and mutex profile every few minutes. The sample rates on the mutex profile is 1/10 and 1 block profile every second.\r\n\r\n\r\n### What did you expect to see?\r\nNo crashes\r\n\r\n\r\n### What did you see instead?\r\n```\r\nruntime: invalid pc-encoded table [...]\r\nfatal error: invalid runtime symbol table\r\ngoroutine 0 [idle]:\r\nruntime.throw(0x10501de, 0x1c)\r\n      /usr/local/go/src/runtime/panic.go:608 +0x72 fp=0xc00064f258 sp=0xc00064f228 pc=0x42c2b2\r\nruntime.pcvalue(0x179ed90, 0x19f6800, 0xXXXXXXXX005ea0e7, 0xaaf94c, 0xc00064f480, 0xXXXXXXXXXXXXXX01, 0xXXXXXXXX00000000)\r\n      /usr/local/go/src/runtime/symtab.go:791 +0x50a fp=0xc00064f300 sp=0xc00064f258 pc=0x449d3a\r\nruntime.funcspdelta(0x179ed90, 0x19f6800, 0xaaf94c, 0xc00064f480, 0xXXXXXXXX00000000)\r\n     /usr/local/go/src/runtime/symtab.go:843 +0x5f fp=0xc00064f370 sp=0xc00064f300 pc=0x44a1ef\r\nruntime.gentraceback(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0x0, 0xc00064f6d8, 0x40, 0x0, 0x0, 0x6, ...)\r\n      /usr/local/go/src/runtime/traceback.go:208 +0x1828 fp=0xc00064f678 sp=0xc00064f370 pc=0x450ca8\r\nruntime.sigprof(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0xc000244380)\r\n      /usr/local/go/src/runtime/proc.go:3823 +0x4b6 fp=0xc00064f928 sp=0xc00064f678 pc=0x436cd6\r\nruntime.sighandler(0xc00000001b, 0xc00064fbf0, 0xc00064fac0, 0xc0004d1080)\r\n      /usr/local/go/src/runtime/signal_sighandler.go:38 +0x73c fp=0xc00064f9b8 sp=0xc00064f928 pc=0x440dec\r\n```\r\nThis crash is reminiscent of a bug I was hoping would be fixed with the 1.11 release related to https://github.com/golang/go/issues/24925.\r\nThe crashes do seem less frequent than when I was running the same code under 1.10.\r\n\r\nCC @heschik and @rhysh ",NeedsInvestigation|FrozenDueToAge|release-blocker|okay-after-beta1,prattmic,"### What version of Go are you using (`go version`)?\r\ngo 1.11\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```go env\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/users/kai.hayashi/go""\r\nGORACE=""""\r\nGOROOT=""/usr/local/go""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nCC=""gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build387775402=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n```\r\n\r\n\r\n### What did you do?\r\nI am running a fairly run-of-the-mill production api server. I have observed one crash so far on this code since upgrading to go1.11 with `fatal error: invalid runtime symbol table`. I am running a library in this server code that periodically captures a cpu, block, and mutex profile every few minutes. The sample rates on the mutex profile is 1/10 and 1 block profile every second.\r\n\r\n\r\n### What did you expect to see?\r\nNo crashes\r\n\r\n\r\n### What did you see instead?\r\n```\r\nruntime: invalid pc-encoded table [...]\r\nfatal error: invalid runtime symbol table\r\ngoroutine 0 [idle]:\r\nruntime.throw(0x10501de, 0x1c)\r\n      /usr/local/go/src/runtime/panic.go:608 +0x72 fp=0xc00064f258 sp=0xc00064f228 pc=0x42c2b2\r\nruntime.pcvalue(0x179ed90, 0x19f6800, 0xXXXXXXXX005ea0e7, 0xaaf94c, 0xc00064f480, 0xXXXXXXXXXXXXXX01, 0xXXXXXXXX00000000)\r\n      /usr/local/go/src/runtime/symtab.go:791 +0x50a fp=0xc00064f300 sp=0xc00064f258 pc=0x449d3a\r\nruntime.funcspdelta(0x179ed90, 0x19f6800, 0xaaf94c, 0xc00064f480, 0xXXXXXXXX00000000)\r\n     /usr/local/go/src/runtime/symtab.go:843 +0x5f fp=0xc00064f370 sp=0xc00064f300 pc=0x44a1ef\r\nruntime.gentraceback(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0x0, 0xc00064f6d8, 0x40, 0x0, 0x0, 0x6, ...)\r\n      /usr/local/go/src/runtime/traceback.go:208 +0x1828 fp=0xc00064f678 sp=0xc00064f370 pc=0x450ca8\r\nruntime.sigprof(0x45d5d5, 0xc0005f3e00, 0x0, 0xc0004d1080, 0xc000244380)\r\n      /usr/local/go/src/runtime/proc.go:3823 +0x4b6 fp=0xc00064f928 sp=0xc00064f678 pc=0x436cd6\r\nruntime.sighandler(0xc00000001b, 0xc00064fbf0, 0xc00064fac0, 0xc0004d1080)\r\n      /usr/local/go/src/runtime/signal_sighandler.go:38 +0x73c fp=0xc00064f9b8 sp=0xc00064f928 pc=0x440dec\r\n```\r\nThis crash is reminiscent of a bug I was hoping would be fixed with the 1.11 release related to https://github.com/golang/go/issues/24925.\r\nThe crashes do seem less frequent than when I was running the same code under 1.10.\r\n\r\nCC @heschik and @rhysh ","go env\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/users/kai.hayashi/go""\r\nGORACE=""""\r\nGOROOT=""/usr/local/go""\r\nGOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""\r\nGCCGO=""gccgo""\r\nCC=""gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build387775402=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""g++""\r\nCGO_ENABLED=""1""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\n"
26904,"cmd/go: allow replacement modules to alias other active modules### What version of Go are you using (`go version`)?\r\nGo tip:\r\n`go version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64`\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (it is not reproduced with `go version go1.11beta2 darwin/amd64`)\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ikorolev/Library/Caches/go-build""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOOS=""darwin""\r\nGOPATH=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/gopath""\r\nGOPROXY=""""\r\nGORACE=""""\r\nGOROOT=""/Users/ikorolev/.gvm/gos/go1.11beta3""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ikorolev/.gvm/gos/go1.11beta3/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/vgo-a-user/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/go-build138999780=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nSorry, no standalone reproduction, since issue is connected with repository forking\r\n\r\nAssume we have a repository A: https://github.com/mwf/vgo-a with the only feature:\r\n\r\n\r\nThan we have a `fork1` https://github.com/mwf/vgo-a-fork1, adding a feature B : \r\n\r\nUnfortunately `fork1` will never be merged to the upstream, just because `a` author don't like this feature.\r\n\r\nIt's important to note, that both `a` and `a-fork1` **don't have** `go.mod`, they are too conservative for that \U0001f604 \r\n\r\nThen we got a happy user, using both projects in his repo.\r\ngo.mod:\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n```\r\nmain.go\r\n\r\nAll just works fine:\r\n```\r\n$ go run .\r\nA: ""A""\r\nB: ""B is a new feature in a-fork1""\r\n```\r\n\r\nHere appears `fork2` https://github.com/mwf/vgo-a-fork2, forked from `fork1`, and fixing some bugs **both** in the upstream and in `fork1`.\r\n\r\nWe use the fork2 with `replace` in our main repo: https://github.com/mwf/vgo-a-user/blob/master/go.mod\r\n\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.2.1\r\n\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1\r\n```\r\n\r\n### What did you expect to see?\r\nBuilding this with `go1.11beta2` works just fine:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version go1.11beta2 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: finding github.com/mwf/vgo-a v0.1.0\r\ngo: finding github.com/mwf/vgo-a-fork1 v0.2.0\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\n### What did you see instead?\r\nBuilding with the tip (and beta3) returns an error:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: github.com/mwf/vgo-a-fork1@v0.2.0 used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n```\r\n\r\n### More comments\r\n\r\nI understand that this case is very specific and arguable - this should not ever happen ideally, but we have the real case here:\r\nhttps://github.com/utrack/clay/blob/master/integration/binding_with_body_and_response/go.mod\r\n\r\nThere is a little workaround, to define `go.mod` at fork2 and make a replace upstream -> fork2_with_go.mod, but it's too dirty :)\r\n```\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.3.0 // version with go.mod\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1 // no go.mod\r\n```\r\nIt works with tip and beta3:\r\n```\r\n$ go version && go run .\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\nIf you decide that the case is too specific and crazy, and you'd like to close as ""**Won't fix**"" - then I assume we should change the error string, because it's **confusing** now:\r\n> go: github.com/mwf/**vgo-a-fork1@v0.2.0** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n\r\nIt should look like this:\r\n> go: github.com/mwf/**vgo-a-fork2@v0.2.1** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1) \r\n\r\nbecause it's `github.com/mwf/vgo-a-fork2` who's to blame for the error.",NeedsInvestigation|modules,matloob,"### What version of Go are you using (`go version`)?\r\nGo tip:\r\n`go version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64`\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes (it is not reproduced with `go version go1.11beta2 darwin/amd64`)\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOCACHE=""/Users/ikorolev/Library/Caches/go-build""\r\nGOEXE=""""\r\nGOFLAGS=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""darwin""\r\nGOOS=""darwin""\r\nGOPATH=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/gopath""\r\nGOPROXY=""""\r\nGORACE=""""\r\nGOROOT=""/Users/ikorolev/.gvm/gos/go1.11beta3""\r\nGOTMPDIR=""""\r\nGOTOOLDIR=""/Users/ikorolev/.gvm/gos/go1.11beta3/pkg/tool/darwin_amd64""\r\nGCCGO=""gccgo""\r\nCC=""clang""\r\nCXX=""clang++""\r\nCGO_ENABLED=""1""\r\nGOMOD=""/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/tmp.cqU8g8OM/vgo-a-user/go.mod""\r\nCGO_CFLAGS=""-g -O2""\r\nCGO_CPPFLAGS=""""\r\nCGO_CXXFLAGS=""-g -O2""\r\nCGO_FFLAGS=""-g -O2""\r\nCGO_LDFLAGS=""-g -O2""\r\nPKG_CONFIG=""pkg-config""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_b/d1934m9s587_8t_6ngv3hnc00000gp/T/go-build138999780=/tmp/go-build -gno-record-gcc-switches -fno-common""\r\n```\r\n\r\n### What did you do?\r\n\r\nSorry, no standalone reproduction, since issue is connected with repository forking\r\n\r\nAssume we have a repository A: https://github.com/mwf/vgo-a with the only feature:\r\n```go\r\npackage a\r\n\r\nvar A = ""A""\r\n```\r\n\r\nThan we have a `fork1` https://github.com/mwf/vgo-a-fork1, adding a feature B : \r\n```go\r\npackage a\r\n\r\nvar B = ""B is a new feature in a-fork1""\r\n```\r\nUnfortunately `fork1` will never be merged to the upstream, just because `a` author don't like this feature.\r\n\r\nIt's important to note, that both `a` and `a-fork1` **don't have** `go.mod`, they are too conservative for that \U0001f604 \r\n\r\nThen we got a happy user, using both projects in his repo.\r\ngo.mod:\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n```\r\nmain.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""fmt""\r\n\r\n\t""github.com/mwf/vgo-a""\r\n\ta_fork ""github.com/mwf/vgo-a-fork1""\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Printf(""A: %q\\n"", a.A)\r\n\tfmt.Printf(""B: %q\\n"", a_fork.B)\r\n}\r\n```\r\nAll just works fine:\r\n```\r\n$ go run .\r\nA: ""A""\r\nB: ""B is a new feature in a-fork1""\r\n```\r\n\r\nHere appears `fork2` https://github.com/mwf/vgo-a-fork2, forked from `fork1`, and fixing some bugs **both** in the upstream and in `fork1`.\r\n\r\nWe use the fork2 with `replace` in our main repo: https://github.com/mwf/vgo-a-user/blob/master/go.mod\r\n\r\n```\r\nmodule github.com/mwf/vgo-a-user\r\n\r\nrequire (\r\n\tgithub.com/mwf/vgo-a v0.1.0\r\n\tgithub.com/mwf/vgo-a-fork1 v0.2.0\r\n)\r\n\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.2.1\r\n\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1\r\n```\r\n\r\n### What did you expect to see?\r\nBuilding this with `go1.11beta2` works just fine:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version go1.11beta2 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: finding github.com/mwf/vgo-a v0.1.0\r\ngo: finding github.com/mwf/vgo-a-fork1 v0.2.0\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\n### What did you see instead?\r\nBuilding with the tip (and beta3) returns an error:\r\n```\r\ncd `mktemp -d`\r\ngit clone git@github.com:mwf/vgo-a-user.git .\r\ngo version && go run .\r\n```\r\nOutput:\r\n```\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\ngo: finding github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: downloading github.com/mwf/vgo-a-fork2 v0.2.1\r\ngo: github.com/mwf/vgo-a-fork1@v0.2.0 used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n```\r\n\r\n### More comments\r\n\r\nI understand that this case is very specific and arguable - this should not ever happen ideally, but we have the real case here:\r\nhttps://github.com/utrack/clay/blob/master/integration/binding_with_body_and_response/go.mod\r\n\r\nThere is a little workaround, to define `go.mod` at fork2 and make a replace upstream -> fork2_with_go.mod, but it's too dirty :)\r\n```\r\nreplace github.com/mwf/vgo-a => github.com/mwf/vgo-a-fork2 v0.3.0 // version with go.mod\r\nreplace github.com/mwf/vgo-a-fork1 => github.com/mwf/vgo-a-fork2 v0.2.1 // no go.mod\r\n```\r\nIt works with tip and beta3:\r\n```\r\n$ go version && go run .\r\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\r\nA: ""A, fixed in a-fork2""\r\nB: ""B, fixed in a-fork2""\r\n```\r\n\r\nIf you decide that the case is too specific and crazy, and you'd like to close as ""**Won't fix**"" - then I assume we should change the error string, because it's **confusing** now:\r\n> go: github.com/mwf/**vgo-a-fork1@v0.2.0** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1)\r\n\r\nIt should look like this:\r\n> go: github.com/mwf/**vgo-a-fork2@v0.2.1** used for two different module paths (github.com/mwf/vgo-a and github.com/mwf/vgo-a-fork1) \r\n\r\nbecause it's `github.com/mwf/vgo-a-fork2` who's to blame for the error.","go\r\npackage a\r\n\r\nvar A = ""A""\r\n"
25965,"os: remove 5ms sleep on Windows in (*Process).WaitIn our Windows implementation of os/Process.Wait, we always do a 5 millisecond sleep:\r\n\r\n\r\n\r\nSleeps in code are always gross. They're either too fast (and still flaky) or too slow (incurring extra delays on everybody when not needed).\r\n\r\nThis bug is about figuring out what we're doing wrong on Windows that made us need that sleep in the first place.\r\n\r\nhttps://go-review.googlesource.com/c/go/+/84175 was one attempt to remove it, but the goal then was fixing a Windows XP test failure (for #17245), and it didn't fix the XP failure. We no longer support XP, though, so maybe that CL is okay now.\r\n\r\nBut maybe it's not correct.\r\n\r\nThere was also https://golang.org/cl/84896 from @johnsonj to use jobs to wait for process completion on windows, but it was ""not working as expected on Server 2008"" and @alexbrainman had concerns in https://github.com/golang/go/issues/17245#issuecomment-353811567 (that whole thread is worth a read, even if it's mostly about debugging an XP issue, which *might've* been related to this bug.)\r\n",Performance|help wanted|OS-Windows|NeedsFix|early-in-cycle,qmuntal,"In our Windows implementation of os/Process.Wait, we always do a 5 millisecond sleep:\r\n\r\n```go\r\nfunc (p *Process) wait() (ps *ProcessState, err error) {\r\n\thandle := atomic.LoadUintptr(&p.handle)\r\n\ts, e := syscall.WaitForSingleObject(syscall.Handle(handle), syscall.INFINITE)\r\n\tswitch s {\r\n\tcase syscall.WAIT_OBJECT_0:\r\n\t\tbreak\r\n\tcase syscall.WAIT_FAILED:\r\n\t\treturn nil, NewSyscallError(""WaitForSingleObject"", e)\r\n\tdefault:\r\n\t\treturn nil, errors.New(""os: unexpected result from WaitForSingleObject"")\r\n\t}\r\n\tvar ec uint32\r\n\te = syscall.GetExitCodeProcess(syscall.Handle(handle), &ec)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetExitCodeProcess"", e)\r\n\t}\r\n\tvar u syscall.Rusage\r\n\te = syscall.GetProcessTimes(syscall.Handle(handle), &u.CreationTime, &u.ExitTime, &u.KernelTime, &u.UserTime)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetProcessTimes"", e)\r\n\t}\r\n\tp.setDone()\r\n\t// NOTE(brainman): It seems that sometimes process is not dead\r\n\t// when WaitForSingleObject returns. But we do not know any\r\n\t// other way to wait for it. Sleeping for a while seems to do\r\n\t// the trick sometimes. So we will sleep and smell the roses.\r\n\tdefer time.Sleep(5 * time.Millisecond)\r\n\tdefer p.Release()\r\n\treturn &ProcessState{p.Pid, syscall.WaitStatus{ExitCode: ec}, &u}, nil\r\n}\r\n```\r\n\r\nSleeps in code are always gross. They're either too fast (and still flaky) or too slow (incurring extra delays on everybody when not needed).\r\n\r\nThis bug is about figuring out what we're doing wrong on Windows that made us need that sleep in the first place.\r\n\r\nhttps://go-review.googlesource.com/c/go/+/84175 was one attempt to remove it, but the goal then was fixing a Windows XP test failure (for #17245), and it didn't fix the XP failure. We no longer support XP, though, so maybe that CL is okay now.\r\n\r\nBut maybe it's not correct.\r\n\r\nThere was also https://golang.org/cl/84896 from @johnsonj to use jobs to wait for process completion on windows, but it was ""not working as expected on Server 2008"" and @alexbrainman had concerns in https://github.com/golang/go/issues/17245#issuecomment-353811567 (that whole thread is worth a read, even if it's mostly about debugging an XP issue, which *might've* been related to this bug.)\r\n","go\r\nfunc (p *Process) wait() (ps *ProcessState, err error) {\r\n\thandle := atomic.LoadUintptr(&p.handle)\r\n\ts, e := syscall.WaitForSingleObject(syscall.Handle(handle), syscall.INFINITE)\r\n\tswitch s {\r\n\tcase syscall.WAIT_OBJECT_0:\r\n\t\tbreak\r\n\tcase syscall.WAIT_FAILED:\r\n\t\treturn nil, NewSyscallError(""WaitForSingleObject"", e)\r\n\tdefault:\r\n\t\treturn nil, errors.New(""os: unexpected result from WaitForSingleObject"")\r\n\t}\r\n\tvar ec uint32\r\n\te = syscall.GetExitCodeProcess(syscall.Handle(handle), &ec)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetExitCodeProcess"", e)\r\n\t}\r\n\tvar u syscall.Rusage\r\n\te = syscall.GetProcessTimes(syscall.Handle(handle), &u.CreationTime, &u.ExitTime, &u.KernelTime, &u.UserTime)\r\n\tif e != nil {\r\n\t\treturn nil, NewSyscallError(""GetProcessTimes"", e)\r\n\t}\r\n\tp.setDone()\r\n\t// NOTE(brainman): It seems that sometimes process is not dead\r\n\t// when WaitForSingleObject returns. But we do not know any\r\n\t// other way to wait for it. Sleeping for a while seems to do\r\n\t// the trick sometimes. So we will sleep and smell the roses.\r\n\tdefer time.Sleep(5 * time.Millisecond)\r\n\tdefer p.Release()\r\n\treturn &ProcessState{p.Pid, syscall.WaitStatus{ExitCode: ec}, &u}, nil\r\n}\r\n"
25838,"cmd/compile: make alias decls work correctly under all circumstances[edit: This is now the umbrella issue for work on alias declarations. This includes parameterized alias declarations; see issue #46477. It also includes proper names for aliases in error messages.]\r\n\r\nThe original fix for #18640 was only partially correct. However, removing that incorrect code leads to another cycle related issue for the test case:\r\n\r\n~~Left the original, partially correct code in place for now as it's not wrong, it just doesn't cover the expected cases and it appears to circumvent this issue.~~\r\n\r\n~~Marking for 1.11 if we get to it but it's not a showstopper.~~\r\n\r\nCommented out this test case in test/fixedbugs/issue18640.go for now.",NeedsFix|early-in-cycle,griesemer,"[edit: This is now the umbrella issue for work on alias declarations. This includes parameterized alias declarations; see issue #46477. It also includes proper names for aliases in error messages.]\r\n\r\nThe original fix for #18640 was only partially correct. However, removing that incorrect code leads to another cycle related issue for the test case:\r\n```Go\r\ntype (\r\n\te = f\r\n\tf = g\r\n\tg = []h\r\n\th i\r\n\ti = j\r\n\tj = e\r\n)\r\n```\r\n~~Left the original, partially correct code in place for now as it's not wrong, it just doesn't cover the expected cases and it appears to circumvent this issue.~~\r\n\r\n~~Marking for 1.11 if we get to it but it's not a showstopper.~~\r\n\r\nCommented out this test case in test/fixedbugs/issue18640.go for now.",Go\r\ntype (\r\n\te = f\r\n\tf = g\r\n\tg = []h\r\n\th i\r\n\ti = j\r\n\tj = e\r\n)\r\n
25448,"spec: guarantee non-nil return value from recoverCalling `panic` with a `nil` panic value is allowed in Go 1, but weird.\r\n\r\nAlmost all code checks for panics with:\r\n\r\n\r\n\r\n... which is not correct in the case of `panic(nil)`.\r\n\r\nThe proper way is more like:\r\n\r\n\r\n\r\n\r\n**Proposal**: make the runtime `panic` function promote its panic value from `nil` to something like a `runtime.NilPanic` global value of private, unassignable type:\r\n\r\n\r\n\r\nProbably Go2.\r\n",LanguageChange|v2|Proposal|Proposal-Accepted|NeedsFix,rsc,"Calling `panic` with a `nil` panic value is allowed in Go 1, but weird.\r\n\r\nAlmost all code checks for panics with:\r\n\r\n```go\r\n     defer func() {\r\n        if e := recover(); e != nil { ... }\r\n     }()\r\n```\r\n\r\n... which is not correct in the case of `panic(nil)`.\r\n\r\nThe proper way is more like:\r\n\r\n\r\n```go\r\n     panicked := true\r\n     defer func() {\r\n        if panicked {\r\n              e := recover()\r\n              ...\r\n        }\r\n     }()\r\n     ...\r\n     panicked = false\r\n     return\r\n     ....\r\n     panicked = false\r\n     return\r\n```\r\n\r\n**Proposal**: make the runtime `panic` function promote its panic value from `nil` to something like a `runtime.NilPanic` global value of private, unassignable type:\r\n\r\n```go\r\npackage runtime\r\n\r\ntype nilPanic struct{}\r\n\r\n// NilPanic is the value returned by recover when code panics with a nil value.\r\nvar NilPanic nilPanic\r\n```\r\n\r\nProbably Go2.\r\n",go\r\n     defer func() {\r\n        if e := recover(); e != nil { ... }\r\n     }()\r\n
18478,"database/sql: missing escape functions### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/nefthy/go-test/""\r\nGORACE=""""\r\nGOROOT=""/usr/lib/go""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nCC=""x86_64-pc-linux-gnu-gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/nefthy/go-test/tmp/go-build451484149=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""x86_64-pc-linux-gnu-g++""\r\nCGO_ENABLED=""1""\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThere are situations when strings need to be escaped in queries that can not be done with placeholders. An example the following queries cannot be expressed with ? placeholders:\r\n\r\n\r\n\r\nUsing Sprintf is no option, since the identifiers need to be properly quoted. The quoting and escaping is inherently vendor specific and may even depend on configuration on a per database/connection basis (hello there MySql...).  \r\n\r\n### What did you expect to see?\r\n\r\nThe driver must export Quoting which are passed along by the database/sql Api. As far as I can tell the folling functions are needed\r\n\r\n- QuoteString: quotes and escapes a string so it can be used as a string literal (ex: mysql_real_escape_string)\r\n- QuoteIdentifier: quote and escapes a string so it can be used as an identifier*\r\n- QuoteBinary: quote and escapes binary data (ex: PQescapeBytea)\r\n\r\n* I am not sure if all identifiers are quoted consistently among all Databases. It might be that separate functions are needed depending on the type of the identifier.\r\n\r\n### What did you see instead?\r\n\r\nNo escaping/quoting functions",Thinking|FeatureRequest,kardianos,"### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7.4 linux/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=""amd64""\r\nGOBIN=""""\r\nGOEXE=""""\r\nGOHOSTARCH=""amd64""\r\nGOHOSTOS=""linux""\r\nGOOS=""linux""\r\nGOPATH=""/home/nefthy/go-test/""\r\nGORACE=""""\r\nGOROOT=""/usr/lib/go""\r\nGOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""\r\nCC=""x86_64-pc-linux-gnu-gcc""\r\nGOGCCFLAGS=""-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/nefthy/go-test/tmp/go-build451484149=/tmp/go-build -gno-record-gcc-switches""\r\nCXX=""x86_64-pc-linux-gnu-g++""\r\nCGO_ENABLED=""1""\r\n\r\n\r\n\r\n### What did you do?\r\n\r\nThere are situations when strings need to be escaped in queries that can not be done with placeholders. An example the following queries cannot be expressed with ? placeholders:\r\n\r\n```sql\r\nSELECT id, ? FROM table\r\n-- Must be escaped as an identifier\r\nSELECT id FROM ?\r\n-- Also identifier quoting\r\nSELECT id FROM table WHERE ? LIKE ?\r\n-- With either the first or second parameter being a column reference\r\n```\r\n\r\nUsing Sprintf is no option, since the identifiers need to be properly quoted. The quoting and escaping is inherently vendor specific and may even depend on configuration on a per database/connection basis (hello there MySql...).  \r\n\r\n### What did you expect to see?\r\n\r\nThe driver must export Quoting which are passed along by the database/sql Api. As far as I can tell the folling functions are needed\r\n\r\n- QuoteString: quotes and escapes a string so it can be used as a string literal (ex: mysql_real_escape_string)\r\n- QuoteIdentifier: quote and escapes a string so it can be used as an identifier*\r\n- QuoteBinary: quote and escapes binary data (ex: PQescapeBytea)\r\n\r\n* I am not sure if all identifiers are quoted consistently among all Databases. It might be that separate functions are needed depending on the type of the identifier.\r\n\r\n### What did you see instead?\r\n\r\nNo escaping/quoting functions","sql\r\nSELECT id, ? FROM table\r\n-- Must be escaped as an identifier\r\nSELECT id FROM ?\r\n-- Also identifier quoting\r\nSELECT id FROM table WHERE ? LIKE ?\r\n-- With either the first or second parameter being a column reference\r\n"
